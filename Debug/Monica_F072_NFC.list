
Monica_F072_NFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ae0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b14  08013ba0  08013ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080146b4  080146b4  00016a5c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080146b4  080146b4  00016a5c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080146b4  080146b4  00016a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080146b4  080146b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080146b8  080146b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a5c  20000000  080146bc  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b30  20000a5c  08015118  00016a5c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000358c  08015118  0001758c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00016a5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ef91  00000000  00000000  00016a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000cd50  00000000  00000000  00065a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001d241  00000000  00000000  00072765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002840  00000000  00000000  0008f9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002db4  00000000  00000000  000921e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031436  00000000  00000000  00094f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00059142  00000000  00000000  000c63d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c20  00000000  00000000  0011f514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001e5134  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000739c  00000000  00000000  001e5178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001ec514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000a5c 	.word	0x20000a5c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08013b88 	.word	0x08013b88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000a60 	.word	0x20000a60
 8000104:	08013b88 	.word	0x08013b88

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	@ 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	@ 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	@ 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_llsr>:
 8000454:	40d0      	lsrs	r0, r2
 8000456:	000b      	movs	r3, r1
 8000458:	40d1      	lsrs	r1, r2
 800045a:	469c      	mov	ip, r3
 800045c:	3a20      	subs	r2, #32
 800045e:	40d3      	lsrs	r3, r2
 8000460:	4318      	orrs	r0, r3
 8000462:	4252      	negs	r2, r2
 8000464:	4663      	mov	r3, ip
 8000466:	4093      	lsls	r3, r2
 8000468:	4318      	orrs	r0, r3
 800046a:	4770      	bx	lr

0800046c <__aeabi_llsl>:
 800046c:	4091      	lsls	r1, r2
 800046e:	0003      	movs	r3, r0
 8000470:	4090      	lsls	r0, r2
 8000472:	469c      	mov	ip, r3
 8000474:	3a20      	subs	r2, #32
 8000476:	4093      	lsls	r3, r2
 8000478:	4319      	orrs	r1, r3
 800047a:	4252      	negs	r2, r2
 800047c:	4663      	mov	r3, ip
 800047e:	40d3      	lsrs	r3, r2
 8000480:	4319      	orrs	r1, r3
 8000482:	4770      	bx	lr

08000484 <__aeabi_d2uiz>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	2200      	movs	r2, #0
 8000488:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <__aeabi_d2uiz+0x38>)
 800048a:	0004      	movs	r4, r0
 800048c:	000d      	movs	r5, r1
 800048e:	f000 ffa5 	bl	80013dc <__aeabi_dcmpge>
 8000492:	2800      	cmp	r0, #0
 8000494:	d104      	bne.n	80004a0 <__aeabi_d2uiz+0x1c>
 8000496:	0020      	movs	r0, r4
 8000498:	0029      	movs	r1, r5
 800049a:	f000 ff01 	bl	80012a0 <__aeabi_d2iz>
 800049e:	bd70      	pop	{r4, r5, r6, pc}
 80004a0:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <__aeabi_d2uiz+0x38>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	0020      	movs	r0, r4
 80004a6:	0029      	movs	r1, r5
 80004a8:	f000 faf0 	bl	8000a8c <__aeabi_dsub>
 80004ac:	f000 fef8 	bl	80012a0 <__aeabi_d2iz>
 80004b0:	2380      	movs	r3, #128	@ 0x80
 80004b2:	061b      	lsls	r3, r3, #24
 80004b4:	469c      	mov	ip, r3
 80004b6:	4460      	add	r0, ip
 80004b8:	e7f1      	b.n	800049e <__aeabi_d2uiz+0x1a>
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	41e00000 	.word	0x41e00000

080004c0 <__aeabi_dmul>:
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	4657      	mov	r7, sl
 80004c4:	464e      	mov	r6, r9
 80004c6:	46de      	mov	lr, fp
 80004c8:	4645      	mov	r5, r8
 80004ca:	b5e0      	push	{r5, r6, r7, lr}
 80004cc:	001f      	movs	r7, r3
 80004ce:	030b      	lsls	r3, r1, #12
 80004d0:	0b1b      	lsrs	r3, r3, #12
 80004d2:	0016      	movs	r6, r2
 80004d4:	469a      	mov	sl, r3
 80004d6:	0fca      	lsrs	r2, r1, #31
 80004d8:	004b      	lsls	r3, r1, #1
 80004da:	0004      	movs	r4, r0
 80004dc:	4691      	mov	r9, r2
 80004de:	b085      	sub	sp, #20
 80004e0:	0d5b      	lsrs	r3, r3, #21
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dmul+0x26>
 80004e4:	e1cf      	b.n	8000886 <__aeabi_dmul+0x3c6>
 80004e6:	4acd      	ldr	r2, [pc, #820]	@ (800081c <__aeabi_dmul+0x35c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d055      	beq.n	8000598 <__aeabi_dmul+0xd8>
 80004ec:	4651      	mov	r1, sl
 80004ee:	0f42      	lsrs	r2, r0, #29
 80004f0:	00c9      	lsls	r1, r1, #3
 80004f2:	430a      	orrs	r2, r1
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	0409      	lsls	r1, r1, #16
 80004f8:	4311      	orrs	r1, r2
 80004fa:	00c2      	lsls	r2, r0, #3
 80004fc:	4690      	mov	r8, r2
 80004fe:	4ac8      	ldr	r2, [pc, #800]	@ (8000820 <__aeabi_dmul+0x360>)
 8000500:	468a      	mov	sl, r1
 8000502:	4693      	mov	fp, r2
 8000504:	449b      	add	fp, r3
 8000506:	2300      	movs	r3, #0
 8000508:	2500      	movs	r5, #0
 800050a:	9302      	str	r3, [sp, #8]
 800050c:	033c      	lsls	r4, r7, #12
 800050e:	007b      	lsls	r3, r7, #1
 8000510:	0ffa      	lsrs	r2, r7, #31
 8000512:	9601      	str	r6, [sp, #4]
 8000514:	0b24      	lsrs	r4, r4, #12
 8000516:	0d5b      	lsrs	r3, r3, #21
 8000518:	9200      	str	r2, [sp, #0]
 800051a:	d100      	bne.n	800051e <__aeabi_dmul+0x5e>
 800051c:	e188      	b.n	8000830 <__aeabi_dmul+0x370>
 800051e:	4abf      	ldr	r2, [pc, #764]	@ (800081c <__aeabi_dmul+0x35c>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d100      	bne.n	8000526 <__aeabi_dmul+0x66>
 8000524:	e092      	b.n	800064c <__aeabi_dmul+0x18c>
 8000526:	4abe      	ldr	r2, [pc, #760]	@ (8000820 <__aeabi_dmul+0x360>)
 8000528:	4694      	mov	ip, r2
 800052a:	4463      	add	r3, ip
 800052c:	449b      	add	fp, r3
 800052e:	2d0a      	cmp	r5, #10
 8000530:	dc42      	bgt.n	80005b8 <__aeabi_dmul+0xf8>
 8000532:	00e4      	lsls	r4, r4, #3
 8000534:	0f73      	lsrs	r3, r6, #29
 8000536:	4323      	orrs	r3, r4
 8000538:	2480      	movs	r4, #128	@ 0x80
 800053a:	4649      	mov	r1, r9
 800053c:	0424      	lsls	r4, r4, #16
 800053e:	431c      	orrs	r4, r3
 8000540:	00f3      	lsls	r3, r6, #3
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	9b00      	ldr	r3, [sp, #0]
 8000546:	2000      	movs	r0, #0
 8000548:	4059      	eors	r1, r3
 800054a:	b2cb      	uxtb	r3, r1
 800054c:	9303      	str	r3, [sp, #12]
 800054e:	2d02      	cmp	r5, #2
 8000550:	dc00      	bgt.n	8000554 <__aeabi_dmul+0x94>
 8000552:	e094      	b.n	800067e <__aeabi_dmul+0x1be>
 8000554:	2301      	movs	r3, #1
 8000556:	40ab      	lsls	r3, r5
 8000558:	001d      	movs	r5, r3
 800055a:	23a6      	movs	r3, #166	@ 0xa6
 800055c:	002a      	movs	r2, r5
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	401a      	ands	r2, r3
 8000562:	421d      	tst	r5, r3
 8000564:	d000      	beq.n	8000568 <__aeabi_dmul+0xa8>
 8000566:	e229      	b.n	80009bc <__aeabi_dmul+0x4fc>
 8000568:	2390      	movs	r3, #144	@ 0x90
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	421d      	tst	r5, r3
 800056e:	d100      	bne.n	8000572 <__aeabi_dmul+0xb2>
 8000570:	e24d      	b.n	8000a0e <__aeabi_dmul+0x54e>
 8000572:	2300      	movs	r3, #0
 8000574:	2480      	movs	r4, #128	@ 0x80
 8000576:	4699      	mov	r9, r3
 8000578:	0324      	lsls	r4, r4, #12
 800057a:	4ba8      	ldr	r3, [pc, #672]	@ (800081c <__aeabi_dmul+0x35c>)
 800057c:	0010      	movs	r0, r2
 800057e:	464a      	mov	r2, r9
 8000580:	051b      	lsls	r3, r3, #20
 8000582:	4323      	orrs	r3, r4
 8000584:	07d2      	lsls	r2, r2, #31
 8000586:	4313      	orrs	r3, r2
 8000588:	0019      	movs	r1, r3
 800058a:	b005      	add	sp, #20
 800058c:	bcf0      	pop	{r4, r5, r6, r7}
 800058e:	46bb      	mov	fp, r7
 8000590:	46b2      	mov	sl, r6
 8000592:	46a9      	mov	r9, r5
 8000594:	46a0      	mov	r8, r4
 8000596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000598:	4652      	mov	r2, sl
 800059a:	4302      	orrs	r2, r0
 800059c:	4690      	mov	r8, r2
 800059e:	d000      	beq.n	80005a2 <__aeabi_dmul+0xe2>
 80005a0:	e1ac      	b.n	80008fc <__aeabi_dmul+0x43c>
 80005a2:	469b      	mov	fp, r3
 80005a4:	2302      	movs	r3, #2
 80005a6:	4692      	mov	sl, r2
 80005a8:	2508      	movs	r5, #8
 80005aa:	9302      	str	r3, [sp, #8]
 80005ac:	e7ae      	b.n	800050c <__aeabi_dmul+0x4c>
 80005ae:	9b00      	ldr	r3, [sp, #0]
 80005b0:	46a2      	mov	sl, r4
 80005b2:	4699      	mov	r9, r3
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	4698      	mov	r8, r3
 80005b8:	9b02      	ldr	r3, [sp, #8]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d100      	bne.n	80005c0 <__aeabi_dmul+0x100>
 80005be:	e1ca      	b.n	8000956 <__aeabi_dmul+0x496>
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dmul+0x106>
 80005c4:	e192      	b.n	80008ec <__aeabi_dmul+0x42c>
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d110      	bne.n	80005ec <__aeabi_dmul+0x12c>
 80005ca:	2300      	movs	r3, #0
 80005cc:	2400      	movs	r4, #0
 80005ce:	2200      	movs	r2, #0
 80005d0:	e7d4      	b.n	800057c <__aeabi_dmul+0xbc>
 80005d2:	2201      	movs	r2, #1
 80005d4:	087b      	lsrs	r3, r7, #1
 80005d6:	403a      	ands	r2, r7
 80005d8:	4313      	orrs	r3, r2
 80005da:	4652      	mov	r2, sl
 80005dc:	07d2      	lsls	r2, r2, #31
 80005de:	4313      	orrs	r3, r2
 80005e0:	4698      	mov	r8, r3
 80005e2:	4653      	mov	r3, sl
 80005e4:	085b      	lsrs	r3, r3, #1
 80005e6:	469a      	mov	sl, r3
 80005e8:	9b03      	ldr	r3, [sp, #12]
 80005ea:	4699      	mov	r9, r3
 80005ec:	465b      	mov	r3, fp
 80005ee:	1c58      	adds	r0, r3, #1
 80005f0:	2380      	movs	r3, #128	@ 0x80
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	445b      	add	r3, fp
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	dc00      	bgt.n	80005fc <__aeabi_dmul+0x13c>
 80005fa:	e1b1      	b.n	8000960 <__aeabi_dmul+0x4a0>
 80005fc:	4642      	mov	r2, r8
 80005fe:	0752      	lsls	r2, r2, #29
 8000600:	d00b      	beq.n	800061a <__aeabi_dmul+0x15a>
 8000602:	220f      	movs	r2, #15
 8000604:	4641      	mov	r1, r8
 8000606:	400a      	ands	r2, r1
 8000608:	2a04      	cmp	r2, #4
 800060a:	d006      	beq.n	800061a <__aeabi_dmul+0x15a>
 800060c:	4642      	mov	r2, r8
 800060e:	1d11      	adds	r1, r2, #4
 8000610:	4541      	cmp	r1, r8
 8000612:	4192      	sbcs	r2, r2
 8000614:	4688      	mov	r8, r1
 8000616:	4252      	negs	r2, r2
 8000618:	4492      	add	sl, r2
 800061a:	4652      	mov	r2, sl
 800061c:	01d2      	lsls	r2, r2, #7
 800061e:	d506      	bpl.n	800062e <__aeabi_dmul+0x16e>
 8000620:	4652      	mov	r2, sl
 8000622:	4b80      	ldr	r3, [pc, #512]	@ (8000824 <__aeabi_dmul+0x364>)
 8000624:	401a      	ands	r2, r3
 8000626:	2380      	movs	r3, #128	@ 0x80
 8000628:	4692      	mov	sl, r2
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	18c3      	adds	r3, r0, r3
 800062e:	4a7e      	ldr	r2, [pc, #504]	@ (8000828 <__aeabi_dmul+0x368>)
 8000630:	4293      	cmp	r3, r2
 8000632:	dd00      	ble.n	8000636 <__aeabi_dmul+0x176>
 8000634:	e18f      	b.n	8000956 <__aeabi_dmul+0x496>
 8000636:	4642      	mov	r2, r8
 8000638:	08d1      	lsrs	r1, r2, #3
 800063a:	4652      	mov	r2, sl
 800063c:	0752      	lsls	r2, r2, #29
 800063e:	430a      	orrs	r2, r1
 8000640:	4651      	mov	r1, sl
 8000642:	055b      	lsls	r3, r3, #21
 8000644:	024c      	lsls	r4, r1, #9
 8000646:	0b24      	lsrs	r4, r4, #12
 8000648:	0d5b      	lsrs	r3, r3, #21
 800064a:	e797      	b.n	800057c <__aeabi_dmul+0xbc>
 800064c:	4b73      	ldr	r3, [pc, #460]	@ (800081c <__aeabi_dmul+0x35c>)
 800064e:	4326      	orrs	r6, r4
 8000650:	469c      	mov	ip, r3
 8000652:	44e3      	add	fp, ip
 8000654:	2e00      	cmp	r6, #0
 8000656:	d100      	bne.n	800065a <__aeabi_dmul+0x19a>
 8000658:	e16f      	b.n	800093a <__aeabi_dmul+0x47a>
 800065a:	2303      	movs	r3, #3
 800065c:	4649      	mov	r1, r9
 800065e:	431d      	orrs	r5, r3
 8000660:	9b00      	ldr	r3, [sp, #0]
 8000662:	4059      	eors	r1, r3
 8000664:	b2cb      	uxtb	r3, r1
 8000666:	9303      	str	r3, [sp, #12]
 8000668:	2d0a      	cmp	r5, #10
 800066a:	dd00      	ble.n	800066e <__aeabi_dmul+0x1ae>
 800066c:	e133      	b.n	80008d6 <__aeabi_dmul+0x416>
 800066e:	2301      	movs	r3, #1
 8000670:	40ab      	lsls	r3, r5
 8000672:	001d      	movs	r5, r3
 8000674:	2303      	movs	r3, #3
 8000676:	9302      	str	r3, [sp, #8]
 8000678:	2288      	movs	r2, #136	@ 0x88
 800067a:	422a      	tst	r2, r5
 800067c:	d197      	bne.n	80005ae <__aeabi_dmul+0xee>
 800067e:	4642      	mov	r2, r8
 8000680:	4643      	mov	r3, r8
 8000682:	0412      	lsls	r2, r2, #16
 8000684:	0c12      	lsrs	r2, r2, #16
 8000686:	0016      	movs	r6, r2
 8000688:	9801      	ldr	r0, [sp, #4]
 800068a:	0c1d      	lsrs	r5, r3, #16
 800068c:	0c03      	lsrs	r3, r0, #16
 800068e:	0400      	lsls	r0, r0, #16
 8000690:	0c00      	lsrs	r0, r0, #16
 8000692:	4346      	muls	r6, r0
 8000694:	46b4      	mov	ip, r6
 8000696:	001e      	movs	r6, r3
 8000698:	436e      	muls	r6, r5
 800069a:	9600      	str	r6, [sp, #0]
 800069c:	0016      	movs	r6, r2
 800069e:	0007      	movs	r7, r0
 80006a0:	435e      	muls	r6, r3
 80006a2:	4661      	mov	r1, ip
 80006a4:	46b0      	mov	r8, r6
 80006a6:	436f      	muls	r7, r5
 80006a8:	0c0e      	lsrs	r6, r1, #16
 80006aa:	44b8      	add	r8, r7
 80006ac:	4446      	add	r6, r8
 80006ae:	42b7      	cmp	r7, r6
 80006b0:	d905      	bls.n	80006be <__aeabi_dmul+0x1fe>
 80006b2:	2180      	movs	r1, #128	@ 0x80
 80006b4:	0249      	lsls	r1, r1, #9
 80006b6:	4688      	mov	r8, r1
 80006b8:	9f00      	ldr	r7, [sp, #0]
 80006ba:	4447      	add	r7, r8
 80006bc:	9700      	str	r7, [sp, #0]
 80006be:	4661      	mov	r1, ip
 80006c0:	0409      	lsls	r1, r1, #16
 80006c2:	0c09      	lsrs	r1, r1, #16
 80006c4:	0c37      	lsrs	r7, r6, #16
 80006c6:	0436      	lsls	r6, r6, #16
 80006c8:	468c      	mov	ip, r1
 80006ca:	0031      	movs	r1, r6
 80006cc:	4461      	add	r1, ip
 80006ce:	9101      	str	r1, [sp, #4]
 80006d0:	0011      	movs	r1, r2
 80006d2:	0c26      	lsrs	r6, r4, #16
 80006d4:	0424      	lsls	r4, r4, #16
 80006d6:	0c24      	lsrs	r4, r4, #16
 80006d8:	4361      	muls	r1, r4
 80006da:	468c      	mov	ip, r1
 80006dc:	0021      	movs	r1, r4
 80006de:	4369      	muls	r1, r5
 80006e0:	4689      	mov	r9, r1
 80006e2:	4661      	mov	r1, ip
 80006e4:	0c09      	lsrs	r1, r1, #16
 80006e6:	4688      	mov	r8, r1
 80006e8:	4372      	muls	r2, r6
 80006ea:	444a      	add	r2, r9
 80006ec:	4442      	add	r2, r8
 80006ee:	4375      	muls	r5, r6
 80006f0:	4591      	cmp	r9, r2
 80006f2:	d903      	bls.n	80006fc <__aeabi_dmul+0x23c>
 80006f4:	2180      	movs	r1, #128	@ 0x80
 80006f6:	0249      	lsls	r1, r1, #9
 80006f8:	4688      	mov	r8, r1
 80006fa:	4445      	add	r5, r8
 80006fc:	0c11      	lsrs	r1, r2, #16
 80006fe:	4688      	mov	r8, r1
 8000700:	4661      	mov	r1, ip
 8000702:	0409      	lsls	r1, r1, #16
 8000704:	0c09      	lsrs	r1, r1, #16
 8000706:	468c      	mov	ip, r1
 8000708:	0412      	lsls	r2, r2, #16
 800070a:	4462      	add	r2, ip
 800070c:	18b9      	adds	r1, r7, r2
 800070e:	9102      	str	r1, [sp, #8]
 8000710:	4651      	mov	r1, sl
 8000712:	0c09      	lsrs	r1, r1, #16
 8000714:	468c      	mov	ip, r1
 8000716:	4651      	mov	r1, sl
 8000718:	040f      	lsls	r7, r1, #16
 800071a:	0c3f      	lsrs	r7, r7, #16
 800071c:	0039      	movs	r1, r7
 800071e:	4341      	muls	r1, r0
 8000720:	4445      	add	r5, r8
 8000722:	4688      	mov	r8, r1
 8000724:	4661      	mov	r1, ip
 8000726:	4341      	muls	r1, r0
 8000728:	468a      	mov	sl, r1
 800072a:	4641      	mov	r1, r8
 800072c:	4660      	mov	r0, ip
 800072e:	0c09      	lsrs	r1, r1, #16
 8000730:	4689      	mov	r9, r1
 8000732:	4358      	muls	r0, r3
 8000734:	437b      	muls	r3, r7
 8000736:	4453      	add	r3, sl
 8000738:	444b      	add	r3, r9
 800073a:	459a      	cmp	sl, r3
 800073c:	d903      	bls.n	8000746 <__aeabi_dmul+0x286>
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	0249      	lsls	r1, r1, #9
 8000742:	4689      	mov	r9, r1
 8000744:	4448      	add	r0, r9
 8000746:	0c19      	lsrs	r1, r3, #16
 8000748:	4689      	mov	r9, r1
 800074a:	4641      	mov	r1, r8
 800074c:	0409      	lsls	r1, r1, #16
 800074e:	0c09      	lsrs	r1, r1, #16
 8000750:	4688      	mov	r8, r1
 8000752:	0039      	movs	r1, r7
 8000754:	4361      	muls	r1, r4
 8000756:	041b      	lsls	r3, r3, #16
 8000758:	4443      	add	r3, r8
 800075a:	4688      	mov	r8, r1
 800075c:	4661      	mov	r1, ip
 800075e:	434c      	muls	r4, r1
 8000760:	4371      	muls	r1, r6
 8000762:	468c      	mov	ip, r1
 8000764:	4641      	mov	r1, r8
 8000766:	4377      	muls	r7, r6
 8000768:	0c0e      	lsrs	r6, r1, #16
 800076a:	193f      	adds	r7, r7, r4
 800076c:	19f6      	adds	r6, r6, r7
 800076e:	4448      	add	r0, r9
 8000770:	42b4      	cmp	r4, r6
 8000772:	d903      	bls.n	800077c <__aeabi_dmul+0x2bc>
 8000774:	2180      	movs	r1, #128	@ 0x80
 8000776:	0249      	lsls	r1, r1, #9
 8000778:	4689      	mov	r9, r1
 800077a:	44cc      	add	ip, r9
 800077c:	9902      	ldr	r1, [sp, #8]
 800077e:	9f00      	ldr	r7, [sp, #0]
 8000780:	4689      	mov	r9, r1
 8000782:	0431      	lsls	r1, r6, #16
 8000784:	444f      	add	r7, r9
 8000786:	4689      	mov	r9, r1
 8000788:	4641      	mov	r1, r8
 800078a:	4297      	cmp	r7, r2
 800078c:	4192      	sbcs	r2, r2
 800078e:	040c      	lsls	r4, r1, #16
 8000790:	0c24      	lsrs	r4, r4, #16
 8000792:	444c      	add	r4, r9
 8000794:	18ff      	adds	r7, r7, r3
 8000796:	4252      	negs	r2, r2
 8000798:	1964      	adds	r4, r4, r5
 800079a:	18a1      	adds	r1, r4, r2
 800079c:	429f      	cmp	r7, r3
 800079e:	419b      	sbcs	r3, r3
 80007a0:	4688      	mov	r8, r1
 80007a2:	4682      	mov	sl, r0
 80007a4:	425b      	negs	r3, r3
 80007a6:	4699      	mov	r9, r3
 80007a8:	4590      	cmp	r8, r2
 80007aa:	4192      	sbcs	r2, r2
 80007ac:	42ac      	cmp	r4, r5
 80007ae:	41a4      	sbcs	r4, r4
 80007b0:	44c2      	add	sl, r8
 80007b2:	44d1      	add	r9, sl
 80007b4:	4252      	negs	r2, r2
 80007b6:	4264      	negs	r4, r4
 80007b8:	4314      	orrs	r4, r2
 80007ba:	4599      	cmp	r9, r3
 80007bc:	419b      	sbcs	r3, r3
 80007be:	4582      	cmp	sl, r0
 80007c0:	4192      	sbcs	r2, r2
 80007c2:	425b      	negs	r3, r3
 80007c4:	4252      	negs	r2, r2
 80007c6:	4313      	orrs	r3, r2
 80007c8:	464a      	mov	r2, r9
 80007ca:	0c36      	lsrs	r6, r6, #16
 80007cc:	19a4      	adds	r4, r4, r6
 80007ce:	18e3      	adds	r3, r4, r3
 80007d0:	4463      	add	r3, ip
 80007d2:	025b      	lsls	r3, r3, #9
 80007d4:	0dd2      	lsrs	r2, r2, #23
 80007d6:	431a      	orrs	r2, r3
 80007d8:	9901      	ldr	r1, [sp, #4]
 80007da:	4692      	mov	sl, r2
 80007dc:	027a      	lsls	r2, r7, #9
 80007de:	430a      	orrs	r2, r1
 80007e0:	1e50      	subs	r0, r2, #1
 80007e2:	4182      	sbcs	r2, r0
 80007e4:	0dff      	lsrs	r7, r7, #23
 80007e6:	4317      	orrs	r7, r2
 80007e8:	464a      	mov	r2, r9
 80007ea:	0252      	lsls	r2, r2, #9
 80007ec:	4317      	orrs	r7, r2
 80007ee:	46b8      	mov	r8, r7
 80007f0:	01db      	lsls	r3, r3, #7
 80007f2:	d500      	bpl.n	80007f6 <__aeabi_dmul+0x336>
 80007f4:	e6ed      	b.n	80005d2 <__aeabi_dmul+0x112>
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <__aeabi_dmul+0x36c>)
 80007f8:	9a03      	ldr	r2, [sp, #12]
 80007fa:	445b      	add	r3, fp
 80007fc:	4691      	mov	r9, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	dc00      	bgt.n	8000804 <__aeabi_dmul+0x344>
 8000802:	e0ac      	b.n	800095e <__aeabi_dmul+0x49e>
 8000804:	003a      	movs	r2, r7
 8000806:	0752      	lsls	r2, r2, #29
 8000808:	d100      	bne.n	800080c <__aeabi_dmul+0x34c>
 800080a:	e710      	b.n	800062e <__aeabi_dmul+0x16e>
 800080c:	220f      	movs	r2, #15
 800080e:	4658      	mov	r0, fp
 8000810:	403a      	ands	r2, r7
 8000812:	2a04      	cmp	r2, #4
 8000814:	d000      	beq.n	8000818 <__aeabi_dmul+0x358>
 8000816:	e6f9      	b.n	800060c <__aeabi_dmul+0x14c>
 8000818:	e709      	b.n	800062e <__aeabi_dmul+0x16e>
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	000007ff 	.word	0x000007ff
 8000820:	fffffc01 	.word	0xfffffc01
 8000824:	feffffff 	.word	0xfeffffff
 8000828:	000007fe 	.word	0x000007fe
 800082c:	000003ff 	.word	0x000003ff
 8000830:	0022      	movs	r2, r4
 8000832:	4332      	orrs	r2, r6
 8000834:	d06f      	beq.n	8000916 <__aeabi_dmul+0x456>
 8000836:	2c00      	cmp	r4, #0
 8000838:	d100      	bne.n	800083c <__aeabi_dmul+0x37c>
 800083a:	e0c2      	b.n	80009c2 <__aeabi_dmul+0x502>
 800083c:	0020      	movs	r0, r4
 800083e:	f000 fdd7 	bl	80013f0 <__clzsi2>
 8000842:	0002      	movs	r2, r0
 8000844:	0003      	movs	r3, r0
 8000846:	3a0b      	subs	r2, #11
 8000848:	201d      	movs	r0, #29
 800084a:	1a82      	subs	r2, r0, r2
 800084c:	0030      	movs	r0, r6
 800084e:	0019      	movs	r1, r3
 8000850:	40d0      	lsrs	r0, r2
 8000852:	3908      	subs	r1, #8
 8000854:	408c      	lsls	r4, r1
 8000856:	0002      	movs	r2, r0
 8000858:	4322      	orrs	r2, r4
 800085a:	0034      	movs	r4, r6
 800085c:	408c      	lsls	r4, r1
 800085e:	4659      	mov	r1, fp
 8000860:	1acb      	subs	r3, r1, r3
 8000862:	4986      	ldr	r1, [pc, #536]	@ (8000a7c <__aeabi_dmul+0x5bc>)
 8000864:	468b      	mov	fp, r1
 8000866:	449b      	add	fp, r3
 8000868:	2d0a      	cmp	r5, #10
 800086a:	dd00      	ble.n	800086e <__aeabi_dmul+0x3ae>
 800086c:	e6a4      	b.n	80005b8 <__aeabi_dmul+0xf8>
 800086e:	4649      	mov	r1, r9
 8000870:	9b00      	ldr	r3, [sp, #0]
 8000872:	9401      	str	r4, [sp, #4]
 8000874:	4059      	eors	r1, r3
 8000876:	b2cb      	uxtb	r3, r1
 8000878:	0014      	movs	r4, r2
 800087a:	2000      	movs	r0, #0
 800087c:	9303      	str	r3, [sp, #12]
 800087e:	2d02      	cmp	r5, #2
 8000880:	dd00      	ble.n	8000884 <__aeabi_dmul+0x3c4>
 8000882:	e667      	b.n	8000554 <__aeabi_dmul+0x94>
 8000884:	e6fb      	b.n	800067e <__aeabi_dmul+0x1be>
 8000886:	4653      	mov	r3, sl
 8000888:	4303      	orrs	r3, r0
 800088a:	4698      	mov	r8, r3
 800088c:	d03c      	beq.n	8000908 <__aeabi_dmul+0x448>
 800088e:	4653      	mov	r3, sl
 8000890:	2b00      	cmp	r3, #0
 8000892:	d100      	bne.n	8000896 <__aeabi_dmul+0x3d6>
 8000894:	e0a3      	b.n	80009de <__aeabi_dmul+0x51e>
 8000896:	4650      	mov	r0, sl
 8000898:	f000 fdaa 	bl	80013f0 <__clzsi2>
 800089c:	230b      	movs	r3, #11
 800089e:	425b      	negs	r3, r3
 80008a0:	469c      	mov	ip, r3
 80008a2:	0002      	movs	r2, r0
 80008a4:	4484      	add	ip, r0
 80008a6:	0011      	movs	r1, r2
 80008a8:	4650      	mov	r0, sl
 80008aa:	3908      	subs	r1, #8
 80008ac:	4088      	lsls	r0, r1
 80008ae:	231d      	movs	r3, #29
 80008b0:	4680      	mov	r8, r0
 80008b2:	4660      	mov	r0, ip
 80008b4:	1a1b      	subs	r3, r3, r0
 80008b6:	0020      	movs	r0, r4
 80008b8:	40d8      	lsrs	r0, r3
 80008ba:	0003      	movs	r3, r0
 80008bc:	4640      	mov	r0, r8
 80008be:	4303      	orrs	r3, r0
 80008c0:	469a      	mov	sl, r3
 80008c2:	0023      	movs	r3, r4
 80008c4:	408b      	lsls	r3, r1
 80008c6:	4698      	mov	r8, r3
 80008c8:	4b6c      	ldr	r3, [pc, #432]	@ (8000a7c <__aeabi_dmul+0x5bc>)
 80008ca:	2500      	movs	r5, #0
 80008cc:	1a9b      	subs	r3, r3, r2
 80008ce:	469b      	mov	fp, r3
 80008d0:	2300      	movs	r3, #0
 80008d2:	9302      	str	r3, [sp, #8]
 80008d4:	e61a      	b.n	800050c <__aeabi_dmul+0x4c>
 80008d6:	2d0f      	cmp	r5, #15
 80008d8:	d000      	beq.n	80008dc <__aeabi_dmul+0x41c>
 80008da:	e0c9      	b.n	8000a70 <__aeabi_dmul+0x5b0>
 80008dc:	2380      	movs	r3, #128	@ 0x80
 80008de:	4652      	mov	r2, sl
 80008e0:	031b      	lsls	r3, r3, #12
 80008e2:	421a      	tst	r2, r3
 80008e4:	d002      	beq.n	80008ec <__aeabi_dmul+0x42c>
 80008e6:	421c      	tst	r4, r3
 80008e8:	d100      	bne.n	80008ec <__aeabi_dmul+0x42c>
 80008ea:	e092      	b.n	8000a12 <__aeabi_dmul+0x552>
 80008ec:	2480      	movs	r4, #128	@ 0x80
 80008ee:	4653      	mov	r3, sl
 80008f0:	0324      	lsls	r4, r4, #12
 80008f2:	431c      	orrs	r4, r3
 80008f4:	0324      	lsls	r4, r4, #12
 80008f6:	4642      	mov	r2, r8
 80008f8:	0b24      	lsrs	r4, r4, #12
 80008fa:	e63e      	b.n	800057a <__aeabi_dmul+0xba>
 80008fc:	469b      	mov	fp, r3
 80008fe:	2303      	movs	r3, #3
 8000900:	4680      	mov	r8, r0
 8000902:	250c      	movs	r5, #12
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	e601      	b.n	800050c <__aeabi_dmul+0x4c>
 8000908:	2300      	movs	r3, #0
 800090a:	469a      	mov	sl, r3
 800090c:	469b      	mov	fp, r3
 800090e:	3301      	adds	r3, #1
 8000910:	2504      	movs	r5, #4
 8000912:	9302      	str	r3, [sp, #8]
 8000914:	e5fa      	b.n	800050c <__aeabi_dmul+0x4c>
 8000916:	2101      	movs	r1, #1
 8000918:	430d      	orrs	r5, r1
 800091a:	2d0a      	cmp	r5, #10
 800091c:	dd00      	ble.n	8000920 <__aeabi_dmul+0x460>
 800091e:	e64b      	b.n	80005b8 <__aeabi_dmul+0xf8>
 8000920:	4649      	mov	r1, r9
 8000922:	9800      	ldr	r0, [sp, #0]
 8000924:	4041      	eors	r1, r0
 8000926:	b2c9      	uxtb	r1, r1
 8000928:	9103      	str	r1, [sp, #12]
 800092a:	2d02      	cmp	r5, #2
 800092c:	dc00      	bgt.n	8000930 <__aeabi_dmul+0x470>
 800092e:	e096      	b.n	8000a5e <__aeabi_dmul+0x59e>
 8000930:	2300      	movs	r3, #0
 8000932:	2400      	movs	r4, #0
 8000934:	2001      	movs	r0, #1
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	e60c      	b.n	8000554 <__aeabi_dmul+0x94>
 800093a:	4649      	mov	r1, r9
 800093c:	2302      	movs	r3, #2
 800093e:	9a00      	ldr	r2, [sp, #0]
 8000940:	432b      	orrs	r3, r5
 8000942:	4051      	eors	r1, r2
 8000944:	b2ca      	uxtb	r2, r1
 8000946:	9203      	str	r2, [sp, #12]
 8000948:	2b0a      	cmp	r3, #10
 800094a:	dd00      	ble.n	800094e <__aeabi_dmul+0x48e>
 800094c:	e634      	b.n	80005b8 <__aeabi_dmul+0xf8>
 800094e:	2d00      	cmp	r5, #0
 8000950:	d157      	bne.n	8000a02 <__aeabi_dmul+0x542>
 8000952:	9b03      	ldr	r3, [sp, #12]
 8000954:	4699      	mov	r9, r3
 8000956:	2400      	movs	r4, #0
 8000958:	2200      	movs	r2, #0
 800095a:	4b49      	ldr	r3, [pc, #292]	@ (8000a80 <__aeabi_dmul+0x5c0>)
 800095c:	e60e      	b.n	800057c <__aeabi_dmul+0xbc>
 800095e:	4658      	mov	r0, fp
 8000960:	2101      	movs	r1, #1
 8000962:	1ac9      	subs	r1, r1, r3
 8000964:	2938      	cmp	r1, #56	@ 0x38
 8000966:	dd00      	ble.n	800096a <__aeabi_dmul+0x4aa>
 8000968:	e62f      	b.n	80005ca <__aeabi_dmul+0x10a>
 800096a:	291f      	cmp	r1, #31
 800096c:	dd56      	ble.n	8000a1c <__aeabi_dmul+0x55c>
 800096e:	221f      	movs	r2, #31
 8000970:	4654      	mov	r4, sl
 8000972:	4252      	negs	r2, r2
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	40dc      	lsrs	r4, r3
 8000978:	2920      	cmp	r1, #32
 800097a:	d007      	beq.n	800098c <__aeabi_dmul+0x4cc>
 800097c:	4b41      	ldr	r3, [pc, #260]	@ (8000a84 <__aeabi_dmul+0x5c4>)
 800097e:	4642      	mov	r2, r8
 8000980:	469c      	mov	ip, r3
 8000982:	4653      	mov	r3, sl
 8000984:	4460      	add	r0, ip
 8000986:	4083      	lsls	r3, r0
 8000988:	431a      	orrs	r2, r3
 800098a:	4690      	mov	r8, r2
 800098c:	4642      	mov	r2, r8
 800098e:	2107      	movs	r1, #7
 8000990:	1e53      	subs	r3, r2, #1
 8000992:	419a      	sbcs	r2, r3
 8000994:	000b      	movs	r3, r1
 8000996:	4322      	orrs	r2, r4
 8000998:	4013      	ands	r3, r2
 800099a:	2400      	movs	r4, #0
 800099c:	4211      	tst	r1, r2
 800099e:	d009      	beq.n	80009b4 <__aeabi_dmul+0x4f4>
 80009a0:	230f      	movs	r3, #15
 80009a2:	4013      	ands	r3, r2
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	d05d      	beq.n	8000a64 <__aeabi_dmul+0x5a4>
 80009a8:	1d11      	adds	r1, r2, #4
 80009aa:	4291      	cmp	r1, r2
 80009ac:	419b      	sbcs	r3, r3
 80009ae:	000a      	movs	r2, r1
 80009b0:	425b      	negs	r3, r3
 80009b2:	075b      	lsls	r3, r3, #29
 80009b4:	08d2      	lsrs	r2, r2, #3
 80009b6:	431a      	orrs	r2, r3
 80009b8:	2300      	movs	r3, #0
 80009ba:	e5df      	b.n	800057c <__aeabi_dmul+0xbc>
 80009bc:	9b03      	ldr	r3, [sp, #12]
 80009be:	4699      	mov	r9, r3
 80009c0:	e5fa      	b.n	80005b8 <__aeabi_dmul+0xf8>
 80009c2:	9801      	ldr	r0, [sp, #4]
 80009c4:	f000 fd14 	bl	80013f0 <__clzsi2>
 80009c8:	0002      	movs	r2, r0
 80009ca:	0003      	movs	r3, r0
 80009cc:	3215      	adds	r2, #21
 80009ce:	3320      	adds	r3, #32
 80009d0:	2a1c      	cmp	r2, #28
 80009d2:	dc00      	bgt.n	80009d6 <__aeabi_dmul+0x516>
 80009d4:	e738      	b.n	8000848 <__aeabi_dmul+0x388>
 80009d6:	9a01      	ldr	r2, [sp, #4]
 80009d8:	3808      	subs	r0, #8
 80009da:	4082      	lsls	r2, r0
 80009dc:	e73f      	b.n	800085e <__aeabi_dmul+0x39e>
 80009de:	f000 fd07 	bl	80013f0 <__clzsi2>
 80009e2:	2315      	movs	r3, #21
 80009e4:	469c      	mov	ip, r3
 80009e6:	4484      	add	ip, r0
 80009e8:	0002      	movs	r2, r0
 80009ea:	4663      	mov	r3, ip
 80009ec:	3220      	adds	r2, #32
 80009ee:	2b1c      	cmp	r3, #28
 80009f0:	dc00      	bgt.n	80009f4 <__aeabi_dmul+0x534>
 80009f2:	e758      	b.n	80008a6 <__aeabi_dmul+0x3e6>
 80009f4:	2300      	movs	r3, #0
 80009f6:	4698      	mov	r8, r3
 80009f8:	0023      	movs	r3, r4
 80009fa:	3808      	subs	r0, #8
 80009fc:	4083      	lsls	r3, r0
 80009fe:	469a      	mov	sl, r3
 8000a00:	e762      	b.n	80008c8 <__aeabi_dmul+0x408>
 8000a02:	001d      	movs	r5, r3
 8000a04:	2300      	movs	r3, #0
 8000a06:	2400      	movs	r4, #0
 8000a08:	2002      	movs	r0, #2
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	e5a2      	b.n	8000554 <__aeabi_dmul+0x94>
 8000a0e:	9002      	str	r0, [sp, #8]
 8000a10:	e632      	b.n	8000678 <__aeabi_dmul+0x1b8>
 8000a12:	431c      	orrs	r4, r3
 8000a14:	9b00      	ldr	r3, [sp, #0]
 8000a16:	9a01      	ldr	r2, [sp, #4]
 8000a18:	4699      	mov	r9, r3
 8000a1a:	e5ae      	b.n	800057a <__aeabi_dmul+0xba>
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <__aeabi_dmul+0x5c8>)
 8000a1e:	4652      	mov	r2, sl
 8000a20:	18c3      	adds	r3, r0, r3
 8000a22:	4640      	mov	r0, r8
 8000a24:	409a      	lsls	r2, r3
 8000a26:	40c8      	lsrs	r0, r1
 8000a28:	4302      	orrs	r2, r0
 8000a2a:	4640      	mov	r0, r8
 8000a2c:	4098      	lsls	r0, r3
 8000a2e:	0003      	movs	r3, r0
 8000a30:	1e58      	subs	r0, r3, #1
 8000a32:	4183      	sbcs	r3, r0
 8000a34:	4654      	mov	r4, sl
 8000a36:	431a      	orrs	r2, r3
 8000a38:	40cc      	lsrs	r4, r1
 8000a3a:	0753      	lsls	r3, r2, #29
 8000a3c:	d009      	beq.n	8000a52 <__aeabi_dmul+0x592>
 8000a3e:	230f      	movs	r3, #15
 8000a40:	4013      	ands	r3, r2
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	d005      	beq.n	8000a52 <__aeabi_dmul+0x592>
 8000a46:	1d13      	adds	r3, r2, #4
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	4192      	sbcs	r2, r2
 8000a4c:	4252      	negs	r2, r2
 8000a4e:	18a4      	adds	r4, r4, r2
 8000a50:	001a      	movs	r2, r3
 8000a52:	0223      	lsls	r3, r4, #8
 8000a54:	d508      	bpl.n	8000a68 <__aeabi_dmul+0x5a8>
 8000a56:	2301      	movs	r3, #1
 8000a58:	2400      	movs	r4, #0
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	e58e      	b.n	800057c <__aeabi_dmul+0xbc>
 8000a5e:	4689      	mov	r9, r1
 8000a60:	2400      	movs	r4, #0
 8000a62:	e58b      	b.n	800057c <__aeabi_dmul+0xbc>
 8000a64:	2300      	movs	r3, #0
 8000a66:	e7a5      	b.n	80009b4 <__aeabi_dmul+0x4f4>
 8000a68:	0763      	lsls	r3, r4, #29
 8000a6a:	0264      	lsls	r4, r4, #9
 8000a6c:	0b24      	lsrs	r4, r4, #12
 8000a6e:	e7a1      	b.n	80009b4 <__aeabi_dmul+0x4f4>
 8000a70:	9b00      	ldr	r3, [sp, #0]
 8000a72:	46a2      	mov	sl, r4
 8000a74:	4699      	mov	r9, r3
 8000a76:	9b01      	ldr	r3, [sp, #4]
 8000a78:	4698      	mov	r8, r3
 8000a7a:	e737      	b.n	80008ec <__aeabi_dmul+0x42c>
 8000a7c:	fffffc0d 	.word	0xfffffc0d
 8000a80:	000007ff 	.word	0x000007ff
 8000a84:	0000043e 	.word	0x0000043e
 8000a88:	0000041e 	.word	0x0000041e

08000a8c <__aeabi_dsub>:
 8000a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8e:	4657      	mov	r7, sl
 8000a90:	464e      	mov	r6, r9
 8000a92:	4645      	mov	r5, r8
 8000a94:	46de      	mov	lr, fp
 8000a96:	b5e0      	push	{r5, r6, r7, lr}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	9000      	str	r0, [sp, #0]
 8000a9c:	9101      	str	r1, [sp, #4]
 8000a9e:	030c      	lsls	r4, r1, #12
 8000aa0:	004d      	lsls	r5, r1, #1
 8000aa2:	0fce      	lsrs	r6, r1, #31
 8000aa4:	0a61      	lsrs	r1, r4, #9
 8000aa6:	9c00      	ldr	r4, [sp, #0]
 8000aa8:	005f      	lsls	r7, r3, #1
 8000aaa:	0f64      	lsrs	r4, r4, #29
 8000aac:	430c      	orrs	r4, r1
 8000aae:	9900      	ldr	r1, [sp, #0]
 8000ab0:	9200      	str	r2, [sp, #0]
 8000ab2:	9301      	str	r3, [sp, #4]
 8000ab4:	00c8      	lsls	r0, r1, #3
 8000ab6:	0319      	lsls	r1, r3, #12
 8000ab8:	0d7b      	lsrs	r3, r7, #21
 8000aba:	4699      	mov	r9, r3
 8000abc:	9b01      	ldr	r3, [sp, #4]
 8000abe:	4fcc      	ldr	r7, [pc, #816]	@ (8000df0 <__aeabi_dsub+0x364>)
 8000ac0:	0fdb      	lsrs	r3, r3, #31
 8000ac2:	469c      	mov	ip, r3
 8000ac4:	0a4b      	lsrs	r3, r1, #9
 8000ac6:	9900      	ldr	r1, [sp, #0]
 8000ac8:	4680      	mov	r8, r0
 8000aca:	0f49      	lsrs	r1, r1, #29
 8000acc:	4319      	orrs	r1, r3
 8000ace:	9b00      	ldr	r3, [sp, #0]
 8000ad0:	468b      	mov	fp, r1
 8000ad2:	00da      	lsls	r2, r3, #3
 8000ad4:	4692      	mov	sl, r2
 8000ad6:	0d6d      	lsrs	r5, r5, #21
 8000ad8:	45b9      	cmp	r9, r7
 8000ada:	d100      	bne.n	8000ade <__aeabi_dsub+0x52>
 8000adc:	e0bf      	b.n	8000c5e <__aeabi_dsub+0x1d2>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	4661      	mov	r1, ip
 8000ae2:	4059      	eors	r1, r3
 8000ae4:	464b      	mov	r3, r9
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	1aeb      	subs	r3, r5, r3
 8000aea:	428e      	cmp	r6, r1
 8000aec:	d075      	beq.n	8000bda <__aeabi_dsub+0x14e>
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	dc00      	bgt.n	8000af4 <__aeabi_dsub+0x68>
 8000af2:	e2a3      	b.n	800103c <__aeabi_dsub+0x5b0>
 8000af4:	4649      	mov	r1, r9
 8000af6:	2900      	cmp	r1, #0
 8000af8:	d100      	bne.n	8000afc <__aeabi_dsub+0x70>
 8000afa:	e0ce      	b.n	8000c9a <__aeabi_dsub+0x20e>
 8000afc:	42bd      	cmp	r5, r7
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dsub+0x76>
 8000b00:	e200      	b.n	8000f04 <__aeabi_dsub+0x478>
 8000b02:	2701      	movs	r7, #1
 8000b04:	2b38      	cmp	r3, #56	@ 0x38
 8000b06:	dc19      	bgt.n	8000b3c <__aeabi_dsub+0xb0>
 8000b08:	2780      	movs	r7, #128	@ 0x80
 8000b0a:	4659      	mov	r1, fp
 8000b0c:	043f      	lsls	r7, r7, #16
 8000b0e:	4339      	orrs	r1, r7
 8000b10:	468b      	mov	fp, r1
 8000b12:	2b1f      	cmp	r3, #31
 8000b14:	dd00      	ble.n	8000b18 <__aeabi_dsub+0x8c>
 8000b16:	e1fa      	b.n	8000f0e <__aeabi_dsub+0x482>
 8000b18:	2720      	movs	r7, #32
 8000b1a:	1af9      	subs	r1, r7, r3
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	4659      	mov	r1, fp
 8000b20:	4667      	mov	r7, ip
 8000b22:	40b9      	lsls	r1, r7
 8000b24:	000f      	movs	r7, r1
 8000b26:	0011      	movs	r1, r2
 8000b28:	40d9      	lsrs	r1, r3
 8000b2a:	430f      	orrs	r7, r1
 8000b2c:	4661      	mov	r1, ip
 8000b2e:	408a      	lsls	r2, r1
 8000b30:	1e51      	subs	r1, r2, #1
 8000b32:	418a      	sbcs	r2, r1
 8000b34:	4659      	mov	r1, fp
 8000b36:	40d9      	lsrs	r1, r3
 8000b38:	4317      	orrs	r7, r2
 8000b3a:	1a64      	subs	r4, r4, r1
 8000b3c:	1bc7      	subs	r7, r0, r7
 8000b3e:	42b8      	cmp	r0, r7
 8000b40:	4180      	sbcs	r0, r0
 8000b42:	4240      	negs	r0, r0
 8000b44:	1a24      	subs	r4, r4, r0
 8000b46:	0223      	lsls	r3, r4, #8
 8000b48:	d400      	bmi.n	8000b4c <__aeabi_dsub+0xc0>
 8000b4a:	e140      	b.n	8000dce <__aeabi_dsub+0x342>
 8000b4c:	0264      	lsls	r4, r4, #9
 8000b4e:	0a64      	lsrs	r4, r4, #9
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dsub+0xca>
 8000b54:	e154      	b.n	8000e00 <__aeabi_dsub+0x374>
 8000b56:	0020      	movs	r0, r4
 8000b58:	f000 fc4a 	bl	80013f0 <__clzsi2>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	3b08      	subs	r3, #8
 8000b60:	2120      	movs	r1, #32
 8000b62:	0038      	movs	r0, r7
 8000b64:	1aca      	subs	r2, r1, r3
 8000b66:	40d0      	lsrs	r0, r2
 8000b68:	409c      	lsls	r4, r3
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	409f      	lsls	r7, r3
 8000b6e:	4322      	orrs	r2, r4
 8000b70:	429d      	cmp	r5, r3
 8000b72:	dd00      	ble.n	8000b76 <__aeabi_dsub+0xea>
 8000b74:	e1a6      	b.n	8000ec4 <__aeabi_dsub+0x438>
 8000b76:	1b58      	subs	r0, r3, r5
 8000b78:	3001      	adds	r0, #1
 8000b7a:	1a09      	subs	r1, r1, r0
 8000b7c:	003c      	movs	r4, r7
 8000b7e:	408f      	lsls	r7, r1
 8000b80:	40c4      	lsrs	r4, r0
 8000b82:	1e7b      	subs	r3, r7, #1
 8000b84:	419f      	sbcs	r7, r3
 8000b86:	0013      	movs	r3, r2
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	4327      	orrs	r7, r4
 8000b8c:	431f      	orrs	r7, r3
 8000b8e:	40c2      	lsrs	r2, r0
 8000b90:	003b      	movs	r3, r7
 8000b92:	0014      	movs	r4, r2
 8000b94:	2500      	movs	r5, #0
 8000b96:	4313      	orrs	r3, r2
 8000b98:	d100      	bne.n	8000b9c <__aeabi_dsub+0x110>
 8000b9a:	e1f7      	b.n	8000f8c <__aeabi_dsub+0x500>
 8000b9c:	077b      	lsls	r3, r7, #29
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dsub+0x116>
 8000ba0:	e377      	b.n	8001292 <__aeabi_dsub+0x806>
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	0038      	movs	r0, r7
 8000ba6:	403b      	ands	r3, r7
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d004      	beq.n	8000bb6 <__aeabi_dsub+0x12a>
 8000bac:	1d38      	adds	r0, r7, #4
 8000bae:	42b8      	cmp	r0, r7
 8000bb0:	41bf      	sbcs	r7, r7
 8000bb2:	427f      	negs	r7, r7
 8000bb4:	19e4      	adds	r4, r4, r7
 8000bb6:	0223      	lsls	r3, r4, #8
 8000bb8:	d400      	bmi.n	8000bbc <__aeabi_dsub+0x130>
 8000bba:	e368      	b.n	800128e <__aeabi_dsub+0x802>
 8000bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8000df0 <__aeabi_dsub+0x364>)
 8000bbe:	3501      	adds	r5, #1
 8000bc0:	429d      	cmp	r5, r3
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dsub+0x13a>
 8000bc4:	e0f4      	b.n	8000db0 <__aeabi_dsub+0x324>
 8000bc6:	4b8b      	ldr	r3, [pc, #556]	@ (8000df4 <__aeabi_dsub+0x368>)
 8000bc8:	056d      	lsls	r5, r5, #21
 8000bca:	401c      	ands	r4, r3
 8000bcc:	0d6d      	lsrs	r5, r5, #21
 8000bce:	0767      	lsls	r7, r4, #29
 8000bd0:	08c0      	lsrs	r0, r0, #3
 8000bd2:	0264      	lsls	r4, r4, #9
 8000bd4:	4307      	orrs	r7, r0
 8000bd6:	0b24      	lsrs	r4, r4, #12
 8000bd8:	e0ec      	b.n	8000db4 <__aeabi_dsub+0x328>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	dc00      	bgt.n	8000be0 <__aeabi_dsub+0x154>
 8000bde:	e329      	b.n	8001234 <__aeabi_dsub+0x7a8>
 8000be0:	4649      	mov	r1, r9
 8000be2:	2900      	cmp	r1, #0
 8000be4:	d000      	beq.n	8000be8 <__aeabi_dsub+0x15c>
 8000be6:	e0d6      	b.n	8000d96 <__aeabi_dsub+0x30a>
 8000be8:	4659      	mov	r1, fp
 8000bea:	4311      	orrs	r1, r2
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dsub+0x164>
 8000bee:	e12e      	b.n	8000e4e <__aeabi_dsub+0x3c2>
 8000bf0:	1e59      	subs	r1, r3, #1
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_dsub+0x16c>
 8000bf6:	e1e6      	b.n	8000fc6 <__aeabi_dsub+0x53a>
 8000bf8:	42bb      	cmp	r3, r7
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dsub+0x172>
 8000bfc:	e182      	b.n	8000f04 <__aeabi_dsub+0x478>
 8000bfe:	2701      	movs	r7, #1
 8000c00:	000b      	movs	r3, r1
 8000c02:	2938      	cmp	r1, #56	@ 0x38
 8000c04:	dc14      	bgt.n	8000c30 <__aeabi_dsub+0x1a4>
 8000c06:	2b1f      	cmp	r3, #31
 8000c08:	dd00      	ble.n	8000c0c <__aeabi_dsub+0x180>
 8000c0a:	e23c      	b.n	8001086 <__aeabi_dsub+0x5fa>
 8000c0c:	2720      	movs	r7, #32
 8000c0e:	1af9      	subs	r1, r7, r3
 8000c10:	468c      	mov	ip, r1
 8000c12:	4659      	mov	r1, fp
 8000c14:	4667      	mov	r7, ip
 8000c16:	40b9      	lsls	r1, r7
 8000c18:	000f      	movs	r7, r1
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	40d9      	lsrs	r1, r3
 8000c1e:	430f      	orrs	r7, r1
 8000c20:	4661      	mov	r1, ip
 8000c22:	408a      	lsls	r2, r1
 8000c24:	1e51      	subs	r1, r2, #1
 8000c26:	418a      	sbcs	r2, r1
 8000c28:	4659      	mov	r1, fp
 8000c2a:	40d9      	lsrs	r1, r3
 8000c2c:	4317      	orrs	r7, r2
 8000c2e:	1864      	adds	r4, r4, r1
 8000c30:	183f      	adds	r7, r7, r0
 8000c32:	4287      	cmp	r7, r0
 8000c34:	4180      	sbcs	r0, r0
 8000c36:	4240      	negs	r0, r0
 8000c38:	1824      	adds	r4, r4, r0
 8000c3a:	0223      	lsls	r3, r4, #8
 8000c3c:	d400      	bmi.n	8000c40 <__aeabi_dsub+0x1b4>
 8000c3e:	e0c6      	b.n	8000dce <__aeabi_dsub+0x342>
 8000c40:	4b6b      	ldr	r3, [pc, #428]	@ (8000df0 <__aeabi_dsub+0x364>)
 8000c42:	3501      	adds	r5, #1
 8000c44:	429d      	cmp	r5, r3
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dsub+0x1be>
 8000c48:	e0b2      	b.n	8000db0 <__aeabi_dsub+0x324>
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4b69      	ldr	r3, [pc, #420]	@ (8000df4 <__aeabi_dsub+0x368>)
 8000c4e:	087a      	lsrs	r2, r7, #1
 8000c50:	401c      	ands	r4, r3
 8000c52:	4039      	ands	r1, r7
 8000c54:	430a      	orrs	r2, r1
 8000c56:	07e7      	lsls	r7, r4, #31
 8000c58:	4317      	orrs	r7, r2
 8000c5a:	0864      	lsrs	r4, r4, #1
 8000c5c:	e79e      	b.n	8000b9c <__aeabi_dsub+0x110>
 8000c5e:	4b66      	ldr	r3, [pc, #408]	@ (8000df8 <__aeabi_dsub+0x36c>)
 8000c60:	4311      	orrs	r1, r2
 8000c62:	468a      	mov	sl, r1
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d028      	beq.n	8000cbc <__aeabi_dsub+0x230>
 8000c6a:	4566      	cmp	r6, ip
 8000c6c:	d02c      	beq.n	8000cc8 <__aeabi_dsub+0x23c>
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d05b      	beq.n	8000d2a <__aeabi_dsub+0x29e>
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d100      	bne.n	8000c78 <__aeabi_dsub+0x1ec>
 8000c76:	e12c      	b.n	8000ed2 <__aeabi_dsub+0x446>
 8000c78:	465b      	mov	r3, fp
 8000c7a:	4666      	mov	r6, ip
 8000c7c:	075f      	lsls	r7, r3, #29
 8000c7e:	08d2      	lsrs	r2, r2, #3
 8000c80:	4317      	orrs	r7, r2
 8000c82:	08dd      	lsrs	r5, r3, #3
 8000c84:	003b      	movs	r3, r7
 8000c86:	432b      	orrs	r3, r5
 8000c88:	d100      	bne.n	8000c8c <__aeabi_dsub+0x200>
 8000c8a:	e0e2      	b.n	8000e52 <__aeabi_dsub+0x3c6>
 8000c8c:	2480      	movs	r4, #128	@ 0x80
 8000c8e:	0324      	lsls	r4, r4, #12
 8000c90:	432c      	orrs	r4, r5
 8000c92:	0324      	lsls	r4, r4, #12
 8000c94:	4d56      	ldr	r5, [pc, #344]	@ (8000df0 <__aeabi_dsub+0x364>)
 8000c96:	0b24      	lsrs	r4, r4, #12
 8000c98:	e08c      	b.n	8000db4 <__aeabi_dsub+0x328>
 8000c9a:	4659      	mov	r1, fp
 8000c9c:	4311      	orrs	r1, r2
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dsub+0x216>
 8000ca0:	e0d5      	b.n	8000e4e <__aeabi_dsub+0x3c2>
 8000ca2:	1e59      	subs	r1, r3, #1
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dsub+0x21e>
 8000ca8:	e1b9      	b.n	800101e <__aeabi_dsub+0x592>
 8000caa:	42bb      	cmp	r3, r7
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dsub+0x224>
 8000cae:	e1b1      	b.n	8001014 <__aeabi_dsub+0x588>
 8000cb0:	2701      	movs	r7, #1
 8000cb2:	000b      	movs	r3, r1
 8000cb4:	2938      	cmp	r1, #56	@ 0x38
 8000cb6:	dd00      	ble.n	8000cba <__aeabi_dsub+0x22e>
 8000cb8:	e740      	b.n	8000b3c <__aeabi_dsub+0xb0>
 8000cba:	e72a      	b.n	8000b12 <__aeabi_dsub+0x86>
 8000cbc:	4661      	mov	r1, ip
 8000cbe:	2701      	movs	r7, #1
 8000cc0:	4079      	eors	r1, r7
 8000cc2:	468c      	mov	ip, r1
 8000cc4:	4566      	cmp	r6, ip
 8000cc6:	d1d2      	bne.n	8000c6e <__aeabi_dsub+0x1e2>
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d100      	bne.n	8000cce <__aeabi_dsub+0x242>
 8000ccc:	e0c5      	b.n	8000e5a <__aeabi_dsub+0x3ce>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d000      	beq.n	8000cd4 <__aeabi_dsub+0x248>
 8000cd2:	e155      	b.n	8000f80 <__aeabi_dsub+0x4f4>
 8000cd4:	464b      	mov	r3, r9
 8000cd6:	0025      	movs	r5, r4
 8000cd8:	4305      	orrs	r5, r0
 8000cda:	d100      	bne.n	8000cde <__aeabi_dsub+0x252>
 8000cdc:	e212      	b.n	8001104 <__aeabi_dsub+0x678>
 8000cde:	1e59      	subs	r1, r3, #1
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_dsub+0x25c>
 8000ce6:	e249      	b.n	800117c <__aeabi_dsub+0x6f0>
 8000ce8:	4d41      	ldr	r5, [pc, #260]	@ (8000df0 <__aeabi_dsub+0x364>)
 8000cea:	42ab      	cmp	r3, r5
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_dsub+0x264>
 8000cee:	e28f      	b.n	8001210 <__aeabi_dsub+0x784>
 8000cf0:	2701      	movs	r7, #1
 8000cf2:	2938      	cmp	r1, #56	@ 0x38
 8000cf4:	dc11      	bgt.n	8000d1a <__aeabi_dsub+0x28e>
 8000cf6:	4663      	mov	r3, ip
 8000cf8:	2b1f      	cmp	r3, #31
 8000cfa:	dd00      	ble.n	8000cfe <__aeabi_dsub+0x272>
 8000cfc:	e25b      	b.n	80011b6 <__aeabi_dsub+0x72a>
 8000cfe:	4661      	mov	r1, ip
 8000d00:	2320      	movs	r3, #32
 8000d02:	0027      	movs	r7, r4
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	0005      	movs	r5, r0
 8000d08:	4098      	lsls	r0, r3
 8000d0a:	409f      	lsls	r7, r3
 8000d0c:	40cd      	lsrs	r5, r1
 8000d0e:	1e43      	subs	r3, r0, #1
 8000d10:	4198      	sbcs	r0, r3
 8000d12:	40cc      	lsrs	r4, r1
 8000d14:	432f      	orrs	r7, r5
 8000d16:	4307      	orrs	r7, r0
 8000d18:	44a3      	add	fp, r4
 8000d1a:	18bf      	adds	r7, r7, r2
 8000d1c:	4297      	cmp	r7, r2
 8000d1e:	4192      	sbcs	r2, r2
 8000d20:	4252      	negs	r2, r2
 8000d22:	445a      	add	r2, fp
 8000d24:	0014      	movs	r4, r2
 8000d26:	464d      	mov	r5, r9
 8000d28:	e787      	b.n	8000c3a <__aeabi_dsub+0x1ae>
 8000d2a:	4f34      	ldr	r7, [pc, #208]	@ (8000dfc <__aeabi_dsub+0x370>)
 8000d2c:	1c6b      	adds	r3, r5, #1
 8000d2e:	423b      	tst	r3, r7
 8000d30:	d000      	beq.n	8000d34 <__aeabi_dsub+0x2a8>
 8000d32:	e0b6      	b.n	8000ea2 <__aeabi_dsub+0x416>
 8000d34:	4659      	mov	r1, fp
 8000d36:	0023      	movs	r3, r4
 8000d38:	4311      	orrs	r1, r2
 8000d3a:	000f      	movs	r7, r1
 8000d3c:	4303      	orrs	r3, r0
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	d000      	beq.n	8000d44 <__aeabi_dsub+0x2b8>
 8000d42:	e126      	b.n	8000f92 <__aeabi_dsub+0x506>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_dsub+0x2be>
 8000d48:	e1c0      	b.n	80010cc <__aeabi_dsub+0x640>
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dsub+0x2c4>
 8000d4e:	e0a1      	b.n	8000e94 <__aeabi_dsub+0x408>
 8000d50:	1a83      	subs	r3, r0, r2
 8000d52:	4698      	mov	r8, r3
 8000d54:	465b      	mov	r3, fp
 8000d56:	4540      	cmp	r0, r8
 8000d58:	41ad      	sbcs	r5, r5
 8000d5a:	1ae3      	subs	r3, r4, r3
 8000d5c:	426d      	negs	r5, r5
 8000d5e:	1b5b      	subs	r3, r3, r5
 8000d60:	2580      	movs	r5, #128	@ 0x80
 8000d62:	042d      	lsls	r5, r5, #16
 8000d64:	422b      	tst	r3, r5
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dsub+0x2de>
 8000d68:	e14b      	b.n	8001002 <__aeabi_dsub+0x576>
 8000d6a:	465b      	mov	r3, fp
 8000d6c:	1a10      	subs	r0, r2, r0
 8000d6e:	4282      	cmp	r2, r0
 8000d70:	4192      	sbcs	r2, r2
 8000d72:	1b1c      	subs	r4, r3, r4
 8000d74:	0007      	movs	r7, r0
 8000d76:	2601      	movs	r6, #1
 8000d78:	4663      	mov	r3, ip
 8000d7a:	4252      	negs	r2, r2
 8000d7c:	1aa4      	subs	r4, r4, r2
 8000d7e:	4327      	orrs	r7, r4
 8000d80:	401e      	ands	r6, r3
 8000d82:	2f00      	cmp	r7, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_dsub+0x2fc>
 8000d86:	e142      	b.n	800100e <__aeabi_dsub+0x582>
 8000d88:	422c      	tst	r4, r5
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_dsub+0x302>
 8000d8c:	e26d      	b.n	800126a <__aeabi_dsub+0x7de>
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <__aeabi_dsub+0x368>)
 8000d90:	2501      	movs	r5, #1
 8000d92:	401c      	ands	r4, r3
 8000d94:	e71b      	b.n	8000bce <__aeabi_dsub+0x142>
 8000d96:	42bd      	cmp	r5, r7
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dsub+0x310>
 8000d9a:	e13b      	b.n	8001014 <__aeabi_dsub+0x588>
 8000d9c:	2701      	movs	r7, #1
 8000d9e:	2b38      	cmp	r3, #56	@ 0x38
 8000da0:	dd00      	ble.n	8000da4 <__aeabi_dsub+0x318>
 8000da2:	e745      	b.n	8000c30 <__aeabi_dsub+0x1a4>
 8000da4:	2780      	movs	r7, #128	@ 0x80
 8000da6:	4659      	mov	r1, fp
 8000da8:	043f      	lsls	r7, r7, #16
 8000daa:	4339      	orrs	r1, r7
 8000dac:	468b      	mov	fp, r1
 8000dae:	e72a      	b.n	8000c06 <__aeabi_dsub+0x17a>
 8000db0:	2400      	movs	r4, #0
 8000db2:	2700      	movs	r7, #0
 8000db4:	052d      	lsls	r5, r5, #20
 8000db6:	4325      	orrs	r5, r4
 8000db8:	07f6      	lsls	r6, r6, #31
 8000dba:	4335      	orrs	r5, r6
 8000dbc:	0038      	movs	r0, r7
 8000dbe:	0029      	movs	r1, r5
 8000dc0:	b003      	add	sp, #12
 8000dc2:	bcf0      	pop	{r4, r5, r6, r7}
 8000dc4:	46bb      	mov	fp, r7
 8000dc6:	46b2      	mov	sl, r6
 8000dc8:	46a9      	mov	r9, r5
 8000dca:	46a0      	mov	r8, r4
 8000dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dce:	077b      	lsls	r3, r7, #29
 8000dd0:	d004      	beq.n	8000ddc <__aeabi_dsub+0x350>
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	403b      	ands	r3, r7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_dsub+0x350>
 8000dda:	e6e7      	b.n	8000bac <__aeabi_dsub+0x120>
 8000ddc:	002b      	movs	r3, r5
 8000dde:	08f8      	lsrs	r0, r7, #3
 8000de0:	4a03      	ldr	r2, [pc, #12]	@ (8000df0 <__aeabi_dsub+0x364>)
 8000de2:	0767      	lsls	r7, r4, #29
 8000de4:	4307      	orrs	r7, r0
 8000de6:	08e5      	lsrs	r5, r4, #3
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d100      	bne.n	8000dee <__aeabi_dsub+0x362>
 8000dec:	e74a      	b.n	8000c84 <__aeabi_dsub+0x1f8>
 8000dee:	e0a5      	b.n	8000f3c <__aeabi_dsub+0x4b0>
 8000df0:	000007ff 	.word	0x000007ff
 8000df4:	ff7fffff 	.word	0xff7fffff
 8000df8:	fffff801 	.word	0xfffff801
 8000dfc:	000007fe 	.word	0x000007fe
 8000e00:	0038      	movs	r0, r7
 8000e02:	f000 faf5 	bl	80013f0 <__clzsi2>
 8000e06:	0003      	movs	r3, r0
 8000e08:	3318      	adds	r3, #24
 8000e0a:	2b1f      	cmp	r3, #31
 8000e0c:	dc00      	bgt.n	8000e10 <__aeabi_dsub+0x384>
 8000e0e:	e6a7      	b.n	8000b60 <__aeabi_dsub+0xd4>
 8000e10:	003a      	movs	r2, r7
 8000e12:	3808      	subs	r0, #8
 8000e14:	4082      	lsls	r2, r0
 8000e16:	429d      	cmp	r5, r3
 8000e18:	dd00      	ble.n	8000e1c <__aeabi_dsub+0x390>
 8000e1a:	e08a      	b.n	8000f32 <__aeabi_dsub+0x4a6>
 8000e1c:	1b5b      	subs	r3, r3, r5
 8000e1e:	1c58      	adds	r0, r3, #1
 8000e20:	281f      	cmp	r0, #31
 8000e22:	dc00      	bgt.n	8000e26 <__aeabi_dsub+0x39a>
 8000e24:	e1d8      	b.n	80011d8 <__aeabi_dsub+0x74c>
 8000e26:	0017      	movs	r7, r2
 8000e28:	3b1f      	subs	r3, #31
 8000e2a:	40df      	lsrs	r7, r3
 8000e2c:	2820      	cmp	r0, #32
 8000e2e:	d005      	beq.n	8000e3c <__aeabi_dsub+0x3b0>
 8000e30:	2340      	movs	r3, #64	@ 0x40
 8000e32:	1a1b      	subs	r3, r3, r0
 8000e34:	409a      	lsls	r2, r3
 8000e36:	1e53      	subs	r3, r2, #1
 8000e38:	419a      	sbcs	r2, r3
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	2500      	movs	r5, #0
 8000e3e:	2f00      	cmp	r7, #0
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dsub+0x3b8>
 8000e42:	e0e5      	b.n	8001010 <__aeabi_dsub+0x584>
 8000e44:	077b      	lsls	r3, r7, #29
 8000e46:	d000      	beq.n	8000e4a <__aeabi_dsub+0x3be>
 8000e48:	e6ab      	b.n	8000ba2 <__aeabi_dsub+0x116>
 8000e4a:	002c      	movs	r4, r5
 8000e4c:	e7c6      	b.n	8000ddc <__aeabi_dsub+0x350>
 8000e4e:	08c0      	lsrs	r0, r0, #3
 8000e50:	e7c6      	b.n	8000de0 <__aeabi_dsub+0x354>
 8000e52:	2700      	movs	r7, #0
 8000e54:	2400      	movs	r4, #0
 8000e56:	4dd1      	ldr	r5, [pc, #836]	@ (800119c <__aeabi_dsub+0x710>)
 8000e58:	e7ac      	b.n	8000db4 <__aeabi_dsub+0x328>
 8000e5a:	4fd1      	ldr	r7, [pc, #836]	@ (80011a0 <__aeabi_dsub+0x714>)
 8000e5c:	1c6b      	adds	r3, r5, #1
 8000e5e:	423b      	tst	r3, r7
 8000e60:	d171      	bne.n	8000f46 <__aeabi_dsub+0x4ba>
 8000e62:	0023      	movs	r3, r4
 8000e64:	4303      	orrs	r3, r0
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d000      	beq.n	8000e6c <__aeabi_dsub+0x3e0>
 8000e6a:	e14e      	b.n	800110a <__aeabi_dsub+0x67e>
 8000e6c:	4657      	mov	r7, sl
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dsub+0x3e8>
 8000e72:	e1b5      	b.n	80011e0 <__aeabi_dsub+0x754>
 8000e74:	2f00      	cmp	r7, #0
 8000e76:	d00d      	beq.n	8000e94 <__aeabi_dsub+0x408>
 8000e78:	1883      	adds	r3, r0, r2
 8000e7a:	4283      	cmp	r3, r0
 8000e7c:	4180      	sbcs	r0, r0
 8000e7e:	445c      	add	r4, fp
 8000e80:	4240      	negs	r0, r0
 8000e82:	1824      	adds	r4, r4, r0
 8000e84:	0222      	lsls	r2, r4, #8
 8000e86:	d500      	bpl.n	8000e8a <__aeabi_dsub+0x3fe>
 8000e88:	e1c8      	b.n	800121c <__aeabi_dsub+0x790>
 8000e8a:	001f      	movs	r7, r3
 8000e8c:	4698      	mov	r8, r3
 8000e8e:	4327      	orrs	r7, r4
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dsub+0x408>
 8000e92:	e0bc      	b.n	800100e <__aeabi_dsub+0x582>
 8000e94:	4643      	mov	r3, r8
 8000e96:	0767      	lsls	r7, r4, #29
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	08e5      	lsrs	r5, r4, #3
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e04c      	b.n	8000f3c <__aeabi_dsub+0x4b0>
 8000ea2:	1a83      	subs	r3, r0, r2
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	465b      	mov	r3, fp
 8000ea8:	4540      	cmp	r0, r8
 8000eaa:	41bf      	sbcs	r7, r7
 8000eac:	1ae3      	subs	r3, r4, r3
 8000eae:	427f      	negs	r7, r7
 8000eb0:	1bdb      	subs	r3, r3, r7
 8000eb2:	021f      	lsls	r7, r3, #8
 8000eb4:	d47c      	bmi.n	8000fb0 <__aeabi_dsub+0x524>
 8000eb6:	4647      	mov	r7, r8
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dsub+0x432>
 8000ebc:	e0a6      	b.n	800100c <__aeabi_dsub+0x580>
 8000ebe:	001c      	movs	r4, r3
 8000ec0:	4647      	mov	r7, r8
 8000ec2:	e645      	b.n	8000b50 <__aeabi_dsub+0xc4>
 8000ec4:	4cb7      	ldr	r4, [pc, #732]	@ (80011a4 <__aeabi_dsub+0x718>)
 8000ec6:	1aed      	subs	r5, r5, r3
 8000ec8:	4014      	ands	r4, r2
 8000eca:	077b      	lsls	r3, r7, #29
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_dsub+0x444>
 8000ece:	e780      	b.n	8000dd2 <__aeabi_dsub+0x346>
 8000ed0:	e784      	b.n	8000ddc <__aeabi_dsub+0x350>
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	0025      	movs	r5, r4
 8000ed6:	4305      	orrs	r5, r0
 8000ed8:	d066      	beq.n	8000fa8 <__aeabi_dsub+0x51c>
 8000eda:	1e5f      	subs	r7, r3, #1
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dsub+0x456>
 8000ee0:	e0fc      	b.n	80010dc <__aeabi_dsub+0x650>
 8000ee2:	4dae      	ldr	r5, [pc, #696]	@ (800119c <__aeabi_dsub+0x710>)
 8000ee4:	42ab      	cmp	r3, r5
 8000ee6:	d100      	bne.n	8000eea <__aeabi_dsub+0x45e>
 8000ee8:	e15e      	b.n	80011a8 <__aeabi_dsub+0x71c>
 8000eea:	4666      	mov	r6, ip
 8000eec:	2f38      	cmp	r7, #56	@ 0x38
 8000eee:	dc00      	bgt.n	8000ef2 <__aeabi_dsub+0x466>
 8000ef0:	e0b4      	b.n	800105c <__aeabi_dsub+0x5d0>
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	1a17      	subs	r7, r2, r0
 8000ef6:	42ba      	cmp	r2, r7
 8000ef8:	4192      	sbcs	r2, r2
 8000efa:	465b      	mov	r3, fp
 8000efc:	4252      	negs	r2, r2
 8000efe:	464d      	mov	r5, r9
 8000f00:	1a9c      	subs	r4, r3, r2
 8000f02:	e620      	b.n	8000b46 <__aeabi_dsub+0xba>
 8000f04:	0767      	lsls	r7, r4, #29
 8000f06:	08c0      	lsrs	r0, r0, #3
 8000f08:	4307      	orrs	r7, r0
 8000f0a:	08e5      	lsrs	r5, r4, #3
 8000f0c:	e6ba      	b.n	8000c84 <__aeabi_dsub+0x1f8>
 8000f0e:	001f      	movs	r7, r3
 8000f10:	4659      	mov	r1, fp
 8000f12:	3f20      	subs	r7, #32
 8000f14:	40f9      	lsrs	r1, r7
 8000f16:	000f      	movs	r7, r1
 8000f18:	2b20      	cmp	r3, #32
 8000f1a:	d005      	beq.n	8000f28 <__aeabi_dsub+0x49c>
 8000f1c:	2140      	movs	r1, #64	@ 0x40
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	4659      	mov	r1, fp
 8000f22:	4099      	lsls	r1, r3
 8000f24:	430a      	orrs	r2, r1
 8000f26:	4692      	mov	sl, r2
 8000f28:	4653      	mov	r3, sl
 8000f2a:	1e5a      	subs	r2, r3, #1
 8000f2c:	4193      	sbcs	r3, r2
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	e604      	b.n	8000b3c <__aeabi_dsub+0xb0>
 8000f32:	1aeb      	subs	r3, r5, r3
 8000f34:	4d9b      	ldr	r5, [pc, #620]	@ (80011a4 <__aeabi_dsub+0x718>)
 8000f36:	4015      	ands	r5, r2
 8000f38:	076f      	lsls	r7, r5, #29
 8000f3a:	08ed      	lsrs	r5, r5, #3
 8000f3c:	032c      	lsls	r4, r5, #12
 8000f3e:	055d      	lsls	r5, r3, #21
 8000f40:	0b24      	lsrs	r4, r4, #12
 8000f42:	0d6d      	lsrs	r5, r5, #21
 8000f44:	e736      	b.n	8000db4 <__aeabi_dsub+0x328>
 8000f46:	4d95      	ldr	r5, [pc, #596]	@ (800119c <__aeabi_dsub+0x710>)
 8000f48:	42ab      	cmp	r3, r5
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_dsub+0x4c2>
 8000f4c:	e0d6      	b.n	80010fc <__aeabi_dsub+0x670>
 8000f4e:	1882      	adds	r2, r0, r2
 8000f50:	0021      	movs	r1, r4
 8000f52:	4282      	cmp	r2, r0
 8000f54:	4180      	sbcs	r0, r0
 8000f56:	4459      	add	r1, fp
 8000f58:	4240      	negs	r0, r0
 8000f5a:	1808      	adds	r0, r1, r0
 8000f5c:	07c7      	lsls	r7, r0, #31
 8000f5e:	0852      	lsrs	r2, r2, #1
 8000f60:	4317      	orrs	r7, r2
 8000f62:	0844      	lsrs	r4, r0, #1
 8000f64:	0752      	lsls	r2, r2, #29
 8000f66:	d400      	bmi.n	8000f6a <__aeabi_dsub+0x4de>
 8000f68:	e185      	b.n	8001276 <__aeabi_dsub+0x7ea>
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	001d      	movs	r5, r3
 8000f6e:	403a      	ands	r2, r7
 8000f70:	2a04      	cmp	r2, #4
 8000f72:	d000      	beq.n	8000f76 <__aeabi_dsub+0x4ea>
 8000f74:	e61a      	b.n	8000bac <__aeabi_dsub+0x120>
 8000f76:	08ff      	lsrs	r7, r7, #3
 8000f78:	0764      	lsls	r4, r4, #29
 8000f7a:	4327      	orrs	r7, r4
 8000f7c:	0905      	lsrs	r5, r0, #4
 8000f7e:	e7dd      	b.n	8000f3c <__aeabi_dsub+0x4b0>
 8000f80:	465b      	mov	r3, fp
 8000f82:	08d2      	lsrs	r2, r2, #3
 8000f84:	075f      	lsls	r7, r3, #29
 8000f86:	4317      	orrs	r7, r2
 8000f88:	08dd      	lsrs	r5, r3, #3
 8000f8a:	e67b      	b.n	8000c84 <__aeabi_dsub+0x1f8>
 8000f8c:	2700      	movs	r7, #0
 8000f8e:	2400      	movs	r4, #0
 8000f90:	e710      	b.n	8000db4 <__aeabi_dsub+0x328>
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d000      	beq.n	8000f98 <__aeabi_dsub+0x50c>
 8000f96:	e0d6      	b.n	8001146 <__aeabi_dsub+0x6ba>
 8000f98:	2900      	cmp	r1, #0
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_dsub+0x512>
 8000f9c:	e12f      	b.n	80011fe <__aeabi_dsub+0x772>
 8000f9e:	2480      	movs	r4, #128	@ 0x80
 8000fa0:	2600      	movs	r6, #0
 8000fa2:	4d7e      	ldr	r5, [pc, #504]	@ (800119c <__aeabi_dsub+0x710>)
 8000fa4:	0324      	lsls	r4, r4, #12
 8000fa6:	e705      	b.n	8000db4 <__aeabi_dsub+0x328>
 8000fa8:	4666      	mov	r6, ip
 8000faa:	465c      	mov	r4, fp
 8000fac:	08d0      	lsrs	r0, r2, #3
 8000fae:	e717      	b.n	8000de0 <__aeabi_dsub+0x354>
 8000fb0:	465b      	mov	r3, fp
 8000fb2:	1a17      	subs	r7, r2, r0
 8000fb4:	42ba      	cmp	r2, r7
 8000fb6:	4192      	sbcs	r2, r2
 8000fb8:	1b1c      	subs	r4, r3, r4
 8000fba:	2601      	movs	r6, #1
 8000fbc:	4663      	mov	r3, ip
 8000fbe:	4252      	negs	r2, r2
 8000fc0:	1aa4      	subs	r4, r4, r2
 8000fc2:	401e      	ands	r6, r3
 8000fc4:	e5c4      	b.n	8000b50 <__aeabi_dsub+0xc4>
 8000fc6:	1883      	adds	r3, r0, r2
 8000fc8:	4283      	cmp	r3, r0
 8000fca:	4180      	sbcs	r0, r0
 8000fcc:	445c      	add	r4, fp
 8000fce:	4240      	negs	r0, r0
 8000fd0:	1825      	adds	r5, r4, r0
 8000fd2:	022a      	lsls	r2, r5, #8
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_dsub+0x54c>
 8000fd6:	e0da      	b.n	800118e <__aeabi_dsub+0x702>
 8000fd8:	4a72      	ldr	r2, [pc, #456]	@ (80011a4 <__aeabi_dsub+0x718>)
 8000fda:	085b      	lsrs	r3, r3, #1
 8000fdc:	4015      	ands	r5, r2
 8000fde:	07ea      	lsls	r2, r5, #31
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	0869      	lsrs	r1, r5, #1
 8000fe4:	075b      	lsls	r3, r3, #29
 8000fe6:	d400      	bmi.n	8000fea <__aeabi_dsub+0x55e>
 8000fe8:	e14a      	b.n	8001280 <__aeabi_dsub+0x7f4>
 8000fea:	230f      	movs	r3, #15
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_dsub+0x568>
 8000ff2:	e0fc      	b.n	80011ee <__aeabi_dsub+0x762>
 8000ff4:	1d17      	adds	r7, r2, #4
 8000ff6:	4297      	cmp	r7, r2
 8000ff8:	41a4      	sbcs	r4, r4
 8000ffa:	4264      	negs	r4, r4
 8000ffc:	2502      	movs	r5, #2
 8000ffe:	1864      	adds	r4, r4, r1
 8001000:	e6ec      	b.n	8000ddc <__aeabi_dsub+0x350>
 8001002:	4647      	mov	r7, r8
 8001004:	001c      	movs	r4, r3
 8001006:	431f      	orrs	r7, r3
 8001008:	d000      	beq.n	800100c <__aeabi_dsub+0x580>
 800100a:	e743      	b.n	8000e94 <__aeabi_dsub+0x408>
 800100c:	2600      	movs	r6, #0
 800100e:	2500      	movs	r5, #0
 8001010:	2400      	movs	r4, #0
 8001012:	e6cf      	b.n	8000db4 <__aeabi_dsub+0x328>
 8001014:	08c0      	lsrs	r0, r0, #3
 8001016:	0767      	lsls	r7, r4, #29
 8001018:	4307      	orrs	r7, r0
 800101a:	08e5      	lsrs	r5, r4, #3
 800101c:	e632      	b.n	8000c84 <__aeabi_dsub+0x1f8>
 800101e:	1a87      	subs	r7, r0, r2
 8001020:	465b      	mov	r3, fp
 8001022:	42b8      	cmp	r0, r7
 8001024:	4180      	sbcs	r0, r0
 8001026:	1ae4      	subs	r4, r4, r3
 8001028:	4240      	negs	r0, r0
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	0223      	lsls	r3, r4, #8
 800102e:	d428      	bmi.n	8001082 <__aeabi_dsub+0x5f6>
 8001030:	0763      	lsls	r3, r4, #29
 8001032:	08ff      	lsrs	r7, r7, #3
 8001034:	431f      	orrs	r7, r3
 8001036:	08e5      	lsrs	r5, r4, #3
 8001038:	2301      	movs	r3, #1
 800103a:	e77f      	b.n	8000f3c <__aeabi_dsub+0x4b0>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_dsub+0x5b6>
 8001040:	e673      	b.n	8000d2a <__aeabi_dsub+0x29e>
 8001042:	464b      	mov	r3, r9
 8001044:	1b5f      	subs	r7, r3, r5
 8001046:	003b      	movs	r3, r7
 8001048:	2d00      	cmp	r5, #0
 800104a:	d100      	bne.n	800104e <__aeabi_dsub+0x5c2>
 800104c:	e742      	b.n	8000ed4 <__aeabi_dsub+0x448>
 800104e:	2f38      	cmp	r7, #56	@ 0x38
 8001050:	dd00      	ble.n	8001054 <__aeabi_dsub+0x5c8>
 8001052:	e0ec      	b.n	800122e <__aeabi_dsub+0x7a2>
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	000e      	movs	r6, r1
 8001058:	041b      	lsls	r3, r3, #16
 800105a:	431c      	orrs	r4, r3
 800105c:	2f1f      	cmp	r7, #31
 800105e:	dc25      	bgt.n	80010ac <__aeabi_dsub+0x620>
 8001060:	2520      	movs	r5, #32
 8001062:	0023      	movs	r3, r4
 8001064:	1bed      	subs	r5, r5, r7
 8001066:	0001      	movs	r1, r0
 8001068:	40a8      	lsls	r0, r5
 800106a:	40ab      	lsls	r3, r5
 800106c:	40f9      	lsrs	r1, r7
 800106e:	1e45      	subs	r5, r0, #1
 8001070:	41a8      	sbcs	r0, r5
 8001072:	430b      	orrs	r3, r1
 8001074:	40fc      	lsrs	r4, r7
 8001076:	4318      	orrs	r0, r3
 8001078:	465b      	mov	r3, fp
 800107a:	1b1b      	subs	r3, r3, r4
 800107c:	469b      	mov	fp, r3
 800107e:	e739      	b.n	8000ef4 <__aeabi_dsub+0x468>
 8001080:	4666      	mov	r6, ip
 8001082:	2501      	movs	r5, #1
 8001084:	e562      	b.n	8000b4c <__aeabi_dsub+0xc0>
 8001086:	001f      	movs	r7, r3
 8001088:	4659      	mov	r1, fp
 800108a:	3f20      	subs	r7, #32
 800108c:	40f9      	lsrs	r1, r7
 800108e:	468c      	mov	ip, r1
 8001090:	2b20      	cmp	r3, #32
 8001092:	d005      	beq.n	80010a0 <__aeabi_dsub+0x614>
 8001094:	2740      	movs	r7, #64	@ 0x40
 8001096:	4659      	mov	r1, fp
 8001098:	1afb      	subs	r3, r7, r3
 800109a:	4099      	lsls	r1, r3
 800109c:	430a      	orrs	r2, r1
 800109e:	4692      	mov	sl, r2
 80010a0:	4657      	mov	r7, sl
 80010a2:	1e7b      	subs	r3, r7, #1
 80010a4:	419f      	sbcs	r7, r3
 80010a6:	4663      	mov	r3, ip
 80010a8:	431f      	orrs	r7, r3
 80010aa:	e5c1      	b.n	8000c30 <__aeabi_dsub+0x1a4>
 80010ac:	003b      	movs	r3, r7
 80010ae:	0025      	movs	r5, r4
 80010b0:	3b20      	subs	r3, #32
 80010b2:	40dd      	lsrs	r5, r3
 80010b4:	2f20      	cmp	r7, #32
 80010b6:	d004      	beq.n	80010c2 <__aeabi_dsub+0x636>
 80010b8:	2340      	movs	r3, #64	@ 0x40
 80010ba:	1bdb      	subs	r3, r3, r7
 80010bc:	409c      	lsls	r4, r3
 80010be:	4320      	orrs	r0, r4
 80010c0:	4680      	mov	r8, r0
 80010c2:	4640      	mov	r0, r8
 80010c4:	1e43      	subs	r3, r0, #1
 80010c6:	4198      	sbcs	r0, r3
 80010c8:	4328      	orrs	r0, r5
 80010ca:	e713      	b.n	8000ef4 <__aeabi_dsub+0x468>
 80010cc:	2900      	cmp	r1, #0
 80010ce:	d09d      	beq.n	800100c <__aeabi_dsub+0x580>
 80010d0:	2601      	movs	r6, #1
 80010d2:	4663      	mov	r3, ip
 80010d4:	465c      	mov	r4, fp
 80010d6:	4690      	mov	r8, r2
 80010d8:	401e      	ands	r6, r3
 80010da:	e6db      	b.n	8000e94 <__aeabi_dsub+0x408>
 80010dc:	1a17      	subs	r7, r2, r0
 80010de:	465b      	mov	r3, fp
 80010e0:	42ba      	cmp	r2, r7
 80010e2:	4192      	sbcs	r2, r2
 80010e4:	1b1c      	subs	r4, r3, r4
 80010e6:	4252      	negs	r2, r2
 80010e8:	1aa4      	subs	r4, r4, r2
 80010ea:	0223      	lsls	r3, r4, #8
 80010ec:	d4c8      	bmi.n	8001080 <__aeabi_dsub+0x5f4>
 80010ee:	0763      	lsls	r3, r4, #29
 80010f0:	08ff      	lsrs	r7, r7, #3
 80010f2:	431f      	orrs	r7, r3
 80010f4:	4666      	mov	r6, ip
 80010f6:	2301      	movs	r3, #1
 80010f8:	08e5      	lsrs	r5, r4, #3
 80010fa:	e71f      	b.n	8000f3c <__aeabi_dsub+0x4b0>
 80010fc:	001d      	movs	r5, r3
 80010fe:	2400      	movs	r4, #0
 8001100:	2700      	movs	r7, #0
 8001102:	e657      	b.n	8000db4 <__aeabi_dsub+0x328>
 8001104:	465c      	mov	r4, fp
 8001106:	08d0      	lsrs	r0, r2, #3
 8001108:	e66a      	b.n	8000de0 <__aeabi_dsub+0x354>
 800110a:	2b00      	cmp	r3, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_dsub+0x684>
 800110e:	e737      	b.n	8000f80 <__aeabi_dsub+0x4f4>
 8001110:	4653      	mov	r3, sl
 8001112:	08c0      	lsrs	r0, r0, #3
 8001114:	0767      	lsls	r7, r4, #29
 8001116:	4307      	orrs	r7, r0
 8001118:	08e5      	lsrs	r5, r4, #3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d100      	bne.n	8001120 <__aeabi_dsub+0x694>
 800111e:	e5b1      	b.n	8000c84 <__aeabi_dsub+0x1f8>
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	031b      	lsls	r3, r3, #12
 8001124:	421d      	tst	r5, r3
 8001126:	d008      	beq.n	800113a <__aeabi_dsub+0x6ae>
 8001128:	4659      	mov	r1, fp
 800112a:	08c8      	lsrs	r0, r1, #3
 800112c:	4218      	tst	r0, r3
 800112e:	d104      	bne.n	800113a <__aeabi_dsub+0x6ae>
 8001130:	08d2      	lsrs	r2, r2, #3
 8001132:	0749      	lsls	r1, r1, #29
 8001134:	430a      	orrs	r2, r1
 8001136:	0017      	movs	r7, r2
 8001138:	0005      	movs	r5, r0
 800113a:	0f7b      	lsrs	r3, r7, #29
 800113c:	00ff      	lsls	r7, r7, #3
 800113e:	08ff      	lsrs	r7, r7, #3
 8001140:	075b      	lsls	r3, r3, #29
 8001142:	431f      	orrs	r7, r3
 8001144:	e59e      	b.n	8000c84 <__aeabi_dsub+0x1f8>
 8001146:	08c0      	lsrs	r0, r0, #3
 8001148:	0763      	lsls	r3, r4, #29
 800114a:	4318      	orrs	r0, r3
 800114c:	08e5      	lsrs	r5, r4, #3
 800114e:	2900      	cmp	r1, #0
 8001150:	d053      	beq.n	80011fa <__aeabi_dsub+0x76e>
 8001152:	2380      	movs	r3, #128	@ 0x80
 8001154:	031b      	lsls	r3, r3, #12
 8001156:	421d      	tst	r5, r3
 8001158:	d00a      	beq.n	8001170 <__aeabi_dsub+0x6e4>
 800115a:	4659      	mov	r1, fp
 800115c:	08cc      	lsrs	r4, r1, #3
 800115e:	421c      	tst	r4, r3
 8001160:	d106      	bne.n	8001170 <__aeabi_dsub+0x6e4>
 8001162:	2601      	movs	r6, #1
 8001164:	4663      	mov	r3, ip
 8001166:	0025      	movs	r5, r4
 8001168:	08d0      	lsrs	r0, r2, #3
 800116a:	0749      	lsls	r1, r1, #29
 800116c:	4308      	orrs	r0, r1
 800116e:	401e      	ands	r6, r3
 8001170:	0f47      	lsrs	r7, r0, #29
 8001172:	00c0      	lsls	r0, r0, #3
 8001174:	08c0      	lsrs	r0, r0, #3
 8001176:	077f      	lsls	r7, r7, #29
 8001178:	4307      	orrs	r7, r0
 800117a:	e583      	b.n	8000c84 <__aeabi_dsub+0x1f8>
 800117c:	1883      	adds	r3, r0, r2
 800117e:	4293      	cmp	r3, r2
 8001180:	4192      	sbcs	r2, r2
 8001182:	445c      	add	r4, fp
 8001184:	4252      	negs	r2, r2
 8001186:	18a5      	adds	r5, r4, r2
 8001188:	022a      	lsls	r2, r5, #8
 800118a:	d500      	bpl.n	800118e <__aeabi_dsub+0x702>
 800118c:	e724      	b.n	8000fd8 <__aeabi_dsub+0x54c>
 800118e:	076f      	lsls	r7, r5, #29
 8001190:	08db      	lsrs	r3, r3, #3
 8001192:	431f      	orrs	r7, r3
 8001194:	08ed      	lsrs	r5, r5, #3
 8001196:	2301      	movs	r3, #1
 8001198:	e6d0      	b.n	8000f3c <__aeabi_dsub+0x4b0>
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	000007ff 	.word	0x000007ff
 80011a0:	000007fe 	.word	0x000007fe
 80011a4:	ff7fffff 	.word	0xff7fffff
 80011a8:	465b      	mov	r3, fp
 80011aa:	08d2      	lsrs	r2, r2, #3
 80011ac:	075f      	lsls	r7, r3, #29
 80011ae:	4666      	mov	r6, ip
 80011b0:	4317      	orrs	r7, r2
 80011b2:	08dd      	lsrs	r5, r3, #3
 80011b4:	e566      	b.n	8000c84 <__aeabi_dsub+0x1f8>
 80011b6:	0025      	movs	r5, r4
 80011b8:	3b20      	subs	r3, #32
 80011ba:	40dd      	lsrs	r5, r3
 80011bc:	4663      	mov	r3, ip
 80011be:	2b20      	cmp	r3, #32
 80011c0:	d005      	beq.n	80011ce <__aeabi_dsub+0x742>
 80011c2:	2340      	movs	r3, #64	@ 0x40
 80011c4:	4661      	mov	r1, ip
 80011c6:	1a5b      	subs	r3, r3, r1
 80011c8:	409c      	lsls	r4, r3
 80011ca:	4320      	orrs	r0, r4
 80011cc:	4680      	mov	r8, r0
 80011ce:	4647      	mov	r7, r8
 80011d0:	1e7b      	subs	r3, r7, #1
 80011d2:	419f      	sbcs	r7, r3
 80011d4:	432f      	orrs	r7, r5
 80011d6:	e5a0      	b.n	8000d1a <__aeabi_dsub+0x28e>
 80011d8:	2120      	movs	r1, #32
 80011da:	2700      	movs	r7, #0
 80011dc:	1a09      	subs	r1, r1, r0
 80011de:	e4d2      	b.n	8000b86 <__aeabi_dsub+0xfa>
 80011e0:	2f00      	cmp	r7, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dsub+0x75a>
 80011e4:	e713      	b.n	800100e <__aeabi_dsub+0x582>
 80011e6:	465c      	mov	r4, fp
 80011e8:	0017      	movs	r7, r2
 80011ea:	2500      	movs	r5, #0
 80011ec:	e5f6      	b.n	8000ddc <__aeabi_dsub+0x350>
 80011ee:	08d7      	lsrs	r7, r2, #3
 80011f0:	0749      	lsls	r1, r1, #29
 80011f2:	2302      	movs	r3, #2
 80011f4:	430f      	orrs	r7, r1
 80011f6:	092d      	lsrs	r5, r5, #4
 80011f8:	e6a0      	b.n	8000f3c <__aeabi_dsub+0x4b0>
 80011fa:	0007      	movs	r7, r0
 80011fc:	e542      	b.n	8000c84 <__aeabi_dsub+0x1f8>
 80011fe:	465b      	mov	r3, fp
 8001200:	2601      	movs	r6, #1
 8001202:	075f      	lsls	r7, r3, #29
 8001204:	08dd      	lsrs	r5, r3, #3
 8001206:	4663      	mov	r3, ip
 8001208:	08d2      	lsrs	r2, r2, #3
 800120a:	4317      	orrs	r7, r2
 800120c:	401e      	ands	r6, r3
 800120e:	e539      	b.n	8000c84 <__aeabi_dsub+0x1f8>
 8001210:	465b      	mov	r3, fp
 8001212:	08d2      	lsrs	r2, r2, #3
 8001214:	075f      	lsls	r7, r3, #29
 8001216:	4317      	orrs	r7, r2
 8001218:	08dd      	lsrs	r5, r3, #3
 800121a:	e533      	b.n	8000c84 <__aeabi_dsub+0x1f8>
 800121c:	4a1e      	ldr	r2, [pc, #120]	@ (8001298 <__aeabi_dsub+0x80c>)
 800121e:	08db      	lsrs	r3, r3, #3
 8001220:	4022      	ands	r2, r4
 8001222:	0757      	lsls	r7, r2, #29
 8001224:	0252      	lsls	r2, r2, #9
 8001226:	2501      	movs	r5, #1
 8001228:	431f      	orrs	r7, r3
 800122a:	0b14      	lsrs	r4, r2, #12
 800122c:	e5c2      	b.n	8000db4 <__aeabi_dsub+0x328>
 800122e:	000e      	movs	r6, r1
 8001230:	2001      	movs	r0, #1
 8001232:	e65f      	b.n	8000ef4 <__aeabi_dsub+0x468>
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00d      	beq.n	8001254 <__aeabi_dsub+0x7c8>
 8001238:	464b      	mov	r3, r9
 800123a:	1b5b      	subs	r3, r3, r5
 800123c:	469c      	mov	ip, r3
 800123e:	2d00      	cmp	r5, #0
 8001240:	d100      	bne.n	8001244 <__aeabi_dsub+0x7b8>
 8001242:	e548      	b.n	8000cd6 <__aeabi_dsub+0x24a>
 8001244:	2701      	movs	r7, #1
 8001246:	2b38      	cmp	r3, #56	@ 0x38
 8001248:	dd00      	ble.n	800124c <__aeabi_dsub+0x7c0>
 800124a:	e566      	b.n	8000d1a <__aeabi_dsub+0x28e>
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	431c      	orrs	r4, r3
 8001252:	e550      	b.n	8000cf6 <__aeabi_dsub+0x26a>
 8001254:	1c6b      	adds	r3, r5, #1
 8001256:	4d11      	ldr	r5, [pc, #68]	@ (800129c <__aeabi_dsub+0x810>)
 8001258:	422b      	tst	r3, r5
 800125a:	d000      	beq.n	800125e <__aeabi_dsub+0x7d2>
 800125c:	e673      	b.n	8000f46 <__aeabi_dsub+0x4ba>
 800125e:	4659      	mov	r1, fp
 8001260:	0023      	movs	r3, r4
 8001262:	4311      	orrs	r1, r2
 8001264:	468a      	mov	sl, r1
 8001266:	4303      	orrs	r3, r0
 8001268:	e600      	b.n	8000e6c <__aeabi_dsub+0x3e0>
 800126a:	0767      	lsls	r7, r4, #29
 800126c:	08c0      	lsrs	r0, r0, #3
 800126e:	2300      	movs	r3, #0
 8001270:	4307      	orrs	r7, r0
 8001272:	08e5      	lsrs	r5, r4, #3
 8001274:	e662      	b.n	8000f3c <__aeabi_dsub+0x4b0>
 8001276:	0764      	lsls	r4, r4, #29
 8001278:	08ff      	lsrs	r7, r7, #3
 800127a:	4327      	orrs	r7, r4
 800127c:	0905      	lsrs	r5, r0, #4
 800127e:	e65d      	b.n	8000f3c <__aeabi_dsub+0x4b0>
 8001280:	08d2      	lsrs	r2, r2, #3
 8001282:	0749      	lsls	r1, r1, #29
 8001284:	4311      	orrs	r1, r2
 8001286:	000f      	movs	r7, r1
 8001288:	2302      	movs	r3, #2
 800128a:	092d      	lsrs	r5, r5, #4
 800128c:	e656      	b.n	8000f3c <__aeabi_dsub+0x4b0>
 800128e:	0007      	movs	r7, r0
 8001290:	e5a4      	b.n	8000ddc <__aeabi_dsub+0x350>
 8001292:	0038      	movs	r0, r7
 8001294:	e48f      	b.n	8000bb6 <__aeabi_dsub+0x12a>
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	ff7fffff 	.word	0xff7fffff
 800129c:	000007fe 	.word	0x000007fe

080012a0 <__aeabi_d2iz>:
 80012a0:	000b      	movs	r3, r1
 80012a2:	0002      	movs	r2, r0
 80012a4:	b570      	push	{r4, r5, r6, lr}
 80012a6:	4d16      	ldr	r5, [pc, #88]	@ (8001300 <__aeabi_d2iz+0x60>)
 80012a8:	030c      	lsls	r4, r1, #12
 80012aa:	b082      	sub	sp, #8
 80012ac:	0049      	lsls	r1, r1, #1
 80012ae:	2000      	movs	r0, #0
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	0b24      	lsrs	r4, r4, #12
 80012b6:	0d49      	lsrs	r1, r1, #21
 80012b8:	0fde      	lsrs	r6, r3, #31
 80012ba:	42a9      	cmp	r1, r5
 80012bc:	dd04      	ble.n	80012c8 <__aeabi_d2iz+0x28>
 80012be:	4811      	ldr	r0, [pc, #68]	@ (8001304 <__aeabi_d2iz+0x64>)
 80012c0:	4281      	cmp	r1, r0
 80012c2:	dd03      	ble.n	80012cc <__aeabi_d2iz+0x2c>
 80012c4:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <__aeabi_d2iz+0x68>)
 80012c6:	18f0      	adds	r0, r6, r3
 80012c8:	b002      	add	sp, #8
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
 80012cc:	2080      	movs	r0, #128	@ 0x80
 80012ce:	0340      	lsls	r0, r0, #13
 80012d0:	4320      	orrs	r0, r4
 80012d2:	4c0e      	ldr	r4, [pc, #56]	@ (800130c <__aeabi_d2iz+0x6c>)
 80012d4:	1a64      	subs	r4, r4, r1
 80012d6:	2c1f      	cmp	r4, #31
 80012d8:	dd08      	ble.n	80012ec <__aeabi_d2iz+0x4c>
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <__aeabi_d2iz+0x70>)
 80012dc:	1a5b      	subs	r3, r3, r1
 80012de:	40d8      	lsrs	r0, r3
 80012e0:	0003      	movs	r3, r0
 80012e2:	4258      	negs	r0, r3
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	d1ef      	bne.n	80012c8 <__aeabi_d2iz+0x28>
 80012e8:	0018      	movs	r0, r3
 80012ea:	e7ed      	b.n	80012c8 <__aeabi_d2iz+0x28>
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <__aeabi_d2iz+0x74>)
 80012ee:	9a00      	ldr	r2, [sp, #0]
 80012f0:	469c      	mov	ip, r3
 80012f2:	0003      	movs	r3, r0
 80012f4:	4461      	add	r1, ip
 80012f6:	408b      	lsls	r3, r1
 80012f8:	40e2      	lsrs	r2, r4
 80012fa:	4313      	orrs	r3, r2
 80012fc:	e7f1      	b.n	80012e2 <__aeabi_d2iz+0x42>
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	000003fe 	.word	0x000003fe
 8001304:	0000041d 	.word	0x0000041d
 8001308:	7fffffff 	.word	0x7fffffff
 800130c:	00000433 	.word	0x00000433
 8001310:	00000413 	.word	0x00000413
 8001314:	fffffbed 	.word	0xfffffbed

08001318 <__aeabi_i2d>:
 8001318:	b570      	push	{r4, r5, r6, lr}
 800131a:	2800      	cmp	r0, #0
 800131c:	d016      	beq.n	800134c <__aeabi_i2d+0x34>
 800131e:	17c3      	asrs	r3, r0, #31
 8001320:	18c5      	adds	r5, r0, r3
 8001322:	405d      	eors	r5, r3
 8001324:	0fc4      	lsrs	r4, r0, #31
 8001326:	0028      	movs	r0, r5
 8001328:	f000 f862 	bl	80013f0 <__clzsi2>
 800132c:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <__aeabi_i2d+0x58>)
 800132e:	1a1b      	subs	r3, r3, r0
 8001330:	055b      	lsls	r3, r3, #21
 8001332:	0d5b      	lsrs	r3, r3, #21
 8001334:	280a      	cmp	r0, #10
 8001336:	dc14      	bgt.n	8001362 <__aeabi_i2d+0x4a>
 8001338:	0002      	movs	r2, r0
 800133a:	002e      	movs	r6, r5
 800133c:	3215      	adds	r2, #21
 800133e:	4096      	lsls	r6, r2
 8001340:	220b      	movs	r2, #11
 8001342:	1a12      	subs	r2, r2, r0
 8001344:	40d5      	lsrs	r5, r2
 8001346:	032d      	lsls	r5, r5, #12
 8001348:	0b2d      	lsrs	r5, r5, #12
 800134a:	e003      	b.n	8001354 <__aeabi_i2d+0x3c>
 800134c:	2400      	movs	r4, #0
 800134e:	2300      	movs	r3, #0
 8001350:	2500      	movs	r5, #0
 8001352:	2600      	movs	r6, #0
 8001354:	051b      	lsls	r3, r3, #20
 8001356:	432b      	orrs	r3, r5
 8001358:	07e4      	lsls	r4, r4, #31
 800135a:	4323      	orrs	r3, r4
 800135c:	0030      	movs	r0, r6
 800135e:	0019      	movs	r1, r3
 8001360:	bd70      	pop	{r4, r5, r6, pc}
 8001362:	380b      	subs	r0, #11
 8001364:	4085      	lsls	r5, r0
 8001366:	032d      	lsls	r5, r5, #12
 8001368:	2600      	movs	r6, #0
 800136a:	0b2d      	lsrs	r5, r5, #12
 800136c:	e7f2      	b.n	8001354 <__aeabi_i2d+0x3c>
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	0000041e 	.word	0x0000041e

08001374 <__aeabi_cdrcmple>:
 8001374:	4684      	mov	ip, r0
 8001376:	0010      	movs	r0, r2
 8001378:	4662      	mov	r2, ip
 800137a:	468c      	mov	ip, r1
 800137c:	0019      	movs	r1, r3
 800137e:	4663      	mov	r3, ip
 8001380:	e000      	b.n	8001384 <__aeabi_cdcmpeq>
 8001382:	46c0      	nop			@ (mov r8, r8)

08001384 <__aeabi_cdcmpeq>:
 8001384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001386:	f000 f905 	bl	8001594 <__ledf2>
 800138a:	2800      	cmp	r0, #0
 800138c:	d401      	bmi.n	8001392 <__aeabi_cdcmpeq+0xe>
 800138e:	2100      	movs	r1, #0
 8001390:	42c8      	cmn	r0, r1
 8001392:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001394 <__aeabi_dcmpeq>:
 8001394:	b510      	push	{r4, lr}
 8001396:	f000 f849 	bl	800142c <__eqdf2>
 800139a:	4240      	negs	r0, r0
 800139c:	3001      	adds	r0, #1
 800139e:	bd10      	pop	{r4, pc}

080013a0 <__aeabi_dcmplt>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	f000 f8f7 	bl	8001594 <__ledf2>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	db01      	blt.n	80013ae <__aeabi_dcmplt+0xe>
 80013aa:	2000      	movs	r0, #0
 80013ac:	bd10      	pop	{r4, pc}
 80013ae:	2001      	movs	r0, #1
 80013b0:	bd10      	pop	{r4, pc}
 80013b2:	46c0      	nop			@ (mov r8, r8)

080013b4 <__aeabi_dcmple>:
 80013b4:	b510      	push	{r4, lr}
 80013b6:	f000 f8ed 	bl	8001594 <__ledf2>
 80013ba:	2800      	cmp	r0, #0
 80013bc:	dd01      	ble.n	80013c2 <__aeabi_dcmple+0xe>
 80013be:	2000      	movs	r0, #0
 80013c0:	bd10      	pop	{r4, pc}
 80013c2:	2001      	movs	r0, #1
 80013c4:	bd10      	pop	{r4, pc}
 80013c6:	46c0      	nop			@ (mov r8, r8)

080013c8 <__aeabi_dcmpgt>:
 80013c8:	b510      	push	{r4, lr}
 80013ca:	f000 f873 	bl	80014b4 <__gedf2>
 80013ce:	2800      	cmp	r0, #0
 80013d0:	dc01      	bgt.n	80013d6 <__aeabi_dcmpgt+0xe>
 80013d2:	2000      	movs	r0, #0
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	2001      	movs	r0, #1
 80013d8:	bd10      	pop	{r4, pc}
 80013da:	46c0      	nop			@ (mov r8, r8)

080013dc <__aeabi_dcmpge>:
 80013dc:	b510      	push	{r4, lr}
 80013de:	f000 f869 	bl	80014b4 <__gedf2>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	da01      	bge.n	80013ea <__aeabi_dcmpge+0xe>
 80013e6:	2000      	movs	r0, #0
 80013e8:	bd10      	pop	{r4, pc}
 80013ea:	2001      	movs	r0, #1
 80013ec:	bd10      	pop	{r4, pc}
 80013ee:	46c0      	nop			@ (mov r8, r8)

080013f0 <__clzsi2>:
 80013f0:	211c      	movs	r1, #28
 80013f2:	2301      	movs	r3, #1
 80013f4:	041b      	lsls	r3, r3, #16
 80013f6:	4298      	cmp	r0, r3
 80013f8:	d301      	bcc.n	80013fe <__clzsi2+0xe>
 80013fa:	0c00      	lsrs	r0, r0, #16
 80013fc:	3910      	subs	r1, #16
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	4298      	cmp	r0, r3
 8001402:	d301      	bcc.n	8001408 <__clzsi2+0x18>
 8001404:	0a00      	lsrs	r0, r0, #8
 8001406:	3908      	subs	r1, #8
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	4298      	cmp	r0, r3
 800140c:	d301      	bcc.n	8001412 <__clzsi2+0x22>
 800140e:	0900      	lsrs	r0, r0, #4
 8001410:	3904      	subs	r1, #4
 8001412:	a202      	add	r2, pc, #8	@ (adr r2, 800141c <__clzsi2+0x2c>)
 8001414:	5c10      	ldrb	r0, [r2, r0]
 8001416:	1840      	adds	r0, r0, r1
 8001418:	4770      	bx	lr
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	02020304 	.word	0x02020304
 8001420:	01010101 	.word	0x01010101
	...

0800142c <__eqdf2>:
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	4657      	mov	r7, sl
 8001430:	46de      	mov	lr, fp
 8001432:	464e      	mov	r6, r9
 8001434:	4645      	mov	r5, r8
 8001436:	b5e0      	push	{r5, r6, r7, lr}
 8001438:	000d      	movs	r5, r1
 800143a:	0004      	movs	r4, r0
 800143c:	0fe8      	lsrs	r0, r5, #31
 800143e:	4683      	mov	fp, r0
 8001440:	0309      	lsls	r1, r1, #12
 8001442:	0fd8      	lsrs	r0, r3, #31
 8001444:	0b09      	lsrs	r1, r1, #12
 8001446:	4682      	mov	sl, r0
 8001448:	4819      	ldr	r0, [pc, #100]	@ (80014b0 <__eqdf2+0x84>)
 800144a:	468c      	mov	ip, r1
 800144c:	031f      	lsls	r7, r3, #12
 800144e:	0069      	lsls	r1, r5, #1
 8001450:	005e      	lsls	r6, r3, #1
 8001452:	0d49      	lsrs	r1, r1, #21
 8001454:	0b3f      	lsrs	r7, r7, #12
 8001456:	0d76      	lsrs	r6, r6, #21
 8001458:	4281      	cmp	r1, r0
 800145a:	d018      	beq.n	800148e <__eqdf2+0x62>
 800145c:	4286      	cmp	r6, r0
 800145e:	d00f      	beq.n	8001480 <__eqdf2+0x54>
 8001460:	2001      	movs	r0, #1
 8001462:	42b1      	cmp	r1, r6
 8001464:	d10d      	bne.n	8001482 <__eqdf2+0x56>
 8001466:	45bc      	cmp	ip, r7
 8001468:	d10b      	bne.n	8001482 <__eqdf2+0x56>
 800146a:	4294      	cmp	r4, r2
 800146c:	d109      	bne.n	8001482 <__eqdf2+0x56>
 800146e:	45d3      	cmp	fp, sl
 8001470:	d01c      	beq.n	80014ac <__eqdf2+0x80>
 8001472:	2900      	cmp	r1, #0
 8001474:	d105      	bne.n	8001482 <__eqdf2+0x56>
 8001476:	4660      	mov	r0, ip
 8001478:	4320      	orrs	r0, r4
 800147a:	1e43      	subs	r3, r0, #1
 800147c:	4198      	sbcs	r0, r3
 800147e:	e000      	b.n	8001482 <__eqdf2+0x56>
 8001480:	2001      	movs	r0, #1
 8001482:	bcf0      	pop	{r4, r5, r6, r7}
 8001484:	46bb      	mov	fp, r7
 8001486:	46b2      	mov	sl, r6
 8001488:	46a9      	mov	r9, r5
 800148a:	46a0      	mov	r8, r4
 800148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148e:	2001      	movs	r0, #1
 8001490:	428e      	cmp	r6, r1
 8001492:	d1f6      	bne.n	8001482 <__eqdf2+0x56>
 8001494:	4661      	mov	r1, ip
 8001496:	4339      	orrs	r1, r7
 8001498:	000f      	movs	r7, r1
 800149a:	4317      	orrs	r7, r2
 800149c:	4327      	orrs	r7, r4
 800149e:	d1f0      	bne.n	8001482 <__eqdf2+0x56>
 80014a0:	465b      	mov	r3, fp
 80014a2:	4652      	mov	r2, sl
 80014a4:	1a98      	subs	r0, r3, r2
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e7ea      	b.n	8001482 <__eqdf2+0x56>
 80014ac:	2000      	movs	r0, #0
 80014ae:	e7e8      	b.n	8001482 <__eqdf2+0x56>
 80014b0:	000007ff 	.word	0x000007ff

080014b4 <__gedf2>:
 80014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b6:	4657      	mov	r7, sl
 80014b8:	464e      	mov	r6, r9
 80014ba:	4645      	mov	r5, r8
 80014bc:	46de      	mov	lr, fp
 80014be:	b5e0      	push	{r5, r6, r7, lr}
 80014c0:	000d      	movs	r5, r1
 80014c2:	030e      	lsls	r6, r1, #12
 80014c4:	0049      	lsls	r1, r1, #1
 80014c6:	0d49      	lsrs	r1, r1, #21
 80014c8:	468a      	mov	sl, r1
 80014ca:	0fdf      	lsrs	r7, r3, #31
 80014cc:	0fe9      	lsrs	r1, r5, #31
 80014ce:	46bc      	mov	ip, r7
 80014d0:	b083      	sub	sp, #12
 80014d2:	4f2f      	ldr	r7, [pc, #188]	@ (8001590 <__gedf2+0xdc>)
 80014d4:	0004      	movs	r4, r0
 80014d6:	4680      	mov	r8, r0
 80014d8:	9101      	str	r1, [sp, #4]
 80014da:	0058      	lsls	r0, r3, #1
 80014dc:	0319      	lsls	r1, r3, #12
 80014de:	4691      	mov	r9, r2
 80014e0:	0b36      	lsrs	r6, r6, #12
 80014e2:	0b09      	lsrs	r1, r1, #12
 80014e4:	0d40      	lsrs	r0, r0, #21
 80014e6:	45ba      	cmp	sl, r7
 80014e8:	d01d      	beq.n	8001526 <__gedf2+0x72>
 80014ea:	42b8      	cmp	r0, r7
 80014ec:	d00d      	beq.n	800150a <__gedf2+0x56>
 80014ee:	4657      	mov	r7, sl
 80014f0:	2f00      	cmp	r7, #0
 80014f2:	d12a      	bne.n	800154a <__gedf2+0x96>
 80014f4:	4334      	orrs	r4, r6
 80014f6:	2800      	cmp	r0, #0
 80014f8:	d124      	bne.n	8001544 <__gedf2+0x90>
 80014fa:	430a      	orrs	r2, r1
 80014fc:	d036      	beq.n	800156c <__gedf2+0xb8>
 80014fe:	2c00      	cmp	r4, #0
 8001500:	d141      	bne.n	8001586 <__gedf2+0xd2>
 8001502:	4663      	mov	r3, ip
 8001504:	0058      	lsls	r0, r3, #1
 8001506:	3801      	subs	r0, #1
 8001508:	e015      	b.n	8001536 <__gedf2+0x82>
 800150a:	4311      	orrs	r1, r2
 800150c:	d138      	bne.n	8001580 <__gedf2+0xcc>
 800150e:	4653      	mov	r3, sl
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <__gedf2+0x64>
 8001514:	4326      	orrs	r6, r4
 8001516:	d0f4      	beq.n	8001502 <__gedf2+0x4e>
 8001518:	9b01      	ldr	r3, [sp, #4]
 800151a:	4563      	cmp	r3, ip
 800151c:	d107      	bne.n	800152e <__gedf2+0x7a>
 800151e:	9b01      	ldr	r3, [sp, #4]
 8001520:	0058      	lsls	r0, r3, #1
 8001522:	3801      	subs	r0, #1
 8001524:	e007      	b.n	8001536 <__gedf2+0x82>
 8001526:	4326      	orrs	r6, r4
 8001528:	d12a      	bne.n	8001580 <__gedf2+0xcc>
 800152a:	4550      	cmp	r0, sl
 800152c:	d021      	beq.n	8001572 <__gedf2+0xbe>
 800152e:	2001      	movs	r0, #1
 8001530:	9b01      	ldr	r3, [sp, #4]
 8001532:	425f      	negs	r7, r3
 8001534:	4338      	orrs	r0, r7
 8001536:	b003      	add	sp, #12
 8001538:	bcf0      	pop	{r4, r5, r6, r7}
 800153a:	46bb      	mov	fp, r7
 800153c:	46b2      	mov	sl, r6
 800153e:	46a9      	mov	r9, r5
 8001540:	46a0      	mov	r8, r4
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001544:	2c00      	cmp	r4, #0
 8001546:	d0dc      	beq.n	8001502 <__gedf2+0x4e>
 8001548:	e7e6      	b.n	8001518 <__gedf2+0x64>
 800154a:	2800      	cmp	r0, #0
 800154c:	d0ef      	beq.n	800152e <__gedf2+0x7a>
 800154e:	9b01      	ldr	r3, [sp, #4]
 8001550:	4563      	cmp	r3, ip
 8001552:	d1ec      	bne.n	800152e <__gedf2+0x7a>
 8001554:	4582      	cmp	sl, r0
 8001556:	dcea      	bgt.n	800152e <__gedf2+0x7a>
 8001558:	dbe1      	blt.n	800151e <__gedf2+0x6a>
 800155a:	428e      	cmp	r6, r1
 800155c:	d8e7      	bhi.n	800152e <__gedf2+0x7a>
 800155e:	d1de      	bne.n	800151e <__gedf2+0x6a>
 8001560:	45c8      	cmp	r8, r9
 8001562:	d8e4      	bhi.n	800152e <__gedf2+0x7a>
 8001564:	2000      	movs	r0, #0
 8001566:	45c8      	cmp	r8, r9
 8001568:	d2e5      	bcs.n	8001536 <__gedf2+0x82>
 800156a:	e7d8      	b.n	800151e <__gedf2+0x6a>
 800156c:	2c00      	cmp	r4, #0
 800156e:	d0e2      	beq.n	8001536 <__gedf2+0x82>
 8001570:	e7dd      	b.n	800152e <__gedf2+0x7a>
 8001572:	4311      	orrs	r1, r2
 8001574:	d104      	bne.n	8001580 <__gedf2+0xcc>
 8001576:	9b01      	ldr	r3, [sp, #4]
 8001578:	4563      	cmp	r3, ip
 800157a:	d1d8      	bne.n	800152e <__gedf2+0x7a>
 800157c:	2000      	movs	r0, #0
 800157e:	e7da      	b.n	8001536 <__gedf2+0x82>
 8001580:	2002      	movs	r0, #2
 8001582:	4240      	negs	r0, r0
 8001584:	e7d7      	b.n	8001536 <__gedf2+0x82>
 8001586:	9b01      	ldr	r3, [sp, #4]
 8001588:	4563      	cmp	r3, ip
 800158a:	d0e6      	beq.n	800155a <__gedf2+0xa6>
 800158c:	e7cf      	b.n	800152e <__gedf2+0x7a>
 800158e:	46c0      	nop			@ (mov r8, r8)
 8001590:	000007ff 	.word	0x000007ff

08001594 <__ledf2>:
 8001594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001596:	4657      	mov	r7, sl
 8001598:	464e      	mov	r6, r9
 800159a:	4645      	mov	r5, r8
 800159c:	46de      	mov	lr, fp
 800159e:	b5e0      	push	{r5, r6, r7, lr}
 80015a0:	000d      	movs	r5, r1
 80015a2:	030e      	lsls	r6, r1, #12
 80015a4:	0049      	lsls	r1, r1, #1
 80015a6:	0d49      	lsrs	r1, r1, #21
 80015a8:	468a      	mov	sl, r1
 80015aa:	0fdf      	lsrs	r7, r3, #31
 80015ac:	0fe9      	lsrs	r1, r5, #31
 80015ae:	46bc      	mov	ip, r7
 80015b0:	b083      	sub	sp, #12
 80015b2:	4f2e      	ldr	r7, [pc, #184]	@ (800166c <__ledf2+0xd8>)
 80015b4:	0004      	movs	r4, r0
 80015b6:	4680      	mov	r8, r0
 80015b8:	9101      	str	r1, [sp, #4]
 80015ba:	0058      	lsls	r0, r3, #1
 80015bc:	0319      	lsls	r1, r3, #12
 80015be:	4691      	mov	r9, r2
 80015c0:	0b36      	lsrs	r6, r6, #12
 80015c2:	0b09      	lsrs	r1, r1, #12
 80015c4:	0d40      	lsrs	r0, r0, #21
 80015c6:	45ba      	cmp	sl, r7
 80015c8:	d01e      	beq.n	8001608 <__ledf2+0x74>
 80015ca:	42b8      	cmp	r0, r7
 80015cc:	d00d      	beq.n	80015ea <__ledf2+0x56>
 80015ce:	4657      	mov	r7, sl
 80015d0:	2f00      	cmp	r7, #0
 80015d2:	d127      	bne.n	8001624 <__ledf2+0x90>
 80015d4:	4334      	orrs	r4, r6
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d133      	bne.n	8001642 <__ledf2+0xae>
 80015da:	430a      	orrs	r2, r1
 80015dc:	d034      	beq.n	8001648 <__ledf2+0xb4>
 80015de:	2c00      	cmp	r4, #0
 80015e0:	d140      	bne.n	8001664 <__ledf2+0xd0>
 80015e2:	4663      	mov	r3, ip
 80015e4:	0058      	lsls	r0, r3, #1
 80015e6:	3801      	subs	r0, #1
 80015e8:	e015      	b.n	8001616 <__ledf2+0x82>
 80015ea:	4311      	orrs	r1, r2
 80015ec:	d112      	bne.n	8001614 <__ledf2+0x80>
 80015ee:	4653      	mov	r3, sl
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <__ledf2+0x64>
 80015f4:	4326      	orrs	r6, r4
 80015f6:	d0f4      	beq.n	80015e2 <__ledf2+0x4e>
 80015f8:	9b01      	ldr	r3, [sp, #4]
 80015fa:	4563      	cmp	r3, ip
 80015fc:	d01d      	beq.n	800163a <__ledf2+0xa6>
 80015fe:	2001      	movs	r0, #1
 8001600:	9b01      	ldr	r3, [sp, #4]
 8001602:	425f      	negs	r7, r3
 8001604:	4338      	orrs	r0, r7
 8001606:	e006      	b.n	8001616 <__ledf2+0x82>
 8001608:	4326      	orrs	r6, r4
 800160a:	d103      	bne.n	8001614 <__ledf2+0x80>
 800160c:	4550      	cmp	r0, sl
 800160e:	d1f6      	bne.n	80015fe <__ledf2+0x6a>
 8001610:	4311      	orrs	r1, r2
 8001612:	d01c      	beq.n	800164e <__ledf2+0xba>
 8001614:	2002      	movs	r0, #2
 8001616:	b003      	add	sp, #12
 8001618:	bcf0      	pop	{r4, r5, r6, r7}
 800161a:	46bb      	mov	fp, r7
 800161c:	46b2      	mov	sl, r6
 800161e:	46a9      	mov	r9, r5
 8001620:	46a0      	mov	r8, r4
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	2800      	cmp	r0, #0
 8001626:	d0ea      	beq.n	80015fe <__ledf2+0x6a>
 8001628:	9b01      	ldr	r3, [sp, #4]
 800162a:	4563      	cmp	r3, ip
 800162c:	d1e7      	bne.n	80015fe <__ledf2+0x6a>
 800162e:	4582      	cmp	sl, r0
 8001630:	dce5      	bgt.n	80015fe <__ledf2+0x6a>
 8001632:	db02      	blt.n	800163a <__ledf2+0xa6>
 8001634:	428e      	cmp	r6, r1
 8001636:	d8e2      	bhi.n	80015fe <__ledf2+0x6a>
 8001638:	d00e      	beq.n	8001658 <__ledf2+0xc4>
 800163a:	9b01      	ldr	r3, [sp, #4]
 800163c:	0058      	lsls	r0, r3, #1
 800163e:	3801      	subs	r0, #1
 8001640:	e7e9      	b.n	8001616 <__ledf2+0x82>
 8001642:	2c00      	cmp	r4, #0
 8001644:	d0cd      	beq.n	80015e2 <__ledf2+0x4e>
 8001646:	e7d7      	b.n	80015f8 <__ledf2+0x64>
 8001648:	2c00      	cmp	r4, #0
 800164a:	d0e4      	beq.n	8001616 <__ledf2+0x82>
 800164c:	e7d7      	b.n	80015fe <__ledf2+0x6a>
 800164e:	9b01      	ldr	r3, [sp, #4]
 8001650:	2000      	movs	r0, #0
 8001652:	4563      	cmp	r3, ip
 8001654:	d0df      	beq.n	8001616 <__ledf2+0x82>
 8001656:	e7d2      	b.n	80015fe <__ledf2+0x6a>
 8001658:	45c8      	cmp	r8, r9
 800165a:	d8d0      	bhi.n	80015fe <__ledf2+0x6a>
 800165c:	2000      	movs	r0, #0
 800165e:	45c8      	cmp	r8, r9
 8001660:	d2d9      	bcs.n	8001616 <__ledf2+0x82>
 8001662:	e7ea      	b.n	800163a <__ledf2+0xa6>
 8001664:	9b01      	ldr	r3, [sp, #4]
 8001666:	4563      	cmp	r3, ip
 8001668:	d0e4      	beq.n	8001634 <__ledf2+0xa0>
 800166a:	e7c8      	b.n	80015fe <__ledf2+0x6a>
 800166c:	000007ff 	.word	0x000007ff

08001670 <mifare_ul_read>:
		Card.mifare_auth_status = Auth_ALL_Failed;
	}
	mccDeinitialise(true);
}

void mifare_ul_read(){
 8001670:	b537      	push	{r0, r1, r2, r4, r5, lr}
//	if(rfalT2TPollerSectorSelect(0) != RFAL_ERR_NONE){
//		uint8_t tmp = 0xcc;
//		CDC_Transmit(0, &tmp, 1);
//		return;
//	}
	uint16_t rcv_len = 0;
 8001672:	466b      	mov	r3, sp
	Card.mifare_ul_read_status = 0;
 8001674:	2200      	movs	r2, #0
 8001676:	4c0b      	ldr	r4, [pc, #44]	@ (80016a4 <mifare_ul_read+0x34>)
	if (mifareUlReadNBytes(5, Card.nesica_serial, 16, &rcv_len) != RFAL_ERR_NONE) {
 8001678:	4d0b      	ldr	r5, [pc, #44]	@ (80016a8 <mifare_ul_read+0x38>)
	Card.mifare_ul_read_status = 0;
 800167a:	7262      	strb	r2, [r4, #9]
	uint16_t rcv_len = 0;
 800167c:	3306      	adds	r3, #6
 800167e:	801a      	strh	r2, [r3, #0]
	if (mifareUlReadNBytes(5, Card.nesica_serial, 16, &rcv_len) != RFAL_ERR_NONE) {
 8001680:	0029      	movs	r1, r5
 8001682:	2005      	movs	r0, #5
 8001684:	3210      	adds	r2, #16
 8001686:	f001 f8e9 	bl	800285c <mifareUlReadNBytes>
 800168a:	2800      	cmp	r0, #0
 800168c:	d108      	bne.n	80016a0 <mifare_ul_read+0x30>
	  return;
	}
	for(uint8_t i = 0;i<16;i++){
		if(!((Card.nesica_serial[i] > 0x2f) && (Card.nesica_serial[i] < 0x3a ))){
 800168e:	5c2b      	ldrb	r3, [r5, r0]
 8001690:	3b30      	subs	r3, #48	@ 0x30
 8001692:	2b09      	cmp	r3, #9
 8001694:	d804      	bhi.n	80016a0 <mifare_ul_read+0x30>
	for(uint8_t i = 0;i<16;i++){
 8001696:	3001      	adds	r0, #1
 8001698:	2810      	cmp	r0, #16
 800169a:	d1f8      	bne.n	800168e <mifare_ul_read+0x1e>
		}
	}
//	static uint8_t tmp[16];
//	ascii_to_accesscode(Card.nesica_serial ,tmp + 6);
//	CDC_Transmit(0, tmp, 16);
	Card.mifare_ul_read_status = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	7263      	strb	r3, [r4, #9]
}
 80016a0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80016a2:	46c0      	nop			@ (mov r8, r8)
 80016a4:	20000a79 	.word	0x20000a79
 80016a8:	20000a83 	.word	0x20000a83

080016ac <mifareAuthenticate>:
               hex2Str(wrData, DEMO_NFCV_BLOCK_LEN));
    return err;
}

ReturnCode mifareAuthenticate(uint8_t keyType, uint8_t sector, uint8_t* uid, uint32_t uidLen, uint8_t* key)
{
 80016ac:	b513      	push	{r0, r1, r4, lr}
    const uint32_t nonce = 0x94857192;
    ReturnCode err = mccAuthenticate(keyType, sector, uid, uidLen, key, nonce);
 80016ae:	4c04      	ldr	r4, [pc, #16]	@ (80016c0 <mifareAuthenticate+0x14>)
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	9401      	str	r4, [sp, #4]
 80016b4:	9c04      	ldr	r4, [sp, #16]
 80016b6:	9400      	str	r4, [sp, #0]
 80016b8:	f000 fd70 	bl	800219c <mccAuthenticate>
    if(err != ERR_NONE) {
        //platformLog("Authentication failed:%04X\r\n",err);
//        mccDeinitialise(true);
    }
    return err;
 80016bc:	b280      	uxth	r0, r0
}
 80016be:	bd16      	pop	{r1, r2, r4, pc}
 80016c0:	94857192 	.word	0x94857192

080016c4 <mifareReadBlock>:

ReturnCode mifareReadBlock(uint8_t sector, uint8_t block, uint8_t* buffer, uint16_t bufSize)
{
 80016c4:	b530      	push	{r4, r5, lr}
 80016c6:	b087      	sub	sp, #28
    uint8_t request[2] = {MCC_READ_BLOCK, (sector * 4) + block};
 80016c8:	466d      	mov	r5, sp
 80016ca:	0080      	lsls	r0, r0, #2
 80016cc:	1809      	adds	r1, r1, r0
 80016ce:	7569      	strb	r1, [r5, #21]
 80016d0:	2430      	movs	r4, #48	@ 0x30
    uint16_t numBytesReceived;

    ReturnCode err = mccSendRequest(request, sizeof(request), buffer, bufSize,
 80016d2:	2100      	movs	r1, #0
    uint8_t request[2] = {MCC_READ_BLOCK, (sector * 4) + block};
 80016d4:	752c      	strb	r4, [r5, #20]
    ReturnCode err = mccSendRequest(request, sizeof(request), buffer, bufSize,
 80016d6:	9102      	str	r1, [sp, #8]
 80016d8:	3132      	adds	r1, #50	@ 0x32
 80016da:	9101      	str	r1, [sp, #4]
 80016dc:	391c      	subs	r1, #28
 80016de:	4469      	add	r1, sp
 80016e0:	9100      	str	r1, [sp, #0]
 80016e2:	a805      	add	r0, sp, #20
 80016e4:	2102      	movs	r1, #2
 80016e6:	f000 fd6d 	bl	80021c4 <mccSendRequest>
    if(err == ERR_NONE) {
//        platformLog(" Read block %d: %s\r\n", block,
//                   hex2Str(buffer, bufSize - MIFARE_CRC_LEN));
    }
//    mccDeinitialise(true);
    return err;
 80016ea:	b280      	uxth	r0, r0
}
 80016ec:	b007      	add	sp, #28
 80016ee:	bd30      	pop	{r4, r5, pc}

080016f0 <mifare_pre_read>:
void mifare_pre_read(){
 80016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f2:	b08b      	sub	sp, #44	@ 0x2c
	mccInitialize();
 80016f4:	f000 fc88 	bl	8002008 <mccInitialize>
	Card.mifare_auth_status = 0;
 80016f8:	2100      	movs	r1, #0
	if(!auth_flag){
 80016fa:	4e49      	ldr	r6, [pc, #292]	@ (8001820 <mifare_pre_read+0x130>)
	Card.mifare_auth_status = 0;
 80016fc:	4c49      	ldr	r4, [pc, #292]	@ (8001824 <mifare_pre_read+0x134>)
 80016fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001828 <mifare_pre_read+0x138>)
	if(!auth_flag){
 8001700:	7835      	ldrb	r5, [r6, #0]
	Card.mifare_auth_status = 0;
 8001702:	70a1      	strb	r1, [r4, #2]
	if(!auth_flag){
 8001704:	9303      	str	r3, [sp, #12]
 8001706:	428d      	cmp	r5, r1
 8001708:	d14f      	bne.n	80017aa <mifare_pre_read+0xba>
		if(mifareAuthenticate(MCC_AUTH_KEY_A, 0, Card.iso14443_uid4, 4, AimeKey) != RFAL_ERR_NONE){
 800170a:	4f48      	ldr	r7, [pc, #288]	@ (800182c <mifare_pre_read+0x13c>)
 800170c:	2304      	movs	r3, #4
 800170e:	0029      	movs	r1, r5
 8001710:	2060      	movs	r0, #96	@ 0x60
 8001712:	9a03      	ldr	r2, [sp, #12]
 8001714:	9700      	str	r7, [sp, #0]
 8001716:	f7ff ffc9 	bl	80016ac <mifareAuthenticate>
 800171a:	2800      	cmp	r0, #0
 800171c:	d109      	bne.n	8001732 <mifare_pre_read+0x42>
			memcpy(Card.mifare_right_key_a,AimeKey,6);
 800171e:	0020      	movs	r0, r4
 8001720:	2206      	movs	r2, #6
 8001722:	0039      	movs	r1, r7
 8001724:	3033      	adds	r0, #51	@ 0x33
 8001726:	f011 fdf9 	bl	801331c <memcpy>
			Card.mifare_auth_status |= Auth_KeyA_Right;
 800172a:	2301      	movs	r3, #1
 800172c:	78a2      	ldrb	r2, [r4, #2]
 800172e:	4313      	orrs	r3, r2
 8001730:	70a3      	strb	r3, [r4, #2]
		if(mifareAuthenticate(MCC_AUTH_KEY_B, 0, Card.iso14443_uid4, 4, AimeKey) != RFAL_ERR_NONE){
 8001732:	2304      	movs	r3, #4
 8001734:	2100      	movs	r1, #0
 8001736:	2061      	movs	r0, #97	@ 0x61
 8001738:	9a03      	ldr	r2, [sp, #12]
 800173a:	9700      	str	r7, [sp, #0]
 800173c:	f7ff ffb6 	bl	80016ac <mifareAuthenticate>
 8001740:	2800      	cmp	r0, #0
 8001742:	d109      	bne.n	8001758 <mifare_pre_read+0x68>
			memcpy(Card.mifare_right_key_b,AimeKey,6);
 8001744:	0020      	movs	r0, r4
 8001746:	2206      	movs	r2, #6
 8001748:	0039      	movs	r1, r7
 800174a:	303d      	adds	r0, #61	@ 0x3d
			memcpy(Card.mifare_right_key_b,BanaKey_B,6);
 800174c:	f011 fde6 	bl	801331c <memcpy>
			Card.mifare_auth_status |= Auth_KeyB_Right;
 8001750:	2302      	movs	r3, #2
 8001752:	78a2      	ldrb	r2, [r4, #2]
 8001754:	4313      	orrs	r3, r2
 8001756:	70a3      	strb	r3, [r4, #2]
		auth_flag ++;
 8001758:	7833      	ldrb	r3, [r6, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	b2db      	uxtb	r3, r3
		auth_flag ++;
 800175e:	7033      	strb	r3, [r6, #0]
	if(Card.mifare_auth_status == Auth_ALL_Right){
 8001760:	78a3      	ldrb	r3, [r4, #2]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d117      	bne.n	8001796 <mifare_pre_read+0xa6>
			mifareReadBlock(0, i, tmp, 18);
 8001766:	330f      	adds	r3, #15
 8001768:	2101      	movs	r1, #1
 800176a:	aa05      	add	r2, sp, #20
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff ffa9 	bl	80016c4 <mifareReadBlock>
			memcpy(Card.mifare_data[i], tmp, 16);
 8001772:	0020      	movs	r0, r4
 8001774:	2210      	movs	r2, #16
 8001776:	a905      	add	r1, sp, #20
 8001778:	3013      	adds	r0, #19
 800177a:	f011 fdcf 	bl	801331c <memcpy>
			mifareReadBlock(0, i, tmp, 18);
 800177e:	2102      	movs	r1, #2
 8001780:	aa05      	add	r2, sp, #20
 8001782:	2312      	movs	r3, #18
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff ff9d 	bl	80016c4 <mifareReadBlock>
			memcpy(Card.mifare_data[i], tmp, 16);
 800178a:	0020      	movs	r0, r4
 800178c:	2210      	movs	r2, #16
 800178e:	3023      	adds	r0, #35	@ 0x23
 8001790:	a905      	add	r1, sp, #20
 8001792:	f011 fdc3 	bl	801331c <memcpy>
	if(Card.mifare_auth_status == 0){
 8001796:	78a3      	ldrb	r3, [r4, #2]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <mifare_pre_read+0xb0>
		Card.mifare_auth_status = Auth_ALL_Failed;
 800179c:	3380      	adds	r3, #128	@ 0x80
 800179e:	70a3      	strb	r3, [r4, #2]
	mccDeinitialise(true);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f000 fc09 	bl	8001fb8 <mccDeinitialise>
}
 80017a6:	b00b      	add	sp, #44	@ 0x2c
 80017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(auth_flag == 1){
 80017aa:	2d01      	cmp	r5, #1
 80017ac:	d120      	bne.n	80017f0 <mifare_pre_read+0x100>
		if(mifareAuthenticate(MCC_AUTH_KEY_A, 0, Card.iso14443_uid4, 4, BanaKey_A) != RFAL_ERR_NONE){
 80017ae:	4f20      	ldr	r7, [pc, #128]	@ (8001830 <mifare_pre_read+0x140>)
 80017b0:	2304      	movs	r3, #4
 80017b2:	2060      	movs	r0, #96	@ 0x60
 80017b4:	9a03      	ldr	r2, [sp, #12]
 80017b6:	9700      	str	r7, [sp, #0]
 80017b8:	f7ff ff78 	bl	80016ac <mifareAuthenticate>
 80017bc:	2800      	cmp	r0, #0
 80017be:	d108      	bne.n	80017d2 <mifare_pre_read+0xe2>
			memcpy(Card.mifare_right_key_a,BanaKey_A,6);
 80017c0:	0020      	movs	r0, r4
 80017c2:	2206      	movs	r2, #6
 80017c4:	0039      	movs	r1, r7
 80017c6:	3033      	adds	r0, #51	@ 0x33
 80017c8:	f011 fda8 	bl	801331c <memcpy>
			Card.mifare_auth_status |= Auth_KeyA_Right;
 80017cc:	78a3      	ldrb	r3, [r4, #2]
 80017ce:	431d      	orrs	r5, r3
 80017d0:	70a5      	strb	r5, [r4, #2]
		if(mifareAuthenticate(MCC_AUTH_KEY_B, 0, Card.iso14443_uid4, 4, BanaKey_B) != RFAL_ERR_NONE){
 80017d2:	4d18      	ldr	r5, [pc, #96]	@ (8001834 <mifare_pre_read+0x144>)
 80017d4:	2304      	movs	r3, #4
 80017d6:	2100      	movs	r1, #0
 80017d8:	2061      	movs	r0, #97	@ 0x61
 80017da:	9a03      	ldr	r2, [sp, #12]
 80017dc:	9500      	str	r5, [sp, #0]
 80017de:	f7ff ff65 	bl	80016ac <mifareAuthenticate>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d1b8      	bne.n	8001758 <mifare_pre_read+0x68>
			memcpy(Card.mifare_right_key_b,BanaKey_B,6);
 80017e6:	0020      	movs	r0, r4
 80017e8:	2206      	movs	r2, #6
 80017ea:	0029      	movs	r1, r5
 80017ec:	303d      	adds	r0, #61	@ 0x3d
 80017ee:	e7ad      	b.n	800174c <mifare_pre_read+0x5c>
		if(mifareAuthenticate(MCC_AUTH_KEY_A, 0, Card.iso14443_uid4, 4, JubeatKey) != RFAL_ERR_NONE){
 80017f0:	4d11      	ldr	r5, [pc, #68]	@ (8001838 <mifare_pre_read+0x148>)
 80017f2:	2304      	movs	r3, #4
 80017f4:	2060      	movs	r0, #96	@ 0x60
 80017f6:	9a03      	ldr	r2, [sp, #12]
 80017f8:	9500      	str	r5, [sp, #0]
 80017fa:	f7ff ff57 	bl	80016ac <mifareAuthenticate>
 80017fe:	2800      	cmp	r0, #0
 8001800:	d10c      	bne.n	800181c <mifare_pre_read+0x12c>
			memcpy(Card.mifare_right_key_a,JubeatKey,6);
 8001802:	0020      	movs	r0, r4
 8001804:	2206      	movs	r2, #6
 8001806:	0029      	movs	r1, r5
 8001808:	3033      	adds	r0, #51	@ 0x33
 800180a:	f011 fd87 	bl	801331c <memcpy>
			memset(Card.mifare_right_key_b,0xff,6);
 800180e:	2206      	movs	r2, #6
 8001810:	21ff      	movs	r1, #255	@ 0xff
 8001812:	480a      	ldr	r0, [pc, #40]	@ (800183c <mifare_pre_read+0x14c>)
 8001814:	f011 fd4e 	bl	80132b4 <memset>
			Card.mifare_auth_status = Auth_ALL_Right;
 8001818:	2303      	movs	r3, #3
 800181a:	70a3      	strb	r3, [r4, #2]
void mifare_pre_read(){
 800181c:	2300      	movs	r3, #0
 800181e:	e79e      	b.n	800175e <mifare_pre_read+0x6e>
 8001820:	20000a78 	.word	0x20000a78
 8001824:	20000a79 	.word	0x20000a79
 8001828:	20000a7c 	.word	0x20000a7c
 800182c:	20000012 	.word	0x20000012
 8001830:	2000000c 	.word	0x2000000c
 8001834:	20000006 	.word	0x20000006
 8001838:	20000000 	.word	0x20000000
 800183c:	20000ab6 	.word	0x20000ab6

08001840 <Card_Poll>:
{
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	b095      	sub	sp, #84	@ 0x54
    uint8_t              	devCnt = 0;
 8001844:	466b      	mov	r3, sp
 8001846:	2600      	movs	r6, #0
 8001848:	1ddc      	adds	r4, r3, #7
    err = rfalNfcaPollerFullCollisionResolution(RFAL_COMPLIANCE_MODE_NFC,1,&nfcaDev,&devCnt);
 800184a:	ad0e      	add	r5, sp, #56	@ 0x38
    uint8_t              	devCnt = 0;
 800184c:	7026      	strb	r6, [r4, #0]
    rfalNfcaPollerInitialize();                                                       /* Initialize RFAL for NFC-A */
 800184e:	f00d fea5 	bl	800f59c <rfalNfcaPollerInitialize>
    rfalFieldOnAndStartGT();                                                          /* Turns the Field On and starts GT timer */
 8001852:	f002 fe5f 	bl	8004514 <rfalFieldOnAndStartGT>
    err = rfalNfcaPollerFullCollisionResolution(RFAL_COMPLIANCE_MODE_NFC,1,&nfcaDev,&devCnt);
 8001856:	0023      	movs	r3, r4
 8001858:	002a      	movs	r2, r5
 800185a:	2101      	movs	r1, #1
 800185c:	0030      	movs	r0, r6
 800185e:	f00e fa3f 	bl	800fce0 <rfalNfcaPollerFullCollisionResolution>
    if( (err == ERR_NONE) && (devCnt > 0) )
 8001862:	42b0      	cmp	r0, r6
 8001864:	d000      	beq.n	8001868 <Card_Poll+0x28>
 8001866:	e0aa      	b.n	80019be <Card_Poll+0x17e>
 8001868:	7823      	ldrb	r3, [r4, #0]
 800186a:	42b3      	cmp	r3, r6
 800186c:	d100      	bne.n	8001870 <Card_Poll+0x30>
 800186e:	e0a6      	b.n	80019be <Card_Poll+0x17e>
    	platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8001870:	2201      	movs	r2, #1
 8001872:	2104      	movs	r1, #4
 8001874:	48b8      	ldr	r0, [pc, #736]	@ (8001b58 <Card_Poll+0x318>)
 8001876:	f005 fe3b 	bl	80074f0 <HAL_GPIO_WritePin>
    	platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str(nfcaDev.nfcId1,nfcaDev.nfcId1Len));
 800187a:	233d      	movs	r3, #61	@ 0x3d
 800187c:	446b      	add	r3, sp
 800187e:	0018      	movs	r0, r3
 8001880:	7929      	ldrb	r1, [r5, #4]
 8001882:	f011 fc4b 	bl	801311c <hex2Str>
 8001886:	4bb5      	ldr	r3, [pc, #724]	@ (8001b5c <Card_Poll+0x31c>)
 8001888:	0001      	movs	r1, r0
 800188a:	0018      	movs	r0, r3
 800188c:	f011 fc2c 	bl	80130e8 <logUsart>
    	if(nfcaDev.nfcId1Len == 4){
 8001890:	792e      	ldrb	r6, [r5, #4]
 8001892:	4cb3      	ldr	r4, [pc, #716]	@ (8001b60 <Card_Poll+0x320>)
 8001894:	2e04      	cmp	r6, #4
 8001896:	d112      	bne.n	80018be <Card_Poll+0x7e>
    		if(memcmp(Card.iso14443_uid4,nfcaDev.nfcId1,nfcaDev.nfcId1Len) == 0){
 8001898:	233d      	movs	r3, #61	@ 0x3d
 800189a:	4fb2      	ldr	r7, [pc, #712]	@ (8001b64 <Card_Poll+0x324>)
 800189c:	446b      	add	r3, sp
 800189e:	0032      	movs	r2, r6
 80018a0:	0019      	movs	r1, r3
 80018a2:	0038      	movs	r0, r7
 80018a4:	f011 fce6 	bl	8013274 <memcmp>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d14f      	bne.n	800194c <Card_Poll+0x10c>
    			if(Card.mifare_auth_status == Auth_ALL_Right){
 80018ac:	78a3      	ldrb	r3, [r4, #2]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d114      	bne.n	80018dc <Card_Poll+0x9c>
    				Card.operation = Operation_detected;
 80018b2:	2301      	movs	r3, #1
 80018b4:	7063      	strb	r3, [r4, #1]
    rfalFieldOff();
 80018b6:	f002 fe85 	bl	80045c4 <rfalFieldOff>
}
 80018ba:	b015      	add	sp, #84	@ 0x54
 80018bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	}else if(nfcaDev.nfcId1Len == 7){
 80018be:	2e07      	cmp	r6, #7
 80018c0:	d10c      	bne.n	80018dc <Card_Poll+0x9c>
    		if(memcmp(Card.iso14443_uid7,nfcaDev.nfcId1,7) == 0){
 80018c2:	233d      	movs	r3, #61	@ 0x3d
 80018c4:	4fa8      	ldr	r7, [pc, #672]	@ (8001b68 <Card_Poll+0x328>)
 80018c6:	446b      	add	r3, sp
 80018c8:	0032      	movs	r2, r6
 80018ca:	0019      	movs	r1, r3
 80018cc:	0038      	movs	r0, r7
 80018ce:	f011 fcd1 	bl	8013274 <memcmp>
 80018d2:	2800      	cmp	r0, #0
 80018d4:	d13a      	bne.n	800194c <Card_Poll+0x10c>
				if(Card.mifare_ul_read_status == 1){
 80018d6:	7a63      	ldrb	r3, [r4, #9]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d0ea      	beq.n	80018b2 <Card_Poll+0x72>
    	Card.operation = Operation_detected;
 80018dc:	2301      	movs	r3, #1
 80018de:	7063      	strb	r3, [r4, #1]
        if( nfcaDev.isSleep )
 80018e0:	7d6b      	ldrb	r3, [r5, #21]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00e      	beq.n	8001904 <Card_Poll+0xc4>
            err = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &nfcaDev.sensRes ); /* Wake up all cards  */
 80018e6:	2139      	movs	r1, #57	@ 0x39
 80018e8:	2052      	movs	r0, #82	@ 0x52
 80018ea:	4469      	add	r1, sp
 80018ec:	f00d fe72 	bl	800f5d4 <rfalNfcaPollerCheckPresence>
            if( err == ERR_NONE )
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d107      	bne.n	8001904 <Card_Poll+0xc4>
            	err = rfalNfcaPollerSelect( nfcaDev.nfcId1, nfcaDev.nfcId1Len, &nfcaDev.selRes ); /* Select specific device  */
 80018f4:	233d      	movs	r3, #61	@ 0x3d
 80018f6:	223b      	movs	r2, #59	@ 0x3b
 80018f8:	446b      	add	r3, sp
 80018fa:	0018      	movs	r0, r3
 80018fc:	7929      	ldrb	r1, [r5, #4]
 80018fe:	446a      	add	r2, sp
 8001900:	f00e f91e 	bl	800fb40 <rfalNfcaPollerSelect>
		if (nfcaDev.type == RFAL_NFCA_T2T)
 8001904:	7829      	ldrb	r1, [r5, #0]
 8001906:	2900      	cmp	r1, #0
 8001908:	d14c      	bne.n	80019a4 <Card_Poll+0x164>
	return ((atqa.platformInfo << 8) | atqa.anticollisionInfo);
 800190a:	2339      	movs	r3, #57	@ 0x39
 800190c:	446b      	add	r3, sp
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	785b      	ldrb	r3, [r3, #1]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	4313      	orrs	r3, r2
 8001916:	b21a      	sxth	r2, r3
			switch(Get_Card_ATQA(nfcaDev.sensRes)){
 8001918:	2b04      	cmp	r3, #4
 800191a:	d003      	beq.n	8001924 <Card_Poll+0xe4>
 800191c:	2a44      	cmp	r2, #68	@ 0x44
 800191e:	d01d      	beq.n	800195c <Card_Poll+0x11c>
 8001920:	2a02      	cmp	r2, #2
 8001922:	d1c8      	bne.n	80018b6 <Card_Poll+0x76>
		        	if(Card.type != Card_Type_Mifare_Classic){
 8001924:	7823      	ldrb	r3, [r4, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d003      	beq.n	8001932 <Card_Poll+0xf2>
		        		memset(Card.data,0,128);
 800192a:	2280      	movs	r2, #128	@ 0x80
 800192c:	488e      	ldr	r0, [pc, #568]	@ (8001b68 <Card_Poll+0x328>)
 800192e:	f011 fcc1 	bl	80132b4 <memset>
		        	Card.type = Card_Type_Mifare_Classic;
 8001932:	2301      	movs	r3, #1
 8001934:	7023      	strb	r3, [r4, #0]
		        	mifare_pre_read();
 8001936:	f7ff fedb 	bl	80016f0 <mifare_pre_read>
		        	switch(Reader.Current_Mode){
 800193a:	4b8c      	ldr	r3, [pc, #560]	@ (8001b6c <Card_Poll+0x32c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d02c      	beq.n	800199c <Card_Poll+0x15c>
 8001942:	2b02      	cmp	r3, #2
 8001944:	d1b7      	bne.n	80018b6 <Card_Poll+0x76>
		        			spice_mifare_process();
 8001946:	f001 fe29 	bl	800359c <spice_mifare_process>
		        			break;
 800194a:	e7b4      	b.n	80018b6 <Card_Poll+0x76>
				memcpy(Card.iso14443_uid7,nfcaDev.nfcId1,7);
 800194c:	233d      	movs	r3, #61	@ 0x3d
 800194e:	446b      	add	r3, sp
 8001950:	0032      	movs	r2, r6
 8001952:	0019      	movs	r1, r3
 8001954:	0038      	movs	r0, r7
 8001956:	f011 fce1 	bl	801331c <memcpy>
 800195a:	e7bf      	b.n	80018dc <Card_Poll+0x9c>
					if(nfcaDev.nfcId1Len == 7){
 800195c:	792b      	ldrb	r3, [r5, #4]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d1a9      	bne.n	80018b6 <Card_Poll+0x76>
						if(Card.type != Card_Type_Mifare_UltraLight){
 8001962:	7823      	ldrb	r3, [r4, #0]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d00e      	beq.n	8001986 <Card_Poll+0x146>
							memset(Card.data,0,128);
 8001968:	2280      	movs	r2, #128	@ 0x80
 800196a:	487f      	ldr	r0, [pc, #508]	@ (8001b68 <Card_Poll+0x328>)
 800196c:	f011 fca2 	bl	80132b4 <memset>
							Card.type = Card_Type_Mifare_UltraLight;
 8001970:	2302      	movs	r3, #2
 8001972:	7023      	strb	r3, [r4, #0]
			        	switch(Reader.Current_Mode){
 8001974:	4b7d      	ldr	r3, [pc, #500]	@ (8001b6c <Card_Poll+0x32c>)
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	2a00      	cmp	r2, #0
 800197a:	d00a      	beq.n	8001992 <Card_Poll+0x152>
 800197c:	2a02      	cmp	r2, #2
 800197e:	d19a      	bne.n	80018b6 <Card_Poll+0x76>
			        			spice_mifare_ul_process();
 8001980:	f001 feb8 	bl	80036f4 <spice_mifare_ul_process>
								break;
 8001984:	e797      	b.n	80018b6 <Card_Poll+0x76>
						}else if(Card.mifare_ul_read_status != 1){
 8001986:	7a63      	ldrb	r3, [r4, #9]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d0f3      	beq.n	8001974 <Card_Poll+0x134>
							mifare_ul_read();
 800198c:	f7ff fe70 	bl	8001670 <mifare_ul_read>
 8001990:	e7f0      	b.n	8001974 <Card_Poll+0x134>
			        			LED_show(128,128,0);
 8001992:	2180      	movs	r1, #128	@ 0x80
 8001994:	0008      	movs	r0, r1
        			LED_show(0,0,255);
 8001996:	f000 f953 	bl	8001c40 <LED_show>
        			break;
 800199a:	e78c      	b.n	80018b6 <Card_Poll+0x76>
		        			LED_show(0,255,0);
 800199c:	2200      	movs	r2, #0
 800199e:	21ff      	movs	r1, #255	@ 0xff
 80019a0:	0010      	movs	r0, r2
 80019a2:	e7f8      	b.n	8001996 <Card_Poll+0x156>
		else if( nfcaDev.type == RFAL_NFCA_T1T )
 80019a4:	2901      	cmp	r1, #1
 80019a6:	d102      	bne.n	80019ae <Card_Poll+0x16e>
	    	Card.type = Card_Type_ISO14443A_Unknow;
 80019a8:	2305      	movs	r3, #5
 80019aa:	7023      	strb	r3, [r4, #0]
 80019ac:	e783      	b.n	80018b6 <Card_Poll+0x76>
		else if( (nfcaDev.type == RFAL_NFCA_T4T))
 80019ae:	2920      	cmp	r1, #32
 80019b0:	d0fa      	beq.n	80019a8 <Card_Poll+0x168>
		else if( (nfcaDev.type == RFAL_NFCA_NFCDEP) || (nfcaDev.type == RFAL_NFCA_T4T_NFCDEP))
 80019b2:	2320      	movs	r3, #32
 80019b4:	4399      	bics	r1, r3
 80019b6:	2940      	cmp	r1, #64	@ 0x40
 80019b8:	d000      	beq.n	80019bc <Card_Poll+0x17c>
 80019ba:	e77c      	b.n	80018b6 <Card_Poll+0x76>
 80019bc:	e7f4      	b.n	80019a8 <Card_Poll+0x168>
	rfalNfcfPollerInitialize( RFAL_BR_212 ); /* Initialize for NFC-F */
 80019be:	2001      	movs	r0, #1
 80019c0:	f00e fc68 	bl	8010294 <rfalNfcfPollerInitialize>
	rfalFieldOnAndStartGT();                 /* Turns the Field On if not already and start GT timer */
 80019c4:	f002 fda6 	bl	8004514 <rfalFieldOnAndStartGT>
	err = rfalNfcfPollerCheckPresence();
 80019c8:	f00e fc9a 	bl	8010300 <rfalNfcfPollerCheckPresence>
	if( err == ERR_NONE )
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d13c      	bne.n	8001a4a <Card_Poll+0x20a>
		err = rfalNfcfPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, 1, &nfcfDev, &devCnt );
 80019d0:	0023      	movs	r3, r4
 80019d2:	2101      	movs	r1, #1
 80019d4:	aa09      	add	r2, sp, #36	@ 0x24
 80019d6:	f00e fd27 	bl	8010428 <rfalNfcfPollerCollisionResolution>
 80019da:	1e05      	subs	r5, r0, #0
		if( (err == ERR_NONE) && (devCnt > 0) )
 80019dc:	d135      	bne.n	8001a4a <Card_Poll+0x20a>
 80019de:	7823      	ldrb	r3, [r4, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d032      	beq.n	8001a4a <Card_Poll+0x20a>
			platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 80019e4:	2201      	movs	r2, #1
 80019e6:	485c      	ldr	r0, [pc, #368]	@ (8001b58 <Card_Poll+0x318>)
 80019e8:	0011      	movs	r1, r2
 80019ea:	f005 fd81 	bl	80074f0 <HAL_GPIO_WritePin>
			if(Card.type != Card_Type_Felica){
 80019ee:	4c5c      	ldr	r4, [pc, #368]	@ (8001b60 <Card_Poll+0x320>)
 80019f0:	7823      	ldrb	r3, [r4, #0]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d004      	beq.n	8001a00 <Card_Poll+0x1c0>
				memset(Card.data,0,128);
 80019f6:	226e      	movs	r2, #110	@ 0x6e
 80019f8:	0029      	movs	r1, r5
 80019fa:	485d      	ldr	r0, [pc, #372]	@ (8001b70 <Card_Poll+0x330>)
 80019fc:	f011 fc5a 	bl	80132b4 <memset>
			Card.type = Card_Type_Felica;
 8001a00:	2303      	movs	r3, #3
			memcpy(Card.felica_IDm,nfcfDev.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN);
 8001a02:	2126      	movs	r1, #38	@ 0x26
 8001a04:	2208      	movs	r2, #8
			Card.type = Card_Type_Felica;
 8001a06:	7023      	strb	r3, [r4, #0]
			memcpy(Card.felica_IDm,nfcfDev.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN);
 8001a08:	4469      	add	r1, sp
			Card.operation = Operation_detected;
 8001a0a:	3b02      	subs	r3, #2
			memcpy(Card.felica_IDm,nfcfDev.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN);
 8001a0c:	1ca0      	adds	r0, r4, #2
			Card.operation = Operation_detected;
 8001a0e:	7063      	strb	r3, [r4, #1]
			memcpy(Card.felica_IDm,nfcfDev.sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN);
 8001a10:	f011 fc84 	bl	801331c <memcpy>
			memcpy(Card.felica_PMm,&nfcfDev.sensfRes.PAD0[0], 8);
 8001a14:	0020      	movs	r0, r4
 8001a16:	212e      	movs	r1, #46	@ 0x2e
 8001a18:	2208      	movs	r2, #8
 8001a1a:	4469      	add	r1, sp
 8001a1c:	300a      	adds	r0, #10
 8001a1e:	f011 fc7d 	bl	801331c <memcpy>
			memcpy(Card.felica_systemcode,nfcfDev.sensfRes.RD,2);
 8001a22:	0020      	movs	r0, r4
 8001a24:	2136      	movs	r1, #54	@ 0x36
 8001a26:	2202      	movs	r2, #2
 8001a28:	3012      	adds	r0, #18
 8001a2a:	4469      	add	r1, sp
 8001a2c:	f011 fc76 	bl	801331c <memcpy>
        	switch(Reader.Current_Mode){
 8001a30:	4b4e      	ldr	r3, [pc, #312]	@ (8001b6c <Card_Poll+0x32c>)
 8001a32:	7818      	ldrb	r0, [r3, #0]
 8001a34:	2800      	cmp	r0, #0
 8001a36:	d005      	beq.n	8001a44 <Card_Poll+0x204>
 8001a38:	2802      	cmp	r0, #2
 8001a3a:	d000      	beq.n	8001a3e <Card_Poll+0x1fe>
 8001a3c:	e73b      	b.n	80018b6 <Card_Poll+0x76>
        			spice_felice_process();
 8001a3e:	f001 fe05 	bl	800364c <spice_felice_process>
        			break;
 8001a42:	e738      	b.n	80018b6 <Card_Poll+0x76>
        			LED_show(0,0,255);
 8001a44:	22ff      	movs	r2, #255	@ 0xff
 8001a46:	0001      	movs	r1, r0
 8001a48:	e7a5      	b.n	8001996 <Card_Poll+0x156>
	rfalNfcvPollerInitialize();           /* Initialize for NFC-F */
 8001a4a:	f00e fd83 	bl	8010554 <rfalNfcvPollerInitialize>
	rfalFieldOnAndStartGT();              /* Turns the Field On if not already and start GT timer */
 8001a4e:	f002 fd61 	bl	8004514 <rfalFieldOnAndStartGT>
	err = rfalNfcvPollerCollisionResolution(1,1, &nfcvDev, &devCnt);
 8001a52:	2101      	movs	r1, #1
 8001a54:	0023      	movs	r3, r4
 8001a56:	0008      	movs	r0, r1
 8001a58:	aa05      	add	r2, sp, #20
 8001a5a:	f00e fded 	bl	8010638 <rfalNfcvPollerCollisionResolution>
	if( (err == ERR_NONE) && (devCnt > 0) )
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d146      	bne.n	8001af0 <Card_Poll+0x2b0>
 8001a62:	7823      	ldrb	r3, [r4, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d043      	beq.n	8001af0 <Card_Poll+0x2b0>
 8001a68:	ab05      	add	r3, sp, #20
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	2505      	movs	r5, #5
		REVERSE_BYTES(nfcvDev.InvRes.UID, RFAL_NFCV_UID_LEN);
 8001a6e:	3d01      	subs	r5, #1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	2d00      	cmp	r5, #0
 8001a74:	d123      	bne.n	8001abe <Card_Poll+0x27e>
		platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8001a76:	2180      	movs	r1, #128	@ 0x80
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4837      	ldr	r0, [pc, #220]	@ (8001b58 <Card_Poll+0x318>)
 8001a7c:	00c9      	lsls	r1, r1, #3
 8001a7e:	f005 fd37 	bl	80074f0 <HAL_GPIO_WritePin>
		if(Card.type != Card_Type_ISO15693){
 8001a82:	4c37      	ldr	r4, [pc, #220]	@ (8001b60 <Card_Poll+0x320>)
 8001a84:	7823      	ldrb	r3, [r4, #0]
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d004      	beq.n	8001a94 <Card_Poll+0x254>
			memset(Card.data,0,128);
 8001a8a:	2278      	movs	r2, #120	@ 0x78
 8001a8c:	0029      	movs	r1, r5
 8001a8e:	4839      	ldr	r0, [pc, #228]	@ (8001b74 <Card_Poll+0x334>)
 8001a90:	f011 fc10 	bl	80132b4 <memset>
		Card.type = Card_Type_ISO15693;
 8001a94:	2304      	movs	r3, #4
		Card.operation = Operation_detected;
 8001a96:	2701      	movs	r7, #1
		memcpy(Card.iso15693_uid,nfcvDev.InvRes.UID, RFAL_NFCV_UID_LEN);
 8001a98:	2116      	movs	r1, #22
		Card.type = Card_Type_ISO15693;
 8001a9a:	7023      	strb	r3, [r4, #0]
		Card.operation = Operation_detected;
 8001a9c:	7067      	strb	r7, [r4, #1]
		memcpy(Card.iso15693_uid,nfcvDev.InvRes.UID, RFAL_NFCV_UID_LEN);
 8001a9e:	3402      	adds	r4, #2
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	0020      	movs	r0, r4
 8001aa4:	4469      	add	r1, sp
 8001aa6:	f011 fc39 	bl	801331c <memcpy>
    	switch(Reader.Current_Mode){
 8001aaa:	4b30      	ldr	r3, [pc, #192]	@ (8001b6c <Card_Poll+0x32c>)
 8001aac:	781d      	ldrb	r5, [r3, #0]
 8001aae:	2d00      	cmp	r5, #0
 8001ab0:	d00b      	beq.n	8001aca <Card_Poll+0x28a>
 8001ab2:	2d02      	cmp	r5, #2
 8001ab4:	d000      	beq.n	8001ab8 <Card_Poll+0x278>
 8001ab6:	e6fe      	b.n	80018b6 <Card_Poll+0x76>
    			spice_iso15693_process();
 8001ab8:	f001 fdf2 	bl	80036a0 <spice_iso15693_process>
    			break;
 8001abc:	e6fb      	b.n	80018b6 <Card_Poll+0x76>
		REVERSE_BYTES(nfcvDev.InvRes.UID, RFAL_NFCV_UID_LEN);
 8001abe:	7891      	ldrb	r1, [r2, #2]
 8001ac0:	7a98      	ldrb	r0, [r3, #10]
 8001ac2:	3201      	adds	r2, #1
 8001ac4:	7050      	strb	r0, [r2, #1]
 8001ac6:	7299      	strb	r1, [r3, #10]
 8001ac8:	e7d1      	b.n	8001a6e <Card_Poll+0x22e>
    			memcpy(data+1,Card.iso15693_uid,8);
 8001aca:	2009      	movs	r0, #9
 8001acc:	0021      	movs	r1, r4
    			data[0] = 1;
 8001ace:	ae02      	add	r6, sp, #8
    			memcpy(data+1,Card.iso15693_uid,8);
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	4468      	add	r0, sp
    			data[0] = 1;
 8001ad4:	7037      	strb	r7, [r6, #0]
    			memcpy(data+1,Card.iso15693_uid,8);
 8001ad6:	f011 fc21 	bl	801331c <memcpy>
    			LED_show(0,128,128);
 8001ada:	2280      	movs	r2, #128	@ 0x80
 8001adc:	0028      	movs	r0, r5
 8001ade:	0011      	movs	r1, r2
 8001ae0:	f000 f8ae 	bl	8001c40 <LED_show>
    			USBD_CUSTOM_HID_SendReport(&hUsbDevice,data, 9);
 8001ae4:	2209      	movs	r2, #9
 8001ae6:	0031      	movs	r1, r6
 8001ae8:	4823      	ldr	r0, [pc, #140]	@ (8001b78 <Card_Poll+0x338>)
 8001aea:	f00f ff1b 	bl	8011924 <USBD_CUSTOM_HID_SendReport>
    			break;
 8001aee:	e6e2      	b.n	80018b6 <Card_Poll+0x76>
    platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2104      	movs	r1, #4
 8001af4:	4818      	ldr	r0, [pc, #96]	@ (8001b58 <Card_Poll+0x318>)
 8001af6:	f005 fcfb 	bl	80074f0 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2102      	movs	r1, #2
 8001afe:	4816      	ldr	r0, [pc, #88]	@ (8001b58 <Card_Poll+0x318>)
 8001b00:	f005 fcf6 	bl	80074f0 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2101      	movs	r1, #1
 8001b08:	4813      	ldr	r0, [pc, #76]	@ (8001b58 <Card_Poll+0x318>)
 8001b0a:	f005 fcf1 	bl	80074f0 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8001b0e:	2180      	movs	r1, #128	@ 0x80
 8001b10:	2200      	movs	r2, #0
 8001b12:	4811      	ldr	r0, [pc, #68]	@ (8001b58 <Card_Poll+0x318>)
 8001b14:	00c9      	lsls	r1, r1, #3
 8001b16:	f005 fceb 	bl	80074f0 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8001b1a:	2180      	movs	r1, #128	@ 0x80
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	480e      	ldr	r0, [pc, #56]	@ (8001b58 <Card_Poll+0x318>)
 8001b20:	0109      	lsls	r1, r1, #4
 8001b22:	f005 fce5 	bl	80074f0 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8001b26:	2180      	movs	r1, #128	@ 0x80
 8001b28:	2200      	movs	r2, #0
 8001b2a:	480b      	ldr	r0, [pc, #44]	@ (8001b58 <Card_Poll+0x318>)
 8001b2c:	0149      	lsls	r1, r1, #5
 8001b2e:	f005 fcdf 	bl	80074f0 <HAL_GPIO_WritePin>
    Card.type = Card_None;
 8001b32:	2200      	movs	r2, #0
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <Card_Poll+0x320>)
 8001b36:	701a      	strb	r2, [r3, #0]
    Card.operation = Operation_idle;
 8001b38:	705a      	strb	r2, [r3, #1]
    if(Reader.Current_Mode == MODE_IDLE){
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <Card_Poll+0x32c>)
 8001b3c:	7818      	ldrb	r0, [r3, #0]
 8001b3e:	4290      	cmp	r0, r2
 8001b40:	d103      	bne.n	8001b4a <Card_Poll+0x30a>
    	LED_show(0,0,0);
 8001b42:	0002      	movs	r2, r0
 8001b44:	0001      	movs	r1, r0
 8001b46:	f000 f87b 	bl	8001c40 <LED_show>
    memset(Card.data,0,128);
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4806      	ldr	r0, [pc, #24]	@ (8001b68 <Card_Poll+0x328>)
 8001b50:	f011 fbb0 	bl	80132b4 <memset>
 8001b54:	e6af      	b.n	80018b6 <Card_Poll+0x76>
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	08013d65 	.word	0x08013d65
 8001b60:	20000a79 	.word	0x20000a79
 8001b64:	20000a7c 	.word	0x20000a7c
 8001b68:	20000a7b 	.word	0x20000a7b
 8001b6c:	20000c4a 	.word	0x20000c4a
 8001b70:	20000a8d 	.word	0x20000a8d
 8001b74:	20000a83 	.word	0x20000a83
 8001b78:	200026f4 	.word	0x200026f4

08001b7c <LED_set>:
178, 180, 181, 183, 184, 186, 187, 189, 190, 192, 193, 195, 196, 198, 200, 201,
203, 204, 206, 208, 209, 211, 212, 214, 216, 217, 219, 221, 222, 224, 225, 227,
229, 231, 232, 234, 236, 237, 239, 241, 242, 244, 246, 248, 249, 251, 253, 255
};

void LED_set(uint8_t led_no,uint8_t r,uint8_t g,uint8_t b){
 8001b7c:	b510      	push	{r4, lr}
	if(led_no >= NUM_LED){
 8001b7e:	2809      	cmp	r0, #9
 8001b80:	d806      	bhi.n	8001b90 <LED_set+0x14>
		return;
	}
	RGB_data[led_no * 3] = r;
 8001b82:	2403      	movs	r4, #3
 8001b84:	4344      	muls	r4, r0
 8001b86:	4803      	ldr	r0, [pc, #12]	@ (8001b94 <LED_set+0x18>)
 8001b88:	5501      	strb	r1, [r0, r4]
	RGB_data[led_no * 3 + 1] = g;
 8001b8a:	1900      	adds	r0, r0, r4
 8001b8c:	7042      	strb	r2, [r0, #1]
	RGB_data[led_no * 3 + 2] = b;
 8001b8e:	7083      	strb	r3, [r0, #2]
}
 8001b90:	bd10      	pop	{r4, pc}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	200005d8 	.word	0x200005d8

08001b98 <LED_refresh>:

void LED_refresh()
{
 8001b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		{
			RGB_data_DMA_buffer[(i*3+1)*8+j+64] = (gamma8[RGB_data[i*3]] & (1<<(7-j))) ? WS2812_HIGH : WS2812_LOW;
		}
		for(uint8_t j = 0 ;j <8;j++)
		{
			RGB_data_DMA_buffer[(i*3+2)*8+j+64] = (gamma8[RGB_data[i*3+2]] & (1<<(7-j))) ? WS2812_HIGH : WS2812_LOW;
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	4923      	ldr	r1, [pc, #140]	@ (8001c2c <LED_refresh+0x94>)
 8001b9e:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <LED_refresh+0x98>)
 8001ba0:	9201      	str	r2, [sp, #4]
			RGB_data_DMA_buffer[(i*3)*8+j+64] = (gamma8[RGB_data[i*3+1]] & (1<<(7-j))) ? WS2812_HIGH : WS2812_LOW;
 8001ba2:	4824      	ldr	r0, [pc, #144]	@ (8001c34 <LED_refresh+0x9c>)
 8001ba4:	784a      	ldrb	r2, [r1, #1]
 8001ba6:	001f      	movs	r7, r3
 8001ba8:	5c82      	ldrb	r2, [r0, r2]
 8001baa:	3f40      	subs	r7, #64	@ 0x40
 8001bac:	4694      	mov	ip, r2
 8001bae:	2207      	movs	r2, #7
 8001bb0:	4665      	mov	r5, ip
 8001bb2:	2401      	movs	r4, #1
 8001bb4:	4115      	asrs	r5, r2
 8001bb6:	2614      	movs	r6, #20
 8001bb8:	4225      	tst	r5, r4
 8001bba:	d000      	beq.n	8001bbe <LED_refresh+0x26>
 8001bbc:	19b6      	adds	r6, r6, r6
 8001bbe:	0095      	lsls	r5, r2, #2
 8001bc0:	426d      	negs	r5, r5
 8001bc2:	517e      	str	r6, [r7, r5]
		for(uint8_t j = 0 ;j <8;j++)
 8001bc4:	3a01      	subs	r2, #1
 8001bc6:	d2f3      	bcs.n	8001bb0 <LED_refresh+0x18>
			RGB_data_DMA_buffer[(i*3+1)*8+j+64] = (gamma8[RGB_data[i*3]] & (1<<(7-j))) ? WS2812_HIGH : WS2812_LOW;
 8001bc8:	780a      	ldrb	r2, [r1, #0]
 8001bca:	001f      	movs	r7, r3
 8001bcc:	5c82      	ldrb	r2, [r0, r2]
 8001bce:	3f20      	subs	r7, #32
 8001bd0:	4694      	mov	ip, r2
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	4665      	mov	r5, ip
 8001bd6:	2401      	movs	r4, #1
 8001bd8:	4115      	asrs	r5, r2
 8001bda:	2614      	movs	r6, #20
 8001bdc:	4225      	tst	r5, r4
 8001bde:	d000      	beq.n	8001be2 <LED_refresh+0x4a>
 8001be0:	19b6      	adds	r6, r6, r6
 8001be2:	0095      	lsls	r5, r2, #2
 8001be4:	426d      	negs	r5, r5
 8001be6:	517e      	str	r6, [r7, r5]
		for(uint8_t j = 0 ;j <8;j++)
 8001be8:	3a01      	subs	r2, #1
 8001bea:	d2f3      	bcs.n	8001bd4 <LED_refresh+0x3c>
			RGB_data_DMA_buffer[(i*3+2)*8+j+64] = (gamma8[RGB_data[i*3+2]] & (1<<(7-j))) ? WS2812_HIGH : WS2812_LOW;
 8001bec:	788a      	ldrb	r2, [r1, #2]
 8001bee:	5c86      	ldrb	r6, [r0, r2]
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	0030      	movs	r0, r6
 8001bf4:	2401      	movs	r4, #1
 8001bf6:	4110      	asrs	r0, r2
 8001bf8:	2514      	movs	r5, #20
 8001bfa:	4220      	tst	r0, r4
 8001bfc:	d000      	beq.n	8001c00 <LED_refresh+0x68>
 8001bfe:	196d      	adds	r5, r5, r5
 8001c00:	0090      	lsls	r0, r2, #2
 8001c02:	4240      	negs	r0, r0
 8001c04:	501d      	str	r5, [r3, r0]
		for(uint8_t j = 0 ;j <8;j++)
 8001c06:	3a01      	subs	r2, #1
 8001c08:	d2f3      	bcs.n	8001bf2 <LED_refresh+0x5a>
	for(uint8_t i = 0 ;i<NUM_LED;i++)
 8001c0a:	2080      	movs	r0, #128	@ 0x80
 8001c0c:	9a01      	ldr	r2, [sp, #4]
 8001c0e:	3103      	adds	r1, #3
 8001c10:	3218      	adds	r2, #24
 8001c12:	9201      	str	r2, [sp, #4]
 8001c14:	3360      	adds	r3, #96	@ 0x60
 8001c16:	0040      	lsls	r0, r0, #1
 8001c18:	4282      	cmp	r2, r0
 8001c1a:	d1c2      	bne.n	8001ba2 <LED_refresh+0xa>
		}
	}
	//__HAL_DMA_DISABLE_IT(&hdma_tim1_ch1, DMA_IT_HT);
	HAL_TIM_PWM_Start_DMA(WS2812_TIM_HANDLE, WS2812_TIM_CH, (uint32_t *)RGB_data_DMA_buffer, NUM_LED * 2 * 24 + 64 + 64);
 8001c1c:	2398      	movs	r3, #152	@ 0x98
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <LED_refresh+0xa0>)
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <LED_refresh+0xa4>)
 8001c26:	f007 ff91 	bl	8009b4c <HAL_TIM_PWM_Start_DMA>
}
 8001c2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c2c:	200005d8 	.word	0x200005d8
 8001c30:	20000174 	.word	0x20000174
 8001c34:	0801421e 	.word	0x0801421e
 8001c38:	20000018 	.word	0x20000018
 8001c3c:	20001120 	.word	0x20001120

08001c40 <LED_show>:
//		LED_set(i,gamma8[r],gamma8[g],gamma8[b]);
//	}
//	LED_refresh();
//}

void LED_show(uint8_t r,uint8_t g,uint8_t b){
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c42:	0005      	movs	r5, r0
 8001c44:	000e      	movs	r6, r1
 8001c46:	0017      	movs	r7, r2
	for(uint8_t i = 0;i<NUM_LED;i++){
 8001c48:	2400      	movs	r4, #0
		LED_set(i,r,g,b);
 8001c4a:	0020      	movs	r0, r4
	for(uint8_t i = 0;i<NUM_LED;i++){
 8001c4c:	3401      	adds	r4, #1
		LED_set(i,r,g,b);
 8001c4e:	003b      	movs	r3, r7
 8001c50:	0032      	movs	r2, r6
 8001c52:	0029      	movs	r1, r5
	for(uint8_t i = 0;i<NUM_LED;i++){
 8001c54:	b2e4      	uxtb	r4, r4
		LED_set(i,r,g,b);
 8001c56:	f7ff ff91 	bl	8001b7c <LED_set>
	for(uint8_t i = 0;i<NUM_LED;i++){
 8001c5a:	2c0a      	cmp	r4, #10
 8001c5c:	d1f5      	bne.n	8001c4a <LED_show+0xa>
	}
	LED_refresh();
 8001c5e:	f7ff ff9b 	bl	8001b98 <LED_refresh>
}
 8001c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c64 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001c64:	b510      	push	{r4, lr}
  return HAL_GetTick();
 8001c66:	f005 f9ff 	bl	8007068 <HAL_GetTick>
}
 8001c6a:	bd10      	pop	{r4, pc}

08001c6c <MX_SPI1_Init>:
  HAL_StatusTypeDef ret = HAL_OK;

  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001c6c:	22e0      	movs	r2, #224	@ 0xe0
 8001c6e:	00d2      	lsls	r2, r2, #3
{
 8001c70:	b510      	push	{r4, lr}
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001c72:	60c2      	str	r2, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c74:	2201      	movs	r2, #1
  hspi->Instance = SPI1;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <MX_SPI1_Init+0x44>)
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c78:	6142      	str	r2, [r0, #20]
  hspi->Instance = SPI1;
 8001c7a:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001c7c:	2382      	movs	r3, #130	@ 0x82
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001c7e:	2280      	movs	r2, #128	@ 0x80
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001c84:	2300      	movs	r3, #0
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	6182      	str	r2, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c8a:	3ad9      	subs	r2, #217	@ 0xd9
 8001c8c:	3aff      	subs	r2, #255	@ 0xff
 8001c8e:	61c2      	str	r2, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 7;
 8001c90:	3a21      	subs	r2, #33	@ 0x21
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001c92:	6083      	str	r3, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c94:	6103      	str	r3, [r0, #16]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c96:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001c98:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c9c:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c9e:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->Init.CRCPolynomial = 7;
 8001ca0:	62c2      	str	r2, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001ca2:	f006 ff8d 	bl	8008bc0 <HAL_SPI_Init>
 8001ca6:	1e43      	subs	r3, r0, #1
 8001ca8:	4198      	sbcs	r0, r3
  {
    ret = HAL_ERROR;
  }

  return ret;
 8001caa:	b2c0      	uxtb	r0, r0
}
 8001cac:	bd10      	pop	{r4, pc}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	40013000 	.word	0x40013000

08001cb4 <BSP_SPI1_Init>:
{
 8001cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  hspi1.Instance  = SPI1;
 8001cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d68 <BSP_SPI1_Init+0xb4>)
  if(SPI1InitCounter++ == 0)
 8001cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8001d6c <BSP_SPI1_Init+0xb8>)
  hspi1.Instance  = SPI1;
 8001cba:	4d2d      	ldr	r5, [pc, #180]	@ (8001d70 <BSP_SPI1_Init+0xbc>)
{
 8001cbc:	b089      	sub	sp, #36	@ 0x24
  hspi1.Instance  = SPI1;
 8001cbe:	602b      	str	r3, [r5, #0]
  if(SPI1InitCounter++ == 0)
 8001cc0:	6813      	ldr	r3, [r2, #0]
 8001cc2:	1c59      	adds	r1, r3, #1
 8001cc4:	6011      	str	r1, [r2, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <BSP_SPI1_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
 8001cca:	2000      	movs	r0, #0
}
 8001ccc:	b009      	add	sp, #36	@ 0x24
 8001cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001cd0:	0028      	movs	r0, r5
 8001cd2:	f007 fb11 	bl	80092f8 <HAL_SPI_GetState>
 8001cd6:	1e04      	subs	r4, r0, #0
 8001cd8:	d1f7      	bne.n	8001cca <BSP_SPI1_Init+0x16>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	4b25      	ldr	r3, [pc, #148]	@ (8001d74 <BSP_SPI1_Init+0xc0>)
 8001cde:	0149      	lsls	r1, r1, #5
 8001ce0:	699a      	ldr	r2, [r3, #24]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	619a      	str	r2, [r3, #24]
 8001ce8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cea:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cec:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cf0:	9201      	str	r2, [sp, #4]
 8001cf2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	0289      	lsls	r1, r1, #10
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	615a      	str	r2, [r3, #20]
 8001cfc:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	400b      	ands	r3, r1
 8001d02:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001d04:	9007      	str	r0, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001d06:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001d0a:	2320      	movs	r3, #32
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001d0c:	a903      	add	r1, sp, #12
 8001d0e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001d10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d14:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001d16:	f005 fb27 	bl	8007368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001d1a:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001d1c:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001d1e:	a903      	add	r1, sp, #12
 8001d20:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001d22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d28:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001d2a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001d2c:	f005 fb1c 	bl	8007368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001d30:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001d32:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001d34:	a903      	add	r1, sp, #12
 8001d36:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001d38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d3e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001d40:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001d42:	f005 fb11 	bl	8007368 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d46:	0022      	movs	r2, r4
 8001d48:	0021      	movs	r1, r4
 8001d4a:	2019      	movs	r0, #25
 8001d4c:	f005 f9a4 	bl	8007098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d50:	2019      	movs	r0, #25
 8001d52:	f005 f9cb 	bl	80070ec <HAL_NVIC_EnableIRQ>
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001d56:	0028      	movs	r0, r5
 8001d58:	f7ff ff88 	bl	8001c6c <MX_SPI1_Init>
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d0b4      	beq.n	8001cca <BSP_SPI1_Init+0x16>
                ret = BSP_ERROR_BUS_FAILURE;
 8001d60:	2008      	movs	r0, #8
 8001d62:	4240      	negs	r0, r0
  return ret;
 8001d64:	e7b2      	b.n	8001ccc <BSP_SPI1_Init+0x18>
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	40013000 	.word	0x40013000
 8001d6c:	20000afc 	.word	0x20000afc
 8001d70:	20000b00 	.word	0x20000b00
 8001d74:	40021000 	.word	0x40021000

08001d78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d78:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <MX_DMA_Init+0x38>)

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001d7e:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	400b      	ands	r3, r1
 8001d8c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001d8e:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d90:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001d92:	f005 f981 	bl	8007098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001d96:	200a      	movs	r0, #10
 8001d98:	f005 f9a8 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	200b      	movs	r0, #11
 8001da0:	0011      	movs	r1, r2
 8001da2:	f005 f979 	bl	8007098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001da6:	200b      	movs	r0, #11
 8001da8:	f005 f9a0 	bl	80070ec <HAL_NVIC_EnableIRQ>

}
 8001dac:	bd07      	pop	{r0, r1, r2, pc}
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	40021000 	.word	0x40021000

08001db4 <flash_read>:
                         data[i]);
    }
    HAL_FLASH_Lock();
}

void flash_read(uint8_t* data){
 8001db4:	b510      	push	{r4, lr}
	memcpy(data, (void*)(LAST_PAGE_ADDR + TARGET_OFFSET * sizeof(uint32_t)) , 16);
 8001db6:	2210      	movs	r2, #16
 8001db8:	4901      	ldr	r1, [pc, #4]	@ (8001dc0 <flash_read+0xc>)
 8001dba:	f011 faaf 	bl	801331c <memcpy>
}
 8001dbe:	bd10      	pop	{r4, pc}
 8001dc0:	0800fff0 	.word	0x0800fff0

08001dc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	2214      	movs	r2, #20
 8001dca:	2100      	movs	r1, #0
 8001dcc:	a803      	add	r0, sp, #12
 8001dce:	f011 fa71 	bl	80132b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	2180      	movs	r1, #128	@ 0x80
 8001dd4:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <MX_GPIO_Init+0x9c>)
 8001dd6:	0289      	lsls	r1, r1, #10
 8001dd8:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001dda:	2590      	movs	r5, #144	@ 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	615a      	str	r2, [r3, #20]
 8001de0:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001de2:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	9201      	str	r2, [sp, #4]
 8001dea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	02c9      	lsls	r1, r1, #11
 8001df0:	430a      	orrs	r2, r1
 8001df2:	615a      	str	r2, [r3, #20]
 8001df4:	695b      	ldr	r3, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001df6:	4e1b      	ldr	r6, [pc, #108]	@ (8001e64 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001dfa:	0028      	movs	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfc:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e04:	f005 fb74 	bl	80074f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001e08:	2200      	movs	r2, #0
 8001e0a:	0031      	movs	r1, r6
 8001e0c:	4816      	ldr	r0, [pc, #88]	@ (8001e68 <MX_GPIO_Init+0xa4>)
 8001e0e:	f005 fb6f 	bl	80074f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e12:	2302      	movs	r3, #2
 8001e14:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e16:	2388      	movs	r3, #136	@ 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e1c:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	a903      	add	r1, sp, #12

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e20:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e22:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f005 fa9f 	bl	8007368 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e2a:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	0028      	movs	r0, r5
 8001e2e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e30:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f005 fa96 	bl	8007368 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	a903      	add	r1, sp, #12
 8001e3e:	480a      	ldr	r0, [pc, #40]	@ (8001e68 <MX_GPIO_Init+0xa4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001e40:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e42:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	f005 fa8e 	bl	8007368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001e4c:	0022      	movs	r2, r4
 8001e4e:	0021      	movs	r1, r4
 8001e50:	2005      	movs	r0, #5
 8001e52:	f005 f921 	bl	8007098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001e56:	2005      	movs	r0, #5
 8001e58:	f005 f948 	bl	80070ec <HAL_NVIC_EnableIRQ>

}
 8001e5c:	b009      	add	sp, #36	@ 0x24
 8001e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	00001c07 	.word	0x00001c07
 8001e68:	48000400 	.word	0x48000400

08001e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b510      	push	{r4, lr}
 8001e6e:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e70:	2230      	movs	r2, #48	@ 0x30
 8001e72:	2100      	movs	r1, #0
 8001e74:	a80c      	add	r0, sp, #48	@ 0x30
 8001e76:	f011 fa1d 	bl	80132b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4668      	mov	r0, sp
 8001e80:	f011 fa18 	bl	80132b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e84:	221c      	movs	r2, #28
 8001e86:	2100      	movs	r1, #0
 8001e88:	a804      	add	r0, sp, #16
 8001e8a:	f011 fa13 	bl	80132b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e8e:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001e90:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e92:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001e94:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e96:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e98:	f006 f9a4 	bl	80081e4 <HAL_RCC_OscConfig>
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea4:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eaa:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001eac:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001eae:	0021      	movs	r1, r4
 8001eb0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001eb2:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001eb4:	f006 fc1c 	bl	80086f0 <HAL_RCC_ClockConfig>
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	d001      	beq.n	8001ec0 <SystemClock_Config+0x54>
 8001ebc:	b672      	cpsid	i
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <SystemClock_Config+0x70>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ec2:	9006      	str	r0, [sp, #24]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ec4:	9007      	str	r0, [sp, #28]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001ec6:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec8:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8001eca:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ecc:	f006 fcaa 	bl	8008824 <HAL_RCCEx_PeriphCLKConfig>
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	d001      	beq.n	8001ed8 <SystemClock_Config+0x6c>
 8001ed4:	b672      	cpsid	i
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <SystemClock_Config+0x6a>
}
 8001ed8:	b018      	add	sp, #96	@ 0x60
 8001eda:	bd10      	pop	{r4, pc}
 8001edc:	00020003 	.word	0x00020003

08001ee0 <main>:
{
 8001ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_Init();
 8001ee2:	f005 f8a5 	bl	8007030 <HAL_Init>
  SystemClock_Config();
 8001ee6:	f7ff ffc1 	bl	8001e6c <SystemClock_Config>
  MX_GPIO_Init();
 8001eea:	f7ff ff6b 	bl	8001dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001eee:	f7ff ff43 	bl	8001d78 <MX_DMA_Init>
  MX_TIM1_Init();
 8001ef2:	f001 fde9 	bl	8003ac8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001ef6:	f001 fe41 	bl	8003b7c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001efa:	f001 fed5 	bl	8003ca8 <MX_USB_PCD_Init>
  MX_TIM17_Init();
 8001efe:	f001 fd47 	bl	8003990 <MX_TIM17_Init>
  MX_X_CUBE_NFC6_Init();
 8001f02:	f010 fb15 	bl	8012530 <MX_X_CUBE_NFC6_Init>
  MX_USB_DEVICE_Init();
 8001f06:	f00e fecd 	bl	8010ca4 <MX_USB_DEVICE_Init>
  flash_read(Flash.raw_flash_byte);
 8001f0a:	4c17      	ldr	r4, [pc, #92]	@ (8001f68 <main+0x88>)
 8001f0c:	0020      	movs	r0, r4
 8001f0e:	f7ff ff51 	bl	8001db4 <flash_read>
  if((Flash.system_setting >> 4) != FIRMWARE_VISION){
 8001f12:	7823      	ldrb	r3, [r4, #0]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	d004      	beq.n	8001f24 <main+0x44>
	  memcpy(Flash.raw_flash_byte,default_setting,5);
 8001f1a:	2205      	movs	r2, #5
 8001f1c:	0020      	movs	r0, r4
 8001f1e:	4913      	ldr	r1, [pc, #76]	@ (8001f6c <main+0x8c>)
 8001f20:	f011 f9fc 	bl	801331c <memcpy>
  LED_show(255,255,255);
 8001f24:	22ff      	movs	r2, #255	@ 0xff
 8001f26:	0011      	movs	r1, r2
 8001f28:	0010      	movs	r0, r2
 8001f2a:	f7ff fe89 	bl	8001c40 <LED_show>
	  MX_X_CUBE_NFC6_Process();
 8001f2e:	f010 fa60 	bl	80123f2 <MX_X_CUBE_NFC6_Process>
	  Reader_UART_Init();
 8001f32:	f000 fd29 	bl	8002988 <Reader_UART_Init>
	  HAL_Delay(500);
 8001f36:	20fa      	movs	r0, #250	@ 0xfa
	  Reader.Current_Interface = INTERFACE_NONE;
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <main+0x90>)
	  HAL_Delay(500);
 8001f3c:	0040      	lsls	r0, r0, #1
	  Reader.Current_Interface = INTERFACE_NONE;
 8001f3e:	705a      	strb	r2, [r3, #1]
	  Reader.Current_Mode = MODE_IDLE;
 8001f40:	701a      	strb	r2, [r3, #0]
		  uint8_t keyboard_buffer[10] = {0,0,0x58,0x5F,0x5C,0x59,0,0,0,0};
 8001f42:	240a      	movs	r4, #10
	  HAL_Delay(500);
 8001f44:	f005 f896 	bl	8007074 <HAL_Delay>
		  uint8_t keyboard_buffer[10] = {0,0,0x58,0x5F,0x5C,0x59,0,0,0,0};
 8001f48:	0022      	movs	r2, r4
 8001f4a:	490a      	ldr	r1, [pc, #40]	@ (8001f74 <main+0x94>)
 8001f4c:	a801      	add	r0, sp, #4
 8001f4e:	f011 f9e5 	bl	801331c <memcpy>
		  		USBD_CUSTOM_HID_SendReport(&hUsbDevice,keyboard_buffer, 10);
 8001f52:	0022      	movs	r2, r4
 8001f54:	a901      	add	r1, sp, #4
 8001f56:	4808      	ldr	r0, [pc, #32]	@ (8001f78 <main+0x98>)
 8001f58:	f00f fce4 	bl	8011924 <USBD_CUSTOM_HID_SendReport>
		  Card_Poll();
 8001f5c:	f7ff fc70 	bl	8001840 <Card_Poll>
		  Mode_Poll();
 8001f60:	f000 fcd0 	bl	8002904 <Mode_Poll>
	  while(1){
 8001f64:	e7f0      	b.n	8001f48 <main+0x68>
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	20000b64 	.word	0x20000b64
 8001f6c:	0801431e 	.word	0x0801431e
 8001f70:	20000c4a 	.word	0x20000c4a
 8001f74:	08013ba0 	.word	0x08013ba0
 8001f78:	200026f4 	.word	0x200026f4

08001f7c <Error_Handler>:
 8001f7c:	b672      	cpsid	i
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <Error_Handler+0x2>

08001f80 <attachParityInformation.constprop.0>:
    cmd[3] = HIGH_BYTE( crc );

    return ERR_NONE;
}

static int8_t attachParityInformation ( uint16_t *cmd, size_t length )
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i = 0;
    for ( i = 0; i < length; i++ )
    {
        if ( mccParityOdd( cmd[i] ) == 1 )
        {
            cmd[i] |= 0x0100;
 8001f82:	2780      	movs	r7, #128	@ 0x80
static int8_t attachParityInformation ( uint16_t *cmd, size_t length )
 8001f84:	0005      	movs	r5, r0
    for ( i = 0; i < length; i++ )
 8001f86:	2600      	movs	r6, #0
 8001f88:	4c09      	ldr	r4, [pc, #36]	@ (8001fb0 <attachParityInformation.constprop.0+0x30>)
            cmd[i] |= 0x0100;
 8001f8a:	007f      	lsls	r7, r7, #1
        if ( mccParityOdd( cmd[i] ) == 1 )
 8001f8c:	8820      	ldrh	r0, [r4, #0]
 8001f8e:	f000 fbbc 	bl	800270a <mccParityOdd>
 8001f92:	8823      	ldrh	r3, [r4, #0]
 8001f94:	2801      	cmp	r0, #1
 8001f96:	d107      	bne.n	8001fa8 <attachParityInformation.constprop.0+0x28>
            cmd[i] |= 0x0100;
 8001f98:	433b      	orrs	r3, r7
    for ( i = 0; i < length; i++ )
 8001f9a:	3601      	adds	r6, #1
 8001f9c:	8023      	strh	r3, [r4, #0]
 8001f9e:	3402      	adds	r4, #2
 8001fa0:	42ae      	cmp	r6, r5
 8001fa2:	d1f3      	bne.n	8001f8c <attachParityInformation.constprop.0+0xc>
            cmd[i] &= ~0x0100;
        }
    }

    return ERR_NONE;
}
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cmd[i] &= ~0x0100;
 8001fa8:	4a02      	ldr	r2, [pc, #8]	@ (8001fb4 <attachParityInformation.constprop.0+0x34>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	e7f5      	b.n	8001f9a <attachParityInformation.constprop.0+0x1a>
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	20000b80 	.word	0x20000b80
 8001fb4:	fffffeff 	.word	0xfffffeff

08001fb8 <mccDeinitialise>:
}
 8001fb8:	2000      	movs	r0, #0
 8001fba:	4770      	bx	lr

08001fbc <mccSetKey>:
{
 8001fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fbe:	1e06      	subs	r6, r0, #0
    if ( key == 0 )
 8001fc0:	d014      	beq.n	8001fec <mccSetKey+0x30>
    uint64_t bigKey = 0;
 8001fc2:	2400      	movs	r4, #0
 8001fc4:	0027      	movs	r7, r4
    for ( i = 0; i < 6; i++ )
 8001fc6:	0025      	movs	r5, r4
        bigKey |= ((uint64_t)key[i] << ((5-i)*8));
 8001fc8:	00ea      	lsls	r2, r5, #3
 8001fca:	4252      	negs	r2, r2
 8001fcc:	5d70      	ldrb	r0, [r6, r5]
 8001fce:	2100      	movs	r1, #0
 8001fd0:	3228      	adds	r2, #40	@ 0x28
 8001fd2:	f7fe fa4b 	bl	800046c <__aeabi_llsl>
    for ( i = 0; i < 6; i++ )
 8001fd6:	3501      	adds	r5, #1
        bigKey |= ((uint64_t)key[i] << ((5-i)*8));
 8001fd8:	4304      	orrs	r4, r0
 8001fda:	430f      	orrs	r7, r1
    for ( i = 0; i < 6; i++ )
 8001fdc:	2d06      	cmp	r5, #6
 8001fde:	d1f3      	bne.n	8001fc8 <mccSetKey+0xc>
    mccCryptoInit( handle, bigKey );
 8001fe0:	4903      	ldr	r1, [pc, #12]	@ (8001ff0 <mccSetKey+0x34>)
 8001fe2:	0022      	movs	r2, r4
 8001fe4:	003b      	movs	r3, r7
 8001fe6:	6808      	ldr	r0, [r1, #0]
 8001fe8:	f000 f9f9 	bl	80023de <mccCryptoInit>
}
 8001fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	200005f8 	.word	0x200005f8

08001ff4 <mccResetCipher>:
{
 8001ff4:	b510      	push	{r4, lr}
    mccCryptoReset( handle, 0 );
 8001ff6:	4b03      	ldr	r3, [pc, #12]	@ (8002004 <mccResetCipher+0x10>)
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	f000 fa12 	bl	8002424 <mccCryptoReset>
}
 8002000:	bd10      	pop	{r4, pc}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	200005f8 	.word	0x200005f8

08002008 <mccInitialize>:
{
 8002008:	b510      	push	{r4, lr}
    mccResetCipher();
 800200a:	f7ff fff3 	bl	8001ff4 <mccResetCipher>
}
 800200e:	2000      	movs	r0, #0
 8002010:	bd10      	pop	{r4, pc}
	...

08002014 <mccAuthenticateStep1>:
{
 8002014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002016:	b08b      	sub	sp, #44	@ 0x2c
 8002018:	0015      	movs	r5, r2
 800201a:	9305      	str	r3, [sp, #20]
    if ( uidLength != UID_LEN || uid == 0 )
 800201c:	2b04      	cmp	r3, #4
 800201e:	d158      	bne.n	80020d2 <mccAuthenticateStep1+0xbe>
 8002020:	2a00      	cmp	r2, #0
 8002022:	d056      	beq.n	80020d2 <mccAuthenticateStep1+0xbe>
    if ( key == 0 )
 8002024:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d053      	beq.n	80020d2 <mccAuthenticateStep1+0xbe>
    cmd[0] = keySelect;
 800202a:	ac07      	add	r4, sp, #28
 800202c:	7020      	strb	r0, [r4, #0]
    cmd[1] = block;
 800202e:	7061      	strb	r1, [r4, #1]
    crc = rfalCrcCalculateCcitt( CRC_PRELOAD_VALUE, cmd, CRC_LEN );
 8002030:	2202      	movs	r2, #2
 8002032:	0021      	movs	r1, r4
 8002034:	4828      	ldr	r0, [pc, #160]	@ (80020d8 <mccAuthenticateStep1+0xc4>)
 8002036:	f009 f8d9 	bl	800b1ec <rfalCrcCalculateCcitt>
        MifareBuffer[i] = cmd[i];
 800203a:	4e28      	ldr	r6, [pc, #160]	@ (80020dc <mccAuthenticateStep1+0xc8>)
 800203c:	7823      	ldrb	r3, [r4, #0]
    cmd[2] = LOW_BYTE( crc );
 800203e:	8060      	strh	r0, [r4, #2]
        MifareBuffer[i] = cmd[i];
 8002040:	8033      	strh	r3, [r6, #0]
 8002042:	7863      	ldrb	r3, [r4, #1]
 8002044:	8073      	strh	r3, [r6, #2]
 8002046:	b2c3      	uxtb	r3, r0
    cmd[3] = HIGH_BYTE( crc );
 8002048:	0a00      	lsrs	r0, r0, #8
        MifareBuffer[i] = cmd[i];
 800204a:	80f0      	strh	r0, [r6, #6]
    rv = attachParityInformation( MifareBuffer, AUTH_CMD_LEN );
 800204c:	9805      	ldr	r0, [sp, #20]
        MifareBuffer[i] = cmd[i];
 800204e:	80b3      	strh	r3, [r6, #4]
    rv = attachParityInformation( MifareBuffer, AUTH_CMD_LEN );
 8002050:	f7ff ff96 	bl	8001f80 <attachParityInformation.constprop.0>
 8002054:	b2c4      	uxtb	r4, r0
    EVAL_ERR_NE_GOTO( ERR_NONE, rv, out );
 8002056:	2c00      	cmp	r4, #0
 8002058:	d139      	bne.n	80020ce <mccAuthenticateStep1+0xba>
    if( mccCryptoIsActive( handle ) == 1 ) 
 800205a:	4f21      	ldr	r7, [pc, #132]	@ (80020e0 <mccAuthenticateStep1+0xcc>)
 800205c:	6838      	ldr	r0, [r7, #0]
 800205e:	f000 fa67 	bl	8002530 <mccCryptoIsActive>
 8002062:	2801      	cmp	r0, #1
 8002064:	d105      	bne.n	8002072 <mccAuthenticateStep1+0x5e>
        mccCryptoTranscode( handle, MifareBuffer, AUTH_CMD_LEN, 0 );
 8002066:	0023      	movs	r3, r4
 8002068:	0031      	movs	r1, r6
 800206a:	9a05      	ldr	r2, [sp, #20]
 800206c:	6838      	ldr	r0, [r7, #0]
 800206e:	f000 f9f3 	bl	8002458 <mccCryptoTranscode>
    rv = mccSendRawRequest( MifareBuffer, AUTH_CMD_LEN,
 8002072:	2300      	movs	r3, #0
 8002074:	2412      	movs	r4, #18
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	330a      	adds	r3, #10
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	ab02      	add	r3, sp, #8
 800207e:	18e4      	adds	r4, r4, r3
 8002080:	2104      	movs	r1, #4
 8002082:	2305      	movs	r3, #5
 8002084:	0030      	movs	r0, r6
 8002086:	9400      	str	r4, [sp, #0]
 8002088:	aa08      	add	r2, sp, #32
 800208a:	f000 fb4b 	bl	8002724 <mccSendRawRequest>
    if ( bytesReceived != AUTH_RSP_LEN - 1 )
 800208e:	8823      	ldrh	r3, [r4, #0]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d004      	beq.n	800209e <mccAuthenticateStep1+0x8a>
        mccResetCipher( );
 8002094:	f7ff ffae 	bl	8001ff4 <mccResetCipher>
        return ERR_NOTFOUND;
 8002098:	2016      	movs	r0, #22
}
 800209a:	b00b      	add	sp, #44	@ 0x2c
 800209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mccCryptoReset( handle, 1 );
 800209e:	2101      	movs	r1, #1
    rv = mccSendRawRequest( MifareBuffer, AUTH_CMD_LEN,
 80020a0:	b2c4      	uxtb	r4, r0
    mccCryptoReset( handle, 1 );
 80020a2:	6838      	ldr	r0, [r7, #0]
 80020a4:	f000 f9be 	bl	8002424 <mccCryptoReset>
    mccSetKey( key );
 80020a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80020aa:	f7ff ff87 	bl	8001fbc <mccSetKey>
    mccCryptoAuthReaderStep1( handle, TO_uint32_t( uid ), TO_uint32_t( rsp ) );
 80020ae:	786a      	ldrb	r2, [r5, #1]
 80020b0:	782b      	ldrb	r3, [r5, #0]
 80020b2:	0212      	lsls	r2, r2, #8
 80020b4:	431a      	orrs	r2, r3
 80020b6:	78ab      	ldrb	r3, [r5, #2]
 80020b8:	78e9      	ldrb	r1, [r5, #3]
 80020ba:	041b      	lsls	r3, r3, #16
 80020bc:	4313      	orrs	r3, r2
 80020be:	0609      	lsls	r1, r1, #24
 80020c0:	9a08      	ldr	r2, [sp, #32]
 80020c2:	4319      	orrs	r1, r3
 80020c4:	6838      	ldr	r0, [r7, #0]
 80020c6:	ba09      	rev	r1, r1
 80020c8:	ba12      	rev	r2, r2
 80020ca:	f000 fa35 	bl	8002538 <mccCryptoAuthReaderStep1>
    return rv;
 80020ce:	b260      	sxtb	r0, r4
 80020d0:	e7e3      	b.n	800209a <mccAuthenticateStep1+0x86>
        rv = ERR_PARAM;
 80020d2:	2407      	movs	r4, #7
 80020d4:	e7fb      	b.n	80020ce <mccAuthenticateStep1+0xba>
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	00006363 	.word	0x00006363
 80020dc:	20000b80 	.word	0x20000b80
 80020e0:	200005f8 	.word	0x200005f8

080020e4 <mccAuthenticateStep2>:
{
 80020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t_TO_ARRAY_PARITY( nonce, cmd );
 80020e6:	27ff      	movs	r7, #255	@ 0xff
 80020e8:	0006      	movs	r6, r0
 80020ea:	403e      	ands	r6, r7
{
 80020ec:	b08d      	sub	sp, #52	@ 0x34
 80020ee:	0004      	movs	r4, r0
    uint32_t_TO_ARRAY_PARITY( nonce, cmd );
 80020f0:	0030      	movs	r0, r6
 80020f2:	f000 fb0a 	bl	800270a <mccParityOdd>
 80020f6:	0200      	lsls	r0, r0, #8
 80020f8:	ad08      	add	r5, sp, #32
 80020fa:	4306      	orrs	r6, r0
 80020fc:	80ee      	strh	r6, [r5, #6]
 80020fe:	0a26      	lsrs	r6, r4, #8
 8002100:	403e      	ands	r6, r7
 8002102:	0030      	movs	r0, r6
 8002104:	f000 fb01 	bl	800270a <mccParityOdd>
 8002108:	0200      	lsls	r0, r0, #8
 800210a:	4306      	orrs	r6, r0
 800210c:	80ae      	strh	r6, [r5, #4]
 800210e:	0c26      	lsrs	r6, r4, #16
 8002110:	403e      	ands	r6, r7
 8002112:	0030      	movs	r0, r6
 8002114:	f000 faf9 	bl	800270a <mccParityOdd>
 8002118:	0e24      	lsrs	r4, r4, #24
 800211a:	0200      	lsls	r0, r0, #8
 800211c:	4306      	orrs	r6, r0
 800211e:	0020      	movs	r0, r4
 8002120:	806e      	strh	r6, [r5, #2]
 8002122:	f000 faf2 	bl	800270a <mccParityOdd>
    mccCryptoAuthReaderStep2( handle, cmd, cmd+4 );
 8002126:	4e1b      	ldr	r6, [pc, #108]	@ (8002194 <mccAuthenticateStep2+0xb0>)
    uint32_t_TO_ARRAY_PARITY( nonce, cmd );
 8002128:	0200      	lsls	r0, r0, #8
 800212a:	4320      	orrs	r0, r4
    mccCryptoAuthReaderStep2( handle, cmd, cmd+4 );
 800212c:	0029      	movs	r1, r5
    uint32_t_TO_ARRAY_PARITY( nonce, cmd );
 800212e:	8028      	strh	r0, [r5, #0]
    mccCryptoAuthReaderStep2( handle, cmd, cmd+4 );
 8002130:	aa0a      	add	r2, sp, #40	@ 0x28
 8002132:	6830      	ldr	r0, [r6, #0]
 8002134:	f000 fa0a 	bl	800254c <mccCryptoAuthReaderStep2>
    rv = mccSendRawRequest( cmd, AUTH2_CMD_LEN,
 8002138:	2300      	movs	r3, #0
 800213a:	3fe9      	subs	r7, #233	@ 0xe9
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	ac06      	add	r4, sp, #24
 8002140:	3314      	adds	r3, #20
 8002142:	446f      	add	r7, sp
 8002144:	0028      	movs	r0, r5
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	0022      	movs	r2, r4
 800214a:	2108      	movs	r1, #8
 800214c:	9700      	str	r7, [sp, #0]
 800214e:	3b0f      	subs	r3, #15
 8002150:	f000 fae8 	bl	8002724 <mccSendRawRequest>
 8002154:	1e05      	subs	r5, r0, #0
    EVAL_ERR_NE_GOTO( ERR_NONE, rv, out );
 8002156:	d105      	bne.n	8002164 <mccAuthenticateStep2+0x80>
    if ( bytesReceived != 4 )
 8002158:	883b      	ldrh	r3, [r7, #0]
 800215a:	2b04      	cmp	r3, #4
 800215c:	d005      	beq.n	800216a <mccAuthenticateStep2+0x86>
        mccResetCipher( );
 800215e:	f7ff ff49 	bl	8001ff4 <mccResetCipher>
        return ERR_NOTFOUND;
 8002162:	2516      	movs	r5, #22
}
 8002164:	0028      	movs	r0, r5
 8002166:	b00d      	add	sp, #52	@ 0x34
 8002168:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MifareBuffer[i] = rsp[i];
 800216a:	490b      	ldr	r1, [pc, #44]	@ (8002198 <mccAuthenticateStep2+0xb4>)
 800216c:	7823      	ldrb	r3, [r4, #0]
    rv = mccCryptoAuthReaderStep3( handle, MifareBuffer );
 800216e:	6830      	ldr	r0, [r6, #0]
        MifareBuffer[i] = rsp[i];
 8002170:	800b      	strh	r3, [r1, #0]
 8002172:	7863      	ldrb	r3, [r4, #1]
 8002174:	804b      	strh	r3, [r1, #2]
 8002176:	78a3      	ldrb	r3, [r4, #2]
 8002178:	808b      	strh	r3, [r1, #4]
 800217a:	78e3      	ldrb	r3, [r4, #3]
 800217c:	80cb      	strh	r3, [r1, #6]
 800217e:	7923      	ldrb	r3, [r4, #4]
 8002180:	810b      	strh	r3, [r1, #8]
    rv = mccCryptoAuthReaderStep3( handle, MifareBuffer );
 8002182:	f000 fa73 	bl	800266c <mccCryptoAuthReaderStep3>
    if ( rv != 1 )
 8002186:	b241      	sxtb	r1, r0
 8002188:	2901      	cmp	r1, #1
 800218a:	d1e8      	bne.n	800215e <mccAuthenticateStep2+0x7a>
    mccCryptoSetActive( handle, 1 );
 800218c:	6830      	ldr	r0, [r6, #0]
 800218e:	f000 f9d1 	bl	8002534 <mccCryptoSetActive>
 8002192:	e7e7      	b.n	8002164 <mccAuthenticateStep2+0x80>
 8002194:	200005f8 	.word	0x200005f8
 8002198:	20000b80 	.word	0x20000b80

0800219c <mccAuthenticate>:
{
 800219c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800219e:	9d06      	ldr	r5, [sp, #24]
 80021a0:	0004      	movs	r4, r0
        rv = ERR_PARAM;
 80021a2:	2007      	movs	r0, #7
    if ( uid == 0  || uidLength != UID_LEN )
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	d00c      	beq.n	80021c2 <mccAuthenticate+0x26>
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d10a      	bne.n	80021c2 <mccAuthenticate+0x26>
    if ( key == 0 )
 80021ac:	2d00      	cmp	r5, #0
 80021ae:	d008      	beq.n	80021c2 <mccAuthenticate+0x26>
    rv = mccAuthenticateStep1( keySelect, block, uid, uidLength, key );
 80021b0:	0020      	movs	r0, r4
 80021b2:	9500      	str	r5, [sp, #0]
 80021b4:	f7ff ff2e 	bl	8002014 <mccAuthenticateStep1>
    EVAL_ERR_NE_GOTO( ERR_NONE, rv, out );
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d102      	bne.n	80021c2 <mccAuthenticate+0x26>
    rv = mccAuthenticateStep2( nonce );
 80021bc:	9807      	ldr	r0, [sp, #28]
 80021be:	f7ff ff91 	bl	80020e4 <mccAuthenticateStep2>
}
 80021c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080021c4 <mccSendRequest>:
{
 80021c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c6:	b08b      	sub	sp, #44	@ 0x2c
 80021c8:	9307      	str	r3, [sp, #28]
 80021ca:	ab10      	add	r3, sp, #64	@ 0x40
 80021cc:	9206      	str	r2, [sp, #24]
 80021ce:	cb04      	ldmia	r3!, {r2}
 80021d0:	000c      	movs	r4, r1
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	9205      	str	r2, [sp, #20]
 80021d6:	9308      	str	r3, [sp, #32]
 80021d8:	ab12      	add	r3, sp, #72	@ 0x48
 80021da:	781b      	ldrb	r3, [r3, #0]
        MifareBuffer[i] = request[i];
 80021dc:	4a32      	ldr	r2, [pc, #200]	@ (80022a8 <mccSendRequest+0xe4>)
{
 80021de:	9309      	str	r3, [sp, #36]	@ 0x24
    for ( i = 0; i < requestLength; i++ )
 80021e0:	2300      	movs	r3, #0
 80021e2:	429c      	cmp	r4, r3
 80021e4:	d84f      	bhi.n	8002286 <mccSendRequest+0xc2>
    crc = rfalCrcCalculateCcitt( CRC_PRELOAD_VALUE, request, requestLength );
 80021e6:	0022      	movs	r2, r4
 80021e8:	0001      	movs	r1, r0
 80021ea:	4830      	ldr	r0, [pc, #192]	@ (80022ac <mccSendRequest+0xe8>)
 80021ec:	f008 fffe 	bl	800b1ec <rfalCrcCalculateCcitt>
    MifareBuffer[requestLength] = LOW_BYTE( crc );
 80021f0:	4e2d      	ldr	r6, [pc, #180]	@ (80022a8 <mccSendRequest+0xe4>)
 80021f2:	0063      	lsls	r3, r4, #1
 80021f4:	b2c2      	uxtb	r2, r0
 80021f6:	539a      	strh	r2, [r3, r6]
    MifareBuffer[requestLength+1] = HIGH_BYTE( crc );
 80021f8:	1c63      	adds	r3, r4, #1
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	0a00      	lsrs	r0, r0, #8
    rv = attachParityInformation( MifareBuffer, requestLength + CRC_LEN );
 80021fe:	3402      	adds	r4, #2
    MifareBuffer[requestLength+1] = HIGH_BYTE( crc );
 8002200:	5398      	strh	r0, [r3, r6]
    rv = attachParityInformation( MifareBuffer, requestLength + CRC_LEN );
 8002202:	0020      	movs	r0, r4
 8002204:	f7ff febc 	bl	8001f80 <attachParityInformation.constprop.0>
 8002208:	1e05      	subs	r5, r0, #0
    EVAL_ERR_NE_GOTO( ERR_NONE, rv, out );
 800220a:	d139      	bne.n	8002280 <mccSendRequest+0xbc>
    if ( mccCryptoIsActive( handle ) != 0 )
 800220c:	4f28      	ldr	r7, [pc, #160]	@ (80022b0 <mccSendRequest+0xec>)
        mccCryptoTranscode( handle, MifareBuffer, requestLength + CRC_LEN, 0 );
 800220e:	b2a4      	uxth	r4, r4
    if ( mccCryptoIsActive( handle ) != 0 )
 8002210:	6838      	ldr	r0, [r7, #0]
 8002212:	f000 f98d 	bl	8002530 <mccCryptoIsActive>
 8002216:	2800      	cmp	r0, #0
 8002218:	d005      	beq.n	8002226 <mccSendRequest+0x62>
        mccCryptoTranscode( handle, MifareBuffer, requestLength + CRC_LEN, 0 );
 800221a:	002b      	movs	r3, r5
 800221c:	0022      	movs	r2, r4
 800221e:	0031      	movs	r1, r6
 8002220:	6838      	ldr	r0, [r7, #0]
 8002222:	f000 f919 	bl	8002458 <mccCryptoTranscode>
    rv = mccSendRawRequest( MifareBuffer, requestLength + CRC_LEN,
 8002226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002228:	0021      	movs	r1, r4
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	9b08      	ldr	r3, [sp, #32]
 800222e:	0030      	movs	r0, r6
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	9b05      	ldr	r3, [sp, #20]
 8002234:	9a06      	ldr	r2, [sp, #24]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	9b07      	ldr	r3, [sp, #28]
 800223a:	f000 fa73 	bl	8002724 <mccSendRawRequest>
 800223e:	1e05      	subs	r5, r0, #0
    EVAL_ERR_NE_GOTO( ERR_NONE, rv, out );
 8002240:	d11e      	bne.n	8002280 <mccSendRequest+0xbc>
    HAL_Delay(300);
 8002242:	2096      	movs	r0, #150	@ 0x96
 8002244:	0040      	lsls	r0, r0, #1
 8002246:	f004 ff15 	bl	8007074 <HAL_Delay>
    for ( i = 0; i < *responseLength; i++ )
 800224a:	002b      	movs	r3, r5
 800224c:	9a05      	ldr	r2, [sp, #20]
 800224e:	8812      	ldrh	r2, [r2, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d81d      	bhi.n	8002290 <mccSendRequest+0xcc>
    if ( mccCryptoIsActive( handle ) != 0 )
 8002254:	6838      	ldr	r0, [r7, #0]
 8002256:	f000 f96b 	bl	8002530 <mccCryptoIsActive>
 800225a:	2800      	cmp	r0, #0
 800225c:	d00b      	beq.n	8002276 <mccSendRequest+0xb2>
        bytes = *responseLength;
 800225e:	9b05      	ldr	r3, [sp, #20]
 8002260:	881a      	ldrh	r2, [r3, #0]
        bits = 0;
 8002262:	2300      	movs	r3, #0
        if ( *responseLength == 0 || *responseLength == 1 )
 8002264:	2a01      	cmp	r2, #1
 8002266:	d801      	bhi.n	800226c <mccSendRequest+0xa8>
            bytes = 0;
 8002268:	2200      	movs	r2, #0
            bits = 4;
 800226a:	2304      	movs	r3, #4
        mccCryptoTranscode( handle, MifareBuffer, bytes, bits );
 800226c:	0031      	movs	r1, r6
 800226e:	6838      	ldr	r0, [r7, #0]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f000 f8f1 	bl	8002458 <mccCryptoTranscode>
            bits = 4;
 8002276:	2300      	movs	r3, #0
    for ( i = 0; i < *responseLength; i++ )
 8002278:	9a05      	ldr	r2, [sp, #20]
 800227a:	8812      	ldrh	r2, [r2, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d80d      	bhi.n	800229c <mccSendRequest+0xd8>
}
 8002280:	0028      	movs	r0, r5
 8002282:	b00b      	add	sp, #44	@ 0x2c
 8002284:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MifareBuffer[i] = request[i];
 8002286:	5cc5      	ldrb	r5, [r0, r3]
 8002288:	0059      	lsls	r1, r3, #1
 800228a:	5255      	strh	r5, [r2, r1]
    for ( i = 0; i < requestLength; i++ )
 800228c:	3301      	adds	r3, #1
 800228e:	e7a8      	b.n	80021e2 <mccSendRequest+0x1e>
        MifareBuffer[i] = response[i];
 8002290:	9906      	ldr	r1, [sp, #24]
 8002292:	005a      	lsls	r2, r3, #1
 8002294:	5cc9      	ldrb	r1, [r1, r3]
    for ( i = 0; i < *responseLength; i++ )
 8002296:	3301      	adds	r3, #1
        MifareBuffer[i] = response[i];
 8002298:	52b1      	strh	r1, [r6, r2]
    for ( i = 0; i < *responseLength; i++ )
 800229a:	e7d7      	b.n	800224c <mccSendRequest+0x88>
        response[i] = MifareBuffer[i];
 800229c:	005a      	lsls	r2, r3, #1
 800229e:	5ab2      	ldrh	r2, [r6, r2]
 80022a0:	9906      	ldr	r1, [sp, #24]
 80022a2:	54ca      	strb	r2, [r1, r3]
    for ( i = 0; i < *responseLength; i++ )
 80022a4:	3301      	adds	r3, #1
 80022a6:	e7e7      	b.n	8002278 <mccSendRequest+0xb4>
 80022a8:	20000b80 	.word	0x20000b80
 80022ac:	00006363 	.word	0x00006363
 80022b0:	200005f8 	.word	0x200005f8

080022b4 <mccLfsrUpdateBit>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

uint8_t mccLfsrUpdateBit ( CryptoHandle_t * const handle, uint8_t dataBit, uint8_t useKeyStream )
{
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	0005      	movs	r5, r0
    uint32_t u = 0;
    uint32_t k = FILTER( handle->lfsr_odd );
 80022b8:	6846      	ldr	r6, [r0, #4]
 80022ba:	200f      	movs	r0, #15
 80022bc:	0933      	lsrs	r3, r6, #4
 80022be:	4c1c      	ldr	r4, [pc, #112]	@ (8002330 <mccLfsrUpdateBit+0x7c>)
 80022c0:	4003      	ands	r3, r0
 80022c2:	411c      	asrs	r4, r3
 80022c4:	2308      	movs	r3, #8
 80022c6:	0a37      	lsrs	r7, r6, #8
 80022c8:	401c      	ands	r4, r3
 80022ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <mccLfsrUpdateBit+0x80>)
 80022cc:	4007      	ands	r7, r0
 80022ce:	413b      	asrs	r3, r7
 80022d0:	2704      	movs	r7, #4
 80022d2:	403b      	ands	r3, r7
 80022d4:	0037      	movs	r7, r6
 80022d6:	4323      	orrs	r3, r4
 80022d8:	4c17      	ldr	r4, [pc, #92]	@ (8002338 <mccLfsrUpdateBit+0x84>)
 80022da:	4007      	ands	r7, r0
 80022dc:	413c      	asrs	r4, r7
 80022de:	2710      	movs	r7, #16
 80022e0:	403c      	ands	r4, r7
 80022e2:	4323      	orrs	r3, r4
 80022e4:	0b37      	lsrs	r7, r6, #12
 80022e6:	4c15      	ldr	r4, [pc, #84]	@ (800233c <mccLfsrUpdateBit+0x88>)
 80022e8:	4007      	ands	r7, r0
 80022ea:	413c      	asrs	r4, r7
 80022ec:	2702      	movs	r7, #2
 80022ee:	403c      	ands	r4, r7
 80022f0:	4323      	orrs	r3, r4
 80022f2:	0c34      	lsrs	r4, r6, #16
 80022f4:	4004      	ands	r4, r0
 80022f6:	4812      	ldr	r0, [pc, #72]	@ (8002340 <mccLfsrUpdateBit+0x8c>)
 80022f8:	3f01      	subs	r7, #1
 80022fa:	4120      	asrs	r0, r4
 80022fc:	4c11      	ldr	r4, [pc, #68]	@ (8002344 <mccLfsrUpdateBit+0x90>)
 80022fe:	4038      	ands	r0, r7
 8002300:	4303      	orrs	r3, r0
 8002302:	40dc      	lsrs	r4, r3
#endif // DEBUG_LFSR
    MCC_DBG( "D: odd = 0x%x%x\n", (uint16_t)(handle->lfsr_odd >> 16), (uint16_t)handle->lfsr_odd );
    MCC_DBG( "D: evn = 0x%x%x\n", (uint16_t)(handle->lfsr_even >> 16), (uint16_t)handle->lfsr_even );

    u  = handle->lfsr_odd & FEEDBACK_ODD;
    u ^=  handle->lfsr_even & FEEDBACK_EVEN;
 8002304:	4810      	ldr	r0, [pc, #64]	@ (8002348 <mccLfsrUpdateBit+0x94>)
 8002306:	68ab      	ldr	r3, [r5, #8]
    uint32_t k = FILTER( handle->lfsr_odd );
 8002308:	403c      	ands	r4, r7
    u ^=  handle->lfsr_even & FEEDBACK_EVEN;
 800230a:	4003      	ands	r3, r0
    u  = handle->lfsr_odd & FEEDBACK_ODD;
 800230c:	480f      	ldr	r0, [pc, #60]	@ (800234c <mccLfsrUpdateBit+0x98>)
    u ^= (k & useKeyStream) ^ dataBit;
 800230e:	4022      	ands	r2, r4
    u  = handle->lfsr_odd & FEEDBACK_ODD;
 8002310:	4006      	ands	r6, r0
    u ^= (k & useKeyStream) ^ dataBit;
 8002312:	0010      	movs	r0, r2
 8002314:	4073      	eors	r3, r6
 8002316:	404b      	eors	r3, r1
 8002318:	4058      	eors	r0, r3

    p = mccParityEven(u);
 800231a:	f000 f9e9 	bl	80026f0 <mccParityEven>
}
#endif // DEBUG_LFSR

static void correctLfsrValues ( CryptoHandle_t * handle, uint32_t parityBit )
{
    handle->lfsr_even = handle->lfsr_even << 1 | parityBit;
 800231e:	68ab      	ldr	r3, [r5, #8]
    handle->lfsr_odd ^= handle->lfsr_even;
    handle->lfsr_even ^= handle->lfsr_odd;
 8002320:	686a      	ldr	r2, [r5, #4]
    handle->lfsr_even = handle->lfsr_even << 1 | parityBit;
 8002322:	40bb      	lsls	r3, r7
 8002324:	4303      	orrs	r3, r0
    handle->lfsr_even ^= handle->lfsr_odd;
 8002326:	60aa      	str	r2, [r5, #8]
    handle->lfsr_odd ^= handle->lfsr_even;
 8002328:	606b      	str	r3, [r5, #4]
    return k;
 800232a:	b2e0      	uxtb	r0, r4
}
 800232c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	0006c9c0 	.word	0x0006c9c0
 8002334:	0003c8b0 	.word	0x0003c8b0
 8002338:	000f22c0 	.word	0x000f22c0
 800233c:	0001e458 	.word	0x0001e458
 8002340:	0000d938 	.word	0x0000d938
 8002344:	ec57e80a 	.word	0xec57e80a
 8002348:	00870804 	.word	0x00870804
 800234c:	0029ce5c 	.word	0x0029ce5c

08002350 <mccLfsrUpdateByte>:
{
 8002350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t rv = 0;
 8002352:	2500      	movs	r5, #0
{
 8002354:	000e      	movs	r6, r1
    for ( i = 0; i < 8; i++ )
 8002356:	002c      	movs	r4, r5
        rv |= mccLfsrUpdateBit( handle, BIT(data, i), useKeyStream ) << i;
 8002358:	2701      	movs	r7, #1
{
 800235a:	9000      	str	r0, [sp, #0]
 800235c:	9201      	str	r2, [sp, #4]
        rv |= mccLfsrUpdateBit( handle, BIT(data, i), useKeyStream ) << i;
 800235e:	0031      	movs	r1, r6
 8002360:	4121      	asrs	r1, r4
 8002362:	9a01      	ldr	r2, [sp, #4]
 8002364:	9800      	ldr	r0, [sp, #0]
 8002366:	4039      	ands	r1, r7
 8002368:	f7ff ffa4 	bl	80022b4 <mccLfsrUpdateBit>
 800236c:	40a0      	lsls	r0, r4
    for ( i = 0; i < 8; i++ )
 800236e:	3401      	adds	r4, #1
        rv |= mccLfsrUpdateBit( handle, BIT(data, i), useKeyStream ) << i;
 8002370:	4305      	orrs	r5, r0
 8002372:	b2ed      	uxtb	r5, r5
    for ( i = 0; i < 8; i++ )
 8002374:	2c08      	cmp	r4, #8
 8002376:	d1f2      	bne.n	800235e <mccLfsrUpdateByte+0xe>
}
 8002378:	0028      	movs	r0, r5
 800237a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800237c <mccLfsrUpdate>:
{
 800237c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800237e:	000f      	movs	r7, r1
 8002380:	0016      	movs	r6, r2
 8002382:	2418      	movs	r4, #24
    uint32_t rv = 0;
 8002384:	2500      	movs	r5, #0
{
 8002386:	9001      	str	r0, [sp, #4]
        rv |= (uint32_t)mccLfsrUpdateByte(handle, ((data >> offset) & 0xFF), useKeyStream) << offset;
 8002388:	0039      	movs	r1, r7
 800238a:	40e1      	lsrs	r1, r4
 800238c:	0032      	movs	r2, r6
 800238e:	9801      	ldr	r0, [sp, #4]
 8002390:	b2c9      	uxtb	r1, r1
 8002392:	f7ff ffdd 	bl	8002350 <mccLfsrUpdateByte>
 8002396:	40a0      	lsls	r0, r4
    for ( i = 3; i >= 0; i-- )
 8002398:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <mccLfsrUpdate+0x2c>)
 800239a:	3c08      	subs	r4, #8
 800239c:	b2a4      	uxth	r4, r4
        rv |= (uint32_t)mccLfsrUpdateByte(handle, ((data >> offset) & 0xFF), useKeyStream) << offset;
 800239e:	4305      	orrs	r5, r0
    for ( i = 3; i >= 0; i-- )
 80023a0:	429c      	cmp	r4, r3
 80023a2:	d1f1      	bne.n	8002388 <mccLfsrUpdate+0xc>
}
 80023a4:	0028      	movs	r0, r5
 80023a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023a8:	0000fff8 	.word	0x0000fff8

080023ac <mccPrng>:
{
 80023ac:	b570      	push	{r4, r5, r6, lr}
    uint32_t prngNew = handle->prng;
 80023ae:	8800      	ldrh	r0, [r0, #0]
{
 80023b0:	000c      	movs	r4, r1
    prngNew = mccReverse( prngNew );
 80023b2:	f000 f979 	bl	80026a8 <mccReverse>
    for ( i = 0; i < steps; i++ )
 80023b6:	2200      	movs	r2, #0
                         & 0x01 // make sure we take only one bit
 80023b8:	2101      	movs	r1, #1
    for ( i = 0; i < steps; i++ )
 80023ba:	42a2      	cmp	r2, r4
 80023bc:	d102      	bne.n	80023c4 <mccPrng+0x18>
    return mccReverse(prngNew);
 80023be:	f000 f973 	bl	80026a8 <mccReverse>
}
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
                           ^ (prngNew >> 13)
 80023c4:	0b46      	lsrs	r6, r0, #13
                             (prngNew >> 15) 
 80023c6:	0bc3      	lsrs	r3, r0, #15
                           ^ (prngNew >> 13)
 80023c8:	4073      	eors	r3, r6
                           ^ (prngNew >> 12)
 80023ca:	0b06      	lsrs	r6, r0, #12
        prngNew = (prngNew << 0x01)
 80023cc:	0045      	lsls	r5, r0, #1
                           ^ (prngNew >> 12)
 80023ce:	4073      	eors	r3, r6
                           ^ (prngNew >> 10)
 80023d0:	0a80      	lsrs	r0, r0, #10
 80023d2:	4043      	eors	r3, r0
        prngNew = (prngNew << 0x01)
 80023d4:	0028      	movs	r0, r5
                         & 0x01 // make sure we take only one bit
 80023d6:	400b      	ands	r3, r1
        prngNew = (prngNew << 0x01)
 80023d8:	4318      	orrs	r0, r3
    for ( i = 0; i < steps; i++ )
 80023da:	3201      	adds	r2, #1
 80023dc:	e7ed      	b.n	80023ba <mccPrng+0xe>

080023de <mccCryptoInit>:
{
 80023de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    handle->prng = 0;
 80023e0:	2400      	movs	r4, #0
{
 80023e2:	0005      	movs	r5, r0
    handle->prng = 0;
 80023e4:	0026      	movs	r6, r4
    for( i = 47; i > 0; i -= 2 )
 80023e6:	272f      	movs	r7, #47	@ 0x2f
{
 80023e8:	9200      	str	r2, [sp, #0]
 80023ea:	9301      	str	r3, [sp, #4]
    handle->prng = 0;
 80023ec:	8004      	strh	r4, [r0, #0]
        handle->lfsr_odd  = (handle->lfsr_odd << 1)  | BIT( key, (i - 1) ^ 7 );
 80023ee:	2307      	movs	r3, #7
 80023f0:	1e7a      	subs	r2, r7, #1
 80023f2:	405a      	eors	r2, r3
 80023f4:	9800      	ldr	r0, [sp, #0]
 80023f6:	9901      	ldr	r1, [sp, #4]
 80023f8:	f7fe f82c 	bl	8000454 <__aeabi_llsr>
 80023fc:	2301      	movs	r3, #1
        handle->lfsr_even = (handle->lfsr_even << 1) | BIT( key, i ^ 7 );
 80023fe:	2207      	movs	r2, #7
        handle->lfsr_odd  = (handle->lfsr_odd << 1)  | BIT( key, (i - 1) ^ 7 );
 8002400:	409e      	lsls	r6, r3
 8002402:	4018      	ands	r0, r3
        handle->lfsr_even = (handle->lfsr_even << 1) | BIT( key, i ^ 7 );
 8002404:	407a      	eors	r2, r7
 8002406:	9901      	ldr	r1, [sp, #4]
        handle->lfsr_odd  = (handle->lfsr_odd << 1)  | BIT( key, (i - 1) ^ 7 );
 8002408:	4306      	orrs	r6, r0
        handle->lfsr_even = (handle->lfsr_even << 1) | BIT( key, i ^ 7 );
 800240a:	9800      	ldr	r0, [sp, #0]
 800240c:	f7fe f822 	bl	8000454 <__aeabi_llsr>
 8002410:	2301      	movs	r3, #1
 8002412:	409c      	lsls	r4, r3
 8002414:	4018      	ands	r0, r3
    for( i = 47; i > 0; i -= 2 )
 8002416:	3f02      	subs	r7, #2
        handle->lfsr_even = (handle->lfsr_even << 1) | BIT( key, i ^ 7 );
 8002418:	4304      	orrs	r4, r0
    for( i = 47; i > 0; i -= 2 )
 800241a:	1c7b      	adds	r3, r7, #1
 800241c:	d1e7      	bne.n	80023ee <mccCryptoInit+0x10>
 800241e:	606e      	str	r6, [r5, #4]
 8002420:	60ac      	str	r4, [r5, #8]
}
 8002422:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08002424 <mccCryptoReset>:
    handle->prng = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	8003      	strh	r3, [r0, #0]
    handle->lfsr_odd = 0;
 8002428:	6043      	str	r3, [r0, #4]
    handle->lfsr_even = 0;
 800242a:	6083      	str	r3, [r0, #8]
    if ( keepActive != 1 )
 800242c:	2901      	cmp	r1, #1
 800242e:	d000      	beq.n	8002432 <mccCryptoReset+0xe>
        handle->is_active = 0;
 8002430:	7083      	strb	r3, [r0, #2]
}
 8002432:	4770      	bx	lr

08002434 <mccCryptoAuthInit>:
{
 8002434:	b510      	push	{r4, lr}
    mccLfsrUpdate( handle, uid ^ nonce, 0 );
 8002436:	4051      	eors	r1, r2
    handle->prng = nonce;
 8002438:	8002      	strh	r2, [r0, #0]
    mccLfsrUpdate( handle, uid ^ nonce, 0 );
 800243a:	2200      	movs	r2, #0
 800243c:	f7ff ff9e 	bl	800237c <mccLfsrUpdate>
}
 8002440:	bd10      	pop	{r4, pc}

08002442 <mccCryptoAuthReinit>:
{
 8002442:	b570      	push	{r4, r5, r6, lr}
    uint32_t ks = mccLfsrUpdate( handle, nonce ^ uid, 1 );
 8002444:	4051      	eors	r1, r2
{
 8002446:	0014      	movs	r4, r2
    uint32_t ks = mccLfsrUpdate( handle, nonce ^ uid, 1 );
 8002448:	2201      	movs	r2, #1
{
 800244a:	0005      	movs	r5, r0
    uint32_t ks = mccLfsrUpdate( handle, nonce ^ uid, 1 );
 800244c:	f7ff ff96 	bl	800237c <mccLfsrUpdate>
    uint32_t nonce_decrypted = nonce ^ ks;
 8002450:	4044      	eors	r4, r0
    handle->prng = nonce_decrypted;
 8002452:	802c      	strh	r4, [r5, #0]
}
 8002454:	bd70      	pop	{r4, r5, r6, pc}
	...

08002458 <mccCryptoTranscode>:
{
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	0005      	movs	r5, r0
 800245c:	000c      	movs	r4, r1
 800245e:	000e      	movs	r6, r1
        data_w_parity[i] ^= (FILTER(handle->lfsr_odd) << 0x08);
 8002460:	270f      	movs	r7, #15
{
 8002462:	b085      	sub	sp, #20
 8002464:	9302      	str	r3, [sp, #8]
 8002466:	0053      	lsls	r3, r2, #1
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	18cb      	adds	r3, r1, r3
 800246c:	9301      	str	r3, [sp, #4]
    for ( i=0; i < bytes; i++ )
 800246e:	9b01      	ldr	r3, [sp, #4]
 8002470:	429e      	cmp	r6, r3
 8002472:	d107      	bne.n	8002484 <mccCryptoTranscode+0x2c>
    for ( i = 0; i < bits; i++ )
 8002474:	2600      	movs	r6, #0
        data_w_parity[bytes] ^= mccLfsrUpdateBit( handle, 0, 0 ) << i;
 8002476:	9b00      	ldr	r3, [sp, #0]
 8002478:	18e4      	adds	r4, r4, r3
    for ( i = 0; i < bits; i++ )
 800247a:	9b02      	ldr	r3, [sp, #8]
 800247c:	42b3      	cmp	r3, r6
 800247e:	dc3f      	bgt.n	8002500 <mccCryptoTranscode+0xa8>
}
 8002480:	b005      	add	sp, #20
 8002482:	bdf0      	pop	{r4, r5, r6, r7, pc}
        data_w_parity[i] ^= mccLfsrUpdateByte( handle, 0, 0 );
 8002484:	2200      	movs	r2, #0
 8002486:	0028      	movs	r0, r5
 8002488:	0011      	movs	r1, r2
 800248a:	f7ff ff61 	bl	8002350 <mccLfsrUpdateByte>
        data_w_parity[i] ^= (FILTER(handle->lfsr_odd) << 0x08);
 800248e:	686a      	ldr	r2, [r5, #4]
 8002490:	4b21      	ldr	r3, [pc, #132]	@ (8002518 <mccCryptoTranscode+0xc0>)
 8002492:	0911      	lsrs	r1, r2, #4
 8002494:	4039      	ands	r1, r7
 8002496:	410b      	asrs	r3, r1
 8002498:	2108      	movs	r1, #8
 800249a:	400b      	ands	r3, r1
 800249c:	0a11      	lsrs	r1, r2, #8
 800249e:	4039      	ands	r1, r7
 80024a0:	468c      	mov	ip, r1
        data_w_parity[i] ^= mccLfsrUpdateByte( handle, 0, 0 );
 80024a2:	9003      	str	r0, [sp, #12]
        data_w_parity[i] ^= (FILTER(handle->lfsr_odd) << 0x08);
 80024a4:	4660      	mov	r0, ip
 80024a6:	491d      	ldr	r1, [pc, #116]	@ (800251c <mccCryptoTranscode+0xc4>)
 80024a8:	4101      	asrs	r1, r0
 80024aa:	2004      	movs	r0, #4
 80024ac:	4001      	ands	r1, r0
 80024ae:	430b      	orrs	r3, r1
 80024b0:	0011      	movs	r1, r2
 80024b2:	4039      	ands	r1, r7
 80024b4:	468c      	mov	ip, r1
 80024b6:	4660      	mov	r0, ip
 80024b8:	4919      	ldr	r1, [pc, #100]	@ (8002520 <mccCryptoTranscode+0xc8>)
 80024ba:	4101      	asrs	r1, r0
 80024bc:	2010      	movs	r0, #16
 80024be:	4001      	ands	r1, r0
 80024c0:	430b      	orrs	r3, r1
 80024c2:	0b11      	lsrs	r1, r2, #12
 80024c4:	4039      	ands	r1, r7
 80024c6:	468c      	mov	ip, r1
 80024c8:	4660      	mov	r0, ip
 80024ca:	4916      	ldr	r1, [pc, #88]	@ (8002524 <mccCryptoTranscode+0xcc>)
 80024cc:	0c12      	lsrs	r2, r2, #16
 80024ce:	4101      	asrs	r1, r0
 80024d0:	2002      	movs	r0, #2
 80024d2:	4001      	ands	r1, r0
 80024d4:	430b      	orrs	r3, r1
 80024d6:	4914      	ldr	r1, [pc, #80]	@ (8002528 <mccCryptoTranscode+0xd0>)
 80024d8:	403a      	ands	r2, r7
 80024da:	4111      	asrs	r1, r2
 80024dc:	000a      	movs	r2, r1
 80024de:	2101      	movs	r1, #1
 80024e0:	400a      	ands	r2, r1
 80024e2:	431a      	orrs	r2, r3
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <mccCryptoTranscode+0xd4>)
 80024e6:	4684      	mov	ip, r0
 80024e8:	40d3      	lsrs	r3, r2
 80024ea:	2280      	movs	r2, #128	@ 0x80
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	0052      	lsls	r2, r2, #1
 80024f0:	4013      	ands	r3, r2
 80024f2:	8832      	ldrh	r2, [r6, #0]
 80024f4:	9803      	ldr	r0, [sp, #12]
 80024f6:	4053      	eors	r3, r2
 80024f8:	4058      	eors	r0, r3
 80024fa:	8030      	strh	r0, [r6, #0]
    for ( i=0; i < bytes; i++ )
 80024fc:	4466      	add	r6, ip
 80024fe:	e7b6      	b.n	800246e <mccCryptoTranscode+0x16>
        data_w_parity[bytes] ^= mccLfsrUpdateBit( handle, 0, 0 ) << i;
 8002500:	2200      	movs	r2, #0
 8002502:	0028      	movs	r0, r5
 8002504:	0011      	movs	r1, r2
 8002506:	f7ff fed5 	bl	80022b4 <mccLfsrUpdateBit>
 800250a:	0003      	movs	r3, r0
 800250c:	40b3      	lsls	r3, r6
 800250e:	8820      	ldrh	r0, [r4, #0]
    for ( i = 0; i < bits; i++ )
 8002510:	3601      	adds	r6, #1
        data_w_parity[bytes] ^= mccLfsrUpdateBit( handle, 0, 0 ) << i;
 8002512:	4058      	eors	r0, r3
 8002514:	8020      	strh	r0, [r4, #0]
    for ( i = 0; i < bits; i++ )
 8002516:	e7b0      	b.n	800247a <mccCryptoTranscode+0x22>
 8002518:	0006c9c0 	.word	0x0006c9c0
 800251c:	0003c8b0 	.word	0x0003c8b0
 8002520:	000f22c0 	.word	0x000f22c0
 8002524:	0001e458 	.word	0x0001e458
 8002528:	0000d938 	.word	0x0000d938
 800252c:	ec57e80a 	.word	0xec57e80a

08002530 <mccCryptoIsActive>:
    return handle->is_active;
 8002530:	7880      	ldrb	r0, [r0, #2]
}
 8002532:	4770      	bx	lr

08002534 <mccCryptoSetActive>:
    handle->is_active = value;
 8002534:	7081      	strb	r1, [r0, #2]
}
 8002536:	4770      	bx	lr

08002538 <mccCryptoAuthReaderStep1>:
 ******************************************************************************
 */

void mccCryptoAuthReaderStep1 ( CryptoHandle_t *handle, uint32_t uid, uint32_t nonce )
{
    if ( handle->is_active != 0 )
 8002538:	7883      	ldrb	r3, [r0, #2]
{
 800253a:	b510      	push	{r4, lr}
    if ( handle->is_active != 0 )
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <mccCryptoAuthReaderStep1+0xe>
    {
        mccCryptoAuthReinit( handle, uid, nonce );
 8002540:	f7ff ff7f 	bl	8002442 <mccCryptoAuthReinit>
    }
    else
    {
        mccCryptoAuthInit( handle, uid, nonce );
    }
}
 8002544:	bd10      	pop	{r4, pc}
        mccCryptoAuthInit( handle, uid, nonce );
 8002546:	f7ff ff75 	bl	8002434 <mccCryptoAuthInit>
}
 800254a:	e7fb      	b.n	8002544 <mccCryptoAuthReaderStep1+0xc>

0800254c <mccCryptoAuthReaderStep2>:

int mccCryptoAuthReaderStep2 ( CryptoHandle_t *handle, uint16_t challenge[4], uint16_t response[4] )
{
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	b085      	sub	sp, #20
 8002550:	9002      	str	r0, [sp, #8]
    uint32_t nonce = TO_uint32_t( challenge );
 8002552:	20ff      	movs	r0, #255	@ 0xff
 8002554:	000d      	movs	r5, r1
 8002556:	2618      	movs	r6, #24
#endif // DEBUG_LFSR

    for ( i = 3; i >= 0; i-- )
    {
        challenge[3-i] ^= mccLfsrUpdateByte( handle, (nonce >> (i*8)) & 0xFF, 0 );
        challenge[3-i] ^= FILTER( handle->lfsr_odd) << 0x08;
 8002558:	240f      	movs	r4, #15
    uint32_t nonce = TO_uint32_t( challenge );
 800255a:	880b      	ldrh	r3, [r1, #0]
{
 800255c:	9201      	str	r2, [sp, #4]
    uint32_t nonce = TO_uint32_t( challenge );
 800255e:	798a      	ldrb	r2, [r1, #6]
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	431a      	orrs	r2, r3
 8002564:	888b      	ldrh	r3, [r1, #4]
 8002566:	0400      	lsls	r0, r0, #16
 8002568:	061b      	lsls	r3, r3, #24
 800256a:	0c1b      	lsrs	r3, r3, #16
 800256c:	431a      	orrs	r2, r3
 800256e:	884b      	ldrh	r3, [r1, #2]
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	4003      	ands	r3, r0
 8002574:	431a      	orrs	r2, r3
 8002576:	9203      	str	r2, [sp, #12]
        challenge[3-i] ^= mccLfsrUpdateByte( handle, (nonce >> (i*8)) & 0xFF, 0 );
 8002578:	9903      	ldr	r1, [sp, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	40f1      	lsrs	r1, r6
 800257e:	9802      	ldr	r0, [sp, #8]
 8002580:	b2c9      	uxtb	r1, r1
 8002582:	f7ff fee5 	bl	8002350 <mccLfsrUpdateByte>
        challenge[3-i] ^= FILTER( handle->lfsr_odd) << 0x08;
 8002586:	9b02      	ldr	r3, [sp, #8]
    for ( i = 3; i >= 0; i-- )
 8002588:	3e08      	subs	r6, #8
        challenge[3-i] ^= FILTER( handle->lfsr_odd) << 0x08;
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <mccCryptoAuthReaderStep2+0x108>)
 800258e:	0911      	lsrs	r1, r2, #4
 8002590:	4021      	ands	r1, r4
 8002592:	410b      	asrs	r3, r1
 8002594:	2108      	movs	r1, #8
 8002596:	0a17      	lsrs	r7, r2, #8
 8002598:	400b      	ands	r3, r1
 800259a:	492f      	ldr	r1, [pc, #188]	@ (8002658 <mccCryptoAuthReaderStep2+0x10c>)
 800259c:	4027      	ands	r7, r4
 800259e:	4139      	asrs	r1, r7
 80025a0:	2704      	movs	r7, #4
 80025a2:	4039      	ands	r1, r7
 80025a4:	0017      	movs	r7, r2
 80025a6:	430b      	orrs	r3, r1
 80025a8:	492c      	ldr	r1, [pc, #176]	@ (800265c <mccCryptoAuthReaderStep2+0x110>)
 80025aa:	4027      	ands	r7, r4
 80025ac:	4139      	asrs	r1, r7
 80025ae:	2710      	movs	r7, #16
 80025b0:	4039      	ands	r1, r7
 80025b2:	430b      	orrs	r3, r1
 80025b4:	0b17      	lsrs	r7, r2, #12
 80025b6:	492a      	ldr	r1, [pc, #168]	@ (8002660 <mccCryptoAuthReaderStep2+0x114>)
 80025b8:	4027      	ands	r7, r4
 80025ba:	4139      	asrs	r1, r7
 80025bc:	2702      	movs	r7, #2
 80025be:	4039      	ands	r1, r7
 80025c0:	430b      	orrs	r3, r1
 80025c2:	0c12      	lsrs	r2, r2, #16
 80025c4:	4927      	ldr	r1, [pc, #156]	@ (8002664 <mccCryptoAuthReaderStep2+0x118>)
 80025c6:	4022      	ands	r2, r4
 80025c8:	4111      	asrs	r1, r2
 80025ca:	000a      	movs	r2, r1
 80025cc:	3f01      	subs	r7, #1
 80025ce:	403a      	ands	r2, r7
 80025d0:	431a      	orrs	r2, r3
 80025d2:	4b25      	ldr	r3, [pc, #148]	@ (8002668 <mccCryptoAuthReaderStep2+0x11c>)
 80025d4:	40d3      	lsrs	r3, r2
 80025d6:	2280      	movs	r2, #128	@ 0x80
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	0052      	lsls	r2, r2, #1
 80025dc:	4013      	ands	r3, r2
 80025de:	4058      	eors	r0, r3
 80025e0:	882b      	ldrh	r3, [r5, #0]
 80025e2:	4058      	eors	r0, r3
    for ( i = 3; i >= 0; i-- )
 80025e4:	0033      	movs	r3, r6
        challenge[3-i] ^= FILTER( handle->lfsr_odd) << 0x08;
 80025e6:	8028      	strh	r0, [r5, #0]
    for ( i = 3; i >= 0; i-- )
 80025e8:	3502      	adds	r5, #2
 80025ea:	3308      	adds	r3, #8
 80025ec:	d1c4      	bne.n	8002578 <mccCryptoAuthReaderStep2+0x2c>
                                  (uint16_t)(handle->lfsr_lfsr >> 16),
                                  (uint16_t)(handle->lfsr_lfsr >> 0)
                                );
#endif // DEBUG_LFSR

    readerResponse = mccPrng( handle, 64 );
 80025ee:	2140      	movs	r1, #64	@ 0x40
 80025f0:	9802      	ldr	r0, [sp, #8]
 80025f2:	f7ff fedb 	bl	80023ac <mccPrng>

    // Reuse response to send data, add it after the response from the tag
    uint32_t_TO_ARRAY_PARITY( readerResponse, response );
 80025f6:	26ff      	movs	r6, #255	@ 0xff
 80025f8:	0005      	movs	r5, r0
 80025fa:	4035      	ands	r5, r6
    readerResponse = mccPrng( handle, 64 );
 80025fc:	0004      	movs	r4, r0
    uint32_t_TO_ARRAY_PARITY( readerResponse, response );
 80025fe:	0028      	movs	r0, r5
 8002600:	f000 f883 	bl	800270a <mccParityOdd>
 8002604:	9b01      	ldr	r3, [sp, #4]
 8002606:	0200      	lsls	r0, r0, #8
 8002608:	4305      	orrs	r5, r0
 800260a:	80dd      	strh	r5, [r3, #6]
 800260c:	0a25      	lsrs	r5, r4, #8
 800260e:	4035      	ands	r5, r6
 8002610:	0028      	movs	r0, r5
 8002612:	f000 f87a 	bl	800270a <mccParityOdd>
 8002616:	9b01      	ldr	r3, [sp, #4]
 8002618:	0200      	lsls	r0, r0, #8
 800261a:	4305      	orrs	r5, r0
 800261c:	809d      	strh	r5, [r3, #4]
 800261e:	0c25      	lsrs	r5, r4, #16
 8002620:	4035      	ands	r5, r6
 8002622:	0028      	movs	r0, r5
 8002624:	f000 f871 	bl	800270a <mccParityOdd>
 8002628:	9b01      	ldr	r3, [sp, #4]
 800262a:	0200      	lsls	r0, r0, #8
 800262c:	4305      	orrs	r5, r0
 800262e:	0e24      	lsrs	r4, r4, #24
 8002630:	805d      	strh	r5, [r3, #2]
 8002632:	0020      	movs	r0, r4
 8002634:	f000 f869 	bl	800270a <mccParityOdd>
 8002638:	9b01      	ldr	r3, [sp, #4]
 800263a:	0200      	lsls	r0, r0, #8
 800263c:	4320      	orrs	r0, r4
 800263e:	8018      	strh	r0, [r3, #0]

    mccCryptoTranscode( handle, response, 4, 0 );
 8002640:	2204      	movs	r2, #4
 8002642:	9802      	ldr	r0, [sp, #8]
 8002644:	2300      	movs	r3, #0
 8002646:	9901      	ldr	r1, [sp, #4]
 8002648:	f7ff ff06 	bl	8002458 <mccCryptoTranscode>

    return 1;
}
 800264c:	0038      	movs	r0, r7
 800264e:	b005      	add	sp, #20
 8002650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002652:	46c0      	nop			@ (mov r8, r8)
 8002654:	0006c9c0 	.word	0x0006c9c0
 8002658:	0003c8b0 	.word	0x0003c8b0
 800265c:	000f22c0 	.word	0x000f22c0
 8002660:	0001e458 	.word	0x0001e458
 8002664:	0000d938 	.word	0x0000d938
 8002668:	ec57e80a 	.word	0xec57e80a

0800266c <mccCryptoAuthReaderStep3>:

int mccCryptoAuthReaderStep3 ( CryptoHandle_t *handle, uint16_t response[4] )
{
    uint32_t tag_response = TO_uint32_t( response );
 800266c:	22ff      	movs	r2, #255	@ 0xff
 800266e:	880b      	ldrh	r3, [r1, #0]
{
 8002670:	b570      	push	{r4, r5, r6, lr}
    uint32_t tag_response = TO_uint32_t( response );
 8002672:	798d      	ldrb	r5, [r1, #6]
 8002674:	061b      	lsls	r3, r3, #24
 8002676:	431d      	orrs	r5, r3
 8002678:	888b      	ldrh	r3, [r1, #4]
 800267a:	0412      	lsls	r2, r2, #16
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	0c1b      	lsrs	r3, r3, #16
 8002680:	431d      	orrs	r5, r3
 8002682:	884b      	ldrh	r3, [r1, #2]
    uint32_t expected_response;
    int rv = 0;

    MCC_DBG("D: PRNG: 0x%x\n", handle->prng);

    expected_response = mccPrng( handle, 96 ) ^ mccLfsrUpdate( handle, 0, 0 );
 8002684:	2160      	movs	r1, #96	@ 0x60
    uint32_t tag_response = TO_uint32_t( response );
 8002686:	041b      	lsls	r3, r3, #16
 8002688:	4013      	ands	r3, r2
 800268a:	431d      	orrs	r5, r3
{
 800268c:	0006      	movs	r6, r0
    expected_response = mccPrng( handle, 96 ) ^ mccLfsrUpdate( handle, 0, 0 );
 800268e:	f7ff fe8d 	bl	80023ac <mccPrng>
 8002692:	2200      	movs	r2, #0
 8002694:	0004      	movs	r4, r0
 8002696:	0011      	movs	r1, r2
 8002698:	0030      	movs	r0, r6
 800269a:	f7ff fe6f 	bl	800237c <mccLfsrUpdate>
 800269e:	4060      	eors	r0, r4
#endif // DEBUG_LFSR

    MCC_DBG("D: response: tag = 0x%x%x\n", (uint16_t)(tag_response >> 16), (uint16_t)tag_response);
    MCC_DBG("D: response: exp = 0x%x%x\n", (uint16_t)(expected_response >> 16), (uint16_t)expected_response);

    if ( tag_response == expected_response )
 80026a0:	1b40      	subs	r0, r0, r5
 80026a2:	4243      	negs	r3, r0
 80026a4:	4158      	adcs	r0, r3
    {
        rv = 1;
    }
    
    return rv;
}
 80026a6:	bd70      	pop	{r4, r5, r6, pc}

080026a8 <mccReverse>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

uint32_t mccReverse ( register uint32_t x )
{
 80026a8:	0003      	movs	r3, r0
    x = (((x & 0xaaaaaaaa) >> 1) | ((x & 0x55555555) << 1)); // Swap odd, even
 80026aa:	4a0b      	ldr	r2, [pc, #44]	@ (80026d8 <mccReverse+0x30>)
 80026ac:	0840      	lsrs	r0, r0, #1
 80026ae:	4010      	ands	r0, r2
 80026b0:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <mccReverse+0x34>)
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	4318      	orrs	r0, r3
    x = (((x & 0xcccccccc) >> 2) | ((x & 0x33333333) << 2)); // 2 bits change, nibble is reversed
 80026b8:	4a09      	ldr	r2, [pc, #36]	@ (80026e0 <mccReverse+0x38>)
 80026ba:	0883      	lsrs	r3, r0, #2
 80026bc:	4013      	ands	r3, r2
 80026be:	4a09      	ldr	r2, [pc, #36]	@ (80026e4 <mccReverse+0x3c>)
 80026c0:	0080      	lsls	r0, r0, #2
 80026c2:	4010      	ands	r0, r2
 80026c4:	4303      	orrs	r3, r0
    x = (((x & 0xf0f0f0f0) >> 4) | ((x & 0x0f0f0f0f) << 4)); // swap 4 bits and get desired result
 80026c6:	4a08      	ldr	r2, [pc, #32]	@ (80026e8 <mccReverse+0x40>)
 80026c8:	0918      	lsrs	r0, r3, #4
 80026ca:	4010      	ands	r0, r2
 80026cc:	4a07      	ldr	r2, [pc, #28]	@ (80026ec <mccReverse+0x44>)
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4013      	ands	r3, r2
 80026d2:	4318      	orrs	r0, r3
    return x;
}
 80026d4:	4770      	bx	lr
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	55555555 	.word	0x55555555
 80026dc:	aaaaaaaa 	.word	0xaaaaaaaa
 80026e0:	33333333 	.word	0x33333333
 80026e4:	cccccccc 	.word	0xcccccccc
 80026e8:	0f0f0f0f 	.word	0x0f0f0f0f
 80026ec:	f0f0f0f0 	.word	0xf0f0f0f0

080026f0 <mccParityEven>:

uint32_t mccParityEven ( uint32_t val )
{
    val ^= val >> 16;
 80026f0:	0c03      	lsrs	r3, r0, #16
 80026f2:	4058      	eors	r0, r3
    val ^= val >>  8;
 80026f4:	0a03      	lsrs	r3, r0, #8
 80026f6:	4043      	eors	r3, r0
    val ^= val >>  4;
 80026f8:	0918      	lsrs	r0, r3, #4
 80026fa:	4058      	eors	r0, r3
    val ^= val >>  2;
 80026fc:	0883      	lsrs	r3, r0, #2
 80026fe:	4043      	eors	r3, r0
    return (val ^ (val>>1)) & 1;
 8002700:	0858      	lsrs	r0, r3, #1
 8002702:	4058      	eors	r0, r3
 8002704:	2301      	movs	r3, #1
 8002706:	4018      	ands	r0, r3
}
 8002708:	4770      	bx	lr

0800270a <mccParityOdd>:

uint32_t mccParityOdd ( uint32_t val )
{
    val ^= val >> 16;
 800270a:	0c03      	lsrs	r3, r0, #16
 800270c:	4043      	eors	r3, r0
    val ^= val >>  8;
 800270e:	0a18      	lsrs	r0, r3, #8
 8002710:	4058      	eors	r0, r3
    val ^= val >>  4;
 8002712:	0903      	lsrs	r3, r0, #4
 8002714:	4043      	eors	r3, r0
    val ^= val >>  2;
 8002716:	0898      	lsrs	r0, r3, #2
 8002718:	4058      	eors	r0, r3
    return (~(val ^ (val>>1))&1);
 800271a:	0843      	lsrs	r3, r0, #1
 800271c:	4043      	eors	r3, r0
 800271e:	2001      	movs	r0, #1
 8002720:	4398      	bics	r0, r3
}
 8002722:	4770      	bx	lr

08002724 <mccSendRawRequest>:
                           uint8_t *response,
                           uint16_t maxResponseLength,
                           uint16_t *responseLength,
                           uint16_t timeout,
                           uint8_t fourBitResponse )
{
 8002724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002726:	b08f      	sub	sp, #60	@ 0x3c
 8002728:	9303      	str	r3, [sp, #12]
 800272a:	ab14      	add	r3, sp, #80	@ 0x50
 800272c:	9202      	str	r2, [sp, #8]
 800272e:	cb04      	ldmia	r3!, {r2}
*/
static uint16_t mccCopyToRawBuffer ( uint16_t *message, uint16_t length )
{
    int i, bytepos = 0;
    int bitpos = 0;
    memset(mccRawBuffer,0,sizeof(mccRawBuffer));
 8002730:	4c48      	ldr	r4, [pc, #288]	@ (8002854 <mccSendRawRequest+0x130>)
{
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	9004      	str	r0, [sp, #16]
 8002736:	9101      	str	r1, [sp, #4]
 8002738:	9200      	str	r2, [sp, #0]
    memset(mccRawBuffer,0,sizeof(mccRawBuffer));
 800273a:	2100      	movs	r1, #0
 800273c:	2248      	movs	r2, #72	@ 0x48
 800273e:	0020      	movs	r0, r4
{
 8002740:	9305      	str	r3, [sp, #20]
    memset(mccRawBuffer,0,sizeof(mccRawBuffer));
 8002742:	f010 fdb7 	bl	80132b4 <memset>
    int bitpos = 0;
 8002746:	2200      	movs	r2, #0


    for (i = 0; i < length; i++)
    {
        uint16_t m = message[i];
        mccRawBuffer[bytepos] |= (m & ((1<<(8 - bitpos))-1)) << bitpos;
 8002748:	2301      	movs	r3, #1
    int i, bytepos = 0;
 800274a:	0011      	movs	r1, r2
    for (i = 0; i < length; i++)
 800274c:	0010      	movs	r0, r2
        mccRawBuffer[bytepos] |= (m & ((1<<(8 - bitpos))-1)) << bitpos;
 800274e:	469c      	mov	ip, r3
    for (i = 0; i < length; i++)
 8002750:	9b01      	ldr	r3, [sp, #4]
 8002752:	4298      	cmp	r0, r3
 8002754:	db40      	blt.n	80027d8 <mccSendRawRequest+0xb4>
    for ( i= 0; i< ((length*9)+7)/8;i++)
    {
        MCC_DBG("%hhx,",mccRawBuffer[i]);
    }
    MCC_DBG("\n");
    return length*9;
 8002756:	2309      	movs	r3, #9
 8002758:	9a01      	ldr	r2, [sp, #4]
    ctx.txBuf = mccRawBuffer;
 800275a:	4d3e      	ldr	r5, [pc, #248]	@ (8002854 <mccSendRawRequest+0x130>)
    return length*9;
 800275c:	4353      	muls	r3, r2
    ctx.txBufLen = len_bits;
 800275e:	aa06      	add	r2, sp, #24
 8002760:	8113      	strh	r3, [r2, #8]
    ctx.rxBufLen = sizeof(mccRawBuffer) * 8;
 8002762:	2390      	movs	r3, #144	@ 0x90
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	8213      	strh	r3, [r2, #16]
    ctx.rxRcvdLen = responseLength;
 8002768:	9b00      	ldr	r3, [sp, #0]
    ctx.fwt = rfalConvMsTo1fc(timeout);
 800276a:	9a05      	ldr	r2, [sp, #20]
    ctx.rxRcvdLen = responseLength;
 800276c:	930b      	str	r3, [sp, #44]	@ 0x2c
    ctx.flags = RFAL_TXRX_FLAGS_CRC_TX_MANUAL |RFAL_TXRX_FLAGS_CRC_RX_KEEP | RFAL_TXRX_FLAGS_NFCIP1_OFF | RFAL_TXRX_FLAGS_AGC_ON | RFAL_TXRX_FLAGS_PAR_RX_KEEP | RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800276e:	2333      	movs	r3, #51	@ 0x33
 8002770:	930c      	str	r3, [sp, #48]	@ 0x30
    ctx.fwt = rfalConvMsTo1fc(timeout);
 8002772:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <mccSendRawRequest+0x134>)
    err = rfalStartTransceive( &ctx );
 8002774:	a807      	add	r0, sp, #28
    ctx.fwt = rfalConvMsTo1fc(timeout);
 8002776:	4353      	muls	r3, r2
    ctx.txBuf = mccRawBuffer;
 8002778:	9507      	str	r5, [sp, #28]
    ctx.rxBuf = mccRawBuffer;
 800277a:	9509      	str	r5, [sp, #36]	@ 0x24
    ctx.fwt = rfalConvMsTo1fc(timeout);
 800277c:	930d      	str	r3, [sp, #52]	@ 0x34
    err = rfalStartTransceive( &ctx );
 800277e:	f001 ff35 	bl	80045ec <rfalStartTransceive>
 8002782:	0004      	movs	r4, r0
        rfalWorker();
 8002784:	f002 fb9a 	bl	8004ebc <rfalWorker>
    while((ret = rfalGetTransceiveStatus() ) == ERR_BUSY);
 8002788:	f002 f810 	bl	80047ac <rfalGetTransceiveStatus>
 800278c:	2802      	cmp	r0, #2
 800278e:	d0f9      	beq.n	8002784 <mccSendRawRequest+0x60>
    if (ret >= ERR_INCOMPLETE_BYTE && ret <= ERR_INCOMPLETE_BYTE_07)
 8002790:	3828      	subs	r0, #40	@ 0x28
 8002792:	b280      	uxth	r0, r0
 8002794:	2807      	cmp	r0, #7
 8002796:	d800      	bhi.n	800279a <mccSendRawRequest+0x76>
 8002798:	2400      	movs	r4, #0
 800279a:	b263      	sxtb	r3, r4
 800279c:	9301      	str	r3, [sp, #4]
    if ((*responseLength / 9) > maxResponseLength)
 800279e:	9b00      	ldr	r3, [sp, #0]
 80027a0:	2109      	movs	r1, #9
 80027a2:	8818      	ldrh	r0, [r3, #0]
 80027a4:	f7fd fce0 	bl	8000168 <__udivsi3>
 80027a8:	9b03      	ldr	r3, [sp, #12]
 80027aa:	b280      	uxth	r0, r0
 80027ac:	4298      	cmp	r0, r3
 80027ae:	d906      	bls.n	80027be <mccSendRawRequest+0x9a>
        *responseLength = maxResponseLength * 9;
 80027b0:	2309      	movs	r3, #9
 80027b2:	9a03      	ldr	r2, [sp, #12]
 80027b4:	4353      	muls	r3, r2
 80027b6:	9a00      	ldr	r2, [sp, #0]
 80027b8:	8013      	strh	r3, [r2, #0]
        err = ERR_NOMEM; /* This will drop an existing CRC */
 80027ba:	2301      	movs	r3, #1
 80027bc:	9301      	str	r3, [sp, #4]
    *responseLength = mccExtractMessage(response, *responseLength);
 80027be:	9b00      	ldr	r3, [sp, #0]
 80027c0:	8818      	ldrh	r0, [r3, #0]
    int bitpos = 0;
	  MCC_DBG("extracting (%d bytes)", bytes);
    MCC_DUMP(mccRawBuffer,bytes);
    if (responseLength_bits<=8)
    {
        response[0] = mccRawBuffer[0];
 80027c2:	782b      	ldrb	r3, [r5, #0]
    if (responseLength_bits<=8)
 80027c4:	2808      	cmp	r0, #8
 80027c6:	d822      	bhi.n	800280e <mccSendRawRequest+0xea>
        return 1;
 80027c8:	2001      	movs	r0, #1
        response[0] = mccRawBuffer[0];
 80027ca:	9a02      	ldr	r2, [sp, #8]
 80027cc:	7013      	strb	r3, [r2, #0]
    *responseLength = mccExtractMessage(response, *responseLength);
 80027ce:	9b00      	ldr	r3, [sp, #0]
 80027d0:	8018      	strh	r0, [r3, #0]
}
 80027d2:	9801      	ldr	r0, [sp, #4]
 80027d4:	b00f      	add	sp, #60	@ 0x3c
 80027d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mccRawBuffer[bytepos] |= (m & ((1<<(8 - bitpos))-1)) << bitpos;
 80027d8:	9d04      	ldr	r5, [sp, #16]
        uint16_t m = message[i];
 80027da:	0043      	lsls	r3, r0, #1
        mccRawBuffer[bytepos] |= (m & ((1<<(8 - bitpos))-1)) << bitpos;
 80027dc:	5aed      	ldrh	r5, [r5, r3]
 80027de:	2308      	movs	r3, #8
 80027e0:	1a9e      	subs	r6, r3, r2
 80027e2:	4663      	mov	r3, ip
 80027e4:	40b3      	lsls	r3, r6
 80027e6:	3b01      	subs	r3, #1
 80027e8:	402b      	ands	r3, r5
 80027ea:	4093      	lsls	r3, r2
        mccRawBuffer[bytepos] |= (m >> (8-bitpos));
 80027ec:	4135      	asrs	r5, r6
        mccRawBuffer[bytepos] |= (m & ((1<<(8 - bitpos))-1)) << bitpos;
 80027ee:	5c67      	ldrb	r7, [r4, r1]
 80027f0:	433b      	orrs	r3, r7
 80027f2:	5463      	strb	r3, [r4, r1]
        bytepos++;
 80027f4:	1c4b      	adds	r3, r1, #1
        mccRawBuffer[bytepos] |= (m >> (8-bitpos));
 80027f6:	5ce6      	ldrb	r6, [r4, r3]
 80027f8:	432e      	orrs	r6, r5
        bitpos += 1;
 80027fa:	1c55      	adds	r5, r2, #1
        mccRawBuffer[bytepos] |= (m >> (8-bitpos));
 80027fc:	54e6      	strb	r6, [r4, r3]
        if (bitpos >=8 )
 80027fe:	2d07      	cmp	r5, #7
 8002800:	dd01      	ble.n	8002806 <mccSendRawRequest+0xe2>
            bitpos -= 8;
 8002802:	1fd5      	subs	r5, r2, #7
            bytepos++;
 8002804:	1c8b      	adds	r3, r1, #2
    for (i = 0; i < length; i++)
 8002806:	002a      	movs	r2, r5
 8002808:	0019      	movs	r1, r3
 800280a:	3001      	adds	r0, #1
 800280c:	e7a0      	b.n	8002750 <mccSendRawRequest+0x2c>
    int bytes = responseLength_bits / 9;
 800280e:	2109      	movs	r1, #9
 8002810:	f7fd fcaa 	bl	8000168 <__udivsi3>
    }
    for (i = 0; i < bytes; i++)
 8002814:	2200      	movs	r2, #0
    int bitpos = 0;
 8002816:	0011      	movs	r1, r2
    int i, bytepos = 0;
 8002818:	0015      	movs	r5, r2
    {
        uint8_t m;
        m = (mccRawBuffer[bytepos] >> bitpos);
        bytepos++;
        m |= (mccRawBuffer[bytepos] << (8-bitpos));
 800281a:	4e0e      	ldr	r6, [pc, #56]	@ (8002854 <mccSendRawRequest+0x130>)
    int bytes = responseLength_bits / 9;
 800281c:	b280      	uxth	r0, r0
        bytepos++;
 800281e:	1c6c      	adds	r4, r5, #1
        m |= (mccRawBuffer[bytepos] << (8-bitpos));
 8002820:	5d33      	ldrb	r3, [r6, r4]
 8002822:	469c      	mov	ip, r3
 8002824:	2308      	movs	r3, #8
 8002826:	4667      	mov	r7, ip
 8002828:	1a5b      	subs	r3, r3, r1
 800282a:	409f      	lsls	r7, r3
 800282c:	003b      	movs	r3, r7
        m = (mccRawBuffer[bytepos] >> bitpos);
 800282e:	5d77      	ldrb	r7, [r6, r5]
 8002830:	410f      	asrs	r7, r1
        m |= (mccRawBuffer[bytepos] << (8-bitpos));
 8002832:	433b      	orrs	r3, r7

        bitpos += 1;
 8002834:	1c4f      	adds	r7, r1, #1
        m |= (mccRawBuffer[bytepos] << (8-bitpos));
 8002836:	b2db      	uxtb	r3, r3
        if (bitpos >=8 )
 8002838:	2f07      	cmp	r7, #7
 800283a:	dd07      	ble.n	800284c <mccSendRawRequest+0x128>
        {
            bitpos -= 8;
 800283c:	3907      	subs	r1, #7
            bytepos++;
 800283e:	3502      	adds	r5, #2
        }

        response[i] = m;
 8002840:	9c02      	ldr	r4, [sp, #8]
 8002842:	54a3      	strb	r3, [r4, r2]
    for (i = 0; i < bytes; i++)
 8002844:	3201      	adds	r2, #1
 8002846:	4290      	cmp	r0, r2
 8002848:	dce9      	bgt.n	800281e <mccSendRawRequest+0xfa>
 800284a:	e7c0      	b.n	80027ce <mccSendRawRequest+0xaa>
        bitpos += 1;
 800284c:	0039      	movs	r1, r7
        bytepos++;
 800284e:	0025      	movs	r5, r4
 8002850:	e7f6      	b.n	8002840 <mccSendRawRequest+0x11c>
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	20000c00 	.word	0x20000c00
 8002858:	000034f8 	.word	0x000034f8

0800285c <mifareUlReadNBytes>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode mifareUlReadNBytes(uint8_t startAddr, uint8_t* readbuf, uint8_t length, uint8_t* actLength)
{
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285e:	001f      	movs	r7, r3
    ReturnCode err;
    uint8_t txbuf[2];
    uint16_t actrxlength;
    uint8_t rxbuf[16];

    *actLength = 0;
 8002860:	2300      	movs	r3, #0
{
 8002862:	b08d      	sub	sp, #52	@ 0x34
 8002864:	0004      	movs	r4, r0
 8002866:	0016      	movs	r6, r2

    if (startAddr > 0xf)
    {
        return RFAL_ERR_PARAM;
 8002868:	2507      	movs	r5, #7
{
 800286a:	9105      	str	r1, [sp, #20]
    *actLength = 0;
 800286c:	703b      	strb	r3, [r7, #0]
    if (startAddr > 0xf)
 800286e:	280f      	cmp	r0, #15
 8002870:	d831      	bhi.n	80028d6 <mifareUlReadNBytes+0x7a>
    }

    txbuf[0] = MIFARE_UL_CMD_READ;
 8002872:	2230      	movs	r2, #48	@ 0x30
 8002874:	ab07      	add	r3, sp, #28
 8002876:	701a      	strb	r2, [r3, #0]

    do
    {
        txbuf[1] = startAddr;

        err = rfalTransceiveBlockingTxRx( (uint8_t*)txbuf, sizeof(txbuf), rxbuf, sizeof(rxbuf), &actrxlength, RFAL_TXRX_FLAGS_DEFAULT, rfalConvMsTo1fc(5) );
 8002878:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <mifareUlReadNBytes+0x84>)
        txbuf[1] = startAddr;
 800287a:	a807      	add	r0, sp, #28
 800287c:	7044      	strb	r4, [r0, #1]
        err = rfalTransceiveBlockingTxRx( (uint8_t*)txbuf, sizeof(txbuf), rxbuf, sizeof(rxbuf), &actrxlength, RFAL_TXRX_FLAGS_DEFAULT, rfalConvMsTo1fc(5) );
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	2300      	movs	r3, #0
 8002882:	aa02      	add	r2, sp, #8
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	3316      	adds	r3, #22
 8002888:	189b      	adds	r3, r3, r2
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	2102      	movs	r1, #2
 800288e:	2310      	movs	r3, #16
 8002890:	aa08      	add	r2, sp, #32
 8002892:	f003 fa59 	bl	8005d48 <rfalTransceiveBlockingTxRx>
 8002896:	1e05      	subs	r5, r0, #0
        if(err != RFAL_ERR_NONE){
 8002898:	d11d      	bne.n	80028d6 <mifareUlReadNBytes+0x7a>
        	return err;
        }
        //EXIT_ON_ERR(err, RFAL_ERR_NONE);

        if (actrxlength != sizeof(rxbuf))
 800289a:	ab02      	add	r3, sp, #8
 800289c:	8adb      	ldrh	r3, [r3, #22]
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d11c      	bne.n	80028dc <mifareUlReadNBytes+0x80>
        {
            /* only NAK received or less than 16 bytes */
            return RFAL_ERR_NOMSG;
        }
        if (actrxlength > length)
 80028a2:	1c33      	adds	r3, r6, #0
 80028a4:	2e10      	cmp	r6, #16
 80028a6:	d200      	bcs.n	80028aa <mifareUlReadNBytes+0x4e>
 80028a8:	2310      	movs	r3, #16
 80028aa:	3b10      	subs	r3, #16
        else
        {
            length -= actrxlength;
        }
        /* copy received bytes to output buffer */
        ST_MEMCPY(readbuf, rxbuf, actrxlength);
 80028ac:	2210      	movs	r2, #16
 80028ae:	9805      	ldr	r0, [sp, #20]
 80028b0:	a908      	add	r1, sp, #32
        if (actrxlength > length)
 80028b2:	b2de      	uxtb	r6, r3
        ST_MEMCPY(readbuf, rxbuf, actrxlength);
 80028b4:	f010 fd32 	bl	801331c <memcpy>
        readbuf += actrxlength;
 80028b8:	9b05      	ldr	r3, [sp, #20]
 80028ba:	3310      	adds	r3, #16
 80028bc:	9305      	str	r3, [sp, #20]
        *actLength += actrxlength;
 80028be:	783b      	ldrb	r3, [r7, #0]
 80028c0:	3310      	adds	r3, #16
 80028c2:	703b      	strb	r3, [r7, #0]

        startAddr += 4;
 80028c4:	1d23      	adds	r3, r4, #4
 80028c6:	b2db      	uxtb	r3, r3
        /* roll back in case we go behind 0xf */
        if (startAddr > 0xf)
        {
            startAddr -= 0x10;
 80028c8:	3c0c      	subs	r4, #12
 80028ca:	b2e4      	uxtb	r4, r4
        if (startAddr > 0xf)
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d800      	bhi.n	80028d2 <mifareUlReadNBytes+0x76>
        startAddr += 4;
 80028d0:	001c      	movs	r4, r3
        }
    } while (length > 0);
 80028d2:	2e00      	cmp	r6, #0
 80028d4:	d1d0      	bne.n	8002878 <mifareUlReadNBytes+0x1c>

    return err;
}
 80028d6:	0028      	movs	r0, r5
 80028d8:	b00d      	add	sp, #52	@ 0x34
 80028da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return RFAL_ERR_NOMSG;
 80028dc:	2506      	movs	r5, #6
 80028de:	e7fa      	b.n	80028d6 <mifareUlReadNBytes+0x7a>
 80028e0:	000108d8 	.word	0x000108d8

080028e4 <HAL_TIM_PeriodElapsedCallback>:
extern uint8_t spice_led_ready;
Machine Reader;
uint8_t mode_probe_flag[2] = {0,0};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM17) {
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <HAL_TIM_PeriodElapsedCallback+0x18>)
 80028e6:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80028e8:	b510      	push	{r4, lr}
    if (htim->Instance == TIM17) {
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d105      	bne.n	80028fa <HAL_TIM_PeriodElapsedCallback+0x16>
    	if(Reader.Current_Mode == MODE_SPICE_API){
 80028ee:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_PeriodElapsedCallback+0x16>
    		spice_request();
 80028f6:	f000 ff37 	bl	8003768 <spice_request>
    		return;
    	}
    }
}
 80028fa:	bd10      	pop	{r4, pc}
 80028fc:	40014800 	.word	0x40014800
 8002900:	20000c4a 	.word	0x20000c4a

08002904 <Mode_Poll>:

void Mode_Poll(){
 8002904:	b570      	push	{r4, r5, r6, lr}
	if(Reader.Current_Mode != MODE_IDLE){
 8002906:	4c0c      	ldr	r4, [pc, #48]	@ (8002938 <Mode_Poll+0x34>)
		return;
	}
	if(Reader.Current_Interface == INTERFACE_NONE){
 8002908:	7823      	ldrb	r3, [r4, #0]
 800290a:	7862      	ldrb	r2, [r4, #1]
 800290c:	4313      	orrs	r3, r2
 800290e:	d105      	bne.n	800291c <Mode_Poll+0x18>
		switch(mode_probe_flag[0]){
 8002910:	4d0a      	ldr	r5, [pc, #40]	@ (800293c <Mode_Poll+0x38>)
 8002912:	782b      	ldrb	r3, [r5, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <Mode_Poll+0x1a>
 8002918:	2b01      	cmp	r3, #1
 800291a:	d005      	beq.n	8002928 <Mode_Poll+0x24>
				mode_probe_flag[0] = 0;
			}
		}
	}

}
 800291c:	bd70      	pop	{r4, r5, r6, pc}
				Reader.Current_Interface = INTERFACE_CDC;
 800291e:	2601      	movs	r6, #1
 8002920:	7066      	strb	r6, [r4, #1]
				spice_request();
 8002922:	f000 ff21 	bl	8003768 <spice_request>
				mode_probe_flag[0] = 1;
 8002926:	702e      	strb	r6, [r5, #0]
				Reader.Current_Interface = INTERFACE_UART;
 8002928:	2302      	movs	r3, #2
 800292a:	7063      	strb	r3, [r4, #1]
				spice_request();
 800292c:	f000 ff1c 	bl	8003768 <spice_request>
				Reader.Current_Interface = INTERFACE_NONE;
 8002930:	2300      	movs	r3, #0
 8002932:	7063      	strb	r3, [r4, #1]
				mode_probe_flag[0] = 0;
 8002934:	702b      	strb	r3, [r5, #0]
 8002936:	e7f1      	b.n	800291c <Mode_Poll+0x18>
 8002938:	20000c4a 	.word	0x20000c4a
 800293c:	20000c48 	.word	0x20000c48

08002940 <Mode_Detect>:

uint8_t Mode_Detect(uint8_t* data,uint8_t len){
 8002940:	b570      	push	{r4, r5, r6, lr}
 8002942:	0004      	movs	r4, r0
 8002944:	000d      	movs	r5, r1
	uint8_t test;
	test = sega_packet_check(data,len);
 8002946:	f000 fb13 	bl	8002f70 <sega_packet_check>
	if(test){
 800294a:	2800      	cmp	r0, #0
 800294c:	d003      	beq.n	8002956 <Mode_Detect+0x16>
		Sega_Mode_Loop(test);
 800294e:	f000 fd87 	bl	8003460 <Sega_Mode_Loop>
		return MODE_SEGA_SERIAL;
 8002952:	2001      	movs	r0, #1
		//HAL_TIM_Base_Start_IT(&htim17);
		namco_packet_process(test);
		return MODE_SPICE_API;
	}
	return MODE_IDLE;
}
 8002954:	bd70      	pop	{r4, r5, r6, pc}
	test = spice_request_check(data,len);
 8002956:	0029      	movs	r1, r5
 8002958:	0020      	movs	r0, r4
 800295a:	f000 ff0d 	bl	8003778 <spice_request_check>
	if(test){
 800295e:	b2c0      	uxtb	r0, r0
 8002960:	2800      	cmp	r0, #0
 8002962:	d004      	beq.n	800296e <Mode_Detect+0x2e>
		HAL_TIM_Base_Start_IT(&htim17);
 8002964:	4807      	ldr	r0, [pc, #28]	@ (8002984 <Mode_Detect+0x44>)
 8002966:	f006 fd81 	bl	800946c <HAL_TIM_Base_Start_IT>
		return MODE_SPICE_API;
 800296a:	2002      	movs	r0, #2
 800296c:	e7f2      	b.n	8002954 <Mode_Detect+0x14>
	test = namco_packet_check(data,len);
 800296e:	0029      	movs	r1, r5
 8002970:	0020      	movs	r0, r4
 8002972:	f000 f909 	bl	8002b88 <namco_packet_check>
 8002976:	b2c0      	uxtb	r0, r0
	if(test){
 8002978:	2800      	cmp	r0, #0
 800297a:	d0eb      	beq.n	8002954 <Mode_Detect+0x14>
		namco_packet_process(test);
 800297c:	f000 f924 	bl	8002bc8 <namco_packet_process>
		return MODE_SPICE_API;
 8002980:	e7f3      	b.n	800296a <Mode_Detect+0x2a>
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	200010d8 	.word	0x200010d8

08002988 <Reader_UART_Init>:

void Reader_UART_Init(){
	switch (Flash.system_setting && 0b1111){
 8002988:	4b22      	ldr	r3, [pc, #136]	@ (8002a14 <Reader_UART_Init+0x8c>)
void Reader_UART_Init(){
 800298a:	b513      	push	{r0, r1, r4, lr}
	switch (Flash.system_setting && 0b1111){
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4c22      	ldr	r4, [pc, #136]	@ (8002a18 <Reader_UART_Init+0x90>)
 8002990:	2b00      	cmp	r3, #0
 8002992:	d025      	beq.n	80029e0 <Reader_UART_Init+0x58>
		case 0:
			break;
		case 1:{
			__HAL_UART_DISABLE(&huart1);
 8002994:	2101      	movs	r1, #1
 8002996:	6822      	ldr	r2, [r4, #0]
			huart1.Init.BaudRate = 38400;
			if (HAL_UART_Init(&huart1) != HAL_OK){
 8002998:	0020      	movs	r0, r4
			__HAL_UART_DISABLE(&huart1);
 800299a:	6813      	ldr	r3, [r2, #0]
 800299c:	438b      	bics	r3, r1
 800299e:	6013      	str	r3, [r2, #0]
			huart1.Init.BaudRate = 38400;
 80029a0:	2396      	movs	r3, #150	@ 0x96
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	6063      	str	r3, [r4, #4]
			if (HAL_UART_Init(&huart1) != HAL_OK){
 80029a6:	f007 fe77 	bl	800a698 <HAL_UART_Init>
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d001      	beq.n	80029b2 <Reader_UART_Init+0x2a>
				Error_Handler();
 80029ae:	f7ff fae5 	bl	8001f7c <Error_Handler>
			}
			__HAL_UART_ENABLE(&huart1);
 80029b2:	2101      	movs	r1, #1
 80029b4:	6823      	ldr	r3, [r4, #0]
		}
		case 2:{
			__HAL_UART_DISABLE(&huart1);
			huart1.Init.BaudRate = 9600;
			if (HAL_UART_Init(&huart1) != HAL_OK){
 80029b6:	0020      	movs	r0, r4
			__HAL_UART_ENABLE(&huart1);
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
			__HAL_UART_DISABLE(&huart1);
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	438a      	bics	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
			huart1.Init.BaudRate = 9600;
 80029c4:	2396      	movs	r3, #150	@ 0x96
 80029c6:	019b      	lsls	r3, r3, #6
 80029c8:	6063      	str	r3, [r4, #4]
			if (HAL_UART_Init(&huart1) != HAL_OK){
 80029ca:	f007 fe65 	bl	800a698 <HAL_UART_Init>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	d001      	beq.n	80029d6 <Reader_UART_Init+0x4e>
				Error_Handler();
 80029d2:	f7ff fad3 	bl	8001f7c <Error_Handler>
			}
			__HAL_UART_ENABLE(&huart1);
 80029d6:	2301      	movs	r3, #1
 80029d8:	6822      	ldr	r2, [r4, #0]
 80029da:	6811      	ldr	r1, [r2, #0]
 80029dc:	430b      	orrs	r3, r1
 80029de:	6013      	str	r3, [r2, #0]
		}
	}
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80029e0:	2310      	movs	r3, #16
 80029e2:	6822      	ldr	r2, [r4, #0]
	HAL_UART_Receive_DMA(&huart1, Reader.Uart_Buffer_Receive, 256);
 80029e4:	0020      	movs	r0, r4
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80029e6:	6811      	ldr	r1, [r2, #0]
 80029e8:	430b      	orrs	r3, r1
 80029ea:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(&huart1, Reader.Uart_Buffer_Receive, 256);
 80029ec:	2280      	movs	r2, #128	@ 0x80
 80029ee:	490b      	ldr	r1, [pc, #44]	@ (8002a1c <Reader_UART_Init+0x94>)
 80029f0:	0052      	lsls	r2, r2, #1
 80029f2:	f007 fed7 	bl	800a7a4 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80029f6:	2104      	movs	r1, #4
 80029f8:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <Reader_UART_Init+0x98>)

	uint8_t data = 1;
	HAL_UART_Transmit_DMA(&huart1, &data, 1);
 80029fa:	0020      	movs	r0, r4
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	6813      	ldr	r3, [r2, #0]
 8002a00:	438b      	bics	r3, r1
 8002a02:	6013      	str	r3, [r2, #0]
	uint8_t data = 1;
 8002a04:	466b      	mov	r3, sp
 8002a06:	2201      	movs	r2, #1
 8002a08:	1dd9      	adds	r1, r3, #7
 8002a0a:	700a      	strb	r2, [r1, #0]
	HAL_UART_Transmit_DMA(&huart1, &data, 1);
 8002a0c:	f007 f936 	bl	8009c7c <HAL_UART_Transmit_DMA>
}
 8002a10:	bd13      	pop	{r0, r1, r4, pc}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	20000b64 	.word	0x20000b64
 8002a18:	200011f0 	.word	0x200011f0
 8002a1c:	20000c4c 	.word	0x20000c4c
 8002a20:	200011ac 	.word	0x200011ac

08002a24 <Reader_UART_IRQHandler>:

void Reader_UART_IRQHandler(){
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)){
 8002a24:	2210      	movs	r2, #16
void Reader_UART_IRQHandler(){
 8002a26:	b570      	push	{r4, r5, r6, lr}
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)){
 8002a28:	4e24      	ldr	r6, [pc, #144]	@ (8002abc <Reader_UART_IRQHandler+0x98>)
 8002a2a:	6833      	ldr	r3, [r6, #0]
 8002a2c:	69d9      	ldr	r1, [r3, #28]
 8002a2e:	4211      	tst	r1, r2
 8002a30:	d01b      	beq.n	8002a6a <Reader_UART_IRQHandler+0x46>

		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002a32:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 8002a34:	0030      	movs	r0, r6
 8002a36:	f007 f96f 	bl	8009d18 <HAL_UART_DMAStop>
		if(Reader.Current_Interface == INTERFACE_NONE){
 8002a3a:	4c21      	ldr	r4, [pc, #132]	@ (8002ac0 <Reader_UART_IRQHandler+0x9c>)
 8002a3c:	4d21      	ldr	r5, [pc, #132]	@ (8002ac4 <Reader_UART_IRQHandler+0xa0>)
 8002a3e:	7863      	ldrb	r3, [r4, #1]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <Reader_UART_IRQHandler+0x36>
			Reader.Current_Interface = INTERFACE_UART;
 8002a44:	3302      	adds	r3, #2
 8002a46:	7063      	strb	r3, [r4, #1]
		}
		if(Reader.Current_Interface == INTERFACE_UART){
			switch(Reader.Current_Mode){
 8002a48:	7820      	ldrb	r0, [r4, #0]
 8002a4a:	2803      	cmp	r0, #3
 8002a4c:	d815      	bhi.n	8002a7a <Reader_UART_IRQHandler+0x56>
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <Reader_UART_IRQHandler+0xa4>)
					break;
				case MODE_SPICE_API:
					spice_request_check(Reader.Uart_Buffer_Receive,256 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx));
					break;
				case MODE_NAMCO_SERIAL:
					namco_packet_process(namco_packet_check(Reader.Uart_Buffer_Receive,256 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx)));
 8002a50:	681b      	ldr	r3, [r3, #0]
			switch(Reader.Current_Mode){
 8002a52:	f7fd fb6b 	bl	800012c <__gnu_thumb1_case_uqi>
 8002a56:	170b      	.short	0x170b
 8002a58:	2820      	.short	0x2820
		if(Reader.Current_Interface == INTERFACE_UART){
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d0f4      	beq.n	8002a48 <Reader_UART_IRQHandler+0x24>
					break;
			}
			if(Reader.Current_Mode == MODE_IDLE){
				Reader.Current_Interface = INTERFACE_NONE;
			}
			HAL_UART_Receive_DMA(&huart1,Reader.Uart_Buffer_Receive,256);
 8002a5e:	2280      	movs	r2, #128	@ 0x80
 8002a60:	0029      	movs	r1, r5
 8002a62:	0030      	movs	r0, r6
 8002a64:	0052      	lsls	r2, r2, #1
 8002a66:	f007 fe9d 	bl	800a7a4 <HAL_UART_Receive_DMA>
		}else{
			HAL_UART_Receive_DMA(&huart1,Reader.Uart_Buffer_Receive,256);
		}
	}
}
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
					Reader.Current_Mode = Mode_Detect(Reader.Uart_Buffer_Receive,256 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx));
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	0028      	movs	r0, r5
 8002a70:	4249      	negs	r1, r1
 8002a72:	b2c9      	uxtb	r1, r1
 8002a74:	f7ff ff64 	bl	8002940 <Mode_Detect>
 8002a78:	7020      	strb	r0, [r4, #0]
			if(Reader.Current_Mode == MODE_IDLE){
 8002a7a:	7823      	ldrb	r3, [r4, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ee      	bne.n	8002a5e <Reader_UART_IRQHandler+0x3a>
				Reader.Current_Interface = INTERFACE_NONE;
 8002a80:	7063      	strb	r3, [r4, #1]
 8002a82:	e7ec      	b.n	8002a5e <Reader_UART_IRQHandler+0x3a>
					Sega_Mode_Loop(sega_packet_check(Reader.Uart_Buffer_Receive,256 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx)));
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	0028      	movs	r0, r5
 8002a88:	4249      	negs	r1, r1
 8002a8a:	b2c9      	uxtb	r1, r1
 8002a8c:	f000 fa70 	bl	8002f70 <sega_packet_check>
 8002a90:	f000 fce6 	bl	8003460 <Sega_Mode_Loop>
					break;
 8002a94:	e7f1      	b.n	8002a7a <Reader_UART_IRQHandler+0x56>
					spice_request_check(Reader.Uart_Buffer_Receive,256 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx));
 8002a96:	2180      	movs	r1, #128	@ 0x80
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	0049      	lsls	r1, r1, #1
 8002a9c:	0028      	movs	r0, r5
 8002a9e:	1ac9      	subs	r1, r1, r3
 8002aa0:	f000 fe6a 	bl	8003778 <spice_request_check>
					break;
 8002aa4:	e7e9      	b.n	8002a7a <Reader_UART_IRQHandler+0x56>
					namco_packet_process(namco_packet_check(Reader.Uart_Buffer_Receive,256 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx)));
 8002aa6:	2180      	movs	r1, #128	@ 0x80
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	0049      	lsls	r1, r1, #1
 8002aac:	1ac9      	subs	r1, r1, r3
 8002aae:	0028      	movs	r0, r5
 8002ab0:	f000 f86a 	bl	8002b88 <namco_packet_check>
 8002ab4:	f000 f888 	bl	8002bc8 <namco_packet_process>
					break;
 8002ab8:	e7df      	b.n	8002a7a <Reader_UART_IRQHandler+0x56>
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	200011f0 	.word	0x200011f0
 8002ac0:	20000c4a 	.word	0x20000c4a
 8002ac4:	20000c4c 	.word	0x20000c4c
 8002ac8:	200011ac 	.word	0x200011ac

08002acc <Reader_CDC_IRQHandler>:

void Reader_CDC_IRQHandler(uint8_t* data, uint8_t len){
 8002acc:	b510      	push	{r4, lr}
	if(Reader.Current_Interface == MODE_IDLE){
 8002ace:	4c15      	ldr	r4, [pc, #84]	@ (8002b24 <Reader_CDC_IRQHandler+0x58>)
void Reader_CDC_IRQHandler(uint8_t* data, uint8_t len){
 8002ad0:	0003      	movs	r3, r0
	if(Reader.Current_Interface == MODE_IDLE){
 8002ad2:	7862      	ldrb	r2, [r4, #1]
 8002ad4:	2a00      	cmp	r2, #0
 8002ad6:	d108      	bne.n	8002aea <Reader_CDC_IRQHandler+0x1e>
		Reader.Current_Interface = INTERFACE_CDC;
 8002ad8:	3201      	adds	r2, #1
 8002ada:	7062      	strb	r2, [r4, #1]
	}
	if(Reader.Current_Interface == INTERFACE_CDC){
		switch(Reader.Current_Mode){
 8002adc:	7820      	ldrb	r0, [r4, #0]
 8002ade:	2803      	cmp	r0, #3
 8002ae0:	d805      	bhi.n	8002aee <Reader_CDC_IRQHandler+0x22>
 8002ae2:	f7fd fb23 	bl	800012c <__gnu_thumb1_case_uqi>
 8002ae6:	0e09      	.short	0x0e09
 8002ae8:	1814      	.short	0x1814
	if(Reader.Current_Interface == INTERFACE_CDC){
 8002aea:	2a01      	cmp	r2, #1
 8002aec:	d0f6      	beq.n	8002adc <Reader_CDC_IRQHandler+0x10>
				break;
			default:
				break;
		}
	}
	if(Reader.Current_Mode == MODE_IDLE){
 8002aee:	7823      	ldrb	r3, [r4, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d100      	bne.n	8002af6 <Reader_CDC_IRQHandler+0x2a>
		Reader.Current_Interface = INTERFACE_NONE;
 8002af4:	7063      	strb	r3, [r4, #1]
	}
}
 8002af6:	bd10      	pop	{r4, pc}
				Reader.Current_Mode = Mode_Detect(data,len);
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff ff21 	bl	8002940 <Mode_Detect>
 8002afe:	7020      	strb	r0, [r4, #0]
				break;
 8002b00:	e7f5      	b.n	8002aee <Reader_CDC_IRQHandler+0x22>
				Sega_Mode_Loop(sega_packet_check(data,len));
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 fa34 	bl	8002f70 <sega_packet_check>
 8002b08:	f000 fcaa 	bl	8003460 <Sega_Mode_Loop>
				break;
 8002b0c:	e7ef      	b.n	8002aee <Reader_CDC_IRQHandler+0x22>
				spice_request_check(data,len);
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f000 fe32 	bl	8003778 <spice_request_check>
				break;
 8002b14:	e7eb      	b.n	8002aee <Reader_CDC_IRQHandler+0x22>
				namco_packet_process(namco_packet_check(data,len));
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 f836 	bl	8002b88 <namco_packet_check>
 8002b1c:	f000 f854 	bl	8002bc8 <namco_packet_process>
				break;
 8002b20:	e7e5      	b.n	8002aee <Reader_CDC_IRQHandler+0x22>
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	20000c4a 	.word	0x20000c4a

08002b28 <Reader_Uart_SendCommand>:

void Reader_Uart_SendCommand(uint8_t* data, uint8_t len){
 8002b28:	b510      	push	{r4, lr}
	HAL_UART_Transmit_DMA(&huart1, data, len);
 8002b2a:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <Reader_Uart_SendCommand+0x10>)
void Reader_Uart_SendCommand(uint8_t* data, uint8_t len){
 8002b2c:	000a      	movs	r2, r1
	HAL_UART_Transmit_DMA(&huart1, data, len);
 8002b2e:	0001      	movs	r1, r0
 8002b30:	0018      	movs	r0, r3
 8002b32:	f007 f8a3 	bl	8009c7c <HAL_UART_Transmit_DMA>
}
 8002b36:	bd10      	pop	{r4, pc}
 8002b38:	200011f0 	.word	0x200011f0

08002b3c <Reader_CDC_SendCommand>:

void Reader_CDC_SendCommand(uint8_t* data, uint8_t len){
 8002b3c:	b510      	push	{r4, lr}
 8002b3e:	000a      	movs	r2, r1
	if(len == 64 && len == 128){
		len++;
	}
	CDC_Transmit(0, data, len);
 8002b40:	0001      	movs	r1, r0
 8002b42:	2000      	movs	r0, #0
 8002b44:	f00e f976 	bl	8010e34 <CDC_Transmit>
}
 8002b48:	bd10      	pop	{r4, pc}
	...

08002b4c <Interface_Send>:

void Reader_HID_SendReport(uint8_t* data){
	USBD_CUSTOM_HID_SendReport(&hUsbDevice, data, 9);
}

bool Interface_Send(const uint8_t* data ,uint8_t len){
 8002b4c:	b510      	push	{r4, lr}
	switch(Reader.Current_Interface){
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <Interface_Send+0x34>)
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d009      	beq.n	8002b6a <Interface_Send+0x1e>
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d00a      	beq.n	8002b70 <Interface_Send+0x24>
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <Interface_Send+0x1a>
		case INTERFACE_CDC:
			Reader_CDC_SendCommand(data,len);
 8002b60:	f7ff ffec 	bl	8002b3c <Reader_CDC_SendCommand>
			USBD_CUSTOM_HID_SendReport(&hUsbDevice, data, 9);
			break;
		default:
			return false;
	}
	return true;
 8002b64:	2201      	movs	r2, #1
}
 8002b66:	0010      	movs	r0, r2
 8002b68:	bd10      	pop	{r4, pc}
			Reader_Uart_SendCommand(data,len);
 8002b6a:	f7ff ffdd 	bl	8002b28 <Reader_Uart_SendCommand>
			break;
 8002b6e:	e7f9      	b.n	8002b64 <Interface_Send+0x18>
			USBD_CUSTOM_HID_SendReport(&hUsbDevice, data, 9);
 8002b70:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <Interface_Send+0x38>)
 8002b72:	0001      	movs	r1, r0
 8002b74:	2209      	movs	r2, #9
 8002b76:	0018      	movs	r0, r3
 8002b78:	f00e fed4 	bl	8011924 <USBD_CUSTOM_HID_SendReport>
			break;
 8002b7c:	e7f2      	b.n	8002b64 <Interface_Send+0x18>
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	20000c4a 	.word	0x20000c4a
 8002b84:	200026f4 	.word	0x200026f4

08002b88 <namco_packet_check>:
	MIFARE_CMD_READ = 0x30,
	MIFARE_CMD_WRITE = 0xA0,

};

uint8_t namco_packet_check(uint8_t* data,uint8_t len){
 8002b88:	b510      	push	{r4, lr}
 8002b8a:	0004      	movs	r4, r0
	if(data[0] == 0x00 && data[1] == 0x00 && data[2] == 0xff){
 8002b8c:	7803      	ldrb	r3, [r0, #0]
		if(data[3] > len + 7){
			//packet incomplete
			return 0;
 8002b8e:	2000      	movs	r0, #0
uint8_t namco_packet_check(uint8_t* data,uint8_t len){
 8002b90:	000a      	movs	r2, r1
	if(data[0] == 0x00 && data[1] == 0x00 && data[2] == 0xff){
 8002b92:	4283      	cmp	r3, r0
 8002b94:	d112      	bne.n	8002bbc <namco_packet_check+0x34>
 8002b96:	7860      	ldrb	r0, [r4, #1]
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d110      	bne.n	8002bbe <namco_packet_check+0x36>
 8002b9c:	78a3      	ldrb	r3, [r4, #2]
 8002b9e:	2bff      	cmp	r3, #255	@ 0xff
 8002ba0:	d10c      	bne.n	8002bbc <namco_packet_check+0x34>
		if(data[3] > len + 7){
 8002ba2:	78e1      	ldrb	r1, [r4, #3]
 8002ba4:	1dd3      	adds	r3, r2, #7
 8002ba6:	4299      	cmp	r1, r3
 8002ba8:	dc08      	bgt.n	8002bbc <namco_packet_check+0x34>
		}
		if(data[3] + data[4] != 0){
 8002baa:	7923      	ldrb	r3, [r4, #4]
 8002bac:	185b      	adds	r3, r3, r1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d104      	bne.n	8002bbc <namco_packet_check+0x34>
			//packet length error
			return 0;
		}
		memcpy(namco_cmd_data,data,len);
 8002bb2:	0021      	movs	r1, r4
 8002bb4:	4803      	ldr	r0, [pc, #12]	@ (8002bc4 <namco_packet_check+0x3c>)
 8002bb6:	f010 fbb1 	bl	801331c <memcpy>
		return data[6];
 8002bba:	79a0      	ldrb	r0, [r4, #6]
	}else{
		//packet head error
		return 0;
	}
}
 8002bbc:	bd10      	pop	{r4, pc}
			return 0;
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	e7fc      	b.n	8002bbc <namco_packet_check+0x34>
 8002bc2:	46c0      	nop			@ (mov r8, r8)
 8002bc4:	20000e4e 	.word	0x20000e4e

08002bc8 <namco_packet_process>:

void namco_packet_process(uint8_t cmd){
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	b08c      	sub	sp, #48	@ 0x30
	switch(cmd){
 8002bcc:	2832      	cmp	r0, #50	@ 0x32
 8002bce:	d100      	bne.n	8002bd2 <namco_packet_process+0xa>
 8002bd0:	e136      	b.n	8002e40 <namco_packet_process+0x278>
 8002bd2:	d82d      	bhi.n	8002c30 <namco_packet_process+0x68>
 8002bd4:	2812      	cmp	r0, #18
 8002bd6:	d813      	bhi.n	8002c00 <namco_packet_process+0x38>
 8002bd8:	2805      	cmp	r0, #5
 8002bda:	d914      	bls.n	8002c06 <namco_packet_process+0x3e>
 8002bdc:	3806      	subs	r0, #6
 8002bde:	280c      	cmp	r0, #12
 8002be0:	d811      	bhi.n	8002c06 <namco_packet_process+0x3e>
 8002be2:	f7fd fab7 	bl	8000154 <__gnu_thumb1_case_uhi>
 8002be6:	0134      	.short	0x0134
 8002be8:	01520010 	.word	0x01520010
 8002bec:	00100010 	.word	0x00100010
 8002bf0:	01490010 	.word	0x01490010
 8002bf4:	00910010 	.word	0x00910010
 8002bf8:	00100010 	.word	0x00100010
 8002bfc:	01500010 	.word	0x01500010
 8002c00:	2818      	cmp	r0, #24
 8002c02:	d100      	bne.n	8002c06 <namco_packet_process+0x3e>
 8002c04:	e116      	b.n	8002e34 <namco_packet_process+0x26c>
			}
			break;
		}
		default:{
			//Unknown Command,try general reply
			const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x04, 0xFC, 0xD5, 0x45, 0x01, 0x00, 0xE5, 0x00};
 8002c06:	2211      	movs	r2, #17
 8002c08:	49a8      	ldr	r1, [pc, #672]	@ (8002eac <namco_packet_process+0x2e4>)
 8002c0a:	a801      	add	r0, sp, #4
 8002c0c:	f010 fb86 	bl	801331c <memcpy>
			uint8_t cc = namco_cmd_data[6] +1;
 8002c10:	4ca7      	ldr	r4, [pc, #668]	@ (8002eb0 <namco_packet_process+0x2e8>)
			memcpy(namco_cmd_data,tempBuf,sizeof(tempBuf));
 8002c12:	2211      	movs	r2, #17
			uint8_t cc = namco_cmd_data[6] +1;
 8002c14:	79a5      	ldrb	r5, [r4, #6]
			memcpy(namco_cmd_data,tempBuf,sizeof(tempBuf));
 8002c16:	a901      	add	r1, sp, #4
 8002c18:	0020      	movs	r0, r4
 8002c1a:	f010 fb7f 	bl	801331c <memcpy>
			uint8_t cc = namco_cmd_data[6] +1;
 8002c1e:	1c6b      	adds	r3, r5, #1
			for(uint8_t i = 0;i< namco_cmd_data[3 + 6];i++){
				checksum += namco_cmd_data[i + 5 + 6];
			}
			checksum = 0xff - checksum;
			checksum ++;
			namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002c20:	0022      	movs	r2, r4
			namco_cmd_data[6 + 6] = cc;
 8002c22:	7323      	strb	r3, [r4, #12]
			checksum ++;
 8002c24:	2329      	movs	r3, #41	@ 0x29
			namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002c26:	3262      	adds	r2, #98	@ 0x62
			checksum ++;
 8002c28:	1b5b      	subs	r3, r3, r5
			Interface_Send(namco_cmd_data,sizeof(tempBuf));
 8002c2a:	2111      	movs	r1, #17
			namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002c2c:	7013      	strb	r3, [r2, #0]
			Interface_Send(namco_cmd_data,sizeof(tempBuf));
 8002c2e:	e03e      	b.n	8002cae <namco_packet_process+0xe6>
	switch(cmd){
 8002c30:	284a      	cmp	r0, #74	@ 0x4a
 8002c32:	d017      	beq.n	8002c64 <namco_packet_process+0x9c>
 8002c34:	d80a      	bhi.n	8002c4c <namco_packet_process+0x84>
 8002c36:	2840      	cmp	r0, #64	@ 0x40
 8002c38:	d05d      	beq.n	8002cf6 <namco_packet_process+0x12e>
			const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x04, 0xFC, 0xD5, 0x45, 0x01, 0x00, 0xE5, 0x00};
 8002c3a:	499c      	ldr	r1, [pc, #624]	@ (8002eac <namco_packet_process+0x2e4>)
	switch(cmd){
 8002c3c:	2844      	cmp	r0, #68	@ 0x44
 8002c3e:	d1e2      	bne.n	8002c06 <namco_packet_process+0x3e>
			const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x04, 0xFC, 0xD5, 0x45, 0x01, 0x00, 0xE5, 0x00};
 8002c40:	2211      	movs	r2, #17
 8002c42:	a801      	add	r0, sp, #4
 8002c44:	f010 fb6a 	bl	801331c <memcpy>
			Interface_Send(tempBuf,sizeof(tempBuf));
 8002c48:	2111      	movs	r1, #17
 8002c4a:	e06a      	b.n	8002d22 <namco_packet_process+0x15a>
	switch(cmd){
 8002c4c:	2852      	cmp	r0, #82	@ 0x52
 8002c4e:	d100      	bne.n	8002c52 <namco_packet_process+0x8a>
 8002c50:	e12a      	b.n	8002ea8 <namco_packet_process+0x2e0>
 8002c52:	28a0      	cmp	r0, #160	@ 0xa0
 8002c54:	d1d7      	bne.n	8002c06 <namco_packet_process+0x3e>
			if(Card.type != Card_Type_Felica){
 8002c56:	4b97      	ldr	r3, [pc, #604]	@ (8002eb4 <namco_packet_process+0x2ec>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d100      	bne.n	8002c60 <namco_packet_process+0x98>
 8002c5e:	e086      	b.n	8002d6e <namco_packet_process+0x1a6>
				const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x03, 0xFD, 0xD5, 0xA1, 0x01, 0x89, 0x00};
 8002c60:	4995      	ldr	r1, [pc, #596]	@ (8002eb8 <namco_packet_process+0x2f0>)
 8002c62:	e117      	b.n	8002e94 <namco_packet_process+0x2cc>
			if(namco_cmd_data[8] == 0x00){
 8002c64:	4c92      	ldr	r4, [pc, #584]	@ (8002eb0 <namco_packet_process+0x2e8>)
 8002c66:	7a25      	ldrb	r5, [r4, #8]
 8002c68:	2d00      	cmp	r5, #0
 8002c6a:	d122      	bne.n	8002cb2 <namco_packet_process+0xea>
				if(Card.type == Card_Type_Mifare_Classic){
 8002c6c:	4e91      	ldr	r6, [pc, #580]	@ (8002eb4 <namco_packet_process+0x2ec>)
 8002c6e:	7833      	ldrb	r3, [r6, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d17c      	bne.n	8002d6e <namco_packet_process+0x1a6>
					const uint8_t tmp[] =  {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xff, 0x0c, 0xf4, 0xd5, 0x4b, 0x01, 0x01, 0x00, 0x04, 0x08, 0x04,
 8002c74:	2219      	movs	r2, #25
 8002c76:	4991      	ldr	r1, [pc, #580]	@ (8002ebc <namco_packet_process+0x2f4>)
 8002c78:	a801      	add	r0, sp, #4
 8002c7a:	f010 fb4f 	bl	801331c <memcpy>
					memcpy(namco_cmd_data,tmp,sizeof(tmp));
 8002c7e:	2219      	movs	r2, #25
 8002c80:	a901      	add	r1, sp, #4
 8002c82:	0020      	movs	r0, r4
 8002c84:	f010 fb4a 	bl	801331c <memcpy>
					memcpy(namco_cmd_data + 13 + 6,Card.iso14443_uid4,4);
 8002c88:	0020      	movs	r0, r4
 8002c8a:	1cf1      	adds	r1, r6, #3
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	3013      	adds	r0, #19
 8002c90:	f010 fb44 	bl	801331c <memcpy>
 8002c94:	002b      	movs	r3, r5
						checksum += namco_cmd_data[i + 5 + 6];
 8002c96:	498a      	ldr	r1, [pc, #552]	@ (8002ec0 <namco_packet_process+0x2f8>)
 8002c98:	5cca      	ldrb	r2, [r1, r3]
					for(uint8_t i = 0;i< namco_cmd_data[3 + 6];i++){
 8002c9a:	3301      	adds	r3, #1
						checksum += namco_cmd_data[i + 5 + 6];
 8002c9c:	18ad      	adds	r5, r5, r2
 8002c9e:	b2ed      	uxtb	r5, r5
					for(uint8_t i = 0;i< namco_cmd_data[3 + 6];i++){
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d1f9      	bne.n	8002c98 <namco_packet_process+0xd0>
					namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002ca4:	0023      	movs	r3, r4
					checksum ++;
 8002ca6:	426d      	negs	r5, r5
					namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002ca8:	3362      	adds	r3, #98	@ 0x62
 8002caa:	701d      	strb	r5, [r3, #0]
					Interface_Send(namco_cmd_data,sizeof(namco_cmd_data));
 8002cac:	2164      	movs	r1, #100	@ 0x64
			Interface_Send(namco_cmd_data,sizeof(tempBuf));
 8002cae:	0020      	movs	r0, r4
 8002cb0:	e038      	b.n	8002d24 <namco_packet_process+0x15c>
			}else if(namco_cmd_data[8] == 0x01){
 8002cb2:	2d01      	cmp	r5, #1
 8002cb4:	d15b      	bne.n	8002d6e <namco_packet_process+0x1a6>
				if(Card.type == Card_Type_Felica){
 8002cb6:	4d7f      	ldr	r5, [pc, #508]	@ (8002eb4 <namco_packet_process+0x2ec>)
 8002cb8:	782b      	ldrb	r3, [r5, #0]
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d157      	bne.n	8002d6e <namco_packet_process+0x1a6>
					const uint8_t tmp[] =  {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xff, 0x0c, 0xf4, 0xd5, 0x4b, 0x01, 0x01, 0x12, 0x01,
 8002cbe:	2229      	movs	r2, #41	@ 0x29
 8002cc0:	4980      	ldr	r1, [pc, #512]	@ (8002ec4 <namco_packet_process+0x2fc>)
 8002cc2:	a801      	add	r0, sp, #4
 8002cc4:	f010 fb2a 	bl	801331c <memcpy>
					memcpy(namco_cmd_data,tmp,sizeof(tmp));
 8002cc8:	2229      	movs	r2, #41	@ 0x29
 8002cca:	a901      	add	r1, sp, #4
 8002ccc:	0020      	movs	r0, r4
 8002cce:	f010 fb25 	bl	801331c <memcpy>
					memcpy(namco_cmd_data + 17 + 6,Card.felica_IDm,8);
 8002cd2:	0020      	movs	r0, r4
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	1ca9      	adds	r1, r5, #2
 8002cd8:	3017      	adds	r0, #23
 8002cda:	f010 fb1f 	bl	801331c <memcpy>
					memcpy(namco_cmd_data + 15 + 6,Card.felica_PMm,8);
 8002cde:	0020      	movs	r0, r4
 8002ce0:	0029      	movs	r1, r5
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	3015      	adds	r0, #21
 8002ce6:	310a      	adds	r1, #10
 8002ce8:	f010 fb18 	bl	801331c <memcpy>
					namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002cec:	0023      	movs	r3, r4
 8002cee:	2200      	movs	r2, #0
 8002cf0:	3362      	adds	r3, #98	@ 0x62
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e7da      	b.n	8002cac <namco_packet_process+0xe4>
			switch(namco_cmd_data[8]){
 8002cf6:	4c6e      	ldr	r4, [pc, #440]	@ (8002eb0 <namco_packet_process+0x2e8>)
 8002cf8:	4e70      	ldr	r6, [pc, #448]	@ (8002ebc <namco_packet_process+0x2f4>)
 8002cfa:	7a23      	ldrb	r3, [r4, #8]
 8002cfc:	2b60      	cmp	r3, #96	@ 0x60
 8002cfe:	d014      	beq.n	8002d2a <namco_packet_process+0x162>
 8002d00:	2b61      	cmp	r3, #97	@ 0x61
 8002d02:	d043      	beq.n	8002d8c <namco_packet_process+0x1c4>
 8002d04:	2b30      	cmp	r3, #48	@ 0x30
 8002d06:	d069      	beq.n	8002ddc <namco_packet_process+0x214>
			if(namco_cmd_data[7] == 0x01){
 8002d08:	4a69      	ldr	r2, [pc, #420]	@ (8002eb0 <namco_packet_process+0x2e8>)
 8002d0a:	79d3      	ldrb	r3, [r2, #7]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d102      	bne.n	8002d16 <namco_packet_process+0x14e>
				namco_led_mode = namco_cmd_data[8];
 8002d10:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec8 <namco_packet_process+0x300>)
 8002d12:	7a12      	ldrb	r2, [r2, #8]
 8002d14:	701a      	strb	r2, [r3, #0]
			const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x02, 0xFE, 0xD5, 0x0F, 0x1C, 0x00};
 8002d16:	496d      	ldr	r1, [pc, #436]	@ (8002ecc <namco_packet_process+0x304>)
				const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x02, 0xFE, 0xD5, 0x19, 0x12, 0x00};
 8002d18:	220f      	movs	r2, #15
 8002d1a:	a801      	add	r0, sp, #4
 8002d1c:	f010 fafe 	bl	801331c <memcpy>
				Interface_Send(tempBuf,sizeof(tempBuf));
 8002d20:	210f      	movs	r1, #15
				Interface_Send(tempBuf,sizeof(tempBuf));
 8002d22:	a801      	add	r0, sp, #4
			Interface_Send(namco_cmd_data,sizeof(tempBuf));
 8002d24:	f7ff ff12 	bl	8002b4c <Interface_Send>
 8002d28:	e021      	b.n	8002d6e <namco_packet_process+0x1a6>
					const uint8_t tmp[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xff, 0x03, 0xfd, 0xd5, 0x41, 0x00, 0xbb, 0x00};
 8002d2a:	0031      	movs	r1, r6
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	3142      	adds	r1, #66	@ 0x42
 8002d30:	a801      	add	r0, sp, #4
 8002d32:	f010 faf3 	bl	801331c <memcpy>
					if((namco_cmd_data[9 + 6] != 0) && (memcmp(Card.iso14443_uid4,&namco_cmd_data[16 + 6],4)) && !(Card.mifare_auth_status & Auth_KeyA_Right) &&(memcmp(Card.mifare_right_key_a,&namco_cmd_data[10 + 6],6))){
 8002d36:	7be3      	ldrb	r3, [r4, #15]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01a      	beq.n	8002d72 <namco_packet_process+0x1aa>
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	4964      	ldr	r1, [pc, #400]	@ (8002ed0 <namco_packet_process+0x308>)
 8002d40:	4864      	ldr	r0, [pc, #400]	@ (8002ed4 <namco_packet_process+0x30c>)
 8002d42:	f010 fa97 	bl	8013274 <memcmp>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d013      	beq.n	8002d72 <namco_packet_process+0x1aa>
 8002d4a:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb4 <namco_packet_process+0x2ec>)
 8002d4c:	789b      	ldrb	r3, [r3, #2]
 8002d4e:	07db      	lsls	r3, r3, #31
 8002d50:	d40f      	bmi.n	8002d72 <namco_packet_process+0x1aa>
 8002d52:	2206      	movs	r2, #6
 8002d54:	4960      	ldr	r1, [pc, #384]	@ (8002ed8 <namco_packet_process+0x310>)
 8002d56:	4861      	ldr	r0, [pc, #388]	@ (8002edc <namco_packet_process+0x314>)
 8002d58:	f010 fa8c 	bl	8013274 <memcmp>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d008      	beq.n	8002d72 <namco_packet_process+0x1aa>
						memcpy(namco_cmd_data,tmp,sizeof(tmp));
 8002d60:	2210      	movs	r2, #16
 8002d62:	0020      	movs	r0, r4
 8002d64:	a901      	add	r1, sp, #4
 8002d66:	f010 fad9 	bl	801331c <memcpy>
						namco_cmd_data[7 +6] = 0x14;
 8002d6a:	2314      	movs	r3, #20
 8002d6c:	7363      	strb	r3, [r4, #13]
		}
	}
}
 8002d6e:	b00c      	add	sp, #48	@ 0x30
 8002d70:	bd70      	pop	{r4, r5, r6, pc}
						memcpy(namco_cmd_data,tmp,sizeof(tmp));
 8002d72:	2210      	movs	r2, #16
 8002d74:	a901      	add	r1, sp, #4
 8002d76:	0020      	movs	r0, r4
 8002d78:	f010 fad0 	bl	801331c <memcpy>
					namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002d7c:	0023      	movs	r3, r4
 8002d7e:	22ea      	movs	r2, #234	@ 0xea
 8002d80:	3362      	adds	r3, #98	@ 0x62
					Interface_Send(namco_cmd_data,sizeof(tmp));
 8002d82:	2110      	movs	r1, #16
 8002d84:	0020      	movs	r0, r4
					namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002d86:	701a      	strb	r2, [r3, #0]
					Interface_Send(namco_cmd_data,sizeof(tmp));
 8002d88:	f7ff fee0 	bl	8002b4c <Interface_Send>
					const uint8_t tmp[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xff, 0x03, 0xfd, 0xd5, 0x41, 0x00, 0xbb, 0x00};
 8002d8c:	0031      	movs	r1, r6
 8002d8e:	2210      	movs	r2, #16
 8002d90:	3142      	adds	r1, #66	@ 0x42
 8002d92:	a801      	add	r0, sp, #4
 8002d94:	f010 fac2 	bl	801331c <memcpy>
					if((namco_cmd_data[9 + 6] != 0) && (memcmp(Card.iso14443_uid4,&namco_cmd_data[16 + 6],4)) && !(Card.mifare_auth_status & Auth_KeyB_Right) &&(memcmp(Card.mifare_right_key_b,&namco_cmd_data[10 + 6],6))){
 8002d98:	7be3      	ldrb	r3, [r4, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d011      	beq.n	8002dc2 <namco_packet_process+0x1fa>
 8002d9e:	2204      	movs	r2, #4
 8002da0:	494b      	ldr	r1, [pc, #300]	@ (8002ed0 <namco_packet_process+0x308>)
 8002da2:	484c      	ldr	r0, [pc, #304]	@ (8002ed4 <namco_packet_process+0x30c>)
 8002da4:	f010 fa66 	bl	8013274 <memcmp>
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d00a      	beq.n	8002dc2 <namco_packet_process+0x1fa>
 8002dac:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <namco_packet_process+0x2ec>)
 8002dae:	789b      	ldrb	r3, [r3, #2]
 8002db0:	079b      	lsls	r3, r3, #30
 8002db2:	d406      	bmi.n	8002dc2 <namco_packet_process+0x1fa>
 8002db4:	2206      	movs	r2, #6
 8002db6:	4948      	ldr	r1, [pc, #288]	@ (8002ed8 <namco_packet_process+0x310>)
 8002db8:	4849      	ldr	r0, [pc, #292]	@ (8002ee0 <namco_packet_process+0x318>)
 8002dba:	f010 fa5b 	bl	8013274 <memcmp>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d1ce      	bne.n	8002d60 <namco_packet_process+0x198>
						memcpy(namco_cmd_data,tmp,sizeof(tmp));
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	a901      	add	r1, sp, #4
 8002dc6:	0020      	movs	r0, r4
 8002dc8:	f010 faa8 	bl	801331c <memcpy>
					namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002dcc:	0023      	movs	r3, r4
 8002dce:	22ea      	movs	r2, #234	@ 0xea
 8002dd0:	3362      	adds	r3, #98	@ 0x62
					Interface_Send(namco_cmd_data,sizeof(tmp));
 8002dd2:	2110      	movs	r1, #16
 8002dd4:	0020      	movs	r0, r4
					namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002dd6:	701a      	strb	r2, [r3, #0]
					Interface_Send(namco_cmd_data,sizeof(tmp));
 8002dd8:	f7ff feb8 	bl	8002b4c <Interface_Send>
					const uint8_t tmp[] =  {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x13, 0xED, 0xD5, 0x41, 0x00,
 8002ddc:	0031      	movs	r1, r6
 8002dde:	2220      	movs	r2, #32
 8002de0:	3152      	adds	r1, #82	@ 0x52
 8002de2:	a801      	add	r0, sp, #4
					uint8_t block = namco_cmd_data[8];
 8002de4:	7a25      	ldrb	r5, [r4, #8]
					const uint8_t tmp[] =  {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x13, 0xED, 0xD5, 0x41, 0x00,
 8002de6:	f010 fa99 	bl	801331c <memcpy>
					memcpy(namco_cmd_data,tmp,sizeof(tmp));
 8002dea:	2220      	movs	r2, #32
 8002dec:	0020      	movs	r0, r4
 8002dee:	a901      	add	r1, sp, #4
 8002df0:	f010 fa94 	bl	801331c <memcpy>
					if(Card.mifare_auth_status == Auth_ALL_Failed){
 8002df4:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb4 <namco_packet_process+0x2ec>)
 8002df6:	789a      	ldrb	r2, [r3, #2]
 8002df8:	2a80      	cmp	r2, #128	@ 0x80
 8002dfa:	d113      	bne.n	8002e24 <namco_packet_process+0x25c>
						namco_cmd_data[7 + 6] = 0x01;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	7363      	strb	r3, [r4, #13]
					memcpy(namco_cmd_data + 13 + 6,Card.iso14443_uid4,4);
 8002e00:	2200      	movs	r2, #0
					uint8_t checksum = 0;
 8002e02:	0013      	movs	r3, r2
						checksum += namco_cmd_data[i + 5 + 6];
 8002e04:	482e      	ldr	r0, [pc, #184]	@ (8002ec0 <namco_packet_process+0x2f8>)
 8002e06:	5c81      	ldrb	r1, [r0, r2]
					for(uint8_t i = 0;i< namco_cmd_data[3 + 6];i++){
 8002e08:	3201      	adds	r2, #1
						checksum += namco_cmd_data[i + 5 + 6];
 8002e0a:	185b      	adds	r3, r3, r1
 8002e0c:	b2db      	uxtb	r3, r3
					for(uint8_t i = 0;i< namco_cmd_data[3 + 6];i++){
 8002e0e:	2a13      	cmp	r2, #19
 8002e10:	d1f9      	bne.n	8002e06 <namco_packet_process+0x23e>
					namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002e12:	0022      	movs	r2, r4
					checksum ++;
 8002e14:	425b      	negs	r3, r3
					namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002e16:	3262      	adds	r2, #98	@ 0x62
					Interface_Send(namco_cmd_data,sizeof(tmp
 8002e18:	2120      	movs	r1, #32
 8002e1a:	0020      	movs	r0, r4
					namco_cmd_data[sizeof(namco_cmd_data) - 2] = checksum;
 8002e1c:	7013      	strb	r3, [r2, #0]
					Interface_Send(namco_cmd_data,sizeof(tmp
 8002e1e:	f7ff fe95 	bl	8002b4c <Interface_Send>
 8002e22:	e771      	b.n	8002d08 <namco_packet_process+0x140>
						memcpy(namco_cmd_data +8 + 6,Card.mifare_data[block],16);
 8002e24:	0129      	lsls	r1, r5, #4
 8002e26:	3103      	adds	r1, #3
 8002e28:	2210      	movs	r2, #16
 8002e2a:	18c9      	adds	r1, r1, r3
 8002e2c:	482d      	ldr	r0, [pc, #180]	@ (8002ee4 <namco_packet_process+0x31c>)
 8002e2e:	f010 fa75 	bl	801331c <memcpy>
 8002e32:	e7e5      	b.n	8002e00 <namco_packet_process+0x238>
			if(namco_cmd_data[7] == 0x01){
 8002e34:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb0 <namco_packet_process+0x2e8>)
 8002e36:	79db      	ldrb	r3, [r3, #7]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d198      	bne.n	8002d6e <namco_packet_process+0x1a6>
				const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x02, 0xFE, 0xD5, 0x19, 0x12, 0x00};
 8002e3c:	492a      	ldr	r1, [pc, #168]	@ (8002ee8 <namco_packet_process+0x320>)
 8002e3e:	e76b      	b.n	8002d18 <namco_packet_process+0x150>
			if(namco_cmd_data[7] == 0x81){
 8002e40:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb0 <namco_packet_process+0x2e8>)
				const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x02, 0xFE, 0xD5, 0x33, 0xF8, 0x00};
 8002e42:	492a      	ldr	r1, [pc, #168]	@ (8002eec <namco_packet_process+0x324>)
			if(namco_cmd_data[7] == 0x81){
 8002e44:	79db      	ldrb	r3, [r3, #7]
 8002e46:	2b81      	cmp	r3, #129	@ 0x81
 8002e48:	d000      	beq.n	8002e4c <namco_packet_process+0x284>
 8002e4a:	e790      	b.n	8002d6e <namco_packet_process+0x1a6>
 8002e4c:	e764      	b.n	8002d18 <namco_packet_process+0x150>
			if(namco_cmd_data[3] == 0x12){
 8002e4e:	4b18      	ldr	r3, [pc, #96]	@ (8002eb0 <namco_packet_process+0x2e8>)
 8002e50:	78db      	ldrb	r3, [r3, #3]
 8002e52:	2b12      	cmp	r3, #18
 8002e54:	d106      	bne.n	8002e64 <namco_packet_process+0x29c>
				const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x0A, 0xF6, 0xD5, 0x07, 0xFF, 0x3F, 0x0E, 0xF1, 0xFF, 0x3F, 0x0E, 0xF1, 0xAA, 0x00};
 8002e56:	4926      	ldr	r1, [pc, #152]	@ (8002ef0 <namco_packet_process+0x328>)
 8002e58:	2217      	movs	r2, #23
 8002e5a:	a801      	add	r0, sp, #4
 8002e5c:	f010 fa5e 	bl	801331c <memcpy>
				Interface_Send(tempBuf,sizeof(tempBuf));
 8002e60:	2117      	movs	r1, #23
 8002e62:	e75e      	b.n	8002d22 <namco_packet_process+0x15a>
			}else if(namco_cmd_data[3] == 0x18){
 8002e64:	2b18      	cmp	r3, #24
 8002e66:	d000      	beq.n	8002e6a <namco_packet_process+0x2a2>
 8002e68:	e781      	b.n	8002d6e <namco_packet_process+0x1a6>
				const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x0D, 0xF3, 0xD5, 0x07, 0xDC, 0xF4, 0x3F, 0x11, 0x4D, 0x85, 0x61, 0xF1, 0x26, 0x6A, 0x87, 0xC9, 0x00};
 8002e6a:	4922      	ldr	r1, [pc, #136]	@ (8002ef4 <namco_packet_process+0x32c>)
 8002e6c:	221a      	movs	r2, #26
 8002e6e:	a801      	add	r0, sp, #4
 8002e70:	f010 fa54 	bl	801331c <memcpy>
				Interface_Send(tempBuf,sizeof(tempBuf));
 8002e74:	211a      	movs	r1, #26
 8002e76:	e754      	b.n	8002d22 <namco_packet_process+0x15a>
			const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x05, 0xFB, 0xD5, 0x0D, 0x20, 0x06, 0x00, 0xF8, 0x00};
 8002e78:	491f      	ldr	r1, [pc, #124]	@ (8002ef8 <namco_packet_process+0x330>)
 8002e7a:	2212      	movs	r2, #18
 8002e7c:	a801      	add	r0, sp, #4
 8002e7e:	f010 fa4d 	bl	801331c <memcpy>
			Interface_Send(tempBuf,sizeof(tempBuf));
 8002e82:	2112      	movs	r1, #18
 8002e84:	e74d      	b.n	8002d22 <namco_packet_process+0x15a>
			const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x02, 0xFE, 0xD5, 0x13, 0x18, 0x00};
 8002e86:	491d      	ldr	r1, [pc, #116]	@ (8002efc <namco_packet_process+0x334>)
 8002e88:	e746      	b.n	8002d18 <namco_packet_process+0x150>
			if(namco_cmd_data[7] == 0xFF){
 8002e8a:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <namco_packet_process+0x2e8>)
 8002e8c:	79db      	ldrb	r3, [r3, #7]
 8002e8e:	2bff      	cmp	r3, #255	@ 0xff
 8002e90:	d106      	bne.n	8002ea0 <namco_packet_process+0x2d8>
				const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x03, 0xFD, 0xD5, 0x09, 0x00, 0x22, 0x00 };
 8002e92:	491b      	ldr	r1, [pc, #108]	@ (8002f00 <namco_packet_process+0x338>)
				const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x03, 0xFD, 0xD5, 0xA1, 0x01, 0x89, 0x00};
 8002e94:	2210      	movs	r2, #16
 8002e96:	a801      	add	r0, sp, #4
 8002e98:	f010 fa40 	bl	801331c <memcpy>
				Interface_Send(tempBuf,sizeof(tempBuf));
 8002e9c:	2110      	movs	r1, #16
 8002e9e:	e740      	b.n	8002d22 <namco_packet_process+0x15a>
			}else if(namco_cmd_data[7] == 0x63){
 8002ea0:	2b63      	cmp	r3, #99	@ 0x63
 8002ea2:	d000      	beq.n	8002ea6 <namco_packet_process+0x2de>
 8002ea4:	e763      	b.n	8002d6e <namco_packet_process+0x1a6>
 8002ea6:	e7f4      	b.n	8002e92 <namco_packet_process+0x2ca>
		    const uint8_t tempBuf[] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x04, 0xFC, 0xD5, 0x53, 0x01, 0x00, 0xD7, 0x00};
 8002ea8:	4916      	ldr	r1, [pc, #88]	@ (8002f04 <namco_packet_process+0x33c>)
 8002eaa:	e6c9      	b.n	8002c40 <namco_packet_process+0x78>
 8002eac:	08013cbc 	.word	0x08013cbc
 8002eb0:	20000e4e 	.word	0x20000e4e
 8002eb4:	20000a79 	.word	0x20000a79
 8002eb8:	08013ccd 	.word	0x08013ccd
 8002ebc:	08013baa 	.word	0x08013baa
 8002ec0:	20000e59 	.word	0x20000e59
 8002ec4:	08013bc3 	.word	0x08013bc3
 8002ec8:	20000e4d 	.word	0x20000e4d
 8002ecc:	08013c1c 	.word	0x08013c1c
 8002ed0:	20000e64 	.word	0x20000e64
 8002ed4:	20000a7c 	.word	0x20000a7c
 8002ed8:	20000e5e 	.word	0x20000e5e
 8002edc:	20000aac 	.word	0x20000aac
 8002ee0:	20000ab6 	.word	0x20000ab6
 8002ee4:	20000e5c 	.word	0x20000e5c
 8002ee8:	08013c2b 	.word	0x08013c2b
 8002eec:	08013c3a 	.word	0x08013c3a
 8002ef0:	08013c49 	.word	0x08013c49
 8002ef4:	08013c60 	.word	0x08013c60
 8002ef8:	08013c7a 	.word	0x08013c7a
 8002efc:	08013c8c 	.word	0x08013c8c
 8002f00:	08013c9b 	.word	0x08013c9b
 8002f04:	08013cab 	.word	0x08013cab

08002f08 <ascii_to_accesscode>:
uint8_t sega_systemcode[2] = {0x88,0xb4};

//uint8_t sega_access_aime[4] = {0x70,0xf8,0x78,0x11};
extern uint8_t auth_flag;

void ascii_to_accesscode(uint8_t *ascii_data ,uint8_t *accesscode){
 8002f08:	b510      	push	{r4, lr}
	accesscode[0] = 0x00;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	0004      	movs	r4, r0
 8002f0e:	700b      	strb	r3, [r1, #0]
	accesscode[1] = 0x00;
 8002f10:	704b      	strb	r3, [r1, #1]
	for(uint8_t i = 0;i<8;i++){
 8002f12:	3410      	adds	r4, #16
 8002f14:	3102      	adds	r1, #2
		accesscode[i + 2] = (ascii_data[2 * i] - 0x30) << 4 | (ascii_data[2 * i + 1] - 0x30);
 8002f16:	7803      	ldrb	r3, [r0, #0]
 8002f18:	7842      	ldrb	r2, [r0, #1]
 8002f1a:	3b30      	subs	r3, #48	@ 0x30
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	3a30      	subs	r2, #48	@ 0x30
 8002f20:	4313      	orrs	r3, r2
	for(uint8_t i = 0;i<8;i++){
 8002f22:	3002      	adds	r0, #2
		accesscode[i + 2] = (ascii_data[2 * i] - 0x30) << 4 | (ascii_data[2 * i + 1] - 0x30);
 8002f24:	700b      	strb	r3, [r1, #0]
	for(uint8_t i = 0;i<8;i++){
 8002f26:	3101      	adds	r1, #1
 8002f28:	4284      	cmp	r4, r0
 8002f2a:	d1f4      	bne.n	8002f16 <ascii_to_accesscode+0xe>
	}
}
 8002f2c:	bd10      	pop	{r4, pc}

08002f2e <hex_to_accesscode>:

void hex_to_accesscode(uint8_t *hex ,uint8_t *accesscode){
 8002f2e:	b570      	push	{r4, r5, r6, lr}
 8002f30:	000c      	movs	r4, r1
	accesscode[0] = 0x00;
 8002f32:	2600      	movs	r6, #0
	accesscode[1] = 0x00;
	memcpy(accesscode + 2, hex, 8);
 8002f34:	3402      	adds	r4, #2
	accesscode[0] = 0x00;
 8002f36:	700e      	strb	r6, [r1, #0]
	accesscode[1] = 0x00;
 8002f38:	704e      	strb	r6, [r1, #1]
void hex_to_accesscode(uint8_t *hex ,uint8_t *accesscode){
 8002f3a:	0005      	movs	r5, r0
	memcpy(accesscode + 2, hex, 8);
 8002f3c:	0001      	movs	r1, r0
 8002f3e:	2208      	movs	r2, #8
 8002f40:	0020      	movs	r0, r4
 8002f42:	f010 f9eb 	bl	801331c <memcpy>
 8002f46:	0033      	movs	r3, r6
	for(uint8_t i = 0;i<8;i++){
		uint8_t tmp_high = (hex[i] >> 4);
		uint8_t tmp_low = (hex[i] & 0b1111);
 8002f48:	200f      	movs	r0, #15
		uint8_t tmp_high = (hex[i] >> 4);
 8002f4a:	5cee      	ldrb	r6, [r5, r3]
		uint8_t tmp_low = (hex[i] & 0b1111);
 8002f4c:	0032      	movs	r2, r6
		uint8_t tmp_high = (hex[i] >> 4);
 8002f4e:	0931      	lsrs	r1, r6, #4
		uint8_t tmp_low = (hex[i] & 0b1111);
 8002f50:	4002      	ands	r2, r0
		if(tmp_high >= 10){
 8002f52:	2e9f      	cmp	r6, #159	@ 0x9f
 8002f54:	d901      	bls.n	8002f5a <hex_to_accesscode+0x2c>
			tmp_high -= 7;
 8002f56:	3907      	subs	r1, #7
 8002f58:	b2c9      	uxtb	r1, r1
		}
		if(tmp_low >= 10){
 8002f5a:	2a09      	cmp	r2, #9
 8002f5c:	d901      	bls.n	8002f62 <hex_to_accesscode+0x34>
			tmp_low -= 7;
 8002f5e:	3a07      	subs	r2, #7
 8002f60:	b2d2      	uxtb	r2, r2
		}
		accesscode[i+2] = tmp_high << 4 | tmp_low;
 8002f62:	0109      	lsls	r1, r1, #4
 8002f64:	430a      	orrs	r2, r1
 8002f66:	54e2      	strb	r2, [r4, r3]
	for(uint8_t i = 0;i<8;i++){
 8002f68:	3301      	adds	r3, #1
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d1ed      	bne.n	8002f4a <hex_to_accesscode+0x1c>
	}
}
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}

08002f70 <sega_packet_check>:
uint8_t sega_packet_check(uint8_t* data,uint8_t len) {
	bool escape = false;
	uint8_t raw_pos = 0;
	uint8_t req_pos = 1;
	uint8_t checksum = 0;
	while(raw_pos<len){
 8002f70:	2300      	movs	r3, #0
uint8_t sega_packet_check(uint8_t* data,uint8_t len) {
 8002f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f74:	9101      	str	r1, [sp, #4]
	while(raw_pos<len){
 8002f76:	9901      	ldr	r1, [sp, #4]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	428a      	cmp	r2, r1
 8002f7c:	d301      	bcc.n	8002f82 <sega_packet_check+0x12>
	uint8_t checksum = 0;
 8002f7e:	2400      	movs	r4, #0
 8002f80:	e008      	b.n	8002f94 <sega_packet_check+0x24>
		if(data[raw_pos] == SERIAL_CMD_START){
 8002f82:	5cc4      	ldrb	r4, [r0, r3]
 8002f84:	3301      	adds	r3, #1
 8002f86:	2ce0      	cmp	r4, #224	@ 0xe0
 8002f88:	d1f5      	bne.n	8002f76 <sega_packet_check+0x6>
			req.frame_len = data[++raw_pos];
 8002f8a:	5cc4      	ldrb	r4, [r0, r3]
 8002f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff8 <sega_packet_check+0x88>)
			checksum += req.frame_len;
			raw_pos++;
 8002f8e:	3202      	adds	r2, #2
			req.frame_len = data[++raw_pos];
 8002f90:	701c      	strb	r4, [r3, #0]
			raw_pos++;
 8002f92:	b2d2      	uxtb	r2, r2
			break;
		}
		raw_pos++;
	}
	if(raw_pos == len){
 8002f94:	9b01      	ldr	r3, [sp, #4]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d129      	bne.n	8002fee <sega_packet_check+0x7e>
		return 0;
 8002f9a:	2000      	movs	r0, #0
	}else if(checksum == req.bytes[req.frame_len]){
		return req.cmd;
	}else{
		return STATUS_SUM_ERROR;
	}
}
 8002f9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			raw_pos++;
 8002f9e:	3201      	adds	r2, #1
 8002fa0:	b2d2      	uxtb	r2, r2
		if (data[raw_pos] == 0xD0) {
 8002fa2:	2bd0      	cmp	r3, #208	@ 0xd0
 8002fa4:	d021      	beq.n	8002fea <sega_packet_check+0x7a>
			req.bytes[req_pos] = data[raw_pos] + 1;
 8002fa6:	46b4      	mov	ip, r6
			req_pos++;
 8002fa8:	3601      	adds	r6, #1
 8002faa:	b2f6      	uxtb	r6, r6
		}else if (escape) {
 8002fac:	2f00      	cmp	r7, #0
 8002fae:	d017      	beq.n	8002fe0 <sega_packet_check+0x70>
			req.bytes[req_pos] = data[raw_pos] + 1;
 8002fb0:	4667      	mov	r7, ip
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	55eb      	strb	r3, [r5, r7]
			escape = false;
 8002fb8:	2700      	movs	r7, #0
			checksum += req.bytes[req_pos];
 8002fba:	191c      	adds	r4, r3, r4
 8002fbc:	b2e4      	uxtb	r4, r4
		if(raw_pos == len){
 8002fbe:	9b01      	ldr	r3, [sp, #4]
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d0ea      	beq.n	8002f9a <sega_packet_check+0x2a>
	while(req_pos != req.frame_len){
 8002fc4:	7829      	ldrb	r1, [r5, #0]
		if (data[raw_pos] == 0xD0) {
 8002fc6:	5c83      	ldrb	r3, [r0, r2]
	while(req_pos != req.frame_len){
 8002fc8:	42b1      	cmp	r1, r6
 8002fca:	d1e8      	bne.n	8002f9e <sega_packet_check+0x2e>
	req.bytes[req_pos] = data[raw_pos];
 8002fcc:	55ab      	strb	r3, [r5, r6]
	if (req.cmd == CMD_SEND_BINDATA_EXEC){
 8002fce:	78e8      	ldrb	r0, [r5, #3]
 8002fd0:	2864      	cmp	r0, #100	@ 0x64
 8002fd2:	d0e3      	beq.n	8002f9c <sega_packet_check+0x2c>
	}else if(checksum == req.bytes[req.frame_len]){
 8002fd4:	782b      	ldrb	r3, [r5, #0]
 8002fd6:	5ceb      	ldrb	r3, [r5, r3]
 8002fd8:	42a3      	cmp	r3, r4
 8002fda:	d0df      	beq.n	8002f9c <sega_packet_check+0x2c>
		return STATUS_SUM_ERROR;
 8002fdc:	2005      	movs	r0, #5
 8002fde:	e7dd      	b.n	8002f9c <sega_packet_check+0x2c>
			req.bytes[req_pos] = data[raw_pos];
 8002fe0:	4661      	mov	r1, ip
			checksum += req.bytes[req_pos];
 8002fe2:	18e4      	adds	r4, r4, r3
			req.bytes[req_pos] = data[raw_pos];
 8002fe4:	546b      	strb	r3, [r5, r1]
			checksum += req.bytes[req_pos];
 8002fe6:	b2e4      	uxtb	r4, r4
			req_pos++;
 8002fe8:	e7e9      	b.n	8002fbe <sega_packet_check+0x4e>
			escape = true;
 8002fea:	2701      	movs	r7, #1
 8002fec:	e7e7      	b.n	8002fbe <sega_packet_check+0x4e>
	uint8_t req_pos = 1;
 8002fee:	2601      	movs	r6, #1
	bool escape = false;
 8002ff0:	2700      	movs	r7, #0
	while(req_pos != req.frame_len){
 8002ff2:	4d01      	ldr	r5, [pc, #4]	@ (8002ff8 <sega_packet_check+0x88>)
 8002ff4:	e7e6      	b.n	8002fc4 <sega_packet_check+0x54>
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	20000fbe 	.word	0x20000fbe

08002ffc <sega_packet_write>:

void sega_packet_write() {
 8002ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t checksum = 0, len = 0;
  if (res.cmd == 0) {
 8002ffe:	4c1b      	ldr	r4, [pc, #108]	@ (800306c <sega_packet_write+0x70>)
 8003000:	78e3      	ldrb	r3, [r4, #3]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d02d      	beq.n	8003062 <sega_packet_write+0x66>
    return;
  }
  memset(sega_write_buffer,0,128);
 8003006:	2100      	movs	r1, #0
 8003008:	227f      	movs	r2, #127	@ 0x7f
 800300a:	4819      	ldr	r0, [pc, #100]	@ (8003070 <sega_packet_write+0x74>)
 800300c:	f010 f952 	bl	80132b4 <memset>
  sega_write_buffer[0] = 0xE0;
 8003010:	23e0      	movs	r3, #224	@ 0xe0
  uint8_t current_pos = 0;
 8003012:	2100      	movs	r1, #0
  sega_write_buffer[0] = 0xE0;
 8003014:	4817      	ldr	r0, [pc, #92]	@ (8003074 <sega_packet_write+0x78>)
  uint8_t checksum = 0, len = 0;
 8003016:	9101      	str	r1, [sp, #4]
  sega_write_buffer[0] = 0xE0;
 8003018:	7003      	strb	r3, [r0, #0]
  while (len <= res.frame_len) {
 800301a:	7823      	ldrb	r3, [r4, #0]
 800301c:	469c      	mov	ip, r3
  uint8_t checksum = 0, len = 0;
 800301e:	000b      	movs	r3, r1
    uint8_t w;
    if (len == res.frame_len) {
      w = checksum;
 8003020:	9a01      	ldr	r2, [sp, #4]
    if (len == res.frame_len) {
 8003022:	459c      	cmp	ip, r3
 8003024:	d004      	beq.n	8003030 <sega_packet_write+0x34>
    } else {
      w = res.bytes[len];
      checksum += w;
 8003026:	9d01      	ldr	r5, [sp, #4]
      w = res.bytes[len];
 8003028:	5ce2      	ldrb	r2, [r4, r3]
      checksum += w;
 800302a:	1955      	adds	r5, r2, r5
 800302c:	b2ed      	uxtb	r5, r5
 800302e:	9501      	str	r5, [sp, #4]
    }
    if (w == 0xE0 || w == 0xD0) {
 8003030:	0017      	movs	r7, r2
 8003032:	2510      	movs	r5, #16
 8003034:	3730      	adds	r7, #48	@ 0x30
 8003036:	43af      	bics	r7, r5
    	sega_write_buffer[++current_pos] = 0xD0;
 8003038:	1c4e      	adds	r6, r1, #1
    if (w == 0xE0 || w == 0xD0) {
 800303a:	b2ff      	uxtb	r7, r7
    	sega_write_buffer[++current_pos] = 0xD0;
 800303c:	b2f6      	uxtb	r6, r6
    if (w == 0xE0 || w == 0xD0) {
 800303e:	2f00      	cmp	r7, #0
 8003040:	d110      	bne.n	8003064 <sega_packet_write+0x68>
    	sega_write_buffer[++current_pos] = --w;
 8003042:	3102      	adds	r1, #2
    	sega_write_buffer[++current_pos] = 0xD0;
 8003044:	35c0      	adds	r5, #192	@ 0xc0
    	sega_write_buffer[++current_pos] = --w;
 8003046:	b2c9      	uxtb	r1, r1
 8003048:	3a01      	subs	r2, #1
    	sega_write_buffer[++current_pos] = 0xD0;
 800304a:	5585      	strb	r5, [r0, r6]
    	sega_write_buffer[++current_pos] = --w;
 800304c:	5442      	strb	r2, [r0, r1]
    } else {
    	sega_write_buffer[++current_pos] = w;
    }
    len++;
 800304e:	3301      	adds	r3, #1
 8003050:	b2db      	uxtb	r3, r3
  while (len <= res.frame_len) {
 8003052:	4563      	cmp	r3, ip
 8003054:	d9e4      	bls.n	8003020 <sega_packet_write+0x24>
  }
  res.cmd = 0;
 8003056:	2300      	movs	r3, #0
  Interface_Send(sega_write_buffer ,++current_pos);
 8003058:	3101      	adds	r1, #1
 800305a:	b2c9      	uxtb	r1, r1
  res.cmd = 0;
 800305c:	70e3      	strb	r3, [r4, #3]
  Interface_Send(sega_write_buffer ,++current_pos);
 800305e:	f7ff fd75 	bl	8002b4c <Interface_Send>
}
 8003062:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    	sega_write_buffer[++current_pos] = w;
 8003064:	0031      	movs	r1, r6
 8003066:	5582      	strb	r2, [r0, r6]
 8003068:	e7f1      	b.n	800304e <sega_packet_write+0x52>
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	20000f3e 	.word	0x20000f3e
 8003070:	20000ebf 	.word	0x20000ebf
 8003074:	20000ebe 	.word	0x20000ebe

08003078 <res_clear>:

void res_clear(uint8_t payload_len) {
  res.frame_len = 6 + payload_len;
 8003078:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <res_clear+0x1c>)
 800307a:	1d82      	adds	r2, r0, #6
 800307c:	701a      	strb	r2, [r3, #0]
  res.addr = req.addr;
 800307e:	4a06      	ldr	r2, [pc, #24]	@ (8003098 <res_clear+0x20>)
 8003080:	7851      	ldrb	r1, [r2, #1]
 8003082:	7059      	strb	r1, [r3, #1]
  res.seq_no = req.seq_no;
 8003084:	7891      	ldrb	r1, [r2, #2]
 8003086:	7099      	strb	r1, [r3, #2]
  res.cmd = req.cmd;
 8003088:	78d2      	ldrb	r2, [r2, #3]
  res.status = STATUS_OK;
  res.payload_len = payload_len;
 800308a:	7158      	strb	r0, [r3, #5]
  res.cmd = req.cmd;
 800308c:	70da      	strb	r2, [r3, #3]
  res.status = STATUS_OK;
 800308e:	2200      	movs	r2, #0
 8003090:	711a      	strb	r2, [r3, #4]
}
 8003092:	4770      	bx	lr
 8003094:	20000f3e 	.word	0x20000f3e
 8003098:	20000fbe 	.word	0x20000fbe

0800309c <sys_to_normal_mode>:

void sys_to_normal_mode() {
 800309c:	b510      	push	{r4, lr}
	res_clear(0);
 800309e:	2000      	movs	r0, #0
 80030a0:	f7ff ffea 	bl	8003078 <res_clear>
	res.seq_no = 0;
 80030a4:	2200      	movs	r2, #0
 80030a6:	4b01      	ldr	r3, [pc, #4]	@ (80030ac <sys_to_normal_mode+0x10>)
 80030a8:	709a      	strb	r2, [r3, #2]
}
 80030aa:	bd10      	pop	{r4, pc}
 80030ac:	20000f3e 	.word	0x20000f3e

080030b0 <sys_get_fw_version>:

void sys_get_fw_version() {
	if(Flash.sega_setting & 1){
 80030b0:	2001      	movs	r0, #1
void sys_get_fw_version() {
 80030b2:	b530      	push	{r4, r5, lr}
	if(Flash.sega_setting & 1){
 80030b4:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <sys_get_fw_version+0x38>)
 80030b6:	4c0d      	ldr	r4, [pc, #52]	@ (80030ec <sys_get_fw_version+0x3c>)
 80030b8:	789b      	ldrb	r3, [r3, #2]
 80030ba:	4d0d      	ldr	r5, [pc, #52]	@ (80030f0 <sys_get_fw_version+0x40>)
void sys_get_fw_version() {
 80030bc:	b087      	sub	sp, #28
	if(Flash.sega_setting & 1){
 80030be:	4203      	tst	r3, r0
 80030c0:	d00e      	beq.n	80030e0 <sys_get_fw_version+0x30>
		const char fw_version[24] = "TN32MSEC003S F/W Ver1.2";
 80030c2:	2218      	movs	r2, #24
 80030c4:	4668      	mov	r0, sp
 80030c6:	490b      	ldr	r1, [pc, #44]	@ (80030f4 <sys_get_fw_version+0x44>)
 80030c8:	f010 f928 	bl	801331c <memcpy>
		res_clear(sizeof(fw_version) - 1);
 80030cc:	2017      	movs	r0, #23
		memcpy(res.version, fw_version, res.payload_len);
	}
	else{
		const char fw_version[2] = "\x94";
		//char fw_version[2] = "\x92";
		res_clear(sizeof(fw_version) - 1);
 80030ce:	f7ff ffd3 	bl	8003078 <res_clear>
		memcpy(res.version, fw_version, res.payload_len);
 80030d2:	4669      	mov	r1, sp
 80030d4:	0020      	movs	r0, r4
 80030d6:	796a      	ldrb	r2, [r5, #5]
 80030d8:	f010 f920 	bl	801331c <memcpy>
	}
}
 80030dc:	b007      	add	sp, #28
 80030de:	bd30      	pop	{r4, r5, pc}
		const char fw_version[2] = "\x94";
 80030e0:	2394      	movs	r3, #148	@ 0x94
 80030e2:	466a      	mov	r2, sp
 80030e4:	8013      	strh	r3, [r2, #0]
 80030e6:	e7f2      	b.n	80030ce <sys_get_fw_version+0x1e>
 80030e8:	20000b64 	.word	0x20000b64
 80030ec:	20000f44 	.word	0x20000f44
 80030f0:	20000f3e 	.word	0x20000f3e
 80030f4:	08013d8b 	.word	0x08013d8b

080030f8 <sys_get_hw_version>:

void sys_get_hw_version() {
 80030f8:	b530      	push	{r4, r5, lr}
	if(Flash.sega_setting & 1){
 80030fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003134 <sys_get_hw_version+0x3c>)
 80030fc:	4c0e      	ldr	r4, [pc, #56]	@ (8003138 <sys_get_hw_version+0x40>)
 80030fe:	789b      	ldrb	r3, [r3, #2]
 8003100:	4d0e      	ldr	r5, [pc, #56]	@ (800313c <sys_get_hw_version+0x44>)
void sys_get_hw_version() {
 8003102:	b087      	sub	sp, #28
	if(Flash.sega_setting & 1){
 8003104:	07db      	lsls	r3, r3, #31
 8003106:	d50e      	bpl.n	8003126 <sys_get_hw_version+0x2e>
		const char hw_version[24] = "TN32MSEC003S H/W Ver3.0";
 8003108:	2218      	movs	r2, #24
 800310a:	4668      	mov	r0, sp
 800310c:	490c      	ldr	r1, [pc, #48]	@ (8003140 <sys_get_hw_version+0x48>)
 800310e:	f010 f905 	bl	801331c <memcpy>
		res_clear(sizeof(hw_version) - 1);
 8003112:	2017      	movs	r0, #23
		memcpy(res.version, hw_version, res.payload_len);
	}
	else{
		const char hw_version[10] = "837-15396";
		//char hw_version[10] = "837-15286";
		res_clear(sizeof(hw_version) - 1);
 8003114:	f7ff ffb0 	bl	8003078 <res_clear>
		memcpy(res.version, hw_version, res.payload_len);
 8003118:	4669      	mov	r1, sp
 800311a:	0020      	movs	r0, r4
 800311c:	796a      	ldrb	r2, [r5, #5]
 800311e:	f010 f8fd 	bl	801331c <memcpy>
	}
}
 8003122:	b007      	add	sp, #28
 8003124:	bd30      	pop	{r4, r5, pc}
		const char hw_version[10] = "837-15396";
 8003126:	220a      	movs	r2, #10
 8003128:	4668      	mov	r0, sp
 800312a:	4906      	ldr	r1, [pc, #24]	@ (8003144 <sys_get_hw_version+0x4c>)
 800312c:	f010 f8f6 	bl	801331c <memcpy>
		res_clear(sizeof(hw_version) - 1);
 8003130:	2009      	movs	r0, #9
 8003132:	e7ef      	b.n	8003114 <sys_get_hw_version+0x1c>
 8003134:	20000b64 	.word	0x20000b64
 8003138:	20000f44 	.word	0x20000f44
 800313c:	20000f3e 	.word	0x20000f3e
 8003140:	08013da3 	.word	0x08013da3
 8003144:	08013dbb 	.word	0x08013dbb

08003148 <sys_get_led_info>:

void sys_get_led_info() {
 8003148:	b530      	push	{r4, r5, lr}
	if(Flash.sega_setting & 1){
 800314a:	4b0e      	ldr	r3, [pc, #56]	@ (8003184 <sys_get_led_info+0x3c>)
 800314c:	4c0e      	ldr	r4, [pc, #56]	@ (8003188 <sys_get_led_info+0x40>)
 800314e:	789b      	ldrb	r3, [r3, #2]
 8003150:	4d0e      	ldr	r5, [pc, #56]	@ (800318c <sys_get_led_info+0x44>)
void sys_get_led_info() {
 8003152:	b085      	sub	sp, #20
	if(Flash.sega_setting & 1){
 8003154:	07db      	lsls	r3, r3, #31
 8003156:	d50e      	bpl.n	8003176 <sys_get_led_info+0x2e>
		const char led_info[10] = "15084\xFF\x10\x00\x12";
 8003158:	220a      	movs	r2, #10
 800315a:	4668      	mov	r0, sp
 800315c:	490c      	ldr	r1, [pc, #48]	@ (8003190 <sys_get_led_info+0x48>)
 800315e:	f010 f8dd 	bl	801331c <memcpy>
		res_clear(sizeof(led_info) - 1);
 8003162:	2009      	movs	r0, #9
		memcpy(res.version, led_info, res.payload_len);
	}
	else{
		const char led_info[13] = "000-00000\xFF\x11\x40";
		res_clear(sizeof(led_info) - 1);
 8003164:	f7ff ff88 	bl	8003078 <res_clear>
		memcpy(res.version, led_info, res.payload_len);
 8003168:	4669      	mov	r1, sp
 800316a:	0020      	movs	r0, r4
 800316c:	796a      	ldrb	r2, [r5, #5]
 800316e:	f010 f8d5 	bl	801331c <memcpy>
	}
}
 8003172:	b005      	add	sp, #20
 8003174:	bd30      	pop	{r4, r5, pc}
		const char led_info[13] = "000-00000\xFF\x11\x40";
 8003176:	220d      	movs	r2, #13
 8003178:	4668      	mov	r0, sp
 800317a:	4906      	ldr	r1, [pc, #24]	@ (8003194 <sys_get_led_info+0x4c>)
 800317c:	f010 f8ce 	bl	801331c <memcpy>
		res_clear(sizeof(led_info) - 1);
 8003180:	200c      	movs	r0, #12
 8003182:	e7ef      	b.n	8003164 <sys_get_led_info+0x1c>
 8003184:	20000b64 	.word	0x20000b64
 8003188:	20000f44 	.word	0x20000f44
 800318c:	20000f3e 	.word	0x20000f3e
 8003190:	08013cdd 	.word	0x08013cdd
 8003194:	08013dc5 	.word	0x08013dc5

08003198 <nfc_start_polling>:


void nfc_start_polling() {
 8003198:	b510      	push	{r4, lr}
  res_clear(0);
 800319a:	2000      	movs	r0, #0
 800319c:	f7ff ff6c 	bl	8003078 <res_clear>
}
 80031a0:	bd10      	pop	{r4, pc}
	...

080031a4 <nfc_card_detect>:

void nfc_stop_polling() {
  res_clear(0);
}

void nfc_card_detect() {
 80031a4:	b570      	push	{r4, r5, r6, lr}
	if(Card.operation != Operation_idle){
 80031a6:	4c22      	ldr	r4, [pc, #136]	@ (8003230 <nfc_card_detect+0x8c>)
 80031a8:	7863      	ldrb	r3, [r4, #1]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d039      	beq.n	8003222 <nfc_card_detect+0x7e>
		switch(Card.type){
 80031ae:	7820      	ldrb	r0, [r4, #0]
 80031b0:	3801      	subs	r0, #1
 80031b2:	2803      	cmp	r0, #3
 80031b4:	d835      	bhi.n	8003222 <nfc_card_detect+0x7e>
 80031b6:	f7fc ffb9 	bl	800012c <__gnu_thumb1_case_uqi>
 80031ba:	1502      	.short	0x1502
 80031bc:	151d      	.short	0x151d
			case Card_None:
				break;
			case Card_Type_Mifare_Classic:
				if(Card.mifare_auth_status == 0){
 80031be:	78a3      	ldrb	r3, [r4, #2]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02e      	beq.n	8003222 <nfc_card_detect+0x7e>
					//pre-read still going...
					break;
				}
				memcpy(res.mifare_uid,Card.iso14443_uid4,4);
 80031c4:	4d1b      	ldr	r5, [pc, #108]	@ (8003234 <nfc_card_detect+0x90>)
 80031c6:	481c      	ldr	r0, [pc, #112]	@ (8003238 <nfc_card_detect+0x94>)
 80031c8:	1ce1      	adds	r1, r4, #3
			    res.count = 1;
			    res.type = 0x10;
			    return;
			case Card_Type_Mifare_UltraLight:
				if(Flash.sega_setting && SYSTEM_NESICA_SUPPORT){
					memcpy(res.mifare_uid,Card.iso14443_uid7,4);
 80031ca:	2604      	movs	r6, #4
 80031cc:	0032      	movs	r2, r6
 80031ce:	f010 f8a5 	bl	801331c <memcpy>
				    res_clear(0x07);
 80031d2:	2007      	movs	r0, #7
 80031d4:	f7ff ff50 	bl	8003078 <res_clear>
				    res.id_len = 4;
				    res.count = 1;
 80031d8:	2201      	movs	r2, #1
 80031da:	71aa      	strb	r2, [r5, #6]
				    res.type = 0x10;
 80031dc:	320f      	adds	r2, #15
				    res.id_len = 4;
 80031de:	722e      	strb	r6, [r5, #8]
				    res.type = 0x10;
 80031e0:	71ea      	strb	r2, [r5, #7]
				break;
		}
	}
	res_clear(1);
	res.count = 0;
}
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
				if(Flash.sega_setting && SYSTEM_NESICA_SUPPORT){
 80031e4:	4b15      	ldr	r3, [pc, #84]	@ (800323c <nfc_card_detect+0x98>)
 80031e6:	789b      	ldrb	r3, [r3, #2]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0fa      	beq.n	80031e2 <nfc_card_detect+0x3e>
					memcpy(res.mifare_uid,Card.iso14443_uid7,4);
 80031ec:	4d11      	ldr	r5, [pc, #68]	@ (8003234 <nfc_card_detect+0x90>)
 80031ee:	4812      	ldr	r0, [pc, #72]	@ (8003238 <nfc_card_detect+0x94>)
 80031f0:	1ca1      	adds	r1, r4, #2
 80031f2:	e7ea      	b.n	80031ca <nfc_card_detect+0x26>
				memcpy(res.IDm, Card.felica_IDm,8);
 80031f4:	4d0f      	ldr	r5, [pc, #60]	@ (8003234 <nfc_card_detect+0x90>)
 80031f6:	2208      	movs	r2, #8
 80031f8:	1ca1      	adds	r1, r4, #2
 80031fa:	480f      	ldr	r0, [pc, #60]	@ (8003238 <nfc_card_detect+0x94>)
 80031fc:	f010 f88e 	bl	801331c <memcpy>
				memcpy(res.PMm, Card.felica_PMm,8);
 8003200:	0028      	movs	r0, r5
 8003202:	0021      	movs	r1, r4
 8003204:	2208      	movs	r2, #8
 8003206:	310a      	adds	r1, #10
 8003208:	3011      	adds	r0, #17
 800320a:	f010 f887 	bl	801331c <memcpy>
		        res_clear(0x13);
 800320e:	2013      	movs	r0, #19
 8003210:	f7ff ff32 	bl	8003078 <res_clear>
		        res.count = 1;
 8003214:	2301      	movs	r3, #1
 8003216:	71ab      	strb	r3, [r5, #6]
		        res.type = 0x20;
 8003218:	331f      	adds	r3, #31
 800321a:	71eb      	strb	r3, [r5, #7]
		        res.id_len = 0x10;
 800321c:	3b10      	subs	r3, #16
 800321e:	722b      	strb	r3, [r5, #8]
		        return;
 8003220:	e7df      	b.n	80031e2 <nfc_card_detect+0x3e>
	res_clear(1);
 8003222:	2001      	movs	r0, #1
 8003224:	f7ff ff28 	bl	8003078 <res_clear>
	res.count = 0;
 8003228:	2200      	movs	r2, #0
 800322a:	4b02      	ldr	r3, [pc, #8]	@ (8003234 <nfc_card_detect+0x90>)
 800322c:	719a      	strb	r2, [r3, #6]
 800322e:	e7d8      	b.n	80031e2 <nfc_card_detect+0x3e>
 8003230:	20000a79 	.word	0x20000a79
 8003234:	20000f3e 	.word	0x20000f3e
 8003238:	20000f47 	.word	0x20000f47
 800323c:	20000b64 	.word	0x20000b64

08003240 <nfc_mifare_authorize_a>:

void nfc_mifare_authorize_a() {
	res_clear(0);
 8003240:	2000      	movs	r0, #0
void nfc_mifare_authorize_a() {
 8003242:	b510      	push	{r4, lr}
	res_clear(0);
 8003244:	f7ff ff18 	bl	8003078 <res_clear>
	if((Card.type == Card_Type_Mifare_UltraLight) && (Flash.sega_setting && SYSTEM_NESICA_SUPPORT) && !memcmp(sega_current_mifare_key_a,AimeKey,6)){
 8003248:	4a0d      	ldr	r2, [pc, #52]	@ (8003280 <nfc_mifare_authorize_a+0x40>)
 800324a:	7813      	ldrb	r3, [r2, #0]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d108      	bne.n	8003262 <nfc_mifare_authorize_a+0x22>
 8003250:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <nfc_mifare_authorize_a+0x44>)
 8003252:	490d      	ldr	r1, [pc, #52]	@ (8003288 <nfc_mifare_authorize_a+0x48>)
 8003254:	789b      	ldrb	r3, [r3, #2]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <nfc_mifare_authorize_a+0x32>
	}
	if((Card.type == Card_Type_ISO15693) && (Flash.sega_setting && SYSTEM_EPASS_SUPPORT) && !memcmp(sega_current_mifare_key_a,AimeKey,6)){
		return;
	}
	if((Card.type != Card_Type_Mifare_Classic) || !(Card.mifare_auth_status & Auth_KeyA_Right)){
		res.status = STATUS_CARD_ERROR;
 800325a:	2201      	movs	r2, #1
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <nfc_mifare_authorize_a+0x4c>)
 800325e:	711a      	strb	r2, [r3, #4]
	}
//	if(mifareAuthenticate(MCC_AUTH_KEY_A, 0, Card.iso14443_uid4, 4, sega_mifare_key_a) != RFAL_ERR_NONE){
	if(memcmp(sega_current_mifare_key_a,Card.mifare_right_key_a,6)){
		res.status = STATUS_CARD_ERROR;
	}
}
 8003260:	bd10      	pop	{r4, pc}
	if((Card.type == Card_Type_ISO15693) && (Flash.sega_setting && SYSTEM_EPASS_SUPPORT) && !memcmp(sega_current_mifare_key_a,AimeKey,6)){
 8003262:	2b04      	cmp	r3, #4
 8003264:	d0f4      	beq.n	8003250 <nfc_mifare_authorize_a+0x10>
	if((Card.type != Card_Type_Mifare_Classic) || !(Card.mifare_auth_status & Auth_KeyA_Right)){
 8003266:	2b01      	cmp	r3, #1
 8003268:	d1f7      	bne.n	800325a <nfc_mifare_authorize_a+0x1a>
 800326a:	7892      	ldrb	r2, [r2, #2]
	if(memcmp(sega_current_mifare_key_a,Card.mifare_right_key_a,6)){
 800326c:	4908      	ldr	r1, [pc, #32]	@ (8003290 <nfc_mifare_authorize_a+0x50>)
	if((Card.type != Card_Type_Mifare_Classic) || !(Card.mifare_auth_status & Auth_KeyA_Right)){
 800326e:	421a      	tst	r2, r3
 8003270:	d0f3      	beq.n	800325a <nfc_mifare_authorize_a+0x1a>
	if(memcmp(sega_current_mifare_key_a,Card.mifare_right_key_a,6)){
 8003272:	2206      	movs	r2, #6
 8003274:	4807      	ldr	r0, [pc, #28]	@ (8003294 <nfc_mifare_authorize_a+0x54>)
 8003276:	f00f fffd 	bl	8013274 <memcmp>
 800327a:	2800      	cmp	r0, #0
 800327c:	d1ed      	bne.n	800325a <nfc_mifare_authorize_a+0x1a>
 800327e:	e7ef      	b.n	8003260 <nfc_mifare_authorize_a+0x20>
 8003280:	20000a79 	.word	0x20000a79
 8003284:	20000b64 	.word	0x20000b64
 8003288:	20000012 	.word	0x20000012
 800328c:	20000f3e 	.word	0x20000f3e
 8003290:	20000aac 	.word	0x20000aac
 8003294:	20000eb8 	.word	0x20000eb8

08003298 <nfc_mifare_authorize_b>:

void nfc_mifare_authorize_b() {
	res_clear(0);
 8003298:	2000      	movs	r0, #0
void nfc_mifare_authorize_b() {
 800329a:	b510      	push	{r4, lr}
	res_clear(0);
 800329c:	f7ff feec 	bl	8003078 <res_clear>
	if((Card.type == Card_Type_Mifare_UltraLight) && (Flash.sega_setting && SYSTEM_NESICA_SUPPORT) && !memcmp(sega_current_mifare_key_b,AimeKey,6)){
 80032a0:	4a0d      	ldr	r2, [pc, #52]	@ (80032d8 <nfc_mifare_authorize_b+0x40>)
 80032a2:	7813      	ldrb	r3, [r2, #0]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d108      	bne.n	80032ba <nfc_mifare_authorize_b+0x22>
 80032a8:	4b0c      	ldr	r3, [pc, #48]	@ (80032dc <nfc_mifare_authorize_b+0x44>)
 80032aa:	490d      	ldr	r1, [pc, #52]	@ (80032e0 <nfc_mifare_authorize_b+0x48>)
 80032ac:	789b      	ldrb	r3, [r3, #2]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <nfc_mifare_authorize_b+0x32>
	}
	if((Card.type == Card_Type_ISO15693) && (Flash.sega_setting && SYSTEM_EPASS_SUPPORT) && !memcmp(sega_current_mifare_key_b,AimeKey,6)){
		return;
	}
	if((Card.type != Card_Type_Mifare_Classic) || !(Card.mifare_auth_status & Auth_KeyB_Right)){
		res.status = STATUS_CARD_ERROR;
 80032b2:	2201      	movs	r2, #1
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <nfc_mifare_authorize_b+0x4c>)
 80032b6:	711a      	strb	r2, [r3, #4]
	}
//	if(mifareAuthenticate(MCC_AUTH_KEY_B, 0, Card.iso14443_uid4, 4, sega_mifare_key_b) != RFAL_ERR_NONE){
	if(memcmp(sega_current_mifare_key_b,Card.mifare_right_key_b,6)){
		res.status = STATUS_CARD_ERROR;
	}
}
 80032b8:	bd10      	pop	{r4, pc}
	if((Card.type == Card_Type_ISO15693) && (Flash.sega_setting && SYSTEM_EPASS_SUPPORT) && !memcmp(sega_current_mifare_key_b,AimeKey,6)){
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d0f4      	beq.n	80032a8 <nfc_mifare_authorize_b+0x10>
	if((Card.type != Card_Type_Mifare_Classic) || !(Card.mifare_auth_status & Auth_KeyB_Right)){
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d1f7      	bne.n	80032b2 <nfc_mifare_authorize_b+0x1a>
 80032c2:	7893      	ldrb	r3, [r2, #2]
	if(memcmp(sega_current_mifare_key_b,Card.mifare_right_key_b,6)){
 80032c4:	4908      	ldr	r1, [pc, #32]	@ (80032e8 <nfc_mifare_authorize_b+0x50>)
	if((Card.type != Card_Type_Mifare_Classic) || !(Card.mifare_auth_status & Auth_KeyB_Right)){
 80032c6:	079b      	lsls	r3, r3, #30
 80032c8:	d5f3      	bpl.n	80032b2 <nfc_mifare_authorize_b+0x1a>
	if(memcmp(sega_current_mifare_key_b,Card.mifare_right_key_b,6)){
 80032ca:	2206      	movs	r2, #6
 80032cc:	4807      	ldr	r0, [pc, #28]	@ (80032ec <nfc_mifare_authorize_b+0x54>)
 80032ce:	f00f ffd1 	bl	8013274 <memcmp>
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d1ed      	bne.n	80032b2 <nfc_mifare_authorize_b+0x1a>
 80032d6:	e7ef      	b.n	80032b8 <nfc_mifare_authorize_b+0x20>
 80032d8:	20000a79 	.word	0x20000a79
 80032dc:	20000b64 	.word	0x20000b64
 80032e0:	20000012 	.word	0x20000012
 80032e4:	20000f3e 	.word	0x20000f3e
 80032e8:	20000ab6 	.word	0x20000ab6
 80032ec:	20000eb2 	.word	0x20000eb2

080032f0 <nfc_mifare_read>:

void nfc_mifare_read() {
	res_clear(0x10);
 80032f0:	2010      	movs	r0, #16
void nfc_mifare_read() {
 80032f2:	b510      	push	{r4, lr}
	res_clear(0x10);
 80032f4:	f7ff fec0 	bl	8003078 <res_clear>
	if((Card.type == Card_Type_Mifare_UltraLight) && (Flash.sega_setting && SYSTEM_NESICA_SUPPORT)){
 80032f8:	491e      	ldr	r1, [pc, #120]	@ (8003374 <nfc_mifare_read+0x84>)
 80032fa:	780b      	ldrb	r3, [r1, #0]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d11a      	bne.n	8003336 <nfc_mifare_read+0x46>
 8003300:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <nfc_mifare_read+0x88>)
 8003302:	789b      	ldrb	r3, [r3, #2]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d029      	beq.n	800335c <nfc_mifare_read+0x6c>
		if(req.block_no == 0){
 8003308:	4b1c      	ldr	r3, [pc, #112]	@ (800337c <nfc_mifare_read+0x8c>)
 800330a:	7a5b      	ldrb	r3, [r3, #9]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <nfc_mifare_read+0x2c>
			memcpy(res.block,Card.iso14443_uid7,4);
 8003310:	2204      	movs	r2, #4
 8003312:	481b      	ldr	r0, [pc, #108]	@ (8003380 <nfc_mifare_read+0x90>)
 8003314:	491b      	ldr	r1, [pc, #108]	@ (8003384 <nfc_mifare_read+0x94>)
		}
	}else if((Card.type != Card_Type_Mifare_Classic)){
	  res.status = STATUS_CARD_ERROR;
	  return;
	}else{
		memcpy(res.block,Card.mifare_data[req.block_no],16);
 8003316:	f010 f801 	bl	801331c <memcpy>
 800331a:	e005      	b.n	8003328 <nfc_mifare_read+0x38>
		else if(req.block_no == 2){
 800331c:	2b02      	cmp	r3, #2
 800331e:	d104      	bne.n	800332a <nfc_mifare_read+0x3a>
			ascii_to_accesscode(Card.nesica_serial ,res.block + 6);
 8003320:	4919      	ldr	r1, [pc, #100]	@ (8003388 <nfc_mifare_read+0x98>)
 8003322:	481a      	ldr	r0, [pc, #104]	@ (800338c <nfc_mifare_read+0x9c>)
 8003324:	f7ff fdf0 	bl	8002f08 <ascii_to_accesscode>
	}
//	if(mifareReadBlock(0, req.block_no, res.block, 16) != RFAL_ERR_NONE){
//		res_clear(0);
//		res.status = STATUS_CARD_ERROR;
//	}
}
 8003328:	bd10      	pop	{r4, pc}
			memset(res.block, 0, 16);
 800332a:	2210      	movs	r2, #16
 800332c:	2100      	movs	r1, #0
 800332e:	4814      	ldr	r0, [pc, #80]	@ (8003380 <nfc_mifare_read+0x90>)
 8003330:	f00f ffc0 	bl	80132b4 <memset>
 8003334:	e7f8      	b.n	8003328 <nfc_mifare_read+0x38>
	}else if((Card.type == Card_Type_ISO15693) && (Flash.sega_setting && SYSTEM_EPASS_SUPPORT)){
 8003336:	2b04      	cmp	r3, #4
 8003338:	d10e      	bne.n	8003358 <nfc_mifare_read+0x68>
 800333a:	4b0f      	ldr	r3, [pc, #60]	@ (8003378 <nfc_mifare_read+0x88>)
 800333c:	789b      	ldrb	r3, [r3, #2]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00c      	beq.n	800335c <nfc_mifare_read+0x6c>
		if(req.block_no == 0){
 8003342:	4b0e      	ldr	r3, [pc, #56]	@ (800337c <nfc_mifare_read+0x8c>)
 8003344:	7a5b      	ldrb	r3, [r3, #9]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0e2      	beq.n	8003310 <nfc_mifare_read+0x20>
		if(req.block_no == 2){
 800334a:	2b02      	cmp	r3, #2
 800334c:	d1ec      	bne.n	8003328 <nfc_mifare_read+0x38>
			hex_to_accesscode(Card.iso15693_uid ,res.block+6);
 800334e:	490e      	ldr	r1, [pc, #56]	@ (8003388 <nfc_mifare_read+0x98>)
 8003350:	480c      	ldr	r0, [pc, #48]	@ (8003384 <nfc_mifare_read+0x94>)
 8003352:	f7ff fdec 	bl	8002f2e <hex_to_accesscode>
 8003356:	e7e7      	b.n	8003328 <nfc_mifare_read+0x38>
	}else if((Card.type != Card_Type_Mifare_Classic)){
 8003358:	2b01      	cmp	r3, #1
 800335a:	d003      	beq.n	8003364 <nfc_mifare_read+0x74>
	  res.status = STATUS_CARD_ERROR;
 800335c:	2201      	movs	r2, #1
 800335e:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <nfc_mifare_read+0xa0>)
 8003360:	711a      	strb	r2, [r3, #4]
	  return;
 8003362:	e7e1      	b.n	8003328 <nfc_mifare_read+0x38>
		memcpy(res.block,Card.mifare_data[req.block_no],16);
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <nfc_mifare_read+0x8c>)
 8003366:	2210      	movs	r2, #16
 8003368:	7a5b      	ldrb	r3, [r3, #9]
 800336a:	4805      	ldr	r0, [pc, #20]	@ (8003380 <nfc_mifare_read+0x90>)
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	18c9      	adds	r1, r1, r3
 8003370:	3103      	adds	r1, #3
 8003372:	e7d0      	b.n	8003316 <nfc_mifare_read+0x26>
 8003374:	20000a79 	.word	0x20000a79
 8003378:	20000b64 	.word	0x20000b64
 800337c:	20000fbe 	.word	0x20000fbe
 8003380:	20000f44 	.word	0x20000f44
 8003384:	20000a7b 	.word	0x20000a7b
 8003388:	20000f4a 	.word	0x20000f4a
 800338c:	20000a83 	.word	0x20000a83
 8003390:	20000f3e 	.word	0x20000f3e

08003394 <nfc_felica_through>:

void nfc_felica_through() {
 8003394:	b570      	push	{r4, r5, r6, lr}
	if((Card.operation != Operation_busy) && (Card.type != Card_Type_Felica)){
 8003396:	492e      	ldr	r1, [pc, #184]	@ (8003450 <nfc_felica_through+0xbc>)
 8003398:	4c2e      	ldr	r4, [pc, #184]	@ (8003454 <nfc_felica_through+0xc0>)
 800339a:	784b      	ldrb	r3, [r1, #1]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d008      	beq.n	80033b2 <nfc_felica_through+0x1e>
 80033a0:	780b      	ldrb	r3, [r1, #0]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d005      	beq.n	80033b2 <nfc_felica_through+0x1e>
		res_clear(0);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7ff fe66 	bl	8003078 <res_clear>
		res.status = STATUS_CARD_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	7123      	strb	r3, [r4, #4]
		default:
			res_clear(0);
			res.status = STATUS_INVALID_COMMAND;
  }
  res.encap_len = res.payload_len;
}
 80033b0:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t code = req.encap_code;
 80033b2:	4d29      	ldr	r5, [pc, #164]	@ (8003458 <nfc_felica_through+0xc4>)
 80033b4:	7bab      	ldrb	r3, [r5, #14]
	res.encap_code = code + 1;
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	71e2      	strb	r2, [r4, #7]
	switch (code) {
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d040      	beq.n	8003440 <nfc_felica_through+0xac>
 80033be:	d809      	bhi.n	80033d4 <nfc_felica_through+0x40>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d011      	beq.n	80033e8 <nfc_felica_through+0x54>
 80033c4:	2b06      	cmp	r3, #6
 80033c6:	d024      	beq.n	8003412 <nfc_felica_through+0x7e>
			res_clear(0);
 80033c8:	2000      	movs	r0, #0
 80033ca:	f7ff fe55 	bl	8003078 <res_clear>
			res.status = STATUS_INVALID_COMMAND;
 80033ce:	2303      	movs	r3, #3
 80033d0:	7123      	strb	r3, [r4, #4]
 80033d2:	e012      	b.n	80033fa <nfc_felica_through+0x66>
	switch (code) {
 80033d4:	2b0c      	cmp	r3, #12
 80033d6:	d013      	beq.n	8003400 <nfc_felica_through+0x6c>
 80033d8:	2ba4      	cmp	r3, #164	@ 0xa4
 80033da:	d1f5      	bne.n	80033c8 <nfc_felica_through+0x34>
			res_clear(0x0B);
 80033dc:	200b      	movs	r0, #11
 80033de:	f7ff fe4b 	bl	8003078 <res_clear>
			res.felica_payload[0] = 0x00;
 80033e2:	2300      	movs	r3, #0
 80033e4:	7423      	strb	r3, [r4, #16]
		break;
 80033e6:	e008      	b.n	80033fa <nfc_felica_through+0x66>
			res_clear(0x14);
 80033e8:	2014      	movs	r0, #20
 80033ea:	f7ff fe45 	bl	8003078 <res_clear>
			memcpy(res.poll_systemCode,sega_systemcode,2);
 80033ee:	0020      	movs	r0, r4
 80033f0:	491a      	ldr	r1, [pc, #104]	@ (800345c <nfc_felica_through+0xc8>)
 80033f2:	3018      	adds	r0, #24
			memcpy(&res.felica_payload[1],sega_systemcode,2);
 80033f4:	2202      	movs	r2, #2
 80033f6:	f00f ff91 	bl	801331c <memcpy>
  res.encap_len = res.payload_len;
 80033fa:	7963      	ldrb	r3, [r4, #5]
 80033fc:	71a3      	strb	r3, [r4, #6]
 80033fe:	e7d7      	b.n	80033b0 <nfc_felica_through+0x1c>
			res_clear(0x0D);
 8003400:	200d      	movs	r0, #13
 8003402:	f7ff fe39 	bl	8003078 <res_clear>
			res.felica_payload[0] = 0x01;
 8003406:	2301      	movs	r3, #1
			memcpy(&res.felica_payload[1],sega_systemcode,2);
 8003408:	0020      	movs	r0, r4
 800340a:	4914      	ldr	r1, [pc, #80]	@ (800345c <nfc_felica_through+0xc8>)
			res.felica_payload[0] = 0x01;
 800340c:	7423      	strb	r3, [r4, #16]
			memcpy(&res.felica_payload[1],sega_systemcode,2);
 800340e:	3011      	adds	r0, #17
 8003410:	e7f0      	b.n	80033f4 <nfc_felica_through+0x60>
			if((req.blockList[0][0] == 0x80) && (req.blockList[0][1] == 0x82)){
 8003412:	7eeb      	ldrb	r3, [r5, #27]
 8003414:	2b80      	cmp	r3, #128	@ 0x80
 8003416:	d108      	bne.n	800342a <nfc_felica_through+0x96>
 8003418:	7f2b      	ldrb	r3, [r5, #28]
 800341a:	2b82      	cmp	r3, #130	@ 0x82
 800341c:	d105      	bne.n	800342a <nfc_felica_through+0x96>
				memcpy(res.blockData[0],Card.felica_IDm,8);
 800341e:	0020      	movs	r0, r4
 8003420:	2208      	movs	r2, #8
 8003422:	3013      	adds	r0, #19
 8003424:	3102      	adds	r1, #2
 8003426:	f00f ff79 	bl	801331c <memcpy>
				res.RW_status[0] = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	7423      	strb	r3, [r4, #16]
				res.RW_status[1] = 0;
 800342e:	7463      	strb	r3, [r4, #17]
				res.numBlock = req.numBlock;
 8003430:	7ea8      	ldrb	r0, [r5, #26]
 8003432:	74a0      	strb	r0, [r4, #18]
				res_clear(0x0D + req.numBlock * 16);
 8003434:	0100      	lsls	r0, r0, #4
 8003436:	300d      	adds	r0, #13
 8003438:	b2c0      	uxtb	r0, r0
 800343a:	f7ff fe1d 	bl	8003078 <res_clear>
		break;
 800343e:	e7dc      	b.n	80033fa <nfc_felica_through+0x66>
				res_clear(0x0C);
 8003440:	200c      	movs	r0, #12
 8003442:	f7ff fe19 	bl	8003078 <res_clear>
				res.RW_status[0] = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	7423      	strb	r3, [r4, #16]
				res.RW_status[1] = 0;
 800344a:	7463      	strb	r3, [r4, #17]
		break;
 800344c:	e7d5      	b.n	80033fa <nfc_felica_through+0x66>
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	20000a79 	.word	0x20000a79
 8003454:	20000f3e 	.word	0x20000f3e
 8003458:	20000fbe 	.word	0x20000fbe
 800345c:	200005fc 	.word	0x200005fc

08003460 <Sega_Mode_Loop>:

void Sega_Mode_Loop(uint8_t cmd){
 8003460:	b510      	push	{r4, lr}
 8003462:	0004      	movs	r4, r0
  switch (cmd) {
 8003464:	2864      	cmp	r0, #100	@ 0x64
 8003466:	d831      	bhi.n	80034cc <Sega_Mode_Loop+0x6c>
 8003468:	284f      	cmp	r0, #79	@ 0x4f
 800346a:	d80f      	bhi.n	800348c <Sega_Mode_Loop+0x2c>
 800346c:	2844      	cmp	r0, #68	@ 0x44
 800346e:	d806      	bhi.n	800347e <Sega_Mode_Loop+0x1e>
 8003470:	282f      	cmp	r0, #47	@ 0x2f
 8003472:	d81b      	bhi.n	80034ac <Sega_Mode_Loop+0x4c>
 8003474:	2800      	cmp	r0, #0
 8003476:	d041      	beq.n	80034fc <Sega_Mode_Loop+0x9c>
 8003478:	2805      	cmp	r0, #5
 800347a:	d100      	bne.n	800347e <Sega_Mode_Loop+0x1e>
 800347c:	e073      	b.n	8003566 <Sega_Mode_Loop+0x106>
        break;
      case CMD_TO_NORMAL_MODE:
        sys_to_normal_mode();
        break;
      case CMD_TO_UPDATER_MODE:
        res_clear(0);
 800347e:	2000      	movs	r0, #0
 8003480:	f7ff fdfa 	bl	8003078 <res_clear>
        res.status = STATUS_OK;
 8003484:	2200      	movs	r2, #0
 8003486:	4b3b      	ldr	r3, [pc, #236]	@ (8003574 <Sega_Mode_Loop+0x114>)
      case CMD_GET_HW_VERSION:
        sys_get_hw_version();
        break;
      case CMD_SEND_HEX_DATA:
        res_clear(0);
        res.status = STATUS_COMP_DUMMY_3RD;
 8003488:	711a      	strb	r2, [r3, #4]
        break;
 800348a:	e037      	b.n	80034fc <Sega_Mode_Loop+0x9c>
  switch (cmd) {
 800348c:	3850      	subs	r0, #80	@ 0x50
 800348e:	2814      	cmp	r0, #20
 8003490:	d8f5      	bhi.n	800347e <Sega_Mode_Loop+0x1e>
 8003492:	f7fc fe41 	bl	8000118 <__gnu_thumb1_case_sqi>
 8003496:	5951      	.short	0x5951
 8003498:	5c57f45f 	.word	0x5c57f45f
 800349c:	f4f4f4f4 	.word	0xf4f4f4f4
 80034a0:	f4f4f4f4 	.word	0xf4f4f4f4
 80034a4:	42f4f4f4 	.word	0x42f4f4f4
 80034a8:	f431      	.short	0xf431
 80034aa:	36          	.byte	0x36
 80034ab:	00          	.byte	0x00
 80034ac:	3830      	subs	r0, #48	@ 0x30
 80034ae:	2814      	cmp	r0, #20
 80034b0:	d8e5      	bhi.n	800347e <Sega_Mode_Loop+0x1e>
 80034b2:	f7fc fe31 	bl	8000118 <__gnu_thumb1_case_sqi>
 80034b6:	e42c      	.short	0xe42c
 80034b8:	e4e4e42f 	.word	0xe4e4e42f
 80034bc:	e4e4e4e4 	.word	0xe4e4e4e4
 80034c0:	e4e4e4e4 	.word	0xe4e4e4e4
 80034c4:	3b38e4e4 	.word	0x3b38e4e4
 80034c8:	1d3e      	.short	0x1d3e
 80034ca:	1d          	.byte	0x1d
 80034cb:	00          	.byte	0x00
 80034cc:	2882      	cmp	r0, #130	@ 0x82
 80034ce:	d00f      	beq.n	80034f0 <Sega_Mode_Loop+0x90>
 80034d0:	d80a      	bhi.n	80034e8 <Sega_Mode_Loop+0x88>
 80034d2:	2871      	cmp	r0, #113	@ 0x71
 80034d4:	d041      	beq.n	800355a <Sega_Mode_Loop+0xfa>
 80034d6:	2881      	cmp	r0, #129	@ 0x81
 80034d8:	d1d1      	bne.n	800347e <Sega_Mode_Loop+0x1e>
        nfc_felica_through();
        break;

    // LED
      case CMD_EXT_BOARD_LED_RGB:
        LED_show(req.color_payload[0] , req.color_payload[1] , req.color_payload[2]);
 80034da:	4b27      	ldr	r3, [pc, #156]	@ (8003578 <Sega_Mode_Loop+0x118>)
 80034dc:	79da      	ldrb	r2, [r3, #7]
 80034de:	7999      	ldrb	r1, [r3, #6]
 80034e0:	7958      	ldrb	r0, [r3, #5]
 80034e2:	f7fe fbad 	bl	8001c40 <LED_show>
    	  res_clear(0);
 80034e6:	e003      	b.n	80034f0 <Sega_Mode_Loop+0x90>
  switch (cmd) {
 80034e8:	28f0      	cmp	r0, #240	@ 0xf0
 80034ea:	d039      	beq.n	8003560 <Sega_Mode_Loop+0x100>
 80034ec:	28f5      	cmp	r0, #245	@ 0xf5
 80034ee:	d1c6      	bne.n	800347e <Sega_Mode_Loop+0x1e>
      case CMD_EXT_BOARD_INFO:
        sys_get_led_info();
        break;

      case CMD_EXT_BOARD_LED_RGB_UNKNOWN:
    	  res_clear(0);
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7ff fdc1 	bl	8003078 <res_clear>
        break;
 80034f6:	e001      	b.n	80034fc <Sega_Mode_Loop+0x9c>
        sys_to_normal_mode();
 80034f8:	f7ff fdd0 	bl	800309c <sys_to_normal_mode>
      default:
        res_clear(0);
        res.status = STATUS_OK;
        break;
  }
  sega_packet_write();
 80034fc:	f7ff fd7e 	bl	8002ffc <sega_packet_write>
}
 8003500:	bd10      	pop	{r4, pc}
        res_clear(0);
 8003502:	2000      	movs	r0, #0
 8003504:	f7ff fdb8 	bl	8003078 <res_clear>
        res.status = STATUS_FIRM_UPDATE_SUCCESS;
 8003508:	2208      	movs	r2, #8
 800350a:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <Sega_Mode_Loop+0x114>)
 800350c:	711a      	strb	r2, [r3, #4]
        sys_get_fw_version();
 800350e:	f7ff fdcf 	bl	80030b0 <sys_get_fw_version>
        break;
 8003512:	e7f3      	b.n	80034fc <Sega_Mode_Loop+0x9c>
        sys_get_hw_version();
 8003514:	f7ff fdf0 	bl	80030f8 <sys_get_hw_version>
        break;
 8003518:	e7f0      	b.n	80034fc <Sega_Mode_Loop+0x9c>
        res_clear(0);
 800351a:	2000      	movs	r0, #0
 800351c:	f7ff fdac 	bl	8003078 <res_clear>
        res.status = STATUS_COMP_DUMMY_3RD;
 8003520:	2220      	movs	r2, #32
 8003522:	4b14      	ldr	r3, [pc, #80]	@ (8003574 <Sega_Mode_Loop+0x114>)
 8003524:	e7b0      	b.n	8003488 <Sega_Mode_Loop+0x28>
    	Card.operation = Operation_idle;
 8003526:	2200      	movs	r2, #0
 8003528:	4b14      	ldr	r3, [pc, #80]	@ (800357c <Sega_Mode_Loop+0x11c>)
 800352a:	705a      	strb	r2, [r3, #1]
        nfc_stop_polling();
 800352c:	f7ff fe34 	bl	8003198 <nfc_start_polling>
        break;
 8003530:	e7e4      	b.n	80034fc <Sega_Mode_Loop+0x9c>
        nfc_card_detect();
 8003532:	f7ff fe37 	bl	80031a4 <nfc_card_detect>
        break;
 8003536:	e7e1      	b.n	80034fc <Sega_Mode_Loop+0x9c>
        memcpy(sega_current_mifare_key_a, req.key, 6);
 8003538:	4811      	ldr	r0, [pc, #68]	@ (8003580 <Sega_Mode_Loop+0x120>)
        memcpy(sega_current_mifare_key_b, req.key, 6);
 800353a:	2206      	movs	r2, #6
 800353c:	4911      	ldr	r1, [pc, #68]	@ (8003584 <Sega_Mode_Loop+0x124>)
 800353e:	f00f feed 	bl	801331c <memcpy>
        res_clear(0);
 8003542:	e7d5      	b.n	80034f0 <Sega_Mode_Loop+0x90>
        memcpy(sega_current_mifare_key_b, req.key, 6);
 8003544:	4810      	ldr	r0, [pc, #64]	@ (8003588 <Sega_Mode_Loop+0x128>)
 8003546:	e7f8      	b.n	800353a <Sega_Mode_Loop+0xda>
        nfc_mifare_authorize_a();
 8003548:	f7ff fe7a 	bl	8003240 <nfc_mifare_authorize_a>
        break;
 800354c:	e7d6      	b.n	80034fc <Sega_Mode_Loop+0x9c>
        nfc_mifare_authorize_b();
 800354e:	f7ff fea3 	bl	8003298 <nfc_mifare_authorize_b>
        break;
 8003552:	e7d3      	b.n	80034fc <Sega_Mode_Loop+0x9c>
        nfc_mifare_read();
 8003554:	f7ff fecc 	bl	80032f0 <nfc_mifare_read>
        break;
 8003558:	e7d0      	b.n	80034fc <Sega_Mode_Loop+0x9c>
        nfc_felica_through();
 800355a:	f7ff ff1b 	bl	8003394 <nfc_felica_through>
        break;
 800355e:	e7cd      	b.n	80034fc <Sega_Mode_Loop+0x9c>
        sys_get_led_info();
 8003560:	f7ff fdf2 	bl	8003148 <sys_get_led_info>
        break;
 8003564:	e7ca      	b.n	80034fc <Sega_Mode_Loop+0x9c>
        res_clear(0);
 8003566:	2000      	movs	r0, #0
 8003568:	f7ff fd86 	bl	8003078 <res_clear>
        res.status = STATUS_SUM_ERROR;
 800356c:	4b01      	ldr	r3, [pc, #4]	@ (8003574 <Sega_Mode_Loop+0x114>)
 800356e:	711c      	strb	r4, [r3, #4]
        break;
 8003570:	e7c4      	b.n	80034fc <Sega_Mode_Loop+0x9c>
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	20000f3e 	.word	0x20000f3e
 8003578:	20000fbe 	.word	0x20000fbe
 800357c:	20000a79 	.word	0x20000a79
 8003580:	20000eb8 	.word	0x20000eb8
 8003584:	20000fc3 	.word	0x20000fc3
 8003588:	20000eb2 	.word	0x20000eb2

0800358c <hex2str>:
const char spice_insert_cmd[78] = "{\"id\":1,\"module\":\"card\",\"function\":\"insert\",\"params\":[0,\"E00401AF87654321\"]}";//应为E00401开头
const char spice_light_cmd[113] = "{\"id\":2,\"module\":\"lights\",\"function\":\"read\",\"params\":[\"IC Card Reader R\",\"IC Card Reader G\",\"IC Card Reader B\"]}";
uint8_t spice_led_ready = 0;


char hex2str(uint8_t hex){
 800358c:	0003      	movs	r3, r0
  //注意这里传输的必须是半字节
  if(hex < 0xA){
    return (hex + 48);//ascii 0 = 48
  }
  else{
    return (hex - 0xA + 65);//ascii A = 65
 800358e:	3037      	adds	r0, #55	@ 0x37
 8003590:	b2c0      	uxtb	r0, r0
  if(hex < 0xA){
 8003592:	2b09      	cmp	r3, #9
 8003594:	d801      	bhi.n	800359a <hex2str+0xe>
    return (hex + 48);//ascii 0 = 48
 8003596:	3330      	adds	r3, #48	@ 0x30
 8003598:	b2d8      	uxtb	r0, r3
  }
}
 800359a:	4770      	bx	lr

0800359c <spice_mifare_process>:

void spice_mifare_process(){
 800359c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	memcpy(spice_api_send_buffer,spice_insert_cmd,78);
 800359e:	4c22      	ldr	r4, [pc, #136]	@ (8003628 <spice_mifare_process+0x8c>)
 80035a0:	224d      	movs	r2, #77	@ 0x4d
 80035a2:	4922      	ldr	r1, [pc, #136]	@ (800362c <spice_mifare_process+0x90>)
 80035a4:	0020      	movs	r0, r4
 80035a6:	f00f feb9 	bl	801331c <memcpy>
 80035aa:	0023      	movs	r3, r4
 80035ac:	2200      	movs	r2, #0
	if((memcmp(Card.mifare_right_key_a,AimeKey,6) == 0) && (Flash.spice_setting & SYSTEM_AIME_SUPPORT)){
 80035ae:	4d20      	ldr	r5, [pc, #128]	@ (8003630 <spice_mifare_process+0x94>)
	memcpy(spice_api_send_buffer,spice_insert_cmd,78);
 80035b0:	334d      	adds	r3, #77	@ 0x4d
 80035b2:	701a      	strb	r2, [r3, #0]
	if((memcmp(Card.mifare_right_key_a,AimeKey,6) == 0) && (Flash.spice_setting & SYSTEM_AIME_SUPPORT)){
 80035b4:	0028      	movs	r0, r5
 80035b6:	491f      	ldr	r1, [pc, #124]	@ (8003634 <spice_mifare_process+0x98>)
 80035b8:	3206      	adds	r2, #6
 80035ba:	f00f fe5b 	bl	8013274 <memcmp>
 80035be:	2800      	cmp	r0, #0
 80035c0:	d103      	bne.n	80035ca <spice_mifare_process+0x2e>
 80035c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <spice_mifare_process+0x9c>)
 80035c4:	78db      	ldrb	r3, [r3, #3]
 80035c6:	079b      	lsls	r3, r3, #30
 80035c8:	d40a      	bmi.n	80035e0 <spice_mifare_process+0x44>
		//aime
	}else if((memcmp(Card.mifare_right_key_a,BanaKey_A,6) == 0) && (Flash.spice_setting & SYSTEM_BANA_SUPPORT)){
 80035ca:	2206      	movs	r2, #6
 80035cc:	0028      	movs	r0, r5
 80035ce:	491b      	ldr	r1, [pc, #108]	@ (800363c <spice_mifare_process+0xa0>)
 80035d0:	f00f fe50 	bl	8013274 <memcmp>
 80035d4:	2800      	cmp	r0, #0
 80035d6:	d126      	bne.n	8003626 <spice_mifare_process+0x8a>
 80035d8:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <spice_mifare_process+0x9c>)
 80035da:	78db      	ldrb	r3, [r3, #3]
 80035dc:	075b      	lsls	r3, r3, #29
 80035de:	d522      	bpl.n	8003626 <spice_mifare_process+0x8a>
		//bana
	}else{
		return;
	}
	if(Card.mifare_auth_status == Auth_ALL_Right){
 80035e0:	4b17      	ldr	r3, [pc, #92]	@ (8003640 <spice_mifare_process+0xa4>)
 80035e2:	789b      	ldrb	r3, [r3, #2]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d11e      	bne.n	8003626 <spice_mifare_process+0x8a>
 80035e8:	2500      	movs	r5, #0
		for(uint8_t i = 0;i<4;i++){
		  spice_api_send_buffer[65+2*i] = hex2str(Card.iso14443_uid4[i] >> 4);
 80035ea:	4b16      	ldr	r3, [pc, #88]	@ (8003644 <spice_mifare_process+0xa8>)
 80035ec:	4e16      	ldr	r6, [pc, #88]	@ (8003648 <spice_mifare_process+0xac>)
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	9b01      	ldr	r3, [sp, #4]
 80035f2:	5d5f      	ldrb	r7, [r3, r5]
		for(uint8_t i = 0;i<4;i++){
 80035f4:	3501      	adds	r5, #1
		  spice_api_send_buffer[65+2*i] = hex2str(Card.iso14443_uid4[i] >> 4);
 80035f6:	0938      	lsrs	r0, r7, #4
 80035f8:	f7ff ffc8 	bl	800358c <hex2str>
 80035fc:	7030      	strb	r0, [r6, #0]
		  spice_api_send_buffer[66+2*i] = hex2str(Card.iso14443_uid4[i] & 0xF);
 80035fe:	200f      	movs	r0, #15
 8003600:	4038      	ands	r0, r7
 8003602:	f7ff ffc3 	bl	800358c <hex2str>
 8003606:	7070      	strb	r0, [r6, #1]
		for(uint8_t i = 0;i<4;i++){
 8003608:	3602      	adds	r6, #2
 800360a:	2d04      	cmp	r5, #4
 800360c:	d1f0      	bne.n	80035f0 <spice_mifare_process+0x54>
		}
		spice_api_send_buffer[54] = 48;
		if(Flash.spice_setting & SYSTEM_MODE_SEETING){//开启了2P刷卡
 800360e:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <spice_mifare_process+0x9c>)
 8003610:	78db      	ldrb	r3, [r3, #3]
 8003612:	07db      	lsls	r3, r3, #31
 8003614:	d503      	bpl.n	800361e <spice_mifare_process+0x82>
			spice_api_send_buffer[54] = 49;//"params\":[1,......
 8003616:	0023      	movs	r3, r4
 8003618:	2231      	movs	r2, #49	@ 0x31
 800361a:	3336      	adds	r3, #54	@ 0x36
 800361c:	701a      	strb	r2, [r3, #0]
		}
		Interface_Send(spice_api_send_buffer,79);
 800361e:	214f      	movs	r1, #79	@ 0x4f
 8003620:	0020      	movs	r0, r4
 8003622:	f7ff fa93 	bl	8002b4c <Interface_Send>
	}
}
 8003626:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003628:	2000103e 	.word	0x2000103e
 800362c:	08013ce7 	.word	0x08013ce7
 8003630:	20000aac 	.word	0x20000aac
 8003634:	20000012 	.word	0x20000012
 8003638:	20000b64 	.word	0x20000b64
 800363c:	2000000c 	.word	0x2000000c
 8003640:	20000a79 	.word	0x20000a79
 8003644:	20000a7c 	.word	0x20000a7c
 8003648:	2000107f 	.word	0x2000107f

0800364c <spice_felice_process>:

void spice_felice_process(){
 800364c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	memcpy(spice_api_send_buffer,spice_insert_cmd,78);
 800364e:	4f10      	ldr	r7, [pc, #64]	@ (8003690 <spice_felice_process+0x44>)
 8003650:	224d      	movs	r2, #77	@ 0x4d
 8003652:	0038      	movs	r0, r7
 8003654:	490f      	ldr	r1, [pc, #60]	@ (8003694 <spice_felice_process+0x48>)
 8003656:	f00f fe61 	bl	801331c <memcpy>
 800365a:	003b      	movs	r3, r7
 800365c:	2400      	movs	r4, #0
 800365e:	334d      	adds	r3, #77	@ 0x4d
 8003660:	701c      	strb	r4, [r3, #0]
    for(uint8_t i = 0;i<8;i++){
    	spice_api_send_buffer[57+2*i] = hex2str(Card.felica_IDm[i] >> 4);//高4位转换为字符
 8003662:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <spice_felice_process+0x4c>)
 8003664:	4d0d      	ldr	r5, [pc, #52]	@ (800369c <spice_felice_process+0x50>)
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	9b01      	ldr	r3, [sp, #4]
 800366a:	5d1e      	ldrb	r6, [r3, r4]
    for(uint8_t i = 0;i<8;i++){
 800366c:	3401      	adds	r4, #1
    	spice_api_send_buffer[57+2*i] = hex2str(Card.felica_IDm[i] >> 4);//高4位转换为字符
 800366e:	0930      	lsrs	r0, r6, #4
 8003670:	f7ff ff8c 	bl	800358c <hex2str>
 8003674:	7028      	strb	r0, [r5, #0]
    	spice_api_send_buffer[58+2*i] = hex2str(Card.felica_IDm[i] & 0xF);//低4位转换为字符
 8003676:	200f      	movs	r0, #15
 8003678:	4030      	ands	r0, r6
 800367a:	f7ff ff87 	bl	800358c <hex2str>
 800367e:	7068      	strb	r0, [r5, #1]
    for(uint8_t i = 0;i<8;i++){
 8003680:	3502      	adds	r5, #2
 8003682:	2c08      	cmp	r4, #8
 8003684:	d1f0      	bne.n	8003668 <spice_felice_process+0x1c>
    }
    if(Flash.spice_setting & SYSTEM_MODE_SEETING){//开启了2P刷卡
		spice_api_send_buffer[54] = 49;//"params\":[1,......
	}
    spice_api_send_buffer[54] = 48;
    Interface_Send(spice_api_send_buffer,79);
 8003686:	0038      	movs	r0, r7
 8003688:	214f      	movs	r1, #79	@ 0x4f
 800368a:	f7ff fa5f 	bl	8002b4c <Interface_Send>
}
 800368e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003690:	2000103e 	.word	0x2000103e
 8003694:	08013ce7 	.word	0x08013ce7
 8003698:	20000a7b 	.word	0x20000a7b
 800369c:	20001077 	.word	0x20001077

080036a0 <spice_iso15693_process>:

void spice_iso15693_process(){
 80036a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	memcpy(spice_api_send_buffer,spice_insert_cmd,78);
 80036a2:	4f10      	ldr	r7, [pc, #64]	@ (80036e4 <spice_iso15693_process+0x44>)
 80036a4:	224d      	movs	r2, #77	@ 0x4d
 80036a6:	0038      	movs	r0, r7
 80036a8:	490f      	ldr	r1, [pc, #60]	@ (80036e8 <spice_iso15693_process+0x48>)
 80036aa:	f00f fe37 	bl	801331c <memcpy>
 80036ae:	003b      	movs	r3, r7
 80036b0:	2400      	movs	r4, #0
 80036b2:	334d      	adds	r3, #77	@ 0x4d
 80036b4:	701c      	strb	r4, [r3, #0]
    for(uint8_t i = 0;i<8;i++){
    	spice_api_send_buffer[57+2*i] = hex2str(Card.iso15693_uid[i] >> 4);//高4位转换为字符
 80036b6:	4b0d      	ldr	r3, [pc, #52]	@ (80036ec <spice_iso15693_process+0x4c>)
 80036b8:	4d0d      	ldr	r5, [pc, #52]	@ (80036f0 <spice_iso15693_process+0x50>)
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	9b01      	ldr	r3, [sp, #4]
 80036be:	5d1e      	ldrb	r6, [r3, r4]
    for(uint8_t i = 0;i<8;i++){
 80036c0:	3401      	adds	r4, #1
    	spice_api_send_buffer[57+2*i] = hex2str(Card.iso15693_uid[i] >> 4);//高4位转换为字符
 80036c2:	0930      	lsrs	r0, r6, #4
 80036c4:	f7ff ff62 	bl	800358c <hex2str>
 80036c8:	7028      	strb	r0, [r5, #0]
    	spice_api_send_buffer[58+2*i] = hex2str(Card.iso15693_uid[i] & 0xF);//低4位转换为字符
 80036ca:	200f      	movs	r0, #15
 80036cc:	4030      	ands	r0, r6
 80036ce:	f7ff ff5d 	bl	800358c <hex2str>
 80036d2:	7068      	strb	r0, [r5, #1]
    for(uint8_t i = 0;i<8;i++){
 80036d4:	3502      	adds	r5, #2
 80036d6:	2c08      	cmp	r4, #8
 80036d8:	d1f0      	bne.n	80036bc <spice_iso15693_process+0x1c>
    }
    if(Flash.spice_setting & SYSTEM_MODE_SEETING){//开启了2P刷卡
		spice_api_send_buffer[54] = 49;//"params\":[1,......
	}
    spice_api_send_buffer[54] = 48;
    Interface_Send(spice_api_send_buffer,79);
 80036da:	0038      	movs	r0, r7
 80036dc:	214f      	movs	r1, #79	@ 0x4f
 80036de:	f7ff fa35 	bl	8002b4c <Interface_Send>
}
 80036e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80036e4:	2000103e 	.word	0x2000103e
 80036e8:	08013ce7 	.word	0x08013ce7
 80036ec:	20000a7b 	.word	0x20000a7b
 80036f0:	20001077 	.word	0x20001077

080036f4 <spice_mifare_ul_process>:

void spice_mifare_ul_process(){
 80036f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	memcpy(spice_api_send_buffer,spice_insert_cmd,78);
 80036f6:	4f17      	ldr	r7, [pc, #92]	@ (8003754 <spice_mifare_ul_process+0x60>)
 80036f8:	224d      	movs	r2, #77	@ 0x4d
 80036fa:	0038      	movs	r0, r7
 80036fc:	4916      	ldr	r1, [pc, #88]	@ (8003758 <spice_mifare_ul_process+0x64>)
 80036fe:	f00f fe0d 	bl	801331c <memcpy>
 8003702:	003a      	movs	r2, r7
 8003704:	2300      	movs	r3, #0
	uint8_t ret = 0;
	for(uint8_t i = 0;i<7;i++){
		if(Card.iso14443_uid7[1] == 0){
 8003706:	2407      	movs	r4, #7
	memcpy(spice_api_send_buffer,spice_insert_cmd,78);
 8003708:	324d      	adds	r2, #77	@ 0x4d
 800370a:	7013      	strb	r3, [r2, #0]
		if(Card.iso14443_uid7[1] == 0){
 800370c:	4a13      	ldr	r2, [pc, #76]	@ (800375c <spice_mifare_ul_process+0x68>)
 800370e:	78d2      	ldrb	r2, [r2, #3]
 8003710:	2a00      	cmp	r2, #0
 8003712:	d101      	bne.n	8003718 <spice_mifare_ul_process+0x24>
			ret++;
 8003714:	3301      	adds	r3, #1
 8003716:	b2db      	uxtb	r3, r3
	for(uint8_t i = 0;i<7;i++){
 8003718:	3c01      	subs	r4, #1
 800371a:	b2e4      	uxtb	r4, r4
 800371c:	2c00      	cmp	r4, #0
 800371e:	d1f7      	bne.n	8003710 <spice_mifare_ul_process+0x1c>
		}
	}
	if(ret > 5){
 8003720:	2b05      	cmp	r3, #5
 8003722:	d815      	bhi.n	8003750 <spice_mifare_ul_process+0x5c>
		return;
	}
    for(uint8_t i = 0;i<7;i++){
    	spice_api_send_buffer[59+2*i] = hex2str(Card.iso14443_uid7[i] >> 4);//高4位转换为字符
 8003724:	4b0e      	ldr	r3, [pc, #56]	@ (8003760 <spice_mifare_ul_process+0x6c>)
 8003726:	4d0f      	ldr	r5, [pc, #60]	@ (8003764 <spice_mifare_ul_process+0x70>)
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	9b01      	ldr	r3, [sp, #4]
 800372c:	5d1e      	ldrb	r6, [r3, r4]
    for(uint8_t i = 0;i<7;i++){
 800372e:	3401      	adds	r4, #1
    	spice_api_send_buffer[59+2*i] = hex2str(Card.iso14443_uid7[i] >> 4);//高4位转换为字符
 8003730:	0930      	lsrs	r0, r6, #4
 8003732:	f7ff ff2b 	bl	800358c <hex2str>
 8003736:	7028      	strb	r0, [r5, #0]
    	spice_api_send_buffer[60+2*i] = hex2str(Card.iso14443_uid7[i] & 0xF);//低4位转换为字符
 8003738:	200f      	movs	r0, #15
 800373a:	4030      	ands	r0, r6
 800373c:	f7ff ff26 	bl	800358c <hex2str>
 8003740:	7068      	strb	r0, [r5, #1]
    for(uint8_t i = 0;i<7;i++){
 8003742:	3502      	adds	r5, #2
 8003744:	2c07      	cmp	r4, #7
 8003746:	d1f0      	bne.n	800372a <spice_mifare_ul_process+0x36>
    }
    if(Flash.spice_setting & SYSTEM_MODE_SEETING){//开启了2P刷卡
    	spice_api_send_buffer[54] = 49;//"params\":[1,......
    }
    spice_api_send_buffer[54] = 48;
    Interface_Send(spice_api_send_buffer,79);
 8003748:	214f      	movs	r1, #79	@ 0x4f
 800374a:	0038      	movs	r0, r7
 800374c:	f7ff f9fe 	bl	8002b4c <Interface_Send>
}
 8003750:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	2000103e 	.word	0x2000103e
 8003758:	08013ce7 	.word	0x08013ce7
 800375c:	20000a79 	.word	0x20000a79
 8003760:	20000a7b 	.word	0x20000a7b
 8003764:	20001079 	.word	0x20001079

08003768 <spice_request>:

void spice_request(){
 8003768:	b510      	push	{r4, lr}
	  Interface_Send(spice_light_cmd,113);
 800376a:	2171      	movs	r1, #113	@ 0x71
 800376c:	4801      	ldr	r0, [pc, #4]	@ (8003774 <spice_request+0xc>)
 800376e:	f7ff f9ed 	bl	8002b4c <Interface_Send>
}
 8003772:	bd10      	pop	{r4, pc}
 8003774:	08014323 	.word	0x08014323

08003778 <spice_request_check>:

uint8_t spice_request_check(uint8_t* data,uint8_t len){
 8003778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if((data[0] == '{') && (data[1] == '\"') && (data[2] == 'i') && (data[3] == 'd') && (data[4] == '\"') && (data[5] == ':')){
 800377a:	7803      	ldrb	r3, [r0, #0]
uint8_t spice_request_check(uint8_t* data,uint8_t len){
 800377c:	0004      	movs	r4, r0
			}
			LED_show(spice_api_target_rgb[0],spice_api_target_rgb[1],spice_api_target_rgb[2]);
			return 1;
		}
	}else{
		return 0;
 800377e:	2000      	movs	r0, #0
	if((data[0] == '{') && (data[1] == '\"') && (data[2] == 'i') && (data[3] == 'd') && (data[4] == '\"') && (data[5] == ':')){
 8003780:	2b7b      	cmp	r3, #123	@ 0x7b
 8003782:	d140      	bne.n	8003806 <spice_request_check+0x8e>
 8003784:	7863      	ldrb	r3, [r4, #1]
 8003786:	2b22      	cmp	r3, #34	@ 0x22
 8003788:	d13d      	bne.n	8003806 <spice_request_check+0x8e>
 800378a:	78a3      	ldrb	r3, [r4, #2]
 800378c:	2b69      	cmp	r3, #105	@ 0x69
 800378e:	d13a      	bne.n	8003806 <spice_request_check+0x8e>
 8003790:	78e3      	ldrb	r3, [r4, #3]
 8003792:	2b64      	cmp	r3, #100	@ 0x64
 8003794:	d137      	bne.n	8003806 <spice_request_check+0x8e>
 8003796:	7923      	ldrb	r3, [r4, #4]
 8003798:	2b22      	cmp	r3, #34	@ 0x22
 800379a:	d134      	bne.n	8003806 <spice_request_check+0x8e>
 800379c:	7963      	ldrb	r3, [r4, #5]
 800379e:	2b3a      	cmp	r3, #58	@ 0x3a
 80037a0:	d131      	bne.n	8003806 <spice_request_check+0x8e>
		if(len < 120){
 80037a2:	2977      	cmp	r1, #119	@ 0x77
 80037a4:	d92e      	bls.n	8003804 <spice_request_check+0x8c>
			uint8_t spice_api_target_rgb[3] = {0,0,0};
 80037a6:	0005      	movs	r5, r0
 80037a8:	0007      	movs	r7, r0
			uint8_t sync_count = 0;
 80037aa:	0006      	movs	r6, r0
 80037ac:	1863      	adds	r3, r4, r1
 80037ae:	9301      	str	r3, [sp, #4]
			uint8_t spice_api_target_rgb[3] = {0,0,0};
 80037b0:	9000      	str	r0, [sp, #0]
				if(data[i] == ','){
 80037b2:	7823      	ldrb	r3, [r4, #0]
 80037b4:	2b2c      	cmp	r3, #44	@ 0x2c
 80037b6:	d11c      	bne.n	80037f2 <spice_request_check+0x7a>
					sync_count ++;
 80037b8:	3601      	adds	r6, #1
 80037ba:	b2f6      	uxtb	r6, r6
					if(sync_count == 3){
 80037bc:	2e03      	cmp	r6, #3
 80037be:	d123      	bne.n	8003808 <spice_request_check+0x90>
							spice_api_target_rgb[0] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10 + (data[i+4] - 48) * 1);
 80037c0:	220a      	movs	r2, #10
 80037c2:	78e1      	ldrb	r1, [r4, #3]
 80037c4:	7860      	ldrb	r0, [r4, #1]
 80037c6:	3930      	subs	r1, #48	@ 0x30
 80037c8:	434a      	muls	r2, r1
 80037ca:	2164      	movs	r1, #100	@ 0x64
 80037cc:	3830      	subs	r0, #48	@ 0x30
 80037ce:	4348      	muls	r0, r1
						if(data[i+4] >= 0x30 && data[i+4] <= 0x39){
 80037d0:	7923      	ldrb	r3, [r4, #4]
							spice_api_target_rgb[0] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10 + (data[i+4] - 48) * 1);
 80037d2:	1810      	adds	r0, r2, r0
						if(data[i+4] >= 0x30 && data[i+4] <= 0x39){
 80037d4:	3b30      	subs	r3, #48	@ 0x30
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	2a09      	cmp	r2, #9
 80037da:	d800      	bhi.n	80037de <spice_request_check+0x66>
							spice_api_target_rgb[0] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10 + (data[i+4] - 48) * 1);
 80037dc:	1818      	adds	r0, r3, r0
							spice_api_target_rgb[0] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10);
 80037de:	f7fd fd9b 	bl	8001318 <__aeabi_i2d>
 80037e2:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <spice_request_check+0xfc>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	f7fc fe6b 	bl	80004c0 <__aeabi_dmul>
 80037ea:	f7fc fe4b 	bl	8000484 <__aeabi_d2uiz>
 80037ee:	b2c3      	uxtb	r3, r0
 80037f0:	9300      	str	r3, [sp, #0]
			for(uint8_t i = 0;i<len;i++){
 80037f2:	9b01      	ldr	r3, [sp, #4]
 80037f4:	3401      	adds	r4, #1
 80037f6:	42a3      	cmp	r3, r4
 80037f8:	d1db      	bne.n	80037b2 <spice_request_check+0x3a>
			LED_show(spice_api_target_rgb[0],spice_api_target_rgb[1],spice_api_target_rgb[2]);
 80037fa:	002a      	movs	r2, r5
 80037fc:	0039      	movs	r1, r7
 80037fe:	9800      	ldr	r0, [sp, #0]
 8003800:	f7fe fa1e 	bl	8001c40 <LED_show>
			return 1;
 8003804:	2001      	movs	r0, #1
	}
}
 8003806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					if(sync_count == 6){
 8003808:	2e06      	cmp	r6, #6
 800380a:	d118      	bne.n	800383e <spice_request_check+0xc6>
							spice_api_target_rgb[1] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10 + (data[i+4] - 48) * 1);
 800380c:	2264      	movs	r2, #100	@ 0x64
 800380e:	7861      	ldrb	r1, [r4, #1]
 8003810:	78e0      	ldrb	r0, [r4, #3]
 8003812:	3930      	subs	r1, #48	@ 0x30
 8003814:	434a      	muls	r2, r1
 8003816:	210a      	movs	r1, #10
 8003818:	3830      	subs	r0, #48	@ 0x30
 800381a:	4348      	muls	r0, r1
						if(data[i+4] >= 0x30 && data[i+4] <= 0x39){
 800381c:	7923      	ldrb	r3, [r4, #4]
							spice_api_target_rgb[1] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10 + (data[i+4] - 48) * 1);
 800381e:	1810      	adds	r0, r2, r0
						if(data[i+4] >= 0x30 && data[i+4] <= 0x39){
 8003820:	3b30      	subs	r3, #48	@ 0x30
 8003822:	b2da      	uxtb	r2, r3
 8003824:	2a09      	cmp	r2, #9
 8003826:	d800      	bhi.n	800382a <spice_request_check+0xb2>
							spice_api_target_rgb[1] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10 + (data[i+4] - 48) * 1);
 8003828:	1818      	adds	r0, r3, r0
							spice_api_target_rgb[1] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10);
 800382a:	f7fd fd75 	bl	8001318 <__aeabi_i2d>
 800382e:	2200      	movs	r2, #0
 8003830:	4b10      	ldr	r3, [pc, #64]	@ (8003874 <spice_request_check+0xfc>)
 8003832:	f7fc fe45 	bl	80004c0 <__aeabi_dmul>
 8003836:	f7fc fe25 	bl	8000484 <__aeabi_d2uiz>
 800383a:	b2c7      	uxtb	r7, r0
					if(sync_count == 9){
 800383c:	e7d9      	b.n	80037f2 <spice_request_check+0x7a>
 800383e:	2e09      	cmp	r6, #9
 8003840:	d1d7      	bne.n	80037f2 <spice_request_check+0x7a>
							spice_api_target_rgb[2] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10 + (data[i+4] - 48) * 1);
 8003842:	2264      	movs	r2, #100	@ 0x64
 8003844:	7861      	ldrb	r1, [r4, #1]
 8003846:	78e0      	ldrb	r0, [r4, #3]
 8003848:	3930      	subs	r1, #48	@ 0x30
 800384a:	434a      	muls	r2, r1
 800384c:	210a      	movs	r1, #10
 800384e:	3830      	subs	r0, #48	@ 0x30
 8003850:	4348      	muls	r0, r1
						if(data[i+4] >= 0x30 && data[i+4] <= 0x39){
 8003852:	7923      	ldrb	r3, [r4, #4]
							spice_api_target_rgb[2] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10 + (data[i+4] - 48) * 1);
 8003854:	1810      	adds	r0, r2, r0
						if(data[i+4] >= 0x30 && data[i+4] <= 0x39){
 8003856:	3b30      	subs	r3, #48	@ 0x30
 8003858:	b2da      	uxtb	r2, r3
 800385a:	2a09      	cmp	r2, #9
 800385c:	d800      	bhi.n	8003860 <spice_request_check+0xe8>
							spice_api_target_rgb[2] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10 + (data[i+4] - 48) * 1);
 800385e:	1818      	adds	r0, r3, r0
							spice_api_target_rgb[2] = 2.5 * ((data[i+1] - 48) * 100 + (data[i+3] - 48) * 10);
 8003860:	f7fd fd5a 	bl	8001318 <__aeabi_i2d>
 8003864:	2200      	movs	r2, #0
 8003866:	4b03      	ldr	r3, [pc, #12]	@ (8003874 <spice_request_check+0xfc>)
 8003868:	f7fc fe2a 	bl	80004c0 <__aeabi_dmul>
 800386c:	f7fc fe0a 	bl	8000484 <__aeabi_d2uiz>
 8003870:	b2c5      	uxtb	r5, r0
 8003872:	e7be      	b.n	80037f2 <spice_request_check+0x7a>
 8003874:	40040000 	.word	0x40040000

08003878 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003878:	2101      	movs	r1, #1
 800387a:	4b0a      	ldr	r3, [pc, #40]	@ (80038a4 <HAL_MspInit+0x2c>)
{
 800387c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	430a      	orrs	r2, r1
 8003882:	619a      	str	r2, [r3, #24]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003888:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388a:	9200      	str	r2, [sp, #0]
 800388c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	0549      	lsls	r1, r1, #21
 8003892:	430a      	orrs	r2, r1
 8003894:	61da      	str	r2, [r3, #28]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	400b      	ands	r3, r1
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800389e:	b002      	add	sp, #8
 80038a0:	4770      	bx	lr
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	40021000 	.word	0x40021000

080038a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038a8:	e7fe      	b.n	80038a8 <NMI_Handler>

080038aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038aa:	e7fe      	b.n	80038aa <HardFault_Handler>

080038ac <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80038ac:	4770      	bx	lr

080038ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80038ae:	4770      	bx	lr

080038b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038b2:	f003 fbcd 	bl	8007050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038b6:	bd10      	pop	{r4, pc}

080038b8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80038b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80038ba:	4803      	ldr	r0, [pc, #12]	@ (80038c8 <EXTI0_1_IRQHandler+0x10>)
 80038bc:	f003 fd42 	bl	8007344 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 80038c0:	4802      	ldr	r0, [pc, #8]	@ (80038cc <EXTI0_1_IRQHandler+0x14>)
 80038c2:	f003 fd3f 	bl	8007344 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80038c6:	bd10      	pop	{r4, pc}
 80038c8:	20000608 	.word	0x20000608
 80038cc:	2000343c 	.word	0x2000343c

080038d0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80038d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80038d2:	4803      	ldr	r0, [pc, #12]	@ (80038e0 <DMA1_Channel2_3_IRQHandler+0x10>)
 80038d4:	f003 fcdd 	bl	8007292 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80038d8:	4802      	ldr	r0, [pc, #8]	@ (80038e4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80038da:	f003 fcda 	bl	8007292 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80038de:	bd10      	pop	{r4, pc}
 80038e0:	20001094 	.word	0x20001094
 80038e4:	200011ac 	.word	0x200011ac

080038e8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80038e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80038ea:	4802      	ldr	r0, [pc, #8]	@ (80038f4 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 80038ec:	f003 fcd1 	bl	8007292 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80038f0:	bd10      	pop	{r4, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20001168 	.word	0x20001168

080038f8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80038f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80038fa:	4802      	ldr	r0, [pc, #8]	@ (8003904 <TIM17_IRQHandler+0xc>)
 80038fc:	f005 fe3f 	bl	800957e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003900:	bd10      	pop	{r4, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	200010d8 	.word	0x200010d8

08003908 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003908:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800390a:	4802      	ldr	r0, [pc, #8]	@ (8003914 <SPI1_IRQHandler+0xc>)
 800390c:	f005 fc5e 	bl	80091cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003910:	bd10      	pop	{r4, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000b00 	.word	0x20000b00

08003918 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003918:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800391a:	4803      	ldr	r0, [pc, #12]	@ (8003928 <USART1_IRQHandler+0x10>)
 800391c:	f006 fac6 	bl	8009eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	Reader_UART_IRQHandler();
 8003920:	f7ff f880 	bl	8002a24 <Reader_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8003924:	bd10      	pop	{r4, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	200011f0 	.word	0x200011f0

0800392c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800392c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800392e:	4802      	ldr	r0, [pc, #8]	@ (8003938 <USART2_IRQHandler+0xc>)
 8003930:	f006 fabc 	bl	8009eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003934:	bd10      	pop	{r4, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	200019ac 	.word	0x200019ac

0800393c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800393c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800393e:	4802      	ldr	r0, [pc, #8]	@ (8003948 <USB_IRQHandler+0xc>)
 8003940:	f003 fe54 	bl	80075ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003944:	bd10      	pop	{r4, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	20001278 	.word	0x20001278

0800394c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800394c:	490b      	ldr	r1, [pc, #44]	@ (800397c <_sbrk+0x30>)
 800394e:	4a0c      	ldr	r2, [pc, #48]	@ (8003980 <_sbrk+0x34>)
{
 8003950:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003952:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003954:	490b      	ldr	r1, [pc, #44]	@ (8003984 <_sbrk+0x38>)
{
 8003956:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003958:	6808      	ldr	r0, [r1, #0]
 800395a:	2800      	cmp	r0, #0
 800395c:	d101      	bne.n	8003962 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800395e:	480a      	ldr	r0, [pc, #40]	@ (8003988 <_sbrk+0x3c>)
 8003960:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003962:	6808      	ldr	r0, [r1, #0]
 8003964:	18c3      	adds	r3, r0, r3
 8003966:	4293      	cmp	r3, r2
 8003968:	d906      	bls.n	8003978 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800396a:	f00f fcab 	bl	80132c4 <__errno>
 800396e:	230c      	movs	r3, #12
 8003970:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003972:	2001      	movs	r0, #1
 8003974:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003976:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003978:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 800397a:	e7fc      	b.n	8003976 <_sbrk+0x2a>
 800397c:	00000400 	.word	0x00000400
 8003980:	20004000 	.word	0x20004000
 8003984:	20001090 	.word	0x20001090
 8003988:	20003590 	.word	0x20003590

0800398c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800398c:	4770      	bx	lr
	...

08003990 <MX_TIM17_Init>:
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003990:	480e      	ldr	r0, [pc, #56]	@ (80039cc <MX_TIM17_Init+0x3c>)
 8003992:	4b0f      	ldr	r3, [pc, #60]	@ (80039d0 <MX_TIM17_Init+0x40>)
{
 8003994:	b510      	push	{r4, lr}
  htim17.Instance = TIM17;
 8003996:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 7100;
 8003998:	4b0e      	ldr	r3, [pc, #56]	@ (80039d4 <MX_TIM17_Init+0x44>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim17.Init.Period = 350;
 800399a:	22af      	movs	r2, #175	@ 0xaf
  htim17.Init.Prescaler = 7100;
 800399c:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800399e:	2300      	movs	r3, #0
  htim17.Init.Period = 350;
 80039a0:	0052      	lsls	r2, r2, #1
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a2:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 350;
 80039a4:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a6:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 80039a8:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039aa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80039ac:	f005 ff00 	bl	80097b0 <HAL_TIM_Base_Init>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d001      	beq.n	80039b8 <MX_TIM17_Init+0x28>
  {
    Error_Handler();
 80039b4:	f7fe fae2 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  HAL_NVIC_SetPriority(TIM17_IRQn, 1, 0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2101      	movs	r1, #1
 80039bc:	2016      	movs	r0, #22
 80039be:	f003 fb6b 	bl	8007098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80039c2:	2016      	movs	r0, #22
 80039c4:	f003 fb92 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 80039c8:	bd10      	pop	{r4, pc}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	200010d8 	.word	0x200010d8
 80039d0:	40014800 	.word	0x40014800
 80039d4:	00001bbc 	.word	0x00001bbc

080039d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80039d8:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(tim_pwmHandle->Instance==TIM1)
 80039da:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <HAL_TIM_PWM_MspInit+0x58>)
 80039dc:	6802      	ldr	r2, [r0, #0]
{
 80039de:	0005      	movs	r5, r0
  if(tim_pwmHandle->Instance==TIM1)
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d123      	bne.n	8003a2c <HAL_TIM_PWM_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039e4:	2180      	movs	r1, #128	@ 0x80
 80039e6:	4b13      	ldr	r3, [pc, #76]	@ (8003a34 <HAL_TIM_PWM_MspInit+0x5c>)
 80039e8:	0109      	lsls	r1, r1, #4
 80039ea:	699a      	ldr	r2, [r3, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80039ec:	4c12      	ldr	r4, [pc, #72]	@ (8003a38 <HAL_TIM_PWM_MspInit+0x60>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ee:	430a      	orrs	r2, r1
 80039f0:	619a      	str	r2, [r3, #24]
 80039f2:	699b      	ldr	r3, [r3, #24]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80039f4:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039f6:	400b      	ands	r3, r1
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	9b01      	ldr	r3, [sp, #4]
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80039fc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <HAL_TIM_PWM_MspInit+0x64>)
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80039fe:	60e2      	str	r2, [r4, #12]
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8003a00:	6023      	str	r3, [r4, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a02:	2310      	movs	r3, #16
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a04:	3281      	adds	r2, #129	@ 0x81
 8003a06:	32ff      	adds	r2, #255	@ 0xff
 8003a08:	6122      	str	r2, [r4, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a0a:	2280      	movs	r2, #128	@ 0x80
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a0c:	6063      	str	r3, [r4, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a0e:	2300      	movs	r3, #0
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a10:	00d2      	lsls	r2, r2, #3
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003a12:	0020      	movs	r0, r4
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a14:	60a3      	str	r3, [r4, #8]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a16:	6162      	str	r2, [r4, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003a18:	61a3      	str	r3, [r4, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003a1a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003a1c:	f003 fb8c 	bl	8007138 <HAL_DMA_Init>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_TIM_PWM_MspInit+0x50>
    {
      Error_Handler();
 8003a24:	f7fe faaa 	bl	8001f7c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003a28:	626c      	str	r4, [r5, #36]	@ 0x24
 8003a2a:	6265      	str	r5, [r4, #36]	@ 0x24

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003a2c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40021000 	.word	0x40021000
 8003a38:	20001094 	.word	0x20001094
 8003a3c:	4002001c 	.word	0x4002001c

08003a40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a40:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM17)
 8003a42:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <HAL_TIM_Base_MspInit+0x30>)
 8003a44:	6802      	ldr	r2, [r0, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d111      	bne.n	8003a6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003a4a:	2180      	movs	r1, #128	@ 0x80
 8003a4c:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_TIM_Base_MspInit+0x34>)
 8003a4e:	02c9      	lsls	r1, r1, #11
 8003a50:	699a      	ldr	r2, [r3, #24]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003a52:	2016      	movs	r0, #22
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003a54:	430a      	orrs	r2, r1
 8003a56:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003a58:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	400b      	ands	r3, r1
 8003a5e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003a60:	0011      	movs	r1, r2
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003a62:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003a64:	f003 fb18 	bl	8007098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003a68:	2016      	movs	r0, #22
 8003a6a:	f003 fb3f 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003a6e:	bd07      	pop	{r0, r1, r2, pc}
 8003a70:	40014800 	.word	0x40014800
 8003a74:	40021000 	.word	0x40021000

08003a78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	0004      	movs	r4, r0
 8003a7c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7e:	2214      	movs	r2, #20
 8003a80:	2100      	movs	r1, #0
 8003a82:	a801      	add	r0, sp, #4
 8003a84:	f00f fc16 	bl	80132b4 <memset>
  if(timHandle->Instance==TIM1)
 8003a88:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac0 <HAL_TIM_MspPostInit+0x48>)
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d114      	bne.n	8003aba <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a90:	2180      	movs	r1, #128	@ 0x80
 8003a92:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <HAL_TIM_MspPostInit+0x4c>)
 8003a94:	0289      	lsls	r1, r1, #10
 8003a96:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a98:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	615a      	str	r2, [r3, #20]
 8003a9e:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa2:	400b      	ands	r3, r1
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003aa8:	2380      	movs	r3, #128	@ 0x80
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	3bfe      	subs	r3, #254	@ 0xfe
 8003ab2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003ab4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab6:	f003 fc57 	bl	8007368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003aba:	b006      	add	sp, #24
 8003abc:	bd10      	pop	{r4, pc}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40021000 	.word	0x40021000

08003ac8 <MX_TIM1_Init>:
{
 8003ac8:	b530      	push	{r4, r5, lr}
 8003aca:	b093      	sub	sp, #76	@ 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003acc:	2208      	movs	r2, #8
 8003ace:	2100      	movs	r1, #0
 8003ad0:	a801      	add	r0, sp, #4
 8003ad2:	f00f fbef 	bl	80132b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ad6:	221c      	movs	r2, #28
 8003ad8:	2100      	movs	r1, #0
 8003ada:	a803      	add	r0, sp, #12
 8003adc:	f00f fbea 	bl	80132b4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	a80a      	add	r0, sp, #40	@ 0x28
 8003ae6:	f00f fbe5 	bl	80132b4 <memset>
  htim1.Instance = TIM1;
 8003aea:	4d22      	ldr	r5, [pc, #136]	@ (8003b74 <MX_TIM1_Init+0xac>)
 8003aec:	4b22      	ldr	r3, [pc, #136]	@ (8003b78 <MX_TIM1_Init+0xb0>)
  htim1.Init.Prescaler = 0;
 8003aee:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 8003af0:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = 59;
 8003af2:	233b      	movs	r3, #59	@ 0x3b
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003af4:	0028      	movs	r0, r5
  htim1.Init.Prescaler = 0;
 8003af6:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003af8:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 59;
 8003afa:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003afc:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8003afe:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b00:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b02:	f005 fe7d 	bl	8009800 <HAL_TIM_PWM_Init>
 8003b06:	42a0      	cmp	r0, r4
 8003b08:	d001      	beq.n	8003b0e <MX_TIM1_Init+0x46>
    Error_Handler();
 8003b0a:	f7fe fa37 	bl	8001f7c <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b0e:	0028      	movs	r0, r5
 8003b10:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b12:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b14:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b16:	f006 f81d 	bl	8009b54 <HAL_TIMEx_MasterConfigSynchronization>
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d001      	beq.n	8003b22 <MX_TIM1_Init+0x5a>
    Error_Handler();
 8003b1e:	f7fe fa2d 	bl	8001f7c <Error_Handler>
  sConfigOC.Pulse = 0;
 8003b22:	2400      	movs	r4, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b24:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b26:	0022      	movs	r2, r4
 8003b28:	0028      	movs	r0, r5
 8003b2a:	a903      	add	r1, sp, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b2c:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8003b2e:	9404      	str	r4, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b30:	9405      	str	r4, [sp, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b32:	9406      	str	r4, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b34:	9407      	str	r4, [sp, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b36:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b38:	9409      	str	r4, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b3a:	f005 fec9 	bl	80098d0 <HAL_TIM_PWM_ConfigChannel>
 8003b3e:	42a0      	cmp	r0, r4
 8003b40:	d001      	beq.n	8003b46 <MX_TIM1_Init+0x7e>
    Error_Handler();
 8003b42:	f7fe fa1b 	bl	8001f7c <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b46:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b48:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b4a:	019b      	lsls	r3, r3, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b4c:	a90a      	add	r1, sp, #40	@ 0x28
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b4e:	940a      	str	r4, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b50:	940b      	str	r4, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b52:	940c      	str	r4, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b54:	940d      	str	r4, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b56:	940e      	str	r4, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b58:	930f      	str	r3, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b5a:	9411      	str	r4, [sp, #68]	@ 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b5c:	f006 f82c 	bl	8009bb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM1_Init+0xa0>
    Error_Handler();
 8003b64:	f7fe fa0a 	bl	8001f7c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8003b68:	0028      	movs	r0, r5
 8003b6a:	f7ff ff85 	bl	8003a78 <HAL_TIM_MspPostInit>
}
 8003b6e:	b013      	add	sp, #76	@ 0x4c
 8003b70:	bd30      	pop	{r4, r5, pc}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	20001120 	.word	0x20001120
 8003b78:	40012c00 	.word	0x40012c00

08003b7c <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b7c:	480b      	ldr	r0, [pc, #44]	@ (8003bac <MX_USART1_UART_Init+0x30>)
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <MX_USART1_UART_Init+0x34>)
{
 8003b80:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8003b82:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003b84:	23e1      	movs	r3, #225	@ 0xe1
 8003b86:	025b      	lsls	r3, r3, #9
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b88:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8003b8a:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b8c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b8e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b90:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b92:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b94:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b96:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b98:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b9a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b9c:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b9e:	f006 fd7b 	bl	800a698 <HAL_UART_Init>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d001      	beq.n	8003baa <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 8003ba6:	f7fe f9e9 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003baa:	bd10      	pop	{r4, pc}
 8003bac:	200011f0 	.word	0x200011f0
 8003bb0:	40013800 	.word	0x40013800

08003bb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bb4:	b530      	push	{r4, r5, lr}
 8003bb6:	0005      	movs	r5, r0
 8003bb8:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bba:	2214      	movs	r2, #20
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	a803      	add	r0, sp, #12
 8003bc0:	f00f fb78 	bl	80132b4 <memset>
  if(uartHandle->Instance==USART1)
 8003bc4:	4b31      	ldr	r3, [pc, #196]	@ (8003c8c <HAL_UART_MspInit+0xd8>)
 8003bc6:	682a      	ldr	r2, [r5, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d15d      	bne.n	8003c88 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bcc:	2180      	movs	r1, #128	@ 0x80
 8003bce:	4b30      	ldr	r3, [pc, #192]	@ (8003c90 <HAL_UART_MspInit+0xdc>)
 8003bd0:	01c9      	lsls	r1, r1, #7
 8003bd2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd4:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	619a      	str	r2, [r3, #24]
 8003bda:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bdc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bde:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be0:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8003be2:	9201      	str	r2, [sp, #4]
 8003be4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	0289      	lsls	r1, r1, #10
 8003bea:	430a      	orrs	r2, r1
 8003bec:	615a      	str	r2, [r3, #20]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	9302      	str	r3, [sp, #8]
 8003bf4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bf6:	23c0      	movs	r3, #192	@ 0xc0
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c00:	3301      	adds	r3, #1
 8003c02:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c04:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003c06:	3b02      	subs	r3, #2
 8003c08:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0a:	f003 fbad 	bl	8007368 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8003c0e:	4c21      	ldr	r4, [pc, #132]	@ (8003c94 <HAL_UART_MspInit+0xe0>)
 8003c10:	4b21      	ldr	r3, [pc, #132]	@ (8003c98 <HAL_UART_MspInit+0xe4>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c12:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8003c14:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c16:	2300      	movs	r3, #0
 8003c18:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c1a:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c1c:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c1e:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003c20:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c22:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c24:	0020      	movs	r0, r4
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c26:	019b      	lsls	r3, r3, #6
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c28:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c2a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c2c:	f003 fa84 	bl	8007138 <HAL_DMA_Init>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_UART_MspInit+0x84>
    {
      Error_Handler();
 8003c34:	f7fe f9a2 	bl	8001f7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003c38:	4b18      	ldr	r3, [pc, #96]	@ (8003c9c <HAL_UART_MspInit+0xe8>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003c3a:	676c      	str	r4, [r5, #116]	@ 0x74
 8003c3c:	6265      	str	r5, [r4, #36]	@ 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003c3e:	4c18      	ldr	r4, [pc, #96]	@ (8003ca0 <HAL_UART_MspInit+0xec>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c40:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003c42:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c44:	2310      	movs	r3, #16
 8003c46:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c4c:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c4e:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003c50:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c52:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c54:	0020      	movs	r0, r4
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c56:	019b      	lsls	r3, r3, #6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c58:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c5a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c5c:	f003 fa6c 	bl	8007138 <HAL_DMA_Init>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8003c64:	f7fe f98a 	bl	8001f7c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8003c68:	2380      	movs	r3, #128	@ 0x80
 8003c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ca4 <HAL_UART_MspInit+0xf0>)
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	6811      	ldr	r1, [r2, #0]

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c70:	201b      	movs	r0, #27
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8003c72:	430b      	orrs	r3, r1
 8003c74:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c76:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003c78:	672c      	str	r4, [r5, #112]	@ 0x70
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c7a:	0011      	movs	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003c7c:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c7e:	f003 fa0b 	bl	8007098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c82:	201b      	movs	r0, #27
 8003c84:	f003 fa32 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003c88:	b009      	add	sp, #36	@ 0x24
 8003c8a:	bd30      	pop	{r4, r5, pc}
 8003c8c:	40013800 	.word	0x40013800
 8003c90:	40021000 	.word	0x40021000
 8003c94:	200011ac 	.word	0x200011ac
 8003c98:	40020030 	.word	0x40020030
 8003c9c:	40020044 	.word	0x40020044
 8003ca0:	20001168 	.word	0x20001168
 8003ca4:	40010000 	.word	0x40010000

08003ca8 <MX_USB_PCD_Init>:
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003ca8:	4809      	ldr	r0, [pc, #36]	@ (8003cd0 <MX_USB_PCD_Init+0x28>)
 8003caa:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <MX_USB_PCD_Init+0x2c>)
{
 8003cac:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 8003cae:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003cb0:	2382      	movs	r3, #130	@ 0x82
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003cbe:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003cc0:	f003 fc24 	bl	800750c <HAL_PCD_Init>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_USB_PCD_Init+0x24>
  {
    Error_Handler();
 8003cc8:	f7fe f958 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	46c0      	nop			@ (mov r8, r8)
 8003cd0:	20001278 	.word	0x20001278
 8003cd4:	40005c00 	.word	0x40005c00

08003cd8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003cd8:	b507      	push	{r0, r1, r2, lr}

  if(pcdHandle->Instance==USB)
 8003cda:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <HAL_PCD_MspInit+0x30>)
 8003cdc:	6802      	ldr	r2, [r0, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d111      	bne.n	8003d06 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003ce2:	2180      	movs	r1, #128	@ 0x80
 8003ce4:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <HAL_PCD_MspInit+0x34>)
 8003ce6:	0409      	lsls	r1, r1, #16
 8003ce8:	69da      	ldr	r2, [r3, #28]

    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003cea:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 8003cec:	430a      	orrs	r2, r1
 8003cee:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003cf0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	400b      	ands	r3, r1
 8003cf6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003cf8:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003cfa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003cfc:	f003 f9cc 	bl	8007098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8003d00:	201f      	movs	r0, #31
 8003d02:	f003 f9f3 	bl	80070ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003d06:	bd07      	pop	{r0, r1, r2, pc}
 8003d08:	40005c00 	.word	0x40005c00
 8003d0c:	40021000 	.word	0x40021000

08003d10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d10:	480d      	ldr	r0, [pc, #52]	@ (8003d48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d12:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d14:	f7ff fe3a 	bl	800398c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d18:	480c      	ldr	r0, [pc, #48]	@ (8003d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8003d1a:	490d      	ldr	r1, [pc, #52]	@ (8003d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <LoopForever+0xe>)
  movs r3, #0
 8003d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d20:	e002      	b.n	8003d28 <LoopCopyDataInit>

08003d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d26:	3304      	adds	r3, #4

08003d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d2c:	d3f9      	bcc.n	8003d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d30:	4c0a      	ldr	r4, [pc, #40]	@ (8003d5c <LoopForever+0x16>)
  movs r3, #0
 8003d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d34:	e001      	b.n	8003d3a <LoopFillZerobss>

08003d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d38:	3204      	adds	r2, #4

08003d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d3c:	d3fb      	bcc.n	8003d36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d3e:	f00f fac7 	bl	80132d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d42:	f7fe f8cd 	bl	8001ee0 <main>

08003d46 <LoopForever>:

LoopForever:
    b LoopForever
 8003d46:	e7fe      	b.n	8003d46 <LoopForever>
  ldr   r0, =_estack
 8003d48:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d50:	20000a5c 	.word	0x20000a5c
  ldr r2, =_sidata
 8003d54:	080146bc 	.word	0x080146bc
  ldr r2, =_sbss
 8003d58:	20000a5c 	.word	0x20000a5c
  ldr r4, =_ebss
 8003d5c:	2000358c 	.word	0x2000358c

08003d60 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d60:	e7fe      	b.n	8003d60 <ADC1_COMP_IRQHandler>
	...

08003d64 <rfalCleanupTransceive>:
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 8003d64:	21e0      	movs	r1, #224	@ 0xe0
{
 8003d66:	b510      	push	{r4, lr}
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 8003d68:	2005      	movs	r0, #5
 8003d6a:	f002 fec2 	bl	8006af2 <st25r3916ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 8003d6e:	2108      	movs	r1, #8
 8003d70:	200c      	movs	r0, #12
 8003d72:	f002 fed0 	bl	8006b16 <st25r3916SetRegisterBits>
    /* Transceive timers                                                           */
    /*******************************************************************************/
    rfalTimerDestroy( gRFAL.tmr.txRx );
    rfalTimerDestroy( gRFAL.tmr.RXE );
    rfalTimerDestroy( gRFAL.tmr.PPON2 );
    gRFAL.tmr.txRx   = RFAL_TIMING_NONE;
 8003d76:	2200      	movs	r2, #0
 8003d78:	4b04      	ldr	r3, [pc, #16]	@ (8003d8c <rfalCleanupTransceive+0x28>)
 8003d7a:	64da      	str	r2, [r3, #76]	@ 0x4c
    gRFAL.tmr.RXE    = RFAL_TIMING_NONE;
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    gRFAL.tmr.PPON2  = RFAL_TIMING_NONE;
 8003d7e:	649a      	str	r2, [r3, #72]	@ 0x48
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 8003d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d000      	beq.n	8003d88 <rfalCleanupTransceive+0x24>
    {
        gRFAL.callbacks.postTxRx();
 8003d86:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	20001554 	.word	0x20001554

08003d90 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 8003d90:	b570      	push	{r4, r5, r6, lr}
    uint32_t maskInterrupts;
    uint8_t  reg;
    
    /* If we are in RW or AP2P mode */
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 8003d92:	4c43      	ldr	r4, [pc, #268]	@ (8003ea0 <rfalPrepareTransceive+0x110>)
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
    }
    else
    {
        /* In Passive Listen Mode do not use STOP as it stops FDT timer */
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8003d94:	20db      	movs	r0, #219	@ 0xdb
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 8003d96:	7863      	ldrb	r3, [r4, #1]
 8003d98:	3b0a      	subs	r3, #10
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d903      	bls.n	8003da6 <rfalPrepareTransceive+0x16>
        st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 8003d9e:	20c2      	movs	r0, #194	@ 0xc2
 8003da0:	f002 fe5b 	bl	8006a5a <st25r3916ExecuteCommand>
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 8003da4:	20d5      	movs	r0, #213	@ 0xd5
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8003da6:	f002 fe58 	bl	8006a5a <st25r3916ExecuteCommand>
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    
    
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 8003daa:	6921      	ldr	r1, [r4, #16]
 8003dac:	2900      	cmp	r1, #0
 8003dae:	d00c      	beq.n	8003dca <rfalPrepareTransceive+0x3a>
    {
        /* In Passive communications General Purpose Timer is used to measure FDT Poll */
        if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 8003db0:	7863      	ldrb	r3, [r4, #1]
 8003db2:	2b09      	cmp	r3, #9
 8003db4:	d057      	beq.n	8003e66 <rfalPrepareTransceive+0xd6>
 8003db6:	2b0d      	cmp	r3, #13
 8003db8:	d007      	beq.n	8003dca <rfalPrepareTransceive+0x3a>
        {
            /* Configure GPT to start at RX end */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( ((gRFAL.timings.FDTPoll < RFAL_FDT_POLL_ADJUSTMENT) ? gRFAL.timings.FDTPoll : (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT)) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 8003dba:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea4 <rfalPrepareTransceive+0x114>)
 8003dbc:	4299      	cmp	r1, r3
 8003dbe:	d84d      	bhi.n	8003e5c <rfalPrepareTransceive+0xcc>
 8003dc0:	08c9      	lsrs	r1, r1, #3
 8003dc2:	b288      	uxth	r0, r1
 8003dc4:	2120      	movs	r1, #32
 8003dc6:	f002 fc7a 	bl	80066be <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 8003dca:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d000      	beq.n	8003dd2 <rfalPrepareTransceive+0x42>
    {
        gRFAL.callbacks.preTxRx();
 8003dd0:	4798      	blx	r3
    /*******************************************************************************/
    
    reg = (ST25R3916_REG_ISO14443A_NFC_no_tx_par_off | ST25R3916_REG_ISO14443A_NFC_no_rx_par_off | ST25R3916_REG_ISO14443A_NFC_nfc_f0_off);
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 8003dd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003dd4:	075a      	lsls	r2, r3, #29
 8003dd6:	0fd2      	lsrs	r2, r2, #31
 8003dd8:	0152      	lsls	r2, r2, #5
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_nfc_f0;
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 8003dda:	06d9      	lsls	r1, r3, #27
 8003ddc:	d501      	bpl.n	8003de2 <rfalPrepareTransceive+0x52>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_rx_par;
 8003dde:	2140      	movs	r1, #64	@ 0x40
 8003de0:	430a      	orrs	r2, r1
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 8003de2:	069b      	lsls	r3, r3, #26
 8003de4:	d501      	bpl.n	8003dea <rfalPrepareTransceive+0x5a>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_tx_par;
 8003de6:	2380      	movs	r3, #128	@ 0x80
 8003de8:	431a      	orrs	r2, r3
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0), reg );
 8003dea:	21e0      	movs	r1, #224	@ 0xe0
 8003dec:	2005      	movs	r0, #5
 8003dee:	f002 feba 	bl	8006b66 <st25r3916ChangeRegisterBits>
    
    
    
    /* Check if CRC is to be checked automatically upon reception */
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_MANUAL) != 0U )
 8003df2:	2180      	movs	r1, #128	@ 0x80
 8003df4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    {
        st25r3916SetRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 8003df6:	200a      	movs	r0, #10
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_MANUAL) != 0U )
 8003df8:	420b      	tst	r3, r1
 8003dfa:	d03a      	beq.n	8003e72 <rfalPrepareTransceive+0xe2>
        st25r3916SetRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 8003dfc:	f002 fe8b 	bl	8006b16 <st25r3916SetRegisterBits>
        st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
    }
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 8003e00:	2108      	movs	r1, #8
 8003e02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 8003e04:	200c      	movs	r0, #12
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 8003e06:	420b      	tst	r3, r1
 8003e08:	d036      	beq.n	8003e78 <rfalPrepareTransceive+0xe8>
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 8003e0a:	f002 fe72 	bl	8006af2 <st25r3916ClrRegisterBits>
    
    
    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMD )
 8003e0e:	79e3      	ldrb	r3, [r4, #7]
    {
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 8003e10:	2102      	movs	r1, #2
 8003e12:	2012      	movs	r0, #18
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMD )
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d132      	bne.n	8003e7e <rfalPrepareTransceive+0xee>
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 8003e18:	f002 fe7d 	bl	8006b16 <st25r3916SetRegisterBits>
        maskInterrupts |= ST25R3916_IRQ_MASK_RX_REST;
 8003e1c:	4d22      	ldr	r5, [pc, #136]	@ (8003ea8 <rfalPrepareTransceive+0x118>)
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
    }
    /*******************************************************************************/
    
    /* In Passive Listen mode additionally enable External Field interrupts  */    
    if( rfalIsModePassiveListen( gRFAL.mode ) )
 8003e1e:	7863      	ldrb	r3, [r4, #1]
 8003e20:	001a      	movs	r2, r3
 8003e22:	3a0a      	subs	r2, #10
 8003e24:	2a02      	cmp	r2, #2
 8003e26:	d82e      	bhi.n	8003e86 <rfalPrepareTransceive+0xf6>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_F );      /* Enable external Field interrupts to detect Link Loss and SENF_REQ auto responses */
 8003e28:	4b20      	ldr	r3, [pc, #128]	@ (8003eac <rfalPrepareTransceive+0x11c>)
 8003e2a:	431d      	orrs	r5, r3
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, 0);
    }
    
    /*******************************************************************************/
    /* Start transceive Sanity Timer if a FWT is used */
    if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8003e2c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003e2e:	1e43      	subs	r3, r0, #1
 8003e30:	3303      	adds	r3, #3
 8003e32:	d809      	bhi.n	8003e48 <rfalPrepareTransceive+0xb8>
    {
        rfalTimerStart( gRFAL.tmr.txRx, rfalCalcSanityTmr( gRFAL.TxRx.ctx.fwt ) );
 8003e34:	491e      	ldr	r1, [pc, #120]	@ (8003eb0 <rfalPrepareTransceive+0x120>)
 8003e36:	f7fc f997 	bl	8000168 <__udivsi3>
 8003e3a:	23fa      	movs	r3, #250	@ 0xfa
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	18c0      	adds	r0, r0, r3
 8003e40:	b280      	uxth	r0, r0
 8003e42:	f003 f829 	bl	8006e98 <timerCalculateTimer>
 8003e46:	64e0      	str	r0, [r4, #76]	@ 0x4c
    /*******************************************************************************/
    
    
    /*******************************************************************************/
    /* Clear and enable these interrupts */
    st25r3916GetInterrupt( maskInterrupts );
 8003e48:	0028      	movs	r0, r5
 8003e4a:	f002 ff6d 	bl	8006d28 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( maskInterrupts );
 8003e4e:	0028      	movs	r0, r5
 8003e50:	f002 ff96 	bl	8006d80 <st25r3916EnableInterrupts>


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 8003e54:	23ff      	movs	r3, #255	@ 0xff
 8003e56:	343f      	adds	r4, #63	@ 0x3f
 8003e58:	7023      	strb	r3, [r4, #0]
}
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( ((gRFAL.timings.FDTPoll < RFAL_FDT_POLL_ADJUSTMENT) ? gRFAL.timings.FDTPoll : (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT)) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 8003e5c:	4b15      	ldr	r3, [pc, #84]	@ (8003eb4 <rfalPrepareTransceive+0x124>)
 8003e5e:	18c8      	adds	r0, r1, r3
 8003e60:	08c0      	lsrs	r0, r0, #3
 8003e62:	b280      	uxth	r0, r0
 8003e64:	e7ae      	b.n	8003dc4 <rfalPrepareTransceive+0x34>
            st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, (uint8_t)rfalConv1fcTo2018fc(gRFAL.timings.FDTPoll) );
 8003e66:	0ac9      	lsrs	r1, r1, #11
 8003e68:	b2c9      	uxtb	r1, r1
 8003e6a:	2055      	movs	r0, #85	@ 0x55
 8003e6c:	f002 fd6c 	bl	8006948 <st25r3916WriteRegister>
 8003e70:	e7ab      	b.n	8003dca <rfalPrepareTransceive+0x3a>
        st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 8003e72:	f002 fe3e 	bl	8006af2 <st25r3916ClrRegisterBits>
 8003e76:	e7c3      	b.n	8003e00 <rfalPrepareTransceive+0x70>
        st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 8003e78:	f002 fe4d 	bl	8006b16 <st25r3916SetRegisterBits>
 8003e7c:	e7c7      	b.n	8003e0e <rfalPrepareTransceive+0x7e>
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 8003e7e:	f002 fe38 	bl	8006af2 <st25r3916ClrRegisterBits>
    maskInterrupts = ( ST25R3916_IRQ_MASK_FWL  | ST25R3916_IRQ_MASK_TXE  |
 8003e82:	4d0d      	ldr	r5, [pc, #52]	@ (8003eb8 <rfalPrepareTransceive+0x128>)
 8003e84:	e7cb      	b.n	8003e1e <rfalPrepareTransceive+0x8e>
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 8003e86:	2204      	movs	r2, #4
 8003e88:	4393      	bics	r3, r2
 8003e8a:	2b09      	cmp	r3, #9
 8003e8c:	d1ce      	bne.n	8003e2c <rfalPrepareTransceive+0x9c>
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <rfalPrepareTransceive+0x12c>)
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, 0);
 8003e90:	2200      	movs	r2, #0
 8003e92:	2103      	movs	r1, #3
 8003e94:	200a      	movs	r0, #10
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 8003e96:	431d      	orrs	r5, r3
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, 0);
 8003e98:	f002 fe65 	bl	8006b66 <st25r3916ChangeRegisterBits>
 8003e9c:	e7c6      	b.n	8003e2c <rfalPrepareTransceive+0x9c>
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	20001554 	.word	0x20001554
 8003ea4:	0000043b 	.word	0x0000043b
 8003ea8:	00f0407a 	.word	0x00f0407a
 8003eac:	08000800 	.word	0x08000800
 8003eb0:	000034f8 	.word	0x000034f8
 8003eb4:	fffffbc4 	.word	0xfffffbc4
 8003eb8:	00f04078 	.word	0x00f04078
 8003ebc:	80001e00 	.word	0x80001e00

08003ec0 <rfalWakeUpModeFilter>:
}


/*******************************************************************************/
static uint16_t rfalWakeUpModeFilter( uint16_t curRef, uint16_t curVal, uint8_t weight )
{
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	000d      	movs	r5, r1
 8003ec4:	0004      	movs	r4, r0
 8003ec6:	0011      	movs	r1, r2
    uint16_t newRef;    
    
    /* Perform the averaging|filter as describded in ST25R3916 DS */
    
    /* Avoid signed arithmetics by spliting in two cases */
    if( curVal > curRef )
 8003ec8:	4285      	cmp	r5, r0
 8003eca:	d90c      	bls.n	8003ee6 <rfalWakeUpModeFilter+0x26>
    {
        newRef = curRef + (( curVal - curRef ) / weight );
 8003ecc:	1a28      	subs	r0, r5, r0
 8003ece:	f7fc f9d5 	bl	800027c <__divsi3>
 8003ed2:	1820      	adds	r0, r4, r0
 8003ed4:	b280      	uxth	r0, r0
        
        /* In order for the reference to converge to final value   *
         * increment once the diff is smaller that the weight      */
        if( (curVal != curRef) && (curRef == newRef) )
 8003ed6:	4284      	cmp	r4, r0
 8003ed8:	d104      	bne.n	8003ee4 <rfalWakeUpModeFilter+0x24>
        {
            newRef &= 0xFF00U;
 8003eda:	23ff      	movs	r3, #255	@ 0xff
 8003edc:	4398      	bics	r0, r3
            newRef += 0x0100U;
 8003ede:	3001      	adds	r0, #1
 8003ee0:	30ff      	adds	r0, #255	@ 0xff
 8003ee2:	b280      	uxth	r0, r0
            newRef &= 0xFF00U;
        }
    }
    
    return newRef;
}
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
        newRef = curRef - (( curRef - curVal ) / weight );
 8003ee6:	1b40      	subs	r0, r0, r5
 8003ee8:	f7fc f9c8 	bl	800027c <__divsi3>
 8003eec:	1a20      	subs	r0, r4, r0
 8003eee:	b280      	uxth	r0, r0
        if( (curVal != curRef) && (curRef == newRef) )
 8003ef0:	42a5      	cmp	r5, r4
 8003ef2:	d0f7      	beq.n	8003ee4 <rfalWakeUpModeFilter+0x24>
 8003ef4:	4284      	cmp	r4, r0
 8003ef6:	d1f5      	bne.n	8003ee4 <rfalWakeUpModeFilter+0x24>
            newRef &= 0xFF00U;
 8003ef8:	23ff      	movs	r3, #255	@ 0xff
 8003efa:	4398      	bics	r0, r3
 8003efc:	e7f2      	b.n	8003ee4 <rfalWakeUpModeFilter+0x24>
	...

08003f00 <rfalFIFOStatusUpdate>:
{
 8003f00:	b510      	push	{r4, lr}
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 8003f02:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <rfalFIFOStatusUpdate+0x18>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2bff      	cmp	r3, #255	@ 0xff
 8003f08:	d104      	bne.n	8003f14 <rfalFIFOStatusUpdate+0x14>
        st25r3916ReadMultipleRegisters( ST25R3916_REG_FIFO_STATUS1, gRFAL.fifo.status, ST25R3916_FIFO_STATUS_LEN );
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	201e      	movs	r0, #30
 8003f0e:	4903      	ldr	r1, [pc, #12]	@ (8003f1c <rfalFIFOStatusUpdate+0x1c>)
 8003f10:	f002 fd13 	bl	800693a <st25r3916ReadMultipleRegisters>
}
 8003f14:	bd10      	pop	{r4, pc}
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	20001593 	.word	0x20001593
 8003f1c:	20001592 	.word	0x20001592

08003f20 <rfalFIFOStatusGetNumBytes>:
{
 8003f20:	b510      	push	{r4, lr}
    rfalFIFOStatusUpdate();
 8003f22:	f7ff ffed 	bl	8003f00 <rfalFIFOStatusUpdate>
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 8003f26:	4b04      	ldr	r3, [pc, #16]	@ (8003f38 <rfalFIFOStatusGetNumBytes+0x18>)
 8003f28:	7818      	ldrb	r0, [r3, #0]
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 8003f2a:	4b04      	ldr	r3, [pc, #16]	@ (8003f3c <rfalFIFOStatusGetNumBytes+0x1c>)
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 8003f2c:	0980      	lsrs	r0, r0, #6
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 8003f2e:	781b      	ldrb	r3, [r3, #0]
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 8003f30:	0200      	lsls	r0, r0, #8
    return result;
 8003f32:	4318      	orrs	r0, r3
}
 8003f34:	bd10      	pop	{r4, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	20001593 	.word	0x20001593
 8003f3c:	20001592 	.word	0x20001592

08003f40 <rfalErrorHandling>:
{
 8003f40:	b570      	push	{r4, r5, r6, lr}
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 8003f42:	f7ff ffed 	bl	8003f20 <rfalFIFOStatusGetNumBytes>
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 8003f46:	4c13      	ldr	r4, [pc, #76]	@ (8003f94 <rfalErrorHandling+0x54>)
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 8003f48:	0005      	movs	r5, r0
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 8003f4a:	7863      	ldrb	r3, [r4, #1]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d120      	bne.n	8003f92 <rfalErrorHandling+0x52>
        if( (gRFAL.TxRx.status == RFAL_ERR_PAR) || (gRFAL.TxRx.status == RFAL_ERR_CRC) )
 8003f50:	8b63      	ldrh	r3, [r4, #26]
 8003f52:	2b1b      	cmp	r3, #27
 8003f54:	d001      	beq.n	8003f5a <rfalErrorHandling+0x1a>
 8003f56:	2b15      	cmp	r3, #21
 8003f58:	d11b      	bne.n	8003f92 <rfalErrorHandling+0x52>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 8003f5a:	0026      	movs	r6, r4
    rfalFIFOStatusUpdate();
 8003f5c:	f7ff ffd0 	bl	8003f00 <rfalFIFOStatusUpdate>
            if( (rfalFIFOStatusIsIncompleteByte()) && (fifoBytesToRead == RFAL_RX_INC_BYTE_LEN) )
 8003f60:	230e      	movs	r3, #14
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 8003f62:	363f      	adds	r6, #63	@ 0x3f
            if( (rfalFIFOStatusIsIncompleteByte()) && (fifoBytesToRead == RFAL_RX_INC_BYTE_LEN) )
 8003f64:	7832      	ldrb	r2, [r6, #0]
 8003f66:	421a      	tst	r2, r3
 8003f68:	d013      	beq.n	8003f92 <rfalErrorHandling+0x52>
 8003f6a:	2d01      	cmp	r5, #1
 8003f6c:	d111      	bne.n	8003f92 <rfalErrorHandling+0x52>
                st25r3916ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 8003f6e:	0029      	movs	r1, r5
 8003f70:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003f72:	f002 fd0f 	bl	8006994 <st25r3916ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 8003f76:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <rfalErrorHandling+0x4a>
    rfalFIFOStatusUpdate();
 8003f7c:	f7ff ffc0 	bl	8003f00 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 8003f80:	7833      	ldrb	r3, [r6, #0]
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 8003f82:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 8003f84:	071b      	lsls	r3, r3, #28
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 8003f86:	0f5b      	lsrs	r3, r3, #29
 8003f88:	8013      	strh	r3, [r2, #0]
                gRFAL.TxRx.status = RFAL_ERR_INCOMPLETE_BYTE;
 8003f8a:	2328      	movs	r3, #40	@ 0x28
 8003f8c:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8003f8e:	3332      	adds	r3, #50	@ 0x32
 8003f90:	7623      	strb	r3, [r4, #24]
}
 8003f92:	bd70      	pop	{r4, r5, r6, pc}
 8003f94:	20001554 	.word	0x20001554

08003f98 <rfalCalibrate>:
    if( gRFAL.state == RFAL_STATE_IDLE )
 8003f98:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <rfalCalibrate+0x28>)
{
 8003f9a:	b507      	push	{r0, r1, r2, lr}
    if( gRFAL.state == RFAL_STATE_IDLE )
 8003f9c:	781b      	ldrb	r3, [r3, #0]
        return RFAL_ERR_WRONG_STATE;
 8003f9e:	2021      	movs	r0, #33	@ 0x21
    if( gRFAL.state == RFAL_STATE_IDLE )
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <rfalCalibrate+0x24>
    if( st25r3916CheckReg( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2180      	movs	r1, #128	@ 0x80
 8003fa8:	300b      	adds	r0, #11
 8003faa:	f002 fdf7 	bl	8006b9c <st25r3916CheckReg>
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d003      	beq.n	8003fba <rfalCalibrate+0x22>
        st25r3916AdjustRegulators( &resValue );
 8003fb2:	466b      	mov	r3, sp
 8003fb4:	1d98      	adds	r0, r3, #6
 8003fb6:	f002 fa54 	bl	8006462 <st25r3916AdjustRegulators>
 8003fba:	2000      	movs	r0, #0
}
 8003fbc:	bd0e      	pop	{r1, r2, r3, pc}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	20001554 	.word	0x20001554

08003fc4 <rfalInitialize>:
{
 8003fc4:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( err, st25r3916Initialize() );
 8003fc6:	f002 fba3 	bl	8006710 <st25r3916Initialize>
 8003fca:	1e04      	subs	r4, r0, #0
 8003fcc:	d130      	bne.n	8004030 <rfalInitialize+0x6c>
    st25r3916ClearInterrupts();
 8003fce:	f002 feeb 	bl	8006da8 <st25r3916ClearInterrupts>
    rfalST25R3916ObsModeDisable();
 8003fd2:	2140      	movs	r1, #64	@ 0x40
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	f002 fd70 	bl	8006aba <st25r3916WriteTestRegister>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 8003fda:	0020      	movs	r0, r4
 8003fdc:	f007 f8a0 	bl	800b120 <rfalSetAnalogConfig>
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	0011      	movs	r1, r2
 8003fe6:	f002 fdbe 	bl	8006b66 <st25r3916ChangeRegisterBits>
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 8003fea:	21ff      	movs	r1, #255	@ 0xff
 8003fec:	4a11      	ldr	r2, [pc, #68]	@ (8004034 <rfalInitialize+0x70>)
 8003fee:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <rfalInitialize+0x74>)
 8003ff0:	7011      	strb	r1, [r2, #0]
    gRFAL.state              = RFAL_STATE_INIT;
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	801a      	strh	r2, [r3, #0]
    gRFAL.nfcvData.ignoreBits = 0;
 8003ff6:	2288      	movs	r2, #136	@ 0x88
 8003ff8:	00d2      	lsls	r2, r2, #3
 8003ffa:	529c      	strh	r4, [r3, r2]
    gRFAL.Lm.state           = RFAL_LM_STATE_NOT_INIT;
 8003ffc:	001a      	movs	r2, r3
 8003ffe:	325c      	adds	r2, #92	@ 0x5c
 8004000:	7014      	strb	r4, [r2, #0]
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
 8004002:	001a      	movs	r2, r3
 8004004:	326c      	adds	r2, #108	@ 0x6c
 8004006:	7011      	strb	r1, [r2, #0]
    gRFAL.Lm.iniFlag         = false;
 8004008:	001a      	movs	r2, r3
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800400a:	831c      	strh	r4, [r3, #24]
    gRFAL.field              = false;
 800400c:	605c      	str	r4, [r3, #4]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800400e:	609c      	str	r4, [r3, #8]
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 8004010:	60dc      	str	r4, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 8004012:	611c      	str	r4, [r3, #16]
    gRFAL.timings.nTRFW      = 0U;
 8004014:	751c      	strb	r4, [r3, #20]
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 8004016:	641c      	str	r4, [r3, #64]	@ 0x40
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 8004018:	64dc      	str	r4, [r3, #76]	@ 0x4c
    gRFAL.tmr.RXE            = RFAL_TIMING_NONE;
 800401a:	645c      	str	r4, [r3, #68]	@ 0x44
    gRFAL.tmr.PPON2          = RFAL_TIMING_NONE;
 800401c:	649c      	str	r4, [r3, #72]	@ 0x48
    gRFAL.callbacks.preTxRx  = NULL;
 800401e:	651c      	str	r4, [r3, #80]	@ 0x50
    gRFAL.callbacks.postTxRx = NULL;
 8004020:	655c      	str	r4, [r3, #84]	@ 0x54
    gRFAL.callbacks.syncTxRx = NULL;
 8004022:	659c      	str	r4, [r3, #88]	@ 0x58
    gRFAL.Lm.iniFlag         = false;
 8004024:	327d      	adds	r2, #125	@ 0x7d
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8004026:	3380      	adds	r3, #128	@ 0x80
    gRFAL.Lm.iniFlag         = false;
 8004028:	7014      	strb	r4, [r2, #0]
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800402a:	701c      	strb	r4, [r3, #0]
    rfalCalibrate();
 800402c:	f7ff ffb4 	bl	8003f98 <rfalCalibrate>
}
 8004030:	0020      	movs	r0, r4
 8004032:	bd10      	pop	{r4, pc}
 8004034:	20001593 	.word	0x20001593
 8004038:	20001554 	.word	0x20001554

0800403c <rfalSetBitRate>:
{
 800403c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( gRFAL.state == RFAL_STATE_IDLE )
 800403e:	4c7c      	ldr	r4, [pc, #496]	@ (8004230 <rfalSetBitRate+0x1f4>)
 8004040:	7823      	ldrb	r3, [r4, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d019      	beq.n	800407a <rfalSetBitRate+0x3e>
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 8004046:	28ff      	cmp	r0, #255	@ 0xff
 8004048:	d100      	bne.n	800404c <rfalSetBitRate+0x10>
 800404a:	78a0      	ldrb	r0, [r4, #2]
 800404c:	70a0      	strb	r0, [r4, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800404e:	29ff      	cmp	r1, #255	@ 0xff
 8004050:	d100      	bne.n	8004054 <rfalSetBitRate+0x18>
 8004052:	78e1      	ldrb	r1, [r4, #3]
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 8004054:	7863      	ldrb	r3, [r4, #1]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 8004056:	70e1      	strb	r1, [r4, #3]
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 8004058:	3b07      	subs	r3, #7
 800405a:	2b01      	cmp	r3, #1
 800405c:	d810      	bhi.n	8004080 <rfalSetBitRate+0x44>
    switch( gRFAL.mode )
 800405e:	7863      	ldrb	r3, [r4, #1]
            return RFAL_ERR_NOT_IMPLEMENTED;
 8004060:	200f      	movs	r0, #15
    switch( gRFAL.mode )
 8004062:	2b0d      	cmp	r3, #13
 8004064:	d80a      	bhi.n	800407c <rfalSetBitRate+0x40>
 8004066:	0018      	movs	r0, r3
 8004068:	f7fc f860 	bl	800012c <__gnu_thumb1_case_uqi>
 800406c:	2d0f0f07 	.word	0x2d0f0f07
 8004070:	53402d2d 	.word	0x53402d2d
 8004074:	07b88b53 	.word	0x07b88b53
 8004078:	9ecc      	.short	0x9ecc
{
 800407a:	2021      	movs	r0, #33	@ 0x21
}
 800407c:	b004      	add	sp, #16
 800407e:	bd10      	pop	{r4, pc}
        RFAL_EXIT_ON_ERR( ret, st25r3916SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 8004080:	f002 fa52 	bl	8006528 <st25r3916SetBitrate>
 8004084:	2800      	cmp	r0, #0
 8004086:	d0ea      	beq.n	800405e <rfalSetBitRate+0x22>
 8004088:	e7f8      	b.n	800407c <rfalSetBitRate+0x40>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800408a:	2008      	movs	r0, #8
 800408c:	f007 f848 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8004090:	2002      	movs	r0, #2
 8004092:	78a3      	ldrb	r3, [r4, #2]
 8004094:	22ff      	movs	r2, #255	@ 0xff
 8004096:	30ff      	adds	r0, #255	@ 0xff
 8004098:	2bea      	cmp	r3, #234	@ 0xea
 800409a:	d912      	bls.n	80040c2 <rfalSetBitRate+0x86>
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	4013      	ands	r3, r2
 80040a0:	4318      	orrs	r0, r3
 80040a2:	f007 f83d 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80040a6:	2081      	movs	r0, #129	@ 0x81
 80040a8:	22ff      	movs	r2, #255	@ 0xff
 80040aa:	78e3      	ldrb	r3, [r4, #3]
 80040ac:	0040      	lsls	r0, r0, #1
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80040ae:	2bea      	cmp	r3, #234	@ 0xea
 80040b0:	d800      	bhi.n	80040b4 <rfalSetBitRate+0x78>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80040b2:	3301      	adds	r3, #1
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	4013      	ands	r3, r2
 80040b8:	4318      	orrs	r0, r3
 80040ba:	f007 f831 	bl	800b120 <rfalSetAnalogConfig>
    return RFAL_ERR_NONE;
 80040be:	2000      	movs	r0, #0
 80040c0:	e7dc      	b.n	800407c <rfalSetBitRate+0x40>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80040c2:	3301      	adds	r3, #1
 80040c4:	e7ea      	b.n	800409c <rfalSetBitRate+0x60>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 80040c6:	2008      	movs	r0, #8
 80040c8:	f007 f82a 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80040cc:	78a3      	ldrb	r3, [r4, #2]
 80040ce:	22ff      	movs	r2, #255	@ 0xff
 80040d0:	4858      	ldr	r0, [pc, #352]	@ (8004234 <rfalSetBitRate+0x1f8>)
 80040d2:	2bea      	cmp	r3, #234	@ 0xea
 80040d4:	d908      	bls.n	80040e8 <rfalSetBitRate+0xac>
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	4013      	ands	r3, r2
 80040da:	4318      	orrs	r0, r3
 80040dc:	f007 f820 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80040e0:	22ff      	movs	r2, #255	@ 0xff
 80040e2:	78e3      	ldrb	r3, [r4, #3]
 80040e4:	4854      	ldr	r0, [pc, #336]	@ (8004238 <rfalSetBitRate+0x1fc>)
 80040e6:	e7e2      	b.n	80040ae <rfalSetBitRate+0x72>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80040e8:	3301      	adds	r3, #1
 80040ea:	e7f4      	b.n	80040d6 <rfalSetBitRate+0x9a>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 80040ec:	2008      	movs	r0, #8
 80040ee:	f007 f817 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80040f2:	78a3      	ldrb	r3, [r4, #2]
 80040f4:	22ff      	movs	r2, #255	@ 0xff
 80040f6:	4851      	ldr	r0, [pc, #324]	@ (800423c <rfalSetBitRate+0x200>)
 80040f8:	2bea      	cmp	r3, #234	@ 0xea
 80040fa:	d908      	bls.n	800410e <rfalSetBitRate+0xd2>
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	4013      	ands	r3, r2
 8004100:	4318      	orrs	r0, r3
 8004102:	f007 f80d 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8004106:	22ff      	movs	r2, #255	@ 0xff
 8004108:	78e3      	ldrb	r3, [r4, #3]
 800410a:	484d      	ldr	r0, [pc, #308]	@ (8004240 <rfalSetBitRate+0x204>)
 800410c:	e7cf      	b.n	80040ae <rfalSetBitRate+0x72>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800410e:	3301      	adds	r3, #1
 8004110:	e7f4      	b.n	80040fc <rfalSetBitRate+0xc0>
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97))
 8004112:	78e3      	ldrb	r3, [r4, #3]
                    return RFAL_ERR_PARAM;
 8004114:	2007      	movs	r0, #7
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97))
 8004116:	001a      	movs	r2, r3
 8004118:	3215      	adds	r2, #21
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	2a01      	cmp	r2, #1
 800411e:	d8ad      	bhi.n	800407c <rfalSetBitRate+0x40>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 8004120:	78a2      	ldrb	r2, [r4, #2]
 8004122:	0011      	movs	r1, r2
 8004124:	3114      	adds	r1, #20
 8004126:	b2c9      	uxtb	r1, r1
 8004128:	2901      	cmp	r1, #1
 800412a:	d8a7      	bhi.n	800407c <rfalSetBitRate+0x40>
                    config.coding = ( (gRFAL.txBR == RFAL_BR_1p66) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4 );
 800412c:	3aed      	subs	r2, #237	@ 0xed
 800412e:	4251      	negs	r1, r2
 8004130:	414a      	adcs	r2, r1
 8004132:	a802      	add	r0, sp, #8
                    switch( gRFAL.rxBR )
 8004134:	3beb      	subs	r3, #235	@ 0xeb
                    config.coding = ( (gRFAL.txBR == RFAL_BR_1p66) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4 );
 8004136:	7002      	strb	r2, [r0, #0]
                    switch( gRFAL.rxBR )
 8004138:	425a      	negs	r2, r3
 800413a:	4153      	adcs	r3, r2
                    rfalIso15693PhyConfigure(&config, &rfalIso15693StreamConfig);
 800413c:	4669      	mov	r1, sp
 800413e:	6043      	str	r3, [r0, #4]
 8004140:	f007 f8b6 	bl	800b2b0 <rfalIso15693PhyConfigure>
                    st25rStreamConf.din                  = rfalIso15693StreamConfig->din;
 8004144:	9b00      	ldr	r3, [sp, #0]
 8004146:	a801      	add	r0, sp, #4
 8004148:	785a      	ldrb	r2, [r3, #1]
 800414a:	7042      	strb	r2, [r0, #1]
                    st25rStreamConf.dout                 = rfalIso15693StreamConfig->dout;
 800414c:	789a      	ldrb	r2, [r3, #2]
 800414e:	7082      	strb	r2, [r0, #2]
                    st25rStreamConf.report_period_length = rfalIso15693StreamConfig->report_period_length;
 8004150:	78da      	ldrb	r2, [r3, #3]
 8004152:	70c2      	strb	r2, [r0, #3]
                    st25rStreamConf.useBPSK              = rfalIso15693StreamConfig->useBPSK;
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	7003      	strb	r3, [r0, #0]
                    st25r3916StreamConfigure(&st25rStreamConf);
 8004158:	f002 fb28 	bl	80067ac <st25r3916StreamConfigure>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800415c:	2008      	movs	r0, #8
 800415e:	f006 ffdf 	bl	800b120 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8004162:	78a3      	ldrb	r3, [r4, #2]
 8004164:	22ff      	movs	r2, #255	@ 0xff
 8004166:	4837      	ldr	r0, [pc, #220]	@ (8004244 <rfalSetBitRate+0x208>)
 8004168:	2bea      	cmp	r3, #234	@ 0xea
 800416a:	d908      	bls.n	800417e <rfalSetBitRate+0x142>
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	4013      	ands	r3, r2
 8004170:	4318      	orrs	r0, r3
 8004172:	f006 ffd5 	bl	800b120 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8004176:	22ff      	movs	r2, #255	@ 0xff
 8004178:	78e3      	ldrb	r3, [r4, #3]
 800417a:	4833      	ldr	r0, [pc, #204]	@ (8004248 <rfalSetBitRate+0x20c>)
 800417c:	e797      	b.n	80040ae <rfalSetBitRate+0x72>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800417e:	3301      	adds	r3, #1
 8004180:	e7f4      	b.n	800416c <rfalSetBitRate+0x130>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8004182:	2008      	movs	r0, #8
 8004184:	f006 ffcc 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8004188:	78a3      	ldrb	r3, [r4, #2]
 800418a:	22ff      	movs	r2, #255	@ 0xff
 800418c:	482f      	ldr	r0, [pc, #188]	@ (800424c <rfalSetBitRate+0x210>)
 800418e:	2bea      	cmp	r3, #234	@ 0xea
 8004190:	d908      	bls.n	80041a4 <rfalSetBitRate+0x168>
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	4013      	ands	r3, r2
 8004196:	4318      	orrs	r0, r3
 8004198:	f006 ffc2 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800419c:	22ff      	movs	r2, #255	@ 0xff
 800419e:	78e3      	ldrb	r3, [r4, #3]
 80041a0:	482b      	ldr	r0, [pc, #172]	@ (8004250 <rfalSetBitRate+0x214>)
 80041a2:	e784      	b.n	80040ae <rfalSetBitRate+0x72>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80041a4:	3301      	adds	r3, #1
 80041a6:	e7f4      	b.n	8004192 <rfalSetBitRate+0x156>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 80041a8:	2009      	movs	r0, #9
 80041aa:	f006 ffb9 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80041ae:	78a3      	ldrb	r3, [r4, #2]
 80041b0:	22ff      	movs	r2, #255	@ 0xff
 80041b2:	4828      	ldr	r0, [pc, #160]	@ (8004254 <rfalSetBitRate+0x218>)
 80041b4:	2bea      	cmp	r3, #234	@ 0xea
 80041b6:	d90f      	bls.n	80041d8 <rfalSetBitRate+0x19c>
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	4013      	ands	r3, r2
 80041bc:	4318      	orrs	r0, r3
 80041be:	b280      	uxth	r0, r0
 80041c0:	f006 ffae 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80041c4:	22ff      	movs	r2, #255	@ 0xff
 80041c6:	78e3      	ldrb	r3, [r4, #3]
 80041c8:	4823      	ldr	r0, [pc, #140]	@ (8004258 <rfalSetBitRate+0x21c>)
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80041ca:	2bea      	cmp	r3, #234	@ 0xea
 80041cc:	d92e      	bls.n	800422c <rfalSetBitRate+0x1f0>
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	4013      	ands	r3, r2
 80041d2:	4318      	orrs	r0, r3
 80041d4:	b280      	uxth	r0, r0
 80041d6:	e770      	b.n	80040ba <rfalSetBitRate+0x7e>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80041d8:	3301      	adds	r3, #1
 80041da:	e7ed      	b.n	80041b8 <rfalSetBitRate+0x17c>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 80041dc:	2009      	movs	r0, #9
 80041de:	f006 ff9f 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 80041e2:	78a3      	ldrb	r3, [r4, #2]
 80041e4:	22ff      	movs	r2, #255	@ 0xff
 80041e6:	481d      	ldr	r0, [pc, #116]	@ (800425c <rfalSetBitRate+0x220>)
 80041e8:	2bea      	cmp	r3, #234	@ 0xea
 80041ea:	d909      	bls.n	8004200 <rfalSetBitRate+0x1c4>
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	4013      	ands	r3, r2
 80041f0:	4318      	orrs	r0, r3
 80041f2:	b280      	uxth	r0, r0
 80041f4:	f006 ff94 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 80041f8:	22ff      	movs	r2, #255	@ 0xff
 80041fa:	78e3      	ldrb	r3, [r4, #3]
 80041fc:	4818      	ldr	r0, [pc, #96]	@ (8004260 <rfalSetBitRate+0x224>)
 80041fe:	e7e4      	b.n	80041ca <rfalSetBitRate+0x18e>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8004200:	3301      	adds	r3, #1
 8004202:	e7f3      	b.n	80041ec <rfalSetBitRate+0x1b0>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 8004204:	2009      	movs	r0, #9
 8004206:	f006 ff8b 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800420a:	78a3      	ldrb	r3, [r4, #2]
 800420c:	22ff      	movs	r2, #255	@ 0xff
 800420e:	4815      	ldr	r0, [pc, #84]	@ (8004264 <rfalSetBitRate+0x228>)
 8004210:	2bea      	cmp	r3, #234	@ 0xea
 8004212:	d909      	bls.n	8004228 <rfalSetBitRate+0x1ec>
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	4013      	ands	r3, r2
 8004218:	4318      	orrs	r0, r3
 800421a:	b280      	uxth	r0, r0
 800421c:	f006 ff80 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8004220:	22ff      	movs	r2, #255	@ 0xff
 8004222:	78e3      	ldrb	r3, [r4, #3]
 8004224:	4810      	ldr	r0, [pc, #64]	@ (8004268 <rfalSetBitRate+0x22c>)
 8004226:	e7d0      	b.n	80041ca <rfalSetBitRate+0x18e>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8004228:	3301      	adds	r3, #1
 800422a:	e7f3      	b.n	8004214 <rfalSetBitRate+0x1d8>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800422c:	3301      	adds	r3, #1
 800422e:	e7ce      	b.n	80041ce <rfalSetBitRate+0x192>
 8004230:	20001554 	.word	0x20001554
 8004234:	00000201 	.word	0x00000201
 8004238:	00000202 	.word	0x00000202
 800423c:	00000401 	.word	0x00000401
 8004240:	00000402 	.word	0x00000402
 8004244:	00001001 	.word	0x00001001
 8004248:	00001002 	.word	0x00001002
 800424c:	00000801 	.word	0x00000801
 8004250:	00000802 	.word	0x00000802
 8004254:	ffff8801 	.word	0xffff8801
 8004258:	ffff8802 	.word	0xffff8802
 800425c:	ffff8101 	.word	0xffff8101
 8004260:	ffff8102 	.word	0xffff8102
 8004264:	ffff8401 	.word	0xffff8401
 8004268:	ffff8402 	.word	0xffff8402

0800426c <rfalSetMode>:
{
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( gRFAL.state == RFAL_STATE_IDLE )
 800426e:	4e6a      	ldr	r6, [pc, #424]	@ (8004418 <rfalSetMode+0x1ac>)
{
 8004270:	0007      	movs	r7, r0
    if( gRFAL.state == RFAL_STATE_IDLE )
 8004272:	7833      	ldrb	r3, [r6, #0]
{
 8004274:	000c      	movs	r4, r1
 8004276:	0015      	movs	r5, r2
        return RFAL_ERR_WRONG_STATE;
 8004278:	2021      	movs	r0, #33	@ 0x21
    if( gRFAL.state == RFAL_STATE_IDLE )
 800427a:	2b00      	cmp	r3, #0
 800427c:	d013      	beq.n	80042a6 <rfalSetMode+0x3a>
        return RFAL_ERR_PARAM;
 800427e:	381a      	subs	r0, #26
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 8004280:	29ff      	cmp	r1, #255	@ 0xff
 8004282:	d010      	beq.n	80042a6 <rfalSetMode+0x3a>
 8004284:	2aff      	cmp	r2, #255	@ 0xff
 8004286:	d00e      	beq.n	80042a6 <rfalSetMode+0x3a>
    switch( mode )
 8004288:	1e7b      	subs	r3, r7, #1
 800428a:	3008      	adds	r0, #8
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d80a      	bhi.n	80042a6 <rfalSetMode+0x3a>
 8004290:	0018      	movs	r0, r3
 8004292:	f7fb ff4b 	bl	800012c <__gnu_thumb1_case_uqi>
 8004296:	2509      	.short	0x2509
 8004298:	6051422b 	.word	0x6051422b
 800429c:	a6766d6d 	.word	0xa6766d6d
 80042a0:	b307      	.short	0xb307
 80042a2:	8c          	.byte	0x8c
 80042a3:	00          	.byte	0x00
            return RFAL_ERR_NOTSUPP;
 80042a4:	2018      	movs	r0, #24
}
 80042a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80042a8:	2104      	movs	r1, #4
 80042aa:	2002      	movs	r0, #2
 80042ac:	f002 fc21 	bl	8006af2 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a );
 80042b0:	2108      	movs	r1, #8
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 80042b2:	2003      	movs	r0, #3
 80042b4:	f002 fb48 	bl	8006948 <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80042b8:	2002      	movs	r0, #2
 80042ba:	30ff      	adds	r0, #255	@ 0xff
 80042bc:	f006 ff30 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80042c0:	2081      	movs	r0, #129	@ 0x81
 80042c2:	0040      	lsls	r0, r0, #1
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80042c4:	f006 ff2c 	bl	800b120 <rfalSetAnalogConfig>
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 80042c8:	7832      	ldrb	r2, [r6, #0]
 80042ca:	1c13      	adds	r3, r2, #0
 80042cc:	2a01      	cmp	r2, #1
 80042ce:	d800      	bhi.n	80042d2 <rfalSetMode+0x66>
 80042d0:	2302      	movs	r3, #2
    return rfalSetBitRate(txBR, rxBR);
 80042d2:	0029      	movs	r1, r5
 80042d4:	0020      	movs	r0, r4
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 80042d6:	7033      	strb	r3, [r6, #0]
    gRFAL.mode  = mode;
 80042d8:	7077      	strb	r7, [r6, #1]
    return rfalSetBitRate(txBR, rxBR);
 80042da:	f7ff feaf 	bl	800403c <rfalSetBitRate>
 80042de:	e7e2      	b.n	80042a6 <rfalSetMode+0x3a>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80042e0:	2104      	movs	r1, #4
 80042e2:	2002      	movs	r0, #2
 80042e4:	f002 fc05 	bl	8006af2 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 80042e8:	2120      	movs	r1, #32
 80042ea:	e7e2      	b.n	80042b2 <rfalSetMode+0x46>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80042ec:	2104      	movs	r1, #4
 80042ee:	2002      	movs	r0, #2
 80042f0:	f002 fbff 	bl	8006af2 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 80042f4:	2110      	movs	r1, #16
 80042f6:	2003      	movs	r0, #3
 80042f8:	f002 fb26 	bl	8006948 <st25r3916WriteRegister>
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 80042fc:	2200      	movs	r2, #0
 80042fe:	21fc      	movs	r1, #252	@ 0xfc
 8004300:	2006      	movs	r0, #6
 8004302:	f002 fc30 	bl	8006b66 <st25r3916ChangeRegisterBits>
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 8004306:	2200      	movs	r2, #0
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 8004308:	21f0      	movs	r1, #240	@ 0xf0
 800430a:	2007      	movs	r0, #7
 800430c:	f002 fc2b 	bl	8006b66 <st25r3916ChangeRegisterBits>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8004310:	4842      	ldr	r0, [pc, #264]	@ (800441c <rfalSetMode+0x1b0>)
 8004312:	f006 ff05 	bl	800b120 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8004316:	4842      	ldr	r0, [pc, #264]	@ (8004420 <rfalSetMode+0x1b4>)
 8004318:	e7d4      	b.n	80042c4 <rfalSetMode+0x58>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800431a:	2104      	movs	r1, #4
 800431c:	2002      	movs	r0, #2
 800431e:	f002 fbe8 	bl	8006af2 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 8004322:	2110      	movs	r1, #16
 8004324:	2003      	movs	r0, #3
 8004326:	f002 fb0f 	bl	8006948 <st25r3916WriteRegister>
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 800432a:	2200      	movs	r2, #0
 800432c:	21fc      	movs	r1, #252	@ 0xfc
 800432e:	2006      	movs	r0, #6
 8004330:	f002 fc19 	bl	8006b66 <st25r3916ChangeRegisterBits>
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 8004334:	2220      	movs	r2, #32
 8004336:	e7e7      	b.n	8004308 <rfalSetMode+0x9c>
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8004338:	2104      	movs	r1, #4
 800433a:	2002      	movs	r0, #2
 800433c:	f002 fbd9 	bl	8006af2 <st25r3916ClrRegisterBits>
                st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 8004340:	2110      	movs	r1, #16
 8004342:	2003      	movs	r0, #3
 8004344:	f002 fb00 	bl	8006948 <st25r3916WriteRegister>
                st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 8004348:	2200      	movs	r2, #0
 800434a:	21fc      	movs	r1, #252	@ 0xfc
 800434c:	2006      	movs	r0, #6
 800434e:	f002 fc0a 	bl	8006b66 <st25r3916ChangeRegisterBits>
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 8004352:	2230      	movs	r2, #48	@ 0x30
 8004354:	e7d8      	b.n	8004308 <rfalSetMode+0x9c>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8004356:	2104      	movs	r1, #4
 8004358:	2002      	movs	r0, #2
 800435a:	f002 fbca 	bl	8006af2 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_felica );
 800435e:	2118      	movs	r1, #24
 8004360:	2003      	movs	r0, #3
 8004362:	f002 faf1 	bl	8006948 <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8004366:	482f      	ldr	r0, [pc, #188]	@ (8004424 <rfalSetMode+0x1b8>)
 8004368:	f006 feda 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800436c:	482e      	ldr	r0, [pc, #184]	@ (8004428 <rfalSetMode+0x1bc>)
 800436e:	e7a9      	b.n	80042c4 <rfalSetMode+0x58>
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8004370:	2104      	movs	r1, #4
 8004372:	2002      	movs	r0, #2
 8004374:	f002 fbbd 	bl	8006af2 <st25r3916ClrRegisterBits>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8004378:	482c      	ldr	r0, [pc, #176]	@ (800442c <rfalSetMode+0x1c0>)
 800437a:	f006 fed1 	bl	800b120 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800437e:	482c      	ldr	r0, [pc, #176]	@ (8004430 <rfalSetMode+0x1c4>)
 8004380:	e7a0      	b.n	80042c4 <rfalSetMode+0x58>
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_eof) );
 8004382:	2102      	movs	r1, #2
 8004384:	2003      	movs	r0, #3
 8004386:	f002 fadf 	bl	8006948 <st25r3916WriteRegister>
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 800438a:	2200      	movs	r2, #0
 800438c:	2104      	movs	r1, #4
 800438e:	2012      	movs	r0, #18
 8004390:	f002 fbe9 	bl	8006b66 <st25r3916ChangeRegisterBits>
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TCMDOFF ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 8004394:	2160      	movs	r1, #96	@ 0x60
 8004396:	20a9      	movs	r0, #169	@ 0xa9
 8004398:	f002 f991 	bl	80066be <st25r3916SetStartGPTimer>
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 800439c:	2180      	movs	r1, #128	@ 0x80
 800439e:	2015      	movs	r0, #21
 80043a0:	f002 fad2 	bl	8006948 <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80043a4:	4823      	ldr	r0, [pc, #140]	@ (8004434 <rfalSetMode+0x1c8>)
 80043a6:	f006 febb 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80043aa:	4823      	ldr	r0, [pc, #140]	@ (8004438 <rfalSetMode+0x1cc>)
 80043ac:	e78a      	b.n	80042c4 <rfalSetMode+0x58>
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 80043ae:	21ba      	movs	r1, #186	@ 0xba
 80043b0:	2003      	movs	r0, #3
 80043b2:	f002 fac9 	bl	8006948 <st25r3916WriteRegister>
            st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 80043b6:	2100      	movs	r1, #0
 80043b8:	2055      	movs	r0, #85	@ 0x55
 80043ba:	f002 fac5 	bl	8006948 <st25r3916WriteRegister>
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 80043be:	2200      	movs	r2, #0
 80043c0:	2104      	movs	r1, #4
 80043c2:	2012      	movs	r0, #18
 80043c4:	f002 fbcf 	bl	8006b66 <st25r3916ChangeRegisterBits>
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TCMDOFF ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 80043c8:	2160      	movs	r1, #96	@ 0x60
 80043ca:	20a9      	movs	r0, #169	@ 0xa9
 80043cc:	f002 f977 	bl	80066be <st25r3916SetStartGPTimer>
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 80043d0:	2180      	movs	r1, #128	@ 0x80
 80043d2:	2015      	movs	r0, #21
 80043d4:	f002 fab8 	bl	8006948 <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80043d8:	4818      	ldr	r0, [pc, #96]	@ (800443c <rfalSetMode+0x1d0>)
 80043da:	f006 fea1 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80043de:	4818      	ldr	r0, [pc, #96]	@ (8004440 <rfalSetMode+0x1d4>)
 80043e0:	e770      	b.n	80042c4 <rfalSetMode+0x58>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80043e2:	2104      	movs	r1, #4
 80043e4:	2002      	movs	r0, #2
 80043e6:	f002 fb84 	bl	8006af2 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfca | ST25R3916_REG_MODE_nfc_ar_off) );
 80043ea:	2188      	movs	r1, #136	@ 0x88
 80043ec:	2003      	movs	r0, #3
 80043ee:	f002 faab 	bl	8006948 <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 80043f2:	4814      	ldr	r0, [pc, #80]	@ (8004444 <rfalSetMode+0x1d8>)
 80043f4:	f006 fe94 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 80043f8:	4813      	ldr	r0, [pc, #76]	@ (8004448 <rfalSetMode+0x1dc>)
 80043fa:	e763      	b.n	80042c4 <rfalSetMode+0x58>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 80043fc:	2104      	movs	r1, #4
 80043fe:	2002      	movs	r0, #2
 8004400:	f002 fb77 	bl	8006af2 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfcf | ST25R3916_REG_MODE_nfc_ar_off) );
 8004404:	21a0      	movs	r1, #160	@ 0xa0
 8004406:	2003      	movs	r0, #3
 8004408:	f002 fa9e 	bl	8006948 <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800440c:	480f      	ldr	r0, [pc, #60]	@ (800444c <rfalSetMode+0x1e0>)
 800440e:	f006 fe87 	bl	800b120 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8004412:	480f      	ldr	r0, [pc, #60]	@ (8004450 <rfalSetMode+0x1e4>)
 8004414:	e756      	b.n	80042c4 <rfalSetMode+0x58>
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	20001554 	.word	0x20001554
 800441c:	00000201 	.word	0x00000201
 8004420:	00000202 	.word	0x00000202
 8004424:	00000401 	.word	0x00000401
 8004428:	00000402 	.word	0x00000402
 800442c:	00001001 	.word	0x00001001
 8004430:	00001002 	.word	0x00001002
 8004434:	00000801 	.word	0x00000801
 8004438:	00000802 	.word	0x00000802
 800443c:	00008801 	.word	0x00008801
 8004440:	00008802 	.word	0x00008802
 8004444:	00008101 	.word	0x00008101
 8004448:	00008102 	.word	0x00008102
 800444c:	00008401 	.word	0x00008401
 8004450:	00008402 	.word	0x00008402

08004454 <rfalGetBitRate>:
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 8004454:	4b09      	ldr	r3, [pc, #36]	@ (800447c <rfalGetBitRate+0x28>)
{
 8004456:	b510      	push	{r4, lr}
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 8004458:	781c      	ldrb	r4, [r3, #0]
{
 800445a:	0002      	movs	r2, r0
        return RFAL_ERR_WRONG_STATE;
 800445c:	2021      	movs	r0, #33	@ 0x21
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 800445e:	2c00      	cmp	r4, #0
 8004460:	d00b      	beq.n	800447a <rfalGetBitRate+0x26>
 8004462:	785c      	ldrb	r4, [r3, #1]
 8004464:	2c00      	cmp	r4, #0
 8004466:	d008      	beq.n	800447a <rfalGetBitRate+0x26>
    if( txBR != NULL )
 8004468:	2a00      	cmp	r2, #0
 800446a:	d001      	beq.n	8004470 <rfalGetBitRate+0x1c>
        *txBR = gRFAL.txBR;
 800446c:	7898      	ldrb	r0, [r3, #2]
 800446e:	7010      	strb	r0, [r2, #0]
    if( rxBR != NULL )
 8004470:	2900      	cmp	r1, #0
 8004472:	d001      	beq.n	8004478 <rfalGetBitRate+0x24>
        *rxBR = gRFAL.rxBR;
 8004474:	78db      	ldrb	r3, [r3, #3]
 8004476:	700b      	strb	r3, [r1, #0]
    return RFAL_ERR_NONE;
 8004478:	2000      	movs	r0, #0
}
 800447a:	bd10      	pop	{r4, pc}
 800447c:	20001554 	.word	0x20001554

08004480 <rfalSetErrorHandling>:
{
 8004480:	b510      	push	{r4, lr}
 8004482:	1e04      	subs	r4, r0, #0
    switch(eHandling)
 8004484:	d004      	beq.n	8004490 <rfalSetErrorHandling+0x10>
 8004486:	2801      	cmp	r0, #1
 8004488:	d007      	beq.n	800449a <rfalSetErrorHandling+0x1a>
    gRFAL.conf.eHandling = eHandling;
 800448a:	4b07      	ldr	r3, [pc, #28]	@ (80044a8 <rfalSetErrorHandling+0x28>)
 800448c:	71dc      	strb	r4, [r3, #7]
}
 800448e:	bd10      	pop	{r4, pc}
            st25r3916ClrRegisterBits( ST25R3916_REG_EMD_SUP_CONF, ST25R3916_REG_EMD_SUP_CONF_emd_emv );
 8004490:	2180      	movs	r1, #128	@ 0x80
 8004492:	2045      	movs	r0, #69	@ 0x45
 8004494:	f002 fb2d 	bl	8006af2 <st25r3916ClrRegisterBits>
            break;
 8004498:	e7f7      	b.n	800448a <rfalSetErrorHandling+0xa>
            st25r3916ModifyRegister( ST25R3916_REG_EMD_SUP_CONF, 
 800449a:	2284      	movs	r2, #132	@ 0x84
 800449c:	218f      	movs	r1, #143	@ 0x8f
 800449e:	2045      	movs	r0, #69	@ 0x45
 80044a0:	f002 fb4c 	bl	8006b3c <st25r3916ModifyRegister>
            break;
 80044a4:	e7f1      	b.n	800448a <rfalSetErrorHandling+0xa>
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	20001554 	.word	0x20001554

080044ac <rfalSetFDTPoll>:
    gRFAL.timings.FDTPoll = RFAL_MIN( FDTPoll, RFAL_ST25R3916_GPT_MAX_1FC );
 80044ac:	4b03      	ldr	r3, [pc, #12]	@ (80044bc <rfalSetFDTPoll+0x10>)
 80044ae:	4a04      	ldr	r2, [pc, #16]	@ (80044c0 <rfalSetFDTPoll+0x14>)
 80044b0:	4298      	cmp	r0, r3
 80044b2:	d900      	bls.n	80044b6 <rfalSetFDTPoll+0xa>
 80044b4:	0018      	movs	r0, r3
 80044b6:	6110      	str	r0, [r2, #16]
}
 80044b8:	4770      	bx	lr
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	0007fff8 	.word	0x0007fff8
 80044c0:	20001554 	.word	0x20001554

080044c4 <rfalGetFDTPoll>:
    return gRFAL.timings.FDTPoll;
 80044c4:	4b01      	ldr	r3, [pc, #4]	@ (80044cc <rfalGetFDTPoll+0x8>)
 80044c6:	6918      	ldr	r0, [r3, #16]
}
 80044c8:	4770      	bx	lr
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	20001554 	.word	0x20001554

080044d0 <rfalSetFDTListen>:
    gRFAL.timings.FDTListen = RFAL_MIN( FDTListen, RFAL_ST25R3916_MRT_MAX_1FC );
 80044d0:	23ff      	movs	r3, #255	@ 0xff
 80044d2:	4a03      	ldr	r2, [pc, #12]	@ (80044e0 <rfalSetFDTListen+0x10>)
 80044d4:	019b      	lsls	r3, r3, #6
 80044d6:	4298      	cmp	r0, r3
 80044d8:	d900      	bls.n	80044dc <rfalSetFDTListen+0xc>
 80044da:	0018      	movs	r0, r3
 80044dc:	60d0      	str	r0, [r2, #12]
}
 80044de:	4770      	bx	lr
 80044e0:	20001554 	.word	0x20001554

080044e4 <rfalSetGT>:
    gRFAL.timings.GT = RFAL_MIN( GT, RFAL_ST25R3916_GT_MAX_1FC );
 80044e4:	4b03      	ldr	r3, [pc, #12]	@ (80044f4 <rfalSetGT+0x10>)
 80044e6:	4a04      	ldr	r2, [pc, #16]	@ (80044f8 <rfalSetGT+0x14>)
 80044e8:	4298      	cmp	r0, r3
 80044ea:	d900      	bls.n	80044ee <rfalSetGT+0xa>
 80044ec:	0018      	movs	r0, r3
 80044ee:	6090      	str	r0, [r2, #8]
}
 80044f0:	4770      	bx	lr
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	04d97480 	.word	0x04d97480
 80044f8:	20001554 	.word	0x20001554

080044fc <rfalIsGTExpired>:
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 80044fc:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <rfalIsGTExpired+0x14>)
    return true;
 80044fe:	2001      	movs	r0, #1
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
{
 8004502:	b510      	push	{r4, lr}
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <rfalIsGTExpired+0x12>
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 8004508:	0018      	movs	r0, r3
 800450a:	f002 fccb 	bl	8006ea4 <timerIsExpired>
}
 800450e:	bd10      	pop	{r4, pc}
 8004510:	20001554 	.word	0x20001554

08004514 <rfalFieldOnAndStartGT>:
    if( (!st25r3916IsOscOn()) || (gRFAL.state < RFAL_STATE_INIT) )
 8004514:	2280      	movs	r2, #128	@ 0x80
{
 8004516:	b570      	push	{r4, r5, r6, lr}
    if( (!st25r3916IsOscOn()) || (gRFAL.state < RFAL_STATE_INIT) )
 8004518:	0011      	movs	r1, r2
 800451a:	2002      	movs	r0, #2
 800451c:	f002 fb3e 	bl	8006b9c <st25r3916CheckReg>
        return RFAL_ERR_WRONG_STATE;
 8004520:	2521      	movs	r5, #33	@ 0x21
    if( (!st25r3916IsOscOn()) || (gRFAL.state < RFAL_STATE_INIT) )
 8004522:	2800      	cmp	r0, #0
 8004524:	d048      	beq.n	80045b8 <rfalFieldOnAndStartGT+0xa4>
 8004526:	4c25      	ldr	r4, [pc, #148]	@ (80045bc <rfalFieldOnAndStartGT+0xa8>)
 8004528:	7823      	ldrb	r3, [r4, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d044      	beq.n	80045b8 <rfalFieldOnAndStartGT+0xa4>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800452e:	2002      	movs	r0, #2
 8004530:	f006 fdf6 	bl	800b120 <rfalSetAnalogConfig>
    if( (!st25r3916IsTxEnabled()) || (!gRFAL.field) )
 8004534:	2208      	movs	r2, #8
 8004536:	2002      	movs	r0, #2
 8004538:	0011      	movs	r1, r2
 800453a:	f002 fb2f 	bl	8006b9c <st25r3916CheckReg>
 800453e:	2800      	cmp	r0, #0
 8004540:	d003      	beq.n	800454a <rfalFieldOnAndStartGT+0x36>
    ret = RFAL_ERR_NONE;
 8004542:	2500      	movs	r5, #0
    if( (!st25r3916IsTxEnabled()) || (!gRFAL.field) )
 8004544:	7923      	ldrb	r3, [r4, #4]
 8004546:	42ab      	cmp	r3, r5
 8004548:	d128      	bne.n	800459c <rfalFieldOnAndStartGT+0x88>
        st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 800454a:	2100      	movs	r1, #0
 800454c:	2055      	movs	r0, #85	@ 0x55
 800454e:	f002 f9fb 	bl	8006948 <st25r3916WriteRegister>
        st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_manual_efd_ca );
 8004552:	2201      	movs	r2, #1
 8004554:	2103      	movs	r1, #3
 8004556:	2002      	movs	r0, #2
 8004558:	f002 fb05 	bl	8006b66 <st25r3916ChangeRegisterBits>
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, (ST25R3916_REG_AUX_nfc_n_mask & gRFAL.timings.nTRFW) );
 800455c:	2603      	movs	r6, #3
 800455e:	22ff      	movs	r2, #255	@ 0xff
 8004560:	7d23      	ldrb	r3, [r4, #20]
 8004562:	0011      	movs	r1, r2
 8004564:	4033      	ands	r3, r6
 8004566:	20c8      	movs	r0, #200	@ 0xc8
 8004568:	f002 f802 	bl	8006570 <st25r3916PerformCollisionAvoidance>
        st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 800456c:	0032      	movs	r2, r6
 800456e:	0031      	movs	r1, r6
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, (ST25R3916_REG_AUX_nfc_n_mask & gRFAL.timings.nTRFW) );
 8004570:	0005      	movs	r5, r0
        st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 8004572:	2002      	movs	r0, #2
 8004574:	f002 faf7 	bl	8006b66 <st25r3916ChangeRegisterBits>
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 8004578:	7d20      	ldrb	r0, [r4, #20]
 800457a:	2107      	movs	r1, #7
 800457c:	3001      	adds	r0, #1
 800457e:	f7fb fe79 	bl	8000274 <__aeabi_uidivmod>
        gRFAL.field = st25r3916IsTxEnabled();
 8004582:	2208      	movs	r2, #8
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 8004584:	7521      	strb	r1, [r4, #20]
        gRFAL.field = st25r3916IsTxEnabled();
 8004586:	2002      	movs	r0, #2
 8004588:	0011      	movs	r1, r2
 800458a:	f002 fb07 	bl	8006b9c <st25r3916CheckReg>
 800458e:	7120      	strb	r0, [r4, #4]
        if(gRFAL.field)
 8004590:	2800      	cmp	r0, #0
 8004592:	d003      	beq.n	800459c <rfalFieldOnAndStartGT+0x88>
            st25r3916TxRxOn(); /* Enable Tx and Rx (Tx is already On)*/
 8004594:	2148      	movs	r1, #72	@ 0x48
 8004596:	2002      	movs	r0, #2
 8004598:	f002 fabd 	bl	8006b16 <st25r3916SetRegisterBits>
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800459c:	68a0      	ldr	r0, [r4, #8]
 800459e:	2800      	cmp	r0, #0
 80045a0:	d00a      	beq.n	80045b8 <rfalFieldOnAndStartGT+0xa4>
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( RFAL_MAX( (gRFAL.timings.GT), RFAL_ST25R3916_GT_MIN_1FC) ) );
 80045a2:	4b07      	ldr	r3, [pc, #28]	@ (80045c0 <rfalFieldOnAndStartGT+0xac>)
 80045a4:	4298      	cmp	r0, r3
 80045a6:	d200      	bcs.n	80045aa <rfalFieldOnAndStartGT+0x96>
 80045a8:	0018      	movs	r0, r3
 80045aa:	4905      	ldr	r1, [pc, #20]	@ (80045c0 <rfalFieldOnAndStartGT+0xac>)
 80045ac:	f7fb fddc 	bl	8000168 <__udivsi3>
 80045b0:	b280      	uxth	r0, r0
 80045b2:	f002 fc71 	bl	8006e98 <timerCalculateTimer>
 80045b6:	6420      	str	r0, [r4, #64]	@ 0x40
}
 80045b8:	0028      	movs	r0, r5
 80045ba:	bd70      	pop	{r4, r5, r6, pc}
 80045bc:	20001554 	.word	0x20001554
 80045c0:	000034f8 	.word	0x000034f8

080045c4 <rfalFieldOff>:
{
 80045c4:	b510      	push	{r4, lr}
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 80045c6:	4c08      	ldr	r4, [pc, #32]	@ (80045e8 <rfalFieldOff+0x24>)
 80045c8:	7e23      	ldrb	r3, [r4, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <rfalFieldOff+0xe>
        rfalCleanupTransceive();
 80045ce:	f7ff fbc9 	bl	8003d64 <rfalCleanupTransceive>
    st25r3916TxRxOff();
 80045d2:	2148      	movs	r1, #72	@ 0x48
 80045d4:	2002      	movs	r0, #2
 80045d6:	f002 fa8c 	bl	8006af2 <st25r3916ClrRegisterBits>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 80045da:	2003      	movs	r0, #3
 80045dc:	f006 fda0 	bl	800b120 <rfalSetAnalogConfig>
    gRFAL.field = false;
 80045e0:	2000      	movs	r0, #0
 80045e2:	7120      	strb	r0, [r4, #4]
}
 80045e4:	bd10      	pop	{r4, pc}
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	20001554 	.word	0x20001554

080045ec <rfalStartTransceive>:
{
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	1e05      	subs	r5, r0, #0
    if( ctx == NULL )
 80045f0:	d101      	bne.n	80045f6 <rfalStartTransceive+0xa>
        return RFAL_ERR_PARAM;
 80045f2:	2007      	movs	r0, #7
}
 80045f4:	bd70      	pop	{r4, r5, r6, pc}
    if( gRFAL.state >= RFAL_STATE_MODE_SET )
 80045f6:	4c62      	ldr	r4, [pc, #392]	@ (8004780 <rfalStartTransceive+0x194>)
 80045f8:	7823      	ldrb	r3, [r4, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d801      	bhi.n	8004602 <rfalStartTransceive+0x16>
            return RFAL_ERR_WRONG_STATE;
 80045fe:	2021      	movs	r0, #33	@ 0x21
 8004600:	e7f8      	b.n	80045f4 <rfalStartTransceive+0x8>
        if( (!st25r3916IsTxEnabled()) && ((!rfalIsModePassiveListen( gRFAL.mode )) && (ctx->txBuf != NULL)) )
 8004602:	2208      	movs	r2, #8
 8004604:	2002      	movs	r0, #2
 8004606:	0011      	movs	r1, r2
 8004608:	f002 fac8 	bl	8006b9c <st25r3916CheckReg>
 800460c:	2800      	cmp	r0, #0
 800460e:	d106      	bne.n	800461e <rfalStartTransceive+0x32>
 8004610:	7863      	ldrb	r3, [r4, #1]
 8004612:	3b0a      	subs	r3, #10
 8004614:	2b02      	cmp	r3, #2
 8004616:	d902      	bls.n	800461e <rfalStartTransceive+0x32>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1ef      	bne.n	80045fe <rfalStartTransceive+0x12>
        gRFAL.TxRx.ctx = *ctx;
 800461e:	0023      	movs	r3, r4
 8004620:	331c      	adds	r3, #28
 8004622:	cd07      	ldmia	r5!, {r0, r1, r2}
 8004624:	c307      	stmia	r3!, {r0, r1, r2}
 8004626:	cd07      	ldmia	r5!, {r0, r1, r2}
 8004628:	c307      	stmia	r3!, {r0, r1, r2}
 800462a:	682a      	ldr	r2, [r5, #0]
 800462c:	601a      	str	r2, [r3, #0]
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d02f      	beq.n	8004694 <rfalStartTransceive+0xa8>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8004634:	7863      	ldrb	r3, [r4, #1]
 8004636:	1e5a      	subs	r2, r3, #1
 8004638:	2a01      	cmp	r2, #1
 800463a:	d800      	bhi.n	800463e <rfalStartTransceive+0x52>
 800463c:	e091      	b.n	8004762 <rfalStartTransceive+0x176>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 800463e:	25ca      	movs	r5, #202	@ 0xca
 8004640:	006d      	lsls	r5, r5, #1
 8004642:	2b03      	cmp	r3, #3
 8004644:	d004      	beq.n	8004650 <rfalStartTransceive+0x64>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 8004646:	3d15      	subs	r5, #21
 8004648:	3dff      	subs	r5, #255	@ 0xff
 800464a:	2b07      	cmp	r3, #7
 800464c:	d000      	beq.n	8004650 <rfalStartTransceive+0x64>
 800464e:	3d40      	subs	r5, #64	@ 0x40
            st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 8004650:	2108      	movs	r1, #8
 8004652:	2012      	movs	r0, #18
 8004654:	f002 fa4d 	bl	8006af2 <st25r3916ClrRegisterBits>
            if( gRFAL.mode == RFAL_MODE_POLL_NFCB )
 8004658:	7863      	ldrb	r3, [r4, #1]
 800465a:	2b03      	cmp	r3, #3
 800465c:	d110      	bne.n	8004680 <rfalStartTransceive+0x94>
                if( st25r3916CheckReg(ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, 0x00U) )
 800465e:	2200      	movs	r2, #0
 8004660:	2104      	movs	r1, #4
 8004662:	200a      	movs	r0, #10
 8004664:	f002 fa9a 	bl	8006b9c <st25r3916CheckReg>
 8004668:	2800      	cmp	r0, #0
 800466a:	d009      	beq.n	8004680 <rfalStartTransceive+0x94>
                    st25r3916SetRegisterBits( ST25R3916_REG_CORR_CONF1, ST25R3916_REG_CORR_CONF1_corr_s3 );                                                 /* Ensure BPSK start to 33 pilot pulses */
 800466c:	2108      	movs	r1, #8
 800466e:	204c      	movs	r0, #76	@ 0x4c
 8004670:	f002 fa51 	bl	8006b16 <st25r3916SetRegisterBits>
                    st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 8004674:	2214      	movs	r2, #20
 8004676:	211f      	movs	r1, #31
 8004678:	2046      	movs	r0, #70	@ 0x46
                    FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJT_CORR;                                                                                        /* Reduce FDT(Listen)                   */
 800467a:	3580      	adds	r5, #128	@ 0x80
                    st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 800467c:	f002 fa73 	bl	8006b66 <st25r3916ChangeRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 8004680:	68e3      	ldr	r3, [r4, #12]
 8004682:	2104      	movs	r1, #4
 8004684:	42ab      	cmp	r3, r5
 8004686:	d302      	bcc.n	800468e <rfalStartTransceive+0xa2>
 8004688:	1b5b      	subs	r3, r3, r5
 800468a:	099b      	lsrs	r3, r3, #6
 800468c:	b2d9      	uxtb	r1, r3
 800468e:	200f      	movs	r0, #15
 8004690:	f002 f95a 	bl	8006948 <st25r3916WriteRegister>
        if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8004694:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004696:	1e43      	subs	r3, r0, #1
 8004698:	3303      	adds	r3, #3
 800469a:	d868      	bhi.n	800476e <rfalStartTransceive+0x182>
            if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 800469c:	68e3      	ldr	r3, [r4, #12]
 800469e:	4298      	cmp	r0, r3
 80046a0:	d9a7      	bls.n	80045f2 <rfalStartTransceive+0x6>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 80046a2:	7862      	ldrb	r2, [r4, #1]
 80046a4:	2a01      	cmp	r2, #1
 80046a6:	d05f      	beq.n	8004768 <rfalStartTransceive+0x17c>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 80046a8:	2a02      	cmp	r2, #2
 80046aa:	d05d      	beq.n	8004768 <rfalStartTransceive+0x17c>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 80046ac:	23b4      	movs	r3, #180	@ 0xb4
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	2a03      	cmp	r2, #3
 80046b2:	d00e      	beq.n	80046d2 <rfalStartTransceive+0xe6>
            if( (gRFAL.mode == RFAL_MODE_POLL_NFCF) || (gRFAL.mode == RFAL_MODE_POLL_ACTIVE_P2P) )
 80046b4:	2a06      	cmp	r2, #6
 80046b6:	d002      	beq.n	80046be <rfalStartTransceive+0xd2>
 80046b8:	2340      	movs	r3, #64	@ 0x40
 80046ba:	2a09      	cmp	r2, #9
 80046bc:	d109      	bne.n	80046d2 <rfalStartTransceive+0xe6>
                FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 80046be:	78a3      	ldrb	r3, [r4, #2]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	1e5a      	subs	r2, r3, #1
 80046c4:	4193      	sbcs	r3, r2
 80046c6:	2288      	movs	r2, #136	@ 0x88
 80046c8:	425b      	negs	r3, r3
 80046ca:	0a5b      	lsrs	r3, r3, #9
 80046cc:	025b      	lsls	r3, r3, #9
 80046ce:	00d2      	lsls	r2, r2, #3
 80046d0:	189b      	adds	r3, r3, r2
            gRFAL.TxRx.ctx.fwt = RFAL_MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3916_NRT_MAX_1FC );
 80046d2:	18c0      	adds	r0, r0, r3
 80046d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004784 <rfalStartTransceive+0x198>)
 80046d6:	4298      	cmp	r0, r3
 80046d8:	d900      	bls.n	80046dc <rfalStartTransceive+0xf0>
 80046da:	0018      	movs	r0, r3
 80046dc:	6360      	str	r0, [r4, #52]	@ 0x34
            st25r3916SetNoResponseTime( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 80046de:	0980      	lsrs	r0, r0, #6
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 80046e0:	f001 ffb6 	bl	8006650 <st25r3916SetNoResponseTime>
        gRFAL.state       = RFAL_STATE_TXRX;
 80046e4:	2303      	movs	r3, #3
 80046e6:	7023      	strb	r3, [r4, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 80046e8:	3308      	adds	r3, #8
 80046ea:	7623      	strb	r3, [r4, #24]
        gRFAL.TxRx.status = RFAL_ERR_BUSY;
 80046ec:	3b09      	subs	r3, #9
 80046ee:	8363      	strh	r3, [r4, #26]
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 80046f0:	7863      	ldrb	r3, [r4, #1]
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 80046f2:	69e1      	ldr	r1, [r4, #28]
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 80046f4:	3b07      	subs	r3, #7
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d83b      	bhi.n	8004772 <rfalStartTransceive+0x186>
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 80046fa:	0022      	movs	r2, r4
 80046fc:	4b22      	ldr	r3, [pc, #136]	@ (8004788 <rfalStartTransceive+0x19c>)
 80046fe:	321c      	adds	r2, #28
 8004700:	18e3      	adds	r3, r4, r3
 8004702:	ca61      	ldmia	r2!, {r0, r5, r6}
 8004704:	c361      	stmia	r3!, {r0, r5, r6}
 8004706:	ca61      	ldmia	r2!, {r0, r5, r6}
 8004708:	c361      	stmia	r3!, {r0, r5, r6}
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	601a      	str	r2, [r3, #0]
            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 800470e:	4b1f      	ldr	r3, [pc, #124]	@ (800478c <rfalStartTransceive+0x1a0>)
 8004710:	58e3      	ldr	r3, [r4, r3]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d000      	beq.n	8004718 <rfalStartTransceive+0x12c>
 8004716:	4b1e      	ldr	r3, [pc, #120]	@ (8004790 <rfalStartTransceive+0x1a4>)
 8004718:	6263      	str	r3, [r4, #36]	@ 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800471a:	2382      	movs	r3, #130	@ 0x82
 800471c:	015b      	lsls	r3, r3, #5
 800471e:	8523      	strh	r3, [r4, #40]	@ 0x28
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 8004720:	2387      	movs	r3, #135	@ 0x87
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	58e2      	ldr	r2, [r4, r3]
 8004726:	2308      	movs	r3, #8
 8004728:	401a      	ands	r2, r3
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800472a:	332b      	adds	r3, #43	@ 0x2b
 800472c:	4313      	orrs	r3, r2
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 800472e:	6323      	str	r3, [r4, #48]	@ 0x30
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 8004730:	2900      	cmp	r1, #0
 8004732:	d123      	bne.n	800477c <rfalStartTransceive+0x190>
            rfalPrepareTransceive( );
 8004734:	f7ff fb2c 	bl	8003d90 <rfalPrepareTransceive>
            if( rfalIsModeActiveComm(gRFAL.mode) )
 8004738:	2204      	movs	r2, #4
 800473a:	7863      	ldrb	r3, [r4, #1]
 800473c:	4393      	bics	r3, r2
 800473e:	2b09      	cmp	r3, #9
 8004740:	d106      	bne.n	8004750 <rfalStartTransceive+0x164>
                st25r3916TxOff();                
 8004742:	2108      	movs	r1, #8
 8004744:	2002      	movs	r0, #2
 8004746:	f002 f9d4 	bl	8006af2 <st25r3916ClrRegisterBits>
                st25r3916ExecuteCommand( ST25R3916_CMD_START_PPON2_TIMER );
 800474a:	20e4      	movs	r0, #228	@ 0xe4
 800474c:	f002 f985 	bl	8006a5a <st25r3916ExecuteCommand>
            st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8004750:	20d1      	movs	r0, #209	@ 0xd1
 8004752:	f002 f982 	bl	8006a5a <st25r3916ExecuteCommand>
            st25r3916ExecuteCommand( ST25R3916_CMD_START_NO_RESPONSE_TIMER );
 8004756:	20e3      	movs	r0, #227	@ 0xe3
 8004758:	f002 f97f 	bl	8006a5a <st25r3916ExecuteCommand>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800475c:	2351      	movs	r3, #81	@ 0x51
 800475e:	7623      	strb	r3, [r4, #24]
 8004760:	e00c      	b.n	800477c <rfalStartTransceive+0x190>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8004762:	258a      	movs	r5, #138	@ 0x8a
 8004764:	006d      	lsls	r5, r5, #1
 8004766:	e773      	b.n	8004650 <rfalStartTransceive+0x64>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 8004768:	23a0      	movs	r3, #160	@ 0xa0
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	e7b1      	b.n	80046d2 <rfalStartTransceive+0xe6>
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 800476e:	2000      	movs	r0, #0
 8004770:	e7b6      	b.n	80046e0 <rfalStartTransceive+0xf4>
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 8004772:	2900      	cmp	r1, #0
 8004774:	d0de      	beq.n	8004734 <rfalStartTransceive+0x148>
 8004776:	8c23      	ldrh	r3, [r4, #32]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0db      	beq.n	8004734 <rfalStartTransceive+0x148>
                return  RFAL_ERR_NONE;
 800477c:	2000      	movs	r0, #0
 800477e:	e739      	b.n	80045f4 <rfalStartTransceive+0x8>
 8004780:	20001554 	.word	0x20001554
 8004784:	0ffff000 	.word	0x0ffff000
 8004788:	00000424 	.word	0x00000424
 800478c:	0000042c 	.word	0x0000042c
 8004790:	2000176c 	.word	0x2000176c

08004794 <rfalIsTransceiveInTx>:
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 8004794:	2245      	movs	r2, #69	@ 0x45
 8004796:	2000      	movs	r0, #0
 8004798:	4b03      	ldr	r3, [pc, #12]	@ (80047a8 <rfalIsTransceiveInTx+0x14>)
 800479a:	7e1b      	ldrb	r3, [r3, #24]
 800479c:	3b0b      	subs	r3, #11
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	429a      	cmp	r2, r3
 80047a2:	4140      	adcs	r0, r0
 80047a4:	b2c0      	uxtb	r0, r0
}
 80047a6:	4770      	bx	lr
 80047a8:	20001554 	.word	0x20001554

080047ac <rfalGetTransceiveStatus>:
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : RFAL_ERR_BUSY);
 80047ac:	4b03      	ldr	r3, [pc, #12]	@ (80047bc <rfalGetTransceiveStatus+0x10>)
 80047ae:	2002      	movs	r0, #2
 80047b0:	7e1a      	ldrb	r2, [r3, #24]
 80047b2:	2a00      	cmp	r2, #0
 80047b4:	d100      	bne.n	80047b8 <rfalGetTransceiveStatus+0xc>
 80047b6:	8b58      	ldrh	r0, [r3, #26]
}
 80047b8:	4770      	bx	lr
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	20001554 	.word	0x20001554

080047c0 <rfalISO14443AGetTransceiveAnticollisionFrameStatus>:
{
 80047c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047c2:	b085      	sub	sp, #20
    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 80047c4:	f7ff fff2 	bl	80047ac <rfalGetTransceiveStatus>
 80047c8:	0004      	movs	r4, r0
 80047ca:	2802      	cmp	r0, #2
 80047cc:	d057      	beq.n	800487e <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xbe>
    if( (*gRFAL.nfcaData.bitsToSend) > 0U )
 80047ce:	4e2f      	ldr	r6, [pc, #188]	@ (800488c <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xcc>)
 80047d0:	4d2f      	ldr	r5, [pc, #188]	@ (8004890 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xd0>)
 80047d2:	6833      	ldr	r3, [r6, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	469c      	mov	ip, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01d      	beq.n	8004818 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0x58>
       gRFAL.nfcaData.buf[(*gRFAL.nfcaData.bytesToSend)] >>= (*gRFAL.nfcaData.bitsToSend);
 80047dc:	002b      	movs	r3, r5
 80047de:	002a      	movs	r2, r5
 80047e0:	33b0      	adds	r3, #176	@ 0xb0
 80047e2:	681f      	ldr	r7, [r3, #0]
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	4663      	mov	r3, ip
 80047e8:	32b4      	adds	r2, #180	@ 0xb4
 80047ea:	6811      	ldr	r1, [r2, #0]
 80047ec:	7808      	ldrb	r0, [r1, #0]
 80047ee:	5c39      	ldrb	r1, [r7, r0]
 80047f0:	4119      	asrs	r1, r3
 80047f2:	5439      	strb	r1, [r7, r0]
       gRFAL.nfcaData.buf[(*gRFAL.nfcaData.bytesToSend)] <<= (*gRFAL.nfcaData.bitsToSend);
 80047f4:	6811      	ldr	r1, [r2, #0]
 80047f6:	9b01      	ldr	r3, [sp, #4]
 80047f8:	7808      	ldrb	r0, [r1, #0]
 80047fa:	681f      	ldr	r7, [r3, #0]
 80047fc:	6836      	ldr	r6, [r6, #0]
 80047fe:	5c39      	ldrb	r1, [r7, r0]
 8004800:	7836      	ldrb	r6, [r6, #0]
 8004802:	40b1      	lsls	r1, r6
 8004804:	5439      	strb	r1, [r7, r0]
       gRFAL.nfcaData.buf[(*gRFAL.nfcaData.bytesToSend)] |= gRFAL.nfcaData.collByte;
 8004806:	0028      	movs	r0, r5
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	7812      	ldrb	r2, [r2, #0]
 800480e:	30ac      	adds	r0, #172	@ 0xac
 8004810:	5c8b      	ldrb	r3, [r1, r2]
 8004812:	7800      	ldrb	r0, [r0, #0]
 8004814:	4303      	orrs	r3, r0
 8004816:	548b      	strb	r3, [r1, r2]
    if( ret == RFAL_ERR_RF_COLLISION )
 8004818:	2c1d      	cmp	r4, #29
 800481a:	d113      	bne.n	8004844 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0x84>
       st25r3916ReadRegister( ST25R3916_REG_COLLISION_STATUS, &collData);
 800481c:	ab02      	add	r3, sp, #8
 800481e:	1dd9      	adds	r1, r3, #7
 8004820:	2020      	movs	r0, #32
 8004822:	f002 f884 	bl	800692e <st25r3916ReadRegister>
       (*gRFAL.nfcaData.bytesToSend) = ((collData >> ST25R3916_REG_COLLISION_STATUS_c_byte_shift) & 0x0FU); // 4-bits Byte information
 8004826:	002b      	movs	r3, r5
 8004828:	33b4      	adds	r3, #180	@ 0xb4
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	ab02      	add	r3, sp, #8
 800482e:	79db      	ldrb	r3, [r3, #7]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	7013      	strb	r3, [r2, #0]
       (*gRFAL.nfcaData.bitsToSend)  = ((collData >> ST25R3916_REG_COLLISION_STATUS_c_bit_shift)  & 0x07U); // 3-bits bit information
 8004834:	002b      	movs	r3, r5
 8004836:	33b8      	adds	r3, #184	@ 0xb8
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	ab02      	add	r3, sp, #8
 800483c:	79db      	ldrb	r3, [r3, #7]
 800483e:	071b      	lsls	r3, r3, #28
 8004840:	0f5b      	lsrs	r3, r3, #29
 8004842:	7013      	strb	r3, [r2, #0]
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_COL) );
 8004844:	2004      	movs	r0, #4
 8004846:	f002 faa8 	bl	8006d9a <st25r3916DisableInterrupts>
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_antcl );
 800484a:	2101      	movs	r1, #1
 800484c:	2005      	movs	r0, #5
 800484e:	f002 f950 	bl	8006af2 <st25r3916ClrRegisterBits>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 8004852:	2002      	movs	r0, #2
 8004854:	78ab      	ldrb	r3, [r5, #2]
 8004856:	22ff      	movs	r2, #255	@ 0xff
 8004858:	30ff      	adds	r0, #255	@ 0xff
 800485a:	2bea      	cmp	r3, #234	@ 0xea
 800485c:	d912      	bls.n	8004884 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xc4>
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	4013      	ands	r3, r2
 8004862:	4318      	orrs	r0, r3
 8004864:	f006 fc5c 	bl	800b120 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 8004868:	2081      	movs	r0, #129	@ 0x81
 800486a:	78eb      	ldrb	r3, [r5, #3]
 800486c:	22ff      	movs	r2, #255	@ 0xff
 800486e:	0040      	lsls	r0, r0, #1
 8004870:	2bea      	cmp	r3, #234	@ 0xea
 8004872:	d909      	bls.n	8004888 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xc8>
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	4013      	ands	r3, r2
 8004878:	4318      	orrs	r0, r3
 800487a:	f006 fc51 	bl	800b120 <rfalSetAnalogConfig>
}
 800487e:	0020      	movs	r0, r4
 8004880:	b005      	add	sp, #20
 8004882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 8004884:	3301      	adds	r3, #1
 8004886:	e7ea      	b.n	800485e <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0x9e>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 8004888:	3301      	adds	r3, #1
 800488a:	e7f3      	b.n	8004874 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xb4>
 800488c:	2000160c 	.word	0x2000160c
 8004890:	20001554 	.word	0x20001554

08004894 <rfalGetFeliCaPollStatus>:
{
 8004894:	b570      	push	{r4, r5, r6, lr}
    if( (gRFAL.state != RFAL_STATE_TXRX) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 8004896:	4c38      	ldr	r4, [pc, #224]	@ (8004978 <rfalGetFeliCaPollStatus+0xe4>)
 8004898:	4b38      	ldr	r3, [pc, #224]	@ (800497c <rfalGetFeliCaPollStatus+0xe8>)
 800489a:	8822      	ldrh	r2, [r4, #0]
        return RFAL_ERR_WRONG_STATE;
 800489c:	2021      	movs	r0, #33	@ 0x21
    if( (gRFAL.state != RFAL_STATE_TXRX) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 800489e:	429a      	cmp	r2, r3
 80048a0:	d12b      	bne.n	80048fa <rfalGetFeliCaPollStatus+0x66>
    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 80048a2:	f7ff ff83 	bl	80047ac <rfalGetTransceiveStatus>
 80048a6:	0005      	movs	r5, r0
 80048a8:	2802      	cmp	r0, #2
 80048aa:	d025      	beq.n	80048f8 <rfalGetFeliCaPollStatus+0x64>
    if( ret != RFAL_ERR_TIMEOUT )  
 80048ac:	2804      	cmp	r0, #4
 80048ae:	d02b      	beq.n	8004908 <rfalGetFeliCaPollStatus+0x74>
        st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 80048b0:	20d1      	movs	r0, #209	@ 0xd1
 80048b2:	f002 f8d2 	bl	8006a5a <st25r3916ExecuteCommand>
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 80048b6:	20d5      	movs	r0, #213	@ 0xd5
 80048b8:	f002 f8cf 	bl	8006a5a <st25r3916ExecuteCommand>
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 80048bc:	0023      	movs	r3, r4
 80048be:	22ff      	movs	r2, #255	@ 0xff
 80048c0:	333f      	adds	r3, #63	@ 0x3f
 80048c2:	701a      	strb	r2, [r3, #0]
        if( ret == RFAL_ERR_NONE )
 80048c4:	2d00      	cmp	r5, #0
 80048c6:	d119      	bne.n	80048fc <rfalGetFeliCaPollStatus+0x68>
           gRFAL.nfcfData.devDetected++;
 80048c8:	0023      	movs	r3, r4
 80048ca:	33c9      	adds	r3, #201	@ 0xc9
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	3201      	adds	r2, #1
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]
           gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[gRFAL.nfcfData.devDetected];
 80048d4:	2314      	movs	r3, #20
 80048d6:	4353      	muls	r3, r2
 80048d8:	33d5      	adds	r3, #213	@ 0xd5
 80048da:	191b      	adds	r3, r3, r4
 80048dc:	6263      	str	r3, [r4, #36]	@ 0x24
        if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on ) )
 80048de:	2202      	movs	r2, #2
 80048e0:	2024      	movs	r0, #36	@ 0x24
 80048e2:	0011      	movs	r1, r2
 80048e4:	f002 f95a 	bl	8006b9c <st25r3916CheckReg>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d00d      	beq.n	8004908 <rfalGetFeliCaPollStatus+0x74>
            gRFAL.TxRx.status = RFAL_ERR_BUSY;
 80048ec:	2302      	movs	r3, #2
 80048ee:	8363      	strh	r3, [r4, #26]
            gRFAL.state       = RFAL_STATE_TXRX;
 80048f0:	3301      	adds	r3, #1
 80048f2:	7023      	strb	r3, [r4, #0]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 80048f4:	334e      	adds	r3, #78	@ 0x4e
 80048f6:	7623      	strb	r3, [r4, #24]
    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 80048f8:	2002      	movs	r0, #2
}
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
            gRFAL.nfcfData.colDetected++;
 80048fc:	0022      	movs	r2, r4
 80048fe:	32ca      	adds	r2, #202	@ 0xca
 8004900:	7813      	ldrb	r3, [r2, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	7013      	strb	r3, [r2, #0]
 8004906:	e7ea      	b.n	80048de <rfalGetFeliCaPollStatus+0x4a>
    gRFAL.conf.eHandling = gRFAL.nfcfData.curHandling;
 8004908:	0023      	movs	r3, r4
 800490a:	33d4      	adds	r3, #212	@ 0xd4
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	71e3      	strb	r3, [r4, #7]
    if( (gRFAL.nfcfData.pollResList != NULL) && (gRFAL.nfcfData.pollResListSize > 0U) && (gRFAL.nfcfData.devDetected > 0U) )
 8004910:	0023      	movs	r3, r4
 8004912:	33c4      	adds	r3, #196	@ 0xc4
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	2800      	cmp	r0, #0
 8004918:	d013      	beq.n	8004942 <rfalGetFeliCaPollStatus+0xae>
 800491a:	0023      	movs	r3, r4
 800491c:	33c8      	adds	r3, #200	@ 0xc8
 800491e:	7819      	ldrb	r1, [r3, #0]
 8004920:	2900      	cmp	r1, #0
 8004922:	d00e      	beq.n	8004942 <rfalGetFeliCaPollStatus+0xae>
 8004924:	0023      	movs	r3, r4
 8004926:	33c9      	adds	r3, #201	@ 0xc9
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <rfalGetFeliCaPollStatus+0xae>
        RFAL_MEMCPY( gRFAL.nfcfData.pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)RFAL_MIN(gRFAL.nfcfData.pollResListSize, gRFAL.nfcfData.devDetected) ) );
 800492e:	1c0a      	adds	r2, r1, #0
 8004930:	4299      	cmp	r1, r3
 8004932:	d900      	bls.n	8004936 <rfalGetFeliCaPollStatus+0xa2>
 8004934:	1c1a      	adds	r2, r3, #0
 8004936:	b2d3      	uxtb	r3, r2
 8004938:	2214      	movs	r2, #20
 800493a:	4911      	ldr	r1, [pc, #68]	@ (8004980 <rfalGetFeliCaPollStatus+0xec>)
 800493c:	435a      	muls	r2, r3
 800493e:	f00e fced 	bl	801331c <memcpy>
    if( gRFAL.nfcfData.devicesDetected != NULL )
 8004942:	0023      	movs	r3, r4
 8004944:	33cc      	adds	r3, #204	@ 0xcc
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <rfalGetFeliCaPollStatus+0xc0>
        *gRFAL.nfcfData.devicesDetected = gRFAL.nfcfData.devDetected;
 800494c:	0022      	movs	r2, r4
 800494e:	32c9      	adds	r2, #201	@ 0xc9
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	701a      	strb	r2, [r3, #0]
    if( gRFAL.nfcfData.collisionsDetected != NULL )
 8004954:	0023      	movs	r3, r4
 8004956:	33d0      	adds	r3, #208	@ 0xd0
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <rfalGetFeliCaPollStatus+0xd2>
        *gRFAL.nfcfData.collisionsDetected = gRFAL.nfcfData.colDetected;
 800495e:	0022      	movs	r2, r4
 8004960:	32ca      	adds	r2, #202	@ 0xca
 8004962:	7812      	ldrb	r2, [r2, #0]
 8004964:	701a      	strb	r2, [r3, #0]
    return (( (gRFAL.nfcfData.colDetected != 0U) || (gRFAL.nfcfData.devDetected != 0U)) ? RFAL_ERR_NONE : ret);
 8004966:	34c8      	adds	r4, #200	@ 0xc8
 8004968:	4a06      	ldr	r2, [pc, #24]	@ (8004984 <rfalGetFeliCaPollStatus+0xf0>)
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	4013      	ands	r3, r2
 800496e:	425a      	negs	r2, r3
 8004970:	4153      	adcs	r3, r2
 8004972:	4258      	negs	r0, r3
 8004974:	4028      	ands	r0, r5
 8004976:	e7c0      	b.n	80048fa <rfalGetFeliCaPollStatus+0x66>
 8004978:	20001554 	.word	0x20001554
 800497c:	00000603 	.word	0x00000603
 8004980:	20001629 	.word	0x20001629
 8004984:	00ffff00 	.word	0x00ffff00

08004988 <rfalIsExtFieldOn>:
    return st25r3916IsExtFieldOn();
 8004988:	2240      	movs	r2, #64	@ 0x40
{
 800498a:	b510      	push	{r4, lr}
    return st25r3916IsExtFieldOn();
 800498c:	0011      	movs	r1, r2
 800498e:	2031      	movs	r0, #49	@ 0x31
 8004990:	f002 f904 	bl	8006b9c <st25r3916CheckReg>
}
 8004994:	bd10      	pop	{r4, pc}
	...

08004998 <rfalListenStop>:
    if( gRFAL.state < RFAL_STATE_INIT )
 8004998:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <rfalListenStop+0x50>)
        return RFAL_ERR_WRONG_STATE;
 800499a:	2021      	movs	r0, #33	@ 0x21
    if( gRFAL.state < RFAL_STATE_INIT )
 800499c:	781a      	ldrb	r2, [r3, #0]
{
 800499e:	b510      	push	{r4, lr}
    if( gRFAL.state < RFAL_STATE_INIT )
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	d020      	beq.n	80049e6 <rfalListenStop+0x4e>
    gRFAL.Lm.state = RFAL_LM_STATE_NOT_INIT;
 80049a4:	001a      	movs	r2, r3
 80049a6:	2100      	movs	r1, #0
 80049a8:	325c      	adds	r2, #92	@ 0x5c
 80049aa:	7011      	strb	r1, [r2, #0]
    rfalCheckDisableObsMode();
 80049ac:	799b      	ldrb	r3, [r3, #6]
 80049ae:	428b      	cmp	r3, r1
 80049b0:	d003      	beq.n	80049ba <rfalListenStop+0x22>
 80049b2:	3140      	adds	r1, #64	@ 0x40
 80049b4:	3820      	subs	r0, #32
 80049b6:	f002 f880 	bl	8006aba <st25r3916WriteTestRegister>
    st25r3916OscOn();
 80049ba:	f001 fcf0 	bl	800639e <st25r3916OscOn>
    rfalFieldOff();
 80049be:	f7ff fe01 	bl	80045c4 <rfalFieldOff>
    st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p) );
 80049c2:	210d      	movs	r1, #13
 80049c4:	2008      	movs	r0, #8
 80049c6:	f002 f8a6 	bl	8006b16 <st25r3916SetRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_om_iso14443a | ST25R3916_REG_MODE_tr_am_ook | ST25R3916_REG_MODE_nfc_ar_off) );
 80049ca:	2108      	movs	r1, #8
 80049cc:	2003      	movs	r0, #3
 80049ce:	f001 ffbb 	bl	8006948 <st25r3916WriteRegister>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RFU2 | ST25R3916_IRQ_MASK_OSC ) );
 80049d2:	4806      	ldr	r0, [pc, #24]	@ (80049ec <rfalListenStop+0x54>)
 80049d4:	f002 f9e1 	bl	8006d9a <st25r3916DisableInterrupts>
    st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RFU2 | ST25R3916_IRQ_MASK_TXE ) );
 80049d8:	4805      	ldr	r0, [pc, #20]	@ (80049f0 <rfalListenStop+0x58>)
 80049da:	f002 f9a5 	bl	8006d28 <st25r3916GetInterrupt>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_OFF) );
 80049de:	2007      	movs	r0, #7
 80049e0:	f006 fb9e 	bl	800b120 <rfalSetAnalogConfig>
    return RFAL_ERR_NONE;
 80049e4:	2000      	movs	r0, #0
}
 80049e6:	bd10      	pop	{r4, pc}
 80049e8:	20001554 	.word	0x20001554
 80049ec:	1f000080 	.word	0x1f000080
 80049f0:	1f000008 	.word	0x1f000008

080049f4 <rfalListenSleepStart>:
{
 80049f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( gRFAL.state < RFAL_STATE_INIT )
 80049f6:	4c25      	ldr	r4, [pc, #148]	@ (8004a8c <rfalListenSleepStart+0x98>)
{
 80049f8:	001e      	movs	r6, r3
    if( gRFAL.state < RFAL_STATE_INIT )
 80049fa:	7823      	ldrb	r3, [r4, #0]
{
 80049fc:	0005      	movs	r5, r0
 80049fe:	000f      	movs	r7, r1
        return RFAL_ERR_WRONG_STATE;
 8004a00:	2021      	movs	r0, #33	@ 0x21
{
 8004a02:	9201      	str	r2, [sp, #4]
    if( gRFAL.state < RFAL_STATE_INIT )
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d026      	beq.n	8004a56 <rfalListenSleepStart+0x62>
            return RFAL_ERR_NOT_IMPLEMENTED;                    
 8004a08:	3812      	subs	r0, #18
    switch(sleepSt)
 8004a0a:	2d0d      	cmp	r5, #13
 8004a0c:	d023      	beq.n	8004a56 <rfalListenSleepStart+0x62>
 8004a0e:	2d10      	cmp	r5, #16
 8004a10:	d022      	beq.n	8004a58 <rfalListenSleepStart+0x64>
 8004a12:	3808      	subs	r0, #8
 8004a14:	2d0c      	cmp	r5, #12
 8004a16:	d11e      	bne.n	8004a56 <rfalListenSleepStart+0x62>
            st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 8004a18:	2101      	movs	r1, #1
 8004a1a:	1840      	adds	r0, r0, r1
 8004a1c:	f002 f869 	bl	8006af2 <st25r3916ClrRegisterBits>
            st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SLEEP );
 8004a20:	20ce      	movs	r0, #206	@ 0xce
 8004a22:	f002 f81a 	bl	8006a5a <st25r3916ExecuteCommand>
            st25r3916ChangeRegisterBits( ST25R3916_REG_MODE                                                                                     ,
 8004a26:	22c8      	movs	r2, #200	@ 0xc8
            st25r3916ChangeRegisterBits( ST25R3916_REG_MODE                                                                                                           ,
 8004a28:	21fb      	movs	r1, #251	@ 0xfb
 8004a2a:	2003      	movs	r0, #3
 8004a2c:	f002 f89b 	bl	8006b66 <st25r3916ChangeRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_nfc_f0 );
 8004a30:	2120      	movs	r1, #32
 8004a32:	2005      	movs	r0, #5
 8004a34:	f002 f85d 	bl	8006af2 <st25r3916ClrRegisterBits>
    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8004a38:	20d1      	movs	r0, #209	@ 0xd1
 8004a3a:	f002 f80e 	bl	8006a5a <st25r3916ExecuteCommand>
    st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | 
 8004a3e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8004a40:	4813      	ldr	r0, [pc, #76]	@ (8004a90 <rfalListenSleepStart+0x9c>)
 8004a42:	4318      	orrs	r0, r3
 8004a44:	f002 f9a1 	bl	8006d8a <st25r3916ClearAndEnableInterrupts>
    if( !rfalIsExtFieldOn() )
 8004a48:	f7ff ff9e 	bl	8004988 <rfalIsExtFieldOn>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d10c      	bne.n	8004a6a <rfalListenSleepStart+0x76>
        rfalListenStop();
 8004a50:	f7ff ffa2 	bl	8004998 <rfalListenStop>
        return RFAL_ERR_LINK_LOSS;
 8004a54:	2025      	movs	r0, #37	@ 0x25
}
 8004a56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 8004a58:	2105      	movs	r1, #5
 8004a5a:	2008      	movs	r0, #8
 8004a5c:	f002 f849 	bl	8006af2 <st25r3916ClrRegisterBits>
            st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SLEEP );
 8004a60:	20ce      	movs	r0, #206	@ 0xce
 8004a62:	f001 fffa 	bl	8006a5a <st25r3916ExecuteCommand>
            st25r3916ChangeRegisterBits( ST25R3916_REG_MODE                                                                                                           ,
 8004a66:	22e8      	movs	r2, #232	@ 0xe8
 8004a68:	e7de      	b.n	8004a28 <rfalListenSleepStart+0x34>
    gRFAL.Lm.state    = sleepSt;
 8004a6a:	0023      	movs	r3, r4
 8004a6c:	335c      	adds	r3, #92	@ 0x5c
 8004a6e:	701d      	strb	r5, [r3, #0]
    gRFAL.state       = RFAL_STATE_LM;
 8004a70:	2304      	movs	r3, #4
 8004a72:	7023      	strb	r3, [r4, #0]
    gRFAL.Lm.rxBufLen = rxBufLen;
 8004a74:	0023      	movs	r3, r4
    *gRFAL.Lm.rxLen   = 0;
 8004a76:	2000      	movs	r0, #0
    gRFAL.Lm.rxBufLen = rxBufLen;
 8004a78:	9a01      	ldr	r2, [sp, #4]
    gRFAL.Lm.rxBuf    = rxBuf;
 8004a7a:	6727      	str	r7, [r4, #112]	@ 0x70
    gRFAL.Lm.rxLen    = rxLen;
 8004a7c:	67a6      	str	r6, [r4, #120]	@ 0x78
    gRFAL.Lm.rxBufLen = rxBufLen;
 8004a7e:	3374      	adds	r3, #116	@ 0x74
    gRFAL.Lm.dataFlag = false;
 8004a80:	347c      	adds	r4, #124	@ 0x7c
    gRFAL.Lm.rxBufLen = rxBufLen;
 8004a82:	801a      	strh	r2, [r3, #0]
    *gRFAL.Lm.rxLen   = 0;
 8004a84:	8030      	strh	r0, [r6, #0]
    gRFAL.Lm.dataFlag = false;
 8004a86:	7020      	strb	r0, [r4, #0]
    return RFAL_ERR_NONE;
 8004a88:	e7e5      	b.n	8004a56 <rfalListenSleepStart+0x62>
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	20001554 	.word	0x20001554
 8004a90:	00f01920 	.word	0x00f01920

08004a94 <rfalListenGetState>:
    if( lastBR != NULL )
 8004a94:	4b07      	ldr	r3, [pc, #28]	@ (8004ab4 <rfalListenGetState+0x20>)
 8004a96:	2900      	cmp	r1, #0
 8004a98:	d003      	beq.n	8004aa2 <rfalListenGetState+0xe>
        *lastBR = gRFAL.Lm.brDetected;
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	326c      	adds	r2, #108	@ 0x6c
 8004a9e:	7812      	ldrb	r2, [r2, #0]
 8004aa0:	700a      	strb	r2, [r1, #0]
    if( dataFlag != NULL )
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d003      	beq.n	8004aae <rfalListenGetState+0x1a>
        *dataFlag = gRFAL.Lm.dataFlag;
 8004aa6:	001a      	movs	r2, r3
 8004aa8:	327c      	adds	r2, #124	@ 0x7c
 8004aaa:	7812      	ldrb	r2, [r2, #0]
 8004aac:	7002      	strb	r2, [r0, #0]
    return gRFAL.Lm.state;
 8004aae:	335c      	adds	r3, #92	@ 0x5c
 8004ab0:	7818      	ldrb	r0, [r3, #0]
}
 8004ab2:	4770      	bx	lr
 8004ab4:	20001554 	.word	0x20001554

08004ab8 <rfalListenSetState>:
{
 8004ab8:	b570      	push	{r4, r5, r6, lr}
    if( gRFAL.state < RFAL_STATE_INIT )
 8004aba:	4d87      	ldr	r5, [pc, #540]	@ (8004cd8 <rfalListenSetState+0x220>)
{
 8004abc:	0006      	movs	r6, r0
    if( gRFAL.state < RFAL_STATE_INIT )
 8004abe:	782b      	ldrb	r3, [r5, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <rfalListenSetState+0x12>
        return RFAL_ERR_WRONG_STATE;
 8004ac4:	2421      	movs	r4, #33	@ 0x21
}
 8004ac6:	0020      	movs	r0, r4
 8004ac8:	bd70      	pop	{r4, r5, r6, pc}
    gRFAL.Lm.dataFlag = false;
 8004aca:	002b      	movs	r3, r5
 8004acc:	2200      	movs	r2, #0
 8004ace:	337c      	adds	r3, #124	@ 0x7c
 8004ad0:	701a      	strb	r2, [r3, #0]
        switch( newState )
 8004ad2:	1e70      	subs	r0, r6, #1
 8004ad4:	280f      	cmp	r0, #15
 8004ad6:	d8f5      	bhi.n	8004ac4 <rfalListenSetState+0xc>
 8004ad8:	f7fb fb32 	bl	8000140 <__gnu_thumb1_case_shi>
 8004adc:	00560010 	.word	0x00560010
 8004ae0:	fff400d7 	.word	0xfff400d7
 8004ae4:	00ea00ae 	.word	0x00ea00ae
 8004ae8:	00f500f5 	.word	0x00f500f5
 8004aec:	00f500ce 	.word	0x00f500ce
 8004af0:	00fc00f7 	.word	0x00fc00f7
 8004af4:	00d700fc 	.word	0x00d700fc
 8004af8:	00fc00ea 	.word	0x00fc00ea
                st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_rx_en );
 8004afc:	2140      	movs	r1, #64	@ 0x40
 8004afe:	2002      	movs	r0, #2
 8004b00:	f002 f809 	bl	8006b16 <st25r3916SetRegisterBits>
                st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 8004b04:	20c2      	movs	r0, #194	@ 0xc2
 8004b06:	f001 ffa8 	bl	8006a5a <st25r3916ExecuteCommand>
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U )
 8004b0a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8004b0c:	055b      	lsls	r3, r3, #21
 8004b0e:	d506      	bpl.n	8004b1e <rfalListenSetState+0x66>
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a );
 8004b10:	2101      	movs	r1, #1
 8004b12:	2008      	movs	r0, #8
 8004b14:	f001 ffed 	bl	8006af2 <st25r3916ClrRegisterBits>
                    st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SENSE );
 8004b18:	20cd      	movs	r0, #205	@ 0xcd
 8004b1a:	f001 ff9e 	bl	8006a5a <st25r3916ExecuteCommand>
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCF) != 0U )
 8004b1e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8004b20:	04db      	lsls	r3, r3, #19
 8004b22:	d503      	bpl.n	8004b2c <rfalListenSetState+0x74>
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 8004b24:	2104      	movs	r1, #4
 8004b26:	2008      	movs	r0, #8
 8004b28:	f001 ffe3 	bl	8006af2 <st25r3916ClrRegisterBits>
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8004b2c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8004b2e:	049b      	lsls	r3, r3, #18
 8004b30:	d508      	bpl.n	8004b44 <rfalListenSetState+0x8c>
                    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, ST25R3916_REG_MODE_nfc_ar_mask, ST25R3916_REG_MODE_nfc_ar_auto_rx );
 8004b32:	2103      	movs	r1, #3
 8004b34:	2201      	movs	r2, #1
 8004b36:	0008      	movs	r0, r1
 8004b38:	f002 f815 	bl	8006b66 <st25r3916ChangeRegisterBits>
                    st25r3916TxOff();
 8004b3c:	2108      	movs	r1, #8
 8004b3e:	2002      	movs	r0, #2
 8004b40:	f001 ffd7 	bl	8006af2 <st25r3916ClrRegisterBits>
                st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 8004b44:	2401      	movs	r4, #1
                st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_nfc_f0 );
 8004b46:	2120      	movs	r1, #32
                st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 8004b48:	4264      	negs	r4, r4
                st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_nfc_f0 );
 8004b4a:	2005      	movs	r0, #5
 8004b4c:	f001 ffd1 	bl	8006af2 <st25r3916ClrRegisterBits>
                st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 8004b50:	0020      	movs	r0, r4
 8004b52:	f002 f922 	bl	8006d9a <st25r3916DisableInterrupts>
                st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_OSC |
 8004b56:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8004b58:	4860      	ldr	r0, [pc, #384]	@ (8004cdc <rfalListenSetState+0x224>)
 8004b5a:	4318      	orrs	r0, r3
 8004b5c:	f002 f915 	bl	8006d8a <st25r3916ClearAndEnableInterrupts>
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 8004b60:	002b      	movs	r3, r5
                st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask), (uint8_t)gRFAL.Lm.mdReg );
 8004b62:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 8004b64:	336c      	adds	r3, #108	@ 0x6c
                st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask), (uint8_t)gRFAL.Lm.mdReg );
 8004b66:	21fb      	movs	r1, #251	@ 0xfb
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	2003      	movs	r0, #3
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 8004b6c:	701c      	strb	r4, [r3, #0]
                st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask), (uint8_t)gRFAL.Lm.mdReg );
 8004b6e:	f001 fffa 	bl	8006b66 <st25r3916ChangeRegisterBits>
                if( rfalIsExtFieldOn() )
 8004b72:	f7ff ff09 	bl	8004988 <rfalIsExtFieldOn>
 8004b76:	1e04      	subs	r4, r0, #0
 8004b78:	d106      	bne.n	8004b88 <rfalListenSetState+0xd0>
                    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_tx_en | ST25R3916_REG_OP_CONTROL_rx_en | ST25R3916_REG_OP_CONTROL_en) );
 8004b7a:	21c8      	movs	r1, #200	@ 0xc8
 8004b7c:	2002      	movs	r0, #2
 8004b7e:	f001 ffb8 	bl	8006af2 <st25r3916ClrRegisterBits>
    gRFAL.Lm.state = newState;
 8004b82:	355c      	adds	r5, #92	@ 0x5c
 8004b84:	702e      	strb	r6, [r5, #0]
    return ret;
 8004b86:	e79e      	b.n	8004ac6 <rfalListenSetState+0xe>
                if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en )  )
 8004b88:	2280      	movs	r2, #128	@ 0x80
 8004b8a:	2002      	movs	r0, #2
 8004b8c:	0011      	movs	r1, r2
 8004b8e:	f002 f805 	bl	8006b9c <st25r3916CheckReg>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d113      	bne.n	8004bbe <rfalListenSetState+0x106>
                    st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_rx_en) );
 8004b96:	21c0      	movs	r1, #192	@ 0xc0
 8004b98:	3002      	adds	r0, #2
 8004b9a:	f001 ffbc 	bl	8006b16 <st25r3916SetRegisterBits>
                    if( !st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_osc_ok, ST25R3916_REG_AUX_DISPLAY_osc_ok )  )
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	2031      	movs	r0, #49	@ 0x31
 8004ba2:	0011      	movs	r1, r2
 8004ba4:	f001 fffa 	bl	8006b9c <st25r3916CheckReg>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d10b      	bne.n	8004bc4 <rfalListenSetState+0x10c>
                        if( st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE ) == 0U )
 8004bac:	210a      	movs	r1, #10
 8004bae:	3080      	adds	r0, #128	@ 0x80
 8004bb0:	f002 f880 	bl	8006cb4 <st25r3916WaitForInterruptsTimed>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d105      	bne.n	8004bc4 <rfalListenSetState+0x10c>
 8004bb8:	2602      	movs	r6, #2
                            ret = RFAL_ERR_IO;
 8004bba:	2403      	movs	r4, #3
 8004bbc:	e7e1      	b.n	8004b82 <rfalListenSetState+0xca>
                    st25r3916GetInterrupt(ST25R3916_IRQ_MASK_OSC);
 8004bbe:	2080      	movs	r0, #128	@ 0x80
 8004bc0:	f002 f8b2 	bl	8006d28 <st25r3916GetInterrupt>
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8004bc4:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8004bc6:	049b      	lsls	r3, r3, #18
 8004bc8:	d41a      	bmi.n	8004c00 <rfalListenSetState+0x148>
        reSetState = false;
 8004bca:	2400      	movs	r4, #0
 8004bcc:	2602      	movs	r6, #2
                if( gRFAL.Lm.state == RFAL_LM_STATE_ACTIVE_A )
 8004bce:	002b      	movs	r3, r5
 8004bd0:	335c      	adds	r3, #92	@ 0x5c
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b06      	cmp	r3, #6
 8004bd6:	d106      	bne.n	8004be6 <rfalListenSetState+0x12e>
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 8004bd8:	2101      	movs	r1, #1
 8004bda:	2008      	movs	r0, #8
 8004bdc:	f001 ff89 	bl	8006af2 <st25r3916ClrRegisterBits>
                    st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SENSE );
 8004be0:	20cd      	movs	r0, #205	@ 0xcd
 8004be2:	f001 ff3a 	bl	8006a5a <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8004be6:	20db      	movs	r0, #219	@ 0xdb
 8004be8:	f001 ff37 	bl	8006a5a <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8004bec:	20d1      	movs	r0, #209	@ 0xd1
 8004bee:	f001 ff34 	bl	8006a5a <st25r3916ExecuteCommand>
                rfalCheckEnableObsModeRx();
 8004bf2:	79ab      	ldrb	r3, [r5, #6]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d119      	bne.n	8004c2c <rfalListenSetState+0x174>
    while( reSetState );
 8004bf8:	2c00      	cmp	r4, #0
 8004bfa:	d000      	beq.n	8004bfe <rfalListenSetState+0x146>
 8004bfc:	e769      	b.n	8004ad2 <rfalListenSetState+0x1a>
 8004bfe:	e7c0      	b.n	8004b82 <rfalListenSetState+0xca>
                    st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 8004c00:	20c2      	movs	r0, #194	@ 0xc2
 8004c02:	f001 ff2a 	bl	8006a5a <st25r3916ExecuteCommand>
                    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, ST25R3916_REG_MODE_nfc_ar_mask, ST25R3916_REG_MODE_nfc_ar_auto_rx );
 8004c06:	2103      	movs	r1, #3
 8004c08:	2201      	movs	r2, #1
 8004c0a:	0008      	movs	r0, r1
 8004c0c:	f001 ffab 	bl	8006b66 <st25r3916ChangeRegisterBits>
                    st25r3916TxOff();
 8004c10:	2108      	movs	r1, #8
 8004c12:	2002      	movs	r0, #2
 8004c14:	f001 ff6d 	bl	8006af2 <st25r3916ClrRegisterBits>
                    if( !st25r3916IsExtFieldOn() )
 8004c18:	2240      	movs	r2, #64	@ 0x40
 8004c1a:	2031      	movs	r0, #49	@ 0x31
 8004c1c:	0011      	movs	r1, r2
 8004c1e:	f001 ffbd 	bl	8006b9c <st25r3916CheckReg>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d1d1      	bne.n	8004bca <rfalListenSetState+0x112>
                        reSetState = true;
 8004c26:	2401      	movs	r4, #1
                        newState   = RFAL_LM_STATE_POWER_OFF;                    /* Set POWER_OFF state */
 8004c28:	0026      	movs	r6, r4
 8004c2a:	e7d0      	b.n	8004bce <rfalListenSetState+0x116>
                rfalCheckEnableObsModeRx();
 8004c2c:	2140      	movs	r1, #64	@ 0x40
 8004c2e:	2001      	movs	r0, #1
 8004c30:	4319      	orrs	r1, r3
 8004c32:	f001 ff42 	bl	8006aba <st25r3916WriteTestRegister>
 8004c36:	e7df      	b.n	8004bf8 <rfalListenSetState+0x140>
                st25r3916SetBitrate( (uint8_t)gRFAL.Lm.brDetected, (uint8_t)gRFAL.Lm.brDetected );
 8004c38:	002c      	movs	r4, r5
 8004c3a:	346c      	adds	r4, #108	@ 0x6c
 8004c3c:	7820      	ldrb	r0, [r4, #0]
 8004c3e:	0001      	movs	r1, r0
 8004c40:	f001 fc72 	bl	8006528 <st25r3916SetBitrate>
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 8004c44:	2101      	movs	r1, #1
 8004c46:	2008      	movs	r0, #8
 8004c48:	f001 ff65 	bl	8006b16 <st25r3916SetRegisterBits>
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCF, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 8004c4c:	7821      	ldrb	r1, [r4, #0]
 8004c4e:	200c      	movs	r0, #12
 8004c50:	000a      	movs	r2, r1
 8004c52:	f7ff fb0b 	bl	800426c <rfalSetMode>
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 8004c56:	2304      	movs	r3, #4
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCF, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 8004c58:	0004      	movs	r4, r0
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8004c5a:	20db      	movs	r0, #219	@ 0xdb
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 8004c5c:	702b      	strb	r3, [r5, #0]
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8004c5e:	f001 fefc 	bl	8006a5a <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8004c62:	20d1      	movs	r0, #209	@ 0xd1
 8004c64:	f001 fef9 	bl	8006a5a <st25r3916ExecuteCommand>
                st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 8004c68:	20f0      	movs	r0, #240	@ 0xf0
 8004c6a:	0400      	lsls	r0, r0, #16
 8004c6c:	f002 f85c 	bl	8006d28 <st25r3916GetInterrupt>
                st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_RXE );     /* Start looking for any incoming data */
 8004c70:	2010      	movs	r0, #16
 8004c72:	f002 f885 	bl	8006d80 <st25r3916EnableInterrupts>
    while( reSetState );
 8004c76:	e784      	b.n	8004b82 <rfalListenSetState+0xca>
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCF, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 8004c78:	002b      	movs	r3, r5
 8004c7a:	336c      	adds	r3, #108	@ 0x6c
 8004c7c:	7819      	ldrb	r1, [r3, #0]
 8004c7e:	200c      	movs	r0, #12
 8004c80:	000a      	movs	r2, r1
 8004c82:	f7ff faf3 	bl	800426c <rfalSetMode>
 8004c86:	0004      	movs	r4, r0
    while( reSetState );
 8004c88:	e77b      	b.n	8004b82 <rfalListenSetState+0xca>
                st25r3916SetBitrate( (uint8_t)gRFAL.Lm.brDetected, (uint8_t)gRFAL.Lm.brDetected );
 8004c8a:	002c      	movs	r4, r5
 8004c8c:	346c      	adds	r4, #108	@ 0x6c
 8004c8e:	7820      	ldrb	r0, [r4, #0]
 8004c90:	0001      	movs	r1, r0
 8004c92:	f001 fc49 	bl	8006528 <st25r3916SetBitrate>
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 8004c96:	2104      	movs	r1, #4
 8004c98:	2008      	movs	r0, #8
 8004c9a:	f001 ff3c 	bl	8006b16 <st25r3916SetRegisterBits>
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCA, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 8004c9e:	7821      	ldrb	r1, [r4, #0]
 8004ca0:	200a      	movs	r0, #10
 8004ca2:	000a      	movs	r2, r1
 8004ca4:	f7ff fae2 	bl	800426c <rfalSetMode>
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 8004ca8:	2304      	movs	r3, #4
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCA, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 8004caa:	0004      	movs	r4, r0
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 8004cac:	702b      	strb	r3, [r5, #0]
    while( reSetState );
 8004cae:	e768      	b.n	8004b82 <rfalListenSetState+0xca>
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	2008      	movs	r0, #8
 8004cb4:	f001 ff2f 	bl	8006b16 <st25r3916SetRegisterBits>
                st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 8004cb8:	20f0      	movs	r0, #240	@ 0xf0
 8004cba:	0400      	lsls	r0, r0, #16
 8004cbc:	f002 f834 	bl	8006d28 <st25r3916GetInterrupt>
                st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_RXE );    /* Start looking for any incoming data */
 8004cc0:	2010      	movs	r0, #16
 8004cc2:	f002 f85d 	bl	8006d80 <st25r3916EnableInterrupts>
        switch( newState )
 8004cc6:	2400      	movs	r4, #0
 8004cc8:	e75b      	b.n	8004b82 <rfalListenSetState+0xca>
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 8004cca:	2104      	movs	r1, #4
 8004ccc:	2008      	movs	r0, #8
 8004cce:	f001 ff22 	bl	8006b16 <st25r3916SetRegisterBits>
    while( reSetState );
 8004cd2:	e7f8      	b.n	8004cc6 <rfalListenSetState+0x20e>
        switch( newState )
 8004cd4:	2405      	movs	r4, #5
 8004cd6:	e6f6      	b.n	8004ac6 <rfalListenSetState+0xe>
 8004cd8:	20001554 	.word	0x20001554
 8004cdc:	00f019a0 	.word	0x00f019a0

08004ce0 <rfalListenStart>:
{
 8004ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce2:	b08b      	sub	sp, #44	@ 0x2c
 8004ce4:	001e      	movs	r6, r3
 8004ce6:	ab10      	add	r3, sp, #64	@ 0x40
 8004ce8:	9201      	str	r2, [sp, #4]
 8004cea:	cb04      	ldmia	r3!, {r2}
    if( gRFAL.state < RFAL_STATE_INIT )
 8004cec:	4c6d      	ldr	r4, [pc, #436]	@ (8004ea4 <rfalListenStart+0x1c4>)
{
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	0007      	movs	r7, r0
 8004cf2:	9303      	str	r3, [sp, #12]
    if( gRFAL.state < RFAL_STATE_INIT )
 8004cf4:	7823      	ldrb	r3, [r4, #0]
{
 8004cf6:	000d      	movs	r5, r1
        return RFAL_ERR_WRONG_STATE;
 8004cf8:	2021      	movs	r0, #33	@ 0x21
{
 8004cfa:	9202      	str	r2, [sp, #8]
    if( gRFAL.state < RFAL_STATE_INIT )
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00f      	beq.n	8004d20 <rfalListenStart+0x40>
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 8004d00:	0023      	movs	r3, r4
 8004d02:	2200      	movs	r2, #0
 8004d04:	335c      	adds	r3, #92	@ 0x5c
 8004d06:	701a      	strb	r2, [r3, #0]
    gRFAL.Lm.mdIrqs = ST25R3916_IRQ_MASK_NONE;
 8004d08:	66a2      	str	r2, [r4, #104]	@ 0x68
    gRFAL.Lm.mdReg  = (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_off);
 8004d0a:	6662      	str	r2, [r4, #100]	@ 0x64
    if( (lmMask & RFAL_LM_MASK_NFCA) != 0U )
 8004d0c:	057b      	lsls	r3, r7, #21
 8004d0e:	d547      	bpl.n	8004da0 <rfalListenStart+0xc0>
        if( confA == NULL )
 8004d10:	4291      	cmp	r1, r2
 8004d12:	d004      	beq.n	8004d1e <rfalListenStart+0x3e>
        switch(confA->nfcidLen)
 8004d14:	780b      	ldrb	r3, [r1, #0]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d005      	beq.n	8004d26 <rfalListenStart+0x46>
 8004d1a:	2b07      	cmp	r3, #7
 8004d1c:	d002      	beq.n	8004d24 <rfalListenStart+0x44>
        return RFAL_ERR_WRONG_STATE;
 8004d1e:	2007      	movs	r0, #7
}
 8004d20:	b00b      	add	sp, #44	@ 0x2c
 8004d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
                st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_id_mask, ST25R3916_REG_AUX_nfc_id_7bytes );
 8004d24:	2210      	movs	r2, #16
 8004d26:	2130      	movs	r1, #48	@ 0x30
 8004d28:	200a      	movs	r0, #10
 8004d2a:	f001 ff1c 	bl	8006b66 <st25r3916ChangeRegisterBits>
        RFAL_MEMCPY( pPTMem, confA->nfcid, RFAL_NFCID1_TRIPLE_LEN );
 8004d2e:	220a      	movs	r2, #10
 8004d30:	1c69      	adds	r1, r5, #1
 8004d32:	a804      	add	r0, sp, #16
 8004d34:	f00e faf2 	bl	801331c <memcpy>
        RFAL_MEMCPY( pPTMem, confA->SENS_RES, RFAL_LM_SENS_RES_LEN );
 8004d38:	0029      	movs	r1, r5
 8004d3a:	200a      	movs	r0, #10
 8004d3c:	ab04      	add	r3, sp, #16
 8004d3e:	2202      	movs	r2, #2
 8004d40:	18c0      	adds	r0, r0, r3
 8004d42:	310b      	adds	r1, #11
 8004d44:	f00e faea 	bl	801331c <memcpy>
        *(pPTMem++) = ( (confA->nfcidLen == RFAL_LM_NFCID_LEN_04) ? ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE ) : (confA->SEL_RES | RFAL_LM_NFCID_INCOMPLETE) );
 8004d48:	782a      	ldrb	r2, [r5, #0]
 8004d4a:	7b6b      	ldrb	r3, [r5, #13]
 8004d4c:	2a04      	cmp	r2, #4
 8004d4e:	d124      	bne.n	8004d9a <rfalListenStart+0xba>
 8004d50:	0019      	movs	r1, r3
 8004d52:	4391      	bics	r1, r2
 8004d54:	000a      	movs	r2, r1
 8004d56:	a904      	add	r1, sp, #16
 8004d58:	730a      	strb	r2, [r1, #12]
        *(pPTMem++) = ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE );
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	4393      	bics	r3, r2
 8004d5e:	000a      	movs	r2, r1
 8004d60:	734b      	strb	r3, [r1, #13]
        *(pPTMem++) = ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE );
 8004d62:	738b      	strb	r3, [r1, #14]
        st25r3916WritePTMem( PTMem.PTMem_A, ST25R3916_PTM_A_LEN );
 8004d64:	0010      	movs	r0, r2
 8004d66:	210f      	movs	r1, #15
 8004d68:	f001 fe29 	bl	80069be <st25r3916WritePTMem>
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_off);
 8004d6c:	22c8      	movs	r2, #200	@ 0xc8
 8004d6e:	4b4d      	ldr	r3, [pc, #308]	@ (8004ea4 <rfalListenStart+0x1c4>)
        autoResp &= ~ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a;
 8004d70:	250c      	movs	r5, #12
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_off);
 8004d72:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8004d74:	430a      	orrs	r2, r1
 8004d76:	665a      	str	r2, [r3, #100]	@ 0x64
        gRFAL.Lm.mdIrqs |= (ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RXE_PTA);
 8004d78:	2298      	movs	r2, #152	@ 0x98
 8004d7a:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004d7c:	0552      	lsls	r2, r2, #21
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	669a      	str	r2, [r3, #104]	@ 0x68
    if( (lmMask & RFAL_LM_MASK_NFCB) != 0U )
 8004d82:	2380      	movs	r3, #128	@ 0x80
 8004d84:	003a      	movs	r2, r7
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	401a      	ands	r2, r3
 8004d8a:	9200      	str	r2, [sp, #0]
 8004d8c:	421f      	tst	r7, r3
 8004d8e:	d009      	beq.n	8004da4 <rfalListenStart+0xc4>
        if( confB == NULL )
 8004d90:	9b01      	ldr	r3, [sp, #4]
        return RFAL_ERR_NOTSUPP;
 8004d92:	2018      	movs	r0, #24
        if( confB == NULL )
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1c3      	bne.n	8004d20 <rfalListenStart+0x40>
 8004d98:	e7c1      	b.n	8004d1e <rfalListenStart+0x3e>
        *(pPTMem++) = ( (confA->nfcidLen == RFAL_LM_NFCID_LEN_04) ? ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE ) : (confA->SEL_RES | RFAL_LM_NFCID_INCOMPLETE) );
 8004d9a:	2204      	movs	r2, #4
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	e7da      	b.n	8004d56 <rfalListenStart+0x76>
    autoResp = (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p);
 8004da0:	250d      	movs	r5, #13
 8004da2:	e7ee      	b.n	8004d82 <rfalListenStart+0xa2>
    if( (lmMask & RFAL_LM_MASK_NFCF) != 0U )
 8004da4:	04fb      	lsls	r3, r7, #19
 8004da6:	d52d      	bpl.n	8004e04 <rfalListenStart+0x124>
        if( confF == NULL )
 8004da8:	2e00      	cmp	r6, #0
 8004daa:	d0b8      	beq.n	8004d1e <rfalListenStart+0x3e>
        RFAL_MEMCPY( pPTMem, confF->SC, RFAL_LM_SENSF_SC_LEN );
 8004dac:	0031      	movs	r1, r6
 8004dae:	2202      	movs	r2, #2
 8004db0:	a804      	add	r0, sp, #16
 8004db2:	f00e fab3 	bl	801331c <memcpy>
        RFAL_MEMCPY( pPTMem, confF->SENSF_RES, RFAL_LM_SENSF_RES_LEN );
 8004db6:	ab04      	add	r3, sp, #16
 8004db8:	1cb1      	adds	r1, r6, #2
 8004dba:	2211      	movs	r2, #17
 8004dbc:	1c98      	adds	r0, r3, #2
 8004dbe:	f00e faad 	bl	801331c <memcpy>
        pPTMem[RFAL_LM_SENSF_RD0_POS] = 0x00;   /* NFC Forum Digital 1.1 Table 46: 0x00                   */
 8004dc2:	ab04      	add	r3, sp, #16
 8004dc4:	9a00      	ldr	r2, [sp, #0]
        st25r3916WritePTMemF( PTMem.PTMem_F, ST25R3916_PTM_F_LEN );
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	2115      	movs	r1, #21
        pPTMem[RFAL_LM_SENSF_RD0_POS] = 0x00;   /* NFC Forum Digital 1.1 Table 46: 0x00                   */
 8004dca:	74da      	strb	r2, [r3, #19]
        pPTMem[RFAL_LM_SENSF_RD1_POS] = 0x00;   /* NFC Forum Digital 1.1 Table 47: No automatic bit rates */
 8004dcc:	751a      	strb	r2, [r3, #20]
        st25r3916WritePTMemF( PTMem.PTMem_F, ST25R3916_PTM_F_LEN );
 8004dce:	f001 fe10 	bl	80069f2 <st25r3916WritePTMemF>
        if( !gRFAL.Lm.iniFlag )
 8004dd2:	4b35      	ldr	r3, [pc, #212]	@ (8004ea8 <rfalListenStart+0x1c8>)
 8004dd4:	4e33      	ldr	r6, [pc, #204]	@ (8004ea4 <rfalListenStart+0x1c4>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d109      	bne.n	8004df0 <rfalListenStart+0x110>
            *(pPTMem++) = 0x12;
 8004ddc:	4b33      	ldr	r3, [pc, #204]	@ (8004eac <rfalListenStart+0x1cc>)
            st25r3916WritePTMemTSN( PTMem.TSN, ST25R3916_PTM_TSN_LEN );
 8004dde:	210c      	movs	r1, #12
            *(pPTMem++) = 0x12;
 8004de0:	9304      	str	r3, [sp, #16]
            *(pPTMem++) = 0x9A;
 8004de2:	4b33      	ldr	r3, [pc, #204]	@ (8004eb0 <rfalListenStart+0x1d0>)
            st25r3916WritePTMemTSN( PTMem.TSN, ST25R3916_PTM_TSN_LEN );
 8004de4:	a804      	add	r0, sp, #16
            *(pPTMem++) = 0x9A;
 8004de6:	9305      	str	r3, [sp, #20]
            *(pPTMem++) = 0x43;
 8004de8:	4b32      	ldr	r3, [pc, #200]	@ (8004eb4 <rfalListenStart+0x1d4>)
 8004dea:	9306      	str	r3, [sp, #24]
            st25r3916WritePTMemTSN( PTMem.TSN, ST25R3916_PTM_TSN_LEN );
 8004dec:	f001 fe1b 	bl	8006a26 <st25r3916WritePTMemTSN>
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r);
 8004df0:	2304      	movs	r3, #4
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_nfc_ar_off);
 8004df2:	6e72      	ldr	r2, [r6, #100]	@ 0x64
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r);
 8004df4:	439d      	bics	r5, r3
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_nfc_ar_off);
 8004df6:	33dc      	adds	r3, #220	@ 0xdc
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	6673      	str	r3, [r6, #100]	@ 0x64
        gRFAL.Lm.mdIrqs |= (ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_RXE);
 8004dfc:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
 8004dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8004eb8 <rfalListenStart+0x1d8>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	66b3      	str	r3, [r6, #104]	@ 0x68
    if( (lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8004e04:	04bb      	lsls	r3, r7, #18
 8004e06:	d518      	bpl.n	8004e3a <rfalListenStart+0x15a>
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p);
 8004e08:	2308      	movs	r3, #8
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_auto_rx);
 8004e0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p);
 8004e0c:	439d      	bics	r5, r3
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_auto_rx);
 8004e0e:	33e1      	adds	r3, #225	@ 0xe1
 8004e10:	4313      	orrs	r3, r2
        st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 8004e12:	2180      	movs	r1, #128	@ 0x80
 8004e14:	200a      	movs	r0, #10
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_auto_rx);
 8004e16:	6663      	str	r3, [r4, #100]	@ 0x64
        st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 8004e18:	f001 fe6b 	bl	8006af2 <st25r3916ClrRegisterBits>
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, gRFAL.timings.nTRFW);
 8004e1c:	7d22      	ldrb	r2, [r4, #20]
 8004e1e:	2103      	movs	r1, #3
 8004e20:	200a      	movs	r0, #10
 8004e22:	f001 fea0 	bl	8006b66 <st25r3916ChangeRegisterBits>
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 8004e26:	7d20      	ldrb	r0, [r4, #20]
 8004e28:	2107      	movs	r1, #7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f7fb fa22 	bl	8000274 <__aeabi_uidivmod>
        gRFAL.Lm.mdIrqs |= ( ST25R3916_IRQ_MASK_RXE );
 8004e30:	2310      	movs	r3, #16
 8004e32:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 8004e34:	7521      	strb	r1, [r4, #20]
        gRFAL.Lm.mdIrqs |= ( ST25R3916_IRQ_MASK_RXE );
 8004e36:	4313      	orrs	r3, r2
 8004e38:	66a3      	str	r3, [r4, #104]	@ 0x68
    if( (gRFAL.Lm.mdReg & ST25R3916_REG_MODE_targ) == ST25R3916_REG_MODE_targ_targ )
 8004e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea4 <rfalListenStart+0x1c4>)
        return RFAL_ERR_REQUEST;   /* Listen Start called but no mode was enabled */
 8004e3c:	2005      	movs	r0, #5
    if( (gRFAL.Lm.mdReg & ST25R3916_REG_MODE_targ) == ST25R3916_REG_MODE_targ_targ )
 8004e3e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004e40:	0612      	lsls	r2, r2, #24
 8004e42:	d400      	bmi.n	8004e46 <rfalListenStart+0x166>
 8004e44:	e76c      	b.n	8004d20 <rfalListenStart+0x40>
        gRFAL.state     = RFAL_STATE_LM;
 8004e46:	2204      	movs	r2, #4
 8004e48:	701a      	strb	r2, [r3, #0]
        gRFAL.Lm.rxBuf    = rxBuf;
 8004e4a:	9a02      	ldr	r2, [sp, #8]
        *gRFAL.Lm.rxLen   = 0;
 8004e4c:	2400      	movs	r4, #0
        gRFAL.Lm.rxBuf    = rxBuf;
 8004e4e:	671a      	str	r2, [r3, #112]	@ 0x70
        gRFAL.Lm.rxBufLen = rxBufLen;
 8004e50:	001a      	movs	r2, r3
 8004e52:	9903      	ldr	r1, [sp, #12]
 8004e54:	3274      	adds	r2, #116	@ 0x74
 8004e56:	8011      	strh	r1, [r2, #0]
        gRFAL.Lm.rxLen    = rxLen;
 8004e58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
        gRFAL.Lm.mdMask = lmMask;
 8004e5a:	661f      	str	r7, [r3, #96]	@ 0x60
        gRFAL.Lm.rxLen    = rxLen;
 8004e5c:	679a      	str	r2, [r3, #120]	@ 0x78
        *gRFAL.Lm.rxLen   = 0;
 8004e5e:	8014      	strh	r4, [r2, #0]
        gRFAL.Lm.dataFlag = false;
 8004e60:	2280      	movs	r2, #128	@ 0x80
 8004e62:	337c      	adds	r3, #124	@ 0x7c
 8004e64:	0052      	lsls	r2, r2, #1
 8004e66:	801a      	strh	r2, [r3, #0]
        st25r3916ChangeRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p ), autoResp );
 8004e68:	210d      	movs	r1, #13
 8004e6a:	002a      	movs	r2, r5
 8004e6c:	3003      	adds	r0, #3
 8004e6e:	f001 fe7a 	bl	8006b66 <st25r3916ChangeRegisterBits>
        st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger );
 8004e72:	0022      	movs	r2, r4
 8004e74:	21e0      	movs	r1, #224	@ 0xe0
 8004e76:	2012      	movs	r0, #18
 8004e78:	f001 fe75 	bl	8006b66 <st25r3916ChangeRegisterBits>
        st25r3916SetRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step_512 );
 8004e7c:	2108      	movs	r1, #8
 8004e7e:	2012      	movs	r0, #18
 8004e80:	f001 fe49 	bl	8006b16 <st25r3916SetRegisterBits>
        st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo512fc( RFAL_LM_GT ) );
 8004e84:	2102      	movs	r1, #2
 8004e86:	200f      	movs	r0, #15
 8004e88:	f001 fd5e 	bl	8006948 <st25r3916WriteRegister>
        st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 8004e8c:	21e0      	movs	r1, #224	@ 0xe0
 8004e8e:	2005      	movs	r0, #5
 8004e90:	f001 fe2f 	bl	8006af2 <st25r3916ClrRegisterBits>
        rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_ON) );
 8004e94:	2006      	movs	r0, #6
 8004e96:	f006 f943 	bl	800b120 <rfalSetAnalogConfig>
        rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	f7ff fe0c 	bl	8004ab8 <rfalListenSetState>
    return RFAL_ERR_NONE;
 8004ea0:	0020      	movs	r0, r4
 8004ea2:	e73d      	b.n	8004d20 <rfalListenStart+0x40>
 8004ea4:	20001554 	.word	0x20001554
 8004ea8:	200015d1 	.word	0x200015d1
 8004eac:	78563412 	.word	0x78563412
 8004eb0:	21dfbc9a 	.word	0x21dfbc9a
 8004eb4:	a9876543 	.word	0xa9876543
 8004eb8:	18000010 	.word	0x18000010

08004ebc <rfalWorker>:
{
 8004ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( gRFAL.state )
 8004ebe:	4caf      	ldr	r4, [pc, #700]	@ (800517c <rfalWorker+0x2c0>)
{
 8004ec0:	b08d      	sub	sp, #52	@ 0x34
    switch( gRFAL.state )
 8004ec2:	7825      	ldrb	r5, [r4, #0]
 8004ec4:	2d04      	cmp	r5, #4
 8004ec6:	d100      	bne.n	8004eca <rfalWorker+0xe>
 8004ec8:	e35a      	b.n	8005580 <rfalWorker+0x6c4>
 8004eca:	2d05      	cmp	r5, #5
 8004ecc:	d101      	bne.n	8004ed2 <rfalWorker+0x16>
 8004ece:	f000 fd5e 	bl	800598e <rfalWorker+0xad2>
 8004ed2:	2d03      	cmp	r5, #3
 8004ed4:	d16f      	bne.n	8004fb6 <rfalWorker+0xfa>
        if( gRFAL.tmr.txRx != RFAL_TIMING_NONE )
 8004ed6:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d006      	beq.n	8004eea <rfalWorker+0x2e>
            if( rfalTimerisExpired( gRFAL.tmr.txRx ) )
 8004edc:	f001 ffe2 	bl	8006ea4 <timerIsExpired>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d002      	beq.n	8004eea <rfalWorker+0x2e>
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8004ee4:	235a      	movs	r3, #90	@ 0x5a
                gRFAL.TxRx.status = RFAL_ERR_IO;
 8004ee6:	8365      	strh	r5, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8004ee8:	7623      	strb	r3, [r4, #24]
        if( rfalIsTransceiveInTx() )
 8004eea:	f7ff fc53 	bl	8004794 <rfalIsTransceiveInTx>
 8004eee:	0003      	movs	r3, r0
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8004ef0:	7e20      	ldrb	r0, [r4, #24]
        if( rfalIsTransceiveInTx() )
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d100      	bne.n	8004ef8 <rfalWorker+0x3c>
 8004ef6:	e14b      	b.n	8005190 <rfalWorker+0x2d4>
    irqs = ST25R3916_IRQ_MASK_NONE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9309      	str	r3, [sp, #36]	@ 0x24
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8004efc:	7e63      	ldrb	r3, [r4, #25]
 8004efe:	4283      	cmp	r3, r0
 8004f00:	d000      	beq.n	8004f04 <rfalWorker+0x48>
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 8004f02:	7660      	strb	r0, [r4, #25]
    switch( gRFAL.TxRx.state )
 8004f04:	380b      	subs	r0, #11
 8004f06:	2809      	cmp	r0, #9
 8004f08:	d900      	bls.n	8004f0c <rfalWorker+0x50>
 8004f0a:	e134      	b.n	8005176 <rfalWorker+0x2ba>
 8004f0c:	f7fb f922 	bl	8000154 <__gnu_thumb1_case_uhi>
 8004f10:	000c000a 	.word	0x000c000a
 8004f14:	001b0014 	.word	0x001b0014
 8004f18:	00970072 	.word	0x00970072
 8004f1c:	00f700a6 	.word	0x00f700a6
 8004f20:	01230104 	.word	0x01230104
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 8004f24:	230c      	movs	r3, #12
 8004f26:	7623      	strb	r3, [r4, #24]
            if( !rfalIsGTExpired() )
 8004f28:	f7ff fae8 	bl	80044fc <rfalIsGTExpired>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d042      	beq.n	8004fb6 <rfalWorker+0xfa>
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8004f30:	2300      	movs	r3, #0
 8004f32:	6423      	str	r3, [r4, #64]	@ 0x40
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 8004f34:	330d      	adds	r3, #13
 8004f36:	7623      	strb	r3, [r4, #24]
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 8004f38:	2104      	movs	r1, #4
 8004f3a:	7863      	ldrb	r3, [r4, #1]
 8004f3c:	438b      	bics	r3, r1
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	d133      	bne.n	8004faa <rfalWorker+0xee>
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_PREP_TX;
 8004f42:	230e      	movs	r3, #14
 8004f44:	7623      	strb	r3, [r4, #24]
            rfalPrepareTransceive( );
 8004f46:	f7fe ff23 	bl	8003d90 <rfalPrepareTransceive>
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 8004f4a:	239c      	movs	r3, #156	@ 0x9c
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8004f4c:	7865      	ldrb	r5, [r4, #1]
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	8723      	strh	r3, [r4, #56]	@ 0x38
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8004f52:	1feb      	subs	r3, r5, #7
 8004f54:	8c20      	ldrh	r0, [r4, #32]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d85d      	bhi.n	8005016 <rfalWorker+0x15a>
                gRFAL.nfcvData.nfcvOffset = 0;
 8004f5a:	2384      	movs	r3, #132	@ 0x84
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	52e2      	strh	r2, [r4, r3]
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8004f62:	3318      	adds	r3, #24
 8004f64:	58e1      	ldr	r1, [r4, r3]
 8004f66:	3201      	adds	r2, #1
 8004f68:	3007      	adds	r0, #7
 8004f6a:	098b      	lsrs	r3, r1, #6
 8004f6c:	0016      	movs	r6, r2
 8004f6e:	438a      	bics	r2, r1
 8004f70:	08c1      	lsrs	r1, r0, #3
 8004f72:	4883      	ldr	r0, [pc, #524]	@ (8005180 <rfalWorker+0x2c4>)
 8004f74:	3d08      	subs	r5, #8
 8004f76:	9005      	str	r0, [sp, #20]
 8004f78:	2080      	movs	r0, #128	@ 0x80
 8004f7a:	0080      	lsls	r0, r0, #2
 8004f7c:	9004      	str	r0, [sp, #16]
 8004f7e:	4881      	ldr	r0, [pc, #516]	@ (8005184 <rfalWorker+0x2c8>)
 8004f80:	439e      	bics	r6, r3
 8004f82:	9002      	str	r0, [sp, #8]
 8004f84:	4880      	ldr	r0, [pc, #512]	@ (8005188 <rfalWorker+0x2cc>)
 8004f86:	0033      	movs	r3, r6
 8004f88:	9001      	str	r0, [sp, #4]
 8004f8a:	4268      	negs	r0, r5
 8004f8c:	4145      	adcs	r5, r0
 8004f8e:	4e7f      	ldr	r6, [pc, #508]	@ (800518c <rfalWorker+0x2d0>)
 8004f90:	9500      	str	r5, [sp, #0]
 8004f92:	9603      	str	r6, [sp, #12]
 8004f94:	69e0      	ldr	r0, [r4, #28]
 8004f96:	f006 f9a3 	bl	800b2e0 <rfalIso15693VCDCode>
                if( (ret != RFAL_ERR_NONE) && (ret != RFAL_ERR_AGAIN) )
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d00d      	beq.n	8004fba <rfalWorker+0xfe>
 8004f9e:	280d      	cmp	r0, #13
 8004fa0:	d00b      	beq.n	8004fba <rfalWorker+0xfe>
                    gRFAL.TxRx.status = ret;
 8004fa2:	8360      	strh	r0, [r4, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8004fa4:	2314      	movs	r3, #20
 8004fa6:	7623      	strb	r3, [r4, #24]
                    break;
 8004fa8:	e005      	b.n	8004fb6 <rfalWorker+0xfa>
                if( st25r3916IsGPTRunning() )
 8004faa:	000a      	movs	r2, r1
 8004fac:	2024      	movs	r0, #36	@ 0x24
 8004fae:	f001 fdf5 	bl	8006b9c <st25r3916CheckReg>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d0c5      	beq.n	8004f42 <rfalWorker+0x86>
}
 8004fb6:	b00d      	add	sp, #52	@ 0x34
 8004fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                st25r3916SetNumTxBits( (uint16_t)rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 8004fba:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
 8004fbc:	00c0      	lsls	r0, r0, #3
 8004fbe:	b280      	uxth	r0, r0
 8004fc0:	f001 fb28 	bl	8006614 <st25r3916SetNumTxBits>
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, gRFAL.fifo.bytesWritten );
 8004fc4:	0030      	movs	r0, r6
 8004fc6:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 8004fc8:	f001 fcc8 	bl	800695c <st25r3916WriteFifo>
            rfalCheckEnableObsModeTx();
 8004fcc:	7963      	ldrb	r3, [r4, #5]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d004      	beq.n	8004fdc <rfalWorker+0x120>
 8004fd2:	2140      	movs	r1, #64	@ 0x40
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	4319      	orrs	r1, r3
 8004fd8:	f001 fd6f 	bl	8006aba <st25r3916WriteTestRegister>
            if( rfalIsModePassiveListen(gRFAL.mode) )
 8004fdc:	7863      	ldrb	r3, [r4, #1]
 8004fde:	3b0a      	subs	r3, #10
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d805      	bhi.n	8004ff0 <rfalWorker+0x134>
                if( !rfalIsExtFieldOn() )
 8004fe4:	f7ff fcd0 	bl	8004988 <rfalIsExtFieldOn>
                    gRFAL.TxRx.status = RFAL_ERR_LINK_LOSS;
 8004fe8:	2325      	movs	r3, #37	@ 0x25
                if( !rfalIsExtFieldOn() )
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d100      	bne.n	8004ff0 <rfalWorker+0x134>
 8004fee:	e0a7      	b.n	8005140 <rfalWorker+0x284>
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 8004ff0:	230f      	movs	r3, #15
 8004ff2:	7623      	strb	r3, [r4, #24]
            if( gRFAL.callbacks.syncTxRx != NULL )
 8004ff4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d11d      	bne.n	8005036 <rfalWorker+0x17a>
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 8004ffa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITHOUT_CRC );
 8004ffc:	20c5      	movs	r0, #197	@ 0xc5
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 8004ffe:	07db      	lsls	r3, r3, #31
 8005000:	d400      	bmi.n	8005004 <rfalWorker+0x148>
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITH_CRC );
 8005002:	20c4      	movs	r0, #196	@ 0xc4
 8005004:	f001 fd29 	bl	8006a5a <st25r3916ExecuteCommand>
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8005008:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 800500a:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800500c:	2312      	movs	r3, #18
 800500e:	4291      	cmp	r1, r2
 8005010:	d2c9      	bcs.n	8004fa6 <rfalWorker+0xea>
 8005012:	3b02      	subs	r3, #2
 8005014:	e7c7      	b.n	8004fa6 <rfalWorker+0xea>
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 8005016:	1dc3      	adds	r3, r0, #7
 8005018:	08db      	lsrs	r3, r3, #3
 800501a:	8763      	strh	r3, [r4, #58]	@ 0x3a
                st25r3916SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 800501c:	f001 fafa 	bl	8006614 <st25r3916SetNumTxBits>
                gRFAL.fifo.bytesWritten = RFAL_MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 8005020:	2280      	movs	r2, #128	@ 0x80
 8005022:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
 8005024:	0092      	lsls	r2, r2, #2
 8005026:	1c0b      	adds	r3, r1, #0
 8005028:	4291      	cmp	r1, r2
 800502a:	d900      	bls.n	800502e <rfalWorker+0x172>
 800502c:	1c13      	adds	r3, r2, #0
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 800502e:	69e0      	ldr	r0, [r4, #28]
                gRFAL.fifo.bytesWritten = RFAL_MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 8005030:	b299      	uxth	r1, r3
 8005032:	87a3      	strh	r3, [r4, #60]	@ 0x3c
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 8005034:	e7c8      	b.n	8004fc8 <rfalWorker+0x10c>
                if( !gRFAL.callbacks.syncTxRx() )
 8005036:	4798      	blx	r3
 8005038:	2800      	cmp	r0, #0
 800503a:	d1de      	bne.n	8004ffa <rfalWorker+0x13e>
 800503c:	e7bb      	b.n	8004fb6 <rfalWorker+0xfa>
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 800503e:	2048      	movs	r0, #72	@ 0x48
 8005040:	f001 fe72 	bl	8006d28 <st25r3916GetInterrupt>
 8005044:	9009      	str	r0, [sp, #36]	@ 0x24
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8005046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0b4      	beq.n	8004fb6 <rfalWorker+0xfa>
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_TXE) == 0U) )
 800504c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800504e:	065b      	lsls	r3, r3, #25
 8005050:	d575      	bpl.n	800513e <rfalWorker+0x282>
 8005052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005054:	071b      	lsls	r3, r3, #28
 8005056:	d472      	bmi.n	800513e <rfalWorker+0x282>
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 8005058:	2311      	movs	r3, #17
 800505a:	7623      	strb	r3, [r4, #24]
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800505c:	7867      	ldrb	r7, [r4, #1]
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800505e:	69e1      	ldr	r1, [r4, #28]
                maxLen = (uint16_t)RFAL_MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8005060:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 8005062:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8005064:	8f25      	ldrh	r5, [r4, #56]	@ 0x38
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8005066:	9107      	str	r1, [sp, #28]
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8005068:	1ff9      	subs	r1, r7, #7
                maxLen = (uint16_t)RFAL_MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	ae0b      	add	r6, sp, #44	@ 0x2c
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800506e:	2901      	cmp	r1, #1
 8005070:	d83d      	bhi.n	80050ee <rfalWorker+0x232>
                maxLen = (uint16_t)RFAL_MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8005072:	429d      	cmp	r5, r3
 8005074:	dd00      	ble.n	8005078 <rfalWorker+0x1bc>
 8005076:	b29d      	uxth	r5, r3
                tmp    = 0;
 8005078:	2300      	movs	r3, #0
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800507a:	2201      	movs	r2, #1
                tmp    = 0;
 800507c:	8033      	strh	r3, [r6, #0]
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800507e:	2387      	movs	r3, #135	@ 0x87
 8005080:	0010      	movs	r0, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	58e1      	ldr	r1, [r4, r3]
 8005086:	098b      	lsrs	r3, r1, #6
 8005088:	4398      	bics	r0, r3
 800508a:	0003      	movs	r3, r0
                maxLen = (uint16_t)RFAL_MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800508c:	2082      	movs	r0, #130	@ 0x82
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800508e:	438a      	bics	r2, r1
 8005090:	8c21      	ldrh	r1, [r4, #32]
                maxLen = (uint16_t)RFAL_MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 8005092:	0080      	lsls	r0, r0, #2
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8005094:	3107      	adds	r1, #7
 8005096:	9605      	str	r6, [sp, #20]
 8005098:	08c9      	lsrs	r1, r1, #3
                maxLen = (uint16_t)RFAL_MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800509a:	1c2e      	adds	r6, r5, #0
 800509c:	4285      	cmp	r5, r0
 800509e:	d900      	bls.n	80050a2 <rfalWorker+0x1e6>
 80050a0:	1c06      	adds	r6, r0, #0
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 80050a2:	b2b6      	uxth	r6, r6
 80050a4:	9604      	str	r6, [sp, #16]
 80050a6:	4e37      	ldr	r6, [pc, #220]	@ (8005184 <rfalWorker+0x2c8>)
 80050a8:	3f08      	subs	r7, #8
 80050aa:	9602      	str	r6, [sp, #8]
 80050ac:	4e36      	ldr	r6, [pc, #216]	@ (8005188 <rfalWorker+0x2cc>)
 80050ae:	4d37      	ldr	r5, [pc, #220]	@ (800518c <rfalWorker+0x2d0>)
 80050b0:	9601      	str	r6, [sp, #4]
 80050b2:	427e      	negs	r6, r7
 80050b4:	4177      	adcs	r7, r6
 80050b6:	9807      	ldr	r0, [sp, #28]
 80050b8:	9503      	str	r5, [sp, #12]
 80050ba:	9700      	str	r7, [sp, #0]
 80050bc:	f006 f910 	bl	800b2e0 <rfalIso15693VCDCode>
                if( (ret != RFAL_ERR_NONE) && (ret != RFAL_ERR_AGAIN) )
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d002      	beq.n	80050ca <rfalWorker+0x20e>
 80050c4:	280d      	cmp	r0, #13
 80050c6:	d000      	beq.n	80050ca <rfalWorker+0x20e>
 80050c8:	e76b      	b.n	8004fa2 <rfalWorker+0xe6>
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, tmp );
 80050ca:	0028      	movs	r0, r5
 80050cc:	ab0b      	add	r3, sp, #44	@ 0x2c
 80050ce:	8819      	ldrh	r1, [r3, #0]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 80050d0:	f001 fc44 	bl	800695c <st25r3916WriteFifo>
            gRFAL.fifo.bytesWritten += tmp;
 80050d4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80050d6:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 80050d8:	8812      	ldrh	r2, [r2, #0]
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 80050da:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
            gRFAL.fifo.bytesWritten += tmp;
 80050dc:	189b      	adds	r3, r3, r2
 80050de:	b29b      	uxth	r3, r3
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 80050e0:	2212      	movs	r2, #18
            gRFAL.fifo.bytesWritten += tmp;
 80050e2:	87a3      	strh	r3, [r4, #60]	@ 0x3c
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 80050e4:	4299      	cmp	r1, r3
 80050e6:	d900      	bls.n	80050ea <rfalWorker+0x22e>
 80050e8:	3a02      	subs	r2, #2
 80050ea:	7622      	strb	r2, [r4, #24]
            break;
 80050ec:	e763      	b.n	8004fb6 <rfalWorker+0xfa>
                tmp = RFAL_MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 80050ee:	429d      	cmp	r5, r3
 80050f0:	dd00      	ble.n	80050f4 <rfalWorker+0x238>
 80050f2:	001d      	movs	r5, r3
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 80050f4:	9b07      	ldr	r3, [sp, #28]
                tmp = RFAL_MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 80050f6:	b2a9      	uxth	r1, r5
 80050f8:	8031      	strh	r1, [r6, #0]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 80050fa:	1898      	adds	r0, r3, r2
 80050fc:	e7e8      	b.n	80050d0 <rfalWorker+0x214>
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 80050fe:	2048      	movs	r0, #72	@ 0x48
 8005100:	f001 fe12 	bl	8006d28 <st25r3916GetInterrupt>
 8005104:	9009      	str	r0, [sp, #36]	@ 0x24
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8005106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005108:	2b00      	cmp	r3, #0
 800510a:	d100      	bne.n	800510e <rfalWorker+0x252>
 800510c:	e753      	b.n	8004fb6 <rfalWorker+0xfa>
            if( (irqs & ST25R3916_IRQ_MASK_TXE) != 0U )
 800510e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005110:	071b      	lsls	r3, r3, #28
 8005112:	d510      	bpl.n	8005136 <rfalWorker+0x27a>
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 8005114:	2313      	movs	r3, #19
 8005116:	7623      	strb	r3, [r4, #24]
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 8005118:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                rfalCheckDisableObsMode();
 800511a:	79a3      	ldrb	r3, [r4, #6]
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 800511c:	2a00      	cmp	r2, #0
 800511e:	d111      	bne.n	8005144 <rfalWorker+0x288>
            rfalCheckDisableObsMode();
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <rfalWorker+0x270>
 8005124:	2140      	movs	r1, #64	@ 0x40
 8005126:	2001      	movs	r0, #1
 8005128:	f001 fcc7 	bl	8006aba <st25r3916WriteTestRegister>
            rfalCleanupTransceive();
 800512c:	f7fe fe1a 	bl	8003d64 <rfalCleanupTransceive>
            gRFAL.TxRx.status = RFAL_ERR_NONE;
 8005130:	2300      	movs	r3, #0
 8005132:	8363      	strh	r3, [r4, #26]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 8005134:	e737      	b.n	8004fa6 <rfalWorker+0xea>
            else if( (irqs & ST25R3916_IRQ_MASK_FWL) != 0U )
 8005136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005138:	065b      	lsls	r3, r3, #25
 800513a:	d500      	bpl.n	800513e <rfalWorker+0x282>
 800513c:	e73b      	b.n	8004fb6 <rfalWorker+0xfa>
                gRFAL.TxRx.status = RFAL_ERR_IO;
 800513e:	2303      	movs	r3, #3
 8005140:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8005142:	e72f      	b.n	8004fa4 <rfalWorker+0xe8>
            rfalCheckEnableObsModeRx();
 8005144:	2b00      	cmp	r3, #0
 8005146:	d004      	beq.n	8005152 <rfalWorker+0x296>
 8005148:	2140      	movs	r1, #64	@ 0x40
 800514a:	2001      	movs	r0, #1
 800514c:	4319      	orrs	r1, r3
 800514e:	f001 fcb4 	bl	8006aba <st25r3916WriteTestRegister>
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 8005152:	2351      	movs	r3, #81	@ 0x51
 8005154:	e727      	b.n	8004fa6 <rfalWorker+0xea>
            if( gRFAL.TxRx.status == RFAL_ERR_BUSY )
 8005156:	8b63      	ldrh	r3, [r4, #26]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d101      	bne.n	8005160 <rfalWorker+0x2a4>
                gRFAL.TxRx.status = RFAL_ERR_SYSTEM;
 800515c:	3306      	adds	r3, #6
 800515e:	8363      	strh	r3, [r4, #26]
            rfalCheckDisableObsMode();
 8005160:	79a3      	ldrb	r3, [r4, #6]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <rfalWorker+0x2b2>
 8005166:	2140      	movs	r1, #64	@ 0x40
 8005168:	2001      	movs	r0, #1
 800516a:	f001 fca6 	bl	8006aba <st25r3916WriteTestRegister>
            rfalCleanupTransceive();
 800516e:	f7fe fdf9 	bl	8003d64 <rfalCleanupTransceive>
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 8005172:	2300      	movs	r3, #0
 8005174:	e717      	b.n	8004fa6 <rfalWorker+0xea>
            gRFAL.TxRx.status = RFAL_ERR_SYSTEM;
 8005176:	2308      	movs	r3, #8
 8005178:	e7e2      	b.n	8005140 <rfalWorker+0x284>
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	20001554 	.word	0x20001554
 8005180:	20001590 	.word	0x20001590
 8005184:	20001974 	.word	0x20001974
 8005188:	2000158e 	.word	0x2000158e
 800518c:	2000176c 	.word	0x2000176c
        if( rfalIsTransceiveInRx() )
 8005190:	2850      	cmp	r0, #80	@ 0x50
 8005192:	d800      	bhi.n	8005196 <rfalWorker+0x2da>
 8005194:	e70f      	b.n	8004fb6 <rfalWorker+0xfa>
    irqs = ST25R3916_IRQ_MASK_NONE;
 8005196:	930a      	str	r3, [sp, #40]	@ 0x28
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8005198:	7e63      	ldrb	r3, [r4, #25]
 800519a:	4283      	cmp	r3, r0
 800519c:	d000      	beq.n	80051a0 <rfalWorker+0x2e4>
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800519e:	7660      	strb	r0, [r4, #25]
    switch( gRFAL.TxRx.state )
 80051a0:	3851      	subs	r0, #81	@ 0x51
 80051a2:	2809      	cmp	r0, #9
 80051a4:	d900      	bls.n	80051a8 <rfalWorker+0x2ec>
 80051a6:	e1e8      	b.n	800557a <rfalWorker+0x6be>
 80051a8:	f7fa ffd4 	bl	8000154 <__gnu_thumb1_case_uhi>
 80051ac:	01b0000a 	.word	0x01b0000a
 80051b0:	0049001d 	.word	0x0049001d
 80051b4:	008c0168 	.word	0x008c0168
 80051b8:	01cf00cd 	.word	0x01cf00cd
 80051bc:	01a00166 	.word	0x01a00166
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 80051c0:	2300      	movs	r3, #0
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 80051c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 80051c4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
            gRFAL.fifo.bytesTotal     = 0;            /* Total bytes in FIFO will now be from Rx */
 80051c6:	8763      	strh	r3, [r4, #58]	@ 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d000      	beq.n	80051ce <rfalWorker+0x312>
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 80051cc:	8013      	strh	r3, [r2, #0]
            rfalTimerStart( gRFAL.tmr.PPON2, 10U );
 80051ce:	200a      	movs	r0, #10
 80051d0:	f001 fe62 	bl	8006e98 <timerCalculateTimer>
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 80051d4:	2204      	movs	r2, #4
 80051d6:	7863      	ldrb	r3, [r4, #1]
            rfalTimerStart( gRFAL.tmr.PPON2, 10U );
 80051d8:	64a0      	str	r0, [r4, #72]	@ 0x48
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 80051da:	4393      	bics	r3, r2
 80051dc:	3b09      	subs	r3, #9
 80051de:	1e5a      	subs	r2, r3, #1
 80051e0:	4193      	sbcs	r3, r2
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80051e2:	3352      	adds	r3, #82	@ 0x52
 80051e4:	e6df      	b.n	8004fa6 <rfalWorker+0xea>
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_EOF) );
 80051e6:	48ba      	ldr	r0, [pc, #744]	@ (80054d0 <rfalWorker+0x614>)
 80051e8:	f001 fd9e 	bl	8006d28 <st25r3916GetInterrupt>
 80051ec:	900a      	str	r0, [sp, #40]	@ 0x28
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 80051ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d100      	bne.n	80051f6 <rfalWorker+0x33a>
 80051f4:	e6df      	b.n	8004fb6 <rfalWorker+0xfa>
            if( ((irqs & ST25R3916_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 80051f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051f8:	045b      	lsls	r3, r3, #17
 80051fa:	d506      	bpl.n	800520a <rfalWorker+0x34e>
 80051fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051fe:	069b      	lsls	r3, r3, #26
 8005200:	d403      	bmi.n	800520a <rfalWorker+0x34e>
                gRFAL.TxRx.status = RFAL_ERR_TIMEOUT;
 8005202:	2304      	movs	r3, #4
                 gRFAL.TxRx.status = RFAL_ERR_LINK_LOSS;
 8005204:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 8005206:	235a      	movs	r3, #90	@ 0x5a
 8005208:	e6cd      	b.n	8004fa6 <rfalWorker+0xea>
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 800520a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800520c:	051b      	lsls	r3, r3, #20
 800520e:	d509      	bpl.n	8005224 <rfalWorker+0x368>
 8005210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005212:	069b      	lsls	r3, r3, #26
 8005214:	d406      	bmi.n	8005224 <rfalWorker+0x368>
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_ERR_TIMEOUT : RFAL_ERR_LINK_LOSS );
 8005216:	2304      	movs	r3, #4
 8005218:	7862      	ldrb	r2, [r4, #1]
 800521a:	439a      	bics	r2, r3
 800521c:	2a09      	cmp	r2, #9
 800521e:	d0f1      	beq.n	8005204 <rfalWorker+0x348>
 8005220:	3321      	adds	r3, #33	@ 0x21
 8005222:	e7ef      	b.n	8005204 <rfalWorker+0x348>
            if( (irqs & ST25R3916_IRQ_MASK_RXS) != 0U )
 8005224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005226:	069b      	lsls	r3, r3, #26
 8005228:	d519      	bpl.n	800525e <rfalWorker+0x3a2>
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800522a:	2032      	movs	r0, #50	@ 0x32
 800522c:	f001 fe34 	bl	8006e98 <timerCalculateTimer>
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8005230:	2354      	movs	r3, #84	@ 0x54
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 8005232:	4aa8      	ldr	r2, [pc, #672]	@ (80054d4 <rfalWorker+0x618>)
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8005234:	7623      	strb	r3, [r4, #24]
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 8005236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8005238:	6460      	str	r0, [r4, #68]	@ 0x44
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 800523a:	4013      	ands	r3, r2
 800523c:	930a      	str	r3, [sp, #40]	@ 0x28
            irqs |= st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_WU_F ) );
 800523e:	48a6      	ldr	r0, [pc, #664]	@ (80054d8 <rfalWorker+0x61c>)
 8005240:	f001 fd72 	bl	8006d28 <st25r3916GetInterrupt>
 8005244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005246:	4318      	orrs	r0, r3
 8005248:	900a      	str	r0, [sp, #40]	@ 0x28
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 800524a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800524c:	2b00      	cmp	r3, #0
 800524e:	d108      	bne.n	8005262 <rfalWorker+0x3a6>
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 8005250:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005252:	f001 fe27 	bl	8006ea4 <timerIsExpired>
                    gRFAL.TxRx.status = RFAL_ERR_FRAMING;
 8005256:	2309      	movs	r3, #9
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 8005258:	2800      	cmp	r0, #0
 800525a:	d1d3      	bne.n	8005204 <rfalWorker+0x348>
 800525c:	e6ab      	b.n	8004fb6 <rfalWorker+0xfa>
                gRFAL.TxRx.status = RFAL_ERR_IO;
 800525e:	2303      	movs	r3, #3
 8005260:	e7d0      	b.n	8005204 <rfalWorker+0x348>
            if( (irqs & ST25R3916_IRQ_MASK_RX_REST) != 0U )
 8005262:	2502      	movs	r5, #2
 8005264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005266:	422b      	tst	r3, r5
 8005268:	d019      	beq.n	800529e <rfalWorker+0x3e2>
                if( st25r3916GetInterrupt( ST25R3916_IRQ_MASK_NRE ) != 0U )
 800526a:	2080      	movs	r0, #128	@ 0x80
 800526c:	01c0      	lsls	r0, r0, #7
 800526e:	f001 fd5b 	bl	8006d28 <st25r3916GetInterrupt>
 8005272:	1e02      	subs	r2, r0, #0
 8005274:	d1c5      	bne.n	8005202 <rfalWorker+0x346>
                if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0 ) )   /* MISRA 13.5 */
 8005276:	0029      	movs	r1, r5
 8005278:	2024      	movs	r0, #36	@ 0x24
 800527a:	f001 fc8f 	bl	8006b9c <st25r3916CheckReg>
 800527e:	2800      	cmp	r0, #0
 8005280:	d1bf      	bne.n	8005202 <rfalWorker+0x346>
                st25r3916GetInterrupt( ST25R3916_IRQ_MASK_RXS );
 8005282:	3020      	adds	r0, #32
 8005284:	f001 fd50 	bl	8006d28 <st25r3916GetInterrupt>
                if( st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_rx_act, ST25R3916_REG_AUX_DISPLAY_rx_act) )
 8005288:	2204      	movs	r2, #4
 800528a:	2031      	movs	r0, #49	@ 0x31
 800528c:	0011      	movs	r1, r2
 800528e:	f001 fc85 	bl	8006b9c <st25r3916CheckReg>
 8005292:	2800      	cmp	r0, #0
 8005294:	d001      	beq.n	800529a <rfalWorker+0x3de>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8005296:	2354      	movs	r3, #84	@ 0x54
 8005298:	e685      	b.n	8004fa6 <rfalWorker+0xea>
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800529a:	2353      	movs	r3, #83	@ 0x53
 800529c:	e683      	b.n	8004fa6 <rfalWorker+0xea>
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXE) == 0U) )
 800529e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052a0:	065b      	lsls	r3, r3, #25
 80052a2:	d504      	bpl.n	80052ae <rfalWorker+0x3f2>
 80052a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052a6:	06db      	lsls	r3, r3, #27
 80052a8:	d401      	bmi.n	80052ae <rfalWorker+0x3f2>
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 80052aa:	2355      	movs	r3, #85	@ 0x55
 80052ac:	e67b      	b.n	8004fa6 <rfalWorker+0xea>
            if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 80052ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	d4f2      	bmi.n	800529a <rfalWorker+0x3de>
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 80052b4:	4889      	ldr	r0, [pc, #548]	@ (80054dc <rfalWorker+0x620>)
 80052b6:	f001 fd37 	bl	8006d28 <st25r3916GetInterrupt>
 80052ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052bc:	4318      	orrs	r0, r3
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 80052be:	2356      	movs	r3, #86	@ 0x56
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 80052c0:	900a      	str	r0, [sp, #40]	@ 0x28
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 80052c2:	7623      	strb	r3, [r4, #24]
            if( (irqs & ST25R3916_IRQ_MASK_ERR1) != 0U )
 80052c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052c6:	02db      	lsls	r3, r3, #11
 80052c8:	d506      	bpl.n	80052d8 <rfalWorker+0x41c>
                gRFAL.TxRx.status = RFAL_ERR_FRAMING;
 80052ca:	2309      	movs	r3, #9
 80052cc:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 80052ce:	334e      	adds	r3, #78	@ 0x4e
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 80052d0:	7623      	strb	r3, [r4, #24]
                rfalErrorHandling();
 80052d2:	f7fe fe35 	bl	8003f40 <rfalErrorHandling>
                break;
 80052d6:	e66e      	b.n	8004fb6 <rfalWorker+0xfa>
            else if( (rfalIsModePassivePoll( gRFAL.mode )) && ((irqs & ST25R3916_IRQ_MASK_ERR2) != 0U) && (gRFAL.mode != RFAL_MODE_POLL_B_CTS) )
 80052d8:	7863      	ldrb	r3, [r4, #1]
 80052da:	001a      	movs	r2, r3
 80052dc:	3a09      	subs	r2, #9
 80052de:	2a04      	cmp	r2, #4
 80052e0:	d904      	bls.n	80052ec <rfalWorker+0x430>
 80052e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052e4:	0292      	lsls	r2, r2, #10
 80052e6:	d501      	bpl.n	80052ec <rfalWorker+0x430>
 80052e8:	2b05      	cmp	r3, #5
 80052ea:	d1ee      	bne.n	80052ca <rfalWorker+0x40e>
            else if( (irqs & ST25R3916_IRQ_MASK_PAR) != 0U )
 80052ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052ee:	0252      	lsls	r2, r2, #9
 80052f0:	d503      	bpl.n	80052fa <rfalWorker+0x43e>
                gRFAL.TxRx.status = RFAL_ERR_PAR;
 80052f2:	231b      	movs	r3, #27
 80052f4:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 80052f6:	333c      	adds	r3, #60	@ 0x3c
 80052f8:	e7ea      	b.n	80052d0 <rfalWorker+0x414>
            else if( (irqs & ST25R3916_IRQ_MASK_CRC) != 0U )
 80052fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052fc:	0212      	lsls	r2, r2, #8
 80052fe:	d503      	bpl.n	8005308 <rfalWorker+0x44c>
                gRFAL.TxRx.status = RFAL_ERR_CRC;
 8005300:	2315      	movs	r3, #21
 8005302:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8005304:	3342      	adds	r3, #66	@ 0x42
 8005306:	e7e3      	b.n	80052d0 <rfalWorker+0x414>
            else if( (irqs & ST25R3916_IRQ_MASK_COL) != 0U )
 8005308:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800530a:	0752      	lsls	r2, r2, #29
 800530c:	d503      	bpl.n	8005316 <rfalWorker+0x45a>
                gRFAL.TxRx.status = RFAL_ERR_RF_COLLISION;
 800530e:	231d      	movs	r3, #29
 8005310:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8005312:	333a      	adds	r3, #58	@ 0x3a
 8005314:	e7dc      	b.n	80052d0 <rfalWorker+0x414>
            else if( rfalIsModePassiveListen( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) )
 8005316:	3b0a      	subs	r3, #10
 8005318:	2b02      	cmp	r3, #2
 800531a:	d804      	bhi.n	8005326 <rfalWorker+0x46a>
 800531c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800531e:	051b      	lsls	r3, r3, #20
 8005320:	d501      	bpl.n	8005326 <rfalWorker+0x46a>
                 gRFAL.TxRx.status = RFAL_ERR_LINK_LOSS;
 8005322:	2325      	movs	r3, #37	@ 0x25
 8005324:	e76e      	b.n	8005204 <rfalWorker+0x348>
            else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 8005326:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005328:	06db      	lsls	r3, r3, #27
 800532a:	d598      	bpl.n	800525e <rfalWorker+0x3a2>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 800532c:	0025      	movs	r5, r4
    rfalFIFOStatusUpdate();
 800532e:	f7fe fde7 	bl	8003f00 <rfalFIFOStatusUpdate>
                if( rfalFIFOStatusIsIncompleteByte() )
 8005332:	230e      	movs	r3, #14
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 8005334:	353f      	adds	r5, #63	@ 0x3f
                if( rfalFIFOStatusIsIncompleteByte() )
 8005336:	782a      	ldrb	r2, [r5, #0]
 8005338:	421a      	tst	r2, r3
 800533a:	d100      	bne.n	800533e <rfalWorker+0x482>
 800533c:	e088      	b.n	8005450 <rfalWorker+0x594>
                   gRFAL.TxRx.status = RFAL_ERR_INCOMPLETE_BYTE;
 800533e:	331a      	adds	r3, #26
                   gRFAL.TxRx.status = RFAL_ERR_FRAMING;
 8005340:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 8005342:	2357      	movs	r3, #87	@ 0x57
 8005344:	7623      	strb	r3, [r4, #24]
            tmp = rfalFIFOStatusGetNumBytes();
 8005346:	f7fe fdeb 	bl	8003f20 <rfalFIFOStatusGetNumBytes>
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800534a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            tmp = rfalFIFOStatusGetNumBytes();
 800534c:	0001      	movs	r1, r0
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800534e:	079b      	lsls	r3, r3, #30
 8005350:	d409      	bmi.n	8005366 <rfalWorker+0x4aa>
                if( (uint16_t)(gRFAL.fifo.bytesTotal + tmp) > 0U )
 8005352:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 8005354:	18c2      	adds	r2, r0, r3
 8005356:	b292      	uxth	r2, r2
 8005358:	2a00      	cmp	r2, #0
 800535a:	d004      	beq.n	8005366 <rfalWorker+0x4aa>
                    if( ( tmp > RFAL_CRC_LEN) )  
 800535c:	2802      	cmp	r0, #2
 800535e:	d800      	bhi.n	8005362 <rfalWorker+0x4a6>
 8005360:	e07e      	b.n	8005460 <rfalWorker+0x5a4>
                        tmp -= RFAL_CRC_LEN;
 8005362:	3902      	subs	r1, #2
 8005364:	b289      	uxth	r1, r1
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8005366:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8005368:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 800536a:	188a      	adds	r2, r1, r2
 800536c:	b292      	uxth	r2, r2
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 800536e:	3307      	adds	r3, #7
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 8005370:	8fa5      	ldrh	r5, [r4, #60]	@ 0x3c
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8005372:	8762      	strh	r2, [r4, #58]	@ 0x3a
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8005374:	08db      	lsrs	r3, r3, #3
 8005376:	429a      	cmp	r2, r3
 8005378:	d906      	bls.n	8005388 <rfalWorker+0x4cc>
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 800537a:	1b5b      	subs	r3, r3, r5
 800537c:	b299      	uxth	r1, r3
                if( gRFAL.TxRx.status == RFAL_ERR_BUSY )
 800537e:	8b63      	ldrh	r3, [r4, #26]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d101      	bne.n	8005388 <rfalWorker+0x4cc>
                    gRFAL.TxRx.status = RFAL_ERR_NOMEM;
 8005384:	3b01      	subs	r3, #1
 8005386:	8363      	strh	r3, [r4, #26]
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 8005388:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800538a:	1940      	adds	r0, r0, r5
 800538c:	f001 fb02 	bl	8006994 <st25r3916ReadFifo>
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 8005390:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005392:	2a00      	cmp	r2, #0
 8005394:	d015      	beq.n	80053c2 <rfalWorker+0x506>
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 8005396:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 8005398:	0025      	movs	r5, r4
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	8013      	strh	r3, [r2, #0]
    rfalFIFOStatusUpdate();
 800539e:	f7fe fdaf 	bl	8003f00 <rfalFIFOStatusUpdate>
                if( rfalFIFOStatusIsIncompleteByte() )
 80053a2:	230e      	movs	r3, #14
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 80053a4:	353f      	adds	r5, #63	@ 0x3f
                if( rfalFIFOStatusIsIncompleteByte() )
 80053a6:	782a      	ldrb	r2, [r5, #0]
 80053a8:	421a      	tst	r2, r3
 80053aa:	d00a      	beq.n	80053c2 <rfalWorker+0x506>
    rfalFIFOStatusUpdate();
 80053ac:	f7fe fda8 	bl	8003f00 <rfalFIFOStatusUpdate>
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 80053b0:	2208      	movs	r2, #8
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 80053b2:	782b      	ldrb	r3, [r5, #0]
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 80053b4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 80053b6:	071b      	lsls	r3, r3, #28
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 80053b8:	0f5b      	lsrs	r3, r3, #29
 80053ba:	1ad2      	subs	r2, r2, r3
 80053bc:	880b      	ldrh	r3, [r1, #0]
 80053be:	1a9b      	subs	r3, r3, r2
 80053c0:	800b      	strh	r3, [r1, #0]
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == RFAL_ERR_BUSY) )
 80053c2:	7862      	ldrb	r2, [r4, #1]
 80053c4:	1fd3      	subs	r3, r2, #7
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d83b      	bhi.n	8005442 <rfalWorker+0x586>
 80053ca:	8b65      	ldrh	r5, [r4, #26]
 80053cc:	2d02      	cmp	r5, #2
 80053ce:	d138      	bne.n	8005442 <rfalWorker+0x586>
                uint16_t offset = 0; /* REMARK offset not currently used */
 80053d0:	2300      	movs	r3, #0
 80053d2:	a80b      	add	r0, sp, #44	@ 0x2c
 80053d4:	8003      	strh	r3, [r0, #0]
                ret = rfalIso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 80053d6:	3a08      	subs	r2, #8
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 80053d8:	2386      	movs	r3, #134	@ 0x86
                ret = rfalIso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 80053da:	4256      	negs	r6, r2
 80053dc:	4172      	adcs	r2, r6
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	5ae3      	ldrh	r3, [r4, r3]
                ret = rfalIso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 80053e2:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
 80053e4:	9203      	str	r2, [sp, #12]
 80053e6:	2288      	movs	r2, #136	@ 0x88
 80053e8:	00d2      	lsls	r2, r2, #3
 80053ea:	5aa2      	ldrh	r2, [r4, r2]
 80053ec:	4e3c      	ldr	r6, [pc, #240]	@ (80054e0 <rfalWorker+0x624>)
 80053ee:	9202      	str	r2, [sp, #8]
 80053f0:	59a2      	ldr	r2, [r4, r6]
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 80053f2:	3307      	adds	r3, #7
                ret = rfalIso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 80053f4:	9201      	str	r2, [sp, #4]
 80053f6:	4a3b      	ldr	r2, [pc, #236]	@ (80054e4 <rfalWorker+0x628>)
 80053f8:	9000      	str	r0, [sp, #0]
 80053fa:	58a2      	ldr	r2, [r4, r2]
 80053fc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80053fe:	08db      	lsrs	r3, r3, #3
 8005400:	f006 f84e 	bl	800b4a0 <rfalIso15693VICCDecode>
                if( ((RFAL_ERR_NONE == ret) || (RFAL_ERR_CRC == ret))
 8005404:	2800      	cmp	r0, #0
 8005406:	d001      	beq.n	800540c <rfalWorker+0x550>
 8005408:	2815      	cmp	r0, #21
 800540a:	d10c      	bne.n	8005426 <rfalWorker+0x56a>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800540c:	2387      	movs	r3, #135	@ 0x87
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	58e3      	ldr	r3, [r4, r3]
 8005412:	079b      	lsls	r3, r3, #30
 8005414:	d407      	bmi.n	8005426 <rfalWorker+0x56a>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 8005416:	59a2      	ldr	r2, [r4, r6]
 8005418:	8813      	ldrh	r3, [r2, #0]
 800541a:	0759      	lsls	r1, r3, #29
 800541c:	d103      	bne.n	8005426 <rfalWorker+0x56a>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800541e:	2b0f      	cmp	r3, #15
 8005420:	d901      	bls.n	8005426 <rfalWorker+0x56a>
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 8005422:	3b10      	subs	r3, #16
 8005424:	8013      	strh	r3, [r2, #0]
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 8005426:	0023      	movs	r3, r4
 8005428:	4a2f      	ldr	r2, [pc, #188]	@ (80054e8 <rfalWorker+0x62c>)
 800542a:	331c      	adds	r3, #28
 800542c:	18a2      	adds	r2, r4, r2
 800542e:	cac2      	ldmia	r2!, {r1, r6, r7}
 8005430:	c3c2      	stmia	r3!, {r1, r6, r7}
 8005432:	cac2      	ldmia	r2!, {r1, r6, r7}
 8005434:	c3c2      	stmia	r3!, {r1, r6, r7}
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	601a      	str	r2, [r3, #0]
                gRFAL.TxRx.status = ((ret != RFAL_ERR_NONE) ? ret : RFAL_ERR_BUSY);
 800543a:	2800      	cmp	r0, #0
 800543c:	d000      	beq.n	8005440 <rfalWorker+0x584>
 800543e:	0005      	movs	r5, r0
 8005440:	8365      	strh	r5, [r4, #26]
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 8005442:	2204      	movs	r2, #4
 8005444:	7863      	ldrb	r3, [r4, #1]
 8005446:	4393      	bics	r3, r2
 8005448:	2b09      	cmp	r3, #9
 800544a:	d10f      	bne.n	800546c <rfalWorker+0x5b0>
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800544c:	334f      	adds	r3, #79	@ 0x4f
 800544e:	e5aa      	b.n	8004fa6 <rfalWorker+0xea>
    rfalFIFOStatusUpdate();
 8005450:	f7fe fd56 	bl	8003f00 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_np_lb) != 0U);
 8005454:	782b      	ldrb	r3, [r5, #0]
                else if( rfalFIFOStatusIsMissingPar() )
 8005456:	07db      	lsls	r3, r3, #31
 8005458:	d400      	bmi.n	800545c <rfalWorker+0x5a0>
 800545a:	e772      	b.n	8005342 <rfalWorker+0x486>
                   gRFAL.TxRx.status = RFAL_ERR_FRAMING;
 800545c:	2309      	movs	r3, #9
 800545e:	e76f      	b.n	8005340 <rfalWorker+0x484>
                    else if(gRFAL.fifo.bytesTotal > RFAL_CRC_LEN)                       
 8005460:	2b02      	cmp	r3, #2
 8005462:	d800      	bhi.n	8005466 <rfalWorker+0x5aa>
 8005464:	e77f      	b.n	8005366 <rfalWorker+0x4aa>
                        gRFAL.fifo.bytesTotal -= RFAL_CRC_LEN;
 8005466:	3b02      	subs	r3, #2
 8005468:	8763      	strh	r3, [r4, #58]	@ 0x3a
 800546a:	e77c      	b.n	8005366 <rfalWorker+0x4aa>
            if( gRFAL.TxRx.status != RFAL_ERR_BUSY )
 800546c:	8b63      	ldrh	r3, [r4, #26]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d000      	beq.n	8005474 <rfalWorker+0x5b8>
 8005472:	e6c8      	b.n	8005206 <rfalWorker+0x34a>
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 8005474:	2359      	movs	r3, #89	@ 0x59
 8005476:	7623      	strb	r3, [r4, #24]
            rfalCheckDisableObsMode();
 8005478:	79a3      	ldrb	r3, [r4, #6]
 800547a:	e651      	b.n	8005120 <rfalWorker+0x264>
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800547c:	2032      	movs	r0, #50	@ 0x32
 800547e:	f001 fd0b 	bl	8006e98 <timerCalculateTimer>
 8005482:	6460      	str	r0, [r4, #68]	@ 0x44
            tmp = rfalFIFOStatusGetNumBytes();
 8005484:	f7fe fd4c 	bl	8003f20 <rfalFIFOStatusGetNumBytes>
            gRFAL.fifo.bytesTotal += tmp;
 8005488:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800548a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
            gRFAL.fifo.bytesTotal += tmp;
 800548c:	1882      	adds	r2, r0, r2
 800548e:	b292      	uxth	r2, r2
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8005490:	3307      	adds	r3, #7
            tmp = rfalFIFOStatusGetNumBytes();
 8005492:	0005      	movs	r5, r0
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8005494:	0006      	movs	r6, r0
            gRFAL.fifo.bytesTotal += tmp;
 8005496:	8762      	strh	r2, [r4, #58]	@ 0x3a
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8005498:	08db      	lsrs	r3, r3, #3
 800549a:	429a      	cmp	r2, r3
 800549c:	d902      	bls.n	80054a4 <rfalWorker+0x5e8>
 800549e:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	b29e      	uxth	r6, r3
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 80054a4:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 80054a6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80054a8:	0031      	movs	r1, r6
 80054aa:	18c0      	adds	r0, r0, r3
 80054ac:	f001 fa72 	bl	8006994 <st25r3916ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 80054b0:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 80054b2:	18f3      	adds	r3, r6, r3
 80054b4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
            if( aux < tmp )
 80054b6:	42b5      	cmp	r5, r6
 80054b8:	d904      	bls.n	80054c4 <rfalWorker+0x608>
                st25r3916ReadFifo( NULL, (tmp - aux) );
 80054ba:	1ba9      	subs	r1, r5, r6
 80054bc:	2000      	movs	r0, #0
 80054be:	b289      	uxth	r1, r1
 80054c0:	f001 fa68 	bl	8006994 <st25r3916ReadFifo>
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 80054c4:	0023      	movs	r3, r4
 80054c6:	22ff      	movs	r2, #255	@ 0xff
 80054c8:	333f      	adds	r3, #63	@ 0x3f
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	e6e3      	b.n	8005296 <rfalWorker+0x3da>
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	00004820 	.word	0x00004820
 80054d4:	ffffbfdf 	.word	0xffffbfdf
 80054d8:	08000852 	.word	0x08000852
 80054dc:	00f00004 	.word	0x00f00004
 80054e0:	00000434 	.word	0x00000434
 80054e4:	0000042c 	.word	0x0000042c
 80054e8:	00000424 	.word	0x00000424
            rfalCheckDisableObsMode();
 80054ec:	79a3      	ldrb	r3, [r4, #6]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <rfalWorker+0x63e>
 80054f2:	2140      	movs	r1, #64	@ 0x40
 80054f4:	2001      	movs	r0, #1
 80054f6:	f001 fae0 	bl	8006aba <st25r3916WriteTestRegister>
            rfalCleanupTransceive();
 80054fa:	f7fe fc33 	bl	8003d64 <rfalCleanupTransceive>
            if( gRFAL.TxRx.status == RFAL_ERR_BUSY )
 80054fe:	8b63      	ldrh	r3, [r4, #26]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d000      	beq.n	8005506 <rfalWorker+0x64a>
 8005504:	e635      	b.n	8005172 <rfalWorker+0x2b6>
                gRFAL.TxRx.status = RFAL_ERR_SYSTEM;
 8005506:	3306      	adds	r3, #6
 8005508:	8363      	strh	r3, [r4, #26]
 800550a:	e632      	b.n	8005172 <rfalWorker+0x2b6>
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_PPON2) );
 800550c:	48b6      	ldr	r0, [pc, #728]	@ (80057e8 <rfalWorker+0x92c>)
 800550e:	f001 fc0b 	bl	8006d28 <st25r3916GetInterrupt>
 8005512:	900a      	str	r0, [sp, #40]	@ 0x28
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8005514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <rfalWorker+0x66c>
                if( rfalTimerisExpired( gRFAL.tmr.PPON2 ) )
 800551a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800551c:	f001 fcc2 	bl	8006ea4 <timerIsExpired>
 8005520:	2800      	cmp	r0, #0
 8005522:	d000      	beq.n	8005526 <rfalWorker+0x66a>
 8005524:	e6fd      	b.n	8005322 <rfalWorker+0x466>
 8005526:	e546      	b.n	8004fb6 <rfalWorker+0xfa>
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 8005528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800552a:	04db      	lsls	r3, r3, #19
 800552c:	d501      	bpl.n	8005532 <rfalWorker+0x676>
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800552e:	2353      	movs	r3, #83	@ 0x53
 8005530:	7623      	strb	r3, [r4, #24]
            if( (irqs & ST25R3916_IRQ_MASK_NRE) != 0U )
 8005532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005534:	045b      	lsls	r3, r3, #17
 8005536:	d503      	bpl.n	8005540 <rfalWorker+0x684>
                gRFAL.TxRx.status = RFAL_ERR_TIMEOUT;
 8005538:	2304      	movs	r3, #4
 800553a:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800553c:	3356      	adds	r3, #86	@ 0x56
 800553e:	7623      	strb	r3, [r4, #24]
            if( (irqs & ST25R3916_IRQ_MASK_PPON2) != 0U )
 8005540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	db00      	blt.n	8005548 <rfalWorker+0x68c>
 8005546:	e536      	b.n	8004fb6 <rfalWorker+0xfa>
 8005548:	e6eb      	b.n	8005322 <rfalWorker+0x466>
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC) );
 800554a:	20c0      	movs	r0, #192	@ 0xc0
 800554c:	00c0      	lsls	r0, r0, #3
 800554e:	f001 fbeb 	bl	8006d28 <st25r3916GetInterrupt>
 8005552:	900a      	str	r0, [sp, #40]	@ 0x28
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8005554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	d100      	bne.n	800555c <rfalWorker+0x6a0>
 800555a:	e52c      	b.n	8004fb6 <rfalWorker+0xfa>
            if( (irqs & ST25R3916_IRQ_MASK_CAT) != 0U )
 800555c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800555e:	059b      	lsls	r3, r3, #22
 8005560:	d505      	bpl.n	800556e <rfalWorker+0x6b2>
                gRFAL.TxRx.state = (( gRFAL.TxRx.status != RFAL_ERR_BUSY ) ? RFAL_TXRX_STATE_RX_FAIL : RFAL_TXRX_STATE_RX_DONE);
 8005562:	8b63      	ldrh	r3, [r4, #26]
 8005564:	3b02      	subs	r3, #2
 8005566:	1e5a      	subs	r2, r3, #1
 8005568:	4193      	sbcs	r3, r2
 800556a:	3359      	adds	r3, #89	@ 0x59
 800556c:	e51b      	b.n	8004fa6 <rfalWorker+0xea>
            else if( (irqs & ST25R3916_IRQ_MASK_CAC) != 0U )
 800556e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005570:	055b      	lsls	r3, r3, #21
 8005572:	d400      	bmi.n	8005576 <rfalWorker+0x6ba>
 8005574:	e673      	b.n	800525e <rfalWorker+0x3a2>
               gRFAL.TxRx.status = RFAL_ERR_RF_COLLISION;
 8005576:	231d      	movs	r3, #29
 8005578:	e644      	b.n	8005204 <rfalWorker+0x348>
            gRFAL.TxRx.status = RFAL_ERR_SYSTEM;
 800557a:	2308      	movs	r3, #8
 800557c:	8363      	strh	r3, [r4, #26]
 800557e:	e630      	b.n	80051e2 <rfalWorker+0x326>
    switch( gRFAL.Lm.state )
 8005580:	0023      	movs	r3, r4
 8005582:	335c      	adds	r3, #92	@ 0x5c
 8005584:	7818      	ldrb	r0, [r3, #0]
 8005586:	3801      	subs	r0, #1
 8005588:	280f      	cmp	r0, #15
 800558a:	d900      	bls.n	800558e <rfalWorker+0x6d2>
 800558c:	e513      	b.n	8004fb6 <rfalWorker+0xfa>
 800558e:	f7fa fdd7 	bl	8000140 <__gnu_thumb1_case_shi>
 8005592:	0010      	.short	0x0010
 8005594:	01160021 	.word	0x01160021
 8005598:	00cdfd12 	.word	0x00cdfd12
 800559c:	fd120137 	.word	0xfd120137
 80055a0:	fd12fd12 	.word	0xfd12fd12
 80055a4:	fd12fd12 	.word	0xfd12fd12
 80055a8:	01940194 	.word	0x01940194
 80055ac:	013701ea 	.word	0x013701ea
 80055b0:	0194      	.short	0x0194
            irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EON ) );
 80055b2:	2580      	movs	r5, #128	@ 0x80
 80055b4:	016d      	lsls	r5, r5, #5
 80055b6:	0028      	movs	r0, r5
 80055b8:	f001 fbb6 	bl	8006d28 <st25r3916GetInterrupt>
 80055bc:	900b      	str	r0, [sp, #44]	@ 0x2c
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 80055be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d100      	bne.n	80055c6 <rfalWorker+0x70a>
 80055c4:	e4f7      	b.n	8004fb6 <rfalWorker+0xfa>
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 80055c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055c8:	422b      	tst	r3, r5
 80055ca:	d100      	bne.n	80055ce <rfalWorker+0x712>
 80055cc:	e4f3      	b.n	8004fb6 <rfalWorker+0xfa>
                rfalListenSetState( RFAL_LM_STATE_IDLE );
 80055ce:	2002      	movs	r0, #2
 80055d0:	f7ff fa72 	bl	8004ab8 <rfalListenSetState>
            irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RXE_PTA ) );
 80055d4:	4885      	ldr	r0, [pc, #532]	@ (80057ec <rfalWorker+0x930>)
 80055d6:	f001 fba7 	bl	8006d28 <st25r3916GetInterrupt>
 80055da:	900b      	str	r0, [sp, #44]	@ 0x2c
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 80055dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d100      	bne.n	80055e4 <rfalWorker+0x728>
 80055e2:	e4e8      	b.n	8004fb6 <rfalWorker+0xfa>
            if( (irqs & ST25R3916_IRQ_MASK_NFCT) != 0U )
 80055e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055e6:	05db      	lsls	r3, r3, #23
 80055e8:	d513      	bpl.n	8005612 <rfalWorker+0x756>
                st25r3916ReadRegister( ST25R3916_REG_NFCIP1_BIT_RATE, &newBr );
 80055ea:	2024      	movs	r0, #36	@ 0x24
 80055ec:	a90a      	add	r1, sp, #40	@ 0x28
 80055ee:	f001 f99e 	bl	800692e <st25r3916ReadRegister>
                newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 80055f2:	2220      	movs	r2, #32
 80055f4:	ab02      	add	r3, sp, #8
 80055f6:	189b      	adds	r3, r3, r2
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	091b      	lsrs	r3, r3, #4
                if (newBr > ST25R3916_REG_BIT_RATE_rxrate_424)
 80055fc:	1c1a      	adds	r2, r3, #0
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d900      	bls.n	8005604 <rfalWorker+0x748>
 8005602:	2202      	movs	r2, #2
                newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 8005604:	2120      	movs	r1, #32
 8005606:	ab02      	add	r3, sp, #8
 8005608:	185b      	adds	r3, r3, r1
 800560a:	701a      	strb	r2, [r3, #0]
                gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 800560c:	0023      	movs	r3, r4
 800560e:	336c      	adds	r3, #108	@ 0x6c
 8005610:	701a      	strb	r2, [r3, #0]
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && (!gRFAL.Lm.dataFlag) )
 8005612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005614:	051b      	lsls	r3, r3, #20
 8005616:	d508      	bpl.n	800562a <rfalWorker+0x76e>
 8005618:	0023      	movs	r3, r4
 800561a:	337c      	adds	r3, #124	@ 0x7c
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d103      	bne.n	800562a <rfalWorker+0x76e>
                rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8005622:	2001      	movs	r0, #1
                    rfalListenSetState( RFAL_LM_STATE_ACTIVE_Ax );
 8005624:	f7ff fa48 	bl	8004ab8 <rfalListenSetState>
            break;
 8005628:	e4c5      	b.n	8004fb6 <rfalWorker+0xfa>
            else if( ((irqs & ST25R3916_IRQ_MASK_WU_F) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 800562a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	d506      	bpl.n	800563e <rfalWorker+0x782>
 8005630:	0023      	movs	r3, r4
 8005632:	336c      	adds	r3, #108	@ 0x6c
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2bff      	cmp	r3, #255	@ 0xff
 8005638:	d001      	beq.n	800563e <rfalWorker+0x782>
                rfalListenSetState( RFAL_LM_STATE_READY_F );
 800563a:	2005      	movs	r0, #5
 800563c:	e7f2      	b.n	8005624 <rfalWorker+0x768>
            else if( ((irqs & ST25R3916_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 800563e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005640:	06db      	lsls	r3, r3, #27
 8005642:	d55a      	bpl.n	80056fa <rfalWorker+0x83e>
 8005644:	0023      	movs	r3, r4
 8005646:	336c      	adds	r3, #108	@ 0x6c
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2bff      	cmp	r3, #255	@ 0xff
 800564c:	d055      	beq.n	80056fa <rfalWorker+0x83e>
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1 ) );
 800564e:	4868      	ldr	r0, [pc, #416]	@ (80057f0 <rfalWorker+0x934>)
 8005650:	f001 fb6a 	bl	8006d28 <st25r3916GetInterrupt>
 8005654:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U))
 8005656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	d405      	bmi.n	8005668 <rfalWorker+0x7ac>
 800565c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800565e:	025b      	lsls	r3, r3, #9
 8005660:	d402      	bmi.n	8005668 <rfalWorker+0x7ac>
 8005662:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005664:	02db      	lsls	r3, r3, #11
 8005666:	d50a      	bpl.n	800567e <rfalWorker+0x7c2>
                    st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8005668:	20db      	movs	r0, #219	@ 0xdb
 800566a:	f001 f9f6 	bl	8006a5a <st25r3916ExecuteCommand>
                    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800566e:	20d1      	movs	r0, #209	@ 0xd1
 8005670:	f001 f9f3 	bl	8006a5a <st25r3916ExecuteCommand>
                    st25r3916TxOff();
 8005674:	2108      	movs	r1, #8
 8005676:	2002      	movs	r0, #2
 8005678:	f001 fa3b 	bl	8006af2 <st25r3916ClrRegisterBits>
                    break; /* A bad reception occurred, remain in same state */
 800567c:	e49b      	b.n	8004fb6 <rfalWorker+0xfa>
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 800567e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005680:	049b      	lsls	r3, r3, #18
 8005682:	d503      	bpl.n	800568c <rfalWorker+0x7d0>
                    st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 8005684:	21ba      	movs	r1, #186	@ 0xba
 8005686:	2003      	movs	r0, #3
 8005688:	f001 f95e 	bl	8006948 <st25r3916WriteRegister>
                *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 800568c:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 800568e:	f000 ffcc 	bl	800662a <st25r3916GetNumFIFOBytes>
                st25r3916ReadFifo( gRFAL.Lm.rxBuf, RFAL_MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 8005692:	0023      	movs	r3, r4
                *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 8005694:	8028      	strh	r0, [r5, #0]
                st25r3916ReadFifo( gRFAL.Lm.rxBuf, RFAL_MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 8005696:	3374      	adds	r3, #116	@ 0x74
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800569c:	3307      	adds	r3, #7
 800569e:	8812      	ldrh	r2, [r2, #0]
 80056a0:	08db      	lsrs	r3, r3, #3
 80056a2:	1c19      	adds	r1, r3, #0
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d900      	bls.n	80056aa <rfalWorker+0x7ee>
 80056a8:	1c11      	adds	r1, r2, #0
 80056aa:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80056ac:	b289      	uxth	r1, r1
 80056ae:	f001 f971 	bl	8006994 <st25r3916ReadFifo>
                if( (*gRFAL.Lm.rxLen > RFAL_CRC_LEN) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 80056b2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80056b4:	881a      	ldrh	r2, [r3, #0]
 80056b6:	2a02      	cmp	r2, #2
 80056b8:	d90a      	bls.n	80056d0 <rfalWorker+0x814>
 80056ba:	0023      	movs	r3, r4
 80056bc:	336c      	adds	r3, #108	@ 0x6c
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <rfalWorker+0x814>
                    if( rfalCrcCalculateCcitt( RFAL_ISO14443A_CRC_INTVAL, gRFAL.Lm.rxBuf, *gRFAL.Lm.rxLen ) != 0U )
 80056c4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80056c6:	484b      	ldr	r0, [pc, #300]	@ (80057f4 <rfalWorker+0x938>)
 80056c8:	f005 fd90 	bl	800b1ec <rfalCrcCalculateCcitt>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d1cb      	bne.n	8005668 <rfalWorker+0x7ac>
                *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 80056d0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80056d2:	8813      	ldrh	r3, [r2, #0]
 80056d4:	1c19      	adds	r1, r3, #0
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d900      	bls.n	80056dc <rfalWorker+0x820>
 80056da:	2102      	movs	r1, #2
 80056dc:	1a5b      	subs	r3, r3, r1
                *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	8013      	strh	r3, [r2, #0]
                gRFAL.Lm.dataFlag = true;
 80056e2:	0023      	movs	r3, r4
 80056e4:	2001      	movs	r0, #1
 80056e6:	337c      	adds	r3, #124	@ 0x7c
 80056e8:	7018      	strb	r0, [r3, #0]
                rfalCheckDisableObsMode();
 80056ea:	79a3      	ldrb	r3, [r4, #6]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d100      	bne.n	80056f2 <rfalWorker+0x836>
 80056f0:	e461      	b.n	8004fb6 <rfalWorker+0xfa>
 80056f2:	2140      	movs	r1, #64	@ 0x40
 80056f4:	f001 f9e1 	bl	8006aba <st25r3916WriteTestRegister>
 80056f8:	e45d      	b.n	8004fb6 <rfalWorker+0xfa>
            else if( ((irqs & ST25R3916_IRQ_MASK_RXE_PTA) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 80056fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	d400      	bmi.n	8005702 <rfalWorker+0x846>
 8005700:	e459      	b.n	8004fb6 <rfalWorker+0xfa>
 8005702:	0023      	movs	r3, r4
 8005704:	336c      	adds	r3, #108	@ 0x6c
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d000      	beq.n	800570e <rfalWorker+0x852>
 800570c:	e453      	b.n	8004fb6 <rfalWorker+0xfa>
                if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 800570e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005710:	055b      	lsls	r3, r3, #21
 8005712:	d400      	bmi.n	8005716 <rfalWorker+0x85a>
 8005714:	e44f      	b.n	8004fb6 <rfalWorker+0xfa>
                    st25r3916ReadRegister( ST25R3916_REG_PASSIVE_TARGET_STATUS, &tmp );
 8005716:	ac0a      	add	r4, sp, #40	@ 0x28
 8005718:	0021      	movs	r1, r4
 800571a:	2021      	movs	r0, #33	@ 0x21
 800571c:	f001 f907 	bl	800692e <st25r3916ReadRegister>
                    if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_idle )
 8005720:	7823      	ldrb	r3, [r4, #0]
                        rfalListenSetState( RFAL_LM_STATE_READY_A );
 8005722:	2003      	movs	r0, #3
                    if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_idle )
 8005724:	2b01      	cmp	r3, #1
 8005726:	d800      	bhi.n	800572a <rfalWorker+0x86e>
 8005728:	e445      	b.n	8004fb6 <rfalWorker+0xfa>
 800572a:	e77b      	b.n	8005624 <rfalWorker+0x768>
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF) );
 800572c:	4832      	ldr	r0, [pc, #200]	@ (80057f8 <rfalWorker+0x93c>)
 800572e:	f001 fafb 	bl	8006d28 <st25r3916GetInterrupt>
 8005732:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 8005734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <rfalWorker+0x882>
 800573a:	f7ff fc3c 	bl	8004fb6 <rfalWorker+0xfa>
                if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 800573e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005740:	051b      	lsls	r3, r3, #20
 8005742:	d500      	bpl.n	8005746 <rfalWorker+0x88a>
 8005744:	e76d      	b.n	8005622 <rfalWorker+0x766>
                else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 8005746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005748:	06db      	lsls	r3, r3, #27
 800574a:	d535      	bpl.n	80057b8 <rfalWorker+0x8fc>
                    irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 800574c:	20b0      	movs	r0, #176	@ 0xb0
 800574e:	0400      	lsls	r0, r0, #16
 8005750:	f001 faea 	bl	8006d28 <st25r3916GetInterrupt>
 8005754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005756:	4318      	orrs	r0, r3
 8005758:	900b      	str	r0, [sp, #44]	@ 0x2c
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U) )
 800575a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800575c:	021b      	lsls	r3, r3, #8
 800575e:	d402      	bmi.n	8005766 <rfalWorker+0x8aa>
 8005760:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005762:	02db      	lsls	r3, r3, #11
 8005764:	d507      	bpl.n	8005776 <rfalWorker+0x8ba>
                    st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8005766:	20db      	movs	r0, #219	@ 0xdb
 8005768:	f001 f977 	bl	8006a5a <st25r3916ExecuteCommand>
                    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800576c:	20d1      	movs	r0, #209	@ 0xd1
 800576e:	f001 f974 	bl	8006a5a <st25r3916ExecuteCommand>
 8005772:	f7ff fc20 	bl	8004fb6 <rfalWorker+0xfa>
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 8005776:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 8005778:	f000 ff57 	bl	800662a <st25r3916GetNumFIFOBytes>
                    st25r3916ReadFifo( gRFAL.Lm.rxBuf, RFAL_MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 800577c:	0023      	movs	r3, r4
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 800577e:	8028      	strh	r0, [r5, #0]
                    st25r3916ReadFifo( gRFAL.Lm.rxBuf, RFAL_MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 8005780:	3374      	adds	r3, #116	@ 0x74
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8005786:	3307      	adds	r3, #7
 8005788:	8812      	ldrh	r2, [r2, #0]
 800578a:	08db      	lsrs	r3, r3, #3
 800578c:	1c19      	adds	r1, r3, #0
 800578e:	4293      	cmp	r3, r2
 8005790:	d900      	bls.n	8005794 <rfalWorker+0x8d8>
 8005792:	1c11      	adds	r1, r2, #0
 8005794:	b289      	uxth	r1, r1
 8005796:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005798:	f001 f8fc 	bl	8006994 <st25r3916ReadFifo>
                    *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 800579c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800579e:	8813      	ldrh	r3, [r2, #0]
 80057a0:	1c19      	adds	r1, r3, #0
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d900      	bls.n	80057a8 <rfalWorker+0x8ec>
 80057a6:	2102      	movs	r1, #2
 80057a8:	1a5b      	subs	r3, r3, r1
                    *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	8013      	strh	r3, [r2, #0]
                    gRFAL.Lm.dataFlag = true;
 80057ae:	2301      	movs	r3, #1
 80057b0:	347c      	adds	r4, #124	@ 0x7c
 80057b2:	7023      	strb	r3, [r4, #0]
 80057b4:	f7ff fbff 	bl	8004fb6 <rfalWorker+0xfa>
                else if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 80057b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057ba:	f7ff fbfc 	bl	8004fb6 <rfalWorker+0xfa>
                irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_A  ) );
 80057be:	480f      	ldr	r0, [pc, #60]	@ (80057fc <rfalWorker+0x940>)
 80057c0:	f001 fab2 	bl	8006d28 <st25r3916GetInterrupt>
 80057c4:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 80057c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <rfalWorker+0x914>
 80057cc:	f7ff fbf3 	bl	8004fb6 <rfalWorker+0xfa>
                if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 80057d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057d2:	051b      	lsls	r3, r3, #20
 80057d4:	d500      	bpl.n	80057d8 <rfalWorker+0x91c>
 80057d6:	e724      	b.n	8005622 <rfalWorker+0x766>
                else if( (irqs & ST25R3916_IRQ_MASK_WU_A) != 0U )
 80057d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                    rfalListenSetState( RFAL_LM_STATE_ACTIVE_A );
 80057da:	2006      	movs	r0, #6
                else if( (irqs & ST25R3916_IRQ_MASK_WU_A) != 0U )
 80057dc:	01db      	lsls	r3, r3, #7
 80057de:	d401      	bmi.n	80057e4 <rfalWorker+0x928>
 80057e0:	f7ff fbe9 	bl	8004fb6 <rfalWorker+0xfa>
 80057e4:	e71e      	b.n	8005624 <rfalWorker+0x768>
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	80005000 	.word	0x80005000
 80057ec:	18000910 	.word	0x18000910
 80057f0:	08f00810 	.word	0x08f00810
 80057f4:	00006363 	.word	0x00006363
 80057f8:	08000810 	.word	0x08000810
 80057fc:	01000800 	.word	0x01000800
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF) );
 8005800:	2081      	movs	r0, #129	@ 0x81
 8005802:	0100      	lsls	r0, r0, #4
 8005804:	f001 fa90 	bl	8006d28 <st25r3916GetInterrupt>
 8005808:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 800580a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <rfalWorker+0x958>
 8005810:	f7ff fbd1 	bl	8004fb6 <rfalWorker+0xfa>
                if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 8005814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005816:	051b      	lsls	r3, r3, #20
 8005818:	d500      	bpl.n	800581c <rfalWorker+0x960>
 800581a:	e702      	b.n	8005622 <rfalWorker+0x766>
                else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 800581c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800581e:	06db      	lsls	r3, r3, #27
 8005820:	d401      	bmi.n	8005826 <rfalWorker+0x96a>
 8005822:	f7ff fbc8 	bl	8004fb6 <rfalWorker+0xfa>
                    irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 8005826:	20f0      	movs	r0, #240	@ 0xf0
 8005828:	0400      	lsls	r0, r0, #16
 800582a:	f001 fa7d 	bl	8006d28 <st25r3916GetInterrupt>
 800582e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 8005830:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
                    irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 8005832:	4318      	orrs	r0, r3
 8005834:	900b      	str	r0, [sp, #44]	@ 0x2c
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 8005836:	f000 fef8 	bl	800662a <st25r3916GetNumFIFOBytes>
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U)    || 
 800583a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 800583c:	8028      	strh	r0, [r5, #0]
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U)    || 
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	d409      	bmi.n	8005856 <rfalWorker+0x99a>
 8005842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005844:	02db      	lsls	r3, r3, #11
 8005846:	d406      	bmi.n	8005856 <rfalWorker+0x99a>
                        ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || (*gRFAL.Lm.rxLen <= RFAL_CRC_LEN)  )
 8005848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U)    || 
 800584a:	025b      	lsls	r3, r3, #9
 800584c:	d403      	bmi.n	8005856 <rfalWorker+0x99a>
                        ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || (*gRFAL.Lm.rxLen <= RFAL_CRC_LEN)  )
 800584e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8005850:	8813      	ldrh	r3, [r2, #0]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d81e      	bhi.n	8005894 <rfalWorker+0x9d8>
                        *gRFAL.Lm.rxLen = 0;
 8005856:	2200      	movs	r2, #0
 8005858:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
                        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800585a:	20db      	movs	r0, #219	@ 0xdb
                        *gRFAL.Lm.rxLen = 0;
 800585c:	801a      	strh	r2, [r3, #0]
                        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800585e:	f001 f8fc 	bl	8006a5a <st25r3916ExecuteCommand>
                        st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8005862:	20d1      	movs	r0, #209	@ 0xd1
 8005864:	f001 f8f9 	bl	8006a5a <st25r3916ExecuteCommand>
                        if( gRFAL.Lm.state == RFAL_LM_STATE_ACTIVE_Ax )
 8005868:	0023      	movs	r3, r4
 800586a:	335c      	adds	r3, #92	@ 0x5c
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b0f      	cmp	r3, #15
 8005870:	d10c      	bne.n	800588c <rfalWorker+0x9d0>
                            rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gRFAL.Lm.rxBuf, gRFAL.Lm.rxBufLen, gRFAL.Lm.rxLen );
 8005872:	0023      	movs	r3, r4
 8005874:	3374      	adds	r3, #116	@ 0x74
 8005876:	881a      	ldrh	r2, [r3, #0]
 8005878:	200c      	movs	r0, #12
 800587a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800587c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800587e:	f7ff f8b9 	bl	80049f4 <rfalListenSleepStart>
                        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_RXE );
 8005882:	2010      	movs	r0, #16
 8005884:	f001 fa89 	bl	8006d9a <st25r3916DisableInterrupts>
                        break;
 8005888:	f7ff fb95 	bl	8004fb6 <rfalWorker+0xfa>
                            rfalListenSetState( RFAL_LM_STATE_IDLE );
 800588c:	2002      	movs	r0, #2
 800588e:	f7ff f913 	bl	8004ab8 <rfalListenSetState>
 8005892:	e7f6      	b.n	8005882 <rfalWorker+0x9c6>
                    *gRFAL.Lm.rxLen -= RFAL_CRC_LEN;
 8005894:	3b02      	subs	r3, #2
 8005896:	b29b      	uxth	r3, r3
 8005898:	8013      	strh	r3, [r2, #0]
                    st25r3916ReadFifo( gRFAL.Lm.rxBuf, RFAL_MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );                    
 800589a:	0022      	movs	r2, r4
 800589c:	3274      	adds	r2, #116	@ 0x74
 800589e:	8812      	ldrh	r2, [r2, #0]
 80058a0:	3207      	adds	r2, #7
 80058a2:	08d2      	lsrs	r2, r2, #3
 80058a4:	1c11      	adds	r1, r2, #0
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d900      	bls.n	80058ac <rfalWorker+0x9f0>
 80058aa:	1c19      	adds	r1, r3, #0
 80058ac:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80058ae:	b289      	uxth	r1, r1
 80058b0:	f001 f870 	bl	8006994 <st25r3916ReadFifo>
                    *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 80058b4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80058b6:	8813      	ldrh	r3, [r2, #0]
 80058b8:	e777      	b.n	80057aa <rfalWorker+0x8ee>
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RXE_PTA ) );
 80058ba:	48a9      	ldr	r0, [pc, #676]	@ (8005b60 <rfalWorker+0xca4>)
 80058bc:	f001 fa34 	bl	8006d28 <st25r3916GetInterrupt>
 80058c0:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 80058c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <rfalWorker+0xa10>
 80058c8:	f7ff fb75 	bl	8004fb6 <rfalWorker+0xfa>
                if( (irqs & ST25R3916_IRQ_MASK_NFCT) != 0U )
 80058cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058ce:	05db      	lsls	r3, r3, #23
 80058d0:	d513      	bpl.n	80058fa <rfalWorker+0xa3e>
                    st25r3916ReadRegister( ST25R3916_REG_NFCIP1_BIT_RATE, &newBr );
 80058d2:	2024      	movs	r0, #36	@ 0x24
 80058d4:	a90a      	add	r1, sp, #40	@ 0x28
 80058d6:	f001 f82a 	bl	800692e <st25r3916ReadRegister>
                    newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 80058da:	2220      	movs	r2, #32
 80058dc:	ab02      	add	r3, sp, #8
 80058de:	189b      	adds	r3, r3, r2
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	091b      	lsrs	r3, r3, #4
                    if (newBr > ST25R3916_REG_BIT_RATE_rxrate_424)
 80058e4:	1c1a      	adds	r2, r3, #0
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d900      	bls.n	80058ec <rfalWorker+0xa30>
 80058ea:	2202      	movs	r2, #2
                    newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 80058ec:	2120      	movs	r1, #32
 80058ee:	ab02      	add	r3, sp, #8
 80058f0:	185b      	adds	r3, r3, r1
 80058f2:	701a      	strb	r2, [r3, #0]
                    gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 80058f4:	0023      	movs	r3, r4
 80058f6:	336c      	adds	r3, #108	@ 0x6c
 80058f8:	701a      	strb	r2, [r3, #0]
                if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 80058fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058fc:	051b      	lsls	r3, r3, #20
 80058fe:	d500      	bpl.n	8005902 <rfalWorker+0xa46>
 8005900:	e68f      	b.n	8005622 <rfalWorker+0x766>
                else if( ((irqs & ST25R3916_IRQ_MASK_WU_F) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8005902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	d505      	bpl.n	8005914 <rfalWorker+0xa58>
 8005908:	0023      	movs	r3, r4
 800590a:	336c      	adds	r3, #108	@ 0x6c
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2bff      	cmp	r3, #255	@ 0xff
 8005910:	d000      	beq.n	8005914 <rfalWorker+0xa58>
 8005912:	e692      	b.n	800563a <rfalWorker+0x77e>
                else if( ((irqs & ST25R3916_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8005914:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005916:	06db      	lsls	r3, r3, #27
 8005918:	d508      	bpl.n	800592c <rfalWorker+0xa70>
 800591a:	0023      	movs	r3, r4
 800591c:	336c      	adds	r3, #108	@ 0x6c
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2bff      	cmp	r3, #255	@ 0xff
 8005922:	d003      	beq.n	800592c <rfalWorker+0xa70>
                    *gRFAL.Lm.rxLen = 0;
 8005924:	2200      	movs	r2, #0
 8005926:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	e71c      	b.n	8005766 <rfalWorker+0x8aa>
                else if( ((irqs & ST25R3916_IRQ_MASK_RXE_PTA) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 800592c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	d401      	bmi.n	8005936 <rfalWorker+0xa7a>
 8005932:	f7ff fb40 	bl	8004fb6 <rfalWorker+0xfa>
 8005936:	0023      	movs	r3, r4
 8005938:	336c      	adds	r3, #108	@ 0x6c
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <rfalWorker+0xa88>
 8005940:	f7ff fb39 	bl	8004fb6 <rfalWorker+0xfa>
                    if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 8005944:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005946:	055b      	lsls	r3, r3, #21
 8005948:	d401      	bmi.n	800594e <rfalWorker+0xa92>
 800594a:	f7ff fb34 	bl	8004fb6 <rfalWorker+0xfa>
                        st25r3916ReadRegister( ST25R3916_REG_PASSIVE_TARGET_STATUS, &tmp );
 800594e:	ac0a      	add	r4, sp, #40	@ 0x28
 8005950:	0021      	movs	r1, r4
 8005952:	2021      	movs	r0, #33	@ 0x21
 8005954:	f000 ffeb 	bl	800692e <st25r3916ReadRegister>
                        if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_halt )
 8005958:	7823      	ldrb	r3, [r4, #0]
                            rfalListenSetState( RFAL_LM_STATE_READY_Ax );
 800595a:	200e      	movs	r0, #14
                        if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_halt )
 800595c:	2b09      	cmp	r3, #9
 800595e:	d801      	bhi.n	8005964 <rfalWorker+0xaa8>
 8005960:	f7ff fb29 	bl	8004fb6 <rfalWorker+0xfa>
 8005964:	e65e      	b.n	8005624 <rfalWorker+0x768>
                irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_A_X  ) );
 8005966:	487f      	ldr	r0, [pc, #508]	@ (8005b64 <rfalWorker+0xca8>)
 8005968:	f001 f9de 	bl	8006d28 <st25r3916GetInterrupt>
 800596c:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 800596e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <rfalWorker+0xabc>
 8005974:	f7ff fb1f 	bl	8004fb6 <rfalWorker+0xfa>
                if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 8005978:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800597a:	051b      	lsls	r3, r3, #20
 800597c:	d500      	bpl.n	8005980 <rfalWorker+0xac4>
 800597e:	e650      	b.n	8005622 <rfalWorker+0x766>
                else if( (irqs & ST25R3916_IRQ_MASK_WU_A_X) != 0U )
 8005980:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005982:	019b      	lsls	r3, r3, #6
 8005984:	d401      	bmi.n	800598a <rfalWorker+0xace>
 8005986:	f7ff fb16 	bl	8004fb6 <rfalWorker+0xfa>
                    rfalListenSetState( RFAL_LM_STATE_ACTIVE_Ax );
 800598a:	200f      	movs	r0, #15
 800598c:	e64a      	b.n	8005624 <rfalWorker+0x768>
    if( gRFAL.state != RFAL_STATE_WUM )
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 800598e:	0025      	movs	r5, r4
 8005990:	3580      	adds	r5, #128	@ 0x80
 8005992:	782b      	ldrb	r3, [r5, #0]
 8005994:	3b01      	subs	r3, #1
 8005996:	2b01      	cmp	r3, #1
 8005998:	d901      	bls.n	800599e <rfalWorker+0xae2>
 800599a:	f7ff fb0c 	bl	8004fb6 <rfalWorker+0xfa>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP ) );
 800599e:	20f0      	movs	r0, #240	@ 0xf0
 80059a0:	0300      	lsls	r0, r0, #12
 80059a2:	f001 f9c1 	bl	8006d28 <st25r3916GetInterrupt>
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d101      	bne.n	80059ae <rfalWorker+0xaf2>
 80059aa:	f7ff fb04 	bl	8004fb6 <rfalWorker+0xfa>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3916_IRQ_MASK_WAM) != 0U)
 80059ae:	0343      	lsls	r3, r0, #13
 80059b0:	d505      	bpl.n	80059be <rfalWorker+0xb02>
            {
                gRFAL.wum.info.indAmp.irqWu = true;
 80059b2:	0023      	movs	r3, r4
 80059b4:	2201      	movs	r2, #1
 80059b6:	33a4      	adds	r3, #164	@ 0xa4
 80059b8:	701a      	strb	r2, [r3, #0]
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 80059ba:	2302      	movs	r3, #2
 80059bc:	702b      	strb	r3, [r5, #0]
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WPH) != 0U)
 80059be:	0383      	lsls	r3, r0, #14
 80059c0:	d507      	bpl.n	80059d2 <rfalWorker+0xb16>
            {
                gRFAL.wum.info.indPha.irqWu = true;
 80059c2:	0023      	movs	r3, r4
 80059c4:	2201      	movs	r2, #1
 80059c6:	33a6      	adds	r3, #166	@ 0xa6
 80059c8:	701a      	strb	r2, [r3, #0]
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 80059ca:	0023      	movs	r3, r4
 80059cc:	1892      	adds	r2, r2, r2
 80059ce:	3380      	adds	r3, #128	@ 0x80
 80059d0:	701a      	strb	r2, [r3, #0]
            }
            
        #ifdef ST25R3916
            if((irqs & ST25R3916_IRQ_MASK_WCAP) != 0U)
 80059d2:	03c3      	lsls	r3, r0, #15
 80059d4:	d507      	bpl.n	80059e6 <rfalWorker+0xb2a>
            {
                gRFAL.wum.info.cap.irqWu = true;
 80059d6:	0023      	movs	r3, r4
 80059d8:	2201      	movs	r2, #1
 80059da:	33a8      	adds	r3, #168	@ 0xa8
 80059dc:	701a      	strb	r2, [r3, #0]
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 80059de:	0023      	movs	r3, r4
 80059e0:	1892      	adds	r2, r2, r2
 80059e2:	3380      	adds	r3, #128	@ 0x80
 80059e4:	701a      	strb	r2, [r3, #0]
            }
        #endif /* ST25R3916 */
            
            if((irqs & ST25R3916_IRQ_MASK_WT) != 0U)
 80059e6:	0300      	lsls	r0, r0, #12
 80059e8:	d401      	bmi.n	80059ee <rfalWorker+0xb32>
 80059ea:	f7ff fae4 	bl	8004fb6 <rfalWorker+0xfa>
            {
                gRFAL.wum.info.irqWut = true;
 80059ee:	0023      	movs	r3, r4
 80059f0:	2001      	movs	r0, #1
 80059f2:	33a2      	adds	r3, #162	@ 0xa2
 80059f4:	7018      	strb	r0, [r3, #0]
                
                /*******************************************************************************/
                if( gRFAL.wum.cfg.swTagDetect )
 80059f6:	0023      	movs	r3, r4
 80059f8:	3384      	adds	r3, #132	@ 0x84
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <rfalWorker+0xb48>
 8005a00:	f7ff fad9 	bl	8004fb6 <rfalWorker+0xfa>
                {
                    woke = false;
                    
                    /* Enable Ready mode and wait the settle time if AAT is used */
                    if( st25r3916IsAATOn() )
 8005a04:	2220      	movs	r2, #32
 8005a06:	0011      	movs	r1, r2
 8005a08:	f001 f8c8 	bl	8006b9c <st25r3916CheckReg>
 8005a0c:	1e02      	subs	r2, r0, #0
 8005a0e:	d100      	bne.n	8005a12 <rfalWorker+0xb56>
 8005a10:	e09c      	b.n	8005b4c <rfalWorker+0xc90>
                    {
                        st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), ST25R3916_REG_OP_CONTROL_en );
 8005a12:	2280      	movs	r2, #128	@ 0x80
 8005a14:	2184      	movs	r1, #132	@ 0x84
 8005a16:	2002      	movs	r0, #2
 8005a18:	f001 f8a5 	bl	8006b66 <st25r3916ChangeRegisterBits>
                        platformDelay( RFAL_ST25R3916_AAT_SETTLE );
 8005a1c:	2005      	movs	r0, #5
 8005a1e:	f001 fb29 	bl	8007074 <HAL_Delay>
                        st25r3916OscOn();
                    }
                    
                    
                    /*******************************************************************************/
                    if( gRFAL.wum.cfg.indAmp.enabled )
 8005a22:	0023      	movs	r3, r4
 8005a24:	3386      	adds	r3, #134	@ 0x86
 8005a26:	781d      	ldrb	r5, [r3, #0]
 8005a28:	2d00      	cmp	r5, #0
 8005a2a:	d041      	beq.n	8005ab0 <rfalWorker+0xbf4>
                    {
                        /* Perform amplitude measurement */
                        st25r3916MeasureAmplitude( &reg );
 8005a2c:	ae0b      	add	r6, sp, #44	@ 0x2c
 8005a2e:	0030      	movs	r0, r6
 8005a30:	f000 fd46 	bl	80064c0 <st25r3916MeasureAmplitude>
                        
                        /* Update last measurement info */
                        gRFAL.wum.info.indAmp.lastMeas = reg;
 8005a34:	0023      	movs	r3, r4
 8005a36:	7831      	ldrb	r1, [r6, #0]
 8005a38:	33a3      	adds	r3, #163	@ 0xa3
                        
                        /* Convert inputs to TD format */
                        value = rfalConvTDFormat( reg );
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indAmp.delta );
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indAmp.fracDelta );
 8005a3a:	0022      	movs	r2, r4
                        gRFAL.wum.info.indAmp.lastMeas = reg;
 8005a3c:	7019      	strb	r1, [r3, #0]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indAmp.delta );
 8005a3e:	0023      	movs	r3, r4
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indAmp.fracDelta );
 8005a40:	2003      	movs	r0, #3
 8005a42:	3288      	adds	r2, #136	@ 0x88
 8005a44:	7812      	ldrb	r2, [r2, #0]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indAmp.delta );
 8005a46:	3387      	adds	r3, #135	@ 0x87
 8005a48:	781b      	ldrb	r3, [r3, #0]
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indAmp.fracDelta );
 8005a4a:	4002      	ands	r2, r0
 8005a4c:	0192      	lsls	r2, r2, #6
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indAmp.delta );
 8005a4e:	021b      	lsls	r3, r3, #8
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indAmp.fracDelta );
 8005a50:	4313      	orrs	r3, r2
                        
                        /* Set first measurement as reference */
                        if( gRFAL.wum.cfg.indAmp.reference == 0U )
 8005a52:	0022      	movs	r2, r4
 8005a54:	328a      	adds	r2, #138	@ 0x8a
 8005a56:	8810      	ldrh	r0, [r2, #0]
                        value = rfalConvTDFormat( reg );
 8005a58:	0209      	lsls	r1, r1, #8
                        if( gRFAL.wum.cfg.indAmp.reference == 0U )
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d100      	bne.n	8005a60 <rfalWorker+0xba4>
                        {
                            gRFAL.wum.cfg.indAmp.reference = value;
 8005a5e:	8011      	strh	r1, [r2, #0]
                        }
                        
                        /* Check if device should be woken */
                        if( ( value >= (gRFAL.wum.cfg.indAmp.reference + delta) ) || 
 8005a60:	0022      	movs	r2, r4
 8005a62:	328a      	adds	r2, #138	@ 0x8a
 8005a64:	8810      	ldrh	r0, [r2, #0]
 8005a66:	18c2      	adds	r2, r0, r3
 8005a68:	4291      	cmp	r1, r2
 8005a6a:	da02      	bge.n	8005a72 <rfalWorker+0xbb6>
                            ( value <= (gRFAL.wum.cfg.indAmp.reference - delta) )   )
 8005a6c:	1ac3      	subs	r3, r0, r3
                        if( ( value >= (gRFAL.wum.cfg.indAmp.reference + delta) ) || 
 8005a6e:	4299      	cmp	r1, r3
 8005a70:	dc73      	bgt.n	8005b5a <rfalWorker+0xc9e>
                        {
                            woke = true;
                            gRFAL.wum.info.indAmp.irqWu = true;
 8005a72:	0023      	movs	r3, r4
 8005a74:	2201      	movs	r2, #1
 8005a76:	33a4      	adds	r3, #164	@ 0xa4
 8005a78:	701a      	strb	r2, [r3, #0]
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8005a7a:	0023      	movs	r3, r4
 8005a7c:	1892      	adds	r2, r2, r2
 8005a7e:	3380      	adds	r3, #128	@ 0x80
 8005a80:	701a      	strb	r2, [r3, #0]
                            /* continue wake-up as for HW */
                        }
                        
                        /* Update moving reference if enabled */
                        if( (gRFAL.wum.cfg.indAmp.autoAvg) && ((gRFAL.wum.cfg.indAmp.aaInclMeas) || (!woke)) )
 8005a82:	0023      	movs	r3, r4
 8005a84:	338c      	adds	r3, #140	@ 0x8c
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d011      	beq.n	8005ab0 <rfalWorker+0xbf4>
 8005a8c:	0023      	movs	r3, r4
 8005a8e:	338d      	adds	r3, #141	@ 0x8d
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <rfalWorker+0xbde>
 8005a96:	2d00      	cmp	r5, #0
 8005a98:	d10a      	bne.n	8005ab0 <rfalWorker+0xbf4>
                        {
                            gRFAL.wum.cfg.indAmp.reference = rfalWakeUpModeFilter( gRFAL.wum.cfg.indAmp.reference, value, (RFAL_WU_MIN_WEIGHT_VAL<<(uint8_t)gRFAL.wum.cfg.indAmp.aaWeight) );
 8005a9a:	0023      	movs	r3, r4
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	338e      	adds	r3, #142	@ 0x8e
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	f7fe fa0b 	bl	8003ec0 <rfalWakeUpModeFilter>
 8005aaa:	0023      	movs	r3, r4
 8005aac:	338a      	adds	r3, #138	@ 0x8a
 8005aae:	8018      	strh	r0, [r3, #0]
                        }
                    }
                    
                    /*******************************************************************************/
                    if( gRFAL.wum.cfg.indPha.enabled )
 8005ab0:	0023      	movs	r3, r4
 8005ab2:	3390      	adds	r3, #144	@ 0x90
 8005ab4:	781e      	ldrb	r6, [r3, #0]
 8005ab6:	2e00      	cmp	r6, #0
 8005ab8:	d041      	beq.n	8005b3e <rfalWorker+0xc82>
                    {
                        /* Perform Phase measurement */
                        st25r3916MeasurePhase( &reg );
 8005aba:	af0b      	add	r7, sp, #44	@ 0x2c
 8005abc:	0038      	movs	r0, r7
 8005abe:	f000 fd07 	bl	80064d0 <st25r3916MeasurePhase>
                        
                        /* Update last measurement info */
                        gRFAL.wum.info.indPha.lastMeas = reg;
 8005ac2:	0023      	movs	r3, r4
 8005ac4:	7839      	ldrb	r1, [r7, #0]
 8005ac6:	33a5      	adds	r3, #165	@ 0xa5
                        
                        /* Convert inputs to TD format */
                        value = rfalConvTDFormat( reg );
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indPha.delta );
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indPha.fracDelta );
 8005ac8:	0022      	movs	r2, r4
                        gRFAL.wum.info.indPha.lastMeas = reg;
 8005aca:	7019      	strb	r1, [r3, #0]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indPha.delta );
 8005acc:	0023      	movs	r3, r4
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indPha.fracDelta );
 8005ace:	2003      	movs	r0, #3
 8005ad0:	3292      	adds	r2, #146	@ 0x92
 8005ad2:	7812      	ldrb	r2, [r2, #0]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indPha.delta );
 8005ad4:	3391      	adds	r3, #145	@ 0x91
 8005ad6:	781b      	ldrb	r3, [r3, #0]
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indPha.fracDelta );
 8005ad8:	4002      	ands	r2, r0
 8005ada:	0192      	lsls	r2, r2, #6
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indPha.delta );
 8005adc:	021b      	lsls	r3, r3, #8
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indPha.fracDelta );
 8005ade:	4313      	orrs	r3, r2
                        
                        /* Set first measurement as reference */
                        if( gRFAL.wum.cfg.indPha.reference == 0U )
 8005ae0:	0022      	movs	r2, r4
 8005ae2:	3294      	adds	r2, #148	@ 0x94
 8005ae4:	8810      	ldrh	r0, [r2, #0]
                        value = rfalConvTDFormat( reg );
 8005ae6:	0209      	lsls	r1, r1, #8
                        if( gRFAL.wum.cfg.indPha.reference == 0U )
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d100      	bne.n	8005aee <rfalWorker+0xc32>
                        {
                            gRFAL.wum.cfg.indPha.reference = value;
 8005aec:	8011      	strh	r1, [r2, #0]
                        }
                        
                        /* Check if device should be woken */
                        if( ( value >= (gRFAL.wum.cfg.indPha.reference + delta) ) || 
 8005aee:	0022      	movs	r2, r4
 8005af0:	3294      	adds	r2, #148	@ 0x94
 8005af2:	8810      	ldrh	r0, [r2, #0]
 8005af4:	18c2      	adds	r2, r0, r3
 8005af6:	4291      	cmp	r1, r2
 8005af8:	da02      	bge.n	8005b00 <rfalWorker+0xc44>
                            ( value <= (gRFAL.wum.cfg.indPha.reference - delta) )   )
 8005afa:	1ac3      	subs	r3, r0, r3
                        if( ( value >= (gRFAL.wum.cfg.indPha.reference + delta) ) || 
 8005afc:	4299      	cmp	r1, r3
 8005afe:	dc08      	bgt.n	8005b12 <rfalWorker+0xc56>
                        {
                            woke = true;
                            gRFAL.wum.info.indPha.irqWu = true;
 8005b00:	0023      	movs	r3, r4
 8005b02:	2201      	movs	r2, #1
 8005b04:	33a6      	adds	r3, #166	@ 0xa6
 8005b06:	701a      	strb	r2, [r3, #0]
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8005b08:	0023      	movs	r3, r4
                            woke = true;
 8005b0a:	0035      	movs	r5, r6
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8005b0c:	3380      	adds	r3, #128	@ 0x80
 8005b0e:	1892      	adds	r2, r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]
                            /* continue wake-up as for HW */
                        }
                        
                        /* Update moving reference if enabled */
                        if( (gRFAL.wum.cfg.indPha.autoAvg) && ((gRFAL.wum.cfg.indPha.aaInclMeas) || (!woke)) )
 8005b12:	0023      	movs	r3, r4
 8005b14:	3396      	adds	r3, #150	@ 0x96
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d010      	beq.n	8005b3e <rfalWorker+0xc82>
 8005b1c:	0023      	movs	r3, r4
 8005b1e:	3397      	adds	r3, #151	@ 0x97
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <rfalWorker+0xc6e>
 8005b26:	2d00      	cmp	r5, #0
 8005b28:	d109      	bne.n	8005b3e <rfalWorker+0xc82>
                        {
                            gRFAL.wum.cfg.indPha.reference = rfalWakeUpModeFilter( gRFAL.wum.cfg.indPha.reference, value, (RFAL_WU_MIN_WEIGHT_VAL<<(uint8_t)gRFAL.wum.cfg.indPha.aaWeight) );
 8005b2a:	0023      	movs	r3, r4
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	3398      	adds	r3, #152	@ 0x98
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	3494      	adds	r4, #148	@ 0x94
 8005b34:	409a      	lsls	r2, r3
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	f7fe f9c2 	bl	8003ec0 <rfalWakeUpModeFilter>
 8005b3c:	8020      	strh	r0, [r4, #0]
                        }
                    }
                    
                    /* Re-Enable low power Wake-Up mode for wto to trigger another measurement(s) */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), (ST25R3916_REG_OP_CONTROL_wu) );
 8005b3e:	2204      	movs	r2, #4
 8005b40:	2184      	movs	r1, #132	@ 0x84
 8005b42:	2002      	movs	r0, #2
 8005b44:	f001 f80f 	bl	8006b66 <st25r3916ChangeRegisterBits>
}
 8005b48:	f7ff fa35 	bl	8004fb6 <rfalWorker+0xfa>
                        st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu, 0 );
 8005b4c:	2104      	movs	r1, #4
 8005b4e:	2002      	movs	r0, #2
 8005b50:	f001 f809 	bl	8006b66 <st25r3916ChangeRegisterBits>
                        st25r3916OscOn();
 8005b54:	f000 fc23 	bl	800639e <st25r3916OscOn>
 8005b58:	e763      	b.n	8005a22 <rfalWorker+0xb66>
                    woke = false;
 8005b5a:	2500      	movs	r5, #0
 8005b5c:	e791      	b.n	8005a82 <rfalWorker+0xbc6>
 8005b5e:	46c0      	nop			@ (mov r8, r8)
 8005b60:	18000910 	.word	0x18000910
 8005b64:	02000800 	.word	0x02000800

08005b68 <rfalTransceiveRunBlockingTx>:
{
 8005b68:	b510      	push	{r4, lr}
        rfalWorker();
 8005b6a:	f7ff f9a7 	bl	8004ebc <rfalWorker>
        ret = rfalGetTransceiveStatus();
 8005b6e:	f7fe fe1d 	bl	80047ac <rfalGetTransceiveStatus>
 8005b72:	0004      	movs	r4, r0
    while( (rfalIsTransceiveInTx()) && (ret == RFAL_ERR_BUSY) );
 8005b74:	f7fe fe0e 	bl	8004794 <rfalIsTransceiveInTx>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d001      	beq.n	8005b80 <rfalTransceiveRunBlockingTx+0x18>
 8005b7c:	2c02      	cmp	r4, #2
 8005b7e:	d0f4      	beq.n	8005b6a <rfalTransceiveRunBlockingTx+0x2>
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 8005b80:	4b03      	ldr	r3, [pc, #12]	@ (8005b90 <rfalTransceiveRunBlockingTx+0x28>)
    if( rfalIsTransceiveInRx() )
 8005b82:	7e1b      	ldrb	r3, [r3, #24]
 8005b84:	2b50      	cmp	r3, #80	@ 0x50
 8005b86:	d900      	bls.n	8005b8a <rfalTransceiveRunBlockingTx+0x22>
        return RFAL_ERR_NONE;
 8005b88:	2400      	movs	r4, #0
}
 8005b8a:	0020      	movs	r0, r4
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	46c0      	nop			@ (mov r8, r8)
 8005b90:	20001554 	.word	0x20001554

08005b94 <rfalTransceiveBlockingTx>:
{
 8005b94:	b500      	push	{lr}
 8005b96:	b089      	sub	sp, #36	@ 0x24
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 8005b98:	9001      	str	r0, [sp, #4]
 8005b9a:	4668      	mov	r0, sp
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	8203      	strh	r3, [r0, #16]
 8005ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ba2:	00c9      	lsls	r1, r1, #3
 8005ba4:	9305      	str	r3, [sp, #20]
 8005ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ba8:	8101      	strh	r1, [r0, #8]
 8005baa:	9306      	str	r3, [sp, #24]
 8005bac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    RFAL_EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 8005bae:	a801      	add	r0, sp, #4
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 8005bb0:	9203      	str	r2, [sp, #12]
 8005bb2:	9307      	str	r3, [sp, #28]
    RFAL_EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 8005bb4:	f7fe fd1a 	bl	80045ec <rfalStartTransceive>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d101      	bne.n	8005bc0 <rfalTransceiveBlockingTx+0x2c>
    return rfalTransceiveRunBlockingTx();
 8005bbc:	f7ff ffd4 	bl	8005b68 <rfalTransceiveRunBlockingTx>
}
 8005bc0:	b009      	add	sp, #36	@ 0x24
 8005bc2:	bd00      	pop	{pc}

08005bc4 <rfalStartFeliCaPoll>:
{
 8005bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 8005bc6:	4c1f      	ldr	r4, [pc, #124]	@ (8005c44 <rfalStartFeliCaPoll+0x80>)
{
 8005bc8:	b089      	sub	sp, #36	@ 0x24
 8005bca:	001e      	movs	r6, r3
 8005bcc:	ab0e      	add	r3, sp, #56	@ 0x38
 8005bce:	781f      	ldrb	r7, [r3, #0]
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 8005bd0:	7823      	ldrb	r3, [r4, #0]
{
 8005bd2:	0005      	movs	r5, r0
 8005bd4:	9205      	str	r2, [sp, #20]
        return RFAL_ERR_WRONG_STATE;
 8005bd6:	2021      	movs	r0, #33	@ 0x21
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d931      	bls.n	8005c40 <rfalStartFeliCaPoll+0x7c>
 8005bdc:	7863      	ldrb	r3, [r4, #1]
 8005bde:	2b06      	cmp	r3, #6
 8005be0:	d12e      	bne.n	8005c40 <rfalStartFeliCaPoll+0x7c>
    gRFAL.nfcfData.colDetected = 0;
 8005be2:	0020      	movs	r0, r4
 8005be4:	2300      	movs	r3, #0
 8005be6:	30ca      	adds	r0, #202	@ 0xca
 8005be8:	7003      	strb	r3, [r0, #0]
    gRFAL.nfcfData.devDetected = 0;
 8005bea:	0020      	movs	r0, r4
 8005bec:	30c9      	adds	r0, #201	@ 0xc9
 8005bee:	7003      	strb	r3, [r0, #0]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 8005bf0:	0a0a      	lsrs	r2, r1, #8
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */   
 8005bf2:	a806      	add	r0, sp, #24
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 8005bf4:	7042      	strb	r2, [r0, #1]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 8005bf6:	9a05      	ldr	r2, [sp, #20]
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */   
 8005bf8:	7003      	strb	r3, [r0, #0]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 8005bfa:	70c2      	strb	r2, [r0, #3]
    gRFAL.nfcfData.curHandling = gRFAL.conf.eHandling;
 8005bfc:	0022      	movs	r2, r4
    frame[frameIdx++] = (uint8_t)slots;              /* TimeSlot (TSN)                      */
 8005bfe:	7105      	strb	r5, [r0, #4]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 8005c00:	7081      	strb	r1, [r0, #2]
    gRFAL.nfcfData.curHandling = gRFAL.conf.eHandling;
 8005c02:	79e1      	ldrb	r1, [r4, #7]
 8005c04:	32d4      	adds	r2, #212	@ 0xd4
 8005c06:	7011      	strb	r1, [r2, #0]
    gRFAL.conf.eHandling       = RFAL_ERRORHANDLING_EMD;
 8005c08:	2201      	movs	r2, #1
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( frame, 
 8005c0a:	3503      	adds	r5, #3
    gRFAL.conf.eHandling       = RFAL_ERRORHANDLING_EMD;
 8005c0c:	71e2      	strb	r2, [r4, #7]
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( frame, 
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	4b0d      	ldr	r3, [pc, #52]	@ (8005c48 <rfalStartFeliCaPoll+0x84>)
 8005c12:	03ad      	lsls	r5, r5, #14
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	2105      	movs	r1, #5
 8005c18:	2314      	movs	r3, #20
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c4c <rfalStartFeliCaPoll+0x88>)
 8005c1c:	9502      	str	r5, [sp, #8]
 8005c1e:	f7ff ffb9 	bl	8005b94 <rfalTransceiveBlockingTx>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d10c      	bne.n	8005c40 <rfalStartFeliCaPoll+0x7c>
   gRFAL.nfcfData.pollResList        = pollResList;
 8005c26:	0023      	movs	r3, r4
 8005c28:	33c4      	adds	r3, #196	@ 0xc4
 8005c2a:	601e      	str	r6, [r3, #0]
   gRFAL.nfcfData.pollResListSize    = pollResListSize;
 8005c2c:	0023      	movs	r3, r4
 8005c2e:	33c8      	adds	r3, #200	@ 0xc8
 8005c30:	701f      	strb	r7, [r3, #0]
   gRFAL.nfcfData.devicesDetected    = devicesDetected;
 8005c32:	0023      	movs	r3, r4
 8005c34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005c36:	33cc      	adds	r3, #204	@ 0xcc
 8005c38:	601a      	str	r2, [r3, #0]
   gRFAL.nfcfData.collisionsDetected = collisionsDetected;
 8005c3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c3c:	34d0      	adds	r4, #208	@ 0xd0
 8005c3e:	6023      	str	r3, [r4, #0]
}
 8005c40:	b009      	add	sp, #36	@ 0x24
 8005c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c44:	20001554 	.word	0x20001554
 8005c48:	20001614 	.word	0x20001614
 8005c4c:	20001629 	.word	0x20001629

08005c50 <rfalISO14443AStartTransceiveAnticollisionFrame>:
{
 8005c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c52:	b08b      	sub	sp, #44	@ 0x2c
 8005c54:	9300      	str	r3, [sp, #0]
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 8005c56:	4b33      	ldr	r3, [pc, #204]	@ (8005d24 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd4>)
{
 8005c58:	0004      	movs	r4, r0
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
{
 8005c5e:	000d      	movs	r5, r1
 8005c60:	0016      	movs	r6, r2
        return RFAL_ERR_WRONG_STATE;
 8005c62:	2021      	movs	r0, #33	@ 0x21
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d95b      	bls.n	8005d20 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
 8005c68:	9b01      	ldr	r3, [sp, #4]
 8005c6a:	785f      	ldrb	r7, [r3, #1]
 8005c6c:	2f01      	cmp	r7, #1
 8005c6e:	d157      	bne.n	8005d20 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
        return RFAL_ERR_PARAM;
 8005c70:	381a      	subs	r0, #26
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 8005c72:	2c00      	cmp	r4, #0
 8005c74:	d054      	beq.n	8005d20 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
 8005c76:	2900      	cmp	r1, #0
 8005c78:	d052      	beq.n	8005d20 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
 8005c7a:	2a00      	cmp	r2, #0
 8005c7c:	d050      	beq.n	8005d20 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
 8005c7e:	9b00      	ldr	r3, [sp, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d04d      	beq.n	8005d20 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 8005c84:	2004      	movs	r0, #4
 8005c86:	30ff      	adds	r0, #255	@ 0xff
 8005c88:	f005 fa4a 	bl	800b120 <rfalSetAnalogConfig>
    st25r3916SetRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_antcl );
 8005c8c:	0039      	movs	r1, r7
 8005c8e:	2005      	movs	r0, #5
 8005c90:	f000 ff41 	bl	8006b16 <st25r3916SetRegisterBits>
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 8005c94:	782b      	ldrb	r3, [r5, #0]
 8005c96:	7832      	ldrb	r2, [r6, #0]
 8005c98:	00d9      	lsls	r1, r3, #3
    ctx.rxBuf     = &buf[*bytesToSend];
 8005c9a:	18e3      	adds	r3, r4, r3
 8005c9c:	9305      	str	r3, [sp, #20]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 8005c9e:	2328      	movs	r3, #40	@ 0x28
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 8005ca0:	1852      	adds	r2, r2, r1
 8005ca2:	a902      	add	r1, sp, #8
 8005ca4:	810a      	strh	r2, [r1, #8]
    ctx.flags    |= (st25r3916CheckReg( ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, ST25R3916_REG_AUX_dis_corr ) ? (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF : 0x00U );
 8005ca6:	2204      	movs	r2, #4
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 8005ca8:	820b      	strh	r3, [r1, #16]
    ctx.rxRcvdLen = rxLength;
 8005caa:	9b00      	ldr	r3, [sp, #0]
    ctx.flags    |= (st25r3916CheckReg( ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, ST25R3916_REG_AUX_dis_corr ) ? (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF : 0x00U );
 8005cac:	0011      	movs	r1, r2
    ctx.rxRcvdLen = rxLength;
 8005cae:	9307      	str	r3, [sp, #28]
    ctx.fwt       = fwt;
 8005cb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    ctx.flags    |= (st25r3916CheckReg( ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, ST25R3916_REG_AUX_dis_corr ) ? (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF : 0x00U );
 8005cb2:	200a      	movs	r0, #10
    ctx.fwt       = fwt;
 8005cb4:	9309      	str	r3, [sp, #36]	@ 0x24
    ctx.txBuf     = buf;
 8005cb6:	9403      	str	r4, [sp, #12]
    ctx.flags    |= (st25r3916CheckReg( ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, ST25R3916_REG_AUX_dis_corr ) ? (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF : 0x00U );
 8005cb8:	f000 ff70 	bl	8006b9c <st25r3916CheckReg>
 8005cbc:	00c3      	lsls	r3, r0, #3
 8005cbe:	2083      	movs	r0, #131	@ 0x83
 8005cc0:	4318      	orrs	r0, r3
 8005cc2:	9008      	str	r0, [sp, #32]
    RFAL_EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 8005cc4:	a803      	add	r0, sp, #12
 8005cc6:	f7fe fc91 	bl	80045ec <rfalStartTransceive>
 8005cca:	1e07      	subs	r7, r0, #0
 8005ccc:	d128      	bne.n	8005d20 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_COL );
 8005cce:	2004      	movs	r0, #4
 8005cd0:	f001 f82a 	bl	8006d28 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_COL );
 8005cd4:	2004      	movs	r0, #4
 8005cd6:	f001 f853 	bl	8006d80 <st25r3916EnableInterrupts>
    gRFAL.nfcaData.collByte = 0;
 8005cda:	9801      	ldr	r0, [sp, #4]
 8005cdc:	30ac      	adds	r0, #172	@ 0xac
 8005cde:	7007      	strb	r7, [r0, #0]
    if ((*bitsToSend) > 0U)
 8005ce0:	7832      	ldrb	r2, [r6, #0]
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	d00e      	beq.n	8005d04 <rfalISO14443AStartTransceiveAnticollisionFrame+0xb4>
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 8005ce6:	2308      	movs	r3, #8
 8005ce8:	782f      	ldrb	r7, [r5, #0]
 8005cea:	1a9a      	subs	r2, r3, r2
 8005cec:	5de1      	ldrb	r1, [r4, r7]
 8005cee:	4091      	lsls	r1, r2
 8005cf0:	55e1      	strb	r1, [r4, r7]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 8005cf2:	782a      	ldrb	r2, [r5, #0]
 8005cf4:	7837      	ldrb	r7, [r6, #0]
 8005cf6:	5ca1      	ldrb	r1, [r4, r2]
 8005cf8:	1bdb      	subs	r3, r3, r7
 8005cfa:	4119      	asrs	r1, r3
 8005cfc:	54a1      	strb	r1, [r4, r2]
        gRFAL.nfcaData.collByte = buf[(*bytesToSend)];
 8005cfe:	782b      	ldrb	r3, [r5, #0]
 8005d00:	5ce3      	ldrb	r3, [r4, r3]
 8005d02:	7003      	strb	r3, [r0, #0]
    gRFAL.nfcaData.buf         = buf;
 8005d04:	4b07      	ldr	r3, [pc, #28]	@ (8005d24 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd4>)
 8005d06:	4a08      	ldr	r2, [pc, #32]	@ (8005d28 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd8>)
 8005d08:	6014      	str	r4, [r2, #0]
    gRFAL.nfcaData.bytesToSend = bytesToSend;
 8005d0a:	001a      	movs	r2, r3
 8005d0c:	32b4      	adds	r2, #180	@ 0xb4
 8005d0e:	6015      	str	r5, [r2, #0]
    gRFAL.nfcaData.bitsToSend  = bitsToSend;
 8005d10:	001a      	movs	r2, r3
 8005d12:	32b8      	adds	r2, #184	@ 0xb8
 8005d14:	6016      	str	r6, [r2, #0]
    gRFAL.nfcaData.rxLength    = rxLength;
 8005d16:	9a00      	ldr	r2, [sp, #0]
 8005d18:	33bc      	adds	r3, #188	@ 0xbc
 8005d1a:	601a      	str	r2, [r3, #0]
    return rfalTransceiveRunBlockingTx();
 8005d1c:	f7ff ff24 	bl	8005b68 <rfalTransceiveRunBlockingTx>
}
 8005d20:	b00b      	add	sp, #44	@ 0x2c
 8005d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d24:	20001554 	.word	0x20001554
 8005d28:	20001604 	.word	0x20001604

08005d2c <rfalTransceiveBlockingRx>:
{
 8005d2c:	b510      	push	{r4, lr}
        rfalWorker();
 8005d2e:	f7ff f8c5 	bl	8004ebc <rfalWorker>
        ret = rfalGetTransceiveStatus();
 8005d32:	f7fe fd3b 	bl	80047ac <rfalGetTransceiveStatus>
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 8005d36:	4b03      	ldr	r3, [pc, #12]	@ (8005d44 <rfalTransceiveBlockingRx+0x18>)
    while( (rfalIsTransceiveInRx()) || (ret == RFAL_ERR_BUSY) );
 8005d38:	7e1b      	ldrb	r3, [r3, #24]
 8005d3a:	2b50      	cmp	r3, #80	@ 0x50
 8005d3c:	d8f7      	bhi.n	8005d2e <rfalTransceiveBlockingRx+0x2>
 8005d3e:	2802      	cmp	r0, #2
 8005d40:	d0f5      	beq.n	8005d2e <rfalTransceiveBlockingRx+0x2>
}
 8005d42:	bd10      	pop	{r4, pc}
 8005d44:	20001554 	.word	0x20001554

08005d48 <rfalTransceiveBlockingTxRx>:
{
 8005d48:	b530      	push	{r4, r5, lr}
 8005d4a:	b085      	sub	sp, #20
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 8005d4c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
{
 8005d4e:	9c08      	ldr	r4, [sp, #32]
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 8005d50:	9502      	str	r5, [sp, #8]
 8005d52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005d54:	9400      	str	r4, [sp, #0]
 8005d56:	9501      	str	r5, [sp, #4]
 8005d58:	f7ff ff1c 	bl	8005b94 <rfalTransceiveBlockingTx>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d107      	bne.n	8005d70 <rfalTransceiveBlockingTxRx+0x28>
    ret = rfalTransceiveBlockingRx();
 8005d60:	f7ff ffe4 	bl	8005d2c <rfalTransceiveBlockingRx>
    if( actLen != NULL )
 8005d64:	2c00      	cmp	r4, #0
 8005d66:	d003      	beq.n	8005d70 <rfalTransceiveBlockingTxRx+0x28>
        *actLen = rfalConvBitsToBytes(*actLen);
 8005d68:	8823      	ldrh	r3, [r4, #0]
 8005d6a:	3307      	adds	r3, #7
 8005d6c:	08db      	lsrs	r3, r3, #3
 8005d6e:	8023      	strh	r3, [r4, #0]
}
 8005d70:	b005      	add	sp, #20
 8005d72:	bd30      	pop	{r4, r5, pc}

08005d74 <rfalISO15693TransceiveEOF>:
{
 8005d74:	b530      	push	{r4, r5, lr}
 8005d76:	000b      	movs	r3, r1
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8005d78:	490b      	ldr	r1, [pc, #44]	@ (8005da8 <rfalISO15693TransceiveEOF+0x34>)
{
 8005d7a:	0004      	movs	r4, r0
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8005d7c:	780d      	ldrb	r5, [r1, #0]
        return RFAL_ERR_WRONG_STATE;
 8005d7e:	2021      	movs	r0, #33	@ 0x21
{
 8005d80:	b087      	sub	sp, #28
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8005d82:	2d01      	cmp	r5, #1
 8005d84:	d90e      	bls.n	8005da4 <rfalISO15693TransceiveEOF+0x30>
 8005d86:	7849      	ldrb	r1, [r1, #1]
 8005d88:	2907      	cmp	r1, #7
 8005d8a:	d10b      	bne.n	8005da4 <rfalISO15693TransceiveEOF+0x30>
    ret = rfalTransceiveBlockingTxRx( &dummy,
 8005d8c:	21a2      	movs	r1, #162	@ 0xa2
 8005d8e:	0149      	lsls	r1, r1, #5
 8005d90:	9102      	str	r1, [sp, #8]
 8005d92:	2103      	movs	r1, #3
 8005d94:	380a      	subs	r0, #10
 8005d96:	9101      	str	r1, [sp, #4]
 8005d98:	9200      	str	r2, [sp, #0]
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	0022      	movs	r2, r4
 8005d9e:	4468      	add	r0, sp
 8005da0:	f7ff ffd2 	bl	8005d48 <rfalTransceiveBlockingTxRx>
}
 8005da4:	b007      	add	sp, #28
 8005da6:	bd30      	pop	{r4, r5, pc}
 8005da8:	20001554 	.word	0x20001554

08005dac <rfalISO14443ATransceiveShortFrame>:
{
 8005dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dae:	9201      	str	r2, [sp, #4]
    if( (!st25r3916IsTxEnabled()) || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 8005db0:	2208      	movs	r2, #8
{
 8005db2:	9100      	str	r1, [sp, #0]
 8005db4:	0007      	movs	r7, r0
    if( (!st25r3916IsTxEnabled()) || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 8005db6:	0011      	movs	r1, r2
 8005db8:	2002      	movs	r0, #2
{
 8005dba:	001e      	movs	r6, r3
    if( (!st25r3916IsTxEnabled()) || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 8005dbc:	f000 feee 	bl	8006b9c <st25r3916CheckReg>
        return RFAL_ERR_WRONG_STATE;
 8005dc0:	2521      	movs	r5, #33	@ 0x21
    if( (!st25r3916IsTxEnabled()) || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d100      	bne.n	8005dc8 <rfalISO14443ATransceiveShortFrame+0x1c>
 8005dc6:	e094      	b.n	8005ef2 <rfalISO14443ATransceiveShortFrame+0x146>
 8005dc8:	4c4d      	ldr	r4, [pc, #308]	@ (8005f00 <rfalISO14443ATransceiveShortFrame+0x154>)
 8005dca:	7823      	ldrb	r3, [r4, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d800      	bhi.n	8005dd2 <rfalISO14443ATransceiveShortFrame+0x26>
 8005dd0:	e08f      	b.n	8005ef2 <rfalISO14443ATransceiveShortFrame+0x146>
 8005dd2:	7863      	ldrb	r3, [r4, #1]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d900      	bls.n	8005ddc <rfalISO14443ATransceiveShortFrame+0x30>
 8005dda:	e08a      	b.n	8005ef2 <rfalISO14443ATransceiveShortFrame+0x146>
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 8005ddc:	9b00      	ldr	r3, [sp, #0]
        return RFAL_ERR_PARAM;
 8005dde:	3d1a      	subs	r5, #26
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d100      	bne.n	8005de6 <rfalISO14443ATransceiveShortFrame+0x3a>
 8005de4:	e085      	b.n	8005ef2 <rfalISO14443ATransceiveShortFrame+0x146>
 8005de6:	2e00      	cmp	r6, #0
 8005de8:	d100      	bne.n	8005dec <rfalISO14443ATransceiveShortFrame+0x40>
 8005dea:	e082      	b.n	8005ef2 <rfalISO14443ATransceiveShortFrame+0x146>
 8005dec:	9b08      	ldr	r3, [sp, #32]
 8005dee:	3301      	adds	r3, #1
 8005df0:	d07f      	beq.n	8005ef2 <rfalISO14443ATransceiveShortFrame+0x146>
    switch (txCmd)
 8005df2:	2f26      	cmp	r7, #38	@ 0x26
 8005df4:	d100      	bne.n	8005df8 <rfalISO14443ATransceiveShortFrame+0x4c>
 8005df6:	e07e      	b.n	8005ef6 <rfalISO14443ATransceiveShortFrame+0x14a>
 8005df8:	2f52      	cmp	r7, #82	@ 0x52
 8005dfa:	d17a      	bne.n	8005ef2 <rfalISO14443ATransceiveShortFrame+0x146>
            directCmd = ST25R3916_CMD_TRANSMIT_WUPA;
 8005dfc:	35c0      	adds	r5, #192	@ 0xc0
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 8005dfe:	f7fe fb7d 	bl	80044fc <rfalIsGTExpired>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d0fb      	beq.n	8005dfe <rfalISO14443ATransceiveShortFrame+0x52>
    while( st25r3916IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 8005e06:	2704      	movs	r7, #4
 8005e08:	003a      	movs	r2, r7
 8005e0a:	0039      	movs	r1, r7
 8005e0c:	2024      	movs	r0, #36	@ 0x24
 8005e0e:	f000 fec5 	bl	8006b9c <st25r3916CheckReg>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d1f8      	bne.n	8005e08 <rfalISO14443ATransceiveShortFrame+0x5c>
    gRFAL.TxRx.ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_MANUAL );
 8005e16:	2383      	movs	r3, #131	@ 0x83
    st25r3916SetNoResponseTime( rfalConv1fcTo64fc( RFAL_MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3916_NRT_MAX_1FC ) ) );
 8005e18:	22a0      	movs	r2, #160	@ 0xa0
    gRFAL.TxRx.ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_MANUAL );
 8005e1a:	6323      	str	r3, [r4, #48]	@ 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 8005e1c:	9b00      	ldr	r3, [sp, #0]
    st25r3916SetNoResponseTime( rfalConv1fcTo64fc( RFAL_MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3916_NRT_MAX_1FC ) ) );
 8005e1e:	0092      	lsls	r2, r2, #2
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 8005e20:	6263      	str	r3, [r4, #36]	@ 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 8005e22:	9b01      	ldr	r3, [sp, #4]
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8005e24:	6420      	str	r0, [r4, #64]	@ 0x40
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 8005e26:	8523      	strh	r3, [r4, #40]	@ 0x28
    gRFAL.TxRx.ctx.fwt       = fwt;
 8005e28:	9b08      	ldr	r3, [sp, #32]
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 8005e2a:	62e6      	str	r6, [r4, #44]	@ 0x2c
    gRFAL.TxRx.ctx.fwt       = fwt;
 8005e2c:	6363      	str	r3, [r4, #52]	@ 0x34
    st25r3916SetNoResponseTime( rfalConv1fcTo64fc( RFAL_MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3916_NRT_MAX_1FC ) ) );
 8005e2e:	1898      	adds	r0, r3, r2
 8005e30:	4b34      	ldr	r3, [pc, #208]	@ (8005f04 <rfalISO14443ATransceiveShortFrame+0x158>)
 8005e32:	4298      	cmp	r0, r3
 8005e34:	d900      	bls.n	8005e38 <rfalISO14443ATransceiveShortFrame+0x8c>
 8005e36:	0018      	movs	r0, r3
 8005e38:	0980      	lsrs	r0, r0, #6
 8005e3a:	f000 fc09 	bl	8006650 <st25r3916SetNoResponseTime>
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d010      	beq.n	8005e66 <rfalISO14443ATransceiveShortFrame+0xba>
        st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 8005e44:	2108      	movs	r1, #8
 8005e46:	2012      	movs	r0, #18
 8005e48:	f000 fe53 	bl	8006af2 <st25r3916ClrRegisterBits>
        st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 8005e4c:	228a      	movs	r2, #138	@ 0x8a
 8005e4e:	68e3      	ldr	r3, [r4, #12]
 8005e50:	2104      	movs	r1, #4
 8005e52:	0052      	lsls	r2, r2, #1
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d303      	bcc.n	8005e60 <rfalISO14443ATransceiveShortFrame+0xb4>
 8005e58:	3b15      	subs	r3, #21
 8005e5a:	3bff      	subs	r3, #255	@ 0xff
 8005e5c:	099b      	lsrs	r3, r3, #6
 8005e5e:	b2d9      	uxtb	r1, r3
 8005e60:	200f      	movs	r0, #15
 8005e62:	f000 fd71 	bl	8006948 <st25r3916WriteRegister>
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 8005e66:	6920      	ldr	r0, [r4, #16]
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d007      	beq.n	8005e7c <rfalISO14443ATransceiveShortFrame+0xd0>
        st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( ((gRFAL.timings.FDTPoll < RFAL_FDT_POLL_ADJUSTMENT) ? gRFAL.timings.FDTPoll : (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT)) ) , ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 8005e6c:	4b26      	ldr	r3, [pc, #152]	@ (8005f08 <rfalISO14443ATransceiveShortFrame+0x15c>)
 8005e6e:	4298      	cmp	r0, r3
 8005e70:	d843      	bhi.n	8005efa <rfalISO14443ATransceiveShortFrame+0x14e>
 8005e72:	08c0      	lsrs	r0, r0, #3
 8005e74:	2120      	movs	r1, #32
 8005e76:	b280      	uxth	r0, r0
 8005e78:	f000 fc21 	bl	80066be <st25r3916SetStartGPTimer>
    rfalPrepareTransceive();
 8005e7c:	f7fd ff88 	bl	8003d90 <rfalPrepareTransceive>
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_COL );
 8005e80:	2004      	movs	r0, #4
 8005e82:	f000 ff51 	bl	8006d28 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_COL );
 8005e86:	2004      	movs	r0, #4
 8005e88:	f000 ff7a 	bl	8006d80 <st25r3916EnableInterrupts>
    rfalCheckEnableObsModeTx();
 8005e8c:	7963      	ldrb	r3, [r4, #5]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <rfalISO14443ATransceiveShortFrame+0xf0>
 8005e92:	2140      	movs	r1, #64	@ 0x40
 8005e94:	2001      	movs	r0, #1
 8005e96:	4319      	orrs	r1, r3
 8005e98:	f000 fe0f 	bl	8006aba <st25r3916WriteTestRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, 0);
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	2023      	movs	r0, #35	@ 0x23
 8005ea0:	f000 fd52 	bl	8006948 <st25r3916WriteRegister>
    st25r3916ExecuteCommand( directCmd );
 8005ea4:	0028      	movs	r0, r5
 8005ea6:	f000 fdd8 	bl	8006a5a <st25r3916ExecuteCommand>
    if( st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_TXE, (uint16_t)RFAL_MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3916_SW_TMR_MIN_1MS ) ) == 0U )
 8005eaa:	4b18      	ldr	r3, [pc, #96]	@ (8005f0c <rfalISO14443ATransceiveShortFrame+0x160>)
 8005eac:	9a08      	ldr	r2, [sp, #32]
 8005eae:	2101      	movs	r1, #1
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d904      	bls.n	8005ebe <rfalISO14443ATransceiveShortFrame+0x112>
 8005eb4:	4916      	ldr	r1, [pc, #88]	@ (8005f10 <rfalISO14443ATransceiveShortFrame+0x164>)
 8005eb6:	0010      	movs	r0, r2
 8005eb8:	f7fa f956 	bl	8000168 <__udivsi3>
 8005ebc:	b281      	uxth	r1, r0
 8005ebe:	2008      	movs	r0, #8
 8005ec0:	f000 fef8 	bl	8006cb4 <st25r3916WaitForInterruptsTimed>
        ret = RFAL_ERR_IO;
 8005ec4:	2503      	movs	r5, #3
    if( st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_TXE, (uint16_t)RFAL_MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3916_SW_TMR_MIN_1MS ) ) == 0U )
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d010      	beq.n	8005eec <rfalISO14443ATransceiveShortFrame+0x140>
        rfalCheckEnableObsModeRx();
 8005eca:	79a3      	ldrb	r3, [r4, #6]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <rfalISO14443ATransceiveShortFrame+0x12e>
 8005ed0:	2140      	movs	r1, #64	@ 0x40
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	4319      	orrs	r1, r3
 8005ed6:	f000 fdf0 	bl	8006aba <st25r3916WriteTestRegister>
        gRFAL.state       = RFAL_STATE_TXRX;
 8005eda:	2303      	movs	r3, #3
 8005edc:	7023      	strb	r3, [r4, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8005ede:	334e      	adds	r3, #78	@ 0x4e
 8005ee0:	7623      	strb	r3, [r4, #24]
        gRFAL.TxRx.status = RFAL_ERR_BUSY;
 8005ee2:	3b4f      	subs	r3, #79	@ 0x4f
 8005ee4:	8363      	strh	r3, [r4, #26]
        ret = rfalTransceiveBlockingRx();
 8005ee6:	f7ff ff21 	bl	8005d2c <rfalTransceiveBlockingRx>
 8005eea:	0005      	movs	r5, r0
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_COL) );
 8005eec:	2004      	movs	r0, #4
 8005eee:	f000 ff54 	bl	8006d9a <st25r3916DisableInterrupts>
}
 8005ef2:	0028      	movs	r0, r5
 8005ef4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    switch (txCmd)
 8005ef6:	25c6      	movs	r5, #198	@ 0xc6
 8005ef8:	e781      	b.n	8005dfe <rfalISO14443ATransceiveShortFrame+0x52>
        st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( ((gRFAL.timings.FDTPoll < RFAL_FDT_POLL_ADJUSTMENT) ? gRFAL.timings.FDTPoll : (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT)) ) , ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 8005efa:	4b06      	ldr	r3, [pc, #24]	@ (8005f14 <rfalISO14443ATransceiveShortFrame+0x168>)
 8005efc:	18c0      	adds	r0, r0, r3
 8005efe:	e7b8      	b.n	8005e72 <rfalISO14443ATransceiveShortFrame+0xc6>
 8005f00:	20001554 	.word	0x20001554
 8005f04:	0ffff000 	.word	0x0ffff000
 8005f08:	0000043b 	.word	0x0000043b
 8005f0c:	000069ef 	.word	0x000069ef
 8005f10:	000034f8 	.word	0x000034f8
 8005f14:	fffffbc4 	.word	0xfffffbc4

08005f18 <rfalISO15693TransceiveAnticollisionFrame>:
{
 8005f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8005f1a:	4d34      	ldr	r5, [pc, #208]	@ (8005fec <rfalISO15693TransceiveAnticollisionFrame+0xd4>)
{
 8005f1c:	001f      	movs	r7, r3
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8005f1e:	782b      	ldrb	r3, [r5, #0]
{
 8005f20:	b08b      	sub	sp, #44	@ 0x2c
 8005f22:	000e      	movs	r6, r1
        return RFAL_ERR_WRONG_STATE;
 8005f24:	2421      	movs	r4, #33	@ 0x21
{
 8005f26:	9000      	str	r0, [sp, #0]
 8005f28:	9201      	str	r2, [sp, #4]
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d953      	bls.n	8005fd6 <rfalISO15693TransceiveAnticollisionFrame+0xbe>
 8005f2e:	786b      	ldrb	r3, [r5, #1]
 8005f30:	2b07      	cmp	r3, #7
 8005f32:	d150      	bne.n	8005fd6 <rfalISO15693TransceiveAnticollisionFrame+0xbe>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 8005f34:	482e      	ldr	r0, [pc, #184]	@ (8005ff0 <rfalISO15693TransceiveAnticollisionFrame+0xd8>)
 8005f36:	f005 f8f3 	bl	800b120 <rfalSetAnalogConfig>
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 8005f3a:	2388      	movs	r3, #136	@ 0x88
 8005f3c:	2210      	movs	r2, #16
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	52ea      	strh	r2, [r5, r3]
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 8005f42:	2e00      	cmp	r6, #0
 8005f44:	d14a      	bne.n	8005fdc <rfalISO15693TransceiveAnticollisionFrame+0xc4>
 8005f46:	2340      	movs	r3, #64	@ 0x40
 8005f48:	3a05      	subs	r2, #5
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	9308      	str	r3, [sp, #32]
    ctx.txBuf     = txBuf;
 8005f4e:	9b00      	ldr	r3, [sp, #0]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 8005f50:	00f6      	lsls	r6, r6, #3
    ctx.txBuf     = txBuf;
 8005f52:	9303      	str	r3, [sp, #12]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 8005f54:	ab02      	add	r3, sp, #8
 8005f56:	811e      	strh	r6, [r3, #8]
    ctx.rxBuf     = rxBuf;
 8005f58:	9b01      	ldr	r3, [sp, #4]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 8005f5a:	aa02      	add	r2, sp, #8
    ctx.rxBuf     = rxBuf;
 8005f5c:	9305      	str	r3, [sp, #20]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 8005f5e:	00fb      	lsls	r3, r7, #3
 8005f60:	8213      	strh	r3, [r2, #16]
    ctx.rxRcvdLen = actLen;
 8005f62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    RFAL_EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 8005f64:	a803      	add	r0, sp, #12
    ctx.rxRcvdLen = actLen;
 8005f66:	9307      	str	r3, [sp, #28]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 8005f68:	23a2      	movs	r3, #162	@ 0xa2
 8005f6a:	015b      	lsls	r3, r3, #5
 8005f6c:	9309      	str	r3, [sp, #36]	@ 0x24
    RFAL_EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 8005f6e:	f7fe fb3d 	bl	80045ec <rfalStartTransceive>
 8005f72:	1e04      	subs	r4, r0, #0
 8005f74:	d12f      	bne.n	8005fd6 <rfalISO15693TransceiveAnticollisionFrame+0xbe>
    ret = rfalTransceiveRunBlockingTx();
 8005f76:	f7ff fdf7 	bl	8005b68 <rfalTransceiveRunBlockingTx>
 8005f7a:	1e04      	subs	r4, r0, #0
    if( ret == RFAL_ERR_NONE)
 8005f7c:	d102      	bne.n	8005f84 <rfalISO15693TransceiveAnticollisionFrame+0x6c>
        ret = rfalTransceiveBlockingRx();
 8005f7e:	f7ff fed5 	bl	8005d2c <rfalTransceiveBlockingRx>
 8005f82:	0004      	movs	r4, r0
    if( ((ret == RFAL_ERR_RF_COLLISION) || (ret == RFAL_ERR_CRC) || (ret == RFAL_ERR_FRAMING)) && (rfalConvBitsToBytes(*ctx.rxRcvdLen) < RFAL_ISO15693_INV_RES_LEN) )
 8005f84:	2c1d      	cmp	r4, #29
 8005f86:	d80e      	bhi.n	8005fa6 <rfalISO15693TransceiveAnticollisionFrame+0x8e>
 8005f88:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff4 <rfalISO15693TransceiveAnticollisionFrame+0xdc>)
 8005f8a:	40e3      	lsrs	r3, r4
 8005f8c:	07db      	lsls	r3, r3, #31
 8005f8e:	d50a      	bpl.n	8005fa6 <rfalISO15693TransceiveAnticollisionFrame+0x8e>
 8005f90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	3307      	adds	r3, #7
 8005f96:	08da      	lsrs	r2, r3, #3
 8005f98:	2b5f      	cmp	r3, #95	@ 0x5f
 8005f9a:	d804      	bhi.n	8005fa6 <rfalISO15693TransceiveAnticollisionFrame+0x8e>
        platformDelay( (uint8_t)( (RFAL_ISO15693_INV_RES_LEN - rfalConvBitsToBytes(*ctx.rxRcvdLen)) / ((RFAL_ISO15693_INV_RES_LEN / RFAL_ISO15693_INV_RES_DUR)+1U) ));
 8005f9c:	200c      	movs	r0, #12
 8005f9e:	1a80      	subs	r0, r0, r2
 8005fa0:	0880      	lsrs	r0, r0, #2
 8005fa2:	f001 f867 	bl	8007074 <HAL_Delay>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 8005fa6:	78ab      	ldrb	r3, [r5, #2]
 8005fa8:	22ff      	movs	r2, #255	@ 0xff
 8005faa:	4813      	ldr	r0, [pc, #76]	@ (8005ff8 <rfalISO15693TransceiveAnticollisionFrame+0xe0>)
 8005fac:	2bea      	cmp	r3, #234	@ 0xea
 8005fae:	d918      	bls.n	8005fe2 <rfalISO15693TransceiveAnticollisionFrame+0xca>
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	4318      	orrs	r0, r3
 8005fb6:	f005 f8b3 	bl	800b120 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 8005fba:	78eb      	ldrb	r3, [r5, #3]
 8005fbc:	22ff      	movs	r2, #255	@ 0xff
 8005fbe:	480f      	ldr	r0, [pc, #60]	@ (8005ffc <rfalISO15693TransceiveAnticollisionFrame+0xe4>)
 8005fc0:	2bea      	cmp	r3, #234	@ 0xea
 8005fc2:	d910      	bls.n	8005fe6 <rfalISO15693TransceiveAnticollisionFrame+0xce>
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	4318      	orrs	r0, r3
 8005fca:	f005 f8a9 	bl	800b120 <rfalSetAnalogConfig>
    gRFAL.nfcvData.ignoreBits = 0;
 8005fce:	2388      	movs	r3, #136	@ 0x88
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	52ea      	strh	r2, [r5, r3]
}
 8005fd6:	0020      	movs	r0, r4
 8005fd8:	b00b      	add	sp, #44	@ 0x2c
 8005fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 8005fdc:	220a      	movs	r2, #10
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e7b3      	b.n	8005f4a <rfalISO15693TransceiveAnticollisionFrame+0x32>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	e7e4      	b.n	8005fb0 <rfalISO15693TransceiveAnticollisionFrame+0x98>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	e7ec      	b.n	8005fc4 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 8005fea:	46c0      	nop			@ (mov r8, r8)
 8005fec:	20001554 	.word	0x20001554
 8005ff0:	00001003 	.word	0x00001003
 8005ff4:	20200200 	.word	0x20200200
 8005ff8:	00001001 	.word	0x00001001
 8005ffc:	00001002 	.word	0x00001002

08006000 <rfalISO15693TransceiveEOFAnticollision>:
{
 8006000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 8006002:	9200      	str	r2, [sp, #0]
 8006004:	0002      	movs	r2, r0
 8006006:	200f      	movs	r0, #15
{
 8006008:	000b      	movs	r3, r1
    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 800600a:	4468      	add	r0, sp
 800600c:	2100      	movs	r1, #0
 800600e:	f7ff ff83 	bl	8005f18 <rfalISO15693TransceiveAnticollisionFrame>
}
 8006012:	b005      	add	sp, #20
 8006014:	bd00      	pop	{pc}
	...

08006018 <rfalWakeUpModeStart>:
{
 8006018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( gRFAL.state < RFAL_STATE_INIT )
 800601a:	4cbd      	ldr	r4, [pc, #756]	@ (8006310 <rfalWakeUpModeStart+0x2f8>)
{
 800601c:	0001      	movs	r1, r0
    if( gRFAL.state < RFAL_STATE_INIT )
 800601e:	7823      	ldrb	r3, [r4, #0]
        return RFAL_ERR_WRONG_STATE;
 8006020:	2021      	movs	r0, #33	@ 0x21
    if( gRFAL.state < RFAL_STATE_INIT )
 8006022:	2b00      	cmp	r3, #0
 8006024:	d100      	bne.n	8006028 <rfalWakeUpModeStart+0x10>
 8006026:	e0b4      	b.n	8006192 <rfalWakeUpModeStart+0x17a>
    if( config == NULL )
 8006028:	0020      	movs	r0, r4
 800602a:	3082      	adds	r0, #130	@ 0x82
 800602c:	2900      	cmp	r1, #0
 800602e:	d000      	beq.n	8006032 <rfalWakeUpModeStart+0x1a>
 8006030:	e09e      	b.n	8006170 <rfalWakeUpModeStart+0x158>
        gRFAL.wum.cfg.period           = RFAL_WUM_PERIOD_200MS;
 8006032:	2311      	movs	r3, #17
 8006034:	8003      	strh	r3, [r0, #0]
        gRFAL.wum.cfg.indPha.enabled   = false;
 8006036:	0023      	movs	r3, r4
 8006038:	3390      	adds	r3, #144	@ 0x90
 800603a:	7019      	strb	r1, [r3, #0]
        gRFAL.wum.cfg.cap.enabled      = false;
 800603c:	0023      	movs	r3, r4
 800603e:	339a      	adds	r3, #154	@ 0x9a
 8006040:	7019      	strb	r1, [r3, #0]
        gRFAL.wum.cfg.indAmp.enabled   = true;
 8006042:	0023      	movs	r3, r4
 8006044:	4ab3      	ldr	r2, [pc, #716]	@ (8006314 <rfalWakeUpModeStart+0x2fc>)
 8006046:	3386      	adds	r3, #134	@ 0x86
 8006048:	801a      	strh	r2, [r3, #0]
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 800604a:	0023      	movs	r3, r4
        gRFAL.wum.cfg.swTagDetect      = false;
 800604c:	0027      	movs	r7, r4
        gRFAL.wum.cfg.indAmp.fracDelta = 0U;
 800604e:	0026      	movs	r6, r4
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 8006050:	0025      	movs	r5, r4
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 8006052:	3a03      	subs	r2, #3
 8006054:	3aff      	subs	r2, #255	@ 0xff
 8006056:	338a      	adds	r3, #138	@ 0x8a
        gRFAL.wum.cfg.swTagDetect      = false;
 8006058:	3784      	adds	r7, #132	@ 0x84
        gRFAL.wum.cfg.indAmp.fracDelta = 0U;
 800605a:	3688      	adds	r6, #136	@ 0x88
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 800605c:	801a      	strh	r2, [r3, #0]
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 800605e:	358c      	adds	r5, #140	@ 0x8c
        if( st25r3916IsAATOn() )
 8006060:	3adf      	subs	r2, #223	@ 0xdf
        gRFAL.wum.cfg.swTagDetect      = false;
 8006062:	7039      	strb	r1, [r7, #0]
        gRFAL.wum.cfg.indAmp.fracDelta = 0U;
 8006064:	7031      	strb	r1, [r6, #0]
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 8006066:	7029      	strb	r1, [r5, #0]
        if( st25r3916IsAATOn() )
 8006068:	2001      	movs	r0, #1
 800606a:	0011      	movs	r1, r2
 800606c:	f000 fd96 	bl	8006b9c <st25r3916CheckReg>
 8006070:	2800      	cmp	r0, #0
 8006072:	d00a      	beq.n	800608a <rfalWakeUpModeStart+0x72>
            gRFAL.wum.cfg.indAmp.delta     = 1U;
 8006074:	0022      	movs	r2, r4
            gRFAL.wum.cfg.swTagDetect      = true;
 8006076:	2301      	movs	r3, #1
            gRFAL.wum.cfg.indAmp.delta     = 1U;
 8006078:	3287      	adds	r2, #135	@ 0x87
 800607a:	7013      	strb	r3, [r2, #0]
            gRFAL.wum.cfg.swTagDetect      = true;
 800607c:	703b      	strb	r3, [r7, #0]
            gRFAL.wum.cfg.indAmp.autoAvg   = true;
 800607e:	702b      	strb	r3, [r5, #0]
            gRFAL.wum.cfg.indAmp.aaWeight  = RFAL_WUM_AA_WEIGHT_16;
 8006080:	0023      	movs	r3, r4
            gRFAL.wum.cfg.indAmp.fracDelta = 2U;
 8006082:	2202      	movs	r2, #2
            gRFAL.wum.cfg.indAmp.aaWeight  = RFAL_WUM_AA_WEIGHT_16;
 8006084:	338e      	adds	r3, #142	@ 0x8e
            gRFAL.wum.cfg.indAmp.fracDelta = 2U;
 8006086:	7032      	strb	r2, [r6, #0]
            gRFAL.wum.cfg.indAmp.aaWeight  = RFAL_WUM_AA_WEIGHT_16;
 8006088:	701a      	strb	r2, [r3, #0]
    if( ((!gRFAL.wum.cfg.cap.enabled) && (!gRFAL.wum.cfg.indAmp.enabled) && (!gRFAL.wum.cfg.indPha.enabled))  ||
 800608a:	0022      	movs	r2, r4
 800608c:	0023      	movs	r3, r4
 800608e:	329a      	adds	r2, #154	@ 0x9a
 8006090:	7812      	ldrb	r2, [r2, #0]
 8006092:	3386      	adds	r3, #134	@ 0x86
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2a00      	cmp	r2, #0
 8006098:	d16e      	bne.n	8006178 <rfalWakeUpModeStart+0x160>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d105      	bne.n	80060aa <rfalWakeUpModeStart+0x92>
 800609e:	0023      	movs	r3, r4
 80060a0:	3390      	adds	r3, #144	@ 0x90
 80060a2:	781b      	ldrb	r3, [r3, #0]
        return RFAL_ERR_PARAM;
 80060a4:	2007      	movs	r0, #7
    if( ((!gRFAL.wum.cfg.cap.enabled) && (!gRFAL.wum.cfg.indAmp.enabled) && (!gRFAL.wum.cfg.indPha.enabled))  ||
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d073      	beq.n	8006192 <rfalWakeUpModeStart+0x17a>
        ( (gRFAL.wum.cfg.indAmp.reference > RFAL_WUM_REFERENCE_AUTO) || 
 80060aa:	0023      	movs	r3, r4
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 80060ac:	0022      	movs	r2, r4
        ( (gRFAL.wum.cfg.indAmp.reference > RFAL_WUM_REFERENCE_AUTO) || 
 80060ae:	338a      	adds	r3, #138	@ 0x8a
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 80060b0:	3294      	adds	r2, #148	@ 0x94
 80060b2:	8812      	ldrh	r2, [r2, #0]
 80060b4:	881b      	ldrh	r3, [r3, #0]
        return RFAL_ERR_PARAM;
 80060b6:	2007      	movs	r0, #7
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 80060b8:	4313      	orrs	r3, r2
          (gRFAL.wum.cfg.cap.reference    > RFAL_WUM_REFERENCE_AUTO)    )                                )
 80060ba:	0022      	movs	r2, r4
 80060bc:	329c      	adds	r2, #156	@ 0x9c
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 80060be:	8812      	ldrh	r2, [r2, #0]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	2bff      	cmp	r3, #255	@ 0xff
 80060c4:	d865      	bhi.n	8006192 <rfalWakeUpModeStart+0x17a>
    st25r3916TxRxOff();
 80060c6:	2148      	movs	r1, #72	@ 0x48
 80060c8:	3805      	subs	r0, #5
 80060ca:	f000 fd12 	bl	8006af2 <st25r3916ClrRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask );
 80060ce:	2103      	movs	r1, #3
 80060d0:	2002      	movs	r0, #2
 80060d2:	f000 fd0e 	bl	8006af2 <st25r3916ClrRegisterBits>
    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask), (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_iso14443a) );
 80060d6:	2208      	movs	r2, #8
 80060d8:	21f8      	movs	r1, #248	@ 0xf8
 80060da:	2003      	movs	r0, #3
 80060dc:	f000 fd43 	bl	8006b66 <st25r3916ChangeRegisterBits>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 80060e0:	2004      	movs	r0, #4
 80060e2:	f005 f81d 	bl	800b120 <rfalSetAnalogConfig>
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3916_REG_WUP_TIMER_CONTROL_wut_shift);
 80060e6:	0023      	movs	r3, r4
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 80060e8:	2500      	movs	r5, #0
 80060ea:	220f      	movs	r2, #15
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3916_REG_WUP_TIMER_CONTROL_wut_shift);
 80060ec:	3382      	adds	r3, #130	@ 0x82
 80060ee:	781b      	ldrb	r3, [r3, #0]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 80060f0:	429a      	cmp	r2, r3
 80060f2:	416d      	adcs	r5, r5
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	01ed      	lsls	r5, r5, #7
 80060f8:	431d      	orrs	r5, r3
    if( (gRFAL.wum.cfg.irqTout) || (gRFAL.wum.cfg.swTagDetect) )
 80060fa:	0023      	movs	r3, r4
 80060fc:	3383      	adds	r3, #131	@ 0x83
 80060fe:	781b      	ldrb	r3, [r3, #0]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 8006100:	b26d      	sxtb	r5, r5
    if( (gRFAL.wum.cfg.irqTout) || (gRFAL.wum.cfg.swTagDetect) )
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <rfalWakeUpModeStart+0xf8>
 8006106:	0023      	movs	r3, r4
 8006108:	3384      	adds	r3, #132	@ 0x84
 800610a:	781e      	ldrb	r6, [r3, #0]
 800610c:	2e00      	cmp	r6, #0
 800610e:	d041      	beq.n	8006194 <rfalWakeUpModeStart+0x17c>
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wto;
 8006110:	2308      	movs	r3, #8
 8006112:	431d      	orrs	r5, r3
    if( gRFAL.wum.cfg.swTagDetect )
 8006114:	0023      	movs	r3, r4
 8006116:	3384      	adds	r3, #132	@ 0x84
 8006118:	781b      	ldrb	r3, [r3, #0]
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wto;
 800611a:	b2ed      	uxtb	r5, r5
    if( gRFAL.wum.cfg.swTagDetect )
 800611c:	2b00      	cmp	r3, #0
 800611e:	d100      	bne.n	8006122 <rfalWakeUpModeStart+0x10a>
 8006120:	e0f2      	b.n	8006308 <rfalWakeUpModeStart+0x2f0>
        gRFAL.wum.cfg.indAmp.reference = 0U;
 8006122:	0022      	movs	r2, r4
 8006124:	2300      	movs	r3, #0
 8006126:	328a      	adds	r2, #138	@ 0x8a
 8006128:	8013      	strh	r3, [r2, #0]
        gRFAL.wum.cfg.indPha.reference = 0U;
 800612a:	0022      	movs	r2, r4
 800612c:	3294      	adds	r2, #148	@ 0x94
 800612e:	8013      	strh	r3, [r2, #0]
        gRFAL.wum.cfg.cap.reference    = 0U;
 8006130:	0022      	movs	r2, r4
 8006132:	2680      	movs	r6, #128	@ 0x80
 8006134:	329c      	adds	r2, #156	@ 0x9c
 8006136:	8013      	strh	r3, [r2, #0]
 8006138:	0336      	lsls	r6, r6, #12
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 800613a:	2001      	movs	r0, #1
 800613c:	4240      	negs	r0, r0
 800613e:	f000 fe2c 	bl	8006d9a <st25r3916DisableInterrupts>
    st25r3916GetInterrupt( irqs );
 8006142:	0030      	movs	r0, r6
 8006144:	f000 fdf0 	bl	8006d28 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( irqs );
 8006148:	0030      	movs	r0, r6
 800614a:	f000 fe19 	bl	8006d80 <st25r3916EnableInterrupts>
    st25r3916WriteRegister( ST25R3916_REG_WUP_TIMER_CONTROL, reg );
 800614e:	0029      	movs	r1, r5
 8006150:	2032      	movs	r0, #50	@ 0x32
 8006152:	f000 fbf9 	bl	8006948 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL , 
 8006156:	2204      	movs	r2, #4
 8006158:	21cf      	movs	r1, #207	@ 0xcf
 800615a:	2002      	movs	r0, #2
 800615c:	f000 fd03 	bl	8006b66 <st25r3916ChangeRegisterBits>
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 8006160:	0023      	movs	r3, r4
 8006162:	2201      	movs	r2, #1
 8006164:	3380      	adds	r3, #128	@ 0x80
 8006166:	701a      	strb	r2, [r3, #0]
    gRFAL.state     = RFAL_STATE_WUM;
 8006168:	2305      	movs	r3, #5
    return RFAL_ERR_NONE;
 800616a:	2000      	movs	r0, #0
    gRFAL.state     = RFAL_STATE_WUM;
 800616c:	7023      	strb	r3, [r4, #0]
    return RFAL_ERR_NONE;
 800616e:	e010      	b.n	8006192 <rfalWakeUpModeStart+0x17a>
        gRFAL.wum.cfg = *config;
 8006170:	2220      	movs	r2, #32
 8006172:	f00d f8d3 	bl	801331c <memcpy>
 8006176:	e788      	b.n	800608a <rfalWakeUpModeStart+0x72>
        return RFAL_ERR_PARAM;
 8006178:	2007      	movs	r0, #7
        ((gRFAL.wum.cfg.cap.enabled)  && ((gRFAL.wum.cfg.indAmp.enabled) || (gRFAL.wum.cfg.indPha.enabled)))  ||
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <rfalWakeUpModeStart+0x17a>
 800617e:	0023      	movs	r3, r4
 8006180:	3390      	adds	r3, #144	@ 0x90
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <rfalWakeUpModeStart+0x17a>
        ((gRFAL.wum.cfg.cap.enabled)  &&  (gRFAL.wum.cfg.swTagDetect))                                        ||
 8006188:	0023      	movs	r3, r4
 800618a:	3384      	adds	r3, #132	@ 0x84
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d08b      	beq.n	80060aa <rfalWakeUpModeStart+0x92>
}
 8006192:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 8006194:	b2ed      	uxtb	r5, r5
        if( gRFAL.wum.cfg.indAmp.enabled )
 8006196:	0023      	movs	r3, r4
 8006198:	3386      	adds	r3, #134	@ 0x86
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d033      	beq.n	8006208 <rfalWakeUpModeStart+0x1f0>
            aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_d_shift);
 80061a0:	0023      	movs	r3, r4
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 80061a2:	0027      	movs	r7, r4
            aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_d_shift);
 80061a4:	3387      	adds	r3, #135	@ 0x87
 80061a6:	7819      	ldrb	r1, [r3, #0]
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 80061a8:	378c      	adds	r7, #140	@ 0x8c
 80061aa:	783b      	ldrb	r3, [r7, #0]
            aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_d_shift);
 80061ac:	0109      	lsls	r1, r1, #4
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 80061ae:	4319      	orrs	r1, r3
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 80061b0:	0023      	movs	r3, r4
 80061b2:	338d      	adds	r3, #141	@ 0x8d
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 80061b4:	781b      	ldrb	r3, [r3, #0]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_shift) & ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_mask);
 80061b6:	2206      	movs	r2, #6
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	4319      	orrs	r1, r3
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_shift) & ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_mask);
 80061bc:	0023      	movs	r3, r4
 80061be:	338e      	adds	r3, #142	@ 0x8e
 80061c0:	781b      	ldrb	r3, [r3, #0]
            st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_CONF, aux );
 80061c2:	2033      	movs	r0, #51	@ 0x33
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_shift) & ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_mask);
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	4013      	ands	r3, r2
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 80061c8:	4319      	orrs	r1, r3
 80061ca:	466b      	mov	r3, sp
 80061cc:	b2c9      	uxtb	r1, r1
 80061ce:	71d9      	strb	r1, [r3, #7]
            st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_CONF, aux );
 80061d0:	f000 fbba 	bl	8006948 <st25r3916WriteRegister>
            if( !gRFAL.wum.cfg.indAmp.autoAvg )
 80061d4:	783b      	ldrb	r3, [r7, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d111      	bne.n	80061fe <rfalWakeUpModeStart+0x1e6>
                if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 80061da:	0027      	movs	r7, r4
 80061dc:	378a      	adds	r7, #138	@ 0x8a
 80061de:	883b      	ldrh	r3, [r7, #0]
 80061e0:	2bff      	cmp	r3, #255	@ 0xff
 80061e2:	d106      	bne.n	80061f2 <rfalWakeUpModeStart+0x1da>
                    st25r3916MeasureAmplitude( &aux );
 80061e4:	466b      	mov	r3, sp
 80061e6:	1dd8      	adds	r0, r3, #7
 80061e8:	f000 f96a 	bl	80064c0 <st25r3916MeasureAmplitude>
                    gRFAL.wum.cfg.indAmp.reference = aux;
 80061ec:	466b      	mov	r3, sp
 80061ee:	79db      	ldrb	r3, [r3, #7]
 80061f0:	803b      	strh	r3, [r7, #0]
                st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.indAmp.reference );
 80061f2:	0023      	movs	r3, r4
 80061f4:	338a      	adds	r3, #138	@ 0x8a
 80061f6:	2034      	movs	r0, #52	@ 0x34
 80061f8:	7819      	ldrb	r1, [r3, #0]
 80061fa:	f000 fba5 	bl	8006948 <st25r3916WriteRegister>
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wam;
 80061fe:	2304      	movs	r3, #4
 8006200:	431d      	orrs	r5, r3
            irqs |= ST25R3916_IRQ_MASK_WAM;
 8006202:	2380      	movs	r3, #128	@ 0x80
 8006204:	02db      	lsls	r3, r3, #11
 8006206:	431e      	orrs	r6, r3
        if( gRFAL.wum.cfg.indPha.enabled )
 8006208:	0023      	movs	r3, r4
 800620a:	3390      	adds	r3, #144	@ 0x90
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d033      	beq.n	800627a <rfalWakeUpModeStart+0x262>
            aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3916_REG_PHASE_MEASURE_CONF_pm_d_shift);
 8006212:	0023      	movs	r3, r4
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8006214:	0027      	movs	r7, r4
            aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3916_REG_PHASE_MEASURE_CONF_pm_d_shift);
 8006216:	3391      	adds	r3, #145	@ 0x91
 8006218:	7819      	ldrb	r1, [r3, #0]
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 800621a:	3796      	adds	r7, #150	@ 0x96
 800621c:	783b      	ldrb	r3, [r7, #0]
            aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3916_REG_PHASE_MEASURE_CONF_pm_d_shift);
 800621e:	0109      	lsls	r1, r1, #4
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8006220:	4319      	orrs	r1, r3
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 8006222:	0023      	movs	r3, r4
 8006224:	3397      	adds	r3, #151	@ 0x97
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8006226:	781b      	ldrb	r3, [r3, #0]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_shift) & ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_mask);
 8006228:	2206      	movs	r2, #6
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	4319      	orrs	r1, r3
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_shift) & ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_mask);
 800622e:	0023      	movs	r3, r4
 8006230:	3398      	adds	r3, #152	@ 0x98
 8006232:	781b      	ldrb	r3, [r3, #0]
            st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_CONF, aux );
 8006234:	2037      	movs	r0, #55	@ 0x37
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_shift) & ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_mask);
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	4013      	ands	r3, r2
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 800623a:	4319      	orrs	r1, r3
 800623c:	466b      	mov	r3, sp
 800623e:	b2c9      	uxtb	r1, r1
 8006240:	71d9      	strb	r1, [r3, #7]
            st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_CONF, aux );
 8006242:	f000 fb81 	bl	8006948 <st25r3916WriteRegister>
            if( !gRFAL.wum.cfg.indPha.autoAvg )
 8006246:	783b      	ldrb	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d111      	bne.n	8006270 <rfalWakeUpModeStart+0x258>
                if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 800624c:	0027      	movs	r7, r4
 800624e:	3794      	adds	r7, #148	@ 0x94
 8006250:	883b      	ldrh	r3, [r7, #0]
 8006252:	2bff      	cmp	r3, #255	@ 0xff
 8006254:	d106      	bne.n	8006264 <rfalWakeUpModeStart+0x24c>
                    st25r3916MeasurePhase( &aux );
 8006256:	466b      	mov	r3, sp
 8006258:	1dd8      	adds	r0, r3, #7
 800625a:	f000 f939 	bl	80064d0 <st25r3916MeasurePhase>
                    gRFAL.wum.cfg.indPha.reference = aux;
 800625e:	466b      	mov	r3, sp
 8006260:	79db      	ldrb	r3, [r3, #7]
 8006262:	803b      	strh	r3, [r7, #0]
                st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.indPha.reference );
 8006264:	0023      	movs	r3, r4
 8006266:	3394      	adds	r3, #148	@ 0x94
 8006268:	2038      	movs	r0, #56	@ 0x38
 800626a:	7819      	ldrb	r1, [r3, #0]
 800626c:	f000 fb6c 	bl	8006948 <st25r3916WriteRegister>
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wph;
 8006270:	2302      	movs	r3, #2
 8006272:	431d      	orrs	r5, r3
            irqs |= ST25R3916_IRQ_MASK_WPH;
 8006274:	2380      	movs	r3, #128	@ 0x80
 8006276:	029b      	lsls	r3, r3, #10
 8006278:	431e      	orrs	r6, r3
        if( gRFAL.wum.cfg.cap.enabled )
 800627a:	0023      	movs	r3, r4
 800627c:	339a      	adds	r3, #154	@ 0x9a
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d100      	bne.n	8006286 <rfalWakeUpModeStart+0x26e>
 8006284:	e759      	b.n	800613a <rfalWakeUpModeStart+0x122>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_tx_en) );
 8006286:	2188      	movs	r1, #136	@ 0x88
 8006288:	2002      	movs	r0, #2
 800628a:	f000 fc32 	bl	8006af2 <st25r3916ClrRegisterBits>
            st25r3916CalibrateCapacitiveSensor( NULL );
 800628e:	2000      	movs	r0, #0
 8006290:	f000 f92e 	bl	80064f0 <st25r3916CalibrateCapacitiveSensor>
            aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_d_shift);
 8006294:	0023      	movs	r3, r4
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8006296:	0027      	movs	r7, r4
            aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_d_shift);
 8006298:	339b      	adds	r3, #155	@ 0x9b
 800629a:	7819      	ldrb	r1, [r3, #0]
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 800629c:	379e      	adds	r7, #158	@ 0x9e
 800629e:	783b      	ldrb	r3, [r7, #0]
            aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_d_shift);
 80062a0:	0109      	lsls	r1, r1, #4
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 80062a2:	4319      	orrs	r1, r3
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 80062a4:	0023      	movs	r3, r4
 80062a6:	339f      	adds	r3, #159	@ 0x9f
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 80062a8:	781b      	ldrb	r3, [r3, #0]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_shift) & ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_mask);
 80062aa:	2206      	movs	r2, #6
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	4319      	orrs	r1, r3
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_shift) & ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_mask);
 80062b0:	0023      	movs	r3, r4
 80062b2:	33a0      	adds	r3, #160	@ 0xa0
 80062b4:	781b      	ldrb	r3, [r3, #0]
            st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_CONF, aux );
 80062b6:	203b      	movs	r0, #59	@ 0x3b
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_shift) & ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_mask);
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	4013      	ands	r3, r2
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 80062bc:	4319      	orrs	r1, r3
 80062be:	466b      	mov	r3, sp
 80062c0:	b2c9      	uxtb	r1, r1
 80062c2:	71d9      	strb	r1, [r3, #7]
            st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_CONF, aux );
 80062c4:	f000 fb40 	bl	8006948 <st25r3916WriteRegister>
            if( (!gRFAL.wum.cfg.cap.autoAvg) || (gRFAL.wum.cfg.swTagDetect) )
 80062c8:	783b      	ldrb	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d004      	beq.n	80062d8 <rfalWakeUpModeStart+0x2c0>
 80062ce:	0023      	movs	r3, r4
 80062d0:	3384      	adds	r3, #132	@ 0x84
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d011      	beq.n	80062fc <rfalWakeUpModeStart+0x2e4>
                if( gRFAL.wum.cfg.cap.reference == RFAL_WUM_REFERENCE_AUTO )
 80062d8:	0027      	movs	r7, r4
 80062da:	379c      	adds	r7, #156	@ 0x9c
 80062dc:	883b      	ldrh	r3, [r7, #0]
 80062de:	2bff      	cmp	r3, #255	@ 0xff
 80062e0:	d106      	bne.n	80062f0 <rfalWakeUpModeStart+0x2d8>
                    st25r3916MeasureCapacitance( &aux );
 80062e2:	466b      	mov	r3, sp
 80062e4:	1dd8      	adds	r0, r3, #7
 80062e6:	f000 f8fb 	bl	80064e0 <st25r3916MeasureCapacitance>
                    gRFAL.wum.cfg.cap.reference = aux;
 80062ea:	466b      	mov	r3, sp
 80062ec:	79db      	ldrb	r3, [r3, #7]
 80062ee:	803b      	strh	r3, [r7, #0]
                st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.cap.reference );
 80062f0:	0023      	movs	r3, r4
 80062f2:	339c      	adds	r3, #156	@ 0x9c
 80062f4:	203c      	movs	r0, #60	@ 0x3c
 80062f6:	7819      	ldrb	r1, [r3, #0]
 80062f8:	f000 fb26 	bl	8006948 <st25r3916WriteRegister>
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wcap;
 80062fc:	2301      	movs	r3, #1
 80062fe:	431d      	orrs	r5, r3
            irqs |= ST25R3916_IRQ_MASK_WCAP;
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	025b      	lsls	r3, r3, #9
 8006304:	431e      	orrs	r6, r3
 8006306:	e718      	b.n	800613a <rfalWakeUpModeStart+0x122>
 8006308:	2680      	movs	r6, #128	@ 0x80
 800630a:	0336      	lsls	r6, r6, #12
 800630c:	e743      	b.n	8006196 <rfalWakeUpModeStart+0x17e>
 800630e:	46c0      	nop			@ (mov r8, r8)
 8006310:	20001554 	.word	0x20001554
 8006314:	00000201 	.word	0x00000201

08006318 <rfalWakeUpModeHasWoke>:
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 8006318:	2001      	movs	r0, #1
 800631a:	4b03      	ldr	r3, [pc, #12]	@ (8006328 <rfalWakeUpModeHasWoke+0x10>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	4298      	cmp	r0, r3
 8006320:	4180      	sbcs	r0, r0
 8006322:	4240      	negs	r0, r0
}
 8006324:	4770      	bx	lr
 8006326:	46c0      	nop			@ (mov r8, r8)
 8006328:	200015d4 	.word	0x200015d4

0800632c <rfalWakeUpModeStop>:

/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
    /* Check if RFAL is in Wake-up mode */
    if( gRFAL.state != RFAL_STATE_WUM )
 800632c:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <rfalWakeUpModeStop+0x40>)
{
 800632e:	b570      	push	{r4, r5, r6, lr}
    if( gRFAL.state != RFAL_STATE_WUM )
 8006330:	781d      	ldrb	r5, [r3, #0]
    {
        return RFAL_ERR_WRONG_STATE;
 8006332:	2021      	movs	r0, #33	@ 0x21
    if( gRFAL.state != RFAL_STATE_WUM )
 8006334:	2d05      	cmp	r5, #5
 8006336:	d118      	bne.n	800636a <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8006338:	2400      	movs	r4, #0
 800633a:	3380      	adds	r3, #128	@ 0x80
    
    /* Disable Wake-Up Mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 800633c:	2104      	movs	r1, #4
 800633e:	381f      	subs	r0, #31
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8006340:	701c      	strb	r4, [r3, #0]
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8006342:	f000 fbd6 	bl	8006af2 <st25r3916ClrRegisterBits>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP) );
 8006346:	20f0      	movs	r0, #240	@ 0xf0
 8006348:	0300      	lsls	r0, r0, #12
 800634a:	f000 fd26 	bl	8006d9a <st25r3916DisableInterrupts>
    
    /* Stop any ongoing activity */
    st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 800634e:	20c2      	movs	r0, #194	@ 0xc2
 8006350:	f000 fb83 	bl	8006a5a <st25r3916ExecuteCommand>
    
    /* Re-Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 8006354:	2203      	movs	r2, #3
 8006356:	2002      	movs	r0, #2
 8006358:	0011      	movs	r1, r2
 800635a:	f000 fc04 	bl	8006b66 <st25r3916ChangeRegisterBits>
    
    /* Re-Enable the Oscillator */
    st25r3916OscOn();
 800635e:	f000 f81e 	bl	800639e <st25r3916OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 8006362:	0028      	movs	r0, r5
 8006364:	f004 fedc 	bl	800b120 <rfalSetAnalogConfig>
      
    return RFAL_ERR_NONE;
 8006368:	0020      	movs	r0, r4
}
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	20001554 	.word	0x20001554

08006370 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8006370:	b570      	push	{r4, r5, r6, lr}
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 8006372:	b2c4      	uxtb	r4, r0
 8006374:	0020      	movs	r0, r4
{
 8006376:	000d      	movs	r5, r1
 8006378:	0016      	movs	r6, r2
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 800637a:	f000 fc20 	bl	8006bbe <st25r3916IsRegValid>
 800637e:	0003      	movs	r3, r0
    {
        return RFAL_ERR_PARAM;
 8006380:	2007      	movs	r0, #7
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <rfalChipChangeRegBits+0x20>
    }
    
    return st25r3916ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 8006386:	0032      	movs	r2, r6
 8006388:	0029      	movs	r1, r5
 800638a:	0020      	movs	r0, r4
 800638c:	f000 fbeb 	bl	8006b66 <st25r3916ChangeRegisterBits>
}
 8006390:	bd70      	pop	{r4, r5, r6, pc}

08006392 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8006392:	b510      	push	{r4, lr}
    st25r3916ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 8006394:	b2c0      	uxtb	r0, r0
 8006396:	f000 fbeb 	bl	8006b70 <st25r3916ChangeTestRegisterBits>
    return RFAL_ERR_NONE;
}
 800639a:	2000      	movs	r0, #0
 800639c:	bd10      	pop	{r4, pc}

0800639e <st25r3916OscOn>:
/*******************************************************************************/
ReturnCode st25r3916OscOn( void )
{
    /* Check if oscillator is already turned on and stable                                                */
    /* Use ST25R3916_REG_OP_CONTROL_en instead of ST25R3916_REG_AUX_DISPLAY_osc_ok to be on the safe side */
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 800639e:	2280      	movs	r2, #128	@ 0x80
{
 80063a0:	b510      	push	{r4, lr}
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 80063a2:	0011      	movs	r1, r2
 80063a4:	2002      	movs	r0, #2
 80063a6:	f000 fbf9 	bl	8006b9c <st25r3916CheckReg>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d110      	bne.n	80063d0 <st25r3916OscOn+0x32>
    {
        /* Clear any eventual previous oscillator frequency stable IRQ and enable it */
        st25r3916ClearAndEnableInterrupts( ST25R3916_IRQ_MASK_OSC );
 80063ae:	3080      	adds	r0, #128	@ 0x80
 80063b0:	f000 fceb 	bl	8006d8a <st25r3916ClearAndEnableInterrupts>
        
        /* Clear any oscillator IRQ that was potentially pending on ST25R */
        st25r3916GetInterrupt( ST25R3916_IRQ_MASK_OSC );
 80063b4:	2080      	movs	r0, #128	@ 0x80
 80063b6:	f000 fcb7 	bl	8006d28 <st25r3916GetInterrupt>

        /* Enable oscillator and regulator output */
        st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 80063ba:	2180      	movs	r1, #128	@ 0x80
 80063bc:	2002      	movs	r0, #2
 80063be:	f000 fbaa 	bl	8006b16 <st25r3916SetRegisterBits>

        /* Wait for the oscillator interrupt */
        st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE );
 80063c2:	210a      	movs	r1, #10
 80063c4:	2080      	movs	r0, #128	@ 0x80
 80063c6:	f000 fc75 	bl	8006cb4 <st25r3916WaitForInterruptsTimed>
        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_OSC );
 80063ca:	2080      	movs	r0, #128	@ 0x80
 80063cc:	f000 fce5 	bl	8006d9a <st25r3916DisableInterrupts>
    }
    
    if( !st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_osc_ok, ST25R3916_REG_AUX_DISPLAY_osc_ok ) )
 80063d0:	2210      	movs	r2, #16
 80063d2:	2031      	movs	r0, #49	@ 0x31
 80063d4:	0011      	movs	r1, r2
 80063d6:	f000 fbe1 	bl	8006b9c <st25r3916CheckReg>
 80063da:	2301      	movs	r3, #1
 80063dc:	4058      	eors	r0, r3
 80063de:	b2c0      	uxtb	r0, r0
    {
        return RFAL_ERR_SYSTEM;
    }
    
    return RFAL_ERR_NONE;
}
 80063e0:	00c0      	lsls	r0, r0, #3
 80063e2:	bd10      	pop	{r4, pc}

080063e4 <st25r3916ExecuteCommandAndGetResult>:

/*******************************************************************************/
ReturnCode st25r3916ExecuteCommandAndGetResult( uint8_t cmd, uint8_t resReg, uint8_t tOut, uint8_t* result )
{
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	0007      	movs	r7, r0
    /* Clear and enable Direct Command interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 80063e8:	2080      	movs	r0, #128	@ 0x80
 80063ea:	0200      	lsls	r0, r0, #8
{
 80063ec:	0016      	movs	r6, r2
 80063ee:	001c      	movs	r4, r3
 80063f0:	000d      	movs	r5, r1
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 80063f2:	f000 fc99 	bl	8006d28 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_DCT );
 80063f6:	2080      	movs	r0, #128	@ 0x80
 80063f8:	0200      	lsls	r0, r0, #8
 80063fa:	f000 fcc1 	bl	8006d80 <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( cmd );
 80063fe:	0038      	movs	r0, r7
 8006400:	f000 fb2b 	bl	8006a5a <st25r3916ExecuteCommand>

    st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_DCT, tOut );
 8006404:	2080      	movs	r0, #128	@ 0x80
 8006406:	0031      	movs	r1, r6
 8006408:	0200      	lsls	r0, r0, #8
 800640a:	f000 fc53 	bl	8006cb4 <st25r3916WaitForInterruptsTimed>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_DCT );
 800640e:	2080      	movs	r0, #128	@ 0x80
 8006410:	0200      	lsls	r0, r0, #8
 8006412:	f000 fcc2 	bl	8006d9a <st25r3916DisableInterrupts>

    /* After execution read out the result if the pointer is not NULL */
    if( result != NULL )
 8006416:	2c00      	cmp	r4, #0
 8006418:	d003      	beq.n	8006422 <st25r3916ExecuteCommandAndGetResult+0x3e>
    {
        st25r3916ReadRegister( resReg, result);
 800641a:	0021      	movs	r1, r4
 800641c:	0028      	movs	r0, r5
 800641e:	f000 fa86 	bl	800692e <st25r3916ReadRegister>
    }

    return RFAL_ERR_NONE;

}
 8006422:	2000      	movs	r0, #0
 8006424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006426 <st25r3916MeasurePowerSupply>:


/*******************************************************************************/
uint8_t st25r3916MeasurePowerSupply( uint8_t mpsv )
{
 8006426:	b513      	push	{r0, r1, r4, lr}
 8006428:	0002      	movs	r2, r0
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3916ChangeRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_mpsv_mask, mpsv );
 800642a:	2107      	movs	r1, #7
 800642c:	202c      	movs	r0, #44	@ 0x2c
 800642e:	f000 fb9a 	bl	8006b66 <st25r3916ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_VDD, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_VDD, &result);
 8006432:	466b      	mov	r3, sp
 8006434:	1ddc      	adds	r4, r3, #7
 8006436:	0023      	movs	r3, r4
 8006438:	2264      	movs	r2, #100	@ 0x64
 800643a:	2125      	movs	r1, #37	@ 0x25
 800643c:	20df      	movs	r0, #223	@ 0xdf
 800643e:	f7ff ffd1 	bl	80063e4 <st25r3916ExecuteCommandAndGetResult>

    return result;
 8006442:	7820      	ldrb	r0, [r4, #0]
}
 8006444:	bd16      	pop	{r1, r2, r4, pc}

08006446 <st25r3916MeasureVoltage>:


/*******************************************************************************/
uint16_t st25r3916MeasureVoltage( uint8_t mpsv )
{
 8006446:	b510      	push	{r4, lr}
    uint8_t result; 
    uint16_t mV;

    result = st25r3916MeasurePowerSupply(mpsv);
 8006448:	f7ff ffed 	bl	8006426 <st25r3916MeasurePowerSupply>
   
    /* Convert cmd output into mV (each step represents 23.4 mV )*/
    mV  = ((uint16_t)result) * 23U;
 800644c:	2417      	movs	r4, #23
 800644e:	4344      	muls	r4, r0
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 8006450:	0080      	lsls	r0, r0, #2
 8006452:	210a      	movs	r1, #10
 8006454:	3005      	adds	r0, #5
 8006456:	f7f9 fe87 	bl	8000168 <__udivsi3>
    mV  = ((uint16_t)result) * 23U;
 800645a:	b2a4      	uxth	r4, r4
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 800645c:	1820      	adds	r0, r4, r0

    return mV;
 800645e:	b280      	uxth	r0, r0
}
 8006460:	bd10      	pop	{r4, pc}

08006462 <st25r3916AdjustRegulators>:


/*******************************************************************************/
ReturnCode st25r3916AdjustRegulators( uint16_t* result_mV )
{
 8006462:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t result;

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 8006464:	2180      	movs	r1, #128	@ 0x80
{
 8006466:	0005      	movs	r5, r0
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 8006468:	202c      	movs	r0, #44	@ 0x2c
 800646a:	f000 fb54 	bl	8006b16 <st25r3916SetRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 800646e:	2180      	movs	r1, #128	@ 0x80
 8006470:	202c      	movs	r0, #44	@ 0x2c
 8006472:	f000 fb3e 	bl	8006af2 <st25r3916ClrRegisterBits>

    /* Execute Adjust regulators cmd and retrieve result */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_ADJUST_REGULATORS, ST25R3916_REG_REGULATOR_RESULT, ST25R3916_TOUT_ADJUST_REGULATORS, &result );
 8006476:	466b      	mov	r3, sp
 8006478:	1ddc      	adds	r4, r3, #7
 800647a:	0023      	movs	r3, r4
 800647c:	2206      	movs	r2, #6
 800647e:	216c      	movs	r1, #108	@ 0x6c
 8006480:	20d6      	movs	r0, #214	@ 0xd6
 8006482:	f7ff ffaf 	bl	80063e4 <st25r3916ExecuteCommandAndGetResult>

    /* Calculate result in mV */
    result >>= ST25R3916_REG_REGULATOR_RESULT_reg_shift;
 8006486:	7823      	ldrb	r3, [r4, #0]
 8006488:	091b      	lsrs	r3, r3, #4
 800648a:	7023      	strb	r3, [r4, #0]
    
    if( result_mV != NULL )
 800648c:	2d00      	cmp	r5, #0
 800648e:	d015      	beq.n	80064bc <st25r3916AdjustRegulators+0x5a>
    {
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ST25R3916_REG_IO_CONF2_sup3V )  )
 8006490:	2280      	movs	r2, #128	@ 0x80
 8006492:	2001      	movs	r0, #1
 8006494:	0011      	movs	r1, r2
 8006496:	f000 fb81 	bl	8006b9c <st25r3916CheckReg>
 800649a:	23e1      	movs	r3, #225	@ 0xe1
 800649c:	2800      	cmp	r0, #0
 800649e:	d007      	beq.n	80064b0 <st25r3916AdjustRegulators+0x4e>
        {
            result -= ((result>4U) ? (5U) : 0U);          /* In 3.3V mode [0,4] are not used                       */
 80064a0:	7823      	ldrb	r3, [r4, #0]
 80064a2:	2200      	movs	r2, #0
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d900      	bls.n	80064aa <st25r3916AdjustRegulators+0x48>
 80064a8:	3205      	adds	r2, #5
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	7023      	strb	r3, [r4, #0]
            *result_mV = 2400U;                          /* Minimum regulated voltage 2.4V in case of 3.3V supply */
 80064ae:	2396      	movs	r3, #150	@ 0x96
        else
        {
            *result_mV = 3600U;                          /* Minimum regulated voltage 3.6V in case of 5V supply   */
        }
        
        *result_mV += (uint16_t)result * 100U;           /* 100mV steps in both 3.3V and 5V supply                */
 80064b0:	2164      	movs	r1, #100	@ 0x64
 80064b2:	7822      	ldrb	r2, [r4, #0]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	434a      	muls	r2, r1
 80064b8:	189b      	adds	r3, r3, r2
 80064ba:	802b      	strh	r3, [r5, #0]
    }
    return RFAL_ERR_NONE;
}
 80064bc:	2000      	movs	r0, #0
 80064be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080064c0 <st25r3916MeasureAmplitude>:


/*******************************************************************************/
ReturnCode st25r3916MeasureAmplitude( uint8_t* result )
{
 80064c0:	b510      	push	{r4, lr}
 80064c2:	0003      	movs	r3, r0
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_AMPLITUDE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_AMPLITUDE, result );
 80064c4:	220a      	movs	r2, #10
 80064c6:	2125      	movs	r1, #37	@ 0x25
 80064c8:	20d3      	movs	r0, #211	@ 0xd3
 80064ca:	f7ff ff8b 	bl	80063e4 <st25r3916ExecuteCommandAndGetResult>
}
 80064ce:	bd10      	pop	{r4, pc}

080064d0 <st25r3916MeasurePhase>:


/*******************************************************************************/
ReturnCode st25r3916MeasurePhase( uint8_t* result )
{
 80064d0:	b510      	push	{r4, lr}
 80064d2:	0003      	movs	r3, r0
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_PHASE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_PHASE, result );
 80064d4:	220a      	movs	r2, #10
 80064d6:	2125      	movs	r1, #37	@ 0x25
 80064d8:	20d9      	movs	r0, #217	@ 0xd9
 80064da:	f7ff ff83 	bl	80063e4 <st25r3916ExecuteCommandAndGetResult>
}
 80064de:	bd10      	pop	{r4, pc}

080064e0 <st25r3916MeasureCapacitance>:


/*******************************************************************************/
ReturnCode st25r3916MeasureCapacitance( uint8_t* result )
{
 80064e0:	b510      	push	{r4, lr}
 80064e2:	0003      	movs	r3, r0
#ifdef ST25R3916B
    return RFAL_ERR_NOTSUPP;
#else
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_CAPACITANCE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_CAPACITANCE, result );
 80064e4:	220a      	movs	r2, #10
 80064e6:	2125      	movs	r1, #37	@ 0x25
 80064e8:	20de      	movs	r0, #222	@ 0xde
 80064ea:	f7ff ff7b 	bl	80063e4 <st25r3916ExecuteCommandAndGetResult>
#endif /* ST25R3916B */
}
 80064ee:	bd10      	pop	{r4, pc}

080064f0 <st25r3916CalibrateCapacitiveSensor>:


/*******************************************************************************/
ReturnCode st25r3916CalibrateCapacitiveSensor( uint8_t* result )
{
 80064f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
#else
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_cs_mcal_mask );
 80064f2:	21f8      	movs	r1, #248	@ 0xf8
{
 80064f4:	0004      	movs	r4, r0
    st25r3916ClrRegisterBits( ST25R3916_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_cs_mcal_mask );
 80064f6:	202f      	movs	r0, #47	@ 0x2f
 80064f8:	f000 fafb 	bl	8006af2 <st25r3916ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_CALIBRATE_C_SENSOR, ST25R3916_REG_CAP_SENSOR_RESULT, ST25R3916_TOUT_CALIBRATE_CAP_SENSOR, &res );
 80064fc:	466b      	mov	r3, sp
 80064fe:	1ddd      	adds	r5, r3, #7
 8006500:	002b      	movs	r3, r5
 8006502:	2204      	movs	r2, #4
 8006504:	2130      	movs	r1, #48	@ 0x30
 8006506:	20dd      	movs	r0, #221	@ 0xdd
 8006508:	f7ff ff6c 	bl	80063e4 <st25r3916ExecuteCommandAndGetResult>
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 800650c:	2206      	movs	r2, #6
 800650e:	782b      	ldrb	r3, [r5, #0]
 8006510:	401a      	ands	r2, r3
 8006512:	2a04      	cmp	r2, #4
 8006514:	d106      	bne.n	8006524 <st25r3916CalibrateCapacitiveSensor+0x34>
        ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != RFAL_ERR_NONE) )
 8006516:	2800      	cmp	r0, #0
 8006518:	d104      	bne.n	8006524 <st25r3916CalibrateCapacitiveSensor+0x34>
    {
        return RFAL_ERR_IO;
    }
    
    if( result != NULL )
 800651a:	2c00      	cmp	r4, #0
 800651c:	d001      	beq.n	8006522 <st25r3916CalibrateCapacitiveSensor+0x32>
    {
        (*result) = (uint8_t)(res >> ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_shift);
 800651e:	08db      	lsrs	r3, r3, #3
 8006520:	7023      	strb	r3, [r4, #0]
    }
    
    return RFAL_ERR_NONE;
#endif /* ST25R3916B */    
}
 8006522:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        return RFAL_ERR_IO;
 8006524:	2003      	movs	r0, #3
 8006526:	e7fc      	b.n	8006522 <st25r3916CalibrateCapacitiveSensor+0x32>

08006528 <st25r3916SetBitrate>:


/*******************************************************************************/
ReturnCode st25r3916SetBitrate(uint8_t txrate, uint8_t rxrate)
{
 8006528:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg;

    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 800652a:	466b      	mov	r3, sp
 800652c:	1dde      	adds	r6, r3, #7
{
 800652e:	000d      	movs	r5, r1
 8006530:	0004      	movs	r4, r0
    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 8006532:	0031      	movs	r1, r6
 8006534:	2004      	movs	r0, #4
 8006536:	f000 f9fa 	bl	800692e <st25r3916ReadRegister>
    if( rxrate != ST25R3916_BR_DO_NOT_SET )
 800653a:	2dff      	cmp	r5, #255	@ 0xff
 800653c:	d008      	beq.n	8006550 <st25r3916SetBitrate+0x28>
    {
        if(rxrate > ST25R3916_BR_848)
 800653e:	2d03      	cmp	r5, #3
 8006540:	d901      	bls.n	8006546 <st25r3916SetBitrate+0x1e>
        {
            return RFAL_ERR_PARAM;
 8006542:	2007      	movs	r0, #7
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;

    }
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );    
}
 8006544:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_rxrate_mask);     /* MISRA 10.3 */
 8006546:	2203      	movs	r2, #3
 8006548:	7833      	ldrb	r3, [r6, #0]
 800654a:	4393      	bics	r3, r2
        reg |= rxrate << ST25R3916_REG_BIT_RATE_rxrate_shift;
 800654c:	431d      	orrs	r5, r3
 800654e:	7035      	strb	r5, [r6, #0]
    if( txrate != ST25R3916_BR_DO_NOT_SET )
 8006550:	2cff      	cmp	r4, #255	@ 0xff
 8006552:	d007      	beq.n	8006564 <st25r3916SetBitrate+0x3c>
        if(txrate > ST25R3916_BR_6780)
 8006554:	2c07      	cmp	r4, #7
 8006556:	d8f4      	bhi.n	8006542 <st25r3916SetBitrate+0x1a>
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 8006558:	2230      	movs	r2, #48	@ 0x30
 800655a:	7833      	ldrb	r3, [r6, #0]
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 800655c:	0124      	lsls	r4, r4, #4
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 800655e:	4393      	bics	r3, r2
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 8006560:	431c      	orrs	r4, r3
 8006562:	7034      	strb	r4, [r6, #0]
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );    
 8006564:	7831      	ldrb	r1, [r6, #0]
 8006566:	2004      	movs	r0, #4
 8006568:	f000 f9ee 	bl	8006948 <st25r3916WriteRegister>
 800656c:	e7ea      	b.n	8006544 <st25r3916SetBitrate+0x1c>
	...

08006570 <st25r3916PerformCollisionAvoidance>:


/*******************************************************************************/
ReturnCode st25r3916PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	0006      	movs	r6, r0
 8006574:	001f      	movs	r7, r3
    uint8_t    treMask;
    uint32_t   irqs;
    ReturnCode err;
    
    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 8006576:	0033      	movs	r3, r6
 8006578:	3338      	adds	r3, #56	@ 0x38
 800657a:	b2db      	uxtb	r3, r3
{
 800657c:	000c      	movs	r4, r1
 800657e:	0010      	movs	r0, r2
    {
        return RFAL_ERR_PARAM;
 8006580:	2507      	movs	r5, #7
    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 8006582:	2b01      	cmp	r3, #1
 8006584:	d827      	bhi.n	80065d6 <st25r3916PerformCollisionAvoidance+0x66>
    
    err = RFAL_ERR_INTERNAL;
    
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 8006586:	29ff      	cmp	r1, #255	@ 0xff
 8006588:	d127      	bne.n	80065da <st25r3916PerformCollisionAvoidance+0x6a>
    {
        treMask = 0;
 800658a:	2300      	movs	r3, #0
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 800658c:	2aff      	cmp	r2, #255	@ 0xff
 800658e:	d128      	bne.n	80065e2 <st25r3916PerformCollisionAvoidance+0x72>
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
    }
    
    /* Set n x TRFW */
    st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, nTRFW );
 8006590:	003a      	movs	r2, r7
 8006592:	2103      	movs	r1, #3
 8006594:	200a      	movs	r0, #10
 8006596:	f000 fae6 	bl	8006b66 <st25r3916ChangeRegisterBits>
        
    /*******************************************************************************/
    /* Enable and clear CA specific interrupts and execute command */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 800659a:	481c      	ldr	r0, [pc, #112]	@ (800660c <st25r3916PerformCollisionAvoidance+0x9c>)
 800659c:	f000 fbc4 	bl	8006d28 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 80065a0:	481a      	ldr	r0, [pc, #104]	@ (800660c <st25r3916PerformCollisionAvoidance+0x9c>)
 80065a2:	f000 fbed 	bl	8006d80 <st25r3916EnableInterrupts>
    
    st25r3916ExecuteCommand( FieldONCmd );
 80065a6:	0030      	movs	r0, r6
 80065a8:	f000 fa57 	bl	8006a5a <st25r3916ExecuteCommand>
    
    /*******************************************************************************/
    /* Wait for initial APON interrupt, indicating anticollision avoidance done and ST25R3916's 
     * field is now on, or a CAC indicating a collision */   
    irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_APON ), ST25R3916_TOUT_CA );    
 80065ac:	210a      	movs	r1, #10
 80065ae:	4818      	ldr	r0, [pc, #96]	@ (8006610 <st25r3916PerformCollisionAvoidance+0xa0>)
 80065b0:	f000 fb80 	bl	8006cb4 <st25r3916WaitForInterruptsTimed>
   
    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 80065b4:	2380      	movs	r3, #128	@ 0x80
 80065b6:	0004      	movs	r4, r0
 80065b8:	00db      	lsls	r3, r3, #3
    {        
        err = RFAL_ERR_RF_COLLISION;
 80065ba:	251d      	movs	r5, #29
    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 80065bc:	401c      	ands	r4, r3
 80065be:	4218      	tst	r0, r3
 80065c0:	d102      	bne.n	80065c8 <st25r3916PerformCollisionAvoidance+0x58>
    }
    else if( (ST25R3916_IRQ_MASK_APON & irqs) != 0U )
 80065c2:	0080      	lsls	r0, r0, #2
 80065c4:	d418      	bmi.n	80065f8 <st25r3916PerformCollisionAvoidance+0x88>
    err = RFAL_ERR_INTERNAL;
 80065c6:	250c      	movs	r5, #12
    {
        /* MISRA 15.7 - Empty else */
    }

    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_EON) );
 80065c8:	20c0      	movs	r0, #192	@ 0xc0
 80065ca:	0140      	lsls	r0, r0, #5
 80065cc:	f000 fbac 	bl	8006d28 <st25r3916GetInterrupt>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 80065d0:	480e      	ldr	r0, [pc, #56]	@ (800660c <st25r3916PerformCollisionAvoidance+0x9c>)
 80065d2:	f000 fbe2 	bl	8006d9a <st25r3916DisableInterrupts>
    
    return err;
}
 80065d6:	0028      	movs	r0, r5
 80065d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 80065da:	2170      	movs	r1, #112	@ 0x70
 80065dc:	2aff      	cmp	r2, #255	@ 0xff
 80065de:	d002      	beq.n	80065e6 <st25r3916PerformCollisionAvoidance+0x76>
 80065e0:	000b      	movs	r3, r1
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask;
 80065e2:	210f      	movs	r1, #15
 80065e4:	4319      	orrs	r1, r3
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
 80065e6:	230f      	movs	r3, #15
 80065e8:	2270      	movs	r2, #112	@ 0x70
 80065ea:	4018      	ands	r0, r3
 80065ec:	4022      	ands	r2, r4
 80065ee:	4302      	orrs	r2, r0
 80065f0:	202a      	movs	r0, #42	@ 0x2a
 80065f2:	f000 fab8 	bl	8006b66 <st25r3916ChangeRegisterBits>
 80065f6:	e7cb      	b.n	8006590 <st25r3916PerformCollisionAvoidance+0x20>
        irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAT ), ST25R3916_TOUT_CA );        
 80065f8:	2580      	movs	r5, #128	@ 0x80
 80065fa:	00ad      	lsls	r5, r5, #2
 80065fc:	210a      	movs	r1, #10
 80065fe:	0028      	movs	r0, r5
 8006600:	f000 fb58 	bl	8006cb4 <st25r3916WaitForInterruptsTimed>
        if( (ST25R3916_IRQ_MASK_CAT & irqs) != 0U )                             /* No Collision detected, Field On */
 8006604:	4228      	tst	r0, r5
 8006606:	d0de      	beq.n	80065c6 <st25r3916PerformCollisionAvoidance+0x56>
            err = RFAL_ERR_NONE;
 8006608:	0025      	movs	r5, r4
 800660a:	e7dd      	b.n	80065c8 <st25r3916PerformCollisionAvoidance+0x58>
 800660c:	20000600 	.word	0x20000600
 8006610:	20000400 	.word	0x20000400

08006614 <st25r3916SetNumTxBits>:


/*******************************************************************************/
void st25r3916SetNumTxBits( uint16_t nBits )
{
 8006614:	b510      	push	{r4, lr}
 8006616:	0004      	movs	r4, r0
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xFFU) );
 8006618:	b2c1      	uxtb	r1, r0
 800661a:	2023      	movs	r0, #35	@ 0x23
 800661c:	f000 f994 	bl	8006948 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xFFU) );
 8006620:	0a21      	lsrs	r1, r4, #8
 8006622:	2022      	movs	r0, #34	@ 0x22
 8006624:	f000 f990 	bl	8006948 <st25r3916WriteRegister>
}
 8006628:	bd10      	pop	{r4, pc}

0800662a <st25r3916GetNumFIFOBytes>:


/*******************************************************************************/
uint16_t st25r3916GetNumFIFOBytes( void )
{
 800662a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t  reg;
    uint16_t result;
    
    
    st25r3916ReadRegister( ST25R3916_REG_FIFO_STATUS2, &reg );
 800662c:	466b      	mov	r3, sp
 800662e:	1ddd      	adds	r5, r3, #7
 8006630:	0029      	movs	r1, r5
 8006632:	201f      	movs	r0, #31
 8006634:	f000 f97b 	bl	800692e <st25r3916ReadRegister>
    reg    = ((reg & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift);
 8006638:	7828      	ldrb	r0, [r5, #0]
    result = ((uint16_t)reg << 8);
    
    st25r3916ReadRegister( ST25R3916_REG_FIFO_STATUS1, &reg );
 800663a:	0029      	movs	r1, r5
    reg    = ((reg & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift);
 800663c:	0980      	lsrs	r0, r0, #6
 800663e:	7028      	strb	r0, [r5, #0]
    result = ((uint16_t)reg << 8);
 8006640:	0204      	lsls	r4, r0, #8
    st25r3916ReadRegister( ST25R3916_REG_FIFO_STATUS1, &reg );
 8006642:	201e      	movs	r0, #30
 8006644:	f000 f973 	bl	800692e <st25r3916ReadRegister>
    result |= (((uint16_t)reg) & 0x00FFU);
 8006648:	7828      	ldrb	r0, [r5, #0]
 800664a:	4320      	orrs	r0, r4

    return result;
}
 800664c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

08006650 <st25r3916SetNoResponseTime>:
    
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
    
    
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 8006650:	2380      	movs	r3, #128	@ 0x80
{    
 8006652:	b570      	push	{r4, r5, r6, lr}
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 8006654:	025b      	lsls	r3, r3, #9
{    
 8006656:	0004      	movs	r4, r0
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 8006658:	4298      	cmp	r0, r3
 800665a:	d31c      	bcc.n	8006696 <st25r3916SetNoResponseTime+0x46>
    {
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
        
        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 800665c:	2380      	movs	r3, #128	@ 0x80
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 800665e:	343f      	adds	r4, #63	@ 0x3f
        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 8006660:	03db      	lsls	r3, r3, #15
 8006662:	429c      	cmp	r4, r3
 8006664:	d214      	bcs.n	8006690 <st25r3916SetNoResponseTime+0x40>
    err    = RFAL_ERR_NONE;
 8006666:	2500      	movs	r5, #0
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 8006668:	09a4      	lsrs	r4, r4, #6
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
 800666a:	2201      	movs	r2, #1
        {
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
            err = RFAL_ERR_PARAM;                                           /* Signal parameter error                              */
        }
        gST25R3916NRT_64fcs = (64U * tmpNRT);
 800666c:	01a3      	lsls	r3, r4, #6
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 800666e:	490c      	ldr	r1, [pc, #48]	@ (80066a0 <st25r3916SetNoResponseTime+0x50>)
    }

    /* Set the ST25R3916 NRT step units and the value */
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 8006670:	2012      	movs	r0, #18
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 8006672:	600b      	str	r3, [r1, #0]
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 8006674:	2101      	movs	r1, #1
 8006676:	f000 fa76 	bl	8006b66 <st25r3916ChangeRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER1, (uint8_t)(tmpNRT >> 8U) );
 800667a:	0a21      	lsrs	r1, r4, #8
 800667c:	b2c9      	uxtb	r1, r1
 800667e:	2010      	movs	r0, #16
 8006680:	f000 f962 	bl	8006948 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER2, (uint8_t)(tmpNRT & 0xFFU) );
 8006684:	b2e1      	uxtb	r1, r4
 8006686:	2011      	movs	r0, #17
 8006688:	f000 f95e 	bl	8006948 <st25r3916WriteRegister>

    return err;
}
 800668c:	0028      	movs	r0, r5
 800668e:	bd70      	pop	{r4, r5, r6, pc}
            err = RFAL_ERR_PARAM;                                           /* Signal parameter error                              */
 8006690:	2507      	movs	r5, #7
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
 8006692:	4c04      	ldr	r4, [pc, #16]	@ (80066a4 <st25r3916SetNoResponseTime+0x54>)
 8006694:	e7e9      	b.n	800666a <st25r3916SetNoResponseTime+0x1a>
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
 8006696:	2200      	movs	r2, #0
 8006698:	0003      	movs	r3, r0
    err    = RFAL_ERR_NONE;
 800669a:	0015      	movs	r5, r2
 800669c:	e7e7      	b.n	800666e <st25r3916SetNoResponseTime+0x1e>
 800669e:	46c0      	nop			@ (mov r8, r8)
 80066a0:	20001998 	.word	0x20001998
 80066a4:	0000ffff 	.word	0x0000ffff

080066a8 <st25r3916SetGPTime>:
}


/*******************************************************************************/
void st25r3916SetGPTime( uint16_t gpt_8fcs )
{
 80066a8:	b510      	push	{r4, lr}
 80066aa:	0004      	movs	r4, r0
    st25r3916WriteRegister( ST25R3916_REG_GPT1, (uint8_t)(gpt_8fcs >> 8) );
 80066ac:	0a01      	lsrs	r1, r0, #8
 80066ae:	2013      	movs	r0, #19
 80066b0:	f000 f94a 	bl	8006948 <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_GPT2, (uint8_t)(gpt_8fcs & 0xFFU) );
 80066b4:	b2e1      	uxtb	r1, r4
 80066b6:	2014      	movs	r0, #20
 80066b8:	f000 f946 	bl	8006948 <st25r3916WriteRegister>
}
 80066bc:	bd10      	pop	{r4, pc}

080066be <st25r3916SetStartGPTimer>:


/*******************************************************************************/
ReturnCode st25r3916SetStartGPTimer( uint16_t gpt_8fcs, uint8_t trigger_source )
{
 80066be:	b510      	push	{r4, lr}
 80066c0:	000c      	movs	r4, r1
    st25r3916SetGPTime( gpt_8fcs );
 80066c2:	f7ff fff1 	bl	80066a8 <st25r3916SetGPTime>
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, trigger_source );
 80066c6:	0022      	movs	r2, r4
 80066c8:	21e0      	movs	r1, #224	@ 0xe0
 80066ca:	2012      	movs	r0, #18
 80066cc:	f000 fa4b 	bl	8006b66 <st25r3916ChangeRegisterBits>
    
    /* If there's no trigger source, start GPT immediately */
    if( trigger_source == ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger )
 80066d0:	2c00      	cmp	r4, #0
 80066d2:	d102      	bne.n	80066da <st25r3916SetStartGPTimer+0x1c>
    {
        st25r3916ExecuteCommand( ST25R3916_CMD_START_GP_TIMER );
 80066d4:	20e0      	movs	r0, #224	@ 0xe0
 80066d6:	f000 f9c0 	bl	8006a5a <st25r3916ExecuteCommand>
    }

    return RFAL_ERR_NONE;
}
 80066da:	2000      	movs	r0, #0
 80066dc:	bd10      	pop	{r4, pc}

080066de <st25r3916CheckChipID>:


/*******************************************************************************/
bool st25r3916CheckChipID( uint8_t *rev )
{
 80066de:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t ID;
    
    ID = 0;
 80066e0:	466b      	mov	r3, sp
 80066e2:	2400      	movs	r4, #0
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 80066e4:	1dd9      	adds	r1, r3, #7
{
 80066e6:	0005      	movs	r5, r0
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 80066e8:	203f      	movs	r0, #63	@ 0x3f
    ID = 0;
 80066ea:	71dc      	strb	r4, [r3, #7]
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 80066ec:	f000 f91f 	bl	800692e <st25r3916ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3916's IC type code */
#if defined(ST25R3916)
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 80066f0:	466b      	mov	r3, sp
 80066f2:	79db      	ldrb	r3, [r3, #7]
 80066f4:	2207      	movs	r2, #7
 80066f6:	0019      	movs	r1, r3
    {
        return false;
 80066f8:	0020      	movs	r0, r4
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 80066fa:	4391      	bics	r1, r2
 80066fc:	2928      	cmp	r1, #40	@ 0x28
 80066fe:	d102      	bne.n	8006706 <st25r3916CheckChipID+0x28>
        return false;
    }
#endif /* ST25R3916 */
    
        
    if(rev != NULL)
 8006700:	42a5      	cmp	r5, r4
 8006702:	d101      	bne.n	8006708 <st25r3916CheckChipID+0x2a>
    {
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
    }
    
    return true;
 8006704:	2001      	movs	r0, #1
}
 8006706:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
 8006708:	4013      	ands	r3, r2
 800670a:	702b      	strb	r3, [r5, #0]
 800670c:	e7fa      	b.n	8006704 <st25r3916CheckChipID+0x26>
	...

08006710 <st25r3916Initialize>:
    platformSpiDeselect();
 8006710:	2090      	movs	r0, #144	@ 0x90
{
 8006712:	b510      	push	{r4, lr}
    platformSpiDeselect();
 8006714:	2201      	movs	r2, #1
 8006716:	2110      	movs	r1, #16
 8006718:	05c0      	lsls	r0, r0, #23
 800671a:	f000 fee9 	bl	80074f0 <HAL_GPIO_WritePin>
    st25r3916ExecuteCommand( ST25R3916_CMD_SET_DEFAULT );
 800671e:	20c1      	movs	r0, #193	@ 0xc1
 8006720:	f000 f99b 	bl	8006a5a <st25r3916ExecuteCommand>
    st25r3916WriteRegister(ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_io_drv_lvl);
 8006724:	2104      	movs	r1, #4
 8006726:	2001      	movs	r0, #1
 8006728:	f000 f90e 	bl	8006948 <st25r3916WriteRegister>
    if( !st25r3916CheckChipID( NULL ) )
 800672c:	2000      	movs	r0, #0
 800672e:	f7ff ffd6 	bl	80066de <st25r3916CheckChipID>
 8006732:	2800      	cmp	r0, #0
 8006734:	d106      	bne.n	8006744 <st25r3916Initialize+0x34>
        platformErrorHandle();
 8006736:	2177      	movs	r1, #119	@ 0x77
 8006738:	481a      	ldr	r0, [pc, #104]	@ (80067a4 <st25r3916Initialize+0x94>)
 800673a:	f00c fd29 	bl	8013190 <_Error_Handler>
        return RFAL_ERR_HW_MISMATCH;
 800673e:	2424      	movs	r4, #36	@ 0x24
}
 8006740:	0020      	movs	r0, r4
 8006742:	bd10      	pop	{r4, pc}
    st25r3916InitInterrupts();
 8006744:	f000 fa40 	bl	8006bc8 <st25r3916InitInterrupts>
    st25r3916ledInit();
 8006748:	f000 fb5a 	bl	8006e00 <st25r3916ledInit>
    gST25R3916NRT_64fcs = 0;
 800674c:	2200      	movs	r2, #0
 800674e:	4b16      	ldr	r3, [pc, #88]	@ (80067a8 <st25r3916Initialize+0x98>)
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 8006750:	2118      	movs	r1, #24
 8006752:	2001      	movs	r0, #1
    gST25R3916NRT_64fcs = 0;
 8006754:	601a      	str	r2, [r3, #0]
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 8006756:	f000 f9de 	bl	8006b16 <st25r3916SetRegisterBits>
    st25r3916ChangeTestRegisterBits( 0x04, 0x10, 0x10 );
 800675a:	2210      	movs	r2, #16
 800675c:	2004      	movs	r0, #4
 800675e:	0011      	movs	r1, r2
 8006760:	f000 fa06 	bl	8006b70 <st25r3916ChangeTestRegisterBits>
    ret = st25r3916OscOn();
 8006764:	f7ff fe1b 	bl	800639e <st25r3916OscOn>
 8006768:	1e04      	subs	r4, r0, #0
    if( ret != RFAL_ERR_NONE )
 800676a:	d004      	beq.n	8006776 <st25r3916Initialize+0x66>
        platformErrorHandle();
 800676c:	21b3      	movs	r1, #179	@ 0xb3
 800676e:	480d      	ldr	r0, [pc, #52]	@ (80067a4 <st25r3916Initialize+0x94>)
 8006770:	f00c fd0e 	bl	8013190 <_Error_Handler>
        return ret;
 8006774:	e7e4      	b.n	8006740 <st25r3916Initialize+0x30>
    vdd_mV = st25r3916MeasureVoltage( ST25R3916_REG_REGULATOR_CONTROL_mpsv_vdd );
 8006776:	f7ff fe66 	bl	8006446 <st25r3916MeasureVoltage>
    st25r3916ChangeRegisterBits( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ((vdd_mV < ST25R3916_SUPPLY_THRESHOLD) ? ST25R3916_REG_IO_CONF2_sup3V_3V : ST25R3916_REG_IO_CONF2_sup3V_5V) );
 800677a:	22e1      	movs	r2, #225	@ 0xe1
 800677c:	0112      	lsls	r2, r2, #4
 800677e:	4290      	cmp	r0, r2
 8006780:	4192      	sbcs	r2, r2
 8006782:	4252      	negs	r2, r2
 8006784:	01d2      	lsls	r2, r2, #7
 8006786:	2180      	movs	r1, #128	@ 0x80
 8006788:	2001      	movs	r0, #1
 800678a:	f000 f9ec 	bl	8006b66 <st25r3916ChangeRegisterBits>
    st25r3916TxRxOff();
 800678e:	2148      	movs	r1, #72	@ 0x48
 8006790:	2002      	movs	r0, #2
 8006792:	f000 f9ae 	bl	8006af2 <st25r3916ClrRegisterBits>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 8006796:	2001      	movs	r0, #1
 8006798:	4240      	negs	r0, r0
 800679a:	f000 fafe 	bl	8006d9a <st25r3916DisableInterrupts>
    st25r3916ClearInterrupts();
 800679e:	f000 fb03 	bl	8006da8 <st25r3916ClearInterrupts>
    return RFAL_ERR_NONE;
 80067a2:	e7cd      	b.n	8006740 <st25r3916Initialize+0x30>
 80067a4:	08013dd2 	.word	0x08013dd2
 80067a8:	20001998 	.word	0x20001998

080067ac <st25r3916StreamConfigure>:
}


/*******************************************************************************/
ReturnCode st25r3916StreamConfigure(const struct st25r3916StreamConfig *config)
{
 80067ac:	b570      	push	{r4, r5, r6, lr}
    uint8_t smd;
    uint8_t mode;

    smd = 0;
    
    if( config->useBPSK != 0U )
 80067ae:	7801      	ldrb	r1, [r0, #0]
{
 80067b0:	0002      	movs	r2, r0
    {
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 80067b2:	7843      	ldrb	r3, [r0, #1]
    if( config->useBPSK != 0U )
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d020      	beq.n	80067fa <st25r3916StreamConfigure+0x4e>
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 80067b8:	1e99      	subs	r1, r3, #2
        {
            return RFAL_ERR_PARAM;
 80067ba:	2007      	movs	r0, #7
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 80067bc:	2902      	cmp	r1, #2
 80067be:	d81b      	bhi.n	80067f8 <st25r3916StreamConfigure+0x4c>
        }
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 80067c0:	2104      	movs	r1, #4
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
 80067c2:	2478      	movs	r4, #120	@ 0x78
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 80067c4:	1ac9      	subs	r1, r1, r3
 80067c6:	0149      	lsls	r1, r1, #5
 80067c8:	b2c9      	uxtb	r1, r1
        {
            return RFAL_ERR_PARAM;
        }
    }

    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 80067ca:	2307      	movs	r3, #7
 80067cc:	7895      	ldrb	r5, [r2, #2]
            return RFAL_ERR_PARAM;
 80067ce:	0018      	movs	r0, r3
    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 80067d0:	1e6e      	subs	r6, r5, #1
 80067d2:	2e06      	cmp	r6, #6
 80067d4:	d810      	bhi.n	80067f8 <st25r3916StreamConfigure+0x4c>
    {
        return RFAL_ERR_PARAM;
    }
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;

    if( config->report_period_length > 3U )
 80067d6:	78d2      	ldrb	r2, [r2, #3]
 80067d8:	2a03      	cmp	r2, #3
 80067da:	d80d      	bhi.n	80067f8 <st25r3916StreamConfigure+0x4c>
    {
        return RFAL_ERR_PARAM;
    }
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 80067dc:	00d2      	lsls	r2, r2, #3
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;
 80067de:	1b5b      	subs	r3, r3, r5
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 80067e0:	4313      	orrs	r3, r2
 80067e2:	4319      	orrs	r1, r3

    st25r3916WriteRegister(ST25R3916_REG_STREAM_MODE, smd);
 80067e4:	b2c9      	uxtb	r1, r1
 80067e6:	3002      	adds	r0, #2
 80067e8:	f000 f8ae 	bl	8006948 <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_mask, mode);
 80067ec:	0022      	movs	r2, r4
 80067ee:	2178      	movs	r1, #120	@ 0x78
 80067f0:	2003      	movs	r0, #3
 80067f2:	f000 f9b8 	bl	8006b66 <st25r3916ChangeRegisterBits>

    return RFAL_ERR_NONE;
 80067f6:	2000      	movs	r0, #0
}
 80067f8:	bd70      	pop	{r4, r5, r6, pc}
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 80067fa:	1ed9      	subs	r1, r3, #3
            return RFAL_ERR_PARAM;
 80067fc:	2007      	movs	r0, #7
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 80067fe:	2903      	cmp	r1, #3
 8006800:	d8fa      	bhi.n	80067f8 <st25r3916StreamConfigure+0x4c>
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 8006802:	2106      	movs	r1, #6
 8006804:	1ac9      	subs	r1, r1, r3
        if( config->report_period_length == 0U )
 8006806:	78d3      	ldrb	r3, [r2, #3]
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 8006808:	0149      	lsls	r1, r1, #5
 800680a:	b2c9      	uxtb	r1, r1
        if( config->report_period_length == 0U )
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f3      	beq.n	80067f8 <st25r3916StreamConfigure+0x4c>
        mode = ST25R3916_REG_MODE_om_subcarrier_stream;
 8006810:	2470      	movs	r4, #112	@ 0x70
 8006812:	e7da      	b.n	80067ca <st25r3916StreamConfigure+0x1e>

08006814 <st25r3916comStop>:
#ifdef RFAL_USE_I2C
    /* Generate Stop signal */
    st25r3916I2CStop();
#else
    /* Release the chip select */
    platformSpiDeselect();
 8006814:	2090      	movs	r0, #144	@ 0x90
 8006816:	2201      	movs	r2, #1
 8006818:	2110      	movs	r1, #16
{
 800681a:	b510      	push	{r4, lr}
    platformSpiDeselect();
 800681c:	05c0      	lsls	r0, r0, #23
 800681e:	f000 fe67 	bl	80074f0 <HAL_GPIO_WritePin>
#endif /* RFAL_USE_I2C */
    
    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25RComm();
 8006822:	4a05      	ldr	r2, [pc, #20]	@ (8006838 <st25r3916comStop+0x24>)
 8006824:	7813      	ldrb	r3, [r2, #0]
 8006826:	3b01      	subs	r3, #1
 8006828:	b2db      	uxtb	r3, r3
 800682a:	7013      	strb	r3, [r2, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <st25r3916comStop+0x22>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006830:	2220      	movs	r2, #32
 8006832:	4b02      	ldr	r3, [pc, #8]	@ (800683c <st25r3916comStop+0x28>)
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	bd10      	pop	{r4, pc}
 8006838:	20003074 	.word	0x20003074
 800683c:	e000e100 	.word	0xe000e100

08006840 <st25r3916comTx.part.0>:
}
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
 8006840:	b510      	push	{r4, lr}
 8006842:	000a      	movs	r2, r1
            {
                platformSpiTxRx( comBuf, NULL, comBufIt );
            }
            
        #else
            platformSpiTxRx( txBuf, NULL, txLen );
 8006844:	2100      	movs	r1, #0
 8006846:	f00b fe77 	bl	8012538 <BSP_NFC0XCOMM_SendRecv>
        #endif /* ST25R_COM_SINGLETXRX */
            
#endif /* RFAL_USE_I2C */
    }
}
 800684a:	bd10      	pop	{r4, pc}

0800684c <st25r3916comRx.part.0>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	0004      	movs	r4, r0
 8006850:	000d      	movs	r5, r1
    #ifdef ST25R_COM_SINGLETXRX
        RFAL_MEMSET( &comBuf[comBufIt], 0x00, RFAL_MIN( rxLen, (uint16_t)(ST25R3916_BUF_LEN - comBufIt) ) );     /* clear outgoing buffer                                  */
        platformSpiTxRx( comBuf, comBuf, RFAL_MIN( (comBufIt + rxLen), ST25R3916_BUF_LEN ) );                  /* transceive as a single SPI call                        */
        RFAL_MEMCPY( rxBuf, &comBuf[comBufIt], RFAL_MIN( rxLen, (uint16_t)(ST25R3916_BUF_LEN - comBufIt) ) );    /* copy from local buf to output buffer and skip cmd byte */
    #else
        if( rxBuf != NULL)
 8006852:	2800      	cmp	r0, #0
 8006854:	d003      	beq.n	800685e <st25r3916comRx.part.0+0x12>
        {
            RFAL_MEMSET( rxBuf, 0x00, rxLen );                                                              /* clear outgoing buffer                                  */
 8006856:	000a      	movs	r2, r1
 8006858:	2100      	movs	r1, #0
 800685a:	f00c fd2b 	bl	80132b4 <memset>
        }
        platformSpiTxRx( NULL, rxBuf, rxLen );
 800685e:	002a      	movs	r2, r5
 8006860:	0021      	movs	r1, r4
 8006862:	2000      	movs	r0, #0
 8006864:	f00b fe68 	bl	8012538 <BSP_NFC0XCOMM_SendRecv>
    #endif /* ST25R_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 8006868:	bd70      	pop	{r4, r5, r6, pc}
	...

0800686c <st25r3916comStart>:
{
 800686c:	b510      	push	{r4, lr}
    platformProtectST25RComm();
 800686e:	4a0c      	ldr	r2, [pc, #48]	@ (80068a0 <st25r3916comStart+0x34>)
 8006870:	7813      	ldrb	r3, [r2, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	7013      	strb	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006876:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800687a:	2220      	movs	r2, #32
 800687c:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <st25r3916comStart+0x38>)
 800687e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006884:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8006888:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800688c:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8006890:	2090      	movs	r0, #144	@ 0x90
 8006892:	2200      	movs	r2, #0
 8006894:	2110      	movs	r1, #16
 8006896:	05c0      	lsls	r0, r0, #23
 8006898:	f000 fe2a 	bl	80074f0 <HAL_GPIO_WritePin>
}
 800689c:	bd10      	pop	{r4, pc}
 800689e:	46c0      	nop			@ (mov r8, r8)
 80068a0:	20003074 	.word	0x20003074
 80068a4:	e000e104 	.word	0xe000e104

080068a8 <st25r3916ReadMultipleRegisters.part.0>:
    return st25r3916ReadMultipleRegisters( reg, val, ST25R3916_REG_LEN );
}


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
 80068a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068aa:	0004      	movs	r4, r0
 80068ac:	000d      	movs	r5, r1
 80068ae:	0016      	movs	r6, r2
{
    if( length > 0U )
    {
        st25r3916comStart();
 80068b0:	f7ff ffdc 	bl	800686c <st25r3916comStart>
        
        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 80068b4:	0663      	lsls	r3, r4, #25
 80068b6:	d506      	bpl.n	80068c6 <st25r3916ReadMultipleRegisters.part.0+0x1e>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80068b8:	466a      	mov	r2, sp
 80068ba:	23fb      	movs	r3, #251	@ 0xfb
 80068bc:	2101      	movs	r1, #1
 80068be:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 80068c0:	1dd0      	adds	r0, r2, #7
 80068c2:	f7ff ffbd 	bl	8006840 <st25r3916comTx.part.0>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 80068c6:	2340      	movs	r3, #64	@ 0x40
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80068c8:	466a      	mov	r2, sp
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 80068ca:	4323      	orrs	r3, r4
 80068cc:	1dd0      	adds	r0, r2, #7
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80068ce:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 80068d0:	2101      	movs	r1, #1
 80068d2:	f7ff ffb5 	bl	8006840 <st25r3916comTx.part.0>
    if( rxLen > 0U )
 80068d6:	0031      	movs	r1, r6
 80068d8:	0028      	movs	r0, r5
 80068da:	f7ff ffb7 	bl	800684c <st25r3916comRx.part.0>
        st25r3916comRepeatStart();
        st25r3916comRx( values, length );
        st25r3916comStop();
 80068de:	f7ff ff99 	bl	8006814 <st25r3916comStop>
    }
    
    return RFAL_ERR_NONE;
}
 80068e2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080068e4 <st25r3916WriteMultipleRegisters.part.0>:
    return st25r3916WriteMultipleRegisters( reg, &value, ST25R3916_REG_LEN );
}


/*******************************************************************************/
ReturnCode st25r3916WriteMultipleRegisters( uint8_t reg, const uint8_t* values, uint8_t length )
 80068e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068e6:	0004      	movs	r4, r0
 80068e8:	000d      	movs	r5, r1
 80068ea:	0016      	movs	r6, r2
{
    if( length > 0U )
    {
        st25r3916comStart();
 80068ec:	f7ff ffbe 	bl	800686c <st25r3916comStart>
        
        if( (reg & ST25R3916_SPACE_B) != 0U )
 80068f0:	0663      	lsls	r3, r4, #25
 80068f2:	d506      	bpl.n	8006902 <st25r3916WriteMultipleRegisters.part.0+0x1e>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80068f4:	466a      	mov	r2, sp
 80068f6:	23fb      	movs	r3, #251	@ 0xfb
 80068f8:	2101      	movs	r1, #1
 80068fa:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 80068fc:	1dd0      	adds	r0, r2, #7
 80068fe:	f7ff ff9f 	bl	8006840 <st25r3916comTx.part.0>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, true );
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_WRITE_MODE), false, true );
 8006902:	2340      	movs	r3, #64	@ 0x40
 8006904:	0022      	movs	r2, r4
 8006906:	439a      	bics	r2, r3
 8006908:	0013      	movs	r3, r2
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 800690a:	466a      	mov	r2, sp
 800690c:	2101      	movs	r1, #1
 800690e:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 8006910:	1dd0      	adds	r0, r2, #7
 8006912:	f7ff ff95 	bl	8006840 <st25r3916comTx.part.0>
 8006916:	0031      	movs	r1, r6
 8006918:	0028      	movs	r0, r5
 800691a:	f7ff ff91 	bl	8006840 <st25r3916comTx.part.0>
        st25r3916comTx( values, length, true, true );
        st25r3916comStop();
 800691e:	f7ff ff79 	bl	8006814 <st25r3916comStop>
        
        /* Send a WriteMultiReg event to LED handling */
        st25r3916ledEvtWrMultiReg( reg, values, length);
 8006922:	0032      	movs	r2, r6
 8006924:	0029      	movs	r1, r5
 8006926:	0020      	movs	r0, r4
 8006928:	f000 fa94 	bl	8006e54 <st25r3916ledEvtWrMultiReg>
    }
    
    return RFAL_ERR_NONE;
}
 800692c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

0800692e <st25r3916ReadRegister>:
{
 800692e:	b510      	push	{r4, lr}
 8006930:	2201      	movs	r2, #1
}
 8006932:	f7ff ffb9 	bl	80068a8 <st25r3916ReadMultipleRegisters.part.0>
 8006936:	2000      	movs	r0, #0
 8006938:	bd10      	pop	{r4, pc}

0800693a <st25r3916ReadMultipleRegisters>:
{
 800693a:	b510      	push	{r4, lr}
    if( length > 0U )
 800693c:	2a00      	cmp	r2, #0
 800693e:	d001      	beq.n	8006944 <st25r3916ReadMultipleRegisters+0xa>
 8006940:	f7ff ffb2 	bl	80068a8 <st25r3916ReadMultipleRegisters.part.0>
}
 8006944:	2000      	movs	r0, #0
 8006946:	bd10      	pop	{r4, pc}

08006948 <st25r3916WriteRegister>:
{
 8006948:	b507      	push	{r0, r1, r2, lr}
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 800694a:	466b      	mov	r3, sp
 800694c:	71d9      	strb	r1, [r3, #7]
 800694e:	3307      	adds	r3, #7
    if( length > 0U )
 8006950:	2201      	movs	r2, #1
 8006952:	0019      	movs	r1, r3
 8006954:	f7ff ffc6 	bl	80068e4 <st25r3916WriteMultipleRegisters.part.0>
}
 8006958:	2000      	movs	r0, #0
 800695a:	bd0e      	pop	{r1, r2, r3, pc}

0800695c <st25r3916WriteFifo>:


/*******************************************************************************/
ReturnCode st25r3916WriteFifo( const uint8_t* values, uint16_t length )
{
    if( length > ST25R3916_FIFO_DEPTH )
 800695c:	2380      	movs	r3, #128	@ 0x80
{
 800695e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( length > ST25R3916_FIFO_DEPTH )
 8006960:	009b      	lsls	r3, r3, #2
{
 8006962:	0005      	movs	r5, r0
 8006964:	000c      	movs	r4, r1
    {
        return RFAL_ERR_PARAM;
 8006966:	2007      	movs	r0, #7
    if( length > ST25R3916_FIFO_DEPTH )
 8006968:	4299      	cmp	r1, r3
 800696a:	d802      	bhi.n	8006972 <st25r3916WriteFifo+0x16>
    }
    
    if( length > 0U )
 800696c:	2900      	cmp	r1, #0
 800696e:	d101      	bne.n	8006974 <st25r3916WriteFifo+0x18>
        st25r3916comTxByte( ST25R3916_FIFO_LOAD, false, true );
        st25r3916comTx( values, length, true, true );
        st25r3916comStop();
    }

    return RFAL_ERR_NONE;
 8006970:	2000      	movs	r0, #0
}
 8006972:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        st25r3916comStart();
 8006974:	f7ff ff7a 	bl	800686c <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8006978:	466b      	mov	r3, sp
 800697a:	1dd8      	adds	r0, r3, #7
 800697c:	2380      	movs	r3, #128	@ 0x80
 800697e:	2101      	movs	r1, #1
 8006980:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 8006982:	f7ff ff5d 	bl	8006840 <st25r3916comTx.part.0>
 8006986:	0021      	movs	r1, r4
 8006988:	0028      	movs	r0, r5
 800698a:	f7ff ff59 	bl	8006840 <st25r3916comTx.part.0>
        st25r3916comStop();
 800698e:	f7ff ff41 	bl	8006814 <st25r3916comStop>
 8006992:	e7ed      	b.n	8006970 <st25r3916WriteFifo+0x14>

08006994 <st25r3916ReadFifo>:


/*******************************************************************************/
ReturnCode st25r3916ReadFifo( uint8_t* buf, uint16_t length )
{
 8006994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006996:	0005      	movs	r5, r0
 8006998:	1e0c      	subs	r4, r1, #0
    if( length > 0U )
 800699a:	d00e      	beq.n	80069ba <st25r3916ReadFifo+0x26>
    {
        st25r3916comStart();
 800699c:	f7ff ff66 	bl	800686c <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80069a0:	466b      	mov	r3, sp
 80069a2:	1dd8      	adds	r0, r3, #7
 80069a4:	239f      	movs	r3, #159	@ 0x9f
 80069a6:	2101      	movs	r1, #1
 80069a8:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 80069aa:	f7ff ff49 	bl	8006840 <st25r3916comTx.part.0>
    if( rxLen > 0U )
 80069ae:	0021      	movs	r1, r4
 80069b0:	0028      	movs	r0, r5
 80069b2:	f7ff ff4b 	bl	800684c <st25r3916comRx.part.0>
        st25r3916comTxByte( ST25R3916_FIFO_READ, true, false );
        
        st25r3916comRepeatStart();
        st25r3916comRx( buf, length );
        st25r3916comStop();
 80069b6:	f7ff ff2d 	bl	8006814 <st25r3916comStop>
    }

    return RFAL_ERR_NONE;
}
 80069ba:	2000      	movs	r0, #0
 80069bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080069be <st25r3916WritePTMem>:


/*******************************************************************************/
ReturnCode st25r3916WritePTMem( const uint8_t* values, uint16_t length )
{
 80069be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069c0:	0005      	movs	r5, r0
 80069c2:	000c      	movs	r4, r1
    if( length > ST25R3916_PTM_LEN )
    {
        return RFAL_ERR_PARAM;
 80069c4:	2007      	movs	r0, #7
    if( length > ST25R3916_PTM_LEN )
 80069c6:	2930      	cmp	r1, #48	@ 0x30
 80069c8:	d802      	bhi.n	80069d0 <st25r3916WritePTMem+0x12>
    }
    
    if( length > 0U )
 80069ca:	2900      	cmp	r1, #0
 80069cc:	d101      	bne.n	80069d2 <st25r3916WritePTMem+0x14>
        st25r3916comTxByte( ST25R3916_PT_A_CONFIG_LOAD, false, true );
        st25r3916comTx( values, length, true, true );
        st25r3916comStop();
    }

    return RFAL_ERR_NONE;
 80069ce:	2000      	movs	r0, #0
}
 80069d0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        st25r3916comStart();
 80069d2:	f7ff ff4b 	bl	800686c <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80069d6:	466b      	mov	r3, sp
 80069d8:	1dd8      	adds	r0, r3, #7
 80069da:	23a0      	movs	r3, #160	@ 0xa0
 80069dc:	2101      	movs	r1, #1
 80069de:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 80069e0:	f7ff ff2e 	bl	8006840 <st25r3916comTx.part.0>
 80069e4:	0021      	movs	r1, r4
 80069e6:	0028      	movs	r0, r5
 80069e8:	f7ff ff2a 	bl	8006840 <st25r3916comTx.part.0>
        st25r3916comStop();
 80069ec:	f7ff ff12 	bl	8006814 <st25r3916comStop>
 80069f0:	e7ed      	b.n	80069ce <st25r3916WritePTMem+0x10>

080069f2 <st25r3916WritePTMemF>:
}


/*******************************************************************************/
ReturnCode st25r3916WritePTMemF( const uint8_t* values, uint16_t length )
{
 80069f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069f4:	0005      	movs	r5, r0
 80069f6:	000c      	movs	r4, r1
    if( length > (ST25R3916_PTM_F_LEN + ST25R3916_PTM_TSN_LEN) )
    {
        return RFAL_ERR_PARAM;
 80069f8:	2007      	movs	r0, #7
    if( length > (ST25R3916_PTM_F_LEN + ST25R3916_PTM_TSN_LEN) )
 80069fa:	2921      	cmp	r1, #33	@ 0x21
 80069fc:	d802      	bhi.n	8006a04 <st25r3916WritePTMemF+0x12>
    }
    
    if( length > 0U )
 80069fe:	2900      	cmp	r1, #0
 8006a00:	d101      	bne.n	8006a06 <st25r3916WritePTMemF+0x14>
        st25r3916comTxByte( ST25R3916_PT_F_CONFIG_LOAD, false, true );
        st25r3916comTx( values, length, true, true );
        st25r3916comStop();
    }

    return RFAL_ERR_NONE;
 8006a02:	2000      	movs	r0, #0
}
 8006a04:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        st25r3916comStart();
 8006a06:	f7ff ff31 	bl	800686c <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8006a0a:	466b      	mov	r3, sp
 8006a0c:	1dd8      	adds	r0, r3, #7
 8006a0e:	23a8      	movs	r3, #168	@ 0xa8
 8006a10:	2101      	movs	r1, #1
 8006a12:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 8006a14:	f7ff ff14 	bl	8006840 <st25r3916comTx.part.0>
 8006a18:	0021      	movs	r1, r4
 8006a1a:	0028      	movs	r0, r5
 8006a1c:	f7ff ff10 	bl	8006840 <st25r3916comTx.part.0>
        st25r3916comStop();
 8006a20:	f7ff fef8 	bl	8006814 <st25r3916comStop>
 8006a24:	e7ed      	b.n	8006a02 <st25r3916WritePTMemF+0x10>

08006a26 <st25r3916WritePTMemTSN>:


/*******************************************************************************/
ReturnCode st25r3916WritePTMemTSN( const uint8_t* values, uint16_t length )
{
 8006a26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a28:	0005      	movs	r5, r0
 8006a2a:	000c      	movs	r4, r1
    if( length > ST25R3916_PTM_TSN_LEN )
    {
        return RFAL_ERR_PARAM;
 8006a2c:	2007      	movs	r0, #7
    if( length > ST25R3916_PTM_TSN_LEN )
 8006a2e:	290c      	cmp	r1, #12
 8006a30:	d802      	bhi.n	8006a38 <st25r3916WritePTMemTSN+0x12>
    }
    
    if(length > 0U)
 8006a32:	2900      	cmp	r1, #0
 8006a34:	d101      	bne.n	8006a3a <st25r3916WritePTMemTSN+0x14>
        st25r3916comTxByte( ST25R3916_PT_TSN_DATA_LOAD, false, true );
        st25r3916comTx( values, length, true, true );
        st25r3916comStop();
    }

    return RFAL_ERR_NONE;
 8006a36:	2000      	movs	r0, #0
}
 8006a38:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        st25r3916comStart();
 8006a3a:	f7ff ff17 	bl	800686c <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8006a3e:	466b      	mov	r3, sp
 8006a40:	1dd8      	adds	r0, r3, #7
 8006a42:	23ac      	movs	r3, #172	@ 0xac
 8006a44:	2101      	movs	r1, #1
 8006a46:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 8006a48:	f7ff fefa 	bl	8006840 <st25r3916comTx.part.0>
 8006a4c:	0021      	movs	r1, r4
 8006a4e:	0028      	movs	r0, r5
 8006a50:	f7ff fef6 	bl	8006840 <st25r3916comTx.part.0>
        st25r3916comStop();
 8006a54:	f7ff fede 	bl	8006814 <st25r3916comStop>
 8006a58:	e7ed      	b.n	8006a36 <st25r3916WritePTMemTSN+0x10>

08006a5a <st25r3916ExecuteCommand>:


/*******************************************************************************/
ReturnCode st25r3916ExecuteCommand( uint8_t cmd )
{
 8006a5a:	b513      	push	{r0, r1, r4, lr}
 8006a5c:	0004      	movs	r4, r0
    st25r3916comStart();
 8006a5e:	f7ff ff05 	bl	800686c <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8006a62:	466b      	mov	r3, sp
 8006a64:	1dd8      	adds	r0, r3, #7
    st25r3916comTxByte( (cmd | ST25R3916_CMD_MODE ), true, true );
 8006a66:	2340      	movs	r3, #64	@ 0x40
 8006a68:	425b      	negs	r3, r3
 8006a6a:	4323      	orrs	r3, r4
 8006a6c:	2101      	movs	r1, #1
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8006a6e:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 8006a70:	f7ff fee6 	bl	8006840 <st25r3916comTx.part.0>
    st25r3916comStop();
 8006a74:	f7ff fece 	bl	8006814 <st25r3916comStop>
    
    /* Send a cmd event to LED handling */
    st25r3916ledEvtCmd(cmd);
 8006a78:	0020      	movs	r0, r4
 8006a7a:	f000 f9fb 	bl	8006e74 <st25r3916ledEvtCmd>
    
    return RFAL_ERR_NONE;
}
 8006a7e:	2000      	movs	r0, #0
 8006a80:	bd16      	pop	{r1, r2, r4, pc}

08006a82 <st25r3916ReadTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916ReadTestRegister( uint8_t reg, uint8_t* val )
{
 8006a82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a84:	0005      	movs	r5, r0
 8006a86:	000c      	movs	r4, r1
    st25r3916comStart();
 8006a88:	f7ff fef0 	bl	800686c <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8006a8c:	466a      	mov	r2, sp
 8006a8e:	23fc      	movs	r3, #252	@ 0xfc
 8006a90:	1dd0      	adds	r0, r2, #7
 8006a92:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 8006a94:	2101      	movs	r1, #1
 8006a96:	f7ff fed3 	bl	8006840 <st25r3916comTx.part.0>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, false );
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 8006a9a:	2040      	movs	r0, #64	@ 0x40
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8006a9c:	466b      	mov	r3, sp
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 8006a9e:	4328      	orrs	r0, r5
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8006aa0:	71d8      	strb	r0, [r3, #7]
    if( txLen > 0U )
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	1dd8      	adds	r0, r3, #7
 8006aa6:	f7ff fecb 	bl	8006840 <st25r3916comTx.part.0>
    if( rxLen > 0U )
 8006aaa:	0020      	movs	r0, r4
 8006aac:	2101      	movs	r1, #1
 8006aae:	f7ff fecd 	bl	800684c <st25r3916comRx.part.0>
    st25r3916comRepeatStart();
    st25r3916comRx( val, ST25R3916_REG_LEN );
    st25r3916comStop();
 8006ab2:	f7ff feaf 	bl	8006814 <st25r3916comStop>
    
    return RFAL_ERR_NONE;
}
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08006aba <st25r3916WriteTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteTestRegister( uint8_t reg, uint8_t val )
{
 8006aba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 8006abc:	466b      	mov	r3, sp
 8006abe:	1d9d      	adds	r5, r3, #6
{
 8006ac0:	0004      	movs	r4, r0
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 8006ac2:	7199      	strb	r1, [r3, #6]

    st25r3916comStart();
 8006ac4:	f7ff fed2 	bl	800686c <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8006ac8:	466a      	mov	r2, sp
 8006aca:	23fc      	movs	r3, #252	@ 0xfc
 8006acc:	1dd0      	adds	r0, r2, #7
 8006ace:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	f7ff feb5 	bl	8006840 <st25r3916comTx.part.0>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8006ad6:	466b      	mov	r3, sp
 8006ad8:	2101      	movs	r1, #1
 8006ada:	1dd8      	adds	r0, r3, #7
 8006adc:	71dc      	strb	r4, [r3, #7]
    if( txLen > 0U )
 8006ade:	f7ff feaf 	bl	8006840 <st25r3916comTx.part.0>
 8006ae2:	0028      	movs	r0, r5
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	f7ff feab 	bl	8006840 <st25r3916comTx.part.0>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, true );
    st25r3916comTxByte( (reg | ST25R3916_WRITE_MODE), false, true );
    st25r3916comTx( &value, ST25R3916_REG_LEN, true, true );
    st25r3916comStop();
 8006aea:	f7ff fe93 	bl	8006814 <st25r3916comStop>
    
    return RFAL_ERR_NONE;
}
 8006aee:	2000      	movs	r0, #0
 8006af0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08006af2 <st25r3916ClrRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8006af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006af4:	466b      	mov	r3, sp
 8006af6:	000d      	movs	r5, r1
 8006af8:	1dde      	adds	r6, r3, #7
 8006afa:	0031      	movs	r1, r6
 8006afc:	2201      	movs	r2, #1
 8006afe:	0004      	movs	r4, r0
    if( length > 0U )
 8006b00:	f7ff fed2 	bl	80068a8 <st25r3916ReadMultipleRegisters.part.0>
    
    /* Read current reg value */
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
    
    /* Only perform a Write if value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 8006b04:	7831      	ldrb	r1, [r6, #0]
    {
        return RFAL_ERR_NONE;
 8006b06:	2000      	movs	r0, #0
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 8006b08:	420d      	tst	r5, r1
 8006b0a:	d003      	beq.n	8006b14 <st25r3916ClrRegisterBits+0x22>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (uint8_t)(rdVal & ~clr_mask) );
 8006b0c:	0020      	movs	r0, r4
 8006b0e:	43a9      	bics	r1, r5
 8006b10:	f7ff ff1a 	bl	8006948 <st25r3916WriteRegister>
}
 8006b14:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08006b16 <st25r3916SetRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 8006b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b18:	466b      	mov	r3, sp
 8006b1a:	000c      	movs	r4, r1
 8006b1c:	1dde      	adds	r6, r3, #7
 8006b1e:	0031      	movs	r1, r6
 8006b20:	2201      	movs	r2, #1
 8006b22:	0005      	movs	r5, r0
    if( length > 0U )
 8006b24:	f7ff fec0 	bl	80068a8 <st25r3916ReadMultipleRegisters.part.0>
    
    /* Read current reg value */
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 8006b28:	0021      	movs	r1, r4
 8006b2a:	7833      	ldrb	r3, [r6, #0]
    {
        return RFAL_ERR_NONE;
 8006b2c:	2000      	movs	r0, #0
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 8006b2e:	4319      	orrs	r1, r3
 8006b30:	428b      	cmp	r3, r1
 8006b32:	d002      	beq.n	8006b3a <st25r3916SetRegisterBits+0x24>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (rdVal | set_mask) );
 8006b34:	0028      	movs	r0, r5
 8006b36:	f7ff ff07 	bl	8006948 <st25r3916WriteRegister>
}
 8006b3a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08006b3c <st25r3916ModifyRegister>:
}


/*******************************************************************************/
ReturnCode st25r3916ModifyRegister( uint8_t reg, uint8_t clr_mask, uint8_t set_mask )
{
 8006b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b3e:	466b      	mov	r3, sp
 8006b40:	1ddf      	adds	r7, r3, #7
 8006b42:	000e      	movs	r6, r1
 8006b44:	0015      	movs	r5, r2
 8006b46:	0039      	movs	r1, r7
 8006b48:	2201      	movs	r2, #1
 8006b4a:	0004      	movs	r4, r0
    if( length > 0U )
 8006b4c:	f7ff feac 	bl	80068a8 <st25r3916ReadMultipleRegisters.part.0>
    
    /* Read current reg value */
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 8006b50:	783b      	ldrb	r3, [r7, #0]
    wrVal |= set_mask;
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
    {
        return RFAL_ERR_NONE;
 8006b52:	2000      	movs	r0, #0
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 8006b54:	0019      	movs	r1, r3
 8006b56:	43b1      	bics	r1, r6
    wrVal |= set_mask;
 8006b58:	4329      	orrs	r1, r5
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 8006b5a:	428b      	cmp	r3, r1
 8006b5c:	d002      	beq.n	8006b64 <st25r3916ModifyRegister+0x28>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, wrVal );
 8006b5e:	0020      	movs	r0, r4
 8006b60:	f7ff fef2 	bl	8006948 <st25r3916WriteRegister>
}
 8006b64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08006b66 <st25r3916ChangeRegisterBits>:
{
 8006b66:	b510      	push	{r4, lr}
    return st25r3916ModifyRegister(reg, valueMask, (valueMask & value) );
 8006b68:	400a      	ands	r2, r1
 8006b6a:	f7ff ffe7 	bl	8006b3c <st25r3916ModifyRegister>
}
 8006b6e:	bd10      	pop	{r4, pc}

08006b70 <st25r3916ChangeTestRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8006b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 8006b72:	466b      	mov	r3, sp
 8006b74:	1ddf      	adds	r7, r3, #7
{
 8006b76:	000e      	movs	r6, r1
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 8006b78:	0039      	movs	r1, r7
{
 8006b7a:	0005      	movs	r5, r0
 8006b7c:	0014      	movs	r4, r2
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 8006b7e:	f7ff ff80 	bl	8006a82 <st25r3916ReadTestRegister>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d109      	bne.n	8006b9a <st25r3916ChangeTestRegisterBits+0x2a>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 8006b86:	783b      	ldrb	r3, [r7, #0]
    wrVal |= (uint8_t)(value & valueMask);
 8006b88:	4034      	ands	r4, r6
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 8006b8a:	0019      	movs	r1, r3
 8006b8c:	43b1      	bics	r1, r6
    wrVal |= (uint8_t)(value & valueMask);
 8006b8e:	4321      	orrs	r1, r4
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 8006b90:	428b      	cmp	r3, r1
 8006b92:	d002      	beq.n	8006b9a <st25r3916ChangeTestRegisterBits+0x2a>
    {
        return RFAL_ERR_NONE;
    }
    
    /* Write new reg value */
    return st25r3916WriteTestRegister(reg, wrVal );
 8006b94:	0028      	movs	r0, r5
 8006b96:	f7ff ff90 	bl	8006aba <st25r3916WriteTestRegister>
}
 8006b9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08006b9c <st25r3916CheckReg>:


/*******************************************************************************/
bool st25r3916CheckReg( uint8_t reg, uint8_t mask, uint8_t val )
{    
 8006b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b9e:	0014      	movs	r4, r2
    uint8_t regVal;
    
    regVal = 0;
 8006ba0:	466a      	mov	r2, sp
 8006ba2:	2300      	movs	r3, #0
{    
 8006ba4:	000d      	movs	r5, r1
    st25r3916ReadRegister( reg, &regVal );
 8006ba6:	1dd1      	adds	r1, r2, #7
    regVal = 0;
 8006ba8:	71d3      	strb	r3, [r2, #7]
    st25r3916ReadRegister( reg, &regVal );
 8006baa:	f7ff fec0 	bl	800692e <st25r3916ReadRegister>
    
    return ( (regVal & mask) == val );
 8006bae:	466b      	mov	r3, sp
 8006bb0:	79d8      	ldrb	r0, [r3, #7]
 8006bb2:	4028      	ands	r0, r5
 8006bb4:	1b00      	subs	r0, r0, r4
 8006bb6:	4243      	negs	r3, r0
 8006bb8:	4158      	adcs	r0, r3
 8006bba:	b2c0      	uxtb	r0, r0
}
 8006bbc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08006bbe <st25r3916IsRegValid>:


/*******************************************************************************/
bool st25r3916IsRegValid( uint8_t reg )
{
    if( !(( (int16_t)reg >= (int16_t)ST25R3916_REG_IO_CONF1) && (reg <= (ST25R3916_SPACE_B | ST25R3916_REG_IC_IDENTITY)) ))
 8006bbe:	43c0      	mvns	r0, r0
 8006bc0:	b2c0      	uxtb	r0, r0
    {
        return false;
    }    
    return true;
}
 8006bc2:	09c0      	lsrs	r0, r0, #7
 8006bc4:	4770      	bx	lr
	...

08006bc8 <st25r3916InitInterrupts>:
{
    platformIrqST25RPinInitialize();
    platformIrqST25RSetCallback( st25r3916Isr );
    
    
    st25r3916interrupt.callback     = NULL;
 8006bc8:	2200      	movs	r2, #0
 8006bca:	4b03      	ldr	r3, [pc, #12]	@ (8006bd8 <st25r3916InitInterrupts+0x10>)
 8006bcc:	605a      	str	r2, [r3, #4]
    st25r3916interrupt.prevCallback = NULL;
 8006bce:	601a      	str	r2, [r3, #0]
    st25r3916interrupt.status       = ST25R3916_IRQ_MASK_NONE;
 8006bd0:	609a      	str	r2, [r3, #8]
    st25r3916interrupt.mask         = ST25R3916_IRQ_MASK_NONE;
 8006bd2:	60da      	str	r2, [r3, #12]
}
 8006bd4:	4770      	bx	lr
 8006bd6:	46c0      	nop			@ (mov r8, r8)
 8006bd8:	2000199c 	.word	0x2000199c

08006bdc <st25r3916CheckForReceivedInterrupts>:
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;
    
    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
    RFAL_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 8006bdc:	2301      	movs	r3, #1
{
 8006bde:	b537      	push	{r0, r1, r2, r4, r5, lr}
    
    
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R_INT_PORT, ST25R_INT_PIN ) )
 8006be0:	2590      	movs	r5, #144	@ 0x90
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 8006be2:	2400      	movs	r4, #0
    RFAL_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 8006be4:	425b      	negs	r3, r3
 8006be6:	9301      	str	r3, [sp, #4]
   while( platformGpioIsHigh( ST25R_INT_PORT, ST25R_INT_PIN ) )
 8006be8:	05ed      	lsls	r5, r5, #23
 8006bea:	2102      	movs	r1, #2
 8006bec:	0028      	movs	r0, r5
 8006bee:	f000 fc79 	bl	80074e4 <HAL_GPIO_ReadPin>
 8006bf2:	2801      	cmp	r0, #1
 8006bf4:	d020      	beq.n	8006c38 <st25r3916CheckForReceivedInterrupts+0x5c>
       irqStatus |= (uint32_t)iregs[2]<<16;
       irqStatus |= (uint32_t)iregs[3]<<24;
   }
   
   /* Forward all interrupts, even masked ones to application */
   platformProtectST25RIrqStatus();
 8006bf6:	4a14      	ldr	r2, [pc, #80]	@ (8006c48 <st25r3916CheckForReceivedInterrupts+0x6c>)
 8006bf8:	7813      	ldrb	r3, [r2, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	2020      	movs	r0, #32
 8006c04:	4b11      	ldr	r3, [pc, #68]	@ (8006c4c <st25r3916CheckForReceivedInterrupts+0x70>)
 8006c06:	67d8      	str	r0, [r3, #124]	@ 0x7c
 8006c08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006c0c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8006c10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006c14:	f3bf 8f6f 	isb	sy
   st25r3916interrupt.status |= irqStatus;
 8006c18:	490d      	ldr	r1, [pc, #52]	@ (8006c50 <st25r3916CheckForReceivedInterrupts+0x74>)
 8006c1a:	688b      	ldr	r3, [r1, #8]
 8006c1c:	4323      	orrs	r3, r4
 8006c1e:	608b      	str	r3, [r1, #8]
   platformUnprotectST25RIrqStatus();
 8006c20:	7813      	ldrb	r3, [r2, #0]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	7013      	strb	r3, [r2, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <st25r3916CheckForReceivedInterrupts+0x54>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c2c:	4b09      	ldr	r3, [pc, #36]	@ (8006c54 <st25r3916CheckForReceivedInterrupts+0x78>)
 8006c2e:	6018      	str	r0, [r3, #0]
   
   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 8006c30:	6888      	ldr	r0, [r1, #8]
 8006c32:	f000 f8ef 	bl	8006e14 <st25r3916ledEvtIrq>
}
 8006c36:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 8006c38:	2204      	movs	r2, #4
 8006c3a:	201a      	movs	r0, #26
 8006c3c:	a901      	add	r1, sp, #4
 8006c3e:	f7ff fe7c 	bl	800693a <st25r3916ReadMultipleRegisters>
       irqStatus |= (uint32_t)iregs[3]<<24;
 8006c42:	9b01      	ldr	r3, [sp, #4]
 8006c44:	431c      	orrs	r4, r3
 8006c46:	e7d0      	b.n	8006bea <st25r3916CheckForReceivedInterrupts+0xe>
 8006c48:	20003074 	.word	0x20003074
 8006c4c:	e000e104 	.word	0xe000e104
 8006c50:	2000199c 	.word	0x2000199c
 8006c54:	e000e100 	.word	0xe000e100

08006c58 <st25r3916Isr>:
{
 8006c58:	b510      	push	{r4, lr}
    st25r3916CheckForReceivedInterrupts();
 8006c5a:	f7ff ffbf 	bl	8006bdc <st25r3916CheckForReceivedInterrupts>
    if( NULL != st25r3916interrupt.callback )
 8006c5e:	4b03      	ldr	r3, [pc, #12]	@ (8006c6c <st25r3916Isr+0x14>)
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	2a00      	cmp	r2, #0
 8006c64:	d001      	beq.n	8006c6a <st25r3916Isr+0x12>
        st25r3916interrupt.callback();
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	4798      	blx	r3
}
 8006c6a:	bd10      	pop	{r4, pc}
 8006c6c:	2000199c 	.word	0x2000199c

08006c70 <st25r3916ModifyInterrupts>:


/*******************************************************************************/
void st25r3916ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old_mask;
    uint32_t new_mask;
    

    old_mask = st25r3916interrupt.mask;
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8006c72:	000b      	movs	r3, r1
    st25r3916interrupt.mask &= ~clr_mask;
    st25r3916interrupt.mask |= set_mask;
 8006c74:	2500      	movs	r5, #0
    
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
    { 
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 8006c76:	27ff      	movs	r7, #255	@ 0xff
    old_mask = st25r3916interrupt.mask;
 8006c78:	4c0d      	ldr	r4, [pc, #52]	@ (8006cb0 <st25r3916ModifyInterrupts+0x40>)
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8006c7a:	4043      	eors	r3, r0
    old_mask = st25r3916interrupt.mask;
 8006c7c:	68e6      	ldr	r6, [r4, #12]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8006c7e:	401e      	ands	r6, r3
    st25r3916interrupt.mask &= ~clr_mask;
 8006c80:	68e3      	ldr	r3, [r4, #12]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8006c82:	404e      	eors	r6, r1
    st25r3916interrupt.mask &= ~clr_mask;
 8006c84:	4383      	bics	r3, r0
 8006c86:	60e3      	str	r3, [r4, #12]
    st25r3916interrupt.mask |= set_mask;
 8006c88:	68e3      	ldr	r3, [r4, #12]
 8006c8a:	430b      	orrs	r3, r1
 8006c8c:	60e3      	str	r3, [r4, #12]
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 8006c8e:	0032      	movs	r2, r6
 8006c90:	00eb      	lsls	r3, r5, #3
 8006c92:	40da      	lsrs	r2, r3
 8006c94:	423a      	tst	r2, r7
 8006c96:	d007      	beq.n	8006ca8 <st25r3916ModifyInterrupts+0x38>
        {
            continue;
        }
        
        st25r3916WriteRegister(ST25R3916_REG_IRQ_MASK_MAIN + i, (uint8_t)((st25r3916interrupt.mask>>(8U*i)) & 0xFFU) );
 8006c98:	68e1      	ldr	r1, [r4, #12]
 8006c9a:	0028      	movs	r0, r5
 8006c9c:	40d9      	lsrs	r1, r3
 8006c9e:	3016      	adds	r0, #22
 8006ca0:	b2c9      	uxtb	r1, r1
 8006ca2:	b2c0      	uxtb	r0, r0
 8006ca4:	f7ff fe50 	bl	8006948 <st25r3916WriteRegister>
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 8006ca8:	3501      	adds	r5, #1
 8006caa:	2d04      	cmp	r5, #4
 8006cac:	d1ef      	bne.n	8006c8e <st25r3916ModifyInterrupts+0x1e>
    }
    return;
}
 8006cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb0:	2000199c 	.word	0x2000199c

08006cb4 <st25r3916WaitForInterruptsTimed>:


/*******************************************************************************/
uint32_t st25r3916WaitForInterruptsTimed( uint32_t mask, uint16_t tmo )
{
 8006cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cb6:	0005      	movs	r5, r0
    uint32_t tmrDelay;
    uint32_t status;
    
    tmrDelay = platformTimerCreate( tmo );
 8006cb8:	0008      	movs	r0, r1
{
 8006cba:	000e      	movs	r6, r1
    tmrDelay = platformTimerCreate( tmo );
 8006cbc:	f000 f8ec 	bl	8006e98 <timerCalculateTimer>
 8006cc0:	9001      	str	r0, [sp, #4]
    
    /* Run until specific interrupt has happen or the timer has expired */
    do 
    {
        status = (st25r3916interrupt.status & mask);
 8006cc2:	4c15      	ldr	r4, [pc, #84]	@ (8006d18 <st25r3916WaitForInterruptsTimed+0x64>)
    } while( ( (!platformTimerIsExpired( tmrDelay )) || (tmo == 0U)) && (status == 0U) );
 8006cc4:	9801      	ldr	r0, [sp, #4]
        status = (st25r3916interrupt.status & mask);
 8006cc6:	68a7      	ldr	r7, [r4, #8]
 8006cc8:	402f      	ands	r7, r5
    } while( ( (!platformTimerIsExpired( tmrDelay )) || (tmo == 0U)) && (status == 0U) );
 8006cca:	f000 f8eb 	bl	8006ea4 <timerIsExpired>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d001      	beq.n	8006cd6 <st25r3916WaitForInterruptsTimed+0x22>
 8006cd2:	2e00      	cmp	r6, #0
 8006cd4:	d101      	bne.n	8006cda <st25r3916WaitForInterruptsTimed+0x26>
 8006cd6:	2f00      	cmp	r7, #0
 8006cd8:	d0f3      	beq.n	8006cc2 <st25r3916WaitForInterruptsTimed+0xe>
    
    platformTimerDestroy( tmrDelay );

    status = st25r3916interrupt.status & mask;
    
    platformProtectST25RIrqStatus();
 8006cda:	4a10      	ldr	r2, [pc, #64]	@ (8006d1c <st25r3916WaitForInterruptsTimed+0x68>)
    status = st25r3916interrupt.status & mask;
 8006cdc:	68a0      	ldr	r0, [r4, #8]
    platformProtectST25RIrqStatus();
 8006cde:	7813      	ldrb	r3, [r2, #0]
    status = st25r3916interrupt.status & mask;
 8006ce0:	4028      	ands	r0, r5
    platformProtectST25RIrqStatus();
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ce6:	f3bf 8f4f 	dsb	sy
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cea:	2120      	movs	r1, #32
 8006cec:	4b0c      	ldr	r3, [pc, #48]	@ (8006d20 <st25r3916WaitForInterruptsTimed+0x6c>)
 8006cee:	67d9      	str	r1, [r3, #124]	@ 0x7c
 8006cf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006cf4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8006cf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006cfc:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status &= ~status;
 8006d00:	68a3      	ldr	r3, [r4, #8]
 8006d02:	4383      	bics	r3, r0
 8006d04:	60a3      	str	r3, [r4, #8]
    platformUnprotectST25RIrqStatus();
 8006d06:	7813      	ldrb	r3, [r2, #0]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	7013      	strb	r3, [r2, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <st25r3916WaitForInterruptsTimed+0x62>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d12:	4b04      	ldr	r3, [pc, #16]	@ (8006d24 <st25r3916WaitForInterruptsTimed+0x70>)
 8006d14:	6019      	str	r1, [r3, #0]
    
    return status;
}
 8006d16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d18:	2000199c 	.word	0x2000199c
 8006d1c:	20003074 	.word	0x20003074
 8006d20:	e000e104 	.word	0xe000e104
 8006d24:	e000e100 	.word	0xe000e100

08006d28 <st25r3916GetInterrupt>:


/*******************************************************************************/
uint32_t st25r3916GetInterrupt( uint32_t mask )
{
 8006d28:	0001      	movs	r1, r0
    uint32_t irqs;

    irqs = (st25r3916interrupt.status & mask);
 8006d2a:	4b11      	ldr	r3, [pc, #68]	@ (8006d70 <st25r3916GetInterrupt+0x48>)
{
 8006d2c:	b510      	push	{r4, lr}
    irqs = (st25r3916interrupt.status & mask);
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	4010      	ands	r0, r2
    if(irqs != ST25R3916_IRQ_MASK_NONE)
 8006d32:	4211      	tst	r1, r2
 8006d34:	d01b      	beq.n	8006d6e <st25r3916GetInterrupt+0x46>
    {
        platformProtectST25RIrqStatus();
 8006d36:	4a0f      	ldr	r2, [pc, #60]	@ (8006d74 <st25r3916GetInterrupt+0x4c>)
 8006d38:	7811      	ldrb	r1, [r2, #0]
 8006d3a:	3101      	adds	r1, #1
 8006d3c:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d3e:	f3bf 8f4f 	dsb	sy
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d42:	2420      	movs	r4, #32
 8006d44:	490c      	ldr	r1, [pc, #48]	@ (8006d78 <st25r3916GetInterrupt+0x50>)
 8006d46:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8006d48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006d4c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8006d50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006d54:	f3bf 8f6f 	isb	sy
        st25r3916interrupt.status &= ~irqs;
 8006d58:	6899      	ldr	r1, [r3, #8]
 8006d5a:	4381      	bics	r1, r0
 8006d5c:	6099      	str	r1, [r3, #8]
        platformUnprotectST25RIrqStatus();
 8006d5e:	7813      	ldrb	r3, [r2, #0]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	7013      	strb	r3, [r2, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <st25r3916GetInterrupt+0x46>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d6a:	4b04      	ldr	r3, [pc, #16]	@ (8006d7c <st25r3916GetInterrupt+0x54>)
 8006d6c:	601c      	str	r4, [r3, #0]
    }

    return irqs;
}
 8006d6e:	bd10      	pop	{r4, pc}
 8006d70:	2000199c 	.word	0x2000199c
 8006d74:	20003074 	.word	0x20003074
 8006d78:	e000e104 	.word	0xe000e104
 8006d7c:	e000e100 	.word	0xe000e100

08006d80 <st25r3916EnableInterrupts>:
}


/*******************************************************************************/
void st25r3916EnableInterrupts(uint32_t mask)
{
 8006d80:	b510      	push	{r4, lr}
    st25r3916ModifyInterrupts(mask, 0);
 8006d82:	2100      	movs	r1, #0
 8006d84:	f7ff ff74 	bl	8006c70 <st25r3916ModifyInterrupts>
}
 8006d88:	bd10      	pop	{r4, pc}

08006d8a <st25r3916ClearAndEnableInterrupts>:
{
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	0004      	movs	r4, r0
    st25r3916GetInterrupt( mask );
 8006d8e:	f7ff ffcb 	bl	8006d28 <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( mask );
 8006d92:	0020      	movs	r0, r4
 8006d94:	f7ff fff4 	bl	8006d80 <st25r3916EnableInterrupts>
}
 8006d98:	bd10      	pop	{r4, pc}

08006d9a <st25r3916DisableInterrupts>:


/*******************************************************************************/
void st25r3916DisableInterrupts(uint32_t mask)
{
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	0001      	movs	r1, r0
    st25r3916ModifyInterrupts(0, mask);
 8006d9e:	2000      	movs	r0, #0
 8006da0:	f7ff ff66 	bl	8006c70 <st25r3916ModifyInterrupts>
}
 8006da4:	bd10      	pop	{r4, pc}
	...

08006da8 <st25r3916ClearInterrupts>:

/*******************************************************************************/
void st25r3916ClearInterrupts( void )
{
 8006da8:	b507      	push	{r0, r1, r2, lr}
    uint8_t iregs[ST25R3916_INT_REGS_LEN];

    st25r3916ReadMultipleRegisters(ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN);
 8006daa:	2204      	movs	r2, #4
 8006dac:	a901      	add	r1, sp, #4
 8006dae:	201a      	movs	r0, #26
 8006db0:	f7ff fdc3 	bl	800693a <st25r3916ReadMultipleRegisters>

    platformProtectST25RIrqStatus();
 8006db4:	4a0e      	ldr	r2, [pc, #56]	@ (8006df0 <st25r3916ClearInterrupts+0x48>)
 8006db6:	7813      	ldrb	r3, [r2, #0]
 8006db8:	3301      	adds	r3, #1
 8006dba:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006dbc:	f3bf 8f4f 	dsb	sy
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dc0:	2120      	movs	r1, #32
 8006dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006df4 <st25r3916ClearInterrupts+0x4c>)
 8006dc4:	67d9      	str	r1, [r3, #124]	@ 0x7c
 8006dc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006dca:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8006dce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006dd2:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status = ST25R3916_IRQ_MASK_NONE;
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	4b07      	ldr	r3, [pc, #28]	@ (8006df8 <st25r3916ClearInterrupts+0x50>)
 8006dda:	6098      	str	r0, [r3, #8]
    platformUnprotectST25RIrqStatus();
 8006ddc:	7813      	ldrb	r3, [r2, #0]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	7013      	strb	r3, [r2, #0]
 8006de4:	4283      	cmp	r3, r0
 8006de6:	d101      	bne.n	8006dec <st25r3916ClearInterrupts+0x44>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006de8:	4b04      	ldr	r3, [pc, #16]	@ (8006dfc <st25r3916ClearInterrupts+0x54>)
 8006dea:	6019      	str	r1, [r3, #0]
    return;
}
 8006dec:	bd07      	pop	{r0, r1, r2, pc}
 8006dee:	46c0      	nop			@ (mov r8, r8)
 8006df0:	20003074 	.word	0x20003074
 8006df4:	e000e104 	.word	0xe000e104
 8006df8:	2000199c 	.word	0x2000199c
 8006dfc:	e000e100 	.word	0xe000e100

08006e00 <st25r3916ledInit>:
{
    /* Initialize LEDs if existing and defined */
    platformLedsInitialize();
    
    st25r3916ledRxOff();
    st25r3916ledFieldOff();
 8006e00:	2180      	movs	r1, #128	@ 0x80
{
 8006e02:	b510      	push	{r4, lr}
    st25r3916ledFieldOff();
 8006e04:	2200      	movs	r2, #0
 8006e06:	4802      	ldr	r0, [pc, #8]	@ (8006e10 <st25r3916ledInit+0x10>)
 8006e08:	0149      	lsls	r1, r1, #5
 8006e0a:	f000 fb71 	bl	80074f0 <HAL_GPIO_WritePin>
}
 8006e0e:	bd10      	pop	{r4, pc}
 8006e10:	48000400 	.word	0x48000400

08006e14 <st25r3916ledEvtIrq>:


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
    if( (irqs & (ST25R3916_IRQ_MASK_TXE | ST25R3916_IRQ_MASK_CAT) ) != 0U )
 8006e14:	2382      	movs	r3, #130	@ 0x82
 8006e16:	009b      	lsls	r3, r3, #2
{
 8006e18:	b510      	push	{r4, lr}
    if( (irqs & (ST25R3916_IRQ_MASK_TXE | ST25R3916_IRQ_MASK_CAT) ) != 0U )
 8006e1a:	4218      	tst	r0, r3
 8006e1c:	d005      	beq.n	8006e2a <st25r3916ledEvtIrq+0x16>
    {
        st25r3916ledFieldOn();
 8006e1e:	2180      	movs	r1, #128	@ 0x80
 8006e20:	2201      	movs	r2, #1
 8006e22:	4802      	ldr	r0, [pc, #8]	@ (8006e2c <st25r3916ledEvtIrq+0x18>)
 8006e24:	0149      	lsls	r1, r1, #5
 8006e26:	f000 fb63 	bl	80074f0 <HAL_GPIO_WritePin>
    if( (irqs & (ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_NRE    | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_RXE_PTA |                                                 
                 ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_WU_F    | ST25R3916_IRQ_MASK_RFU2)   ) != 0U ) 
    {
        st25r3916ledRxOff();
    }
}
 8006e2a:	bd10      	pop	{r4, pc}
 8006e2c:	48000400 	.word	0x48000400

08006e30 <st25r3916ledEvtWrReg>:


/*******************************************************************************/
void st25r3916ledEvtWrReg( uint8_t reg, uint8_t val )
{
 8006e30:	b510      	push	{r4, lr}
    if( reg == ST25R3916_REG_OP_CONTROL )
 8006e32:	2802      	cmp	r0, #2
 8006e34:	d10a      	bne.n	8006e4c <st25r3916ledEvtWrReg+0x1c>
    {
        if( (ST25R3916_REG_OP_CONTROL_tx_en & val) != 0U )
 8006e36:	2308      	movs	r3, #8
 8006e38:	000a      	movs	r2, r1
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	4219      	tst	r1, r3
 8006e3e:	d000      	beq.n	8006e42 <st25r3916ledEvtWrReg+0x12>
        {
            st25r3916ledFieldOn();
 8006e40:	2201      	movs	r2, #1
        }
        else
        {
            st25r3916ledFieldOff();
 8006e42:	2180      	movs	r1, #128	@ 0x80
 8006e44:	4802      	ldr	r0, [pc, #8]	@ (8006e50 <st25r3916ledEvtWrReg+0x20>)
 8006e46:	0149      	lsls	r1, r1, #5
 8006e48:	f000 fb52 	bl	80074f0 <HAL_GPIO_WritePin>
        }
    }
}
 8006e4c:	bd10      	pop	{r4, pc}
 8006e4e:	46c0      	nop			@ (mov r8, r8)
 8006e50:	48000400 	.word	0x48000400

08006e54 <st25r3916ledEvtWrMultiReg>:


/*******************************************************************************/
void st25r3916ledEvtWrMultiReg( uint8_t reg, const uint8_t* vals, uint8_t len )
{
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	0007      	movs	r7, r0
 8006e58:	000d      	movs	r5, r1
    uint8_t i;
    
    for(i=0; i<(len); i++)
 8006e5a:	000c      	movs	r4, r1
 8006e5c:	188e      	adds	r6, r1, r2
 8006e5e:	42b4      	cmp	r4, r6
 8006e60:	d100      	bne.n	8006e64 <st25r3916ledEvtWrMultiReg+0x10>
    {
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
    }
}
 8006e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
 8006e64:	1b78      	subs	r0, r7, r5
 8006e66:	1900      	adds	r0, r0, r4
 8006e68:	7821      	ldrb	r1, [r4, #0]
 8006e6a:	b2c0      	uxtb	r0, r0
 8006e6c:	f7ff ffe0 	bl	8006e30 <st25r3916ledEvtWrReg>
    for(i=0; i<(len); i++)
 8006e70:	3401      	adds	r4, #1
 8006e72:	e7f4      	b.n	8006e5e <st25r3916ledEvtWrMultiReg+0xa>

08006e74 <st25r3916ledEvtCmd>:


/*******************************************************************************/
void st25r3916ledEvtCmd( uint8_t cmd )
{
    if( (cmd >= ST25R3916_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 8006e74:	0003      	movs	r3, r0
 8006e76:	333c      	adds	r3, #60	@ 0x3c
 8006e78:	b2db      	uxtb	r3, r3
{
 8006e7a:	b510      	push	{r4, lr}
    if( (cmd >= ST25R3916_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 8006e7c:	2b05      	cmp	r3, #5
 8006e7e:	d806      	bhi.n	8006e8e <st25r3916ledEvtCmd+0x1a>
    {
        st25r3916ledFieldOff();
 8006e80:	2180      	movs	r1, #128	@ 0x80
 8006e82:	2200      	movs	r2, #0
 8006e84:	4803      	ldr	r0, [pc, #12]	@ (8006e94 <st25r3916ledEvtCmd+0x20>)
 8006e86:	0149      	lsls	r1, r1, #5
 8006e88:	f000 fb32 	bl	80074f0 <HAL_GPIO_WritePin>
    if( cmd == ST25R3916_CMD_SET_DEFAULT )
    {
        st25r3916ledFieldOff();
        st25r3916ledRxOff();
    }
}
 8006e8c:	bd10      	pop	{r4, pc}
    if( cmd == ST25R3916_CMD_SET_DEFAULT )
 8006e8e:	28c1      	cmp	r0, #193	@ 0xc1
 8006e90:	d1fc      	bne.n	8006e8c <st25r3916ledEvtCmd+0x18>
 8006e92:	e7f5      	b.n	8006e80 <st25r3916ledEvtCmd+0xc>
 8006e94:	48000400 	.word	0x48000400

08006e98 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	0004      	movs	r4, r0
  return (platformGetSysTick() + time);
 8006e9c:	f7fa fee2 	bl	8001c64 <BSP_GetTick>
 8006ea0:	1820      	adds	r0, r4, r0
}
 8006ea2:	bd10      	pop	{r4, pc}

08006ea4 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	0004      	movs	r4, r0
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 8006ea8:	f7fa fedc 	bl	8001c64 <BSP_GetTick>
 8006eac:	1a20      	subs	r0, r4, r0
  {
    return true;
  }
  
  return false;
}
 8006eae:	0fc0      	lsrs	r0, r0, #31
 8006eb0:	bd10      	pop	{r4, pc}
	...

08006eb4 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006eb4:	b510      	push	{r4, lr}
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();

  if (ButtonMode == BUTTON_MODE_EXTI)
 8006eb6:	2901      	cmp	r1, #1
 8006eb8:	d119      	bne.n	8006eee <BSP_PB_Init+0x3a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8006eba:	21c0      	movs	r1, #192	@ 0xc0
 8006ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8006ef4 <BSP_PB_Init+0x40>)
 8006ebe:	00c0      	lsls	r0, r0, #3
 8006ec0:	1904      	adds	r4, r0, r4
 8006ec2:	04c9      	lsls	r1, r1, #19
 8006ec4:	0020      	movs	r0, r4
 8006ec6:	f000 fa36 	bl	8007336 <HAL_EXTI_GetHandle>
 8006eca:	1e01      	subs	r1, r0, #0
 8006ecc:	d002      	beq.n	8006ed4 <BSP_PB_Init+0x20>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006ece:	2004      	movs	r0, #4
 8006ed0:	4240      	negs	r0, r0
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
    }
  }

  return ret;
}
 8006ed2:	bd10      	pop	{r4, pc}
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8006ed4:	4a08      	ldr	r2, [pc, #32]	@ (8006ef8 <BSP_PB_Init+0x44>)
 8006ed6:	0020      	movs	r0, r4
 8006ed8:	f000 fa26 	bl	8007328 <HAL_EXTI_RegisterCallback>
 8006edc:	1e02      	subs	r2, r0, #0
 8006ede:	d1f6      	bne.n	8006ece <BSP_PB_Init+0x1a>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8006ee0:	2005      	movs	r0, #5
 8006ee2:	210f      	movs	r1, #15
 8006ee4:	f000 f8d8 	bl	8007098 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8006ee8:	2005      	movs	r0, #5
 8006eea:	f000 f8ff 	bl	80070ec <HAL_NVIC_EnableIRQ>
  int32_t ret = BSP_ERROR_NONE;
 8006eee:	2000      	movs	r0, #0
  return ret;
 8006ef0:	e7ef      	b.n	8006ed2 <BSP_PB_Init+0x1e>
 8006ef2:	46c0      	nop			@ (mov r8, r8)
 8006ef4:	20000608 	.word	0x20000608
 8006ef8:	08006eff 	.word	0x08006eff

08006efc <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8006efc:	4770      	bx	lr

08006efe <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8006efe:	b510      	push	{r4, lr}
  BSP_PB_Callback(BUTTON_USER);
 8006f00:	2000      	movs	r0, #0
 8006f02:	f7ff fffb 	bl	8006efc <BSP_PB_Callback>
}
 8006f06:	bd10      	pop	{r4, pc}

08006f08 <MX_USART2_UART_Init>:

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;

  huart->Instance = USART2;
 8006f08:	4b0a      	ldr	r3, [pc, #40]	@ (8006f34 <MX_USART2_UART_Init+0x2c>)
{
 8006f0a:	b510      	push	{r4, lr}
  huart->Instance = USART2;
 8006f0c:	6003      	str	r3, [r0, #0]
  huart->Init.BaudRate = 115200;
 8006f0e:	23e1      	movs	r3, #225	@ 0xe1
 8006f10:	025b      	lsls	r3, r3, #9
  huart->Init.WordLength = UART_WORDLENGTH_8B;
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 8006f12:	220c      	movs	r2, #12
  huart->Init.BaudRate = 115200;
 8006f14:	6043      	str	r3, [r0, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8006f16:	2300      	movs	r3, #0
  huart->Init.Mode = UART_MODE_TX_RX;
 8006f18:	6142      	str	r2, [r0, #20]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8006f1a:	6083      	str	r3, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8006f1c:	60c3      	str	r3, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8006f1e:	6103      	str	r3, [r0, #16]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f20:	6183      	str	r3, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006f22:	61c3      	str	r3, [r0, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f24:	6203      	str	r3, [r0, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f26:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8006f28:	f003 fbb6 	bl	800a698 <HAL_UART_Init>
 8006f2c:	1e43      	subs	r3, r0, #1
 8006f2e:	4198      	sbcs	r0, r3
  {
    ret = HAL_ERROR;
  }

  return ret;
 8006f30:	b2c0      	uxtb	r0, r0
}
 8006f32:	bd10      	pop	{r4, pc}
 8006f34:	40004400 	.word	0x40004400

08006f38 <BSP_COM_Init>:
{
 8006f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3a:	0004      	movs	r4, r0
 8006f3c:	b08b      	sub	sp, #44	@ 0x2c
  if(COM > COMn)
 8006f3e:	2801      	cmp	r0, #1
 8006f40:	d846      	bhi.n	8006fd0 <BSP_COM_Init+0x98>
     hcom_uart[COM].Instance = COM_USART[COM];
 8006f42:	2288      	movs	r2, #136	@ 0x88
 8006f44:	4b25      	ldr	r3, [pc, #148]	@ (8006fdc <BSP_COM_Init+0xa4>)
 8006f46:	4342      	muls	r2, r0
 8006f48:	0080      	lsls	r0, r0, #2
 8006f4a:	58c3      	ldr	r3, [r0, r3]
 8006f4c:	4924      	ldr	r1, [pc, #144]	@ (8006fe0 <BSP_COM_Init+0xa8>)
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f4e:	2090      	movs	r0, #144	@ 0x90
     hcom_uart[COM].Instance = COM_USART[COM];
 8006f50:	5053      	str	r3, [r2, r1]
    __HAL_RCC_USART2_CLK_ENABLE();
 8006f52:	2280      	movs	r2, #128	@ 0x80
 8006f54:	4b23      	ldr	r3, [pc, #140]	@ (8006fe4 <BSP_COM_Init+0xac>)
     hcom_uart[COM].Instance = COM_USART[COM];
 8006f56:	9101      	str	r1, [sp, #4]
    __HAL_RCC_USART2_CLK_ENABLE();
 8006f58:	69d9      	ldr	r1, [r3, #28]
 8006f5a:	0292      	lsls	r2, r2, #10
 8006f5c:	4311      	orrs	r1, r2
 8006f5e:	61d9      	str	r1, [r3, #28]
 8006f60:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f62:	2500      	movs	r5, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8006f64:	4011      	ands	r1, r2
 8006f66:	9103      	str	r1, [sp, #12]
 8006f68:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f6a:	6959      	ldr	r1, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f6c:	2702      	movs	r7, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f6e:	4311      	orrs	r1, r2
 8006f70:	6159      	str	r1, [r3, #20]
 8006f72:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f74:	2603      	movs	r6, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f76:	4013      	ands	r3, r2
 8006f78:	9304      	str	r3, [sp, #16]
 8006f7a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8006f7c:	2304      	movs	r3, #4
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f7e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8006f80:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f82:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8006f84:	3b03      	subs	r3, #3
 8006f86:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f88:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f8a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f8c:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f8e:	f000 f9eb 	bl	8007368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8006f92:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006f94:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8006f96:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006f98:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8006f9a:	3b07      	subs	r3, #7
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006f9c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8006f9e:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa2:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006fa4:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006fa6:	f000 f9df 	bl	8007368 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006faa:	002a      	movs	r2, r5
 8006fac:	0029      	movs	r1, r5
 8006fae:	201c      	movs	r0, #28
 8006fb0:	f000 f872 	bl	8007098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006fb4:	201c      	movs	r0, #28
 8006fb6:	f000 f899 	bl	80070ec <HAL_NVIC_EnableIRQ>
    USART2_MspInit(&hcom_uart[COM]);
 8006fba:	2388      	movs	r3, #136	@ 0x88
 8006fbc:	4260      	negs	r0, r4
 8006fbe:	4018      	ands	r0, r3
 8006fc0:	9b01      	ldr	r3, [sp, #4]
 8006fc2:	18c0      	adds	r0, r0, r3
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8006fc4:	f7ff ffa0 	bl	8006f08 <MX_USART2_UART_Init>
 8006fc8:	42a8      	cmp	r0, r5
 8006fca:	d104      	bne.n	8006fd6 <BSP_COM_Init+0x9e>
}
 8006fcc:	b00b      	add	sp, #44	@ 0x2c
 8006fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006fd0:	2002      	movs	r0, #2
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006fd2:	4240      	negs	r0, r0
  return ret;
 8006fd4:	e7fa      	b.n	8006fcc <BSP_COM_Init+0x94>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006fd6:	2004      	movs	r0, #4
 8006fd8:	e7fb      	b.n	8006fd2 <BSP_COM_Init+0x9a>
 8006fda:	46c0      	nop			@ (mov r8, r8)
 8006fdc:	20000604 	.word	0x20000604
 8006fe0:	200019ac 	.word	0x200019ac
 8006fe4:	40021000 	.word	0x40021000

08006fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006fec:	20fa      	movs	r0, #250	@ 0xfa
 8006fee:	4b0d      	ldr	r3, [pc, #52]	@ (8007024 <HAL_InitTick+0x3c>)
 8006ff0:	0080      	lsls	r0, r0, #2
 8006ff2:	7819      	ldrb	r1, [r3, #0]
 8006ff4:	f7f9 f8b8 	bl	8000168 <__udivsi3>
 8006ff8:	4c0b      	ldr	r4, [pc, #44]	@ (8007028 <HAL_InitTick+0x40>)
 8006ffa:	0001      	movs	r1, r0
 8006ffc:	6820      	ldr	r0, [r4, #0]
 8006ffe:	f7f9 f8b3 	bl	8000168 <__udivsi3>
 8007002:	f000 f87f 	bl	8007104 <HAL_SYSTICK_Config>
 8007006:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8007008:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800700a:	2c00      	cmp	r4, #0
 800700c:	d109      	bne.n	8007022 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800700e:	2d03      	cmp	r5, #3
 8007010:	d807      	bhi.n	8007022 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007012:	3802      	subs	r0, #2
 8007014:	0022      	movs	r2, r4
 8007016:	0029      	movs	r1, r5
 8007018:	f000 f83e 	bl	8007098 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800701c:	0020      	movs	r0, r4
 800701e:	4b03      	ldr	r3, [pc, #12]	@ (800702c <HAL_InitTick+0x44>)
 8007020:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	20000610 	.word	0x20000610
 8007028:	20000600 	.word	0x20000600
 800702c:	20000614 	.word	0x20000614

08007030 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007030:	2310      	movs	r3, #16
 8007032:	4a06      	ldr	r2, [pc, #24]	@ (800704c <HAL_Init+0x1c>)
{
 8007034:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007036:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8007038:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800703a:	430b      	orrs	r3, r1
 800703c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800703e:	f7ff ffd3 	bl	8006fe8 <HAL_InitTick>
  HAL_MspInit();
 8007042:	f7fc fc19 	bl	8003878 <HAL_MspInit>
}
 8007046:	2000      	movs	r0, #0
 8007048:	bd10      	pop	{r4, pc}
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	40022000 	.word	0x40022000

08007050 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007050:	4a03      	ldr	r2, [pc, #12]	@ (8007060 <HAL_IncTick+0x10>)
 8007052:	4b04      	ldr	r3, [pc, #16]	@ (8007064 <HAL_IncTick+0x14>)
 8007054:	6811      	ldr	r1, [r2, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	185b      	adds	r3, r3, r1
 800705a:	6013      	str	r3, [r2, #0]
}
 800705c:	4770      	bx	lr
 800705e:	46c0      	nop			@ (mov r8, r8)
 8007060:	20001a34 	.word	0x20001a34
 8007064:	20000610 	.word	0x20000610

08007068 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007068:	4b01      	ldr	r3, [pc, #4]	@ (8007070 <HAL_GetTick+0x8>)
 800706a:	6818      	ldr	r0, [r3, #0]
}
 800706c:	4770      	bx	lr
 800706e:	46c0      	nop			@ (mov r8, r8)
 8007070:	20001a34 	.word	0x20001a34

08007074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007078:	f7ff fff6 	bl	8007068 <HAL_GetTick>
 800707c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800707e:	1c63      	adds	r3, r4, #1
 8007080:	d002      	beq.n	8007088 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007082:	4b04      	ldr	r3, [pc, #16]	@ (8007094 <HAL_Delay+0x20>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8007088:	f7ff ffee 	bl	8007068 <HAL_GetTick>
 800708c:	1b40      	subs	r0, r0, r5
 800708e:	42a0      	cmp	r0, r4
 8007090:	d3fa      	bcc.n	8007088 <HAL_Delay+0x14>
  {
  }
}
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	20000610 	.word	0x20000610

08007098 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007098:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800709a:	24ff      	movs	r4, #255	@ 0xff
 800709c:	2203      	movs	r2, #3
 800709e:	000b      	movs	r3, r1
 80070a0:	0021      	movs	r1, r4
 80070a2:	4002      	ands	r2, r0
 80070a4:	00d2      	lsls	r2, r2, #3
 80070a6:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80070a8:	019b      	lsls	r3, r3, #6
 80070aa:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070ac:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80070ae:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80070b0:	2800      	cmp	r0, #0
 80070b2:	db0a      	blt.n	80070ca <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070b4:	24c0      	movs	r4, #192	@ 0xc0
 80070b6:	4a0b      	ldr	r2, [pc, #44]	@ (80070e4 <HAL_NVIC_SetPriority+0x4c>)
 80070b8:	0880      	lsrs	r0, r0, #2
 80070ba:	0080      	lsls	r0, r0, #2
 80070bc:	1880      	adds	r0, r0, r2
 80070be:	00a4      	lsls	r4, r4, #2
 80070c0:	5902      	ldr	r2, [r0, r4]
 80070c2:	400a      	ands	r2, r1
 80070c4:	4313      	orrs	r3, r2
 80070c6:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80070c8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070ca:	220f      	movs	r2, #15
 80070cc:	4010      	ands	r0, r2
 80070ce:	3808      	subs	r0, #8
 80070d0:	4a05      	ldr	r2, [pc, #20]	@ (80070e8 <HAL_NVIC_SetPriority+0x50>)
 80070d2:	0880      	lsrs	r0, r0, #2
 80070d4:	0080      	lsls	r0, r0, #2
 80070d6:	1880      	adds	r0, r0, r2
 80070d8:	69c2      	ldr	r2, [r0, #28]
 80070da:	4011      	ands	r1, r2
 80070dc:	4319      	orrs	r1, r3
 80070de:	61c1      	str	r1, [r0, #28]
 80070e0:	e7f2      	b.n	80070c8 <HAL_NVIC_SetPriority+0x30>
 80070e2:	46c0      	nop			@ (mov r8, r8)
 80070e4:	e000e100 	.word	0xe000e100
 80070e8:	e000ed00 	.word	0xe000ed00

080070ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80070ec:	2800      	cmp	r0, #0
 80070ee:	db05      	blt.n	80070fc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070f0:	231f      	movs	r3, #31
 80070f2:	4018      	ands	r0, r3
 80070f4:	3b1e      	subs	r3, #30
 80070f6:	4083      	lsls	r3, r0
 80070f8:	4a01      	ldr	r2, [pc, #4]	@ (8007100 <HAL_NVIC_EnableIRQ+0x14>)
 80070fa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80070fc:	4770      	bx	lr
 80070fe:	46c0      	nop			@ (mov r8, r8)
 8007100:	e000e100 	.word	0xe000e100

08007104 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007104:	2280      	movs	r2, #128	@ 0x80
 8007106:	1e43      	subs	r3, r0, #1
 8007108:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800710a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800710c:	4293      	cmp	r3, r2
 800710e:	d20d      	bcs.n	800712c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007110:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007112:	4a07      	ldr	r2, [pc, #28]	@ (8007130 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007114:	4807      	ldr	r0, [pc, #28]	@ (8007134 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007116:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007118:	6a03      	ldr	r3, [r0, #32]
 800711a:	0609      	lsls	r1, r1, #24
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	0a1b      	lsrs	r3, r3, #8
 8007120:	430b      	orrs	r3, r1
 8007122:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007124:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007126:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007128:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800712a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800712c:	4770      	bx	lr
 800712e:	46c0      	nop			@ (mov r8, r8)
 8007130:	e000e010 	.word	0xe000e010
 8007134:	e000ed00 	.word	0xe000ed00

08007138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 800713c:	2001      	movs	r0, #1
  if (NULL == hdma)
 800713e:	2c00      	cmp	r4, #0
 8007140:	d024      	beq.n	800718c <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007142:	2302      	movs	r3, #2
 8007144:	1ca5      	adds	r5, r4, #2
 8007146:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007148:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800714a:	4b11      	ldr	r3, [pc, #68]	@ (8007190 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 800714c:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800714e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007150:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8007152:	6863      	ldr	r3, [r4, #4]
 8007154:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007156:	68e1      	ldr	r1, [r4, #12]
 8007158:	430b      	orrs	r3, r1
 800715a:	6921      	ldr	r1, [r4, #16]
 800715c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800715e:	6961      	ldr	r1, [r4, #20]
 8007160:	430b      	orrs	r3, r1
 8007162:	69a1      	ldr	r1, [r4, #24]
 8007164:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8007166:	69e1      	ldr	r1, [r4, #28]
 8007168:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800716a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800716c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800716e:	4b09      	ldr	r3, [pc, #36]	@ (8007194 <HAL_DMA_Init+0x5c>)
 8007170:	2114      	movs	r1, #20
 8007172:	18c0      	adds	r0, r0, r3
 8007174:	f7f8 fff8 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8007178:	4b07      	ldr	r3, [pc, #28]	@ (8007198 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800717a:	0080      	lsls	r0, r0, #2
 800717c:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800717e:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007180:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007182:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007184:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8007186:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8007188:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 800718a:	77e0      	strb	r0, [r4, #31]
}
 800718c:	bd70      	pop	{r4, r5, r6, pc}
 800718e:	46c0      	nop			@ (mov r8, r8)
 8007190:	ffffc00f 	.word	0xffffc00f
 8007194:	bffdfff8 	.word	0xbffdfff8
 8007198:	40020000 	.word	0x40020000

0800719c <HAL_DMA_Start_IT>:
{
 800719c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800719e:	1c44      	adds	r4, r0, #1
{
 80071a0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80071a2:	7fe5      	ldrb	r5, [r4, #31]
 80071a4:	2d01      	cmp	r5, #1
 80071a6:	d033      	beq.n	8007210 <HAL_DMA_Start_IT+0x74>
 80071a8:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 80071aa:	1c87      	adds	r7, r0, #2
  __HAL_LOCK(hdma);
 80071ac:	77e5      	strb	r5, [r4, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 80071ae:	7ffd      	ldrb	r5, [r7, #31]
 80071b0:	2600      	movs	r6, #0
 80071b2:	46ac      	mov	ip, r5
 80071b4:	4663      	mov	r3, ip
 80071b6:	b2ed      	uxtb	r5, r5
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d128      	bne.n	800720e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80071bc:	2402      	movs	r4, #2
 80071be:	77fc      	strb	r4, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80071c0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071c2:	6386      	str	r6, [r0, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80071c4:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80071c6:	6c07      	ldr	r7, [r0, #64]	@ 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80071c8:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80071ca:	40bd      	lsls	r5, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80071cc:	6026      	str	r6, [r4, #0]
  hdma->Instance->CNDTR = DataLength;
 80071ce:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80071d0:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 80071d2:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80071d4:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071d6:	6843      	ldr	r3, [r0, #4]
 80071d8:	2b10      	cmp	r3, #16
 80071da:	d10e      	bne.n	80071fa <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 80071dc:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80071de:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80071e0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80071e2:	6822      	ldr	r2, [r4, #0]
    if (NULL != hdma->XferHalfCpltCallback)
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80071e8:	230e      	movs	r3, #14
 80071ea:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80071ec:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80071ee:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80071f0:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 80071f2:	6822      	ldr	r2, [r4, #0]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	6023      	str	r3, [r4, #0]
}
 80071f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 80071fa:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80071fc:	60e2      	str	r2, [r4, #12]
 80071fe:	e7ef      	b.n	80071e0 <HAL_DMA_Start_IT+0x44>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8007200:	230a      	movs	r3, #10
 8007202:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8007204:	2204      	movs	r2, #4
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8007206:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	4393      	bics	r3, r2
 800720c:	e7ee      	b.n	80071ec <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 800720e:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 8007210:	2002      	movs	r0, #2
 8007212:	e7f1      	b.n	80071f8 <HAL_DMA_Start_IT+0x5c>

08007214 <HAL_DMA_Abort>:
{
 8007214:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007216:	1c84      	adds	r4, r0, #2
 8007218:	7fe2      	ldrb	r2, [r4, #31]
{
 800721a:	0003      	movs	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800721c:	2a02      	cmp	r2, #2
 800721e:	d006      	beq.n	800722e <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007220:	2204      	movs	r2, #4
 8007222:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8007224:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8007226:	2200      	movs	r2, #0
 8007228:	3301      	adds	r3, #1
 800722a:	77da      	strb	r2, [r3, #31]
}
 800722c:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800722e:	6802      	ldr	r2, [r0, #0]
 8007230:	200e      	movs	r0, #14
 8007232:	6811      	ldr	r1, [r2, #0]
 8007234:	4381      	bics	r1, r0
 8007236:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007238:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800723a:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800723c:	6810      	ldr	r0, [r2, #0]
 800723e:	4388      	bics	r0, r1
 8007240:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007242:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007244:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007246:	4085      	lsls	r5, r0
  return HAL_OK;
 8007248:	2000      	movs	r0, #0
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800724a:	6055      	str	r5, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY;
 800724c:	77e1      	strb	r1, [r4, #31]
  return HAL_OK;
 800724e:	e7ea      	b.n	8007226 <HAL_DMA_Abort+0x12>

08007250 <HAL_DMA_Abort_IT>:
{
 8007250:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007252:	1c84      	adds	r4, r0, #2
 8007254:	7fe3      	ldrb	r3, [r4, #31]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d003      	beq.n	8007262 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800725a:	2304      	movs	r3, #4
 800725c:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800725e:	2001      	movs	r0, #1
}
 8007260:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007262:	210e      	movs	r1, #14
 8007264:	6803      	ldr	r3, [r0, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	438a      	bics	r2, r1
 800726a:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800726c:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800726e:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007270:	6819      	ldr	r1, [r3, #0]
 8007272:	4391      	bics	r1, r2
 8007274:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007276:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8007278:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800727a:	408d      	lsls	r5, r1
 800727c:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800727e:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8007280:	1883      	adds	r3, r0, r2
 8007282:	2200      	movs	r2, #0
 8007284:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8007286:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007288:	4293      	cmp	r3, r2
 800728a:	d000      	beq.n	800728e <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 800728c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800728e:	2000      	movs	r0, #0
 8007290:	e7e6      	b.n	8007260 <HAL_DMA_Abort_IT+0x10>

08007292 <HAL_DMA_IRQHandler>:
{
 8007292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8007294:	2704      	movs	r7, #4
 8007296:	003e      	movs	r6, r7
 8007298:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800729a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800729c:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800729e:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80072a0:	6803      	ldr	r3, [r0, #0]
 80072a2:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80072a4:	4235      	tst	r5, r6
 80072a6:	d00d      	beq.n	80072c4 <HAL_DMA_IRQHandler+0x32>
 80072a8:	423c      	tst	r4, r7
 80072aa:	d00b      	beq.n	80072c4 <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072ac:	6819      	ldr	r1, [r3, #0]
 80072ae:	0689      	lsls	r1, r1, #26
 80072b0:	d402      	bmi.n	80072b8 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80072b2:	6819      	ldr	r1, [r3, #0]
 80072b4:	43b9      	bics	r1, r7
 80072b6:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80072b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80072ba:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d019      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 80072c0:	4798      	blx	r3
}
 80072c2:	e017      	b.n	80072f4 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80072c4:	2702      	movs	r7, #2
 80072c6:	003e      	movs	r6, r7
 80072c8:	408e      	lsls	r6, r1
 80072ca:	4235      	tst	r5, r6
 80072cc:	d013      	beq.n	80072f6 <HAL_DMA_IRQHandler+0x64>
 80072ce:	423c      	tst	r4, r7
 80072d0:	d011      	beq.n	80072f6 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072d2:	6819      	ldr	r1, [r3, #0]
 80072d4:	0689      	lsls	r1, r1, #26
 80072d6:	d406      	bmi.n	80072e6 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80072d8:	240a      	movs	r4, #10
 80072da:	6819      	ldr	r1, [r3, #0]
 80072dc:	43a1      	bics	r1, r4
 80072de:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80072e0:	2101      	movs	r1, #1
 80072e2:	19c3      	adds	r3, r0, r7
 80072e4:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80072e6:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 80072e8:	2200      	movs	r2, #0
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 80072ee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if (hdma->XferErrorCallback != NULL)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d1e5      	bne.n	80072c0 <HAL_DMA_IRQHandler+0x2e>
}
 80072f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80072f6:	2608      	movs	r6, #8
 80072f8:	0037      	movs	r7, r6
 80072fa:	408f      	lsls	r7, r1
 80072fc:	423d      	tst	r5, r7
 80072fe:	d0f9      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x62>
 8007300:	4234      	tst	r4, r6
 8007302:	d0f7      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007304:	250e      	movs	r5, #14
 8007306:	681c      	ldr	r4, [r3, #0]
 8007308:	43ac      	bics	r4, r5
 800730a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800730c:	2301      	movs	r3, #1
 800730e:	001c      	movs	r4, r3
 8007310:	408c      	lsls	r4, r1
 8007312:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007314:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007316:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8007318:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800731a:	2200      	movs	r2, #0
 800731c:	18c3      	adds	r3, r0, r3
 800731e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8007320:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007322:	e7e5      	b.n	80072f0 <HAL_DMA_IRQHandler+0x5e>

08007324 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8007324:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 8007326:	4770      	bx	lr

08007328 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007328:	0003      	movs	r3, r0
 800732a:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 800732c:	d101      	bne.n	8007332 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800732e:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8007330:	4770      	bx	lr
      status = HAL_ERROR;
 8007332:	2001      	movs	r0, #1
 8007334:	e7fc      	b.n	8007330 <HAL_EXTI_RegisterCallback+0x8>

08007336 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007336:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8007338:	2001      	movs	r0, #1
  if (hexti == NULL)
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 800733e:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8007340:	6019      	str	r1, [r3, #0]
  }
}
 8007342:	4770      	bx	lr

08007344 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007344:	231f      	movs	r3, #31
 8007346:	6802      	ldr	r2, [r0, #0]
{
 8007348:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800734a:	401a      	ands	r2, r3
 800734c:	3b1e      	subs	r3, #30
 800734e:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8007350:	4a04      	ldr	r2, [pc, #16]	@ (8007364 <HAL_EXTI_IRQHandler+0x20>)
 8007352:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8007354:	420b      	tst	r3, r1
 8007356:	d004      	beq.n	8007362 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8007358:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800735a:	6843      	ldr	r3, [r0, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d000      	beq.n	8007362 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8007360:	4798      	blx	r3
    }
  }
}
 8007362:	bd10      	pop	{r4, pc}
 8007364:	40010400 	.word	0x40010400

08007368 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8007368:	2300      	movs	r3, #0
{
 800736a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800736c:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800736e:	680a      	ldr	r2, [r1, #0]
 8007370:	0014      	movs	r4, r2
 8007372:	40dc      	lsrs	r4, r3
 8007374:	d101      	bne.n	800737a <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8007376:	b007      	add	sp, #28
 8007378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800737a:	2501      	movs	r5, #1
 800737c:	0014      	movs	r4, r2
 800737e:	409d      	lsls	r5, r3
 8007380:	402c      	ands	r4, r5
 8007382:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8007384:	422a      	tst	r2, r5
 8007386:	d100      	bne.n	800738a <HAL_GPIO_Init+0x22>
 8007388:	e09c      	b.n	80074c4 <HAL_GPIO_Init+0x15c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800738a:	684a      	ldr	r2, [r1, #4]
 800738c:	005f      	lsls	r7, r3, #1
 800738e:	4694      	mov	ip, r2
 8007390:	2203      	movs	r2, #3
 8007392:	4664      	mov	r4, ip
 8007394:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007396:	2403      	movs	r4, #3
 8007398:	40bc      	lsls	r4, r7
 800739a:	43e4      	mvns	r4, r4
 800739c:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800739e:	1e54      	subs	r4, r2, #1
 80073a0:	2c01      	cmp	r4, #1
 80073a2:	d82e      	bhi.n	8007402 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80073a4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80073a6:	9c01      	ldr	r4, [sp, #4]
 80073a8:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80073aa:	68cc      	ldr	r4, [r1, #12]
 80073ac:	40bc      	lsls	r4, r7
 80073ae:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80073b0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80073b2:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073b4:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80073b6:	43ac      	bics	r4, r5
 80073b8:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073ba:	4664      	mov	r4, ip
 80073bc:	0924      	lsrs	r4, r4, #4
 80073be:	4034      	ands	r4, r6
 80073c0:	409c      	lsls	r4, r3
 80073c2:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80073c4:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80073c6:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80073c8:	9c01      	ldr	r4, [sp, #4]
 80073ca:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80073cc:	688c      	ldr	r4, [r1, #8]
 80073ce:	40bc      	lsls	r4, r7
 80073d0:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80073d2:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073d4:	2a02      	cmp	r2, #2
 80073d6:	d116      	bne.n	8007406 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80073d8:	2507      	movs	r5, #7
 80073da:	260f      	movs	r6, #15
 80073dc:	401d      	ands	r5, r3
 80073de:	00ad      	lsls	r5, r5, #2
 80073e0:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 80073e2:	08dc      	lsrs	r4, r3, #3
 80073e4:	00a4      	lsls	r4, r4, #2
 80073e6:	1904      	adds	r4, r0, r4
 80073e8:	9402      	str	r4, [sp, #8]
 80073ea:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80073ec:	9603      	str	r6, [sp, #12]
 80073ee:	0026      	movs	r6, r4
 80073f0:	9c03      	ldr	r4, [sp, #12]
 80073f2:	43a6      	bics	r6, r4
 80073f4:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80073f6:	690e      	ldr	r6, [r1, #16]
 80073f8:	40ae      	lsls	r6, r5
 80073fa:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80073fc:	9c02      	ldr	r4, [sp, #8]
 80073fe:	6226      	str	r6, [r4, #32]
 8007400:	e001      	b.n	8007406 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007402:	2a03      	cmp	r2, #3
 8007404:	d1df      	bne.n	80073c6 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007406:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8007408:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800740a:	9d01      	ldr	r5, [sp, #4]
 800740c:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800740e:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007410:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8007412:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007414:	4662      	mov	r2, ip
 8007416:	02a4      	lsls	r4, r4, #10
 8007418:	4222      	tst	r2, r4
 800741a:	d053      	beq.n	80074c4 <HAL_GPIO_Init+0x15c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800741c:	2501      	movs	r5, #1
 800741e:	4a2a      	ldr	r2, [pc, #168]	@ (80074c8 <HAL_GPIO_Init+0x160>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007420:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007422:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007424:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007426:	432c      	orrs	r4, r5
 8007428:	6194      	str	r4, [r2, #24]
 800742a:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800742c:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800742e:	402a      	ands	r2, r5
 8007430:	9205      	str	r2, [sp, #20]
 8007432:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8007434:	4a25      	ldr	r2, [pc, #148]	@ (80074cc <HAL_GPIO_Init+0x164>)
 8007436:	00a4      	lsls	r4, r4, #2
 8007438:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800743a:	220f      	movs	r2, #15
 800743c:	3502      	adds	r5, #2
 800743e:	401d      	ands	r5, r3
 8007440:	00ad      	lsls	r5, r5, #2
 8007442:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8007444:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007446:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007448:	2200      	movs	r2, #0
 800744a:	42b8      	cmp	r0, r7
 800744c:	d010      	beq.n	8007470 <HAL_GPIO_Init+0x108>
 800744e:	4f20      	ldr	r7, [pc, #128]	@ (80074d0 <HAL_GPIO_Init+0x168>)
 8007450:	3201      	adds	r2, #1
 8007452:	42b8      	cmp	r0, r7
 8007454:	d00c      	beq.n	8007470 <HAL_GPIO_Init+0x108>
 8007456:	4f1f      	ldr	r7, [pc, #124]	@ (80074d4 <HAL_GPIO_Init+0x16c>)
 8007458:	3201      	adds	r2, #1
 800745a:	42b8      	cmp	r0, r7
 800745c:	d008      	beq.n	8007470 <HAL_GPIO_Init+0x108>
 800745e:	4f1e      	ldr	r7, [pc, #120]	@ (80074d8 <HAL_GPIO_Init+0x170>)
 8007460:	3201      	adds	r2, #1
 8007462:	42b8      	cmp	r0, r7
 8007464:	d004      	beq.n	8007470 <HAL_GPIO_Init+0x108>
 8007466:	4a1d      	ldr	r2, [pc, #116]	@ (80074dc <HAL_GPIO_Init+0x174>)
 8007468:	1882      	adds	r2, r0, r2
 800746a:	1e57      	subs	r7, r2, #1
 800746c:	41ba      	sbcs	r2, r7
 800746e:	3204      	adds	r2, #4
 8007470:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007472:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007474:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007476:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8007478:	4a19      	ldr	r2, [pc, #100]	@ (80074e0 <HAL_GPIO_Init+0x178>)
        temp &= ~(iocurrent);
 800747a:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 800747c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800747e:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8007480:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8007482:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007484:	02ff      	lsls	r7, r7, #11
 8007486:	d401      	bmi.n	800748c <HAL_GPIO_Init+0x124>
        temp &= ~(iocurrent);
 8007488:	0035      	movs	r5, r6
 800748a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800748c:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800748e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8007490:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8007492:	9d00      	ldr	r5, [sp, #0]
 8007494:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007496:	02bf      	lsls	r7, r7, #10
 8007498:	d401      	bmi.n	800749e <HAL_GPIO_Init+0x136>
        temp &= ~(iocurrent);
 800749a:	0035      	movs	r5, r6
 800749c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800749e:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80074a0:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80074a2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80074a4:	9d00      	ldr	r5, [sp, #0]
 80074a6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80074a8:	03bf      	lsls	r7, r7, #14
 80074aa:	d401      	bmi.n	80074b0 <HAL_GPIO_Init+0x148>
        temp &= ~(iocurrent);
 80074ac:	0035      	movs	r5, r6
 80074ae:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80074b0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80074b2:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80074b4:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80074b6:	9e00      	ldr	r6, [sp, #0]
 80074b8:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80074ba:	03ff      	lsls	r7, r7, #15
 80074bc:	d401      	bmi.n	80074c2 <HAL_GPIO_Init+0x15a>
        temp &= ~(iocurrent);
 80074be:	4025      	ands	r5, r4
 80074c0:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80074c2:	6016      	str	r6, [r2, #0]
    position++;
 80074c4:	3301      	adds	r3, #1
 80074c6:	e752      	b.n	800736e <HAL_GPIO_Init+0x6>
 80074c8:	40021000 	.word	0x40021000
 80074cc:	40010000 	.word	0x40010000
 80074d0:	48000400 	.word	0x48000400
 80074d4:	48000800 	.word	0x48000800
 80074d8:	48000c00 	.word	0x48000c00
 80074dc:	b7fff000 	.word	0xb7fff000
 80074e0:	40010400 	.word	0x40010400

080074e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80074e4:	6900      	ldr	r0, [r0, #16]
 80074e6:	4008      	ands	r0, r1
 80074e8:	1e43      	subs	r3, r0, #1
 80074ea:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80074ec:	b2c0      	uxtb	r0, r0
  }
 80074ee:	4770      	bx	lr

080074f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	d001      	beq.n	80074f8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80074f4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80074f6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80074f8:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80074fa:	e7fc      	b.n	80074f6 <HAL_GPIO_WritePin+0x6>

080074fc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80074fc:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074fe:	0013      	movs	r3, r2
 8007500:	400b      	ands	r3, r1
 8007502:	041b      	lsls	r3, r3, #16
 8007504:	4391      	bics	r1, r2
 8007506:	430b      	orrs	r3, r1
 8007508:	6183      	str	r3, [r0, #24]
}
 800750a:	4770      	bx	lr

0800750c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8007510:	2001      	movs	r0, #1
  if (hpcd == NULL)
 8007512:	2c00      	cmp	r4, #0
 8007514:	d02b      	beq.n	800756e <HAL_PCD_Init+0x62>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007516:	4d22      	ldr	r5, [pc, #136]	@ (80075a0 <HAL_PCD_Init+0x94>)
 8007518:	5d63      	ldrb	r3, [r4, r5]
 800751a:	b2da      	uxtb	r2, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d105      	bne.n	800752c <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007520:	23a4      	movs	r3, #164	@ 0xa4
 8007522:	009b      	lsls	r3, r3, #2

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007524:	0020      	movs	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 8007526:	54e2      	strb	r2, [r4, r3]
    HAL_PCD_MspInit(hpcd);
 8007528:	f7fc fbd6 	bl	8003cd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800752c:	2303      	movs	r3, #3
 800752e:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007530:	6820      	ldr	r0, [r4, #0]
 8007532:	f003 f971 	bl	800a818 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007536:	2300      	movs	r3, #0
 8007538:	0022      	movs	r2, r4
 800753a:	0019      	movs	r1, r3
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800753c:	2601      	movs	r6, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800753e:	7920      	ldrb	r0, [r4, #4]
 8007540:	3210      	adds	r2, #16
 8007542:	4298      	cmp	r0, r3
 8007544:	d114      	bne.n	8007570 <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007546:	2100      	movs	r1, #0
 8007548:	0022      	movs	r2, r4
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800754a:	0008      	movs	r0, r1
 800754c:	3251      	adds	r2, #81	@ 0x51
 800754e:	32ff      	adds	r2, #255	@ 0xff
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007550:	428b      	cmp	r3, r1
 8007552:	d117      	bne.n	8007584 <HAL_PCD_Init+0x78>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007554:	6861      	ldr	r1, [r4, #4]
 8007556:	68a2      	ldr	r2, [r4, #8]
 8007558:	6820      	ldr	r0, [r4, #0]
 800755a:	f003 f967 	bl	800a82c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007562:	3301      	adds	r3, #1
 8007564:	5563      	strb	r3, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007566:	7aa3      	ldrb	r3, [r4, #10]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d015      	beq.n	8007598 <HAL_PCD_Init+0x8c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 800756c:	2000      	movs	r0, #0
}
 800756e:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].num = i;
 8007570:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007572:	3301      	adds	r3, #1
    hpcd->IN_ep[i].is_in = 1U;
 8007574:	7056      	strb	r6, [r2, #1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007576:	70d1      	strb	r1, [r2, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007578:	6111      	str	r1, [r2, #16]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800757a:	6151      	str	r1, [r2, #20]
    hpcd->IN_ep[i].xfer_len = 0U;
 800757c:	6191      	str	r1, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800757e:	b2db      	uxtb	r3, r3
 8007580:	3228      	adds	r2, #40	@ 0x28
 8007582:	e7de      	b.n	8007542 <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].num = i;
 8007584:	7011      	strb	r1, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007586:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8007588:	7050      	strb	r0, [r2, #1]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800758a:	70d0      	strb	r0, [r2, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800758c:	6110      	str	r0, [r2, #16]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800758e:	6150      	str	r0, [r2, #20]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007590:	6190      	str	r0, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007592:	b2c9      	uxtb	r1, r1
 8007594:	3228      	adds	r2, #40	@ 0x28
 8007596:	e7db      	b.n	8007550 <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007598:	0020      	movs	r0, r4
 800759a:	f000 fe0e 	bl	80081ba <HAL_PCDEx_ActivateLPM>
 800759e:	e7e5      	b.n	800756c <HAL_PCD_Init+0x60>
 80075a0:	00000291 	.word	0x00000291

080075a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80075a4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 80075a6:	25a4      	movs	r5, #164	@ 0xa4
 80075a8:	00ad      	lsls	r5, r5, #2
 80075aa:	5d43      	ldrb	r3, [r0, r5]
{
 80075ac:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80075ae:	2002      	movs	r0, #2
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d009      	beq.n	80075c8 <HAL_PCD_Start+0x24>
 80075b4:	2301      	movs	r3, #1
 80075b6:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 80075b8:	6820      	ldr	r0, [r4, #0]
 80075ba:	f003 f923 	bl	800a804 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80075be:	6820      	ldr	r0, [r4, #0]
 80075c0:	f003 fb2f 	bl	800ac22 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80075c4:	2000      	movs	r0, #0
 80075c6:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 80075c8:	bd70      	pop	{r4, r5, r6, pc}

080075ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80075ca:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 80075cc:	25a4      	movs	r5, #164	@ 0xa4
 80075ce:	00ad      	lsls	r5, r5, #2
 80075d0:	5d43      	ldrb	r3, [r0, r5]
{
 80075d2:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80075d4:	2002      	movs	r0, #2
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d007      	beq.n	80075ea <HAL_PCD_SetAddress+0x20>
 80075da:	2301      	movs	r3, #1
 80075dc:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80075de:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 80075e0:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80075e2:	f003 fb17 	bl	800ac14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80075e6:	2000      	movs	r0, #0
 80075e8:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 80075ea:	bd70      	pop	{r4, r5, r6, pc}

080075ec <HAL_PCD_IRQHandler>:
{
 80075ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ee:	0004      	movs	r4, r0
 80075f0:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80075f2:	6800      	ldr	r0, [r0, #0]
 80075f4:	f003 fb1d 	bl	800ac32 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80075f8:	2380      	movs	r3, #128	@ 0x80
 80075fa:	0005      	movs	r5, r0
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	401d      	ands	r5, r3
 8007600:	4218      	tst	r0, r3
 8007602:	d101      	bne.n	8007608 <HAL_PCD_IRQHandler+0x1c>
 8007604:	f000 fc27 	bl	8007e56 <HAL_PCD_IRQHandler+0x86a>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007608:	6820      	ldr	r0, [r4, #0]
 800760a:	1d82      	adds	r2, r0, #6
 800760c:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 800760e:	b21b      	sxth	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	db01      	blt.n	8007618 <HAL_PCD_IRQHandler+0x2c>
}
 8007614:	b005      	add	sp, #20
 8007616:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007618:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 800761a:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800761c:	4019      	ands	r1, r3
 800761e:	9100      	str	r1, [sp, #0]

    if (epindex == 0U)
 8007620:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8007622:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 8007624:	420b      	tst	r3, r1
 8007626:	d000      	beq.n	800762a <HAL_PCD_IRQHandler+0x3e>
 8007628:	e0c0      	b.n	80077ac <HAL_PCD_IRQHandler+0x1c0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800762a:	2310      	movs	r3, #16
 800762c:	0011      	movs	r1, r2
 800762e:	4019      	ands	r1, r3
 8007630:	421a      	tst	r2, r3
 8007632:	d127      	bne.n	8007684 <HAL_PCD_IRQHandler+0x98>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007634:	8803      	ldrh	r3, [r0, #0]
 8007636:	4aca      	ldr	r2, [pc, #808]	@ (8007960 <HAL_PCD_IRQHandler+0x374>)
 8007638:	4013      	ands	r3, r2
 800763a:	2280      	movs	r2, #128	@ 0x80
 800763c:	0212      	lsls	r2, r2, #8
 800763e:	4313      	orrs	r3, r2
 8007640:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007642:	0003      	movs	r3, r0
 8007644:	3350      	adds	r3, #80	@ 0x50
 8007646:	881a      	ldrh	r2, [r3, #0]
 8007648:	7c23      	ldrb	r3, [r4, #16]
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	18c3      	adds	r3, r0, r3
 800764e:	189b      	adds	r3, r3, r2
 8007650:	4ac4      	ldr	r2, [pc, #784]	@ (8007964 <HAL_PCD_IRQHandler+0x378>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007652:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007654:	189b      	adds	r3, r3, r2
 8007656:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8007658:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800765a:	059b      	lsls	r3, r3, #22
 800765c:	0d9b      	lsrs	r3, r3, #22
 800765e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8007660:	18d3      	adds	r3, r2, r3
 8007662:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007664:	f00a fdd5 	bl	8012212 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007668:	7b23      	ldrb	r3, [r4, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0cc      	beq.n	8007608 <HAL_PCD_IRQHandler+0x1c>
 800766e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007670:	6823      	ldr	r3, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007672:	2900      	cmp	r1, #0
 8007674:	d1c8      	bne.n	8007608 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007676:	2080      	movs	r0, #128	@ 0x80
 8007678:	7b22      	ldrb	r2, [r4, #12]
 800767a:	334c      	adds	r3, #76	@ 0x4c
 800767c:	4302      	orrs	r2, r0
 800767e:	801a      	strh	r2, [r3, #0]
          hpcd->USB_Address = 0U;
 8007680:	7321      	strb	r1, [r4, #12]
 8007682:	e7c1      	b.n	8007608 <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007684:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007686:	2180      	movs	r1, #128	@ 0x80
 8007688:	0016      	movs	r6, r2
 800768a:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800768c:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800768e:	400e      	ands	r6, r1
 8007690:	420a      	tst	r2, r1
 8007692:	d022      	beq.n	80076da <HAL_PCD_IRQHandler+0xee>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007694:	0003      	movs	r3, r0
 8007696:	3350      	adds	r3, #80	@ 0x50
 8007698:	881a      	ldrh	r2, [r3, #0]
 800769a:	23a8      	movs	r3, #168	@ 0xa8
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80076a0:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	18c3      	adds	r3, r0, r3
 80076a6:	189b      	adds	r3, r3, r2
 80076a8:	4aaf      	ldr	r2, [pc, #700]	@ (8007968 <HAL_PCD_IRQHandler+0x37c>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80076aa:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80076ac:	189b      	adds	r3, r3, r2
 80076ae:	0022      	movs	r2, r4
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	3251      	adds	r2, #81	@ 0x51
 80076b4:	059b      	lsls	r3, r3, #22
 80076b6:	0d9b      	lsrs	r3, r3, #22
 80076b8:	32ff      	adds	r2, #255	@ 0xff
 80076ba:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80076bc:	1861      	adds	r1, r4, r1
 80076be:	88d2      	ldrh	r2, [r2, #6]
 80076c0:	f003 fd02 	bl	800b0c8 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80076c4:	6821      	ldr	r1, [r4, #0]
 80076c6:	4ba9      	ldr	r3, [pc, #676]	@ (800796c <HAL_PCD_IRQHandler+0x380>)
 80076c8:	880a      	ldrh	r2, [r1, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80076ca:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80076cc:	401a      	ands	r2, r3
 80076ce:	2380      	movs	r3, #128	@ 0x80
 80076d0:	4313      	orrs	r3, r2
 80076d2:	800b      	strh	r3, [r1, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80076d4:	f00a fd88 	bl	80121e8 <HAL_PCD_SetupStageCallback>
 80076d8:	e796      	b.n	8007608 <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80076da:	b21b      	sxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	db00      	blt.n	80076e2 <HAL_PCD_IRQHandler+0xf6>
 80076e0:	e792      	b.n	8007608 <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80076e2:	8802      	ldrh	r2, [r0, #0]
 80076e4:	4ba1      	ldr	r3, [pc, #644]	@ (800796c <HAL_PCD_IRQHandler+0x380>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80076e6:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80076e8:	401a      	ands	r2, r3
 80076ea:	2380      	movs	r3, #128	@ 0x80
 80076ec:	4313      	orrs	r3, r2
 80076ee:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80076f0:	0003      	movs	r3, r0
 80076f2:	3350      	adds	r3, #80	@ 0x50
 80076f4:	881a      	ldrh	r2, [r3, #0]
 80076f6:	23a8      	movs	r3, #168	@ 0xa8
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	5ce3      	ldrb	r3, [r4, r3]
 80076fc:	3551      	adds	r5, #81	@ 0x51
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	18c3      	adds	r3, r0, r3
 8007702:	189b      	adds	r3, r3, r2
 8007704:	4a98      	ldr	r2, [pc, #608]	@ (8007968 <HAL_PCD_IRQHandler+0x37c>)
 8007706:	35ff      	adds	r5, #255	@ 0xff
 8007708:	189b      	adds	r3, r3, r2
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	059b      	lsls	r3, r3, #22
 800770e:	0d9b      	lsrs	r3, r3, #22
 8007710:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007712:	d00d      	beq.n	8007730 <HAL_PCD_IRQHandler+0x144>
 8007714:	6969      	ldr	r1, [r5, #20]
 8007716:	2900      	cmp	r1, #0
 8007718:	d00a      	beq.n	8007730 <HAL_PCD_IRQHandler+0x144>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800771a:	88ea      	ldrh	r2, [r5, #6]
 800771c:	f003 fcd4 	bl	800b0c8 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8007720:	696b      	ldr	r3, [r5, #20]
 8007722:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007724:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 8007726:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007728:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 800772a:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800772c:	f00a fd65 	bl	80121fa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007730:	6821      	ldr	r1, [r4, #0]
 8007732:	880a      	ldrh	r2, [r1, #0]
 8007734:	b293      	uxth	r3, r2

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007736:	0512      	lsls	r2, r2, #20
 8007738:	d500      	bpl.n	800773c <HAL_PCD_IRQHandler+0x150>
 800773a:	e765      	b.n	8007608 <HAL_PCD_IRQHandler+0x1c>
 800773c:	22c0      	movs	r2, #192	@ 0xc0
 800773e:	0192      	lsls	r2, r2, #6
 8007740:	4013      	ands	r3, r2
 8007742:	4293      	cmp	r3, r2
 8007744:	d100      	bne.n	8007748 <HAL_PCD_IRQHandler+0x15c>
 8007746:	e75f      	b.n	8007608 <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007748:	000b      	movs	r3, r1
 800774a:	4a87      	ldr	r2, [pc, #540]	@ (8007968 <HAL_PCD_IRQHandler+0x37c>)
 800774c:	3350      	adds	r3, #80	@ 0x50
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	188a      	adds	r2, r1, r2
 8007752:	18d2      	adds	r2, r2, r3
 8007754:	8813      	ldrh	r3, [r2, #0]
 8007756:	059b      	lsls	r3, r3, #22
 8007758:	0d9b      	lsrs	r3, r3, #22
 800775a:	8013      	strh	r3, [r2, #0]
 800775c:	692b      	ldr	r3, [r5, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10e      	bne.n	8007780 <HAL_PCD_IRQHandler+0x194>
 8007762:	2080      	movs	r0, #128	@ 0x80
 8007764:	8813      	ldrh	r3, [r2, #0]
 8007766:	0200      	lsls	r0, r0, #8
 8007768:	4303      	orrs	r3, r0
 800776a:	8013      	strh	r3, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800776c:	880a      	ldrh	r2, [r1, #0]
 800776e:	4b80      	ldr	r3, [pc, #512]	@ (8007970 <HAL_PCD_IRQHandler+0x384>)
 8007770:	401a      	ands	r2, r3
 8007772:	23c0      	movs	r3, #192	@ 0xc0
 8007774:	019b      	lsls	r3, r3, #6
 8007776:	4053      	eors	r3, r2
 8007778:	4a7e      	ldr	r2, [pc, #504]	@ (8007974 <HAL_PCD_IRQHandler+0x388>)
 800777a:	4313      	orrs	r3, r2
 800777c:	800b      	strh	r3, [r1, #0]
 800777e:	e743      	b.n	8007608 <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007780:	2b3e      	cmp	r3, #62	@ 0x3e
 8007782:	d808      	bhi.n	8007796 <HAL_PCD_IRQHandler+0x1aa>
 8007784:	2501      	movs	r5, #1
 8007786:	0858      	lsrs	r0, r3, #1
 8007788:	402b      	ands	r3, r5
 800778a:	18c0      	adds	r0, r0, r3
 800778c:	8813      	ldrh	r3, [r2, #0]
 800778e:	0280      	lsls	r0, r0, #10
 8007790:	4303      	orrs	r3, r0
 8007792:	b29b      	uxth	r3, r3
 8007794:	e7e9      	b.n	800776a <HAL_PCD_IRQHandler+0x17e>
 8007796:	251f      	movs	r5, #31
 8007798:	0958      	lsrs	r0, r3, #5
 800779a:	402b      	ands	r3, r5
 800779c:	425d      	negs	r5, r3
 800779e:	416b      	adcs	r3, r5
 80077a0:	1ac0      	subs	r0, r0, r3
 80077a2:	8813      	ldrh	r3, [r2, #0]
 80077a4:	0280      	lsls	r0, r0, #10
 80077a6:	4318      	orrs	r0, r3
 80077a8:	4b73      	ldr	r3, [pc, #460]	@ (8007978 <HAL_PCD_IRQHandler+0x38c>)
 80077aa:	e7f1      	b.n	8007790 <HAL_PCD_IRQHandler+0x1a4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80077ac:	9b00      	ldr	r3, [sp, #0]
 80077ae:	009f      	lsls	r7, r3, #2
 80077b0:	19c2      	adds	r2, r0, r7
 80077b2:	8813      	ldrh	r3, [r2, #0]
 80077b4:	b299      	uxth	r1, r3

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80077b6:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80077b8:	9101      	str	r1, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	db00      	blt.n	80077c0 <HAL_PCD_IRQHandler+0x1d4>
 80077be:	e092      	b.n	80078e6 <HAL_PCD_IRQHandler+0x2fa>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80077c0:	8813      	ldrh	r3, [r2, #0]
 80077c2:	496a      	ldr	r1, [pc, #424]	@ (800796c <HAL_PCD_IRQHandler+0x380>)
 80077c4:	400b      	ands	r3, r1
 80077c6:	2180      	movs	r1, #128	@ 0x80
 80077c8:	430b      	orrs	r3, r1
 80077ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80077cc:	2328      	movs	r3, #40	@ 0x28
 80077ce:	9a00      	ldr	r2, [sp, #0]
 80077d0:	4353      	muls	r3, r2
 80077d2:	18e3      	adds	r3, r4, r3
 80077d4:	001a      	movs	r2, r3
 80077d6:	001d      	movs	r5, r3
 80077d8:	325d      	adds	r2, #93	@ 0x5d
 80077da:	32ff      	adds	r2, #255	@ 0xff
 80077dc:	7812      	ldrb	r2, [r2, #0]
 80077de:	3551      	adds	r5, #81	@ 0x51
 80077e0:	35ff      	adds	r5, #255	@ 0xff
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	d114      	bne.n	8007810 <HAL_PCD_IRQHandler+0x224>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80077e6:	0002      	movs	r2, r0
 80077e8:	3250      	adds	r2, #80	@ 0x50
 80077ea:	8811      	ldrh	r1, [r2, #0]
 80077ec:	782a      	ldrb	r2, [r5, #0]
 80077ee:	00d2      	lsls	r2, r2, #3
 80077f0:	1852      	adds	r2, r2, r1
 80077f2:	495d      	ldr	r1, [pc, #372]	@ (8007968 <HAL_PCD_IRQHandler+0x37c>)
 80077f4:	1812      	adds	r2, r2, r0
 80077f6:	1852      	adds	r2, r2, r1
 80077f8:	8812      	ldrh	r2, [r2, #0]
 80077fa:	0592      	lsls	r2, r2, #22
 80077fc:	0d95      	lsrs	r5, r2, #22

          if (count != 0U)
 80077fe:	2a00      	cmp	r2, #0
 8007800:	d056      	beq.n	80078b0 <HAL_PCD_IRQHandler+0x2c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007802:	001a      	movs	r2, r3
 8007804:	3257      	adds	r2, #87	@ 0x57
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

              if (count != 0U)
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007806:	32ff      	adds	r2, #255	@ 0xff
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007808:	33fc      	adds	r3, #252	@ 0xfc
 800780a:	0019      	movs	r1, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800780c:	8812      	ldrh	r2, [r2, #0]
 800780e:	e04b      	b.n	80078a8 <HAL_PCD_IRQHandler+0x2bc>
          if (ep->type == EP_TYPE_BULK)
 8007810:	0019      	movs	r1, r3
 8007812:	3154      	adds	r1, #84	@ 0x54
 8007814:	31ff      	adds	r1, #255	@ 0xff
 8007816:	7809      	ldrb	r1, [r1, #0]

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007818:	782a      	ldrb	r2, [r5, #0]
          if (ep->type == EP_TYPE_BULK)
 800781a:	2902      	cmp	r1, #2
 800781c:	d000      	beq.n	8007820 <HAL_PCD_IRQHandler+0x234>
 800781e:	e0e3      	b.n	80079e8 <HAL_PCD_IRQHandler+0x3fc>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007820:	2680      	movs	r6, #128	@ 0x80
 8007822:	01f6      	lsls	r6, r6, #7
 8007824:	46b4      	mov	ip, r6
 8007826:	4665      	mov	r5, ip
 8007828:	9e01      	ldr	r6, [sp, #4]

    if (ep->xfer_len >= count)
 800782a:	33fc      	adds	r3, #252	@ 0xfc
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800782c:	402e      	ands	r6, r5
 800782e:	9603      	str	r6, [sp, #12]
 8007830:	0006      	movs	r6, r0
 8007832:	3650      	adds	r6, #80	@ 0x50
 8007834:	9602      	str	r6, [sp, #8]
 8007836:	4666      	mov	r6, ip
 8007838:	9d01      	ldr	r5, [sp, #4]
    if (ep->xfer_len >= count)
 800783a:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800783c:	4235      	tst	r5, r6
 800783e:	d100      	bne.n	8007842 <HAL_PCD_IRQHandler+0x256>
 8007840:	e0a0      	b.n	8007984 <HAL_PCD_IRQHandler+0x398>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007842:	9d02      	ldr	r5, [sp, #8]
 8007844:	882e      	ldrh	r6, [r5, #0]
 8007846:	00d5      	lsls	r5, r2, #3
 8007848:	1976      	adds	r6, r6, r5
 800784a:	4d46      	ldr	r5, [pc, #280]	@ (8007964 <HAL_PCD_IRQHandler+0x378>)
 800784c:	1836      	adds	r6, r6, r0
 800784e:	1976      	adds	r6, r6, r5
 8007850:	8835      	ldrh	r5, [r6, #0]
 8007852:	05ad      	lsls	r5, r5, #22
 8007854:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8007856:	428d      	cmp	r5, r1
 8007858:	d90d      	bls.n	8007876 <HAL_PCD_IRQHandler+0x28a>
 800785a:	2100      	movs	r1, #0
 800785c:	66d9      	str	r1, [r3, #108]	@ 0x6c
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800785e:	0091      	lsls	r1, r2, #2
 8007860:	1841      	adds	r1, r0, r1
 8007862:	880e      	ldrh	r6, [r1, #0]
 8007864:	4b42      	ldr	r3, [pc, #264]	@ (8007970 <HAL_PCD_IRQHandler+0x384>)
 8007866:	401e      	ands	r6, r3
 8007868:	2380      	movs	r3, #128	@ 0x80
 800786a:	019b      	lsls	r3, r3, #6
 800786c:	4073      	eors	r3, r6
 800786e:	4e41      	ldr	r6, [pc, #260]	@ (8007974 <HAL_PCD_IRQHandler+0x388>)
 8007870:	4333      	orrs	r3, r6
 8007872:	800b      	strh	r3, [r1, #0]
 8007874:	e002      	b.n	800787c <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 8007876:	1b49      	subs	r1, r1, r5
 8007878:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 800787a:	d0f0      	beq.n	800785e <HAL_PCD_IRQHandler+0x272>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800787c:	9b01      	ldr	r3, [sp, #4]
 800787e:	065b      	lsls	r3, r3, #25
 8007880:	d507      	bpl.n	8007892 <HAL_PCD_IRQHandler+0x2a6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007882:	0092      	lsls	r2, r2, #2
 8007884:	1882      	adds	r2, r0, r2
 8007886:	8813      	ldrh	r3, [r2, #0]
 8007888:	493c      	ldr	r1, [pc, #240]	@ (800797c <HAL_PCD_IRQHandler+0x390>)
 800788a:	400b      	ands	r3, r1
 800788c:	493c      	ldr	r1, [pc, #240]	@ (8007980 <HAL_PCD_IRQHandler+0x394>)
 800788e:	430b      	orrs	r3, r1
 8007890:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007892:	2d00      	cmp	r5, #0
 8007894:	d00c      	beq.n	80078b0 <HAL_PCD_IRQHandler+0x2c4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007896:	2328      	movs	r3, #40	@ 0x28
 8007898:	9a00      	ldr	r2, [sp, #0]
 800789a:	4353      	muls	r3, r2
 800789c:	18e1      	adds	r1, r4, r3
 800789e:	000a      	movs	r2, r1
 80078a0:	3259      	adds	r2, #89	@ 0x59
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
    }

    if (count != 0U)
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80078a2:	32ff      	adds	r2, #255	@ 0xff
 80078a4:	8812      	ldrh	r2, [r2, #0]
 80078a6:	31fc      	adds	r1, #252	@ 0xfc
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80078a8:	002b      	movs	r3, r5
 80078aa:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80078ac:	f003 fc0c 	bl	800b0c8 <USB_ReadPMA>
        ep->xfer_count += count;
 80078b0:	2328      	movs	r3, #40	@ 0x28
 80078b2:	9900      	ldr	r1, [sp, #0]
 80078b4:	4359      	muls	r1, r3
 80078b6:	1862      	adds	r2, r4, r1
 80078b8:	32fc      	adds	r2, #252	@ 0xfc
 80078ba:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80078bc:	1940      	adds	r0, r0, r5
 80078be:	6710      	str	r0, [r2, #112]	@ 0x70
        ep->xfer_buff += count;
 80078c0:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80078c2:	1940      	adds	r0, r0, r5
 80078c4:	6690      	str	r0, [r2, #104]	@ 0x68
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80078c6:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_PCD_IRQHandler+0x2e8>
 80078cc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80078ce:	4295      	cmp	r5, r2
 80078d0:	d300      	bcc.n	80078d4 <HAL_PCD_IRQHandler+0x2e8>
 80078d2:	e0b3      	b.n	8007a3c <HAL_PCD_IRQHandler+0x450>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80078d4:	9a00      	ldr	r2, [sp, #0]
 80078d6:	0020      	movs	r0, r4
 80078d8:	4353      	muls	r3, r2
 80078da:	18e3      	adds	r3, r4, r3
 80078dc:	3351      	adds	r3, #81	@ 0x51
 80078de:	33ff      	adds	r3, #255	@ 0xff
 80078e0:	7819      	ldrb	r1, [r3, #0]
 80078e2:	f00a fc8a 	bl	80121fa <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80078e6:	2280      	movs	r2, #128	@ 0x80
 80078e8:	9b01      	ldr	r3, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80078ea:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80078ec:	4213      	tst	r3, r2
 80078ee:	d100      	bne.n	80078f2 <HAL_PCD_IRQHandler+0x306>
 80078f0:	e68a      	b.n	8007608 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80078f2:	19c2      	adds	r2, r0, r7
 80078f4:	8813      	ldrh	r3, [r2, #0]
 80078f6:	491a      	ldr	r1, [pc, #104]	@ (8007960 <HAL_PCD_IRQHandler+0x374>)
        if (ep->type == EP_TYPE_ISOC)
 80078f8:	9e00      	ldr	r6, [sp, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80078fa:	400b      	ands	r3, r1
 80078fc:	491e      	ldr	r1, [pc, #120]	@ (8007978 <HAL_PCD_IRQHandler+0x38c>)
 80078fe:	430b      	orrs	r3, r1
 8007900:	b29b      	uxth	r3, r3
 8007902:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 8007904:	2228      	movs	r2, #40	@ 0x28
 8007906:	4356      	muls	r6, r2
 8007908:	19a3      	adds	r3, r4, r6
 800790a:	7cd9      	ldrb	r1, [r3, #19]
 800790c:	2901      	cmp	r1, #1
 800790e:	d000      	beq.n	8007912 <HAL_PCD_IRQHandler+0x326>
 8007910:	e0c7      	b.n	8007aa2 <HAL_PCD_IRQHandler+0x4b6>
          ep->xfer_len = 0U;
 8007912:	9900      	ldr	r1, [sp, #0]
 8007914:	3101      	adds	r1, #1
 8007916:	434a      	muls	r2, r1
 8007918:	2100      	movs	r1, #0
 800791a:	5111      	str	r1, [r2, r4]
          if (ep->doublebuffer != 0U)
 800791c:	7f1a      	ldrb	r2, [r3, #28]
 800791e:	428a      	cmp	r2, r1
 8007920:	d100      	bne.n	8007924 <HAL_PCD_IRQHandler+0x338>
 8007922:	e09e      	b.n	8007a62 <HAL_PCD_IRQHandler+0x476>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007924:	2240      	movs	r2, #64	@ 0x40
 8007926:	9d01      	ldr	r5, [sp, #4]
 8007928:	9e01      	ldr	r6, [sp, #4]
 800792a:	4015      	ands	r5, r2
 800792c:	4216      	tst	r6, r2
 800792e:	d100      	bne.n	8007932 <HAL_PCD_IRQHandler+0x346>
 8007930:	e0a0      	b.n	8007a74 <HAL_PCD_IRQHandler+0x488>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007932:	7c5a      	ldrb	r2, [r3, #17]
 8007934:	428a      	cmp	r2, r1
 8007936:	d000      	beq.n	800793a <HAL_PCD_IRQHandler+0x34e>
 8007938:	e087      	b.n	8007a4a <HAL_PCD_IRQHandler+0x45e>
 800793a:	0002      	movs	r2, r0
 800793c:	3250      	adds	r2, #80	@ 0x50
 800793e:	8811      	ldrh	r1, [r2, #0]
 8007940:	7c1a      	ldrb	r2, [r3, #16]
 8007942:	4b08      	ldr	r3, [pc, #32]	@ (8007964 <HAL_PCD_IRQHandler+0x378>)
 8007944:	00d2      	lsls	r2, r2, #3
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007946:	18c0      	adds	r0, r0, r3
 8007948:	1841      	adds	r1, r0, r1
 800794a:	1852      	adds	r2, r2, r1
 800794c:	8813      	ldrh	r3, [r2, #0]
 800794e:	490a      	ldr	r1, [pc, #40]	@ (8007978 <HAL_PCD_IRQHandler+0x38c>)
 8007950:	059b      	lsls	r3, r3, #22
 8007952:	0d9b      	lsrs	r3, r3, #22
 8007954:	8013      	strh	r3, [r2, #0]
 8007956:	8813      	ldrh	r3, [r2, #0]
 8007958:	430b      	orrs	r3, r1
 800795a:	b29b      	uxth	r3, r3
 800795c:	8013      	strh	r3, [r2, #0]
 800795e:	e080      	b.n	8007a62 <HAL_PCD_IRQHandler+0x476>
 8007960:	ffff8f0f 	.word	0xffff8f0f
 8007964:	00000402 	.word	0x00000402
 8007968:	00000406 	.word	0x00000406
 800796c:	00000f8f 	.word	0x00000f8f
 8007970:	ffffbf8f 	.word	0xffffbf8f
 8007974:	00008080 	.word	0x00008080
 8007978:	ffff8000 	.word	0xffff8000
 800797c:	ffff8f8f 	.word	0xffff8f8f
 8007980:	000080c0 	.word	0x000080c0
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007984:	9d02      	ldr	r5, [sp, #8]
 8007986:	882e      	ldrh	r6, [r5, #0]
 8007988:	00d5      	lsls	r5, r2, #3
 800798a:	1976      	adds	r6, r6, r5
 800798c:	4dc7      	ldr	r5, [pc, #796]	@ (8007cac <HAL_PCD_IRQHandler+0x6c0>)
 800798e:	1836      	adds	r6, r6, r0
 8007990:	1976      	adds	r6, r6, r5
 8007992:	8835      	ldrh	r5, [r6, #0]
 8007994:	05ad      	lsls	r5, r5, #22
 8007996:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8007998:	428d      	cmp	r5, r1
 800799a:	d90d      	bls.n	80079b8 <HAL_PCD_IRQHandler+0x3cc>
 800799c:	9903      	ldr	r1, [sp, #12]
 800799e:	66d9      	str	r1, [r3, #108]	@ 0x6c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80079a0:	0091      	lsls	r1, r2, #2
 80079a2:	1841      	adds	r1, r0, r1
 80079a4:	880e      	ldrh	r6, [r1, #0]
 80079a6:	4bc2      	ldr	r3, [pc, #776]	@ (8007cb0 <HAL_PCD_IRQHandler+0x6c4>)
 80079a8:	401e      	ands	r6, r3
 80079aa:	2380      	movs	r3, #128	@ 0x80
 80079ac:	019b      	lsls	r3, r3, #6
 80079ae:	4073      	eors	r3, r6
 80079b0:	4ec0      	ldr	r6, [pc, #768]	@ (8007cb4 <HAL_PCD_IRQHandler+0x6c8>)
 80079b2:	4333      	orrs	r3, r6
 80079b4:	800b      	strh	r3, [r1, #0]
 80079b6:	e002      	b.n	80079be <HAL_PCD_IRQHandler+0x3d2>
      ep->xfer_len -= count;
 80079b8:	1b49      	subs	r1, r1, r5
 80079ba:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 80079bc:	d0f0      	beq.n	80079a0 <HAL_PCD_IRQHandler+0x3b4>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	065b      	lsls	r3, r3, #25
 80079c2:	d407      	bmi.n	80079d4 <HAL_PCD_IRQHandler+0x3e8>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80079c4:	0092      	lsls	r2, r2, #2
 80079c6:	1882      	adds	r2, r0, r2
 80079c8:	8813      	ldrh	r3, [r2, #0]
 80079ca:	49bb      	ldr	r1, [pc, #748]	@ (8007cb8 <HAL_PCD_IRQHandler+0x6cc>)
 80079cc:	400b      	ands	r3, r1
 80079ce:	49bb      	ldr	r1, [pc, #748]	@ (8007cbc <HAL_PCD_IRQHandler+0x6d0>)
 80079d0:	430b      	orrs	r3, r1
 80079d2:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	d100      	bne.n	80079da <HAL_PCD_IRQHandler+0x3ee>
 80079d8:	e76a      	b.n	80078b0 <HAL_PCD_IRQHandler+0x2c4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80079da:	2328      	movs	r3, #40	@ 0x28
 80079dc:	9a00      	ldr	r2, [sp, #0]
 80079de:	4353      	muls	r3, r2
 80079e0:	18e1      	adds	r1, r4, r3
 80079e2:	000a      	movs	r2, r1
 80079e4:	325b      	adds	r2, #91	@ 0x5b
 80079e6:	e75c      	b.n	80078a2 <HAL_PCD_IRQHandler+0x2b6>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80079e8:	0092      	lsls	r2, r2, #2
 80079ea:	1882      	adds	r2, r0, r2
 80079ec:	8816      	ldrh	r6, [r2, #0]
 80079ee:	49b2      	ldr	r1, [pc, #712]	@ (8007cb8 <HAL_PCD_IRQHandler+0x6cc>)
 80079f0:	4031      	ands	r1, r6
 80079f2:	4eb2      	ldr	r6, [pc, #712]	@ (8007cbc <HAL_PCD_IRQHandler+0x6d0>)
 80079f4:	4331      	orrs	r1, r6
 80079f6:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80079f8:	782a      	ldrb	r2, [r5, #0]
 80079fa:	0091      	lsls	r1, r2, #2
 80079fc:	1841      	adds	r1, r0, r1
 80079fe:	880d      	ldrh	r5, [r1, #0]
 8007a00:	0001      	movs	r1, r0
 8007a02:	3150      	adds	r1, #80	@ 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a04:	8809      	ldrh	r1, [r1, #0]
 8007a06:	00d2      	lsls	r2, r2, #3
 8007a08:	1852      	adds	r2, r2, r1
 8007a0a:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007a0c:	046d      	lsls	r5, r5, #17
 8007a0e:	d50a      	bpl.n	8007a26 <HAL_PCD_IRQHandler+0x43a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a10:	49ab      	ldr	r1, [pc, #684]	@ (8007cc0 <HAL_PCD_IRQHandler+0x6d4>)
 8007a12:	1852      	adds	r2, r2, r1
 8007a14:	8812      	ldrh	r2, [r2, #0]
 8007a16:	0592      	lsls	r2, r2, #22
 8007a18:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8007a1a:	2a00      	cmp	r2, #0
 8007a1c:	d100      	bne.n	8007a20 <HAL_PCD_IRQHandler+0x434>
 8007a1e:	e747      	b.n	80078b0 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007a20:	001a      	movs	r2, r3
 8007a22:	3259      	adds	r2, #89	@ 0x59
 8007a24:	e6ef      	b.n	8007806 <HAL_PCD_IRQHandler+0x21a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007a26:	49a1      	ldr	r1, [pc, #644]	@ (8007cac <HAL_PCD_IRQHandler+0x6c0>)
 8007a28:	1852      	adds	r2, r2, r1
 8007a2a:	8812      	ldrh	r2, [r2, #0]
 8007a2c:	0592      	lsls	r2, r2, #22
 8007a2e:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8007a30:	2a00      	cmp	r2, #0
 8007a32:	d100      	bne.n	8007a36 <HAL_PCD_IRQHandler+0x44a>
 8007a34:	e73c      	b.n	80078b0 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007a36:	001a      	movs	r2, r3
 8007a38:	325b      	adds	r2, #91	@ 0x5b
 8007a3a:	e6e4      	b.n	8007806 <HAL_PCD_IRQHandler+0x21a>
        ep = &hpcd->OUT_ep[epindex];
 8007a3c:	3151      	adds	r1, #81	@ 0x51
 8007a3e:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a40:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007a42:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a44:	f003 f90e 	bl	800ac64 <USB_EPStartXfer>
 8007a48:	e74d      	b.n	80078e6 <HAL_PCD_IRQHandler+0x2fa>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a4a:	2a01      	cmp	r2, #1
 8007a4c:	d109      	bne.n	8007a62 <HAL_PCD_IRQHandler+0x476>
 8007a4e:	0002      	movs	r2, r0
 8007a50:	4d9b      	ldr	r5, [pc, #620]	@ (8007cc0 <HAL_PCD_IRQHandler+0x6d4>)
 8007a52:	3250      	adds	r2, #80	@ 0x50
 8007a54:	8812      	ldrh	r2, [r2, #0]
 8007a56:	7c1b      	ldrb	r3, [r3, #16]
 8007a58:	1940      	adds	r0, r0, r5
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	1880      	adds	r0, r0, r2
 8007a5e:	181b      	adds	r3, r3, r0
 8007a60:	8019      	strh	r1, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a62:	2328      	movs	r3, #40	@ 0x28
 8007a64:	9a00      	ldr	r2, [sp, #0]
 8007a66:	4353      	muls	r3, r2
 8007a68:	18e3      	adds	r3, r4, r3
 8007a6a:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a6c:	0020      	movs	r0, r4
 8007a6e:	f00a fbd0 	bl	8012212 <HAL_PCD_DataInStageCallback>
 8007a72:	e5c9      	b.n	8007608 <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a74:	7c5a      	ldrb	r2, [r3, #17]
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	d106      	bne.n	8007a88 <HAL_PCD_IRQHandler+0x49c>
 8007a7a:	0002      	movs	r2, r0
 8007a7c:	3250      	adds	r2, #80	@ 0x50
 8007a7e:	8811      	ldrh	r1, [r2, #0]
 8007a80:	7c1a      	ldrb	r2, [r3, #16]
 8007a82:	4b8a      	ldr	r3, [pc, #552]	@ (8007cac <HAL_PCD_IRQHandler+0x6c0>)
 8007a84:	00d2      	lsls	r2, r2, #3
 8007a86:	e75e      	b.n	8007946 <HAL_PCD_IRQHandler+0x35a>
 8007a88:	2a01      	cmp	r2, #1
 8007a8a:	d1ea      	bne.n	8007a62 <HAL_PCD_IRQHandler+0x476>
 8007a8c:	0002      	movs	r2, r0
 8007a8e:	4987      	ldr	r1, [pc, #540]	@ (8007cac <HAL_PCD_IRQHandler+0x6c0>)
 8007a90:	3250      	adds	r2, #80	@ 0x50
 8007a92:	8812      	ldrh	r2, [r2, #0]
 8007a94:	7c1b      	ldrb	r3, [r3, #16]
 8007a96:	1840      	adds	r0, r0, r1
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	1880      	adds	r0, r0, r2
 8007a9c:	181b      	adds	r3, r3, r0
 8007a9e:	801d      	strh	r5, [r3, #0]
 8007aa0:	e7df      	b.n	8007a62 <HAL_PCD_IRQHandler+0x476>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007aa2:	2780      	movs	r7, #128	@ 0x80
 8007aa4:	9901      	ldr	r1, [sp, #4]
 8007aa6:	007f      	lsls	r7, r7, #1
 8007aa8:	4039      	ands	r1, r7
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007aaa:	7c1a      	ldrb	r2, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007aac:	468c      	mov	ip, r1
 8007aae:	9901      	ldr	r1, [sp, #4]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007ab0:	9202      	str	r2, [sp, #8]
            if (ep->xfer_len > TxPctSize)
 8007ab2:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007ab4:	00d2      	lsls	r2, r2, #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007ab6:	4239      	tst	r1, r7
 8007ab8:	d11c      	bne.n	8007af4 <HAL_PCD_IRQHandler+0x508>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007aba:	0007      	movs	r7, r0
 8007abc:	3750      	adds	r7, #80	@ 0x50
 8007abe:	883f      	ldrh	r7, [r7, #0]
 8007ac0:	18bf      	adds	r7, r7, r2
 8007ac2:	4a7f      	ldr	r2, [pc, #508]	@ (8007cc0 <HAL_PCD_IRQHandler+0x6d4>)
 8007ac4:	183f      	adds	r7, r7, r0
 8007ac6:	18bf      	adds	r7, r7, r2
 8007ac8:	883a      	ldrh	r2, [r7, #0]
 8007aca:	0592      	lsls	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 8007acc:	0d92      	lsrs	r2, r2, #22
 8007ace:	42aa      	cmp	r2, r5
 8007ad0:	d303      	bcc.n	8007ada <HAL_PCD_IRQHandler+0x4ee>
 8007ad2:	4662      	mov	r2, ip
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ad4:	9902      	ldr	r1, [sp, #8]
 8007ad6:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ad8:	e7c8      	b.n	8007a6c <HAL_PCD_IRQHandler+0x480>
              ep->xfer_buff += TxPctSize;
 8007ada:	6a59      	ldr	r1, [r3, #36]	@ 0x24
              ep->xfer_len -= TxPctSize;
 8007adc:	1aad      	subs	r5, r5, r2
              ep->xfer_buff += TxPctSize;
 8007ade:	1889      	adds	r1, r1, r2
 8007ae0:	6259      	str	r1, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8007ae2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8007ae4:	3610      	adds	r6, #16
              ep->xfer_count += TxPctSize;
 8007ae6:	188a      	adds	r2, r1, r2
 8007ae8:	629d      	str	r5, [r3, #40]	@ 0x28
 8007aea:	62da      	str	r2, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8007aec:	19a1      	adds	r1, r4, r6
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007aee:	f003 f8b9 	bl	800ac64 <USB_EPStartXfer>
 8007af2:	e589      	b.n	8007608 <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007af4:	2140      	movs	r1, #64	@ 0x40
 8007af6:	468c      	mov	ip, r1
 8007af8:	9f01      	ldr	r7, [sp, #4]
 8007afa:	0006      	movs	r6, r0
 8007afc:	400f      	ands	r7, r1
 8007afe:	9703      	str	r7, [sp, #12]
 8007b00:	4667      	mov	r7, ip
 8007b02:	9901      	ldr	r1, [sp, #4]
 8007b04:	3650      	adds	r6, #80	@ 0x50
 8007b06:	4239      	tst	r1, r7
 8007b08:	d100      	bne.n	8007b0c <HAL_PCD_IRQHandler+0x520>
 8007b0a:	e0df      	b.n	8007ccc <HAL_PCD_IRQHandler+0x6e0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b0c:	496c      	ldr	r1, [pc, #432]	@ (8007cc0 <HAL_PCD_IRQHandler+0x6d4>)
 8007b0e:	8837      	ldrh	r7, [r6, #0]
 8007b10:	1846      	adds	r6, r0, r1
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8007b12:	2100      	movs	r1, #0
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b14:	19f7      	adds	r7, r6, r7
 8007b16:	5abf      	ldrh	r7, [r7, r2]
      ep->xfer_len = 0U;
 8007b18:	468c      	mov	ip, r1
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b1a:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len > TxPctSize)
 8007b1c:	0dbf      	lsrs	r7, r7, #22
 8007b1e:	42af      	cmp	r7, r5
 8007b20:	d201      	bcs.n	8007b26 <HAL_PCD_IRQHandler+0x53a>
      ep->xfer_len -= TxPctSize;
 8007b22:	1be9      	subs	r1, r5, r7
 8007b24:	468c      	mov	ip, r1
 8007b26:	4661      	mov	r1, ip
 8007b28:	2580      	movs	r5, #128	@ 0x80
 8007b2a:	6299      	str	r1, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007b2c:	9901      	ldr	r1, [sp, #4]
 8007b2e:	01ed      	lsls	r5, r5, #7
 8007b30:	4029      	ands	r1, r5
 8007b32:	000d      	movs	r5, r1
 8007b34:	4661      	mov	r1, ip
 8007b36:	2900      	cmp	r1, #0
 8007b38:	d147      	bne.n	8007bca <HAL_PCD_IRQHandler+0x5de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b3a:	2328      	movs	r3, #40	@ 0x28
 8007b3c:	9900      	ldr	r1, [sp, #0]
 8007b3e:	434b      	muls	r3, r1
 8007b40:	18e3      	adds	r3, r4, r3
 8007b42:	7c5b      	ldrb	r3, [r3, #17]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d130      	bne.n	8007baa <HAL_PCD_IRQHandler+0x5be>
 8007b48:	0007      	movs	r7, r0
 8007b4a:	3750      	adds	r7, #80	@ 0x50
 8007b4c:	883b      	ldrh	r3, [r7, #0]
 8007b4e:	495d      	ldr	r1, [pc, #372]	@ (8007cc4 <HAL_PCD_IRQHandler+0x6d8>)
 8007b50:	18f3      	adds	r3, r6, r3
 8007b52:	189b      	adds	r3, r3, r2
 8007b54:	881e      	ldrh	r6, [r3, #0]
 8007b56:	05b6      	lsls	r6, r6, #22
 8007b58:	0db6      	lsrs	r6, r6, #22
 8007b5a:	801e      	strh	r6, [r3, #0]
 8007b5c:	881e      	ldrh	r6, [r3, #0]
 8007b5e:	430e      	orrs	r6, r1
 8007b60:	b2b6      	uxth	r6, r6
 8007b62:	801e      	strh	r6, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b64:	4e51      	ldr	r6, [pc, #324]	@ (8007cac <HAL_PCD_IRQHandler+0x6c0>)
 8007b66:	883b      	ldrh	r3, [r7, #0]
 8007b68:	1980      	adds	r0, r0, r6
 8007b6a:	18c0      	adds	r0, r0, r3
 8007b6c:	1880      	adds	r0, r0, r2
 8007b6e:	8803      	ldrh	r3, [r0, #0]
 8007b70:	059b      	lsls	r3, r3, #22
 8007b72:	0d9b      	lsrs	r3, r3, #22
 8007b74:	8003      	strh	r3, [r0, #0]
 8007b76:	8803      	ldrh	r3, [r0, #0]
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	8003      	strh	r3, [r0, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007b7e:	0020      	movs	r0, r4
 8007b80:	9902      	ldr	r1, [sp, #8]
 8007b82:	f00a fb46 	bl	8012212 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b86:	2d00      	cmp	r5, #0
 8007b88:	d100      	bne.n	8007b8c <HAL_PCD_IRQHandler+0x5a0>
 8007b8a:	e0dc      	b.n	8007d46 <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007b8c:	2328      	movs	r3, #40	@ 0x28
 8007b8e:	9a00      	ldr	r2, [sp, #0]
 8007b90:	4949      	ldr	r1, [pc, #292]	@ (8007cb8 <HAL_PCD_IRQHandler+0x6cc>)
 8007b92:	4353      	muls	r3, r2
 8007b94:	18e3      	adds	r3, r4, r3
 8007b96:	7c1b      	ldrb	r3, [r3, #16]
 8007b98:	6822      	ldr	r2, [r4, #0]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	18d2      	adds	r2, r2, r3
 8007b9e:	8813      	ldrh	r3, [r2, #0]
 8007ba0:	400b      	ands	r3, r1
 8007ba2:	4949      	ldr	r1, [pc, #292]	@ (8007cc8 <HAL_PCD_IRQHandler+0x6dc>)
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	8013      	strh	r3, [r2, #0]
 8007ba8:	e0cd      	b.n	8007d46 <HAL_PCD_IRQHandler+0x75a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d1e7      	bne.n	8007b7e <HAL_PCD_IRQHandler+0x592>
 8007bae:	0007      	movs	r7, r0
 8007bb0:	4661      	mov	r1, ip
 8007bb2:	3750      	adds	r7, #80	@ 0x50
 8007bb4:	883b      	ldrh	r3, [r7, #0]
 8007bb6:	18f3      	adds	r3, r6, r3
 8007bb8:	189b      	adds	r3, r3, r2
 8007bba:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007bbc:	493b      	ldr	r1, [pc, #236]	@ (8007cac <HAL_PCD_IRQHandler+0x6c0>)
 8007bbe:	883b      	ldrh	r3, [r7, #0]
 8007bc0:	1840      	adds	r0, r0, r1
 8007bc2:	18c0      	adds	r0, r0, r3
 8007bc4:	1880      	adds	r0, r0, r2
 8007bc6:	4663      	mov	r3, ip
 8007bc8:	e7d8      	b.n	8007b7c <HAL_PCD_IRQHandler+0x590>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007bca:	2d00      	cmp	r5, #0
 8007bcc:	d00c      	beq.n	8007be8 <HAL_PCD_IRQHandler+0x5fc>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007bce:	9902      	ldr	r1, [sp, #8]
 8007bd0:	0089      	lsls	r1, r1, #2
 8007bd2:	1841      	adds	r1, r0, r1
 8007bd4:	880d      	ldrh	r5, [r1, #0]
 8007bd6:	9101      	str	r1, [sp, #4]
 8007bd8:	46ac      	mov	ip, r5
 8007bda:	4661      	mov	r1, ip
 8007bdc:	4d36      	ldr	r5, [pc, #216]	@ (8007cb8 <HAL_PCD_IRQHandler+0x6cc>)
 8007bde:	400d      	ands	r5, r1
 8007be0:	4939      	ldr	r1, [pc, #228]	@ (8007cc8 <HAL_PCD_IRQHandler+0x6dc>)
 8007be2:	430d      	orrs	r5, r1
 8007be4:	9901      	ldr	r1, [sp, #4]
 8007be6:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 8007be8:	2528      	movs	r5, #40	@ 0x28
 8007bea:	9900      	ldr	r1, [sp, #0]
 8007bec:	434d      	muls	r5, r1
 8007bee:	2134      	movs	r1, #52	@ 0x34
 8007bf0:	468c      	mov	ip, r1
 8007bf2:	1965      	adds	r5, r4, r5
 8007bf4:	44ac      	add	ip, r5
 8007bf6:	4661      	mov	r1, ip
 8007bf8:	7809      	ldrb	r1, [r1, #0]
 8007bfa:	2901      	cmp	r1, #1
 8007bfc:	d000      	beq.n	8007c00 <HAL_PCD_IRQHandler+0x614>
 8007bfe:	e0a2      	b.n	8007d46 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 8007c00:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8007c02:	19c9      	adds	r1, r1, r7
 8007c04:	6269      	str	r1, [r5, #36]	@ 0x24
 8007c06:	9101      	str	r1, [sp, #4]
        ep->xfer_count += TxPctSize;
 8007c08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007c0a:	19c9      	adds	r1, r1, r7
 8007c0c:	62d9      	str	r1, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8007c0e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007c10:	6a29      	ldr	r1, [r5, #32]
 8007c12:	428b      	cmp	r3, r1
 8007c14:	d317      	bcc.n	8007c46 <HAL_PCD_IRQHandler+0x65a>
          ep->xfer_len_db -= len;
 8007c16:	1a5b      	subs	r3, r3, r1
 8007c18:	632b      	str	r3, [r5, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007c1a:	2328      	movs	r3, #40	@ 0x28
 8007c1c:	9d00      	ldr	r5, [sp, #0]
 8007c1e:	436b      	muls	r3, r5
 8007c20:	18e3      	adds	r3, r4, r3
 8007c22:	7c5d      	ldrb	r5, [r3, #17]
 8007c24:	b28b      	uxth	r3, r1
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	d137      	bne.n	8007c9a <HAL_PCD_IRQHandler+0x6ae>
 8007c2a:	0005      	movs	r5, r0
 8007c2c:	3550      	adds	r5, #80	@ 0x50
 8007c2e:	882d      	ldrh	r5, [r5, #0]
 8007c30:	1975      	adds	r5, r6, r5
 8007c32:	18aa      	adds	r2, r5, r2
 8007c34:	8815      	ldrh	r5, [r2, #0]
 8007c36:	05ad      	lsls	r5, r5, #22
 8007c38:	0dad      	lsrs	r5, r5, #22
 8007c3a:	8015      	strh	r5, [r2, #0]
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d10e      	bne.n	8007c5e <HAL_PCD_IRQHandler+0x672>
 8007c40:	8811      	ldrh	r1, [r2, #0]
 8007c42:	4d20      	ldr	r5, [pc, #128]	@ (8007cc4 <HAL_PCD_IRQHandler+0x6d8>)
 8007c44:	e013      	b.n	8007c6e <HAL_PCD_IRQHandler+0x682>
        else if (ep->xfer_len_db == 0U)
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <HAL_PCD_IRQHandler+0x666>
          ep->xfer_fill_db = 0U;
 8007c4a:	4661      	mov	r1, ip
 8007c4c:	700b      	strb	r3, [r1, #0]
          len = TxPctSize;
 8007c4e:	0039      	movs	r1, r7
 8007c50:	e7e3      	b.n	8007c1a <HAL_PCD_IRQHandler+0x62e>
          ep->xfer_fill_db = 0U;
 8007c52:	2100      	movs	r1, #0
 8007c54:	4667      	mov	r7, ip
 8007c56:	7039      	strb	r1, [r7, #0]
          ep->xfer_len_db = 0U;
 8007c58:	6329      	str	r1, [r5, #48]	@ 0x30
          len = ep->xfer_len_db;
 8007c5a:	0019      	movs	r1, r3
 8007c5c:	e7dd      	b.n	8007c1a <HAL_PCD_IRQHandler+0x62e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007c5e:	293e      	cmp	r1, #62	@ 0x3e
 8007c60:	d811      	bhi.n	8007c86 <HAL_PCD_IRQHandler+0x69a>
 8007c62:	2601      	movs	r6, #1
 8007c64:	084d      	lsrs	r5, r1, #1
 8007c66:	400e      	ands	r6, r1
 8007c68:	19ad      	adds	r5, r5, r6
 8007c6a:	8811      	ldrh	r1, [r2, #0]
 8007c6c:	02ad      	lsls	r5, r5, #10
 8007c6e:	4329      	orrs	r1, r5
 8007c70:	b289      	uxth	r1, r1
 8007c72:	8011      	strh	r1, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007c74:	2228      	movs	r2, #40	@ 0x28
 8007c76:	9900      	ldr	r1, [sp, #0]
 8007c78:	434a      	muls	r2, r1
 8007c7a:	18a2      	adds	r2, r4, r2
 8007c7c:	8b12      	ldrh	r2, [r2, #24]
 8007c7e:	9901      	ldr	r1, [sp, #4]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007c80:	f002 ffdb 	bl	800ac3a <USB_WritePMA>
 8007c84:	e05f      	b.n	8007d46 <HAL_PCD_IRQHandler+0x75a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007c86:	261f      	movs	r6, #31
 8007c88:	094d      	lsrs	r5, r1, #5
 8007c8a:	4031      	ands	r1, r6
 8007c8c:	424e      	negs	r6, r1
 8007c8e:	4171      	adcs	r1, r6
 8007c90:	1a6d      	subs	r5, r5, r1
 8007c92:	8811      	ldrh	r1, [r2, #0]
 8007c94:	02ad      	lsls	r5, r5, #10
 8007c96:	4329      	orrs	r1, r5
 8007c98:	e7d3      	b.n	8007c42 <HAL_PCD_IRQHandler+0x656>
 8007c9a:	2d01      	cmp	r5, #1
 8007c9c:	d1ea      	bne.n	8007c74 <HAL_PCD_IRQHandler+0x688>
 8007c9e:	0001      	movs	r1, r0
 8007ca0:	3150      	adds	r1, #80	@ 0x50
 8007ca2:	8809      	ldrh	r1, [r1, #0]
 8007ca4:	1876      	adds	r6, r6, r1
 8007ca6:	18b6      	adds	r6, r6, r2
 8007ca8:	8033      	strh	r3, [r6, #0]
 8007caa:	e7e3      	b.n	8007c74 <HAL_PCD_IRQHandler+0x688>
 8007cac:	00000406 	.word	0x00000406
 8007cb0:	ffffbf8f 	.word	0xffffbf8f
 8007cb4:	00008080 	.word	0x00008080
 8007cb8:	ffff8f8f 	.word	0xffff8f8f
 8007cbc:	000080c0 	.word	0x000080c0
 8007cc0:	00000402 	.word	0x00000402
 8007cc4:	ffff8000 	.word	0xffff8000
 8007cc8:	0000c080 	.word	0x0000c080
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ccc:	49ac      	ldr	r1, [pc, #688]	@ (8007f80 <HAL_PCD_IRQHandler+0x994>)
 8007cce:	8836      	ldrh	r6, [r6, #0]
 8007cd0:	468c      	mov	ip, r1
 8007cd2:	4484      	add	ip, r0
 8007cd4:	4466      	add	r6, ip
 8007cd6:	5ab6      	ldrh	r6, [r6, r2]
      ep->xfer_len = 0U;
 8007cd8:	9f03      	ldr	r7, [sp, #12]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007cda:	05b6      	lsls	r6, r6, #22
    if (ep->xfer_len >= TxPctSize)
 8007cdc:	0db6      	lsrs	r6, r6, #22
 8007cde:	42ae      	cmp	r6, r5
 8007ce0:	d800      	bhi.n	8007ce4 <HAL_PCD_IRQHandler+0x6f8>
      ep->xfer_len -= TxPctSize;
 8007ce2:	1baf      	subs	r7, r5, r6
 8007ce4:	2580      	movs	r5, #128	@ 0x80
 8007ce6:	9901      	ldr	r1, [sp, #4]
 8007ce8:	01ed      	lsls	r5, r5, #7
 8007cea:	4029      	ands	r1, r5
 8007cec:	000d      	movs	r5, r1
 8007cee:	629f      	str	r7, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8007cf0:	2f00      	cmp	r7, #0
 8007cf2:	d149      	bne.n	8007d88 <HAL_PCD_IRQHandler+0x79c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007cf4:	2328      	movs	r3, #40	@ 0x28
 8007cf6:	9900      	ldr	r1, [sp, #0]
 8007cf8:	434b      	muls	r3, r1
 8007cfa:	18e3      	adds	r3, r4, r3
 8007cfc:	7c5b      	ldrb	r3, [r3, #17]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d133      	bne.n	8007d6a <HAL_PCD_IRQHandler+0x77e>
 8007d02:	0003      	movs	r3, r0
 8007d04:	499f      	ldr	r1, [pc, #636]	@ (8007f84 <HAL_PCD_IRQHandler+0x998>)
 8007d06:	3350      	adds	r3, #80	@ 0x50
 8007d08:	881e      	ldrh	r6, [r3, #0]
 8007d0a:	1840      	adds	r0, r0, r1
 8007d0c:	1980      	adds	r0, r0, r6
 8007d0e:	1880      	adds	r0, r0, r2
 8007d10:	8806      	ldrh	r6, [r0, #0]
 8007d12:	499d      	ldr	r1, [pc, #628]	@ (8007f88 <HAL_PCD_IRQHandler+0x99c>)
 8007d14:	05b6      	lsls	r6, r6, #22
 8007d16:	0db6      	lsrs	r6, r6, #22
 8007d18:	8006      	strh	r6, [r0, #0]
 8007d1a:	8806      	ldrh	r6, [r0, #0]
 8007d1c:	430e      	orrs	r6, r1
 8007d1e:	b2b6      	uxth	r6, r6
 8007d20:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	4463      	add	r3, ip
 8007d26:	189b      	adds	r3, r3, r2
 8007d28:	881a      	ldrh	r2, [r3, #0]
 8007d2a:	0592      	lsls	r2, r2, #22
 8007d2c:	0d92      	lsrs	r2, r2, #22
 8007d2e:	801a      	strh	r2, [r3, #0]
 8007d30:	881a      	ldrh	r2, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	b292      	uxth	r2, r2
 8007d36:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007d38:	0020      	movs	r0, r4
 8007d3a:	9902      	ldr	r1, [sp, #8]
 8007d3c:	f00a fa69 	bl	8012212 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007d40:	2d00      	cmp	r5, #0
 8007d42:	d100      	bne.n	8007d46 <HAL_PCD_IRQHandler+0x75a>
 8007d44:	e722      	b.n	8007b8c <HAL_PCD_IRQHandler+0x5a0>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007d46:	2328      	movs	r3, #40	@ 0x28
 8007d48:	9a00      	ldr	r2, [sp, #0]
 8007d4a:	4353      	muls	r3, r2
 8007d4c:	18e3      	adds	r3, r4, r3
 8007d4e:	7c1b      	ldrb	r3, [r3, #16]
 8007d50:	6822      	ldr	r2, [r4, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	18d2      	adds	r2, r2, r3
 8007d56:	8811      	ldrh	r1, [r2, #0]
 8007d58:	4b8c      	ldr	r3, [pc, #560]	@ (8007f8c <HAL_PCD_IRQHandler+0x9a0>)
 8007d5a:	4019      	ands	r1, r3
 8007d5c:	2330      	movs	r3, #48	@ 0x30
 8007d5e:	404b      	eors	r3, r1
 8007d60:	498b      	ldr	r1, [pc, #556]	@ (8007f90 <HAL_PCD_IRQHandler+0x9a4>)
 8007d62:	430b      	orrs	r3, r1
 8007d64:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007d66:	f7ff fc4f 	bl	8007608 <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d1e4      	bne.n	8007d38 <HAL_PCD_IRQHandler+0x74c>
 8007d6e:	0003      	movs	r3, r0
 8007d70:	4984      	ldr	r1, [pc, #528]	@ (8007f84 <HAL_PCD_IRQHandler+0x998>)
 8007d72:	3350      	adds	r3, #80	@ 0x50
 8007d74:	881e      	ldrh	r6, [r3, #0]
 8007d76:	1840      	adds	r0, r0, r1
 8007d78:	1980      	adds	r0, r0, r6
 8007d7a:	1880      	adds	r0, r0, r2
 8007d7c:	8007      	strh	r7, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	4463      	add	r3, ip
 8007d82:	189b      	adds	r3, r3, r2
 8007d84:	801f      	strh	r7, [r3, #0]
 8007d86:	e7d7      	b.n	8007d38 <HAL_PCD_IRQHandler+0x74c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	d108      	bne.n	8007d9e <HAL_PCD_IRQHandler+0x7b2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007d8c:	9902      	ldr	r1, [sp, #8]
 8007d8e:	4d81      	ldr	r5, [pc, #516]	@ (8007f94 <HAL_PCD_IRQHandler+0x9a8>)
 8007d90:	0089      	lsls	r1, r1, #2
 8007d92:	1841      	adds	r1, r0, r1
 8007d94:	880f      	ldrh	r7, [r1, #0]
 8007d96:	403d      	ands	r5, r7
 8007d98:	4f7f      	ldr	r7, [pc, #508]	@ (8007f98 <HAL_PCD_IRQHandler+0x9ac>)
 8007d9a:	433d      	orrs	r5, r7
 8007d9c:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 8007d9e:	2728      	movs	r7, #40	@ 0x28
 8007da0:	9900      	ldr	r1, [sp, #0]
 8007da2:	434f      	muls	r7, r1
 8007da4:	19e7      	adds	r7, r4, r7
 8007da6:	0039      	movs	r1, r7
 8007da8:	3134      	adds	r1, #52	@ 0x34
 8007daa:	9101      	str	r1, [sp, #4]
 8007dac:	7809      	ldrb	r1, [r1, #0]
 8007dae:	2901      	cmp	r1, #1
 8007db0:	d1c9      	bne.n	8007d46 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 8007db2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007db4:	1989      	adds	r1, r1, r6
 8007db6:	6279      	str	r1, [r7, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8007db8:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8007dba:	19ad      	adds	r5, r5, r6
 8007dbc:	62dd      	str	r5, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	6a3d      	ldr	r5, [r7, #32]
 8007dc2:	42ab      	cmp	r3, r5
 8007dc4:	d317      	bcc.n	8007df6 <HAL_PCD_IRQHandler+0x80a>
          ep->xfer_len_db -= len;
 8007dc6:	1b5b      	subs	r3, r3, r5
 8007dc8:	633b      	str	r3, [r7, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007dca:	2328      	movs	r3, #40	@ 0x28
 8007dcc:	9e00      	ldr	r6, [sp, #0]
 8007dce:	4373      	muls	r3, r6
 8007dd0:	18e3      	adds	r3, r4, r3
 8007dd2:	7c5e      	ldrb	r6, [r3, #17]
 8007dd4:	b2ab      	uxth	r3, r5
 8007dd6:	2e00      	cmp	r6, #0
 8007dd8:	d134      	bne.n	8007e44 <HAL_PCD_IRQHandler+0x858>
 8007dda:	0006      	movs	r6, r0
 8007ddc:	3650      	adds	r6, #80	@ 0x50
 8007dde:	8836      	ldrh	r6, [r6, #0]
 8007de0:	4466      	add	r6, ip
 8007de2:	18b2      	adds	r2, r6, r2
 8007de4:	8816      	ldrh	r6, [r2, #0]
 8007de6:	05b6      	lsls	r6, r6, #22
 8007de8:	0db6      	lsrs	r6, r6, #22
 8007dea:	8016      	strh	r6, [r2, #0]
 8007dec:	2d00      	cmp	r5, #0
 8007dee:	d10e      	bne.n	8007e0e <HAL_PCD_IRQHandler+0x822>
 8007df0:	8815      	ldrh	r5, [r2, #0]
 8007df2:	4e65      	ldr	r6, [pc, #404]	@ (8007f88 <HAL_PCD_IRQHandler+0x99c>)
 8007df4:	e013      	b.n	8007e1e <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d103      	bne.n	8007e02 <HAL_PCD_IRQHandler+0x816>
          ep->xfer_fill_db = 0U;
 8007dfa:	9d01      	ldr	r5, [sp, #4]
 8007dfc:	702b      	strb	r3, [r5, #0]
          len = TxPctSize;
 8007dfe:	0035      	movs	r5, r6
 8007e00:	e7e3      	b.n	8007dca <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db = 0U;
 8007e02:	2500      	movs	r5, #0
          ep->xfer_fill_db = 0;
 8007e04:	9e01      	ldr	r6, [sp, #4]
          ep->xfer_len_db = 0U;
 8007e06:	633d      	str	r5, [r7, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8007e08:	7035      	strb	r5, [r6, #0]
          len = ep->xfer_len_db;
 8007e0a:	001d      	movs	r5, r3
 8007e0c:	e7dd      	b.n	8007dca <HAL_PCD_IRQHandler+0x7de>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e0e:	2d3e      	cmp	r5, #62	@ 0x3e
 8007e10:	d80e      	bhi.n	8007e30 <HAL_PCD_IRQHandler+0x844>
 8007e12:	2701      	movs	r7, #1
 8007e14:	086e      	lsrs	r6, r5, #1
 8007e16:	402f      	ands	r7, r5
 8007e18:	19f6      	adds	r6, r6, r7
 8007e1a:	8815      	ldrh	r5, [r2, #0]
 8007e1c:	02b6      	lsls	r6, r6, #10
 8007e1e:	4335      	orrs	r5, r6
 8007e20:	b2ad      	uxth	r5, r5
 8007e22:	8015      	strh	r5, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007e24:	2228      	movs	r2, #40	@ 0x28
 8007e26:	9d00      	ldr	r5, [sp, #0]
 8007e28:	436a      	muls	r2, r5
 8007e2a:	18a2      	adds	r2, r4, r2
 8007e2c:	8b52      	ldrh	r2, [r2, #26]
 8007e2e:	e727      	b.n	8007c80 <HAL_PCD_IRQHandler+0x694>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e30:	271f      	movs	r7, #31
 8007e32:	096e      	lsrs	r6, r5, #5
 8007e34:	403d      	ands	r5, r7
 8007e36:	426f      	negs	r7, r5
 8007e38:	417d      	adcs	r5, r7
 8007e3a:	1b76      	subs	r6, r6, r5
 8007e3c:	8815      	ldrh	r5, [r2, #0]
 8007e3e:	02b6      	lsls	r6, r6, #10
 8007e40:	4335      	orrs	r5, r6
 8007e42:	e7d6      	b.n	8007df2 <HAL_PCD_IRQHandler+0x806>
 8007e44:	2e01      	cmp	r6, #1
 8007e46:	d1ed      	bne.n	8007e24 <HAL_PCD_IRQHandler+0x838>
 8007e48:	0005      	movs	r5, r0
 8007e4a:	3550      	adds	r5, #80	@ 0x50
 8007e4c:	882d      	ldrh	r5, [r5, #0]
 8007e4e:	4465      	add	r5, ip
 8007e50:	18aa      	adds	r2, r5, r2
 8007e52:	8013      	strh	r3, [r2, #0]
 8007e54:	e7e6      	b.n	8007e24 <HAL_PCD_IRQHandler+0x838>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007e56:	0543      	lsls	r3, r0, #21
 8007e58:	d50e      	bpl.n	8007e78 <HAL_PCD_IRQHandler+0x88c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	494f      	ldr	r1, [pc, #316]	@ (8007f9c <HAL_PCD_IRQHandler+0x9b0>)
 8007e5e:	3306      	adds	r3, #6
 8007e60:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8007e62:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007e64:	400a      	ands	r2, r1
 8007e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8007e68:	f00a f9e5 	bl	8012236 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007e6c:	0029      	movs	r1, r5
 8007e6e:	0020      	movs	r0, r4
 8007e70:	f7ff fbab 	bl	80075ca <HAL_PCD_SetAddress>
    return;
 8007e74:	f7ff fbce 	bl	8007614 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007e78:	0443      	lsls	r3, r0, #17
 8007e7a:	d507      	bpl.n	8007e8c <HAL_PCD_IRQHandler+0x8a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	4948      	ldr	r1, [pc, #288]	@ (8007fa0 <HAL_PCD_IRQHandler+0x9b4>)
 8007e80:	3306      	adds	r3, #6
 8007e82:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007e84:	400a      	ands	r2, r1
 8007e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
    return;
 8007e88:	f7ff fbc4 	bl	8007614 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007e8c:	2380      	movs	r3, #128	@ 0x80
 8007e8e:	0001      	movs	r1, r0
 8007e90:	019b      	lsls	r3, r3, #6
 8007e92:	4019      	ands	r1, r3
 8007e94:	4218      	tst	r0, r3
 8007e96:	d004      	beq.n	8007ea2 <HAL_PCD_IRQHandler+0x8b6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	4942      	ldr	r1, [pc, #264]	@ (8007fa4 <HAL_PCD_IRQHandler+0x9b8>)
 8007e9c:	3306      	adds	r3, #6
 8007e9e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8007ea0:	e7f0      	b.n	8007e84 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007ea2:	04c3      	lsls	r3, r0, #19
 8007ea4:	d51a      	bpl.n	8007edc <HAL_PCD_IRQHandler+0x8f0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007ea6:	2004      	movs	r0, #4
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	3302      	adds	r3, #2
 8007eac:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8007eae:	4382      	bics	r2, r0
 8007eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007eb2:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8007eb4:	1800      	adds	r0, r0, r0
 8007eb6:	4382      	bics	r2, r0
 8007eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L1)
 8007eba:	23b2      	movs	r3, #178	@ 0xb2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	5ce2      	ldrb	r2, [r4, r3]
 8007ec0:	2a01      	cmp	r2, #1
 8007ec2:	d103      	bne.n	8007ecc <HAL_PCD_IRQHandler+0x8e0>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007ec4:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 8007ec6:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007ec8:	f000 f98b 	bl	80081e2 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8007ecc:	0020      	movs	r0, r4
 8007ece:	f00a f9ca 	bl	8012266 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	4934      	ldr	r1, [pc, #208]	@ (8007fa8 <HAL_PCD_IRQHandler+0x9bc>)
 8007ed6:	3306      	adds	r3, #6
 8007ed8:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8007eda:	e7d3      	b.n	8007e84 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007edc:	0503      	lsls	r3, r0, #20
 8007ede:	d513      	bpl.n	8007f08 <HAL_PCD_IRQHandler+0x91c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007ee0:	2108      	movs	r1, #8
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	1c9a      	adds	r2, r3, #2
 8007ee6:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007ee8:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007eea:	4301      	orrs	r1, r0
 8007eec:	87d1      	strh	r1, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007eee:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 8007ef0:	482e      	ldr	r0, [pc, #184]	@ (8007fac <HAL_PCD_IRQHandler+0x9c0>)
 8007ef2:	4001      	ands	r1, r0
 8007ef4:	87d9      	strh	r1, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007ef6:	2304      	movs	r3, #4
 8007ef8:	8fd1      	ldrh	r1, [r2, #62]	@ 0x3e
 8007efa:	430b      	orrs	r3, r1
 8007efc:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      HAL_PCD_SuspendCallback(hpcd);
 8007efe:	0020      	movs	r0, r4
 8007f00:	f00a f9aa 	bl	8012258 <HAL_PCD_SuspendCallback>
 8007f04:	f7ff fb86 	bl	8007614 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007f08:	2580      	movs	r5, #128	@ 0x80
 8007f0a:	4228      	tst	r0, r5
 8007f0c:	d021      	beq.n	8007f52 <HAL_PCD_IRQHandler+0x966>
    if (hpcd->LPM_State == LPM_L0)
 8007f0e:	20b2      	movs	r0, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007f10:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 8007f12:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007f14:	1d99      	adds	r1, r3, #6
 8007f16:	8fca      	ldrh	r2, [r1, #62]	@ 0x3e
 8007f18:	43aa      	bics	r2, r5
 8007f1a:	87ca      	strh	r2, [r1, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L0)
 8007f1c:	5c22      	ldrb	r2, [r4, r0]
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	d1ed      	bne.n	8007efe <HAL_PCD_IRQHandler+0x912>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007f22:	2104      	movs	r1, #4
 8007f24:	1c9a      	adds	r2, r3, #2
 8007f26:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007f28:	3354      	adds	r3, #84	@ 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007f2a:	4329      	orrs	r1, r5
 8007f2c:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007f2e:	2108      	movs	r1, #8
 8007f30:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
 8007f32:	4329      	orrs	r1, r5
 8007f34:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->LPM_State = LPM_L1;
 8007f36:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007f38:	223c      	movs	r2, #60	@ 0x3c
      hpcd->LPM_State = LPM_L1;
 8007f3a:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007f3c:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007f3e:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007f40:	089b      	lsrs	r3, r3, #2
 8007f42:	4013      	ands	r3, r2
 8007f44:	22b3      	movs	r2, #179	@ 0xb3
 8007f46:	0092      	lsls	r2, r2, #2
 8007f48:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007f4a:	f000 f94a 	bl	80081e2 <HAL_PCDEx_LPM_Callback>
 8007f4e:	f7ff fb61 	bl	8007614 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007f52:	0583      	lsls	r3, r0, #22
 8007f54:	d50a      	bpl.n	8007f6c <HAL_PCD_IRQHandler+0x980>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	4915      	ldr	r1, [pc, #84]	@ (8007fb0 <HAL_PCD_IRQHandler+0x9c4>)
 8007f5a:	3306      	adds	r3, #6
 8007f5c:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8007f5e:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007f60:	400a      	ands	r2, r1
 8007f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8007f64:	f00a f960 	bl	8012228 <HAL_PCD_SOFCallback>
    return;
 8007f68:	f7ff fb54 	bl	8007614 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007f6c:	05c0      	lsls	r0, r0, #23
 8007f6e:	d401      	bmi.n	8007f74 <HAL_PCD_IRQHandler+0x988>
 8007f70:	f7ff fb50 	bl	8007614 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	490f      	ldr	r1, [pc, #60]	@ (8007fb4 <HAL_PCD_IRQHandler+0x9c8>)
 8007f78:	3306      	adds	r3, #6
 8007f7a:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8007f7c:	e782      	b.n	8007e84 <HAL_PCD_IRQHandler+0x898>
 8007f7e:	46c0      	nop			@ (mov r8, r8)
 8007f80:	00000406 	.word	0x00000406
 8007f84:	00000402 	.word	0x00000402
 8007f88:	ffff8000 	.word	0xffff8000
 8007f8c:	ffff8fbf 	.word	0xffff8fbf
 8007f90:	00008080 	.word	0x00008080
 8007f94:	ffff8f8f 	.word	0xffff8f8f
 8007f98:	0000c080 	.word	0x0000c080
 8007f9c:	fffffbff 	.word	0xfffffbff
 8007fa0:	ffffbfff 	.word	0xffffbfff
 8007fa4:	ffffdfff 	.word	0xffffdfff
 8007fa8:	ffffefff 	.word	0xffffefff
 8007fac:	fffff7ff 	.word	0xfffff7ff
 8007fb0:	fffffdff 	.word	0xfffffdff
 8007fb4:	fffffeff 	.word	0xfffffeff

08007fb8 <HAL_PCD_EP_Open>:
{
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	0004      	movs	r4, r0
 8007fbc:	2007      	movs	r0, #7
 8007fbe:	000d      	movs	r5, r1
 8007fc0:	4008      	ands	r0, r1
 8007fc2:	2128      	movs	r1, #40	@ 0x28
 8007fc4:	4341      	muls	r1, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007fc6:	b26d      	sxtb	r5, r5
 8007fc8:	1866      	adds	r6, r4, r1
 8007fca:	2d00      	cmp	r5, #0
 8007fcc:	da18      	bge.n	8008000 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8007fce:	2501      	movs	r5, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fd0:	3110      	adds	r1, #16
 8007fd2:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8007fd4:	7475      	strb	r5, [r6, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fd6:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8007fd8:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8007fda:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d101      	bne.n	8007fe4 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8007fe4:	25a4      	movs	r5, #164	@ 0xa4
 8007fe6:	00ad      	lsls	r5, r5, #2
 8007fe8:	5d63      	ldrb	r3, [r4, r5]
 8007fea:	2002      	movs	r0, #2
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d006      	beq.n	8007ffe <HAL_PCD_EP_Open+0x46>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007ff4:	6820      	ldr	r0, [r4, #0]
 8007ff6:	f002 fc27 	bl	800a848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	5560      	strb	r0, [r4, r5]
}
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8008000:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008002:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8008004:	3652      	adds	r6, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008006:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8008008:	36ff      	adds	r6, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800800a:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 800800c:	7035      	strb	r5, [r6, #0]
 800800e:	e7e2      	b.n	8007fd6 <HAL_PCD_EP_Open+0x1e>

08008010 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8008010:	2207      	movs	r2, #7
{
 8008012:	000b      	movs	r3, r1
 8008014:	400a      	ands	r2, r1
 8008016:	2128      	movs	r1, #40	@ 0x28
 8008018:	4351      	muls	r1, r2
  if ((ep_addr & 0x80U) == 0x80U)
 800801a:	b25b      	sxtb	r3, r3
{
 800801c:	b570      	push	{r4, r5, r6, lr}
 800801e:	0004      	movs	r4, r0
 8008020:	1840      	adds	r0, r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8008022:	2b00      	cmp	r3, #0
 8008024:	da12      	bge.n	800804c <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
 8008026:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008028:	3110      	adds	r1, #16
 800802a:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 800802c:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hpcd);
 800802e:	25a4      	movs	r5, #164	@ 0xa4
  ep->num = ep_addr & EP_ADDR_MSK;
 8008030:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008032:	00ad      	lsls	r5, r5, #2
 8008034:	5d63      	ldrb	r3, [r4, r5]
 8008036:	2002      	movs	r0, #2
 8008038:	2b01      	cmp	r3, #1
 800803a:	d006      	beq.n	800804a <HAL_PCD_EP_Close+0x3a>
 800803c:	2301      	movs	r3, #1
 800803e:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008040:	6820      	ldr	r0, [r4, #0]
 8008042:	f002 fd11 	bl	800aa68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008046:	2000      	movs	r0, #0
 8008048:	5560      	strb	r0, [r4, r5]
}
 800804a:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800804c:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800804e:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8008050:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008052:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8008054:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008056:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8008058:	7003      	strb	r3, [r0, #0]
 800805a:	e7e8      	b.n	800802e <HAL_PCD_EP_Close+0x1e>

0800805c <HAL_PCD_EP_Receive>:
{
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	2407      	movs	r4, #7
}
 8008060:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 8008062:	3421      	adds	r4, #33	@ 0x21
 8008064:	434c      	muls	r4, r1
 8008066:	1906      	adds	r6, r0, r4
 8008068:	0037      	movs	r7, r6
 800806a:	37fc      	adds	r7, #252	@ 0xfc
  ep->xfer_len = len;
 800806c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ep->is_in = 0U;
 800806e:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8008070:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8008072:	3352      	adds	r3, #82	@ 0x52
  ep->num = ep_addr & EP_ADDR_MSK;
 8008074:	3651      	adds	r6, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008076:	3451      	adds	r4, #81	@ 0x51
  ep->is_in = 0U;
 8008078:	33ff      	adds	r3, #255	@ 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 800807a:	36ff      	adds	r6, #255	@ 0xff
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800807c:	34ff      	adds	r4, #255	@ 0xff
  ep->xfer_count = 0U;
 800807e:	673d      	str	r5, [r7, #112]	@ 0x70
  ep->xfer_buff = pBuf;
 8008080:	66ba      	str	r2, [r7, #104]	@ 0x68
  ep->is_in = 0U;
 8008082:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008084:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008086:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008088:	6800      	ldr	r0, [r0, #0]
 800808a:	f002 fdeb 	bl	800ac64 <USB_EPStartXfer>
}
 800808e:	0028      	movs	r0, r5
 8008090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008092 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008092:	2307      	movs	r3, #7
 8008094:	400b      	ands	r3, r1
 8008096:	2128      	movs	r1, #40	@ 0x28
 8008098:	4359      	muls	r1, r3
 800809a:	1840      	adds	r0, r0, r1
 800809c:	30fc      	adds	r0, #252	@ 0xfc
 800809e:	6f00      	ldr	r0, [r0, #112]	@ 0x70
}
 80080a0:	4770      	bx	lr

080080a2 <HAL_PCD_EP_Transmit>:
{
 80080a2:	b570      	push	{r4, r5, r6, lr}
 80080a4:	2407      	movs	r4, #7
}
 80080a6:	4021      	ands	r1, r4
 80080a8:	3421      	adds	r4, #33	@ 0x21
 80080aa:	434c      	muls	r4, r1
  ep->xfer_buff = pBuf;
 80080ac:	1906      	adds	r6, r0, r4
  ep->xfer_fill_db = 1U;
 80080ae:	0035      	movs	r5, r6
  ep->xfer_buff = pBuf;
 80080b0:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 80080b2:	2201      	movs	r2, #1
 80080b4:	3534      	adds	r5, #52	@ 0x34
  ep->xfer_len = len;
 80080b6:	62b3      	str	r3, [r6, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 80080b8:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 80080ba:	2500      	movs	r5, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080bc:	3410      	adds	r4, #16
  ep->xfer_count = 0U;
 80080be:	62f5      	str	r5, [r6, #44]	@ 0x2c
  ep->num = ep_addr & EP_ADDR_MSK;
 80080c0:	7431      	strb	r1, [r6, #16]
  ep->xfer_len_db = len;
 80080c2:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->is_in = 1U;
 80080c4:	7472      	strb	r2, [r6, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080c6:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80080c8:	6800      	ldr	r0, [r0, #0]
 80080ca:	f002 fdcb 	bl	800ac64 <USB_EPStartXfer>
}
 80080ce:	0028      	movs	r0, r5
 80080d0:	bd70      	pop	{r4, r5, r6, pc}

080080d2 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080d2:	2207      	movs	r2, #7
{
 80080d4:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080d6:	7903      	ldrb	r3, [r0, #4]
{
 80080d8:	0004      	movs	r4, r0
 80080da:	400a      	ands	r2, r1
    return HAL_ERROR;
 80080dc:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d319      	bcc.n	8008116 <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 80080e2:	b248      	sxtb	r0, r1
 80080e4:	2328      	movs	r3, #40	@ 0x28
 80080e6:	2800      	cmp	r0, #0
 80080e8:	da16      	bge.n	8008118 <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080ea:	4353      	muls	r3, r2
 80080ec:	0019      	movs	r1, r3
    ep->is_in = 1U;
 80080ee:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080f0:	3110      	adds	r1, #16
    ep->is_in = 1U;
 80080f2:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080f4:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80080f6:	7458      	strb	r0, [r3, #17]
  ep->is_stall = 1U;
 80080f8:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 80080fa:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 80080fc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080fe:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008100:	00ad      	lsls	r5, r5, #2
 8008102:	5d62      	ldrb	r2, [r4, r5]
 8008104:	2002      	movs	r0, #2
 8008106:	429a      	cmp	r2, r3
 8008108:	d005      	beq.n	8008116 <HAL_PCD_EP_SetStall+0x44>
 800810a:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800810c:	6820      	ldr	r0, [r4, #0]
 800810e:	f002 fd25 	bl	800ab5c <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8008112:	2000      	movs	r0, #0
 8008114:	5560      	strb	r0, [r4, r5]
}
 8008116:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8008118:	434b      	muls	r3, r1
 800811a:	0019      	movs	r1, r3
    ep->is_in = 0U;
 800811c:	2000      	movs	r0, #0
 800811e:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8008120:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8008122:	3352      	adds	r3, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr];
 8008124:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8008126:	33ff      	adds	r3, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8008128:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 800812a:	7018      	strb	r0, [r3, #0]
 800812c:	e7e4      	b.n	80080f8 <HAL_PCD_EP_SetStall+0x26>

0800812e <HAL_PCD_EP_ClrStall>:
{
 800812e:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008130:	220f      	movs	r2, #15
{
 8008132:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008134:	7901      	ldrb	r1, [r0, #4]
{
 8008136:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008138:	401a      	ands	r2, r3
    return HAL_ERROR;
 800813a:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800813c:	4291      	cmp	r1, r2
 800813e:	d31b      	bcc.n	8008178 <HAL_PCD_EP_ClrStall+0x4a>
  if ((0x80U & ep_addr) == 0x80U)
 8008140:	2207      	movs	r2, #7
 8008142:	2128      	movs	r1, #40	@ 0x28
 8008144:	401a      	ands	r2, r3
 8008146:	4351      	muls	r1, r2
 8008148:	b25b      	sxtb	r3, r3
 800814a:	1860      	adds	r0, r4, r1
 800814c:	2b00      	cmp	r3, #0
 800814e:	da14      	bge.n	800817a <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 1U;
 8008150:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008152:	3110      	adds	r1, #16
 8008154:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8008156:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 0U;
 8008158:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 800815a:	26a4      	movs	r6, #164	@ 0xa4
  ep->is_stall = 0U;
 800815c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800815e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008160:	00b6      	lsls	r6, r6, #2
 8008162:	5da3      	ldrb	r3, [r4, r6]
 8008164:	2002      	movs	r0, #2
 8008166:	2b01      	cmp	r3, #1
 8008168:	d006      	beq.n	8008178 <HAL_PCD_EP_ClrStall+0x4a>
 800816a:	2301      	movs	r3, #1
 800816c:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800816e:	6820      	ldr	r0, [r4, #0]
 8008170:	f002 fd16 	bl	800aba0 <USB_EPClearStall>
  return HAL_OK;
 8008174:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 8008176:	55a5      	strb	r5, [r4, r6]
}
 8008178:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800817a:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800817c:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 800817e:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008180:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8008182:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008184:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8008186:	7003      	strb	r3, [r0, #0]
 8008188:	e7e6      	b.n	8008158 <HAL_PCD_EP_ClrStall+0x2a>

0800818a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800818a:	b530      	push	{r4, r5, lr}
 800818c:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800818e:	060d      	lsls	r5, r1, #24
 8008190:	d50b      	bpl.n	80081aa <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008192:	2507      	movs	r5, #7
 8008194:	4029      	ands	r1, r5
 8008196:	434c      	muls	r4, r1
 8008198:	3410      	adds	r4, #16
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800819a:	1900      	adds	r0, r0, r4
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800819c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800819e:	2a00      	cmp	r2, #0
 80081a0:	d107      	bne.n	80081b2 <HAL_PCDEx_PMAConfig+0x28>
    ep->doublebuffer = 0U;
 80081a2:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80081a4:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80081a6:	2000      	movs	r0, #0
 80081a8:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80081aa:	434c      	muls	r4, r1
 80081ac:	3451      	adds	r4, #81	@ 0x51
 80081ae:	34ff      	adds	r4, #255	@ 0xff
 80081b0:	e7f3      	b.n	800819a <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 80081b2:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80081b4:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80081b6:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80081b8:	e7f5      	b.n	80081a6 <HAL_PCDEx_PMAConfig+0x1c>

080081ba <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 80081ba:	6803      	ldr	r3, [r0, #0]
{
 80081bc:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 80081be:	20b4      	movs	r0, #180	@ 0xb4
 80081c0:	2101      	movs	r1, #1
{
 80081c2:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 80081c4:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 80081c6:	24b2      	movs	r4, #178	@ 0xb2
  hpcd->lpm_active = 1U;
 80081c8:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 80081ca:	2000      	movs	r0, #0
 80081cc:	00a4      	lsls	r4, r4, #2
 80081ce:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80081d0:	3354      	adds	r3, #84	@ 0x54
 80081d2:	881a      	ldrh	r2, [r3, #0]
 80081d4:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80081d6:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80081d8:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80081da:	8819      	ldrh	r1, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 80081e0:	bd10      	pop	{r4, pc}

080081e2 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80081e2:	4770      	bx	lr

080081e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081e6:	0004      	movs	r4, r0
 80081e8:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d102      	bne.n	80081f4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80081ee:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 80081f0:	b005      	add	sp, #20
 80081f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081f4:	6803      	ldr	r3, [r0, #0]
 80081f6:	07db      	lsls	r3, r3, #31
 80081f8:	d433      	bmi.n	8008262 <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	079b      	lsls	r3, r3, #30
 80081fe:	d500      	bpl.n	8008202 <HAL_RCC_OscConfig+0x1e>
 8008200:	e087      	b.n	8008312 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	071b      	lsls	r3, r3, #28
 8008206:	d500      	bpl.n	800820a <HAL_RCC_OscConfig+0x26>
 8008208:	e0c8      	b.n	800839c <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	075b      	lsls	r3, r3, #29
 800820e:	d500      	bpl.n	8008212 <HAL_RCC_OscConfig+0x2e>
 8008210:	e0eb      	b.n	80083ea <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	06db      	lsls	r3, r3, #27
 8008216:	d51a      	bpl.n	800824e <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8008218:	6962      	ldr	r2, [r4, #20]
 800821a:	2304      	movs	r3, #4
 800821c:	4db9      	ldr	r5, [pc, #740]	@ (8008504 <HAL_RCC_OscConfig+0x320>)
 800821e:	2a01      	cmp	r2, #1
 8008220:	d000      	beq.n	8008224 <HAL_RCC_OscConfig+0x40>
 8008222:	e154      	b.n	80084ce <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_HSI14ADC_DISABLE();
 8008224:	6b69      	ldr	r1, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008226:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8008228:	430b      	orrs	r3, r1
 800822a:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 800822c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800822e:	431a      	orrs	r2, r3
 8008230:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8008232:	f7fe ff19 	bl	8007068 <HAL_GetTick>
 8008236:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008238:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800823a:	423b      	tst	r3, r7
 800823c:	d100      	bne.n	8008240 <HAL_RCC_OscConfig+0x5c>
 800823e:	e13f      	b.n	80084c0 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008240:	21f8      	movs	r1, #248	@ 0xf8
 8008242:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8008244:	69a3      	ldr	r3, [r4, #24]
 8008246:	438a      	bics	r2, r1
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4313      	orrs	r3, r2
 800824c:	636b      	str	r3, [r5, #52]	@ 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	069b      	lsls	r3, r3, #26
 8008252:	d500      	bpl.n	8008256 <HAL_RCC_OscConfig+0x72>
 8008254:	e162      	b.n	800851c <HAL_RCC_OscConfig+0x338>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008256:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008258:	2b00      	cmp	r3, #0
 800825a:	d000      	beq.n	800825e <HAL_RCC_OscConfig+0x7a>
 800825c:	e1a1      	b.n	80085a2 <HAL_RCC_OscConfig+0x3be>
  return HAL_OK;
 800825e:	2000      	movs	r0, #0
 8008260:	e7c6      	b.n	80081f0 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008262:	220c      	movs	r2, #12
 8008264:	4da7      	ldr	r5, [pc, #668]	@ (8008504 <HAL_RCC_OscConfig+0x320>)
 8008266:	686b      	ldr	r3, [r5, #4]
 8008268:	4013      	ands	r3, r2
 800826a:	2b04      	cmp	r3, #4
 800826c:	d00b      	beq.n	8008286 <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800826e:	686b      	ldr	r3, [r5, #4]
 8008270:	4013      	ands	r3, r2
 8008272:	2b08      	cmp	r3, #8
 8008274:	d10e      	bne.n	8008294 <HAL_RCC_OscConfig+0xb0>
 8008276:	22c0      	movs	r2, #192	@ 0xc0
 8008278:	686b      	ldr	r3, [r5, #4]
 800827a:	0252      	lsls	r2, r2, #9
 800827c:	4013      	ands	r3, r2
 800827e:	2280      	movs	r2, #128	@ 0x80
 8008280:	0252      	lsls	r2, r2, #9
 8008282:	4293      	cmp	r3, r2
 8008284:	d106      	bne.n	8008294 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008286:	682b      	ldr	r3, [r5, #0]
 8008288:	039b      	lsls	r3, r3, #14
 800828a:	d5b6      	bpl.n	80081fa <HAL_RCC_OscConfig+0x16>
 800828c:	6863      	ldr	r3, [r4, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1b3      	bne.n	80081fa <HAL_RCC_OscConfig+0x16>
 8008292:	e7ac      	b.n	80081ee <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008294:	6863      	ldr	r3, [r4, #4]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d113      	bne.n	80082c2 <HAL_RCC_OscConfig+0xde>
 800829a:	2380      	movs	r3, #128	@ 0x80
 800829c:	682a      	ldr	r2, [r5, #0]
 800829e:	025b      	lsls	r3, r3, #9
 80082a0:	4313      	orrs	r3, r2
 80082a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80082a4:	f7fe fee0 	bl	8007068 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082a8:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80082aa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ac:	02bf      	lsls	r7, r7, #10
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	423b      	tst	r3, r7
 80082b2:	d1a2      	bne.n	80081fa <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082b4:	f7fe fed8 	bl	8007068 <HAL_GetTick>
 80082b8:	1b80      	subs	r0, r0, r6
 80082ba:	2864      	cmp	r0, #100	@ 0x64
 80082bc:	d9f7      	bls.n	80082ae <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80082be:	2003      	movs	r0, #3
 80082c0:	e796      	b.n	80081f0 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d115      	bne.n	80082f2 <HAL_RCC_OscConfig+0x10e>
 80082c6:	682b      	ldr	r3, [r5, #0]
 80082c8:	4a8f      	ldr	r2, [pc, #572]	@ (8008508 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ca:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082cc:	4013      	ands	r3, r2
 80082ce:	602b      	str	r3, [r5, #0]
 80082d0:	682b      	ldr	r3, [r5, #0]
 80082d2:	4a8e      	ldr	r2, [pc, #568]	@ (800850c <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082d4:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082d6:	4013      	ands	r3, r2
 80082d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80082da:	f7fe fec5 	bl	8007068 <HAL_GetTick>
 80082de:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	423b      	tst	r3, r7
 80082e4:	d089      	beq.n	80081fa <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082e6:	f7fe febf 	bl	8007068 <HAL_GetTick>
 80082ea:	1b80      	subs	r0, r0, r6
 80082ec:	2864      	cmp	r0, #100	@ 0x64
 80082ee:	d9f7      	bls.n	80082e0 <HAL_RCC_OscConfig+0xfc>
 80082f0:	e7e5      	b.n	80082be <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082f2:	2b05      	cmp	r3, #5
 80082f4:	d105      	bne.n	8008302 <HAL_RCC_OscConfig+0x11e>
 80082f6:	2380      	movs	r3, #128	@ 0x80
 80082f8:	682a      	ldr	r2, [r5, #0]
 80082fa:	02db      	lsls	r3, r3, #11
 80082fc:	4313      	orrs	r3, r2
 80082fe:	602b      	str	r3, [r5, #0]
 8008300:	e7cb      	b.n	800829a <HAL_RCC_OscConfig+0xb6>
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	4a80      	ldr	r2, [pc, #512]	@ (8008508 <HAL_RCC_OscConfig+0x324>)
 8008306:	4013      	ands	r3, r2
 8008308:	602b      	str	r3, [r5, #0]
 800830a:	682b      	ldr	r3, [r5, #0]
 800830c:	4a7f      	ldr	r2, [pc, #508]	@ (800850c <HAL_RCC_OscConfig+0x328>)
 800830e:	4013      	ands	r3, r2
 8008310:	e7c7      	b.n	80082a2 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008312:	220c      	movs	r2, #12
 8008314:	4d7b      	ldr	r5, [pc, #492]	@ (8008504 <HAL_RCC_OscConfig+0x320>)
 8008316:	686b      	ldr	r3, [r5, #4]
 8008318:	4213      	tst	r3, r2
 800831a:	d00b      	beq.n	8008334 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800831c:	686b      	ldr	r3, [r5, #4]
 800831e:	4013      	ands	r3, r2
 8008320:	2b08      	cmp	r3, #8
 8008322:	d116      	bne.n	8008352 <HAL_RCC_OscConfig+0x16e>
 8008324:	22c0      	movs	r2, #192	@ 0xc0
 8008326:	686b      	ldr	r3, [r5, #4]
 8008328:	0252      	lsls	r2, r2, #9
 800832a:	4013      	ands	r3, r2
 800832c:	2280      	movs	r2, #128	@ 0x80
 800832e:	0212      	lsls	r2, r2, #8
 8008330:	4293      	cmp	r3, r2
 8008332:	d10e      	bne.n	8008352 <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	079b      	lsls	r3, r3, #30
 8008338:	d503      	bpl.n	8008342 <HAL_RCC_OscConfig+0x15e>
 800833a:	68e3      	ldr	r3, [r4, #12]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d000      	beq.n	8008342 <HAL_RCC_OscConfig+0x15e>
 8008340:	e755      	b.n	80081ee <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008342:	21f8      	movs	r1, #248	@ 0xf8
 8008344:	682a      	ldr	r2, [r5, #0]
 8008346:	6923      	ldr	r3, [r4, #16]
 8008348:	438a      	bics	r2, r1
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4313      	orrs	r3, r2
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	e757      	b.n	8008202 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008352:	68e2      	ldr	r2, [r4, #12]
 8008354:	2301      	movs	r3, #1
 8008356:	2a00      	cmp	r2, #0
 8008358:	d00f      	beq.n	800837a <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 800835a:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800835c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 800835e:	4313      	orrs	r3, r2
 8008360:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008362:	f7fe fe81 	bl	8007068 <HAL_GetTick>
 8008366:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	423b      	tst	r3, r7
 800836c:	d1e9      	bne.n	8008342 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800836e:	f7fe fe7b 	bl	8007068 <HAL_GetTick>
 8008372:	1b80      	subs	r0, r0, r6
 8008374:	2802      	cmp	r0, #2
 8008376:	d9f7      	bls.n	8008368 <HAL_RCC_OscConfig+0x184>
 8008378:	e7a1      	b.n	80082be <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 800837a:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800837c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800837e:	439a      	bics	r2, r3
 8008380:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8008382:	f7fe fe71 	bl	8007068 <HAL_GetTick>
 8008386:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	423b      	tst	r3, r7
 800838c:	d100      	bne.n	8008390 <HAL_RCC_OscConfig+0x1ac>
 800838e:	e738      	b.n	8008202 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008390:	f7fe fe6a 	bl	8007068 <HAL_GetTick>
 8008394:	1b80      	subs	r0, r0, r6
 8008396:	2802      	cmp	r0, #2
 8008398:	d9f6      	bls.n	8008388 <HAL_RCC_OscConfig+0x1a4>
 800839a:	e790      	b.n	80082be <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800839c:	69e2      	ldr	r2, [r4, #28]
 800839e:	2301      	movs	r3, #1
 80083a0:	4d58      	ldr	r5, [pc, #352]	@ (8008504 <HAL_RCC_OscConfig+0x320>)
 80083a2:	2a00      	cmp	r2, #0
 80083a4:	d010      	beq.n	80083c8 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 80083a6:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083a8:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80083aa:	4313      	orrs	r3, r2
 80083ac:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 80083ae:	f7fe fe5b 	bl	8007068 <HAL_GetTick>
 80083b2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083b4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80083b6:	423b      	tst	r3, r7
 80083b8:	d000      	beq.n	80083bc <HAL_RCC_OscConfig+0x1d8>
 80083ba:	e726      	b.n	800820a <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083bc:	f7fe fe54 	bl	8007068 <HAL_GetTick>
 80083c0:	1b80      	subs	r0, r0, r6
 80083c2:	2802      	cmp	r0, #2
 80083c4:	d9f6      	bls.n	80083b4 <HAL_RCC_OscConfig+0x1d0>
 80083c6:	e77a      	b.n	80082be <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 80083c8:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083ca:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80083cc:	439a      	bics	r2, r3
 80083ce:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 80083d0:	f7fe fe4a 	bl	8007068 <HAL_GetTick>
 80083d4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083d6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80083d8:	423b      	tst	r3, r7
 80083da:	d100      	bne.n	80083de <HAL_RCC_OscConfig+0x1fa>
 80083dc:	e715      	b.n	800820a <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083de:	f7fe fe43 	bl	8007068 <HAL_GetTick>
 80083e2:	1b80      	subs	r0, r0, r6
 80083e4:	2802      	cmp	r0, #2
 80083e6:	d9f6      	bls.n	80083d6 <HAL_RCC_OscConfig+0x1f2>
 80083e8:	e769      	b.n	80082be <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ea:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80083ec:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ee:	4d45      	ldr	r5, [pc, #276]	@ (8008504 <HAL_RCC_OscConfig+0x320>)
 80083f0:	0552      	lsls	r2, r2, #21
 80083f2:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80083f4:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083f6:	4213      	tst	r3, r2
 80083f8:	d108      	bne.n	800840c <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 80083fa:	69eb      	ldr	r3, [r5, #28]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	61eb      	str	r3, [r5, #28]
 8008400:	69eb      	ldr	r3, [r5, #28]
 8008402:	4013      	ands	r3, r2
 8008404:	9303      	str	r3, [sp, #12]
 8008406:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8008408:	2301      	movs	r3, #1
 800840a:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800840c:	2780      	movs	r7, #128	@ 0x80
 800840e:	4e40      	ldr	r6, [pc, #256]	@ (8008510 <HAL_RCC_OscConfig+0x32c>)
 8008410:	007f      	lsls	r7, r7, #1
 8008412:	6833      	ldr	r3, [r6, #0]
 8008414:	423b      	tst	r3, r7
 8008416:	d015      	beq.n	8008444 <HAL_RCC_OscConfig+0x260>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008418:	68a3      	ldr	r3, [r4, #8]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d122      	bne.n	8008464 <HAL_RCC_OscConfig+0x280>
 800841e:	6a2a      	ldr	r2, [r5, #32]
 8008420:	4313      	orrs	r3, r2
 8008422:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8008424:	f7fe fe20 	bl	8007068 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008428:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800842a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800842c:	6a2b      	ldr	r3, [r5, #32]
 800842e:	423b      	tst	r3, r7
 8008430:	d03f      	beq.n	80084b2 <HAL_RCC_OscConfig+0x2ce>
    if(pwrclkchanged == SET)
 8008432:	9b00      	ldr	r3, [sp, #0]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d000      	beq.n	800843a <HAL_RCC_OscConfig+0x256>
 8008438:	e6eb      	b.n	8008212 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800843a:	69eb      	ldr	r3, [r5, #28]
 800843c:	4a35      	ldr	r2, [pc, #212]	@ (8008514 <HAL_RCC_OscConfig+0x330>)
 800843e:	4013      	ands	r3, r2
 8008440:	61eb      	str	r3, [r5, #28]
 8008442:	e6e6      	b.n	8008212 <HAL_RCC_OscConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008444:	6833      	ldr	r3, [r6, #0]
 8008446:	433b      	orrs	r3, r7
 8008448:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800844a:	f7fe fe0d 	bl	8007068 <HAL_GetTick>
 800844e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008450:	6833      	ldr	r3, [r6, #0]
 8008452:	423b      	tst	r3, r7
 8008454:	d1e0      	bne.n	8008418 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008456:	f7fe fe07 	bl	8007068 <HAL_GetTick>
 800845a:	9b01      	ldr	r3, [sp, #4]
 800845c:	1ac0      	subs	r0, r0, r3
 800845e:	2864      	cmp	r0, #100	@ 0x64
 8008460:	d9f6      	bls.n	8008450 <HAL_RCC_OscConfig+0x26c>
 8008462:	e72c      	b.n	80082be <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008464:	2201      	movs	r2, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d114      	bne.n	8008494 <HAL_RCC_OscConfig+0x2b0>
 800846a:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800846c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800846e:	4393      	bics	r3, r2
 8008470:	622b      	str	r3, [r5, #32]
 8008472:	6a2b      	ldr	r3, [r5, #32]
 8008474:	3203      	adds	r2, #3
 8008476:	4393      	bics	r3, r2
 8008478:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800847a:	f7fe fdf5 	bl	8007068 <HAL_GetTick>
 800847e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008480:	6a2b      	ldr	r3, [r5, #32]
 8008482:	423b      	tst	r3, r7
 8008484:	d0d5      	beq.n	8008432 <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008486:	f7fe fdef 	bl	8007068 <HAL_GetTick>
 800848a:	4b23      	ldr	r3, [pc, #140]	@ (8008518 <HAL_RCC_OscConfig+0x334>)
 800848c:	1b80      	subs	r0, r0, r6
 800848e:	4298      	cmp	r0, r3
 8008490:	d9f6      	bls.n	8008480 <HAL_RCC_OscConfig+0x29c>
 8008492:	e714      	b.n	80082be <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008494:	2b05      	cmp	r3, #5
 8008496:	d105      	bne.n	80084a4 <HAL_RCC_OscConfig+0x2c0>
 8008498:	6a29      	ldr	r1, [r5, #32]
 800849a:	3b01      	subs	r3, #1
 800849c:	430b      	orrs	r3, r1
 800849e:	622b      	str	r3, [r5, #32]
 80084a0:	6a2b      	ldr	r3, [r5, #32]
 80084a2:	e7bd      	b.n	8008420 <HAL_RCC_OscConfig+0x23c>
 80084a4:	6a2b      	ldr	r3, [r5, #32]
 80084a6:	4393      	bics	r3, r2
 80084a8:	2204      	movs	r2, #4
 80084aa:	622b      	str	r3, [r5, #32]
 80084ac:	6a2b      	ldr	r3, [r5, #32]
 80084ae:	4393      	bics	r3, r2
 80084b0:	e7b7      	b.n	8008422 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084b2:	f7fe fdd9 	bl	8007068 <HAL_GetTick>
 80084b6:	4b18      	ldr	r3, [pc, #96]	@ (8008518 <HAL_RCC_OscConfig+0x334>)
 80084b8:	1b80      	subs	r0, r0, r6
 80084ba:	4298      	cmp	r0, r3
 80084bc:	d9b6      	bls.n	800842c <HAL_RCC_OscConfig+0x248>
 80084be:	e6fe      	b.n	80082be <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80084c0:	f7fe fdd2 	bl	8007068 <HAL_GetTick>
 80084c4:	1b80      	subs	r0, r0, r6
 80084c6:	2802      	cmp	r0, #2
 80084c8:	d800      	bhi.n	80084cc <HAL_RCC_OscConfig+0x2e8>
 80084ca:	e6b5      	b.n	8008238 <HAL_RCC_OscConfig+0x54>
 80084cc:	e6f7      	b.n	80082be <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80084ce:	3205      	adds	r2, #5
 80084d0:	d103      	bne.n	80084da <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 80084d2:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80084d4:	439a      	bics	r2, r3
 80084d6:	636a      	str	r2, [r5, #52]	@ 0x34
 80084d8:	e6b2      	b.n	8008240 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 80084da:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80084dc:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80084de:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80084e0:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80084e2:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 80084e4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80084e6:	4393      	bics	r3, r2
 80084e8:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80084ea:	f7fe fdbd 	bl	8007068 <HAL_GetTick>
 80084ee:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80084f0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80084f2:	423b      	tst	r3, r7
 80084f4:	d100      	bne.n	80084f8 <HAL_RCC_OscConfig+0x314>
 80084f6:	e6aa      	b.n	800824e <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80084f8:	f7fe fdb6 	bl	8007068 <HAL_GetTick>
 80084fc:	1b80      	subs	r0, r0, r6
 80084fe:	2802      	cmp	r0, #2
 8008500:	d9f6      	bls.n	80084f0 <HAL_RCC_OscConfig+0x30c>
 8008502:	e6dc      	b.n	80082be <HAL_RCC_OscConfig+0xda>
 8008504:	40021000 	.word	0x40021000
 8008508:	fffeffff 	.word	0xfffeffff
 800850c:	fffbffff 	.word	0xfffbffff
 8008510:	40007000 	.word	0x40007000
 8008514:	efffffff 	.word	0xefffffff
 8008518:	00001388 	.word	0x00001388
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800851c:	220c      	movs	r2, #12
 800851e:	4d55      	ldr	r5, [pc, #340]	@ (8008674 <HAL_RCC_OscConfig+0x490>)
 8008520:	686b      	ldr	r3, [r5, #4]
 8008522:	4013      	ands	r3, r2
 8008524:	4293      	cmp	r3, r2
 8008526:	d009      	beq.n	800853c <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008528:	686b      	ldr	r3, [r5, #4]
 800852a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800852c:	2b08      	cmp	r3, #8
 800852e:	d10e      	bne.n	800854e <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008530:	22c0      	movs	r2, #192	@ 0xc0
 8008532:	686b      	ldr	r3, [r5, #4]
 8008534:	0252      	lsls	r2, r2, #9
 8008536:	4013      	ands	r3, r2
 8008538:	4293      	cmp	r3, r2
 800853a:	d108      	bne.n	800854e <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800853c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800853e:	039b      	lsls	r3, r3, #14
 8008540:	d400      	bmi.n	8008544 <HAL_RCC_OscConfig+0x360>
 8008542:	e688      	b.n	8008256 <HAL_RCC_OscConfig+0x72>
 8008544:	6a23      	ldr	r3, [r4, #32]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d000      	beq.n	800854c <HAL_RCC_OscConfig+0x368>
 800854a:	e650      	b.n	80081ee <HAL_RCC_OscConfig+0xa>
 800854c:	e683      	b.n	8008256 <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800854e:	6a23      	ldr	r3, [r4, #32]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d013      	beq.n	800857c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 8008554:	2380      	movs	r3, #128	@ 0x80
 8008556:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8008558:	025b      	lsls	r3, r3, #9
 800855a:	4313      	orrs	r3, r2
 800855c:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 800855e:	f7fe fd83 	bl	8007068 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008562:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8008564:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008566:	02bf      	lsls	r7, r7, #10
 8008568:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800856a:	423b      	tst	r3, r7
 800856c:	d000      	beq.n	8008570 <HAL_RCC_OscConfig+0x38c>
 800856e:	e672      	b.n	8008256 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008570:	f7fe fd7a 	bl	8007068 <HAL_GetTick>
 8008574:	1b80      	subs	r0, r0, r6
 8008576:	2802      	cmp	r0, #2
 8008578:	d9f6      	bls.n	8008568 <HAL_RCC_OscConfig+0x384>
 800857a:	e6a0      	b.n	80082be <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 800857c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800857e:	4a3e      	ldr	r2, [pc, #248]	@ (8008678 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008580:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI48_DISABLE();
 8008582:	4013      	ands	r3, r2
 8008584:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8008586:	f7fe fd6f 	bl	8007068 <HAL_GetTick>
 800858a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800858c:	02bf      	lsls	r7, r7, #10
 800858e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8008590:	423b      	tst	r3, r7
 8008592:	d100      	bne.n	8008596 <HAL_RCC_OscConfig+0x3b2>
 8008594:	e65f      	b.n	8008256 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008596:	f7fe fd67 	bl	8007068 <HAL_GetTick>
 800859a:	1b80      	subs	r0, r0, r6
 800859c:	2802      	cmp	r0, #2
 800859e:	d9f6      	bls.n	800858e <HAL_RCC_OscConfig+0x3aa>
 80085a0:	e68d      	b.n	80082be <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085a2:	210c      	movs	r1, #12
 80085a4:	4d33      	ldr	r5, [pc, #204]	@ (8008674 <HAL_RCC_OscConfig+0x490>)
 80085a6:	686a      	ldr	r2, [r5, #4]
 80085a8:	400a      	ands	r2, r1
 80085aa:	2a08      	cmp	r2, #8
 80085ac:	d047      	beq.n	800863e <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085ae:	4a33      	ldr	r2, [pc, #204]	@ (800867c <HAL_RCC_OscConfig+0x498>)
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d132      	bne.n	800861a <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 80085b4:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80085b6:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80085b8:	4013      	ands	r3, r2
 80085ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80085bc:	f7fe fd54 	bl	8007068 <HAL_GetTick>
 80085c0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80085c2:	04bf      	lsls	r7, r7, #18
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	423b      	tst	r3, r7
 80085c8:	d121      	bne.n	800860e <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085ca:	220f      	movs	r2, #15
 80085cc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80085ce:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085d0:	4393      	bics	r3, r2
 80085d2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80085d4:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085d6:	4313      	orrs	r3, r2
 80085d8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80085da:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80085dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80085de:	686a      	ldr	r2, [r5, #4]
 80085e0:	430b      	orrs	r3, r1
 80085e2:	4927      	ldr	r1, [pc, #156]	@ (8008680 <HAL_RCC_OscConfig+0x49c>)
 80085e4:	400a      	ands	r2, r1
 80085e6:	4313      	orrs	r3, r2
 80085e8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80085ea:	2380      	movs	r3, #128	@ 0x80
 80085ec:	682a      	ldr	r2, [r5, #0]
 80085ee:	045b      	lsls	r3, r3, #17
 80085f0:	4313      	orrs	r3, r2
 80085f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80085f4:	f7fe fd38 	bl	8007068 <HAL_GetTick>
 80085f8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80085fa:	682b      	ldr	r3, [r5, #0]
 80085fc:	4233      	tst	r3, r6
 80085fe:	d000      	beq.n	8008602 <HAL_RCC_OscConfig+0x41e>
 8008600:	e62d      	b.n	800825e <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008602:	f7fe fd31 	bl	8007068 <HAL_GetTick>
 8008606:	1b00      	subs	r0, r0, r4
 8008608:	2802      	cmp	r0, #2
 800860a:	d9f6      	bls.n	80085fa <HAL_RCC_OscConfig+0x416>
 800860c:	e657      	b.n	80082be <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800860e:	f7fe fd2b 	bl	8007068 <HAL_GetTick>
 8008612:	1b80      	subs	r0, r0, r6
 8008614:	2802      	cmp	r0, #2
 8008616:	d9d5      	bls.n	80085c4 <HAL_RCC_OscConfig+0x3e0>
 8008618:	e651      	b.n	80082be <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 800861a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800861c:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800861e:	4013      	ands	r3, r2
 8008620:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008622:	f7fe fd21 	bl	8007068 <HAL_GetTick>
 8008626:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008628:	04b6      	lsls	r6, r6, #18
 800862a:	682b      	ldr	r3, [r5, #0]
 800862c:	4233      	tst	r3, r6
 800862e:	d100      	bne.n	8008632 <HAL_RCC_OscConfig+0x44e>
 8008630:	e615      	b.n	800825e <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008632:	f7fe fd19 	bl	8007068 <HAL_GetTick>
 8008636:	1b00      	subs	r0, r0, r4
 8008638:	2802      	cmp	r0, #2
 800863a:	d9f6      	bls.n	800862a <HAL_RCC_OscConfig+0x446>
 800863c:	e63f      	b.n	80082be <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800863e:	2b01      	cmp	r3, #1
 8008640:	d100      	bne.n	8008644 <HAL_RCC_OscConfig+0x460>
 8008642:	e5d4      	b.n	80081ee <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008644:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 8008646:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008648:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800864a:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 800864c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800864e:	4002      	ands	r2, r0
 8008650:	428a      	cmp	r2, r1
 8008652:	d000      	beq.n	8008656 <HAL_RCC_OscConfig+0x472>
 8008654:	e5cb      	b.n	80081ee <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008656:	220f      	movs	r2, #15
 8008658:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800865a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800865c:	4293      	cmp	r3, r2
 800865e:	d000      	beq.n	8008662 <HAL_RCC_OscConfig+0x47e>
 8008660:	e5c5      	b.n	80081ee <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8008662:	23f0      	movs	r3, #240	@ 0xf0
 8008664:	039b      	lsls	r3, r3, #14
 8008666:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008668:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800866a:	1ac0      	subs	r0, r0, r3
 800866c:	1e43      	subs	r3, r0, #1
 800866e:	4198      	sbcs	r0, r3
 8008670:	b2c0      	uxtb	r0, r0
 8008672:	e5bd      	b.n	80081f0 <HAL_RCC_OscConfig+0xc>
 8008674:	40021000 	.word	0x40021000
 8008678:	fffeffff 	.word	0xfffeffff
 800867c:	feffffff 	.word	0xfeffffff
 8008680:	ffc27fff 	.word	0xffc27fff

08008684 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008684:	200c      	movs	r0, #12
{
 8008686:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8008688:	4d13      	ldr	r5, [pc, #76]	@ (80086d8 <HAL_RCC_GetSysClockFreq+0x54>)
 800868a:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800868c:	4018      	ands	r0, r3
 800868e:	2808      	cmp	r0, #8
 8008690:	d008      	beq.n	80086a4 <HAL_RCC_GetSysClockFreq+0x20>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008692:	380c      	subs	r0, #12
 8008694:	4243      	negs	r3, r0
 8008696:	4158      	adcs	r0, r3
 8008698:	4b10      	ldr	r3, [pc, #64]	@ (80086dc <HAL_RCC_GetSysClockFreq+0x58>)
 800869a:	4240      	negs	r0, r0
 800869c:	4018      	ands	r0, r3
 800869e:	4b10      	ldr	r3, [pc, #64]	@ (80086e0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80086a0:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80086a4:	200f      	movs	r0, #15
 80086a6:	490f      	ldr	r1, [pc, #60]	@ (80086e4 <HAL_RCC_GetSysClockFreq+0x60>)
 80086a8:	0c9a      	lsrs	r2, r3, #18
 80086aa:	4002      	ands	r2, r0
 80086ac:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80086ae:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80086b0:	490d      	ldr	r1, [pc, #52]	@ (80086e8 <HAL_RCC_GetSysClockFreq+0x64>)
 80086b2:	4002      	ands	r2, r0
 80086b4:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80086b6:	22c0      	movs	r2, #192	@ 0xc0
 80086b8:	2080      	movs	r0, #128	@ 0x80
 80086ba:	0252      	lsls	r2, r2, #9
 80086bc:	4013      	ands	r3, r2
 80086be:	0240      	lsls	r0, r0, #9
 80086c0:	4283      	cmp	r3, r0
 80086c2:	d101      	bne.n	80086c8 <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80086c4:	4806      	ldr	r0, [pc, #24]	@ (80086e0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80086c6:	e002      	b.n	80086ce <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d1fb      	bne.n	80086c4 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80086cc:	4807      	ldr	r0, [pc, #28]	@ (80086ec <HAL_RCC_GetSysClockFreq+0x68>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80086ce:	f7f7 fd4b 	bl	8000168 <__udivsi3>
 80086d2:	4360      	muls	r0, r4
 80086d4:	e7e5      	b.n	80086a2 <HAL_RCC_GetSysClockFreq+0x1e>
 80086d6:	46c0      	nop			@ (mov r8, r8)
 80086d8:	40021000 	.word	0x40021000
 80086dc:	02625a00 	.word	0x02625a00
 80086e0:	007a1200 	.word	0x007a1200
 80086e4:	080143bc 	.word	0x080143bc
 80086e8:	080143ac 	.word	0x080143ac
 80086ec:	02dc6c00 	.word	0x02dc6c00

080086f0 <HAL_RCC_ClockConfig>:
{
 80086f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086f2:	0004      	movs	r4, r0
 80086f4:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d101      	bne.n	80086fe <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80086fa:	2001      	movs	r0, #1
}
 80086fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086fe:	2201      	movs	r2, #1
 8008700:	4d3a      	ldr	r5, [pc, #232]	@ (80087ec <HAL_RCC_ClockConfig+0xfc>)
 8008702:	682b      	ldr	r3, [r5, #0]
 8008704:	4013      	ands	r3, r2
 8008706:	428b      	cmp	r3, r1
 8008708:	d31c      	bcc.n	8008744 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800870a:	6822      	ldr	r2, [r4, #0]
 800870c:	0793      	lsls	r3, r2, #30
 800870e:	d422      	bmi.n	8008756 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008710:	07d2      	lsls	r2, r2, #31
 8008712:	d42f      	bmi.n	8008774 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008714:	2301      	movs	r3, #1
 8008716:	682a      	ldr	r2, [r5, #0]
 8008718:	401a      	ands	r2, r3
 800871a:	42ba      	cmp	r2, r7
 800871c:	d857      	bhi.n	80087ce <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	4d33      	ldr	r5, [pc, #204]	@ (80087f0 <HAL_RCC_ClockConfig+0x100>)
 8008722:	075b      	lsls	r3, r3, #29
 8008724:	d45a      	bmi.n	80087dc <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008726:	f7ff ffad 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 800872a:	686b      	ldr	r3, [r5, #4]
 800872c:	4a31      	ldr	r2, [pc, #196]	@ (80087f4 <HAL_RCC_ClockConfig+0x104>)
 800872e:	061b      	lsls	r3, r3, #24
 8008730:	0f1b      	lsrs	r3, r3, #28
 8008732:	5cd3      	ldrb	r3, [r2, r3]
 8008734:	4930      	ldr	r1, [pc, #192]	@ (80087f8 <HAL_RCC_ClockConfig+0x108>)
 8008736:	40d8      	lsrs	r0, r3
 8008738:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800873a:	2003      	movs	r0, #3
 800873c:	f7fe fc54 	bl	8006fe8 <HAL_InitTick>
  return HAL_OK;
 8008740:	2000      	movs	r0, #0
 8008742:	e7db      	b.n	80086fc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	4393      	bics	r3, r2
 8008748:	430b      	orrs	r3, r1
 800874a:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	4013      	ands	r3, r2
 8008750:	428b      	cmp	r3, r1
 8008752:	d1d2      	bne.n	80086fa <HAL_RCC_ClockConfig+0xa>
 8008754:	e7d9      	b.n	800870a <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008756:	4926      	ldr	r1, [pc, #152]	@ (80087f0 <HAL_RCC_ClockConfig+0x100>)
 8008758:	0753      	lsls	r3, r2, #29
 800875a:	d504      	bpl.n	8008766 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800875c:	23e0      	movs	r3, #224	@ 0xe0
 800875e:	6848      	ldr	r0, [r1, #4]
 8008760:	00db      	lsls	r3, r3, #3
 8008762:	4303      	orrs	r3, r0
 8008764:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008766:	20f0      	movs	r0, #240	@ 0xf0
 8008768:	684b      	ldr	r3, [r1, #4]
 800876a:	4383      	bics	r3, r0
 800876c:	68a0      	ldr	r0, [r4, #8]
 800876e:	4303      	orrs	r3, r0
 8008770:	604b      	str	r3, [r1, #4]
 8008772:	e7cd      	b.n	8008710 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008774:	6862      	ldr	r2, [r4, #4]
 8008776:	4e1e      	ldr	r6, [pc, #120]	@ (80087f0 <HAL_RCC_ClockConfig+0x100>)
 8008778:	2a01      	cmp	r2, #1
 800877a:	d103      	bne.n	8008784 <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800877c:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800877e:	039b      	lsls	r3, r3, #14
 8008780:	d405      	bmi.n	800878e <HAL_RCC_ClockConfig+0x9e>
 8008782:	e7ba      	b.n	80086fa <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008784:	2a02      	cmp	r2, #2
 8008786:	d11a      	bne.n	80087be <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008788:	6833      	ldr	r3, [r6, #0]
 800878a:	019b      	lsls	r3, r3, #6
 800878c:	d5b5      	bpl.n	80086fa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800878e:	2103      	movs	r1, #3
 8008790:	6873      	ldr	r3, [r6, #4]
 8008792:	438b      	bics	r3, r1
 8008794:	4313      	orrs	r3, r2
 8008796:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8008798:	f7fe fc66 	bl	8007068 <HAL_GetTick>
 800879c:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800879e:	230c      	movs	r3, #12
 80087a0:	6872      	ldr	r2, [r6, #4]
 80087a2:	401a      	ands	r2, r3
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d0b3      	beq.n	8008714 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087ac:	f7fe fc5c 	bl	8007068 <HAL_GetTick>
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	1ac0      	subs	r0, r0, r3
 80087b4:	4b11      	ldr	r3, [pc, #68]	@ (80087fc <HAL_RCC_ClockConfig+0x10c>)
 80087b6:	4298      	cmp	r0, r3
 80087b8:	d9f1      	bls.n	800879e <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 80087ba:	2003      	movs	r0, #3
 80087bc:	e79e      	b.n	80086fc <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80087be:	2a03      	cmp	r2, #3
 80087c0:	d101      	bne.n	80087c6 <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80087c2:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 80087c4:	e7db      	b.n	800877e <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087c6:	6833      	ldr	r3, [r6, #0]
 80087c8:	079b      	lsls	r3, r3, #30
 80087ca:	d4e0      	bmi.n	800878e <HAL_RCC_ClockConfig+0x9e>
 80087cc:	e795      	b.n	80086fa <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ce:	682a      	ldr	r2, [r5, #0]
 80087d0:	439a      	bics	r2, r3
 80087d2:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087d4:	682a      	ldr	r2, [r5, #0]
 80087d6:	421a      	tst	r2, r3
 80087d8:	d0a1      	beq.n	800871e <HAL_RCC_ClockConfig+0x2e>
 80087da:	e78e      	b.n	80086fa <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80087dc:	686b      	ldr	r3, [r5, #4]
 80087de:	4a08      	ldr	r2, [pc, #32]	@ (8008800 <HAL_RCC_ClockConfig+0x110>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	68e2      	ldr	r2, [r4, #12]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	606b      	str	r3, [r5, #4]
 80087e8:	e79d      	b.n	8008726 <HAL_RCC_ClockConfig+0x36>
 80087ea:	46c0      	nop			@ (mov r8, r8)
 80087ec:	40022000 	.word	0x40022000
 80087f0:	40021000 	.word	0x40021000
 80087f4:	0801439c 	.word	0x0801439c
 80087f8:	20000600 	.word	0x20000600
 80087fc:	00001388 	.word	0x00001388
 8008800:	fffff8ff 	.word	0xfffff8ff

08008804 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8008804:	4b04      	ldr	r3, [pc, #16]	@ (8008818 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8008806:	4a05      	ldr	r2, [pc, #20]	@ (800881c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	4905      	ldr	r1, [pc, #20]	@ (8008820 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800880c:	055b      	lsls	r3, r3, #21
 800880e:	0f5b      	lsrs	r3, r3, #29
 8008810:	5ccb      	ldrb	r3, [r1, r3]
 8008812:	6810      	ldr	r0, [r2, #0]
 8008814:	40d8      	lsrs	r0, r3
}    
 8008816:	4770      	bx	lr
 8008818:	40021000 	.word	0x40021000
 800881c:	20000600 	.word	0x20000600
 8008820:	08014394 	.word	0x08014394

08008824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008824:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008826:	6803      	ldr	r3, [r0, #0]
{
 8008828:	0005      	movs	r5, r0
 800882a:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800882c:	03db      	lsls	r3, r3, #15
 800882e:	d52b      	bpl.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008830:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8008832:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008834:	4c46      	ldr	r4, [pc, #280]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8008836:	0552      	lsls	r2, r2, #21
 8008838:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800883a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800883c:	4213      	tst	r3, r2
 800883e:	d108      	bne.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008840:	69e3      	ldr	r3, [r4, #28]
 8008842:	4313      	orrs	r3, r2
 8008844:	61e3      	str	r3, [r4, #28]
 8008846:	69e3      	ldr	r3, [r4, #28]
 8008848:	4013      	ands	r3, r2
 800884a:	9303      	str	r3, [sp, #12]
 800884c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800884e:	2301      	movs	r3, #1
 8008850:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008852:	2780      	movs	r7, #128	@ 0x80
 8008854:	4e3f      	ldr	r6, [pc, #252]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008856:	007f      	lsls	r7, r7, #1
 8008858:	6833      	ldr	r3, [r6, #0]
 800885a:	423b      	tst	r3, r7
 800885c:	d03d      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xb6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800885e:	6a21      	ldr	r1, [r4, #32]
 8008860:	22c0      	movs	r2, #192	@ 0xc0
 8008862:	0008      	movs	r0, r1
 8008864:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008866:	686b      	ldr	r3, [r5, #4]
 8008868:	4e3b      	ldr	r6, [pc, #236]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800886a:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800886c:	4211      	tst	r1, r2
 800886e:	d146      	bne.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008870:	6a23      	ldr	r3, [r4, #32]
 8008872:	686a      	ldr	r2, [r5, #4]
 8008874:	4033      	ands	r3, r6
 8008876:	4313      	orrs	r3, r2
 8008878:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800887a:	9b00      	ldr	r3, [sp, #0]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d103      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008880:	69e3      	ldr	r3, [r4, #28]
 8008882:	4a36      	ldr	r2, [pc, #216]	@ (800895c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8008884:	4013      	ands	r3, r2
 8008886:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	07da      	lsls	r2, r3, #31
 800888c:	d506      	bpl.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800888e:	2003      	movs	r0, #3
 8008890:	492f      	ldr	r1, [pc, #188]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8008892:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008894:	4382      	bics	r2, r0
 8008896:	68a8      	ldr	r0, [r5, #8]
 8008898:	4302      	orrs	r2, r0
 800889a:	630a      	str	r2, [r1, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800889c:	079a      	lsls	r2, r3, #30
 800889e:	d506      	bpl.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088a0:	492b      	ldr	r1, [pc, #172]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80088a2:	482f      	ldr	r0, [pc, #188]	@ (8008960 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80088a4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80088a6:	4002      	ands	r2, r0
 80088a8:	68e8      	ldr	r0, [r5, #12]
 80088aa:	4302      	orrs	r2, r0
 80088ac:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088ae:	069a      	lsls	r2, r3, #26
 80088b0:	d506      	bpl.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088b2:	2010      	movs	r0, #16
 80088b4:	4926      	ldr	r1, [pc, #152]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80088b6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80088b8:	4382      	bics	r2, r0
 80088ba:	6928      	ldr	r0, [r5, #16]
 80088bc:	4302      	orrs	r2, r0
 80088be:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088c0:	039a      	lsls	r2, r3, #14
 80088c2:	d506      	bpl.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088c4:	2080      	movs	r0, #128	@ 0x80
 80088c6:	4922      	ldr	r1, [pc, #136]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80088c8:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80088ca:	4382      	bics	r2, r0
 80088cc:	69a8      	ldr	r0, [r5, #24]
 80088ce:	4302      	orrs	r2, r0
 80088d0:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088d2:	055b      	lsls	r3, r3, #21
 80088d4:	d433      	bmi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x11a>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80088d6:	2000      	movs	r0, #0
 80088d8:	e00f      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088da:	6833      	ldr	r3, [r6, #0]
 80088dc:	433b      	orrs	r3, r7
 80088de:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80088e0:	f7fe fbc2 	bl	8007068 <HAL_GetTick>
 80088e4:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088e6:	6833      	ldr	r3, [r6, #0]
 80088e8:	423b      	tst	r3, r7
 80088ea:	d1b8      	bne.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088ec:	f7fe fbbc 	bl	8007068 <HAL_GetTick>
 80088f0:	9b01      	ldr	r3, [sp, #4]
 80088f2:	1ac0      	subs	r0, r0, r3
 80088f4:	2864      	cmp	r0, #100	@ 0x64
 80088f6:	d9f6      	bls.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
          return HAL_TIMEOUT;
 80088f8:	2003      	movs	r0, #3
}
 80088fa:	b005      	add	sp, #20
 80088fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80088fe:	4013      	ands	r3, r2
 8008900:	4283      	cmp	r3, r0
 8008902:	d0b5      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8008904:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008906:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8008908:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800890a:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800890c:	0252      	lsls	r2, r2, #9
 800890e:	4302      	orrs	r2, r0
 8008910:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008912:	6a22      	ldr	r2, [r4, #32]
 8008914:	4813      	ldr	r0, [pc, #76]	@ (8008964 <HAL_RCCEx_PeriphCLKConfig+0x140>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008916:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008918:	4002      	ands	r2, r0
 800891a:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 800891c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800891e:	07db      	lsls	r3, r3, #31
 8008920:	d5a6      	bpl.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8008922:	f7fe fba1 	bl	8007068 <HAL_GetTick>
 8008926:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008928:	2202      	movs	r2, #2
 800892a:	6a23      	ldr	r3, [r4, #32]
 800892c:	4213      	tst	r3, r2
 800892e:	d19f      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008930:	f7fe fb9a 	bl	8007068 <HAL_GetTick>
 8008934:	4b0c      	ldr	r3, [pc, #48]	@ (8008968 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8008936:	1bc0      	subs	r0, r0, r7
 8008938:	4298      	cmp	r0, r3
 800893a:	d9f5      	bls.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800893c:	e7dc      	b.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800893e:	2140      	movs	r1, #64	@ 0x40
 8008940:	4a03      	ldr	r2, [pc, #12]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8008942:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008944:	438b      	bics	r3, r1
 8008946:	6969      	ldr	r1, [r5, #20]
 8008948:	430b      	orrs	r3, r1
 800894a:	6313      	str	r3, [r2, #48]	@ 0x30
 800894c:	e7c3      	b.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 800894e:	46c0      	nop			@ (mov r8, r8)
 8008950:	40021000 	.word	0x40021000
 8008954:	40007000 	.word	0x40007000
 8008958:	fffffcff 	.word	0xfffffcff
 800895c:	efffffff 	.word	0xefffffff
 8008960:	fffcffff 	.word	0xfffcffff
 8008964:	fffeffff 	.word	0xfffeffff
 8008968:	00001388 	.word	0x00001388

0800896c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800896c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896e:	000e      	movs	r6, r1
 8008970:	b085      	sub	sp, #20
 8008972:	0015      	movs	r5, r2
 8008974:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008976:	f7fe fb77 	bl	8007068 <HAL_GetTick>
 800897a:	19ad      	adds	r5, r5, r6
 800897c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800897e:	f7fe fb73 	bl	8007068 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008982:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008984:	4b25      	ldr	r3, [pc, #148]	@ (8008a1c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8008986:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	015b      	lsls	r3, r3, #5
 800898c:	0d1b      	lsrs	r3, r3, #20
 800898e:	436b      	muls	r3, r5
 8008990:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008992:	6822      	ldr	r2, [r4, #0]
 8008994:	6893      	ldr	r3, [r2, #8]
 8008996:	0018      	movs	r0, r3
 8008998:	4038      	ands	r0, r7
 800899a:	423b      	tst	r3, r7
 800899c:	d032      	beq.n	8008a04 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 800899e:	1c73      	adds	r3, r6, #1
 80089a0:	d0f8      	beq.n	8008994 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089a2:	f7fe fb61 	bl	8007068 <HAL_GetTick>
 80089a6:	9b01      	ldr	r3, [sp, #4]
 80089a8:	1ac0      	subs	r0, r0, r3
 80089aa:	42a8      	cmp	r0, r5
 80089ac:	d32c      	bcc.n	8008a08 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089ae:	21e0      	movs	r1, #224	@ 0xe0
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	438a      	bics	r2, r1
 80089b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089b8:	2282      	movs	r2, #130	@ 0x82
 80089ba:	6861      	ldr	r1, [r4, #4]
 80089bc:	0052      	lsls	r2, r2, #1
 80089be:	4291      	cmp	r1, r2
 80089c0:	d10c      	bne.n	80089dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 80089c2:	2180      	movs	r1, #128	@ 0x80
 80089c4:	68a2      	ldr	r2, [r4, #8]
 80089c6:	0209      	lsls	r1, r1, #8
 80089c8:	428a      	cmp	r2, r1
 80089ca:	d003      	beq.n	80089d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089cc:	2180      	movs	r1, #128	@ 0x80
 80089ce:	00c9      	lsls	r1, r1, #3
 80089d0:	428a      	cmp	r2, r1
 80089d2:	d103      	bne.n	80089dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089d4:	2140      	movs	r1, #64	@ 0x40
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	438a      	bics	r2, r1
 80089da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089dc:	2180      	movs	r1, #128	@ 0x80
 80089de:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80089e0:	0189      	lsls	r1, r1, #6
 80089e2:	428a      	cmp	r2, r1
 80089e4:	d106      	bne.n	80089f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 80089e6:	6819      	ldr	r1, [r3, #0]
 80089e8:	480d      	ldr	r0, [pc, #52]	@ (8008a20 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 80089ea:	4001      	ands	r1, r0
 80089ec:	6019      	str	r1, [r3, #0]
 80089ee:	6819      	ldr	r1, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089f4:	0023      	movs	r3, r4
 80089f6:	2201      	movs	r2, #1
 80089f8:	335d      	adds	r3, #93	@ 0x5d
 80089fa:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089fc:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 80089fe:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8008a00:	345c      	adds	r4, #92	@ 0x5c
 8008a02:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8008a04:	b005      	add	sp, #20
 8008a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8008a08:	9b03      	ldr	r3, [sp, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d000      	beq.n	8008a10 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 8008a0e:	002b      	movs	r3, r5
      count--;
 8008a10:	9a03      	ldr	r2, [sp, #12]
 8008a12:	001d      	movs	r5, r3
 8008a14:	3a01      	subs	r2, #1
 8008a16:	9203      	str	r2, [sp, #12]
 8008a18:	e7bb      	b.n	8008992 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8008a1a:	46c0      	nop			@ (mov r8, r8)
 8008a1c:	20000600 	.word	0x20000600
 8008a20:	ffffdfff 	.word	0xffffdfff

08008a24 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a26:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008a28:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 8008a2e:	ab02      	add	r3, sp, #8
 8008a30:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008a32:	0004      	movs	r4, r0
 8008a34:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a36:	f7fe fb17 	bl	8007068 <HAL_GetTick>
 8008a3a:	19ed      	adds	r5, r5, r7
 8008a3c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8008a3e:	f7fe fb13 	bl	8007068 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a42:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008a44:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8008a46:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008a48:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8008af4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4353      	muls	r3, r2
 8008a50:	0d1b      	lsrs	r3, r3, #20
 8008a52:	436b      	muls	r3, r5
 8008a54:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008a56:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8008a58:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8008a5a:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8008a5c:	688b      	ldr	r3, [r1, #8]
 8008a5e:	0018      	movs	r0, r3
 8008a60:	4030      	ands	r0, r6
 8008a62:	4233      	tst	r3, r6
 8008a64:	d03b      	beq.n	8008ade <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008a66:	23c0      	movs	r3, #192	@ 0xc0
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	429e      	cmp	r6, r3
 8008a6c:	d104      	bne.n	8008a78 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8008a6e:	9b01      	ldr	r3, [sp, #4]
 8008a70:	7b1b      	ldrb	r3, [r3, #12]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008a76:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008a78:	1c7b      	adds	r3, r7, #1
 8008a7a:	d0ef      	beq.n	8008a5c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a7c:	f7fe faf4 	bl	8007068 <HAL_GetTick>
 8008a80:	9b00      	ldr	r3, [sp, #0]
 8008a82:	1ac0      	subs	r0, r0, r3
 8008a84:	42a8      	cmp	r0, r5
 8008a86:	d32c      	bcc.n	8008ae2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a88:	21e0      	movs	r1, #224	@ 0xe0
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	438a      	bics	r2, r1
 8008a90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a92:	2282      	movs	r2, #130	@ 0x82
 8008a94:	6861      	ldr	r1, [r4, #4]
 8008a96:	0052      	lsls	r2, r2, #1
 8008a98:	4291      	cmp	r1, r2
 8008a9a:	d10c      	bne.n	8008ab6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8008a9c:	2180      	movs	r1, #128	@ 0x80
 8008a9e:	68a2      	ldr	r2, [r4, #8]
 8008aa0:	0209      	lsls	r1, r1, #8
 8008aa2:	428a      	cmp	r2, r1
 8008aa4:	d003      	beq.n	8008aae <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008aa6:	2180      	movs	r1, #128	@ 0x80
 8008aa8:	00c9      	lsls	r1, r1, #3
 8008aaa:	428a      	cmp	r2, r1
 8008aac:	d103      	bne.n	8008ab6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008aae:	2140      	movs	r1, #64	@ 0x40
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	438a      	bics	r2, r1
 8008ab4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ab6:	2180      	movs	r1, #128	@ 0x80
 8008ab8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008aba:	0189      	lsls	r1, r1, #6
 8008abc:	428a      	cmp	r2, r1
 8008abe:	d106      	bne.n	8008ace <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 8008ac0:	6819      	ldr	r1, [r3, #0]
 8008ac2:	480d      	ldr	r0, [pc, #52]	@ (8008af8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 8008ac4:	4001      	ands	r1, r0
 8008ac6:	6019      	str	r1, [r3, #0]
 8008ac8:	6819      	ldr	r1, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ace:	0023      	movs	r3, r4
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	335d      	adds	r3, #93	@ 0x5d
 8008ad4:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ad6:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8008ad8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8008ada:	345c      	adds	r4, #92	@ 0x5c
 8008adc:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8008ade:	b005      	add	sp, #20
 8008ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d000      	beq.n	8008aea <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 8008ae8:	002b      	movs	r3, r5
      count--;
 8008aea:	9a03      	ldr	r2, [sp, #12]
 8008aec:	001d      	movs	r5, r3
 8008aee:	3a01      	subs	r2, #1
 8008af0:	9203      	str	r2, [sp, #12]
 8008af2:	e7b0      	b.n	8008a56 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8008af4:	20000600 	.word	0x20000600
 8008af8:	ffffdfff 	.word	0xffffdfff

08008afc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008afe:	2382      	movs	r3, #130	@ 0x82
{
 8008b00:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b02:	6842      	ldr	r2, [r0, #4]
{
 8008b04:	0004      	movs	r4, r0
 8008b06:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d10d      	bne.n	8008b2a <SPI_EndRxTransaction+0x2e>
 8008b0e:	2280      	movs	r2, #128	@ 0x80
 8008b10:	6883      	ldr	r3, [r0, #8]
 8008b12:	0212      	lsls	r2, r2, #8
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d003      	beq.n	8008b20 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b18:	2280      	movs	r2, #128	@ 0x80
 8008b1a:	00d2      	lsls	r2, r2, #3
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d104      	bne.n	8008b2a <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008b20:	2140      	movs	r1, #64	@ 0x40
 8008b22:	6822      	ldr	r2, [r4, #0]
 8008b24:	6813      	ldr	r3, [r2, #0]
 8008b26:	438b      	bics	r3, r1
 8008b28:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b2a:	003a      	movs	r2, r7
 8008b2c:	0031      	movs	r1, r6
 8008b2e:	0020      	movs	r0, r4
 8008b30:	f7ff ff1c 	bl	800896c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8008b34:	1e05      	subs	r5, r0, #0
 8008b36:	d005      	beq.n	8008b44 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b38:	2320      	movs	r3, #32
 8008b3a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b3c:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008b42:	e016      	b.n	8008b72 <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b44:	2382      	movs	r3, #130	@ 0x82
 8008b46:	6862      	ldr	r2, [r4, #4]
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d111      	bne.n	8008b72 <SPI_EndRxTransaction+0x76>
 8008b4e:	2280      	movs	r2, #128	@ 0x80
 8008b50:	68a3      	ldr	r3, [r4, #8]
 8008b52:	0212      	lsls	r2, r2, #8
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d003      	beq.n	8008b60 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b58:	2280      	movs	r2, #128	@ 0x80
 8008b5a:	00d2      	lsls	r2, r2, #3
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d108      	bne.n	8008b72 <SPI_EndRxTransaction+0x76>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b60:	21c0      	movs	r1, #192	@ 0xc0
 8008b62:	003b      	movs	r3, r7
 8008b64:	0032      	movs	r2, r6
 8008b66:	0020      	movs	r0, r4
 8008b68:	00c9      	lsls	r1, r1, #3
 8008b6a:	f7ff ff5b 	bl	8008a24 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d1e2      	bne.n	8008b38 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 8008b72:	0028      	movs	r0, r5
 8008b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b76 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b76:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b78:	0013      	movs	r3, r2
{
 8008b7a:	000d      	movs	r5, r1
 8008b7c:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b7e:	000a      	movs	r2, r1
 8008b80:	21c0      	movs	r1, #192	@ 0xc0
 8008b82:	0149      	lsls	r1, r1, #5
{
 8008b84:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b86:	f7ff ff4d 	bl	8008a24 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d005      	beq.n	8008b9a <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b8e:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8008b90:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b92:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8008b94:	4313      	orrs	r3, r2
 8008b96:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8008b98:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b9a:	0032      	movs	r2, r6
 8008b9c:	0029      	movs	r1, r5
 8008b9e:	0020      	movs	r0, r4
 8008ba0:	f7ff fee4 	bl	800896c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d1f2      	bne.n	8008b8e <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ba8:	21c0      	movs	r1, #192	@ 0xc0
 8008baa:	0033      	movs	r3, r6
 8008bac:	002a      	movs	r2, r5
 8008bae:	0020      	movs	r0, r4
 8008bb0:	00c9      	lsls	r1, r1, #3
 8008bb2:	f7ff ff37 	bl	8008a24 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d0ee      	beq.n	8008b98 <SPI_EndRxTxTransaction+0x22>
 8008bba:	e7e8      	b.n	8008b8e <SPI_EndRxTxTransaction+0x18>

08008bbc <HAL_SPI_MspInit>:
}
 8008bbc:	4770      	bx	lr
	...

08008bc0 <HAL_SPI_Init>:
{
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8008bc4:	2001      	movs	r0, #1
  if (hspi == NULL)
 8008bc6:	2c00      	cmp	r4, #0
 8008bc8:	d067      	beq.n	8008c9a <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008bca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d165      	bne.n	8008c9c <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bd0:	2282      	movs	r2, #130	@ 0x82
 8008bd2:	6861      	ldr	r1, [r4, #4]
 8008bd4:	0052      	lsls	r2, r2, #1
 8008bd6:	4291      	cmp	r1, r2
 8008bd8:	d000      	beq.n	8008bdc <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008bda:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bdc:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bde:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008be0:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008be2:	355d      	adds	r5, #93	@ 0x5d
 8008be4:	782b      	ldrb	r3, [r5, #0]
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d105      	bne.n	8008bf8 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8008bec:	0023      	movs	r3, r4
 8008bee:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8008bf0:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8008bf2:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8008bf4:	f7ff ffe2 	bl	8008bbc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008bf8:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8008bfa:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8008bfc:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8008bfe:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c00:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8008c02:	680b      	ldr	r3, [r1, #0]
 8008c04:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c06:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 8008c08:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c0a:	00d2      	lsls	r2, r2, #3
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4296      	cmp	r6, r2
 8008c10:	d948      	bls.n	8008ca4 <HAL_SPI_Init+0xe4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008c12:	22f0      	movs	r2, #240	@ 0xf0
 8008c14:	0018      	movs	r0, r3
 8008c16:	0112      	lsls	r2, r2, #4
 8008c18:	4296      	cmp	r6, r2
 8008c1a:	d000      	beq.n	8008c1e <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c1c:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c1e:	2282      	movs	r2, #130	@ 0x82
 8008c20:	2784      	movs	r7, #132	@ 0x84
 8008c22:	6863      	ldr	r3, [r4, #4]
 8008c24:	0052      	lsls	r2, r2, #1
 8008c26:	4013      	ands	r3, r2
 8008c28:	68a2      	ldr	r2, [r4, #8]
 8008c2a:	023f      	lsls	r7, r7, #8
 8008c2c:	403a      	ands	r2, r7
 8008c2e:	2702      	movs	r7, #2
 8008c30:	4313      	orrs	r3, r2
 8008c32:	6922      	ldr	r2, [r4, #16]
 8008c34:	69a5      	ldr	r5, [r4, #24]
 8008c36:	403a      	ands	r2, r7
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	6967      	ldr	r7, [r4, #20]
 8008c3e:	4017      	ands	r7, r2
 8008c40:	433b      	orrs	r3, r7
 8008c42:	2780      	movs	r7, #128	@ 0x80
 8008c44:	00bf      	lsls	r7, r7, #2
 8008c46:	402f      	ands	r7, r5
 8008c48:	433b      	orrs	r3, r7
 8008c4a:	69e7      	ldr	r7, [r4, #28]
 8008c4c:	3237      	adds	r2, #55	@ 0x37
 8008c4e:	4017      	ands	r7, r2
 8008c50:	433b      	orrs	r3, r7
 8008c52:	6a27      	ldr	r7, [r4, #32]
 8008c54:	3248      	adds	r2, #72	@ 0x48
 8008c56:	4017      	ands	r7, r2
 8008c58:	2280      	movs	r2, #128	@ 0x80
 8008c5a:	433b      	orrs	r3, r7
 8008c5c:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8008c5e:	0192      	lsls	r2, r2, #6
 8008c60:	4017      	ands	r7, r2
 8008c62:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c64:	2710      	movs	r7, #16
 8008c66:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c68:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008c6c:	0c2d      	lsrs	r5, r5, #16
 8008c6e:	403b      	ands	r3, r7
 8008c70:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8008c72:	4017      	ands	r7, r2
 8008c74:	433b      	orrs	r3, r7
 8008c76:	27f0      	movs	r7, #240	@ 0xf0
 8008c78:	013f      	lsls	r7, r7, #4
 8008c7a:	403e      	ands	r6, r7
 8008c7c:	4333      	orrs	r3, r6
 8008c7e:	2604      	movs	r6, #4
 8008c80:	4035      	ands	r5, r6
 8008c82:	432b      	orrs	r3, r5
 8008c84:	4303      	orrs	r3, r0
 8008c86:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c88:	69cb      	ldr	r3, [r1, #28]
 8008c8a:	4808      	ldr	r0, [pc, #32]	@ (8008cac <HAL_SPI_Init+0xec>)
 8008c8c:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c8e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c90:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8008c92:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c94:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c96:	345d      	adds	r4, #93	@ 0x5d
 8008c98:	7023      	strb	r3, [r4, #0]
}
 8008c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ca0:	6163      	str	r3, [r4, #20]
 8008ca2:	e79b      	b.n	8008bdc <HAL_SPI_Init+0x1c>
 8008ca4:	2080      	movs	r0, #128	@ 0x80
 8008ca6:	0140      	lsls	r0, r0, #5
 8008ca8:	e7b6      	b.n	8008c18 <HAL_SPI_Init+0x58>
 8008caa:	46c0      	nop			@ (mov r8, r8)
 8008cac:	fffff7ff 	.word	0xfffff7ff

08008cb0 <HAL_SPI_Transmit>:
{
 8008cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hspi);
 8008cb6:	0003      	movs	r3, r0
 8008cb8:	335c      	adds	r3, #92	@ 0x5c
{
 8008cba:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 8008cbc:	781a      	ldrb	r2, [r3, #0]
{
 8008cbe:	0004      	movs	r4, r0
 8008cc0:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8008cc2:	2702      	movs	r7, #2
 8008cc4:	2a01      	cmp	r2, #1
 8008cc6:	d100      	bne.n	8008cca <HAL_SPI_Transmit+0x1a>
 8008cc8:	e082      	b.n	8008dd0 <HAL_SPI_Transmit+0x120>
 8008cca:	2201      	movs	r2, #1
 8008ccc:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8008cce:	f7fe f9cb 	bl	8007068 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8008cd2:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8008cd4:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8008cd6:	335d      	adds	r3, #93	@ 0x5d
 8008cd8:	781a      	ldrb	r2, [r3, #0]
 8008cda:	b2d7      	uxtb	r7, r2
 8008cdc:	2a01      	cmp	r2, #1
 8008cde:	d000      	beq.n	8008ce2 <HAL_SPI_Transmit+0x32>
 8008ce0:	e0a6      	b.n	8008e30 <HAL_SPI_Transmit+0x180>
  if ((pData == NULL) || (Size == 0U))
 8008ce2:	2d00      	cmp	r5, #0
 8008ce4:	d071      	beq.n	8008dca <HAL_SPI_Transmit+0x11a>
 8008ce6:	2e00      	cmp	r6, #0
 8008ce8:	d06f      	beq.n	8008dca <HAL_SPI_Transmit+0x11a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cea:	3202      	adds	r2, #2
 8008cec:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cee:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8008cf0:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cf2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cf4:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cf6:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008cf8:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008cfa:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxXferCount = 0U;
 8008cfc:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8008cfe:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008d00:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d02:	2280      	movs	r2, #128	@ 0x80
 8008d04:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 8008d06:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008d08:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d0a:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8008d0c:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d0e:	4291      	cmp	r1, r2
 8008d10:	d108      	bne.n	8008d24 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 8008d12:	2140      	movs	r1, #64	@ 0x40
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	438a      	bics	r2, r1
 8008d18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d1a:	2280      	movs	r2, #128	@ 0x80
 8008d1c:	6819      	ldr	r1, [r3, #0]
 8008d1e:	01d2      	lsls	r2, r2, #7
 8008d20:	430a      	orrs	r2, r1
 8008d22:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d24:	2240      	movs	r2, #64	@ 0x40
 8008d26:	6819      	ldr	r1, [r3, #0]
 8008d28:	4211      	tst	r1, r2
 8008d2a:	d102      	bne.n	8008d32 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8008d2c:	6819      	ldr	r1, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d32:	21e0      	movs	r1, #224	@ 0xe0
 8008d34:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d36:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d38:	00c9      	lsls	r1, r1, #3
 8008d3a:	4288      	cmp	r0, r1
 8008d3c:	d94b      	bls.n	8008dd6 <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	d001      	beq.n	8008d46 <HAL_SPI_Transmit+0x96>
 8008d42:	2e01      	cmp	r6, #1
 8008d44:	d107      	bne.n	8008d56 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d46:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d48:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d4a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8008d4c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d4e:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d56:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8008d58:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d119      	bne.n	8008d92 <HAL_SPI_Transmit+0xe2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d5e:	0020      	movs	r0, r4
 8008d60:	9a01      	ldr	r2, [sp, #4]
 8008d62:	9900      	ldr	r1, [sp, #0]
 8008d64:	f7ff ff07 	bl	8008b76 <SPI_EndRxTxTransaction>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d15e      	bne.n	8008e2a <HAL_SPI_Transmit+0x17a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d6c:	68a3      	ldr	r3, [r4, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d72:	9303      	str	r3, [sp, #12]
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	9203      	str	r2, [sp, #12]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	9303      	str	r3, [sp, #12]
 8008d7e:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d80:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8008d82:	2a00      	cmp	r2, #0
 8008d84:	d121      	bne.n	8008dca <HAL_SPI_Transmit+0x11a>
    hspi->State = HAL_SPI_STATE_READY;
 8008d86:	0023      	movs	r3, r4
 8008d88:	2101      	movs	r1, #1
 8008d8a:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d8c:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8008d8e:	7019      	strb	r1, [r3, #0]
 8008d90:	e01b      	b.n	8008dca <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d92:	6822      	ldr	r2, [r4, #0]
 8008d94:	6893      	ldr	r3, [r2, #8]
 8008d96:	422b      	tst	r3, r5
 8008d98:	d009      	beq.n	8008dae <HAL_SPI_Transmit+0xfe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d9a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008d9c:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d9e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008da0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008da2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8008da4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008da6:	3b01      	subs	r3, #1
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8008dac:	e7d4      	b.n	8008d58 <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dae:	f7fe f95b 	bl	8007068 <HAL_GetTick>
 8008db2:	9b01      	ldr	r3, [sp, #4]
 8008db4:	1ac0      	subs	r0, r0, r3
 8008db6:	9b00      	ldr	r3, [sp, #0]
 8008db8:	4298      	cmp	r0, r3
 8008dba:	d3cd      	bcc.n	8008d58 <HAL_SPI_Transmit+0xa8>
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	d0cb      	beq.n	8008d58 <HAL_SPI_Transmit+0xa8>
          hspi->State = HAL_SPI_STATE_READY;
 8008dc0:	0023      	movs	r3, r4
 8008dc2:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8008dc4:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8008dc6:	335d      	adds	r3, #93	@ 0x5d
 8008dc8:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8008dca:	2300      	movs	r3, #0
 8008dcc:	345c      	adds	r4, #92	@ 0x5c
 8008dce:	7023      	strb	r3, [r4, #0]
}
 8008dd0:	0038      	movs	r0, r7
 8008dd2:	b005      	add	sp, #20
 8008dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dd6:	2a00      	cmp	r2, #0
 8008dd8:	d001      	beq.n	8008dde <HAL_SPI_Transmit+0x12e>
 8008dda:	2e01      	cmp	r6, #1
 8008ddc:	d108      	bne.n	8008df0 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dde:	782a      	ldrb	r2, [r5, #0]
 8008de0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008de2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008de4:	3301      	adds	r3, #1
 8008de6:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8008de8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008df0:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8008df2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d0b2      	beq.n	8008d5e <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	422a      	tst	r2, r5
 8008dfe:	d00a      	beq.n	8008e16 <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e00:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008e02:	7812      	ldrb	r2, [r2, #0]
 8008e04:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e06:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008e08:	3301      	adds	r3, #1
 8008e0a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8008e0c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8008e14:	e7ed      	b.n	8008df2 <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e16:	f7fe f927 	bl	8007068 <HAL_GetTick>
 8008e1a:	9b01      	ldr	r3, [sp, #4]
 8008e1c:	1ac0      	subs	r0, r0, r3
 8008e1e:	9b00      	ldr	r3, [sp, #0]
 8008e20:	4298      	cmp	r0, r3
 8008e22:	d3e6      	bcc.n	8008df2 <HAL_SPI_Transmit+0x142>
 8008e24:	3301      	adds	r3, #1
 8008e26:	d0e4      	beq.n	8008df2 <HAL_SPI_Transmit+0x142>
 8008e28:	e7ca      	b.n	8008dc0 <HAL_SPI_Transmit+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e2a:	2320      	movs	r3, #32
 8008e2c:	6623      	str	r3, [r4, #96]	@ 0x60
 8008e2e:	e79d      	b.n	8008d6c <HAL_SPI_Transmit+0xbc>
    errorcode = HAL_BUSY;
 8008e30:	2702      	movs	r7, #2
 8008e32:	e7ca      	b.n	8008dca <HAL_SPI_Transmit+0x11a>

08008e34 <HAL_SPI_TransmitReceive>:
{
 8008e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e36:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8008e38:	0003      	movs	r3, r0
 8008e3a:	335c      	adds	r3, #92	@ 0x5c
{
 8008e3c:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8008e3e:	781a      	ldrb	r2, [r3, #0]
{
 8008e40:	0004      	movs	r4, r0
 8008e42:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8008e44:	2002      	movs	r0, #2
 8008e46:	2a01      	cmp	r2, #1
 8008e48:	d01b      	beq.n	8008e82 <HAL_SPI_TransmitReceive+0x4e>
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8008e4e:	f7fe f90b 	bl	8007068 <HAL_GetTick>
  tmp_state           = hspi->State;
 8008e52:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8008e54:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8008e56:	335d      	adds	r3, #93	@ 0x5d
 8008e58:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008e5a:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8008e5c:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d009      	beq.n	8008e76 <HAL_SPI_TransmitReceive+0x42>
 8008e62:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 8008e64:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	4299      	cmp	r1, r3
 8008e6a:	d107      	bne.n	8008e7c <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e6c:	68a3      	ldr	r3, [r4, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d104      	bne.n	8008e7c <HAL_SPI_TransmitReceive+0x48>
 8008e72:	2a04      	cmp	r2, #4
 8008e74:	d102      	bne.n	8008e7c <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e76:	2d00      	cmp	r5, #0
 8008e78:	d104      	bne.n	8008e84 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 8008e7a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	345c      	adds	r4, #92	@ 0x5c
 8008e80:	7023      	strb	r3, [r4, #0]
}
 8008e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e84:	2f00      	cmp	r7, #0
 8008e86:	d0f8      	beq.n	8008e7a <HAL_SPI_TransmitReceive+0x46>
 8008e88:	2e00      	cmp	r6, #0
 8008e8a:	d0f6      	beq.n	8008e7a <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e8c:	0023      	movs	r3, r4
 8008e8e:	335d      	adds	r3, #93	@ 0x5d
 8008e90:	781a      	ldrb	r2, [r3, #0]
 8008e92:	2a04      	cmp	r2, #4
 8008e94:	d001      	beq.n	8008e9a <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e96:	2205      	movs	r2, #5
 8008e98:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 8008e9a:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e9c:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8008e9e:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ea0:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ea2:	6427      	str	r7, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008ea4:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008ea6:	1da2      	adds	r2, r4, #6
 8008ea8:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008eaa:	22e0      	movs	r2, #224	@ 0xe0
 8008eac:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8008eae:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008eb0:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008eb2:	63a5      	str	r5, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eb4:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 8008eb6:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008eb8:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008eba:	00d2      	lsls	r2, r2, #3
 8008ebc:	4290      	cmp	r0, r2
 8008ebe:	d935      	bls.n	8008f2c <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	4f60      	ldr	r7, [pc, #384]	@ (8009044 <HAL_SPI_TransmitReceive+0x210>)
 8008ec4:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ec6:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ec8:	2240      	movs	r2, #64	@ 0x40
 8008eca:	681f      	ldr	r7, [r3, #0]
 8008ecc:	4217      	tst	r7, r2
 8008ece:	d102      	bne.n	8008ed6 <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8008ed0:	681f      	ldr	r7, [r3, #0]
 8008ed2:	433a      	orrs	r2, r7
 8008ed4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ed6:	22e0      	movs	r2, #224	@ 0xe0
 8008ed8:	00d2      	lsls	r2, r2, #3
 8008eda:	4290      	cmp	r0, r2
 8008edc:	d961      	bls.n	8008fa2 <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ede:	2900      	cmp	r1, #0
 8008ee0:	d001      	beq.n	8008ee6 <HAL_SPI_TransmitReceive+0xb2>
 8008ee2:	2e01      	cmp	r6, #1
 8008ee4:	d107      	bne.n	8008ef6 <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ee6:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ee8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eea:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8008eec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008eee:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8008ef6:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ef8:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008efa:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008efc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d119      	bne.n	8008f36 <HAL_SPI_TransmitReceive+0x102>
 8008f02:	0023      	movs	r3, r4
 8008f04:	3308      	adds	r3, #8
 8008f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d114      	bne.n	8008f36 <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f0c:	0020      	movs	r0, r4
 8008f0e:	9a01      	ldr	r2, [sp, #4]
 8008f10:	9908      	ldr	r1, [sp, #32]
 8008f12:	f7ff fe30 	bl	8008b76 <SPI_EndRxTxTransaction>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d000      	beq.n	8008f1c <HAL_SPI_TransmitReceive+0xe8>
 8008f1a:	e08e      	b.n	800903a <HAL_SPI_TransmitReceive+0x206>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f1c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1ab      	bne.n	8008e7a <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 8008f22:	0023      	movs	r3, r4
 8008f24:	2201      	movs	r2, #1
 8008f26:	335d      	adds	r3, #93	@ 0x5d
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	e7a7      	b.n	8008e7c <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f2c:	2280      	movs	r2, #128	@ 0x80
 8008f2e:	685f      	ldr	r7, [r3, #4]
 8008f30:	0152      	lsls	r2, r2, #5
 8008f32:	433a      	orrs	r2, r7
 8008f34:	e7c7      	b.n	8008ec6 <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f36:	6820      	ldr	r0, [r4, #0]
 8008f38:	6883      	ldr	r3, [r0, #8]
 8008f3a:	423b      	tst	r3, r7
 8008f3c:	d00e      	beq.n	8008f5c <HAL_SPI_TransmitReceive+0x128>
 8008f3e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00b      	beq.n	8008f5c <HAL_SPI_TransmitReceive+0x128>
 8008f44:	2d01      	cmp	r5, #1
 8008f46:	d108      	bne.n	8008f5a <HAL_SPI_TransmitReceive+0x126>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f48:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008f4a:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f4c:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f4e:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f50:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8008f52:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008f54:	3b01      	subs	r3, #1
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 8008f5a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f5c:	6883      	ldr	r3, [r0, #8]
 8008f5e:	0019      	movs	r1, r3
 8008f60:	4031      	ands	r1, r6
 8008f62:	4233      	tst	r3, r6
 8008f64:	d00e      	beq.n	8008f84 <HAL_SPI_TransmitReceive+0x150>
 8008f66:	0022      	movs	r2, r4
 8008f68:	3208      	adds	r2, #8
 8008f6a:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d009      	beq.n	8008f84 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8008f70:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f72:	68c0      	ldr	r0, [r0, #12]
 8008f74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f76:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f78:	3302      	adds	r3, #2
 8008f7a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8008f7c:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f84:	f7fe f870 	bl	8007068 <HAL_GetTick>
 8008f88:	9b01      	ldr	r3, [sp, #4]
 8008f8a:	1ac0      	subs	r0, r0, r3
 8008f8c:	9b08      	ldr	r3, [sp, #32]
 8008f8e:	4298      	cmp	r0, r3
 8008f90:	d3b4      	bcc.n	8008efc <HAL_SPI_TransmitReceive+0xc8>
 8008f92:	3301      	adds	r3, #1
 8008f94:	d0b2      	beq.n	8008efc <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8008f96:	0023      	movs	r3, r4
 8008f98:	2201      	movs	r2, #1
 8008f9a:	335d      	adds	r3, #93	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8008f9c:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8008f9e:	701a      	strb	r2, [r3, #0]
        goto error;
 8008fa0:	e76c      	b.n	8008e7c <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fa2:	2900      	cmp	r1, #0
 8008fa4:	d001      	beq.n	8008faa <HAL_SPI_TransmitReceive+0x176>
 8008fa6:	2e01      	cmp	r6, #1
 8008fa8:	d108      	bne.n	8008fbc <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008faa:	782a      	ldrb	r2, [r5, #0]
 8008fac:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8008fb4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8008fbc:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fbe:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fc0:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fc2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d104      	bne.n	8008fd2 <HAL_SPI_TransmitReceive+0x19e>
 8008fc8:	0023      	movs	r3, r4
 8008fca:	3308      	adds	r3, #8
 8008fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d09c      	beq.n	8008f0c <HAL_SPI_TransmitReceive+0xd8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	423a      	tst	r2, r7
 8008fd8:	d00f      	beq.n	8008ffa <HAL_SPI_TransmitReceive+0x1c6>
 8008fda:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8008fdc:	2a00      	cmp	r2, #0
 8008fde:	d00c      	beq.n	8008ffa <HAL_SPI_TransmitReceive+0x1c6>
 8008fe0:	2d01      	cmp	r5, #1
 8008fe2:	d109      	bne.n	8008ff8 <HAL_SPI_TransmitReceive+0x1c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008fe4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008fe6:	7812      	ldrb	r2, [r2, #0]
 8008fe8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8008fea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008fec:	3301      	adds	r3, #1
 8008fee:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ff0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8008ff8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	0011      	movs	r1, r2
 8009000:	4031      	ands	r1, r6
 8009002:	4232      	tst	r2, r6
 8009004:	d00f      	beq.n	8009026 <HAL_SPI_TransmitReceive+0x1f2>
 8009006:	0022      	movs	r2, r4
 8009008:	3208      	adds	r2, #8
 800900a:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
 800900c:	2800      	cmp	r0, #0
 800900e:	d00a      	beq.n	8009026 <HAL_SPI_TransmitReceive+0x1f2>
        txallowed = 1U;
 8009010:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009012:	7b1b      	ldrb	r3, [r3, #12]
 8009014:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009016:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 8009018:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800901a:	3301      	adds	r3, #1
 800901c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800901e:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8009020:	3b01      	subs	r3, #1
 8009022:	b29b      	uxth	r3, r3
 8009024:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009026:	f7fe f81f 	bl	8007068 <HAL_GetTick>
 800902a:	9b01      	ldr	r3, [sp, #4]
 800902c:	1ac0      	subs	r0, r0, r3
 800902e:	9b08      	ldr	r3, [sp, #32]
 8009030:	4298      	cmp	r0, r3
 8009032:	d3c6      	bcc.n	8008fc2 <HAL_SPI_TransmitReceive+0x18e>
 8009034:	3301      	adds	r3, #1
 8009036:	d0c4      	beq.n	8008fc2 <HAL_SPI_TransmitReceive+0x18e>
 8009038:	e7ad      	b.n	8008f96 <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800903a:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800903c:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800903e:	6623      	str	r3, [r4, #96]	@ 0x60
 8009040:	e76c      	b.n	8008f1c <HAL_SPI_TransmitReceive+0xe8>
 8009042:	46c0      	nop			@ (mov r8, r8)
 8009044:	ffffefff 	.word	0xffffefff

08009048 <HAL_SPI_Receive>:
{
 8009048:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 800904a:	0006      	movs	r6, r0
{
 800904c:	b087      	sub	sp, #28
 800904e:	9104      	str	r1, [sp, #16]
 8009050:	9303      	str	r3, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 8009052:	365d      	adds	r6, #93	@ 0x5d
 8009054:	7833      	ldrb	r3, [r6, #0]
{
 8009056:	0004      	movs	r4, r0
 8009058:	0017      	movs	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 800905a:	b2dd      	uxtb	r5, r3
 800905c:	2b01      	cmp	r3, #1
 800905e:	d000      	beq.n	8009062 <HAL_SPI_Receive+0x1a>
 8009060:	e0aa      	b.n	80091b8 <HAL_SPI_Receive+0x170>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009062:	3304      	adds	r3, #4
 8009064:	6842      	ldr	r2, [r0, #4]
 8009066:	33ff      	adds	r3, #255	@ 0xff
 8009068:	429a      	cmp	r2, r3
 800906a:	d10e      	bne.n	800908a <HAL_SPI_Receive+0x42>
 800906c:	6883      	ldr	r3, [r0, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10b      	bne.n	800908a <HAL_SPI_Receive+0x42>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009072:	3304      	adds	r3, #4
 8009074:	7033      	strb	r3, [r6, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009076:	9b03      	ldr	r3, [sp, #12]
 8009078:	000a      	movs	r2, r1
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	003b      	movs	r3, r7
 800907e:	f7ff fed9 	bl	8008e34 <HAL_SPI_TransmitReceive>
 8009082:	0005      	movs	r5, r0
}
 8009084:	0028      	movs	r0, r5
 8009086:	b007      	add	sp, #28
 8009088:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 800908a:	0023      	movs	r3, r4
 800908c:	335c      	adds	r3, #92	@ 0x5c
 800908e:	781a      	ldrb	r2, [r3, #0]
 8009090:	2a01      	cmp	r2, #1
 8009092:	d100      	bne.n	8009096 <HAL_SPI_Receive+0x4e>
 8009094:	e092      	b.n	80091bc <HAL_SPI_Receive+0x174>
 8009096:	2201      	movs	r2, #1
 8009098:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800909a:	f7fd ffe5 	bl	8007068 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800909e:	9b04      	ldr	r3, [sp, #16]
  tickstart = HAL_GetTick();
 80090a0:	9005      	str	r0, [sp, #20]
  if ((pData == NULL) || (Size == 0U))
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d077      	beq.n	8009196 <HAL_SPI_Receive+0x14e>
 80090a6:	2f00      	cmp	r7, #0
 80090a8:	d075      	beq.n	8009196 <HAL_SPI_Receive+0x14e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80090aa:	2304      	movs	r3, #4
 80090ac:	7033      	strb	r3, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090ae:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80090b0:	9a04      	ldr	r2, [sp, #16]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090b2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80090b4:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80090b6:	1da2      	adds	r2, r4, #6
 80090b8:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  hspi->RxXferCount = Size;
 80090ba:	3202      	adds	r2, #2
 80090bc:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090be:	22e0      	movs	r2, #224	@ 0xe0
 80090c0:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80090c2:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80090c4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80090c6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80090c8:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80090ca:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090cc:	00d2      	lsls	r2, r2, #3
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090ce:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090d0:	4291      	cmp	r1, r2
 80090d2:	d92f      	bls.n	8009134 <HAL_SPI_Receive+0xec>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	483a      	ldr	r0, [pc, #232]	@ (80091c0 <HAL_SPI_Receive+0x178>)
 80090d8:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090da:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090dc:	2280      	movs	r2, #128	@ 0x80
 80090de:	68a0      	ldr	r0, [r4, #8]
 80090e0:	0212      	lsls	r2, r2, #8
 80090e2:	4290      	cmp	r0, r2
 80090e4:	d107      	bne.n	80090f6 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 80090e6:	2040      	movs	r0, #64	@ 0x40
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	4382      	bics	r2, r0
 80090ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	4834      	ldr	r0, [pc, #208]	@ (80091c4 <HAL_SPI_Receive+0x17c>)
 80090f2:	4002      	ands	r2, r0
 80090f4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090f6:	2240      	movs	r2, #64	@ 0x40
 80090f8:	6818      	ldr	r0, [r3, #0]
 80090fa:	4210      	tst	r0, r2
 80090fc:	d102      	bne.n	8009104 <HAL_SPI_Receive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	4302      	orrs	r2, r0
 8009102:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009104:	23e0      	movs	r3, #224	@ 0xe0
 8009106:	0027      	movs	r7, r4
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	3708      	adds	r7, #8
 800910c:	4299      	cmp	r1, r3
 800910e:	d925      	bls.n	800915c <HAL_SPI_Receive+0x114>
    while (hspi->RxXferCount > 0U)
 8009110:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009112:	2b00      	cmp	r3, #0
 8009114:	d025      	beq.n	8009162 <HAL_SPI_Receive+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009116:	2101      	movs	r1, #1
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	689a      	ldr	r2, [r3, #8]
 800911c:	420a      	tst	r2, r1
 800911e:	d03e      	beq.n	800919e <HAL_SPI_Receive+0x156>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009120:	68da      	ldr	r2, [r3, #12]
 8009122:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009124:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009126:	3302      	adds	r3, #2
 8009128:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800912a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800912c:	3b01      	subs	r3, #1
 800912e:	b29b      	uxth	r3, r3
 8009130:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009132:	e7ed      	b.n	8009110 <HAL_SPI_Receive+0xc8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009134:	2280      	movs	r2, #128	@ 0x80
 8009136:	6858      	ldr	r0, [r3, #4]
 8009138:	0152      	lsls	r2, r2, #5
 800913a:	4302      	orrs	r2, r0
 800913c:	e7cd      	b.n	80090da <HAL_SPI_Receive+0x92>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800913e:	2101      	movs	r1, #1
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	420a      	tst	r2, r1
 8009146:	d01a      	beq.n	800917e <HAL_SPI_Receive+0x136>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009148:	7b1b      	ldrb	r3, [r3, #12]
 800914a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800914c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800914e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009150:	185b      	adds	r3, r3, r1
 8009152:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8009154:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009156:	3b01      	subs	r3, #1
 8009158:	b29b      	uxth	r3, r3
 800915a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 800915c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1ed      	bne.n	800913e <HAL_SPI_Receive+0xf6>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009162:	0020      	movs	r0, r4
 8009164:	9a05      	ldr	r2, [sp, #20]
 8009166:	9903      	ldr	r1, [sp, #12]
 8009168:	f7ff fcc8 	bl	8008afc <SPI_EndRxTransaction>
 800916c:	2800      	cmp	r0, #0
 800916e:	d120      	bne.n	80091b2 <HAL_SPI_Receive+0x16a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009170:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10f      	bne.n	8009196 <HAL_SPI_Receive+0x14e>
    hspi->State = HAL_SPI_STATE_READY;
 8009176:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009178:	001d      	movs	r5, r3
    hspi->State = HAL_SPI_STATE_READY;
 800917a:	7032      	strb	r2, [r6, #0]
 800917c:	e00b      	b.n	8009196 <HAL_SPI_Receive+0x14e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800917e:	f7fd ff73 	bl	8007068 <HAL_GetTick>
 8009182:	9b05      	ldr	r3, [sp, #20]
 8009184:	1ac0      	subs	r0, r0, r3
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	4298      	cmp	r0, r3
 800918a:	d3e7      	bcc.n	800915c <HAL_SPI_Receive+0x114>
 800918c:	3301      	adds	r3, #1
 800918e:	d0e5      	beq.n	800915c <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8009190:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8009192:	2503      	movs	r5, #3
          hspi->State = HAL_SPI_STATE_READY;
 8009194:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(hspi);
 8009196:	2300      	movs	r3, #0
 8009198:	345c      	adds	r4, #92	@ 0x5c
 800919a:	7023      	strb	r3, [r4, #0]
  return errorcode;
 800919c:	e772      	b.n	8009084 <HAL_SPI_Receive+0x3c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800919e:	f7fd ff63 	bl	8007068 <HAL_GetTick>
 80091a2:	9b05      	ldr	r3, [sp, #20]
 80091a4:	1ac0      	subs	r0, r0, r3
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	4298      	cmp	r0, r3
 80091aa:	d3b1      	bcc.n	8009110 <HAL_SPI_Receive+0xc8>
 80091ac:	3301      	adds	r3, #1
 80091ae:	d0af      	beq.n	8009110 <HAL_SPI_Receive+0xc8>
 80091b0:	e7ee      	b.n	8009190 <HAL_SPI_Receive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091b2:	2320      	movs	r3, #32
 80091b4:	6623      	str	r3, [r4, #96]	@ 0x60
 80091b6:	e7db      	b.n	8009170 <HAL_SPI_Receive+0x128>
    errorcode = HAL_BUSY;
 80091b8:	2502      	movs	r5, #2
 80091ba:	e7ec      	b.n	8009196 <HAL_SPI_Receive+0x14e>
  __HAL_LOCK(hspi);
 80091bc:	2502      	movs	r5, #2
 80091be:	e761      	b.n	8009084 <HAL_SPI_Receive+0x3c>
 80091c0:	ffffefff 	.word	0xffffefff
 80091c4:	ffffbfff 	.word	0xffffbfff

080091c8 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 80091c8:	4770      	bx	lr
	...

080091cc <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 80091cc:	6803      	ldr	r3, [r0, #0]
{
 80091ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091d0:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80091d2:	6858      	ldr	r0, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80091d4:	6899      	ldr	r1, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80091d6:	2501      	movs	r5, #1
 80091d8:	098a      	lsrs	r2, r1, #6
 80091da:	0016      	movs	r6, r2
{
 80091dc:	b085      	sub	sp, #20
 80091de:	402e      	ands	r6, r5
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80091e0:	422a      	tst	r2, r5
 80091e2:	d108      	bne.n	80091f6 <HAL_SPI_IRQHandler+0x2a>
 80091e4:	4229      	tst	r1, r5
 80091e6:	d006      	beq.n	80091f6 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80091e8:	0645      	lsls	r5, r0, #25
 80091ea:	d504      	bpl.n	80091f6 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 80091ec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    hspi->TxISR(hspi);
 80091ee:	0020      	movs	r0, r4
 80091f0:	4798      	blx	r3
}
 80091f2:	b005      	add	sp, #20
 80091f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80091f6:	078d      	lsls	r5, r1, #30
 80091f8:	d503      	bpl.n	8009202 <HAL_SPI_IRQHandler+0x36>
 80091fa:	0605      	lsls	r5, r0, #24
 80091fc:	d501      	bpl.n	8009202 <HAL_SPI_IRQHandler+0x36>
    hspi->TxISR(hspi);
 80091fe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009200:	e7f5      	b.n	80091ee <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009202:	2780      	movs	r7, #128	@ 0x80
 8009204:	094d      	lsrs	r5, r1, #5
 8009206:	007f      	lsls	r7, r7, #1
 8009208:	4039      	ands	r1, r7
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800920a:	432a      	orrs	r2, r5
 800920c:	3fff      	subs	r7, #255	@ 0xff
 800920e:	403a      	ands	r2, r7
 8009210:	430a      	orrs	r2, r1
 8009212:	d0ee      	beq.n	80091f2 <HAL_SPI_IRQHandler+0x26>
 8009214:	0682      	lsls	r2, r0, #26
 8009216:	d5ec      	bpl.n	80091f2 <HAL_SPI_IRQHandler+0x26>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009218:	2e00      	cmp	r6, #0
 800921a:	d00f      	beq.n	800923c <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800921c:	0022      	movs	r2, r4
 800921e:	325d      	adds	r2, #93	@ 0x5d
 8009220:	7812      	ldrb	r2, [r2, #0]
 8009222:	2a03      	cmp	r2, #3
 8009224:	d050      	beq.n	80092c8 <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009226:	2204      	movs	r2, #4
 8009228:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 800922a:	4332      	orrs	r2, r6
 800922c:	6622      	str	r2, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800922e:	2200      	movs	r2, #0
 8009230:	9200      	str	r2, [sp, #0]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	9200      	str	r2, [sp, #0]
 8009236:	689a      	ldr	r2, [r3, #8]
 8009238:	9200      	str	r2, [sp, #0]
 800923a:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800923c:	2201      	movs	r2, #1
 800923e:	4215      	tst	r5, r2
 8009240:	d00b      	beq.n	800925a <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009242:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8009244:	432a      	orrs	r2, r5
 8009246:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009248:	2200      	movs	r2, #0
 800924a:	2540      	movs	r5, #64	@ 0x40
 800924c:	9202      	str	r2, [sp, #8]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	9202      	str	r2, [sp, #8]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	43aa      	bics	r2, r5
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800925a:	2900      	cmp	r1, #0
 800925c:	d008      	beq.n	8009270 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800925e:	2208      	movs	r2, #8
 8009260:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8009262:	430a      	orrs	r2, r1
 8009264:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009266:	2200      	movs	r2, #0
 8009268:	9203      	str	r2, [sp, #12]
 800926a:	689a      	ldr	r2, [r3, #8]
 800926c:	9203      	str	r2, [sp, #12]
 800926e:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009270:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8009272:	2a00      	cmp	r2, #0
 8009274:	d0bd      	beq.n	80091f2 <HAL_SPI_IRQHandler+0x26>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009276:	21e0      	movs	r1, #224	@ 0xe0
 8009278:	685a      	ldr	r2, [r3, #4]
 800927a:	438a      	bics	r2, r1
 800927c:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800927e:	0022      	movs	r2, r4
 8009280:	39df      	subs	r1, #223	@ 0xdf
 8009282:	325d      	adds	r2, #93	@ 0x5d
 8009284:	7011      	strb	r1, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009286:	3102      	adds	r1, #2
 8009288:	4208      	tst	r0, r1
 800928a:	d025      	beq.n	80092d8 <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800928c:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800928e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009290:	438a      	bics	r2, r1
 8009292:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8009294:	2800      	cmp	r0, #0
 8009296:	d009      	beq.n	80092ac <HAL_SPI_IRQHandler+0xe0>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009298:	4b11      	ldr	r3, [pc, #68]	@ (80092e0 <HAL_SPI_IRQHandler+0x114>)
 800929a:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800929c:	f7fd ffd8 	bl	8007250 <HAL_DMA_Abort_IT>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d003      	beq.n	80092ac <HAL_SPI_IRQHandler+0xe0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092a4:	2340      	movs	r3, #64	@ 0x40
 80092a6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80092a8:	4313      	orrs	r3, r2
 80092aa:	6623      	str	r3, [r4, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80092ac:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d09f      	beq.n	80091f2 <HAL_SPI_IRQHandler+0x26>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80092b2:	4b0b      	ldr	r3, [pc, #44]	@ (80092e0 <HAL_SPI_IRQHandler+0x114>)
 80092b4:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80092b6:	f7fd ffcb 	bl	8007250 <HAL_DMA_Abort_IT>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d099      	beq.n	80091f2 <HAL_SPI_IRQHandler+0x26>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092be:	2340      	movs	r3, #64	@ 0x40
 80092c0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80092c2:	4313      	orrs	r3, r2
 80092c4:	6623      	str	r3, [r4, #96]	@ 0x60
 80092c6:	e794      	b.n	80091f2 <HAL_SPI_IRQHandler+0x26>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092c8:	2200      	movs	r2, #0
 80092ca:	9201      	str	r2, [sp, #4]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	9201      	str	r2, [sp, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	9b01      	ldr	r3, [sp, #4]
        return;
 80092d6:	e78c      	b.n	80091f2 <HAL_SPI_IRQHandler+0x26>
        HAL_SPI_ErrorCallback(hspi);
 80092d8:	0020      	movs	r0, r4
 80092da:	f7ff ff75 	bl	80091c8 <HAL_SPI_ErrorCallback>
 80092de:	e788      	b.n	80091f2 <HAL_SPI_IRQHandler+0x26>
 80092e0:	080092e5 	.word	0x080092e5

080092e4 <SPI_DMAAbortOnError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092e4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	0002      	movs	r2, r0
{
 80092ea:	b510      	push	{r4, lr}
  hspi->RxXferCount = 0U;
 80092ec:	3208      	adds	r2, #8
 80092ee:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80092f0:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80092f2:	f7ff ff69 	bl	80091c8 <HAL_SPI_ErrorCallback>
}
 80092f6:	bd10      	pop	{r4, pc}

080092f8 <HAL_SPI_GetState>:
  return hspi->State;
 80092f8:	305d      	adds	r0, #93	@ 0x5d
 80092fa:	7800      	ldrb	r0, [r0, #0]
 80092fc:	b2c0      	uxtb	r0, r0
}
 80092fe:	4770      	bx	lr

08009300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009300:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009302:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8009304:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009306:	6a02      	ldr	r2, [r0, #32]
 8009308:	43a2      	bics	r2, r4
 800930a:	6202      	str	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800930c:	2273      	movs	r2, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 800930e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009310:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009312:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009314:	680a      	ldr	r2, [r1, #0]
 8009316:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009318:	2202      	movs	r2, #2
 800931a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800931c:	688a      	ldr	r2, [r1, #8]
 800931e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009320:	4a0e      	ldr	r2, [pc, #56]	@ (800935c <TIM_OC1_SetConfig+0x5c>)
 8009322:	4290      	cmp	r0, r2
 8009324:	d008      	beq.n	8009338 <TIM_OC1_SetConfig+0x38>
 8009326:	4a0e      	ldr	r2, [pc, #56]	@ (8009360 <TIM_OC1_SetConfig+0x60>)
 8009328:	4290      	cmp	r0, r2
 800932a:	d005      	beq.n	8009338 <TIM_OC1_SetConfig+0x38>
 800932c:	4a0d      	ldr	r2, [pc, #52]	@ (8009364 <TIM_OC1_SetConfig+0x64>)
 800932e:	4290      	cmp	r0, r2
 8009330:	d002      	beq.n	8009338 <TIM_OC1_SetConfig+0x38>
 8009332:	4a0d      	ldr	r2, [pc, #52]	@ (8009368 <TIM_OC1_SetConfig+0x68>)
 8009334:	4290      	cmp	r0, r2
 8009336:	d10b      	bne.n	8009350 <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009338:	2208      	movs	r2, #8
 800933a:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800933c:	68ca      	ldr	r2, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800933e:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8009340:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8009342:	2204      	movs	r2, #4
 8009344:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009346:	4a09      	ldr	r2, [pc, #36]	@ (800936c <TIM_OC1_SetConfig+0x6c>)
 8009348:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800934a:	694c      	ldr	r4, [r1, #20]
 800934c:	4334      	orrs	r4, r6
 800934e:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009350:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009352:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009354:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8009356:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009358:	6203      	str	r3, [r0, #32]
}
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	40012c00 	.word	0x40012c00
 8009360:	40014000 	.word	0x40014000
 8009364:	40014400 	.word	0x40014400
 8009368:	40014800 	.word	0x40014800
 800936c:	fffffcff 	.word	0xfffffcff

08009370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009370:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009372:	4a18      	ldr	r2, [pc, #96]	@ (80093d4 <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 8009374:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009376:	6a03      	ldr	r3, [r0, #32]
 8009378:	4013      	ands	r3, r2
 800937a:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800937c:	2373      	movs	r3, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 800937e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8009380:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009382:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009384:	680b      	ldr	r3, [r1, #0]
 8009386:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009388:	4b13      	ldr	r3, [pc, #76]	@ (80093d8 <TIM_OC3_SetConfig+0x68>)
 800938a:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800938c:	688b      	ldr	r3, [r1, #8]
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009392:	4d12      	ldr	r5, [pc, #72]	@ (80093dc <TIM_OC3_SetConfig+0x6c>)
 8009394:	42a8      	cmp	r0, r5
 8009396:	d10e      	bne.n	80093b6 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009398:	4d11      	ldr	r5, [pc, #68]	@ (80093e0 <TIM_OC3_SetConfig+0x70>)
 800939a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800939c:	68cb      	ldr	r3, [r1, #12]
 800939e:	021b      	lsls	r3, r3, #8
 80093a0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093a2:	4d10      	ldr	r5, [pc, #64]	@ (80093e4 <TIM_OC3_SetConfig+0x74>)
 80093a4:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093a6:	4d10      	ldr	r5, [pc, #64]	@ (80093e8 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093a8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093aa:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093ac:	694a      	ldr	r2, [r1, #20]
 80093ae:	4332      	orrs	r2, r6
 80093b0:	0112      	lsls	r2, r2, #4
 80093b2:	432a      	orrs	r2, r5
 80093b4:	e008      	b.n	80093c8 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093b6:	4d0d      	ldr	r5, [pc, #52]	@ (80093ec <TIM_OC3_SetConfig+0x7c>)
 80093b8:	42a8      	cmp	r0, r5
 80093ba:	d0f4      	beq.n	80093a6 <TIM_OC3_SetConfig+0x36>
 80093bc:	4d0c      	ldr	r5, [pc, #48]	@ (80093f0 <TIM_OC3_SetConfig+0x80>)
 80093be:	42a8      	cmp	r0, r5
 80093c0:	d0f1      	beq.n	80093a6 <TIM_OC3_SetConfig+0x36>
 80093c2:	4d0c      	ldr	r5, [pc, #48]	@ (80093f4 <TIM_OC3_SetConfig+0x84>)
 80093c4:	42a8      	cmp	r0, r5
 80093c6:	d0ee      	beq.n	80093a6 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093c8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093ca:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80093cc:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80093ce:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093d0:	6203      	str	r3, [r0, #32]
}
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	fffffeff 	.word	0xfffffeff
 80093d8:	fffffdff 	.word	0xfffffdff
 80093dc:	40012c00 	.word	0x40012c00
 80093e0:	fffff7ff 	.word	0xfffff7ff
 80093e4:	fffffbff 	.word	0xfffffbff
 80093e8:	ffffcfff 	.word	0xffffcfff
 80093ec:	40014000 	.word	0x40014000
 80093f0:	40014400 	.word	0x40014400
 80093f4:	40014800 	.word	0x40014800

080093f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093f8:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093fa:	4a14      	ldr	r2, [pc, #80]	@ (800944c <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 80093fc:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009400:	4d13      	ldr	r5, [pc, #76]	@ (8009450 <TIM_OC4_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009402:	4013      	ands	r3, r2
 8009404:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009406:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8009408:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800940a:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800940c:	680d      	ldr	r5, [r1, #0]
 800940e:	022d      	lsls	r5, r5, #8
 8009410:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009412:	4a10      	ldr	r2, [pc, #64]	@ (8009454 <TIM_OC4_SetConfig+0x5c>)
 8009414:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009416:	688a      	ldr	r2, [r1, #8]
 8009418:	0312      	lsls	r2, r2, #12
 800941a:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800941c:	4c0e      	ldr	r4, [pc, #56]	@ (8009458 <TIM_OC4_SetConfig+0x60>)
 800941e:	42a0      	cmp	r0, r4
 8009420:	d008      	beq.n	8009434 <TIM_OC4_SetConfig+0x3c>
 8009422:	4c0e      	ldr	r4, [pc, #56]	@ (800945c <TIM_OC4_SetConfig+0x64>)
 8009424:	42a0      	cmp	r0, r4
 8009426:	d005      	beq.n	8009434 <TIM_OC4_SetConfig+0x3c>
 8009428:	4c0d      	ldr	r4, [pc, #52]	@ (8009460 <TIM_OC4_SetConfig+0x68>)
 800942a:	42a0      	cmp	r0, r4
 800942c:	d002      	beq.n	8009434 <TIM_OC4_SetConfig+0x3c>
 800942e:	4c0d      	ldr	r4, [pc, #52]	@ (8009464 <TIM_OC4_SetConfig+0x6c>)
 8009430:	42a0      	cmp	r0, r4
 8009432:	d104      	bne.n	800943e <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009434:	4c0c      	ldr	r4, [pc, #48]	@ (8009468 <TIM_OC4_SetConfig+0x70>)
 8009436:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009438:	694b      	ldr	r3, [r1, #20]
 800943a:	019b      	lsls	r3, r3, #6
 800943c:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800943e:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009440:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009442:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8009444:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009446:	6202      	str	r2, [r0, #32]
}
 8009448:	bd30      	pop	{r4, r5, pc}
 800944a:	46c0      	nop			@ (mov r8, r8)
 800944c:	ffffefff 	.word	0xffffefff
 8009450:	ffff8cff 	.word	0xffff8cff
 8009454:	ffffdfff 	.word	0xffffdfff
 8009458:	40012c00 	.word	0x40012c00
 800945c:	40014000 	.word	0x40014000
 8009460:	40014400 	.word	0x40014400
 8009464:	40014800 	.word	0x40014800
 8009468:	ffffbfff 	.word	0xffffbfff

0800946c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800946c:	0001      	movs	r1, r0
{
 800946e:	0003      	movs	r3, r0
    return HAL_ERROR;
 8009470:	2001      	movs	r0, #1
{
 8009472:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8009474:	313d      	adds	r1, #61	@ 0x3d
 8009476:	780c      	ldrb	r4, [r1, #0]
 8009478:	b2e2      	uxtb	r2, r4
 800947a:	4284      	cmp	r4, r0
 800947c:	d11c      	bne.n	80094b8 <HAL_TIM_Base_Start_IT+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 800947e:	1800      	adds	r0, r0, r0
 8009480:	7008      	strb	r0, [r1, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68d9      	ldr	r1, [r3, #12]
 8009486:	4311      	orrs	r1, r2
 8009488:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800948a:	490d      	ldr	r1, [pc, #52]	@ (80094c0 <HAL_TIM_Base_Start_IT+0x54>)
 800948c:	428b      	cmp	r3, r1
 800948e:	d009      	beq.n	80094a4 <HAL_TIM_Base_Start_IT+0x38>
 8009490:	2180      	movs	r1, #128	@ 0x80
 8009492:	05c9      	lsls	r1, r1, #23
 8009494:	428b      	cmp	r3, r1
 8009496:	d005      	beq.n	80094a4 <HAL_TIM_Base_Start_IT+0x38>
 8009498:	490a      	ldr	r1, [pc, #40]	@ (80094c4 <HAL_TIM_Base_Start_IT+0x58>)
 800949a:	428b      	cmp	r3, r1
 800949c:	d002      	beq.n	80094a4 <HAL_TIM_Base_Start_IT+0x38>
 800949e:	490a      	ldr	r1, [pc, #40]	@ (80094c8 <HAL_TIM_Base_Start_IT+0x5c>)
 80094a0:	428b      	cmp	r3, r1
 80094a2:	d10a      	bne.n	80094ba <HAL_TIM_Base_Start_IT+0x4e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094a4:	2107      	movs	r1, #7
 80094a6:	689a      	ldr	r2, [r3, #8]
 80094a8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094aa:	2a06      	cmp	r2, #6
 80094ac:	d003      	beq.n	80094b6 <HAL_TIM_Base_Start_IT+0x4a>
      __HAL_TIM_ENABLE(htim);
 80094ae:	2201      	movs	r2, #1
 80094b0:	6819      	ldr	r1, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80094b6:	2000      	movs	r0, #0
}
 80094b8:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 80094ba:	6819      	ldr	r1, [r3, #0]
 80094bc:	e7f9      	b.n	80094b2 <HAL_TIM_Base_Start_IT+0x46>
 80094be:	46c0      	nop			@ (mov r8, r8)
 80094c0:	40012c00 	.word	0x40012c00
 80094c4:	40000400 	.word	0x40000400
 80094c8:	40014000 	.word	0x40014000

080094cc <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80094cc:	4770      	bx	lr

080094ce <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80094ce:	4770      	bx	lr

080094d0 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80094d0:	4770      	bx	lr

080094d2 <TIM_DMADelayPulseCplt>:
{
 80094d2:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094d4:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80094d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80094d8:	4282      	cmp	r2, r0
 80094da:	d10d      	bne.n	80094f8 <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094dc:	2301      	movs	r3, #1
 80094de:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80094e0:	6992      	ldr	r2, [r2, #24]
 80094e2:	2a00      	cmp	r2, #0
 80094e4:	d102      	bne.n	80094ec <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094e6:	0022      	movs	r2, r4
 80094e8:	323e      	adds	r2, #62	@ 0x3e
 80094ea:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ec:	0020      	movs	r0, r4
 80094ee:	f7ff ffef 	bl	80094d0 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094f2:	2300      	movs	r3, #0
 80094f4:	7723      	strb	r3, [r4, #28]
}
 80094f6:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80094f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80094fa:	4283      	cmp	r3, r0
 80094fc:	d109      	bne.n	8009512 <TIM_DMADelayPulseCplt+0x40>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094fe:	2202      	movs	r2, #2
 8009500:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1f1      	bne.n	80094ec <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009508:	0023      	movs	r3, r4
 800950a:	3a01      	subs	r2, #1
 800950c:	333f      	adds	r3, #63	@ 0x3f
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800950e:	701a      	strb	r2, [r3, #0]
 8009510:	e7ec      	b.n	80094ec <TIM_DMADelayPulseCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009512:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009514:	4283      	cmp	r3, r0
 8009516:	d108      	bne.n	800952a <TIM_DMADelayPulseCplt+0x58>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009518:	2204      	movs	r2, #4
 800951a:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e4      	bne.n	80094ec <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009522:	0023      	movs	r3, r4
 8009524:	3a03      	subs	r2, #3
 8009526:	3340      	adds	r3, #64	@ 0x40
 8009528:	e7f1      	b.n	800950e <TIM_DMADelayPulseCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800952a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800952c:	4283      	cmp	r3, r0
 800952e:	d1dd      	bne.n	80094ec <TIM_DMADelayPulseCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009530:	2208      	movs	r2, #8
 8009532:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1d8      	bne.n	80094ec <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800953a:	0023      	movs	r3, r4
 800953c:	3a07      	subs	r2, #7
 800953e:	3341      	adds	r3, #65	@ 0x41
 8009540:	e7e5      	b.n	800950e <TIM_DMADelayPulseCplt+0x3c>

08009542 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8009542:	4770      	bx	lr

08009544 <TIM_DMADelayPulseHalfCplt>:
{
 8009544:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009546:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009548:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800954a:	4283      	cmp	r3, r0
 800954c:	d107      	bne.n	800955e <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800954e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009550:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009552:	0020      	movs	r0, r4
 8009554:	f7ff fff5 	bl	8009542 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009558:	2300      	movs	r3, #0
 800955a:	7723      	strb	r3, [r4, #28]
}
 800955c:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800955e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009560:	4283      	cmp	r3, r0
 8009562:	d101      	bne.n	8009568 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009564:	2302      	movs	r3, #2
 8009566:	e7f3      	b.n	8009550 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009568:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800956a:	4283      	cmp	r3, r0
 800956c:	d101      	bne.n	8009572 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800956e:	2304      	movs	r3, #4
 8009570:	e7ee      	b.n	8009550 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009572:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009574:	4283      	cmp	r3, r0
 8009576:	d1ec      	bne.n	8009552 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009578:	2308      	movs	r3, #8
 800957a:	e7e9      	b.n	8009550 <TIM_DMADelayPulseHalfCplt+0xc>

0800957c <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800957c:	4770      	bx	lr

0800957e <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800957e:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 8009580:	6803      	ldr	r3, [r0, #0]
{
 8009582:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8009584:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009586:	691e      	ldr	r6, [r3, #16]
{
 8009588:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800958a:	4216      	tst	r6, r2
 800958c:	d00d      	beq.n	80095aa <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800958e:	4215      	tst	r5, r2
 8009590:	d00b      	beq.n	80095aa <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009592:	3a05      	subs	r2, #5
 8009594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009596:	3204      	adds	r2, #4
 8009598:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	079b      	lsls	r3, r3, #30
 800959e:	d100      	bne.n	80095a2 <HAL_TIM_IRQHandler+0x24>
 80095a0:	e071      	b.n	8009686 <HAL_TIM_IRQHandler+0x108>
          HAL_TIM_IC_CaptureCallback(htim);
 80095a2:	f7ff ff94 	bl	80094ce <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095a6:	2300      	movs	r3, #0
 80095a8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095aa:	2304      	movs	r3, #4
 80095ac:	421e      	tst	r6, r3
 80095ae:	d011      	beq.n	80095d4 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095b0:	421d      	tst	r5, r3
 80095b2:	d00f      	beq.n	80095d4 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095b4:	2205      	movs	r2, #5
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	4252      	negs	r2, r2
 80095ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095bc:	3207      	adds	r2, #7
 80095be:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095c0:	699a      	ldr	r2, [r3, #24]
 80095c2:	23c0      	movs	r3, #192	@ 0xc0
 80095c4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80095c6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095c8:	421a      	tst	r2, r3
 80095ca:	d062      	beq.n	8009692 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 80095cc:	f7ff ff7f 	bl	80094ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d0:	2300      	movs	r3, #0
 80095d2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80095d4:	2308      	movs	r3, #8
 80095d6:	421e      	tst	r6, r3
 80095d8:	d00f      	beq.n	80095fa <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80095da:	421d      	tst	r5, r3
 80095dc:	d00d      	beq.n	80095fa <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80095de:	2209      	movs	r2, #9
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	4252      	negs	r2, r2
 80095e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095e6:	320d      	adds	r2, #13
 80095e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095ea:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80095ec:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095ee:	079b      	lsls	r3, r3, #30
 80095f0:	d055      	beq.n	800969e <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 80095f2:	f7ff ff6c 	bl	80094ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095f6:	2300      	movs	r3, #0
 80095f8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80095fa:	2310      	movs	r3, #16
 80095fc:	421e      	tst	r6, r3
 80095fe:	d011      	beq.n	8009624 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009600:	421d      	tst	r5, r3
 8009602:	d00f      	beq.n	8009624 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009604:	2211      	movs	r2, #17
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	4252      	negs	r2, r2
 800960a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800960c:	3219      	adds	r2, #25
 800960e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009610:	69da      	ldr	r2, [r3, #28]
 8009612:	23c0      	movs	r3, #192	@ 0xc0
 8009614:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8009616:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009618:	421a      	tst	r2, r3
 800961a:	d046      	beq.n	80096aa <HAL_TIM_IRQHandler+0x12c>
        HAL_TIM_IC_CaptureCallback(htim);
 800961c:	f7ff ff57 	bl	80094ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009620:	2300      	movs	r3, #0
 8009622:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009624:	2301      	movs	r3, #1
 8009626:	421e      	tst	r6, r3
 8009628:	d008      	beq.n	800963c <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800962a:	421d      	tst	r5, r3
 800962c:	d006      	beq.n	800963c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800962e:	2202      	movs	r2, #2
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8009634:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009636:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009638:	f7f9 f954 	bl	80028e4 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800963c:	2380      	movs	r3, #128	@ 0x80
 800963e:	421e      	tst	r6, r3
 8009640:	d008      	beq.n	8009654 <HAL_TIM_IRQHandler+0xd6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009642:	421d      	tst	r5, r3
 8009644:	d006      	beq.n	8009654 <HAL_TIM_IRQHandler+0xd6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009646:	2281      	movs	r2, #129	@ 0x81
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	4252      	negs	r2, r2
      HAL_TIMEx_BreakCallback(htim);
 800964c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800964e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009650:	f000 fae5 	bl	8009c1e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009654:	2340      	movs	r3, #64	@ 0x40
 8009656:	421e      	tst	r6, r3
 8009658:	d008      	beq.n	800966c <HAL_TIM_IRQHandler+0xee>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800965a:	421d      	tst	r5, r3
 800965c:	d006      	beq.n	800966c <HAL_TIM_IRQHandler+0xee>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800965e:	2241      	movs	r2, #65	@ 0x41
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8009664:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009666:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009668:	f7ff ff88 	bl	800957c <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800966c:	2320      	movs	r3, #32
 800966e:	421e      	tst	r6, r3
 8009670:	d008      	beq.n	8009684 <HAL_TIM_IRQHandler+0x106>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009672:	421d      	tst	r5, r3
 8009674:	d006      	beq.n	8009684 <HAL_TIM_IRQHandler+0x106>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009676:	2221      	movs	r2, #33	@ 0x21
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 800967c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800967e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009680:	f000 facc 	bl	8009c1c <HAL_TIMEx_CommutCallback>
}
 8009684:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009686:	f7ff ff21 	bl	80094cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800968a:	0020      	movs	r0, r4
 800968c:	f7ff ff20 	bl	80094d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8009690:	e789      	b.n	80095a6 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009692:	f7ff ff1b 	bl	80094cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009696:	0020      	movs	r0, r4
 8009698:	f7ff ff1a 	bl	80094d0 <HAL_TIM_PWM_PulseFinishedCallback>
 800969c:	e798      	b.n	80095d0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800969e:	f7ff ff15 	bl	80094cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a2:	0020      	movs	r0, r4
 80096a4:	f7ff ff14 	bl	80094d0 <HAL_TIM_PWM_PulseFinishedCallback>
 80096a8:	e7a5      	b.n	80095f6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096aa:	f7ff ff0f 	bl	80094cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ae:	0020      	movs	r0, r4
 80096b0:	f7ff ff0e 	bl	80094d0 <HAL_TIM_PWM_PulseFinishedCallback>
 80096b4:	e7b4      	b.n	8009620 <HAL_TIM_IRQHandler+0xa2>

080096b6 <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 80096b6:	4770      	bx	lr

080096b8 <TIM_DMAError>:
{
 80096b8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096ba:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80096bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80096be:	4283      	cmp	r3, r0
 80096c0:	d105      	bne.n	80096ce <TIM_DMAError+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096c2:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096c4:	0022      	movs	r2, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096c6:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096c8:	323e      	adds	r2, #62	@ 0x3e
    htim->State = HAL_TIM_STATE_READY;
 80096ca:	7013      	strb	r3, [r2, #0]
 80096cc:	e008      	b.n	80096e0 <TIM_DMAError+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80096ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80096d0:	4283      	cmp	r3, r0
 80096d2:	d10b      	bne.n	80096ec <TIM_DMAError+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096d4:	2302      	movs	r3, #2
 80096d6:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096d8:	0023      	movs	r3, r4
 80096da:	2201      	movs	r2, #1
 80096dc:	333f      	adds	r3, #63	@ 0x3f
 80096de:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 80096e0:	0020      	movs	r0, r4
 80096e2:	f7ff ffe8 	bl	80096b6 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096e6:	2300      	movs	r3, #0
 80096e8:	7723      	strb	r3, [r4, #28]
}
 80096ea:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80096ec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80096ee:	2301      	movs	r3, #1
 80096f0:	4282      	cmp	r2, r0
 80096f2:	d104      	bne.n	80096fe <TIM_DMAError+0x46>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096f4:	2204      	movs	r2, #4
 80096f6:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80096f8:	0022      	movs	r2, r4
 80096fa:	3240      	adds	r2, #64	@ 0x40
 80096fc:	e7e5      	b.n	80096ca <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80096fe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009700:	4282      	cmp	r2, r0
 8009702:	d104      	bne.n	800970e <TIM_DMAError+0x56>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009704:	2208      	movs	r2, #8
 8009706:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009708:	0022      	movs	r2, r4
 800970a:	3241      	adds	r2, #65	@ 0x41
 800970c:	e7dd      	b.n	80096ca <TIM_DMAError+0x12>
    htim->State = HAL_TIM_STATE_READY;
 800970e:	0022      	movs	r2, r4
 8009710:	323d      	adds	r2, #61	@ 0x3d
 8009712:	e7da      	b.n	80096ca <TIM_DMAError+0x12>

08009714 <TIM_Base_SetConfig>:
{
 8009714:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009716:	4c1f      	ldr	r4, [pc, #124]	@ (8009794 <TIM_Base_SetConfig+0x80>)
  tmpcr1 = TIMx->CR1;
 8009718:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800971a:	42a0      	cmp	r0, r4
 800971c:	d006      	beq.n	800972c <TIM_Base_SetConfig+0x18>
 800971e:	2280      	movs	r2, #128	@ 0x80
 8009720:	05d2      	lsls	r2, r2, #23
 8009722:	4290      	cmp	r0, r2
 8009724:	d002      	beq.n	800972c <TIM_Base_SetConfig+0x18>
 8009726:	4a1c      	ldr	r2, [pc, #112]	@ (8009798 <TIM_Base_SetConfig+0x84>)
 8009728:	4290      	cmp	r0, r2
 800972a:	d108      	bne.n	800973e <TIM_Base_SetConfig+0x2a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800972c:	2270      	movs	r2, #112	@ 0x70
 800972e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8009730:	684a      	ldr	r2, [r1, #4]
 8009732:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009734:	4a19      	ldr	r2, [pc, #100]	@ (800979c <TIM_Base_SetConfig+0x88>)
 8009736:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009738:	68cb      	ldr	r3, [r1, #12]
 800973a:	4313      	orrs	r3, r2
 800973c:	e00b      	b.n	8009756 <TIM_Base_SetConfig+0x42>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800973e:	4a18      	ldr	r2, [pc, #96]	@ (80097a0 <TIM_Base_SetConfig+0x8c>)
 8009740:	4290      	cmp	r0, r2
 8009742:	d0f7      	beq.n	8009734 <TIM_Base_SetConfig+0x20>
 8009744:	4a17      	ldr	r2, [pc, #92]	@ (80097a4 <TIM_Base_SetConfig+0x90>)
 8009746:	4290      	cmp	r0, r2
 8009748:	d0f4      	beq.n	8009734 <TIM_Base_SetConfig+0x20>
 800974a:	4a17      	ldr	r2, [pc, #92]	@ (80097a8 <TIM_Base_SetConfig+0x94>)
 800974c:	4290      	cmp	r0, r2
 800974e:	d0f1      	beq.n	8009734 <TIM_Base_SetConfig+0x20>
 8009750:	4a16      	ldr	r2, [pc, #88]	@ (80097ac <TIM_Base_SetConfig+0x98>)
 8009752:	4290      	cmp	r0, r2
 8009754:	d0ee      	beq.n	8009734 <TIM_Base_SetConfig+0x20>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009756:	2280      	movs	r2, #128	@ 0x80
 8009758:	4393      	bics	r3, r2
 800975a:	694a      	ldr	r2, [r1, #20]
 800975c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800975e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009760:	688b      	ldr	r3, [r1, #8]
 8009762:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009764:	680b      	ldr	r3, [r1, #0]
 8009766:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009768:	42a0      	cmp	r0, r4
 800976a:	d008      	beq.n	800977e <TIM_Base_SetConfig+0x6a>
 800976c:	4b0d      	ldr	r3, [pc, #52]	@ (80097a4 <TIM_Base_SetConfig+0x90>)
 800976e:	4298      	cmp	r0, r3
 8009770:	d005      	beq.n	800977e <TIM_Base_SetConfig+0x6a>
 8009772:	4b0d      	ldr	r3, [pc, #52]	@ (80097a8 <TIM_Base_SetConfig+0x94>)
 8009774:	4298      	cmp	r0, r3
 8009776:	d002      	beq.n	800977e <TIM_Base_SetConfig+0x6a>
 8009778:	4b0c      	ldr	r3, [pc, #48]	@ (80097ac <TIM_Base_SetConfig+0x98>)
 800977a:	4298      	cmp	r0, r3
 800977c:	d101      	bne.n	8009782 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 800977e:	690b      	ldr	r3, [r1, #16]
 8009780:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009782:	2201      	movs	r2, #1
 8009784:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009786:	6903      	ldr	r3, [r0, #16]
 8009788:	4213      	tst	r3, r2
 800978a:	d002      	beq.n	8009792 <TIM_Base_SetConfig+0x7e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800978c:	6903      	ldr	r3, [r0, #16]
 800978e:	4393      	bics	r3, r2
 8009790:	6103      	str	r3, [r0, #16]
}
 8009792:	bd10      	pop	{r4, pc}
 8009794:	40012c00 	.word	0x40012c00
 8009798:	40000400 	.word	0x40000400
 800979c:	fffffcff 	.word	0xfffffcff
 80097a0:	40002000 	.word	0x40002000
 80097a4:	40014000 	.word	0x40014000
 80097a8:	40014400 	.word	0x40014400
 80097ac:	40014800 	.word	0x40014800

080097b0 <HAL_TIM_Base_Init>:
{
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80097b4:	2001      	movs	r0, #1
  if (htim == NULL)
 80097b6:	2c00      	cmp	r4, #0
 80097b8:	d021      	beq.n	80097fe <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80097ba:	0025      	movs	r5, r4
 80097bc:	353d      	adds	r5, #61	@ 0x3d
 80097be:	782b      	ldrb	r3, [r5, #0]
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d105      	bne.n	80097d2 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80097c6:	0023      	movs	r3, r4
 80097c8:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80097ca:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80097cc:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80097ce:	f7fa f937 	bl	8003a40 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80097d2:	2302      	movs	r3, #2
 80097d4:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097d6:	6820      	ldr	r0, [r4, #0]
 80097d8:	1d21      	adds	r1, r4, #4
 80097da:	f7ff ff9b 	bl	8009714 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097de:	0022      	movs	r2, r4
 80097e0:	2301      	movs	r3, #1
  return HAL_OK;
 80097e2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097e4:	3246      	adds	r2, #70	@ 0x46
 80097e6:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097e8:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ea:	3a08      	subs	r2, #8
 80097ec:	7013      	strb	r3, [r2, #0]
 80097ee:	7053      	strb	r3, [r2, #1]
 80097f0:	7093      	strb	r3, [r2, #2]
 80097f2:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f4:	7113      	strb	r3, [r2, #4]
 80097f6:	7153      	strb	r3, [r2, #5]
 80097f8:	7193      	strb	r3, [r2, #6]
 80097fa:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80097fc:	702b      	strb	r3, [r5, #0]
}
 80097fe:	bd70      	pop	{r4, r5, r6, pc}

08009800 <HAL_TIM_PWM_Init>:
{
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	0004      	movs	r4, r0
    return HAL_ERROR;
 8009804:	2001      	movs	r0, #1
  if (htim == NULL)
 8009806:	2c00      	cmp	r4, #0
 8009808:	d021      	beq.n	800984e <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800980a:	0025      	movs	r5, r4
 800980c:	353d      	adds	r5, #61	@ 0x3d
 800980e:	782b      	ldrb	r3, [r5, #0]
 8009810:	b2da      	uxtb	r2, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d105      	bne.n	8009822 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8009816:	0023      	movs	r3, r4
 8009818:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800981a:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800981c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 800981e:	f7fa f8db 	bl	80039d8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009822:	2302      	movs	r3, #2
 8009824:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009826:	6820      	ldr	r0, [r4, #0]
 8009828:	1d21      	adds	r1, r4, #4
 800982a:	f7ff ff73 	bl	8009714 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800982e:	0022      	movs	r2, r4
 8009830:	2301      	movs	r3, #1
  return HAL_OK;
 8009832:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009834:	3246      	adds	r2, #70	@ 0x46
 8009836:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009838:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800983a:	3a08      	subs	r2, #8
 800983c:	7013      	strb	r3, [r2, #0]
 800983e:	7053      	strb	r3, [r2, #1]
 8009840:	7093      	strb	r3, [r2, #2]
 8009842:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009844:	7113      	strb	r3, [r2, #4]
 8009846:	7153      	strb	r3, [r2, #5]
 8009848:	7193      	strb	r3, [r2, #6]
 800984a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800984c:	702b      	strb	r3, [r5, #0]
}
 800984e:	bd70      	pop	{r4, r5, r6, pc}

08009850 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009850:	2210      	movs	r2, #16
{
 8009852:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8009854:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009856:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009858:	4c17      	ldr	r4, [pc, #92]	@ (80098b8 <TIM_OC2_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800985a:	4393      	bics	r3, r2
 800985c:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800985e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009860:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009862:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009864:	680c      	ldr	r4, [r1, #0]
 8009866:	0224      	lsls	r4, r4, #8
 8009868:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 800986a:	2320      	movs	r3, #32
 800986c:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800986e:	688b      	ldr	r3, [r1, #8]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009874:	4d11      	ldr	r5, [pc, #68]	@ (80098bc <TIM_OC2_SetConfig+0x6c>)
 8009876:	42a8      	cmp	r0, r5
 8009878:	d10f      	bne.n	800989a <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800987a:	2580      	movs	r5, #128	@ 0x80
 800987c:	43ab      	bics	r3, r5
 800987e:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009880:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8009882:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009884:	011b      	lsls	r3, r3, #4
 8009886:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8009888:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800988a:	4d0d      	ldr	r5, [pc, #52]	@ (80098c0 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800988c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800988e:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009890:	694a      	ldr	r2, [r1, #20]
 8009892:	4332      	orrs	r2, r6
 8009894:	0092      	lsls	r2, r2, #2
 8009896:	432a      	orrs	r2, r5
 8009898:	e008      	b.n	80098ac <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800989a:	4d0a      	ldr	r5, [pc, #40]	@ (80098c4 <TIM_OC2_SetConfig+0x74>)
 800989c:	42a8      	cmp	r0, r5
 800989e:	d0f4      	beq.n	800988a <TIM_OC2_SetConfig+0x3a>
 80098a0:	4d09      	ldr	r5, [pc, #36]	@ (80098c8 <TIM_OC2_SetConfig+0x78>)
 80098a2:	42a8      	cmp	r0, r5
 80098a4:	d0f1      	beq.n	800988a <TIM_OC2_SetConfig+0x3a>
 80098a6:	4d09      	ldr	r5, [pc, #36]	@ (80098cc <TIM_OC2_SetConfig+0x7c>)
 80098a8:	42a8      	cmp	r0, r5
 80098aa:	d0ee      	beq.n	800988a <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80098ac:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80098ae:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80098b0:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80098b2:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80098b4:	6203      	str	r3, [r0, #32]
}
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	ffff8cff 	.word	0xffff8cff
 80098bc:	40012c00 	.word	0x40012c00
 80098c0:	fffff3ff 	.word	0xfffff3ff
 80098c4:	40014000 	.word	0x40014000
 80098c8:	40014400 	.word	0x40014400
 80098cc:	40014800 	.word	0x40014800

080098d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80098d2:	0006      	movs	r6, r0
 80098d4:	363c      	adds	r6, #60	@ 0x3c
{
 80098d6:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 80098d8:	7832      	ldrb	r2, [r6, #0]
{
 80098da:	0003      	movs	r3, r0
 80098dc:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 80098de:	2002      	movs	r0, #2
 80098e0:	2a01      	cmp	r2, #1
 80098e2:	d00a      	beq.n	80098fa <HAL_TIM_PWM_ConfigChannel+0x2a>
 80098e4:	3801      	subs	r0, #1
 80098e6:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 80098e8:	2d08      	cmp	r5, #8
 80098ea:	d03f      	beq.n	800996c <HAL_TIM_PWM_ConfigChannel+0x9c>
 80098ec:	d806      	bhi.n	80098fc <HAL_TIM_PWM_ConfigChannel+0x2c>
 80098ee:	2d00      	cmp	r5, #0
 80098f0:	d019      	beq.n	8009926 <HAL_TIM_PWM_ConfigChannel+0x56>
 80098f2:	2d04      	cmp	r5, #4
 80098f4:	d029      	beq.n	800994a <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 80098f6:	2300      	movs	r3, #0
 80098f8:	7033      	strb	r3, [r6, #0]
}
 80098fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80098fc:	2d0c      	cmp	r5, #12
 80098fe:	d1fa      	bne.n	80098f6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009900:	681d      	ldr	r5, [r3, #0]
 8009902:	0028      	movs	r0, r5
 8009904:	f7ff fd78 	bl	80093f8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009908:	2380      	movs	r3, #128	@ 0x80
 800990a:	69ea      	ldr	r2, [r5, #28]
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	4313      	orrs	r3, r2
 8009910:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009912:	69eb      	ldr	r3, [r5, #28]
 8009914:	4a1d      	ldr	r2, [pc, #116]	@ (800998c <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8009916:	4013      	ands	r3, r2
 8009918:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	69ea      	ldr	r2, [r5, #28]
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	4313      	orrs	r3, r2
 8009922:	61eb      	str	r3, [r5, #28]
      break;
 8009924:	e00f      	b.n	8009946 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009926:	681d      	ldr	r5, [r3, #0]
 8009928:	0028      	movs	r0, r5
 800992a:	f7ff fce9 	bl	8009300 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800992e:	2308      	movs	r3, #8
 8009930:	69aa      	ldr	r2, [r5, #24]
 8009932:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009934:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009936:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009938:	69ab      	ldr	r3, [r5, #24]
 800993a:	4393      	bics	r3, r2
 800993c:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800993e:	69ab      	ldr	r3, [r5, #24]
 8009940:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009942:	4313      	orrs	r3, r2
 8009944:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009946:	2000      	movs	r0, #0
 8009948:	e7d5      	b.n	80098f6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800994a:	681d      	ldr	r5, [r3, #0]
 800994c:	0028      	movs	r0, r5
 800994e:	f7ff ff7f 	bl	8009850 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009952:	2380      	movs	r3, #128	@ 0x80
 8009954:	69aa      	ldr	r2, [r5, #24]
 8009956:	011b      	lsls	r3, r3, #4
 8009958:	4313      	orrs	r3, r2
 800995a:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800995c:	69ab      	ldr	r3, [r5, #24]
 800995e:	4a0b      	ldr	r2, [pc, #44]	@ (800998c <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8009960:	4013      	ands	r3, r2
 8009962:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	69aa      	ldr	r2, [r5, #24]
 8009968:	021b      	lsls	r3, r3, #8
 800996a:	e7ea      	b.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800996c:	681f      	ldr	r7, [r3, #0]
 800996e:	0038      	movs	r0, r7
 8009970:	f7ff fcfe 	bl	8009370 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009974:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	431d      	orrs	r5, r3
 800997a:	61fd      	str	r5, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	4393      	bics	r3, r2
 8009980:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	6922      	ldr	r2, [r4, #16]
 8009986:	4313      	orrs	r3, r2
 8009988:	61fb      	str	r3, [r7, #28]
      break;
 800998a:	e7dc      	b.n	8009946 <HAL_TIM_PWM_ConfigChannel+0x76>
 800998c:	fffffbff 	.word	0xfffffbff

08009990 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009990:	231f      	movs	r3, #31
{
 8009992:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009994:	2401      	movs	r4, #1
 8009996:	4019      	ands	r1, r3
 8009998:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800999a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 800999c:	6a03      	ldr	r3, [r0, #32]
 800999e:	43a3      	bics	r3, r4
 80099a0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099a2:	6a03      	ldr	r3, [r0, #32]
 80099a4:	431a      	orrs	r2, r3
 80099a6:	6202      	str	r2, [r0, #32]
}
 80099a8:	bd10      	pop	{r4, pc}
	...

080099ac <HAL_TIM_OC_Start_DMA>:
{
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	000e      	movs	r6, r1
 80099b0:	0005      	movs	r5, r0
 80099b2:	0011      	movs	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80099b4:	0002      	movs	r2, r0
 80099b6:	2e00      	cmp	r6, #0
 80099b8:	d109      	bne.n	80099ce <HAL_TIM_OC_Start_DMA+0x22>
 80099ba:	323e      	adds	r2, #62	@ 0x3e
 80099bc:	7814      	ldrb	r4, [r2, #0]
    return HAL_BUSY;
 80099be:	2002      	movs	r0, #2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80099c0:	3c02      	subs	r4, #2
 80099c2:	4262      	negs	r2, r4
 80099c4:	4154      	adcs	r4, r2
 80099c6:	b2e4      	uxtb	r4, r4
 80099c8:	2c00      	cmp	r4, #0
 80099ca:	d00a      	beq.n	80099e2 <HAL_TIM_OC_Start_DMA+0x36>
}
 80099cc:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80099ce:	2e04      	cmp	r6, #4
 80099d0:	d101      	bne.n	80099d6 <HAL_TIM_OC_Start_DMA+0x2a>
 80099d2:	323f      	adds	r2, #63	@ 0x3f
 80099d4:	e7f2      	b.n	80099bc <HAL_TIM_OC_Start_DMA+0x10>
 80099d6:	2e08      	cmp	r6, #8
 80099d8:	d101      	bne.n	80099de <HAL_TIM_OC_Start_DMA+0x32>
 80099da:	3240      	adds	r2, #64	@ 0x40
 80099dc:	e7ee      	b.n	80099bc <HAL_TIM_OC_Start_DMA+0x10>
 80099de:	3241      	adds	r2, #65	@ 0x41
 80099e0:	e7ec      	b.n	80099bc <HAL_TIM_OC_Start_DMA+0x10>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80099e2:	002a      	movs	r2, r5
 80099e4:	2e00      	cmp	r6, #0
 80099e6:	d109      	bne.n	80099fc <HAL_TIM_OC_Start_DMA+0x50>
 80099e8:	323e      	adds	r2, #62	@ 0x3e
 80099ea:	7812      	ldrb	r2, [r2, #0]
 80099ec:	3a01      	subs	r2, #1
 80099ee:	4250      	negs	r0, r2
 80099f0:	4142      	adcs	r2, r0
 80099f2:	b2d2      	uxtb	r2, r2
 80099f4:	2a00      	cmp	r2, #0
 80099f6:	d10b      	bne.n	8009a10 <HAL_TIM_OC_Start_DMA+0x64>
      return HAL_ERROR;
 80099f8:	2001      	movs	r0, #1
 80099fa:	e7e7      	b.n	80099cc <HAL_TIM_OC_Start_DMA+0x20>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80099fc:	2e04      	cmp	r6, #4
 80099fe:	d101      	bne.n	8009a04 <HAL_TIM_OC_Start_DMA+0x58>
 8009a00:	323f      	adds	r2, #63	@ 0x3f
 8009a02:	e7f2      	b.n	80099ea <HAL_TIM_OC_Start_DMA+0x3e>
 8009a04:	2e08      	cmp	r6, #8
 8009a06:	d101      	bne.n	8009a0c <HAL_TIM_OC_Start_DMA+0x60>
 8009a08:	3240      	adds	r2, #64	@ 0x40
 8009a0a:	e7ee      	b.n	80099ea <HAL_TIM_OC_Start_DMA+0x3e>
 8009a0c:	3241      	adds	r2, #65	@ 0x41
 8009a0e:	e7ec      	b.n	80099ea <HAL_TIM_OC_Start_DMA+0x3e>
    if ((pData == NULL) || (Length == 0U))
 8009a10:	2900      	cmp	r1, #0
 8009a12:	d0f1      	beq.n	80099f8 <HAL_TIM_OC_Start_DMA+0x4c>
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0ef      	beq.n	80099f8 <HAL_TIM_OC_Start_DMA+0x4c>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a18:	2202      	movs	r2, #2
 8009a1a:	0028      	movs	r0, r5
 8009a1c:	2e00      	cmp	r6, #0
 8009a1e:	d137      	bne.n	8009a90 <HAL_TIM_OC_Start_DMA+0xe4>
 8009a20:	303e      	adds	r0, #62	@ 0x3e
 8009a22:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009a24:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8009a26:	4a41      	ldr	r2, [pc, #260]	@ (8009b2c <HAL_TIM_OC_Start_DMA+0x180>)
 8009a28:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009a2a:	4a41      	ldr	r2, [pc, #260]	@ (8009b30 <HAL_TIM_OC_Start_DMA+0x184>)
 8009a2c:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009a2e:	4a41      	ldr	r2, [pc, #260]	@ (8009b34 <HAL_TIM_OC_Start_DMA+0x188>)
 8009a30:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009a32:	682a      	ldr	r2, [r5, #0]
 8009a34:	3234      	adds	r2, #52	@ 0x34
 8009a36:	f7fd fbb1 	bl	800719c <HAL_DMA_Start_IT>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d1dc      	bne.n	80099f8 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009a3e:	2380      	movs	r3, #128	@ 0x80
 8009a40:	682a      	ldr	r2, [r5, #0]
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	68d1      	ldr	r1, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a46:	682c      	ldr	r4, [r5, #0]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009a48:	430b      	orrs	r3, r1
 8009a4a:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a4c:	0031      	movs	r1, r6
 8009a4e:	2201      	movs	r2, #1
 8009a50:	0020      	movs	r0, r4
 8009a52:	f7ff ff9d 	bl	8009990 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a56:	4a38      	ldr	r2, [pc, #224]	@ (8009b38 <HAL_TIM_OC_Start_DMA+0x18c>)
 8009a58:	4294      	cmp	r4, r2
 8009a5a:	d008      	beq.n	8009a6e <HAL_TIM_OC_Start_DMA+0xc2>
 8009a5c:	4b37      	ldr	r3, [pc, #220]	@ (8009b3c <HAL_TIM_OC_Start_DMA+0x190>)
 8009a5e:	429c      	cmp	r4, r3
 8009a60:	d005      	beq.n	8009a6e <HAL_TIM_OC_Start_DMA+0xc2>
 8009a62:	4b37      	ldr	r3, [pc, #220]	@ (8009b40 <HAL_TIM_OC_Start_DMA+0x194>)
 8009a64:	429c      	cmp	r4, r3
 8009a66:	d002      	beq.n	8009a6e <HAL_TIM_OC_Start_DMA+0xc2>
 8009a68:	4b36      	ldr	r3, [pc, #216]	@ (8009b44 <HAL_TIM_OC_Start_DMA+0x198>)
 8009a6a:	429c      	cmp	r4, r3
 8009a6c:	d153      	bne.n	8009b16 <HAL_TIM_OC_Start_DMA+0x16a>
      __HAL_TIM_MOE_ENABLE(htim);
 8009a6e:	2380      	movs	r3, #128	@ 0x80
 8009a70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009a72:	021b      	lsls	r3, r3, #8
 8009a74:	430b      	orrs	r3, r1
 8009a76:	6463      	str	r3, [r4, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a78:	4294      	cmp	r4, r2
 8009a7a:	d002      	beq.n	8009a82 <HAL_TIM_OC_Start_DMA+0xd6>
 8009a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8009b3c <HAL_TIM_OC_Start_DMA+0x190>)
 8009a7e:	429c      	cmp	r4, r3
 8009a80:	d14f      	bne.n	8009b22 <HAL_TIM_OC_Start_DMA+0x176>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a82:	2207      	movs	r2, #7
 8009a84:	68a3      	ldr	r3, [r4, #8]
 8009a86:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a88:	2b06      	cmp	r3, #6
 8009a8a:	d14a      	bne.n	8009b22 <HAL_TIM_OC_Start_DMA+0x176>
    return HAL_BUSY;
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	e79d      	b.n	80099cc <HAL_TIM_OC_Start_DMA+0x20>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a90:	2e04      	cmp	r6, #4
 8009a92:	d113      	bne.n	8009abc <HAL_TIM_OC_Start_DMA+0x110>
 8009a94:	303f      	adds	r0, #63	@ 0x3f
 8009a96:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009a98:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8009a9a:	4a24      	ldr	r2, [pc, #144]	@ (8009b2c <HAL_TIM_OC_Start_DMA+0x180>)
 8009a9c:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009a9e:	4a24      	ldr	r2, [pc, #144]	@ (8009b30 <HAL_TIM_OC_Start_DMA+0x184>)
 8009aa0:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009aa2:	4a24      	ldr	r2, [pc, #144]	@ (8009b34 <HAL_TIM_OC_Start_DMA+0x188>)
 8009aa4:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8009aa6:	682a      	ldr	r2, [r5, #0]
 8009aa8:	3238      	adds	r2, #56	@ 0x38
 8009aaa:	f7fd fb77 	bl	800719c <HAL_DMA_Start_IT>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d1a2      	bne.n	80099f8 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009ab2:	2380      	movs	r3, #128	@ 0x80
 8009ab4:	682a      	ldr	r2, [r5, #0]
 8009ab6:	00db      	lsls	r3, r3, #3
 8009ab8:	68d1      	ldr	r1, [r2, #12]
 8009aba:	e7c4      	b.n	8009a46 <HAL_TIM_OC_Start_DMA+0x9a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009abc:	2e08      	cmp	r6, #8
 8009abe:	d113      	bne.n	8009ae8 <HAL_TIM_OC_Start_DMA+0x13c>
 8009ac0:	3040      	adds	r0, #64	@ 0x40
 8009ac2:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009ac4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8009ac6:	4a19      	ldr	r2, [pc, #100]	@ (8009b2c <HAL_TIM_OC_Start_DMA+0x180>)
 8009ac8:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009aca:	4a19      	ldr	r2, [pc, #100]	@ (8009b30 <HAL_TIM_OC_Start_DMA+0x184>)
 8009acc:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009ace:	4a19      	ldr	r2, [pc, #100]	@ (8009b34 <HAL_TIM_OC_Start_DMA+0x188>)
 8009ad0:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009ad2:	682a      	ldr	r2, [r5, #0]
 8009ad4:	323c      	adds	r2, #60	@ 0x3c
 8009ad6:	f7fd fb61 	bl	800719c <HAL_DMA_Start_IT>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d18c      	bne.n	80099f8 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009ade:	2380      	movs	r3, #128	@ 0x80
 8009ae0:	682a      	ldr	r2, [r5, #0]
 8009ae2:	011b      	lsls	r3, r3, #4
 8009ae4:	68d1      	ldr	r1, [r2, #12]
 8009ae6:	e7ae      	b.n	8009a46 <HAL_TIM_OC_Start_DMA+0x9a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ae8:	3041      	adds	r0, #65	@ 0x41
 8009aea:	7002      	strb	r2, [r0, #0]
  switch (Channel)
 8009aec:	2e0c      	cmp	r6, #12
 8009aee:	d183      	bne.n	80099f8 <HAL_TIM_OC_Start_DMA+0x4c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009af0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8009af2:	4a0e      	ldr	r2, [pc, #56]	@ (8009b2c <HAL_TIM_OC_Start_DMA+0x180>)
 8009af4:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009af6:	4a0e      	ldr	r2, [pc, #56]	@ (8009b30 <HAL_TIM_OC_Start_DMA+0x184>)
 8009af8:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009afa:	4a0e      	ldr	r2, [pc, #56]	@ (8009b34 <HAL_TIM_OC_Start_DMA+0x188>)
 8009afc:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009afe:	682a      	ldr	r2, [r5, #0]
 8009b00:	3240      	adds	r2, #64	@ 0x40
 8009b02:	f7fd fb4b 	bl	800719c <HAL_DMA_Start_IT>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d000      	beq.n	8009b0c <HAL_TIM_OC_Start_DMA+0x160>
 8009b0a:	e775      	b.n	80099f8 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009b0c:	2380      	movs	r3, #128	@ 0x80
 8009b0e:	682a      	ldr	r2, [r5, #0]
 8009b10:	015b      	lsls	r3, r3, #5
 8009b12:	68d1      	ldr	r1, [r2, #12]
 8009b14:	e797      	b.n	8009a46 <HAL_TIM_OC_Start_DMA+0x9a>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b16:	2380      	movs	r3, #128	@ 0x80
 8009b18:	05db      	lsls	r3, r3, #23
 8009b1a:	429c      	cmp	r4, r3
 8009b1c:	d0b1      	beq.n	8009a82 <HAL_TIM_OC_Start_DMA+0xd6>
 8009b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b48 <HAL_TIM_OC_Start_DMA+0x19c>)
 8009b20:	e7ad      	b.n	8009a7e <HAL_TIM_OC_Start_DMA+0xd2>
        __HAL_TIM_ENABLE(htim);
 8009b22:	2301      	movs	r3, #1
 8009b24:	6822      	ldr	r2, [r4, #0]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	e7af      	b.n	8009a8c <HAL_TIM_OC_Start_DMA+0xe0>
 8009b2c:	080094d3 	.word	0x080094d3
 8009b30:	08009545 	.word	0x08009545
 8009b34:	080096b9 	.word	0x080096b9
 8009b38:	40012c00 	.word	0x40012c00
 8009b3c:	40014000 	.word	0x40014000
 8009b40:	40014400 	.word	0x40014400
 8009b44:	40014800 	.word	0x40014800
 8009b48:	40000400 	.word	0x40000400

08009b4c <HAL_TIM_PWM_Start_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	f7ff ff2d 	bl	80099ac <HAL_TIM_OC_Start_DMA>
 8009b52:	bd10      	pop	{r4, pc}

08009b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b54:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b56:	0004      	movs	r4, r0
 8009b58:	2202      	movs	r2, #2
 8009b5a:	343c      	adds	r4, #60	@ 0x3c
 8009b5c:	7825      	ldrb	r5, [r4, #0]
{
 8009b5e:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8009b60:	0010      	movs	r0, r2
 8009b62:	2d01      	cmp	r5, #1
 8009b64:	d020      	beq.n	8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b66:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b68:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8009b6a:	353d      	adds	r5, #61	@ 0x3d
 8009b6c:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8009b72:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b74:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b76:	680e      	ldr	r6, [r1, #0]
 8009b78:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b7a:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b7c:	480b      	ldr	r0, [pc, #44]	@ (8009bac <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8009b7e:	4283      	cmp	r3, r0
 8009b80:	d009      	beq.n	8009b96 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8009b82:	2080      	movs	r0, #128	@ 0x80
 8009b84:	05c0      	lsls	r0, r0, #23
 8009b86:	4283      	cmp	r3, r0
 8009b88:	d005      	beq.n	8009b96 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8009b8a:	4809      	ldr	r0, [pc, #36]	@ (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8009b8c:	4283      	cmp	r3, r0
 8009b8e:	d002      	beq.n	8009b96 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8009b90:	4808      	ldr	r0, [pc, #32]	@ (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8009b92:	4283      	cmp	r3, r0
 8009b94:	d104      	bne.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b96:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b98:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b9a:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b9c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ba0:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8009ba2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009ba4:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8009ba6:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8009ba8:	bd70      	pop	{r4, r5, r6, pc}
 8009baa:	46c0      	nop			@ (mov r8, r8)
 8009bac:	40012c00 	.word	0x40012c00
 8009bb0:	40000400 	.word	0x40000400
 8009bb4:	40014000 	.word	0x40014000

08009bb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009bb8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bba:	0004      	movs	r4, r0
 8009bbc:	343c      	adds	r4, #60	@ 0x3c
 8009bbe:	7823      	ldrb	r3, [r4, #0]
{
 8009bc0:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8009bc2:	2002      	movs	r0, #2
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d01c      	beq.n	8009c02 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bc8:	68cb      	ldr	r3, [r1, #12]
 8009bca:	480e      	ldr	r0, [pc, #56]	@ (8009c04 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bcc:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bce:	4003      	ands	r3, r0
 8009bd0:	6888      	ldr	r0, [r1, #8]
 8009bd2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009bd4:	480c      	ldr	r0, [pc, #48]	@ (8009c08 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8009bd6:	4003      	ands	r3, r0
 8009bd8:	6848      	ldr	r0, [r1, #4]
 8009bda:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009bdc:	480b      	ldr	r0, [pc, #44]	@ (8009c0c <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8009bde:	4003      	ands	r3, r0
 8009be0:	6808      	ldr	r0, [r1, #0]
 8009be2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009be4:	480a      	ldr	r0, [pc, #40]	@ (8009c10 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8009be6:	4003      	ands	r3, r0
 8009be8:	6908      	ldr	r0, [r1, #16]
 8009bea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bec:	4809      	ldr	r0, [pc, #36]	@ (8009c14 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8009bee:	4003      	ands	r3, r0
 8009bf0:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009bf2:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bf4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009bf6:	4808      	ldr	r0, [pc, #32]	@ (8009c18 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8009bf8:	4003      	ands	r3, r0

  __HAL_UNLOCK(htim);
 8009bfa:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009bfc:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8009bfe:	6453      	str	r3, [r2, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8009c00:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8009c02:	bd10      	pop	{r4, pc}
 8009c04:	fffffcff 	.word	0xfffffcff
 8009c08:	fffffbff 	.word	0xfffffbff
 8009c0c:	fffff7ff 	.word	0xfffff7ff
 8009c10:	ffffefff 	.word	0xffffefff
 8009c14:	ffffdfff 	.word	0xffffdfff
 8009c18:	ffffbfff 	.word	0xffffbfff

08009c1c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8009c1c:	4770      	bx	lr

08009c1e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8009c1e:	4770      	bx	lr

08009c20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c20:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c22:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c26:	2201      	movs	r2, #1
 8009c28:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c2c:	6801      	ldr	r1, [r0, #0]
 8009c2e:	4d12      	ldr	r5, [pc, #72]	@ (8009c78 <UART_EndRxTransfer+0x58>)
 8009c30:	680b      	ldr	r3, [r1, #0]
 8009c32:	402b      	ands	r3, r5
 8009c34:	600b      	str	r3, [r1, #0]
 8009c36:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c3a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c3e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c42:	6801      	ldr	r1, [r0, #0]
 8009c44:	688b      	ldr	r3, [r1, #8]
 8009c46:	4393      	bics	r3, r2
 8009c48:	608b      	str	r3, [r1, #8]
 8009c4a:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d10a      	bne.n	8009c6a <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c54:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c58:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c5c:	2410      	movs	r4, #16
 8009c5e:	6802      	ldr	r2, [r0, #0]
 8009c60:	6813      	ldr	r3, [r2, #0]
 8009c62:	43a3      	bics	r3, r4
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	1d03      	adds	r3, r0, #4
 8009c6e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c70:	2300      	movs	r3, #0
 8009c72:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c74:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8009c76:	bd30      	pop	{r4, r5, pc}
 8009c78:	fffffedf 	.word	0xfffffedf

08009c7c <HAL_UART_Transmit_DMA>:
{
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8009c80:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
{
 8009c82:	0004      	movs	r4, r0
    return HAL_BUSY;
 8009c84:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8009c86:	2a20      	cmp	r2, #32
 8009c88:	d104      	bne.n	8009c94 <HAL_UART_Transmit_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8009c8a:	2900      	cmp	r1, #0
 8009c8c:	d001      	beq.n	8009c92 <HAL_UART_Transmit_DMA+0x16>
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 8009c92:	2001      	movs	r0, #1
}
 8009c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c96:	2280      	movs	r2, #128	@ 0x80
 8009c98:	68a0      	ldr	r0, [r4, #8]
 8009c9a:	0152      	lsls	r2, r2, #5
 8009c9c:	4290      	cmp	r0, r2
 8009c9e:	d104      	bne.n	8009caa <HAL_UART_Transmit_DMA+0x2e>
 8009ca0:	6922      	ldr	r2, [r4, #16]
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	d101      	bne.n	8009caa <HAL_UART_Transmit_DMA+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8009ca6:	07ca      	lsls	r2, r1, #31
 8009ca8:	d4f3      	bmi.n	8009c92 <HAL_UART_Transmit_DMA+0x16>
    huart->TxXferSize  = Size;
 8009caa:	0022      	movs	r2, r4
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cac:	0025      	movs	r5, r4
    huart->TxXferSize  = Size;
 8009cae:	3250      	adds	r2, #80	@ 0x50
    huart->pTxBuffPtr  = pData;
 8009cb0:	64e1      	str	r1, [r4, #76]	@ 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb2:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8009cb4:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8009cb6:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cb8:	2221      	movs	r2, #33	@ 0x21
    if (huart->hdmatx != NULL)
 8009cba:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cbc:	3508      	adds	r5, #8
 8009cbe:	67ee      	str	r6, [r5, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cc0:	67e2      	str	r2, [r4, #124]	@ 0x7c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009cc2:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 8009cc4:	42b0      	cmp	r0, r6
 8009cc6:	d010      	beq.n	8009cea <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009cc8:	4f10      	ldr	r7, [pc, #64]	@ (8009d0c <HAL_UART_Transmit_DMA+0x90>)
      huart->hdmatx->XferAbortCallback = NULL;
 8009cca:	6346      	str	r6, [r0, #52]	@ 0x34
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009ccc:	6287      	str	r7, [r0, #40]	@ 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009cce:	4f10      	ldr	r7, [pc, #64]	@ (8009d10 <HAL_UART_Transmit_DMA+0x94>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009cd0:	3228      	adds	r2, #40	@ 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009cd2:	62c7      	str	r7, [r0, #44]	@ 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009cd4:	4f0f      	ldr	r7, [pc, #60]	@ (8009d14 <HAL_UART_Transmit_DMA+0x98>)
 8009cd6:	6307      	str	r7, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009cd8:	f7fd fa60 	bl	800719c <HAL_DMA_Start_IT>
 8009cdc:	42b0      	cmp	r0, r6
 8009cde:	d004      	beq.n	8009cea <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8009ce4:	18db      	adds	r3, r3, r3
 8009ce6:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_ERROR;
 8009ce8:	e7d3      	b.n	8009c92 <HAL_UART_Transmit_DMA+0x16>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009cea:	2240      	movs	r2, #64	@ 0x40
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cf0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009cfa:	6822      	ldr	r2, [r4, #0]
 8009cfc:	337f      	adds	r3, #127	@ 0x7f
 8009cfe:	6890      	ldr	r0, [r2, #8]
 8009d00:	4303      	orrs	r3, r0
 8009d02:	6093      	str	r3, [r2, #8]
 8009d04:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8009d08:	2000      	movs	r0, #0
 8009d0a:	e7c3      	b.n	8009c94 <HAL_UART_Transmit_DMA+0x18>
 8009d0c:	08009dcf 	.word	0x08009dcf
 8009d10:	08009e1b 	.word	0x08009e1b
 8009d14:	08009e2b 	.word	0x08009e2b

08009d18 <HAL_UART_DMAStop>:
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009d18:	2180      	movs	r1, #128	@ 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009d1a:	1d02      	adds	r2, r0, #4
{
 8009d1c:	b570      	push	{r4, r5, r6, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009d1e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009d20:	6fd5      	ldr	r5, [r2, #124]	@ 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009d22:	6802      	ldr	r2, [r0, #0]
{
 8009d24:	0004      	movs	r4, r0
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009d26:	6892      	ldr	r2, [r2, #8]
 8009d28:	420a      	tst	r2, r1
 8009d2a:	d02b      	beq.n	8009d84 <HAL_UART_DMAStop+0x6c>
 8009d2c:	2b21      	cmp	r3, #33	@ 0x21
 8009d2e:	d129      	bne.n	8009d84 <HAL_UART_DMAStop+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d30:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d34:	3b20      	subs	r3, #32
 8009d36:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d3a:	6822      	ldr	r2, [r4, #0]
 8009d3c:	6893      	ldr	r3, [r2, #8]
 8009d3e:	438b      	bics	r3, r1
 8009d40:	6093      	str	r3, [r2, #8]
 8009d42:	f380 8810 	msr	PRIMASK, r0
    if (huart->hdmatx != NULL)
 8009d46:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d00d      	beq.n	8009d68 <HAL_UART_DMAStop+0x50>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009d4c:	f7fd fa62 	bl	8007214 <HAL_DMA_Abort>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d009      	beq.n	8009d68 <HAL_UART_DMAStop+0x50>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009d54:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8009d56:	f7fd fae5 	bl	8007324 <HAL_DMA_GetError>
 8009d5a:	2820      	cmp	r0, #32
 8009d5c:	d104      	bne.n	8009d68 <HAL_UART_DMAStop+0x50>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d5e:	2310      	movs	r3, #16
 8009d60:	3408      	adds	r4, #8
          return HAL_TIMEOUT;
 8009d62:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d64:	67e3      	str	r3, [r4, #124]	@ 0x7c
          return HAL_TIMEOUT;
 8009d66:	e015      	b.n	8009d94 <HAL_UART_DMAStop+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d68:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009d72:	20c0      	movs	r0, #192	@ 0xc0
 8009d74:	6822      	ldr	r2, [r4, #0]
 8009d76:	6813      	ldr	r3, [r2, #0]
 8009d78:	4383      	bics	r3, r0
 8009d7a:	6013      	str	r3, [r2, #0]
 8009d7c:	f381 8810 	msr	PRIMASK, r1
  huart->gState = HAL_UART_STATE_READY;
 8009d80:	2320      	movs	r3, #32
 8009d82:	67e3      	str	r3, [r4, #124]	@ 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009d84:	2140      	movs	r1, #64	@ 0x40
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	420b      	tst	r3, r1
 8009d8c:	d001      	beq.n	8009d92 <HAL_UART_DMAStop+0x7a>
 8009d8e:	2d22      	cmp	r5, #34	@ 0x22
 8009d90:	d001      	beq.n	8009d96 <HAL_UART_DMAStop+0x7e>
  return HAL_OK;
 8009d92:	2000      	movs	r0, #0
}
 8009d94:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d96:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009da0:	6822      	ldr	r2, [r4, #0]
 8009da2:	6893      	ldr	r3, [r2, #8]
 8009da4:	438b      	bics	r3, r1
 8009da6:	6093      	str	r3, [r2, #8]
 8009da8:	f380 8810 	msr	PRIMASK, r0
    if (huart->hdmarx != NULL)
 8009dac:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d008      	beq.n	8009dc4 <HAL_UART_DMAStop+0xac>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009db2:	f7fd fa2f 	bl	8007214 <HAL_DMA_Abort>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d004      	beq.n	8009dc4 <HAL_UART_DMAStop+0xac>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009dba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009dbc:	f7fd fab2 	bl	8007324 <HAL_DMA_GetError>
 8009dc0:	2820      	cmp	r0, #32
 8009dc2:	d0cc      	beq.n	8009d5e <HAL_UART_DMAStop+0x46>
    UART_EndRxTransfer(huart);
 8009dc4:	0020      	movs	r0, r4
 8009dc6:	f7ff ff2b 	bl	8009c20 <UART_EndRxTransfer>
 8009dca:	e7e2      	b.n	8009d92 <HAL_UART_DMAStop+0x7a>

08009dcc <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8009dcc:	4770      	bx	lr

08009dce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009dce:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009dd0:	699b      	ldr	r3, [r3, #24]
{
 8009dd2:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dd4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d01b      	beq.n	8009e12 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8009dda:	0003      	movs	r3, r0
 8009ddc:	2200      	movs	r2, #0
 8009dde:	3352      	adds	r3, #82	@ 0x52
 8009de0:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009de6:	3201      	adds	r2, #1
 8009de8:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009dec:	2580      	movs	r5, #128	@ 0x80
 8009dee:	6801      	ldr	r1, [r0, #0]
 8009df0:	688b      	ldr	r3, [r1, #8]
 8009df2:	43ab      	bics	r3, r5
 8009df4:	608b      	str	r3, [r1, #8]
 8009df6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dfa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dfe:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e02:	2340      	movs	r3, #64	@ 0x40
 8009e04:	6802      	ldr	r2, [r0, #0]
 8009e06:	6810      	ldr	r0, [r2, #0]
 8009e08:	4303      	orrs	r3, r0
 8009e0a:	6013      	str	r3, [r2, #0]
 8009e0c:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e10:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_TxCpltCallback(huart);
 8009e12:	f7ff ffdb 	bl	8009dcc <HAL_UART_TxCpltCallback>
}
 8009e16:	e7fb      	b.n	8009e10 <UART_DMATransmitCplt+0x42>

08009e18 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8009e18:	4770      	bx	lr

08009e1a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e1a:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009e1c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8009e1e:	f7ff fffb 	bl	8009e18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e22:	bd10      	pop	{r4, pc}

08009e24 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8009e24:	4770      	bx	lr

08009e26 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8009e26:	4770      	bx	lr

08009e28 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8009e28:	4770      	bx	lr

08009e2a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e2a:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e2c:	6a44      	ldr	r4, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009e2e:	1d23      	adds	r3, r4, #4
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009e30:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009e32:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	061b      	lsls	r3, r3, #24
 8009e3a:	d513      	bpl.n	8009e64 <UART_DMAError+0x3a>
 8009e3c:	2a21      	cmp	r2, #33	@ 0x21
 8009e3e:	d111      	bne.n	8009e64 <UART_DMAError+0x3a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009e40:	0023      	movs	r3, r4
 8009e42:	2200      	movs	r2, #0
 8009e44:	3352      	adds	r3, #82	@ 0x52
 8009e46:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e48:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e52:	25c0      	movs	r5, #192	@ 0xc0
 8009e54:	6822      	ldr	r2, [r4, #0]
 8009e56:	6813      	ldr	r3, [r2, #0]
 8009e58:	43ab      	bics	r3, r5
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 8009e60:	2320      	movs	r3, #32
 8009e62:	67e3      	str	r3, [r4, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	065b      	lsls	r3, r3, #25
 8009e6a:	d508      	bpl.n	8009e7e <UART_DMAError+0x54>
 8009e6c:	2922      	cmp	r1, #34	@ 0x22
 8009e6e:	d106      	bne.n	8009e7e <UART_DMAError+0x54>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009e70:	0023      	movs	r3, r4
 8009e72:	2200      	movs	r2, #0
 8009e74:	335a      	adds	r3, #90	@ 0x5a
    UART_EndRxTransfer(huart);
 8009e76:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8009e78:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8009e7a:	f7ff fed1 	bl	8009c20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e7e:	0022      	movs	r2, r4
 8009e80:	2310      	movs	r3, #16
 8009e82:	3208      	adds	r2, #8
 8009e84:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e86:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e88:	430b      	orrs	r3, r1
 8009e8a:	67d3      	str	r3, [r2, #124]	@ 0x7c
  HAL_UART_ErrorCallback(huart);
 8009e8c:	f7ff ffcc 	bl	8009e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e90:	bd70      	pop	{r4, r5, r6, pc}

08009e92 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e92:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	0002      	movs	r2, r0
{
 8009e98:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8009e9a:	325a      	adds	r2, #90	@ 0x5a
 8009e9c:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8009e9e:	3a08      	subs	r2, #8
 8009ea0:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ea2:	f7ff ffc1 	bl	8009e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ea6:	bd10      	pop	{r4, pc}

08009ea8 <HAL_UARTEx_RxEventCallback>:
}
 8009ea8:	4770      	bx	lr
	...

08009eac <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009eac:	6802      	ldr	r2, [r0, #0]
{
 8009eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009eb0:	69d3      	ldr	r3, [r2, #28]
{
 8009eb2:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009eb4:	48a7      	ldr	r0, [pc, #668]	@ (800a154 <HAL_UART_IRQHandler+0x2a8>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009eb6:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009eb8:	6896      	ldr	r6, [r2, #8]
  if (errorflags == 0U)
 8009eba:	4203      	tst	r3, r0
 8009ebc:	d10b      	bne.n	8009ed6 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009ebe:	2020      	movs	r0, #32
 8009ec0:	4203      	tst	r3, r0
 8009ec2:	d100      	bne.n	8009ec6 <HAL_UART_IRQHandler+0x1a>
 8009ec4:	e080      	b.n	8009fc8 <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ec6:	4201      	tst	r1, r0
 8009ec8:	d100      	bne.n	8009ecc <HAL_UART_IRQHandler+0x20>
 8009eca:	e07d      	b.n	8009fc8 <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 8009ecc:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
      huart->TxISR(huart);
 8009ece:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d16f      	bne.n	8009fb4 <HAL_UART_IRQHandler+0x108>
 8009ed4:	e06f      	b.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009eda:	4d9f      	ldr	r5, [pc, #636]	@ (800a158 <HAL_UART_IRQHandler+0x2ac>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009edc:	4007      	ands	r7, r0
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009ede:	400d      	ands	r5, r1
 8009ee0:	433d      	orrs	r5, r7
 8009ee2:	d100      	bne.n	8009ee6 <HAL_UART_IRQHandler+0x3a>
 8009ee4:	e070      	b.n	8009fc8 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ee6:	0025      	movs	r5, r4
 8009ee8:	3508      	adds	r5, #8
 8009eea:	4203      	tst	r3, r0
 8009eec:	d005      	beq.n	8009efa <HAL_UART_IRQHandler+0x4e>
 8009eee:	05ce      	lsls	r6, r1, #23
 8009ef0:	d503      	bpl.n	8009efa <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ef2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ef4:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8009ef6:	4330      	orrs	r0, r6
 8009ef8:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009efa:	2002      	movs	r0, #2
 8009efc:	4203      	tst	r3, r0
 8009efe:	d006      	beq.n	8009f0e <HAL_UART_IRQHandler+0x62>
 8009f00:	2f00      	cmp	r7, #0
 8009f02:	d004      	beq.n	8009f0e <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f04:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f06:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8009f08:	1800      	adds	r0, r0, r0
 8009f0a:	4330      	orrs	r0, r6
 8009f0c:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f0e:	2004      	movs	r0, #4
 8009f10:	4203      	tst	r3, r0
 8009f12:	d006      	beq.n	8009f22 <HAL_UART_IRQHandler+0x76>
 8009f14:	2f00      	cmp	r7, #0
 8009f16:	d004      	beq.n	8009f22 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f18:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f1a:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8009f1c:	3802      	subs	r0, #2
 8009f1e:	4330      	orrs	r0, r6
 8009f20:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f22:	2008      	movs	r0, #8
 8009f24:	4203      	tst	r3, r0
 8009f26:	d007      	beq.n	8009f38 <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f28:	2620      	movs	r6, #32
 8009f2a:	400e      	ands	r6, r1
 8009f2c:	433e      	orrs	r6, r7
 8009f2e:	d003      	beq.n	8009f38 <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f30:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f32:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8009f34:	4330      	orrs	r0, r6
 8009f36:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f38:	2080      	movs	r0, #128	@ 0x80
 8009f3a:	0100      	lsls	r0, r0, #4
 8009f3c:	4203      	tst	r3, r0
 8009f3e:	d006      	beq.n	8009f4e <HAL_UART_IRQHandler+0xa2>
 8009f40:	014e      	lsls	r6, r1, #5
 8009f42:	d504      	bpl.n	8009f4e <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f44:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f46:	2220      	movs	r2, #32
 8009f48:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 8009f4a:	4302      	orrs	r2, r0
 8009f4c:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f4e:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8009f50:	2a00      	cmp	r2, #0
 8009f52:	d030      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f54:	2220      	movs	r2, #32
 8009f56:	4213      	tst	r3, r2
 8009f58:	d006      	beq.n	8009f68 <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f5a:	4211      	tst	r1, r2
 8009f5c:	d004      	beq.n	8009f68 <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8009f5e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 8009f64:	0020      	movs	r0, r4
 8009f66:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f68:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8009f6a:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f6c:	2740      	movs	r7, #64	@ 0x40
 8009f6e:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f70:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f72:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f74:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8009f76:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f78:	431e      	orrs	r6, r3
 8009f7a:	d021      	beq.n	8009fc0 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8009f7c:	f7ff fe50 	bl	8009c20 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	423b      	tst	r3, r7
 8009f86:	d017      	beq.n	8009fb8 <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f88:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f92:	6822      	ldr	r2, [r4, #0]
 8009f94:	6893      	ldr	r3, [r2, #8]
 8009f96:	43bb      	bics	r3, r7
 8009f98:	6093      	str	r3, [r2, #8]
 8009f9a:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8009f9e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d009      	beq.n	8009fb8 <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fa4:	4b6d      	ldr	r3, [pc, #436]	@ (800a15c <HAL_UART_IRQHandler+0x2b0>)
 8009fa6:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fa8:	f7fd f952 	bl	8007250 <HAL_DMA_Abort_IT>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d002      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fb0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009fb2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009fb4:	4798      	blx	r3
}
 8009fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8009fb8:	0020      	movs	r0, r4
 8009fba:	f7ff ff35 	bl	8009e28 <HAL_UART_ErrorCallback>
 8009fbe:	e7fa      	b.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8009fc0:	f7ff ff32 	bl	8009e28 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc4:	67ee      	str	r6, [r5, #124]	@ 0x7c
 8009fc6:	e7f6      	b.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8009fca:	2801      	cmp	r0, #1
 8009fcc:	d000      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x124>
 8009fce:	e095      	b.n	800a0fc <HAL_UART_IRQHandler+0x250>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009fd0:	2510      	movs	r5, #16
 8009fd2:	422b      	tst	r3, r5
 8009fd4:	d100      	bne.n	8009fd8 <HAL_UART_IRQHandler+0x12c>
 8009fd6:	e091      	b.n	800a0fc <HAL_UART_IRQHandler+0x250>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009fd8:	4229      	tst	r1, r5
 8009fda:	d100      	bne.n	8009fde <HAL_UART_IRQHandler+0x132>
 8009fdc:	e08e      	b.n	800a0fc <HAL_UART_IRQHandler+0x250>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fde:	6215      	str	r5, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe0:	6893      	ldr	r3, [r2, #8]
 8009fe2:	2140      	movs	r1, #64	@ 0x40
 8009fe4:	001e      	movs	r6, r3
 8009fe6:	400e      	ands	r6, r1
 8009fe8:	420b      	tst	r3, r1
 8009fea:	d04f      	beq.n	800a08c <HAL_UART_IRQHandler+0x1e0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fec:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8009fee:	6813      	ldr	r3, [r2, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d0de      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ff8:	0026      	movs	r6, r4
 8009ffa:	3658      	adds	r6, #88	@ 0x58
 8009ffc:	8837      	ldrh	r7, [r6, #0]
 8009ffe:	429f      	cmp	r7, r3
 800a000:	d9d9      	bls.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 800a002:	0027      	movs	r7, r4
 800a004:	375a      	adds	r7, #90	@ 0x5a
 800a006:	803b      	strh	r3, [r7, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a008:	6993      	ldr	r3, [r2, #24]
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	d032      	beq.n	800a074 <HAL_UART_IRQHandler+0x1c8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a00e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a012:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a016:	6822      	ldr	r2, [r4, #0]
 800a018:	4d51      	ldr	r5, [pc, #324]	@ (800a160 <HAL_UART_IRQHandler+0x2b4>)
 800a01a:	6813      	ldr	r3, [r2, #0]
 800a01c:	402b      	ands	r3, r5
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a024:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a028:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a02c:	6822      	ldr	r2, [r4, #0]
 800a02e:	6893      	ldr	r3, [r2, #8]
 800a030:	4383      	bics	r3, r0
 800a032:	6093      	str	r3, [r2, #8]
 800a034:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a038:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a03c:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a040:	0023      	movs	r3, r4
 800a042:	cb80      	ldmia	r3!, {r7}
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	438a      	bics	r2, r1
 800a048:	60ba      	str	r2, [r7, #8]
 800a04a:	f38c 8810 	msr	PRIMASK, ip
          huart->RxState = HAL_UART_STATE_READY;
 800a04e:	2220      	movs	r2, #32
 800a050:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a052:	2300      	movs	r3, #0
 800a054:	6623      	str	r3, [r4, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a056:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a05a:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a05e:	6822      	ldr	r2, [r4, #0]
 800a060:	3512      	adds	r5, #18
 800a062:	6813      	ldr	r3, [r2, #0]
 800a064:	35ff      	adds	r5, #255	@ 0xff
 800a066:	43ab      	bics	r3, r5
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a06e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800a070:	f7fd f8d0 	bl	8007214 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a074:	2302      	movs	r3, #2
 800a076:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a078:	0023      	movs	r3, r4
 800a07a:	335a      	adds	r3, #90	@ 0x5a
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	8831      	ldrh	r1, [r6, #0]
 800a080:	1ac9      	subs	r1, r1, r3
 800a082:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a084:	0020      	movs	r0, r4
 800a086:	f7ff ff0f 	bl	8009ea8 <HAL_UARTEx_RxEventCallback>
 800a08a:	e794      	b.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a08c:	0023      	movs	r3, r4
 800a08e:	0022      	movs	r2, r4
 800a090:	3358      	adds	r3, #88	@ 0x58
 800a092:	325a      	adds	r2, #90	@ 0x5a
 800a094:	8819      	ldrh	r1, [r3, #0]
 800a096:	8813      	ldrh	r3, [r2, #0]
      if ((huart->RxXferCount > 0U)
 800a098:	8812      	ldrh	r2, [r2, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a09a:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	d100      	bne.n	800a0a2 <HAL_UART_IRQHandler+0x1f6>
 800a0a0:	e789      	b.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0a2:	1ac9      	subs	r1, r1, r3
 800a0a4:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a0a6:	2900      	cmp	r1, #0
 800a0a8:	d100      	bne.n	800a0ac <HAL_UART_IRQHandler+0x200>
 800a0aa:	e784      	b.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ac:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0b0:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0b4:	6822      	ldr	r2, [r4, #0]
 800a0b6:	4d2b      	ldr	r5, [pc, #172]	@ (800a164 <HAL_UART_IRQHandler+0x2b8>)
 800a0b8:	6813      	ldr	r3, [r2, #0]
 800a0ba:	402b      	ands	r3, r5
 800a0bc:	6013      	str	r3, [r2, #0]
 800a0be:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0c2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0c6:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ca:	0023      	movs	r3, r4
 800a0cc:	cb80      	ldmia	r3!, {r7}
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	4382      	bics	r2, r0
 800a0d2:	60ba      	str	r2, [r7, #8]
 800a0d4:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 800a0d8:	2220      	movs	r2, #32
 800a0da:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0dc:	6626      	str	r6, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 800a0de:	66a6      	str	r6, [r4, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0e0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0e4:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e8:	2010      	movs	r0, #16
 800a0ea:	6822      	ldr	r2, [r4, #0]
 800a0ec:	6813      	ldr	r3, [r2, #0]
 800a0ee:	4383      	bics	r3, r0
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	f386 8810 	msr	PRIMASK, r6
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	6663      	str	r3, [r4, #100]	@ 0x64
 800a0fa:	e7c3      	b.n	800a084 <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a0fc:	2080      	movs	r0, #128	@ 0x80
 800a0fe:	0340      	lsls	r0, r0, #13
 800a100:	4203      	tst	r3, r0
 800a102:	d006      	beq.n	800a112 <HAL_UART_IRQHandler+0x266>
 800a104:	0276      	lsls	r6, r6, #9
 800a106:	d504      	bpl.n	800a112 <HAL_UART_IRQHandler+0x266>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a108:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800a10a:	0020      	movs	r0, r4
 800a10c:	f000 fb78 	bl	800a800 <HAL_UARTEx_WakeupCallback>
    return;
 800a110:	e751      	b.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a112:	2280      	movs	r2, #128	@ 0x80
 800a114:	4213      	tst	r3, r2
 800a116:	d003      	beq.n	800a120 <HAL_UART_IRQHandler+0x274>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a118:	4211      	tst	r1, r2
 800a11a:	d001      	beq.n	800a120 <HAL_UART_IRQHandler+0x274>
    if (huart->TxISR != NULL)
 800a11c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a11e:	e6d6      	b.n	8009ece <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a120:	2240      	movs	r2, #64	@ 0x40
 800a122:	4213      	tst	r3, r2
 800a124:	d100      	bne.n	800a128 <HAL_UART_IRQHandler+0x27c>
 800a126:	e746      	b.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
 800a128:	4211      	tst	r1, r2
 800a12a:	d100      	bne.n	800a12e <HAL_UART_IRQHandler+0x282>
 800a12c:	e743      	b.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a12e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a132:	2301      	movs	r3, #1
 800a134:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a138:	6821      	ldr	r1, [r4, #0]
 800a13a:	680b      	ldr	r3, [r1, #0]
 800a13c:	4393      	bics	r3, r2
 800a13e:	600b      	str	r3, [r1, #0]
 800a140:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a144:	2320      	movs	r3, #32
 800a146:	67e3      	str	r3, [r4, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a148:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a14a:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800a14c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  HAL_UART_TxCpltCallback(huart);
 800a14e:	f7ff fe3d 	bl	8009dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a152:	e730      	b.n	8009fb6 <HAL_UART_IRQHandler+0x10a>
 800a154:	0000080f 	.word	0x0000080f
 800a158:	04000120 	.word	0x04000120
 800a15c:	08009e93 	.word	0x08009e93
 800a160:	fffffeff 	.word	0xfffffeff
 800a164:	fffffedf 	.word	0xfffffedf

0800a168 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a168:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a16a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 800a16c:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a16e:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a170:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800a172:	2b01      	cmp	r3, #1
 800a174:	d106      	bne.n	800a184 <UART_DMARxHalfCplt+0x1c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a176:	0003      	movs	r3, r0
 800a178:	3358      	adds	r3, #88	@ 0x58
 800a17a:	8819      	ldrh	r1, [r3, #0]
 800a17c:	0849      	lsrs	r1, r1, #1
 800a17e:	f7ff fe93 	bl	8009ea8 <HAL_UARTEx_RxEventCallback>
}
 800a182:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800a184:	f7ff fe4f 	bl	8009e26 <HAL_UART_RxHalfCpltCallback>
}
 800a188:	e7fb      	b.n	800a182 <UART_DMARxHalfCplt+0x1a>
	...

0800a18c <UART_DMAReceiveCplt>:
{
 800a18c:	0003      	movs	r3, r0
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a18e:	699b      	ldr	r3, [r3, #24]
{
 800a190:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a192:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a194:	2b20      	cmp	r3, #32
 800a196:	d036      	beq.n	800a206 <UART_DMAReceiveCplt+0x7a>
    huart->RxXferCount = 0U;
 800a198:	0003      	movs	r3, r0
 800a19a:	2200      	movs	r2, #0
 800a19c:	335a      	adds	r3, #90	@ 0x5a
 800a19e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1a0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1aa:	6801      	ldr	r1, [r0, #0]
 800a1ac:	4d1d      	ldr	r5, [pc, #116]	@ (800a224 <UART_DMAReceiveCplt+0x98>)
 800a1ae:	680a      	ldr	r2, [r1, #0]
 800a1b0:	402a      	ands	r2, r5
 800a1b2:	600a      	str	r2, [r1, #0]
 800a1b4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1b8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1bc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1c0:	6801      	ldr	r1, [r0, #0]
 800a1c2:	688a      	ldr	r2, [r1, #8]
 800a1c4:	439a      	bics	r2, r3
 800a1c6:	608a      	str	r2, [r1, #8]
 800a1c8:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1cc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1d4:	0003      	movs	r3, r0
 800a1d6:	cb02      	ldmia	r3!, {r1}
 800a1d8:	3542      	adds	r5, #66	@ 0x42
 800a1da:	688a      	ldr	r2, [r1, #8]
 800a1dc:	35ff      	adds	r5, #255	@ 0xff
 800a1de:	43aa      	bics	r2, r5
 800a1e0:	608a      	str	r2, [r1, #8]
 800a1e2:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1ea:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d10a      	bne.n	800a206 <UART_DMAReceiveCplt+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1f4:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1f8:	2410      	movs	r4, #16
 800a1fa:	6802      	ldr	r2, [r0, #0]
 800a1fc:	6813      	ldr	r3, [r2, #0]
 800a1fe:	43a3      	bics	r3, r4
 800a200:	6013      	str	r3, [r2, #0]
 800a202:	f381 8810 	msr	PRIMASK, r1
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a206:	2300      	movs	r3, #0
 800a208:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a20a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d105      	bne.n	800a21c <UART_DMAReceiveCplt+0x90>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a210:	0003      	movs	r3, r0
 800a212:	3358      	adds	r3, #88	@ 0x58
 800a214:	8819      	ldrh	r1, [r3, #0]
 800a216:	f7ff fe47 	bl	8009ea8 <HAL_UARTEx_RxEventCallback>
}
 800a21a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_RxCpltCallback(huart);
 800a21c:	f7ff fe02 	bl	8009e24 <HAL_UART_RxCpltCallback>
}
 800a220:	e7fb      	b.n	800a21a <UART_DMAReceiveCplt+0x8e>
 800a222:	46c0      	nop			@ (mov r8, r8)
 800a224:	fffffeff 	.word	0xfffffeff

0800a228 <UART_SetConfig>:
{
 800a228:	b570      	push	{r4, r5, r6, lr}
 800a22a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a22c:	6925      	ldr	r5, [r4, #16]
 800a22e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a230:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a232:	4329      	orrs	r1, r5
 800a234:	6965      	ldr	r5, [r4, #20]
 800a236:	69c3      	ldr	r3, [r0, #28]
 800a238:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a23a:	6810      	ldr	r0, [r2, #0]
 800a23c:	4d51      	ldr	r5, [pc, #324]	@ (800a384 <UART_SetConfig+0x15c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a23e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a240:	4028      	ands	r0, r5
 800a242:	4301      	orrs	r1, r0
 800a244:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a246:	6851      	ldr	r1, [r2, #4]
 800a248:	484f      	ldr	r0, [pc, #316]	@ (800a388 <UART_SetConfig+0x160>)
  tmpreg |= huart->Init.OneBitSampling;
 800a24a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a24c:	4001      	ands	r1, r0
 800a24e:	68e0      	ldr	r0, [r4, #12]
 800a250:	4301      	orrs	r1, r0
 800a252:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a254:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a256:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800a258:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a25a:	4d4c      	ldr	r5, [pc, #304]	@ (800a38c <UART_SetConfig+0x164>)
 800a25c:	4028      	ands	r0, r5
 800a25e:	4301      	orrs	r1, r0
 800a260:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a262:	494b      	ldr	r1, [pc, #300]	@ (800a390 <UART_SetConfig+0x168>)
 800a264:	428a      	cmp	r2, r1
 800a266:	d116      	bne.n	800a296 <UART_SetConfig+0x6e>
 800a268:	2103      	movs	r1, #3
 800a26a:	4a4a      	ldr	r2, [pc, #296]	@ (800a394 <UART_SetConfig+0x16c>)
 800a26c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a26e:	400a      	ands	r2, r1
 800a270:	2a02      	cmp	r2, #2
 800a272:	d100      	bne.n	800a276 <UART_SetConfig+0x4e>
 800a274:	e081      	b.n	800a37a <UART_SetConfig+0x152>
 800a276:	428a      	cmp	r2, r1
 800a278:	d100      	bne.n	800a27c <UART_SetConfig+0x54>
 800a27a:	e078      	b.n	800a36e <UART_SetConfig+0x146>
 800a27c:	2a01      	cmp	r2, #1
 800a27e:	d019      	beq.n	800a2b4 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a280:	2280      	movs	r2, #128	@ 0x80
 800a282:	0212      	lsls	r2, r2, #8
 800a284:	4293      	cmp	r3, r2
 800a286:	d100      	bne.n	800a28a <UART_SetConfig+0x62>
 800a288:	e06b      	b.n	800a362 <UART_SetConfig+0x13a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a28a:	f7fe fabb 	bl	8008804 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a28e:	2800      	cmp	r0, #0
 800a290:	d100      	bne.n	800a294 <UART_SetConfig+0x6c>
 800a292:	e06a      	b.n	800a36a <UART_SetConfig+0x142>
 800a294:	e052      	b.n	800a33c <UART_SetConfig+0x114>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a296:	4940      	ldr	r1, [pc, #256]	@ (800a398 <UART_SetConfig+0x170>)
 800a298:	428a      	cmp	r2, r1
 800a29a:	d119      	bne.n	800a2d0 <UART_SetConfig+0xa8>
 800a29c:	21c0      	movs	r1, #192	@ 0xc0
 800a29e:	2080      	movs	r0, #128	@ 0x80
 800a2a0:	4a3c      	ldr	r2, [pc, #240]	@ (800a394 <UART_SetConfig+0x16c>)
 800a2a2:	0289      	lsls	r1, r1, #10
 800a2a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a2a6:	0280      	lsls	r0, r0, #10
 800a2a8:	400a      	ands	r2, r1
 800a2aa:	4282      	cmp	r2, r0
 800a2ac:	d065      	beq.n	800a37a <UART_SetConfig+0x152>
 800a2ae:	d808      	bhi.n	800a2c2 <UART_SetConfig+0x9a>
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	d0e5      	beq.n	800a280 <UART_SetConfig+0x58>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2b4:	2280      	movs	r2, #128	@ 0x80
 800a2b6:	0212      	lsls	r2, r2, #8
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d14c      	bne.n	800a356 <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetSysClockFreq();
 800a2bc:	f7fe f9e2 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 800a2c0:	e051      	b.n	800a366 <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2c2:	428a      	cmp	r2, r1
 800a2c4:	d053      	beq.n	800a36e <UART_SetConfig+0x146>
        ret = HAL_ERROR;
 800a2c6:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800a2cc:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800a2ce:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2d0:	2180      	movs	r1, #128	@ 0x80
 800a2d2:	4832      	ldr	r0, [pc, #200]	@ (800a39c <UART_SetConfig+0x174>)
 800a2d4:	0209      	lsls	r1, r1, #8
 800a2d6:	4282      	cmp	r2, r0
 800a2d8:	d040      	beq.n	800a35c <UART_SetConfig+0x134>
 800a2da:	4831      	ldr	r0, [pc, #196]	@ (800a3a0 <UART_SetConfig+0x178>)
 800a2dc:	1812      	adds	r2, r2, r0
 800a2de:	1e50      	subs	r0, r2, #1
 800a2e0:	4182      	sbcs	r2, r0
 800a2e2:	0110      	lsls	r0, r2, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2e4:	428b      	cmp	r3, r1
 800a2e6:	d11e      	bne.n	800a326 <UART_SetConfig+0xfe>
    switch (clocksource)
 800a2e8:	2808      	cmp	r0, #8
 800a2ea:	d8ec      	bhi.n	800a2c6 <UART_SetConfig+0x9e>
 800a2ec:	f7f5 ff14 	bl	8000118 <__gnu_thumb1_case_sqi>
 800a2f0:	eb05eb39 	.word	0xeb05eb39
 800a2f4:	ebebebe6 	.word	0xebebebe6
 800a2f8:	06          	.byte	0x06
 800a2f9:	00          	.byte	0x00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2fa:	4b2a      	ldr	r3, [pc, #168]	@ (800a3a4 <UART_SetConfig+0x17c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a2fc:	6861      	ldr	r1, [r4, #4]
 800a2fe:	005b      	lsls	r3, r3, #1
 800a300:	0848      	lsrs	r0, r1, #1
 800a302:	1818      	adds	r0, r3, r0
 800a304:	f7f5 ff30 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a308:	0002      	movs	r2, r0
 800a30a:	4b27      	ldr	r3, [pc, #156]	@ (800a3a8 <UART_SetConfig+0x180>)
 800a30c:	3a10      	subs	r2, #16
 800a30e:	429a      	cmp	r2, r3
 800a310:	d8d9      	bhi.n	800a2c6 <UART_SetConfig+0x9e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a312:	230f      	movs	r3, #15
 800a314:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a316:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a318:	439a      	bics	r2, r3
 800a31a:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a31c:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800a31e:	6822      	ldr	r2, [r4, #0]
 800a320:	4303      	orrs	r3, r0
 800a322:	60d3      	str	r3, [r2, #12]
 800a324:	e021      	b.n	800a36a <UART_SetConfig+0x142>
    switch (clocksource)
 800a326:	2808      	cmp	r0, #8
 800a328:	d8cd      	bhi.n	800a2c6 <UART_SetConfig+0x9e>
 800a32a:	f7f5 fef5 	bl	8000118 <__gnu_thumb1_case_sqi>
 800a32e:	ccae      	.short	0xccae
 800a330:	cc14cc24 	.word	0xcc14cc24
 800a334:	cccc      	.short	0xcccc
 800a336:	05          	.byte	0x05
 800a337:	00          	.byte	0x00
 800a338:	2080      	movs	r0, #128	@ 0x80
 800a33a:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a33c:	6861      	ldr	r1, [r4, #4]
 800a33e:	084b      	lsrs	r3, r1, #1
 800a340:	1818      	adds	r0, r3, r0
 800a342:	f7f5 ff11 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a346:	0002      	movs	r2, r0
 800a348:	4b17      	ldr	r3, [pc, #92]	@ (800a3a8 <UART_SetConfig+0x180>)
 800a34a:	3a10      	subs	r2, #16
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d8ba      	bhi.n	800a2c6 <UART_SetConfig+0x9e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	60d8      	str	r0, [r3, #12]
 800a354:	e009      	b.n	800a36a <UART_SetConfig+0x142>
        pclk = HAL_RCC_GetSysClockFreq();
 800a356:	f7fe f995 	bl	8008684 <HAL_RCC_GetSysClockFreq>
        break;
 800a35a:	e798      	b.n	800a28e <UART_SetConfig+0x66>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a35c:	428b      	cmp	r3, r1
 800a35e:	d000      	beq.n	800a362 <UART_SetConfig+0x13a>
 800a360:	e793      	b.n	800a28a <UART_SetConfig+0x62>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a362:	f7fe fa4f 	bl	8008804 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800a366:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 800a368:	d1c8      	bne.n	800a2fc <UART_SetConfig+0xd4>
        pclk = (uint32_t) HSI_VALUE;
 800a36a:	2000      	movs	r0, #0
 800a36c:	e7ac      	b.n	800a2c8 <UART_SetConfig+0xa0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a36e:	2280      	movs	r2, #128	@ 0x80
 800a370:	0212      	lsls	r2, r2, #8
 800a372:	4293      	cmp	r3, r2
 800a374:	d0c1      	beq.n	800a2fa <UART_SetConfig+0xd2>
        pclk = (uint32_t) HSI_VALUE;
 800a376:	480b      	ldr	r0, [pc, #44]	@ (800a3a4 <UART_SetConfig+0x17c>)
 800a378:	e7e0      	b.n	800a33c <UART_SetConfig+0x114>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a37a:	2080      	movs	r0, #128	@ 0x80
 800a37c:	0200      	lsls	r0, r0, #8
 800a37e:	4283      	cmp	r3, r0
 800a380:	d1dc      	bne.n	800a33c <UART_SetConfig+0x114>
 800a382:	e7bb      	b.n	800a2fc <UART_SetConfig+0xd4>
 800a384:	efff69f3 	.word	0xefff69f3
 800a388:	ffffcfff 	.word	0xffffcfff
 800a38c:	fffff4ff 	.word	0xfffff4ff
 800a390:	40013800 	.word	0x40013800
 800a394:	40021000 	.word	0x40021000
 800a398:	40004400 	.word	0x40004400
 800a39c:	40004800 	.word	0x40004800
 800a3a0:	bfffb400 	.word	0xbfffb400
 800a3a4:	007a1200 	.word	0x007a1200
 800a3a8:	0000ffef 	.word	0x0000ffef

0800a3ac <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800a3ae:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3b0:	071a      	lsls	r2, r3, #28
 800a3b2:	d506      	bpl.n	800a3c2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3b4:	6801      	ldr	r1, [r0, #0]
 800a3b6:	4c28      	ldr	r4, [pc, #160]	@ (800a458 <UART_AdvFeatureConfig+0xac>)
 800a3b8:	684a      	ldr	r2, [r1, #4]
 800a3ba:	4022      	ands	r2, r4
 800a3bc:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800a3be:	4322      	orrs	r2, r4
 800a3c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3c2:	07da      	lsls	r2, r3, #31
 800a3c4:	d506      	bpl.n	800a3d4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3c6:	6801      	ldr	r1, [r0, #0]
 800a3c8:	4c24      	ldr	r4, [pc, #144]	@ (800a45c <UART_AdvFeatureConfig+0xb0>)
 800a3ca:	684a      	ldr	r2, [r1, #4]
 800a3cc:	4022      	ands	r2, r4
 800a3ce:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800a3d0:	4322      	orrs	r2, r4
 800a3d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3d4:	079a      	lsls	r2, r3, #30
 800a3d6:	d506      	bpl.n	800a3e6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3d8:	6801      	ldr	r1, [r0, #0]
 800a3da:	4c21      	ldr	r4, [pc, #132]	@ (800a460 <UART_AdvFeatureConfig+0xb4>)
 800a3dc:	684a      	ldr	r2, [r1, #4]
 800a3de:	4022      	ands	r2, r4
 800a3e0:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800a3e2:	4322      	orrs	r2, r4
 800a3e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3e6:	075a      	lsls	r2, r3, #29
 800a3e8:	d506      	bpl.n	800a3f8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3ea:	6801      	ldr	r1, [r0, #0]
 800a3ec:	4c1d      	ldr	r4, [pc, #116]	@ (800a464 <UART_AdvFeatureConfig+0xb8>)
 800a3ee:	684a      	ldr	r2, [r1, #4]
 800a3f0:	4022      	ands	r2, r4
 800a3f2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800a3f4:	4322      	orrs	r2, r4
 800a3f6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3f8:	06da      	lsls	r2, r3, #27
 800a3fa:	d506      	bpl.n	800a40a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3fc:	6801      	ldr	r1, [r0, #0]
 800a3fe:	4c1a      	ldr	r4, [pc, #104]	@ (800a468 <UART_AdvFeatureConfig+0xbc>)
 800a400:	688a      	ldr	r2, [r1, #8]
 800a402:	4022      	ands	r2, r4
 800a404:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800a406:	4322      	orrs	r2, r4
 800a408:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a40a:	069a      	lsls	r2, r3, #26
 800a40c:	d506      	bpl.n	800a41c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a40e:	6801      	ldr	r1, [r0, #0]
 800a410:	4c16      	ldr	r4, [pc, #88]	@ (800a46c <UART_AdvFeatureConfig+0xc0>)
 800a412:	688a      	ldr	r2, [r1, #8]
 800a414:	4022      	ands	r2, r4
 800a416:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800a418:	4322      	orrs	r2, r4
 800a41a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a41c:	065a      	lsls	r2, r3, #25
 800a41e:	d510      	bpl.n	800a442 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a420:	6801      	ldr	r1, [r0, #0]
 800a422:	4d13      	ldr	r5, [pc, #76]	@ (800a470 <UART_AdvFeatureConfig+0xc4>)
 800a424:	684a      	ldr	r2, [r1, #4]
 800a426:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800a428:	402a      	ands	r2, r5
 800a42a:	4322      	orrs	r2, r4
 800a42c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a42e:	2280      	movs	r2, #128	@ 0x80
 800a430:	0352      	lsls	r2, r2, #13
 800a432:	4294      	cmp	r4, r2
 800a434:	d105      	bne.n	800a442 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a436:	684a      	ldr	r2, [r1, #4]
 800a438:	4c0e      	ldr	r4, [pc, #56]	@ (800a474 <UART_AdvFeatureConfig+0xc8>)
 800a43a:	4022      	ands	r2, r4
 800a43c:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800a43e:	4322      	orrs	r2, r4
 800a440:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a442:	061b      	lsls	r3, r3, #24
 800a444:	d506      	bpl.n	800a454 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a446:	6802      	ldr	r2, [r0, #0]
 800a448:	490b      	ldr	r1, [pc, #44]	@ (800a478 <UART_AdvFeatureConfig+0xcc>)
 800a44a:	6853      	ldr	r3, [r2, #4]
 800a44c:	400b      	ands	r3, r1
 800a44e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800a450:	430b      	orrs	r3, r1
 800a452:	6053      	str	r3, [r2, #4]
}
 800a454:	bd30      	pop	{r4, r5, pc}
 800a456:	46c0      	nop			@ (mov r8, r8)
 800a458:	ffff7fff 	.word	0xffff7fff
 800a45c:	fffdffff 	.word	0xfffdffff
 800a460:	fffeffff 	.word	0xfffeffff
 800a464:	fffbffff 	.word	0xfffbffff
 800a468:	ffffefff 	.word	0xffffefff
 800a46c:	ffffdfff 	.word	0xffffdfff
 800a470:	ffefffff 	.word	0xffefffff
 800a474:	ff9fffff 	.word	0xff9fffff
 800a478:	fff7ffff 	.word	0xfff7ffff

0800a47c <UART_WaitOnFlagUntilTimeout>:
{
 800a47c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a47e:	0004      	movs	r4, r0
 800a480:	000d      	movs	r5, r1
 800a482:	0017      	movs	r7, r2
 800a484:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a486:	6822      	ldr	r2, [r4, #0]
 800a488:	69d3      	ldr	r3, [r2, #28]
 800a48a:	402b      	ands	r3, r5
 800a48c:	1b5b      	subs	r3, r3, r5
 800a48e:	4259      	negs	r1, r3
 800a490:	414b      	adcs	r3, r1
 800a492:	42bb      	cmp	r3, r7
 800a494:	d001      	beq.n	800a49a <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800a496:	2000      	movs	r0, #0
 800a498:	e025      	b.n	800a4e6 <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800a49a:	9b08      	ldr	r3, [sp, #32]
 800a49c:	3301      	adds	r3, #1
 800a49e:	d0f3      	beq.n	800a488 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4a0:	f7fc fde2 	bl	8007068 <HAL_GetTick>
 800a4a4:	9b00      	ldr	r3, [sp, #0]
 800a4a6:	1ac0      	subs	r0, r0, r3
 800a4a8:	9b08      	ldr	r3, [sp, #32]
 800a4aa:	4298      	cmp	r0, r3
 800a4ac:	d82c      	bhi.n	800a508 <UART_WaitOnFlagUntilTimeout+0x8c>
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d02a      	beq.n	800a508 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	0752      	lsls	r2, r2, #29
 800a4b8:	d5e5      	bpl.n	800a486 <UART_WaitOnFlagUntilTimeout+0xa>
 800a4ba:	002a      	movs	r2, r5
 800a4bc:	2140      	movs	r1, #64	@ 0x40
 800a4be:	3a40      	subs	r2, #64	@ 0x40
 800a4c0:	438a      	bics	r2, r1
 800a4c2:	d0e0      	beq.n	800a486 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a4c4:	69da      	ldr	r2, [r3, #28]
 800a4c6:	2608      	movs	r6, #8
 800a4c8:	0011      	movs	r1, r2
 800a4ca:	4031      	ands	r1, r6
 800a4cc:	9101      	str	r1, [sp, #4]
 800a4ce:	4232      	tst	r2, r6
 800a4d0:	d00a      	beq.n	800a4e8 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 800a4d2:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4d4:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 800a4d6:	f7ff fba3 	bl	8009c20 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a4da:	19a3      	adds	r3, r4, r6
 800a4dc:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800a4de:	2300      	movs	r3, #0
          return HAL_ERROR;
 800a4e0:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 800a4e2:	3478      	adds	r4, #120	@ 0x78
 800a4e4:	7023      	strb	r3, [r4, #0]
}
 800a4e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4e8:	2280      	movs	r2, #128	@ 0x80
 800a4ea:	69d9      	ldr	r1, [r3, #28]
 800a4ec:	0112      	lsls	r2, r2, #4
 800a4ee:	4211      	tst	r1, r2
 800a4f0:	d0c9      	beq.n	800a486 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4f2:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800a4f4:	0020      	movs	r0, r4
 800a4f6:	f7ff fb93 	bl	8009c20 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4fa:	0023      	movs	r3, r4
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	3308      	adds	r3, #8
 800a500:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800a502:	9b01      	ldr	r3, [sp, #4]
 800a504:	3478      	adds	r4, #120	@ 0x78
 800a506:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800a508:	2003      	movs	r0, #3
 800a50a:	e7ec      	b.n	800a4e6 <UART_WaitOnFlagUntilTimeout+0x6a>

0800a50c <HAL_UART_Transmit>:
{
 800a50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a50e:	b087      	sub	sp, #28
 800a510:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800a512:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 800a514:	0004      	movs	r4, r0
 800a516:	000d      	movs	r5, r1
 800a518:	0017      	movs	r7, r2
    return HAL_BUSY;
 800a51a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800a51c:	2b20      	cmp	r3, #32
 800a51e:	d138      	bne.n	800a592 <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 800a520:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800a522:	2900      	cmp	r1, #0
 800a524:	d035      	beq.n	800a592 <HAL_UART_Transmit+0x86>
 800a526:	2a00      	cmp	r2, #0
 800a528:	d033      	beq.n	800a592 <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a52a:	2380      	movs	r3, #128	@ 0x80
 800a52c:	68a2      	ldr	r2, [r4, #8]
 800a52e:	015b      	lsls	r3, r3, #5
 800a530:	429a      	cmp	r2, r3
 800a532:	d104      	bne.n	800a53e <HAL_UART_Transmit+0x32>
 800a534:	6923      	ldr	r3, [r4, #16]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800a53a:	4201      	tst	r1, r0
 800a53c:	d129      	bne.n	800a592 <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a53e:	0023      	movs	r3, r4
 800a540:	2600      	movs	r6, #0
 800a542:	3308      	adds	r3, #8
 800a544:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a546:	2321      	movs	r3, #33	@ 0x21
 800a548:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800a54a:	f7fc fd8d 	bl	8007068 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800a54e:	0023      	movs	r3, r4
 800a550:	3350      	adds	r3, #80	@ 0x50
 800a552:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 800a554:	3302      	adds	r3, #2
 800a556:	9303      	str	r3, [sp, #12]
 800a558:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a55a:	2380      	movs	r3, #128	@ 0x80
 800a55c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800a55e:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a560:	015b      	lsls	r3, r3, #5
 800a562:	429a      	cmp	r2, r3
 800a564:	d104      	bne.n	800a570 <HAL_UART_Transmit+0x64>
 800a566:	6923      	ldr	r3, [r4, #16]
 800a568:	42b3      	cmp	r3, r6
 800a56a:	d101      	bne.n	800a570 <HAL_UART_Transmit+0x64>
      pdata16bits = (const uint16_t *) pData;
 800a56c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800a56e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800a570:	0023      	movs	r3, r4
 800a572:	3352      	adds	r3, #82	@ 0x52
 800a574:	881b      	ldrh	r3, [r3, #0]
 800a576:	b29a      	uxth	r2, r3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10c      	bne.n	800a596 <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a57c:	9b05      	ldr	r3, [sp, #20]
 800a57e:	2140      	movs	r1, #64	@ 0x40
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	0020      	movs	r0, r4
 800a584:	9b04      	ldr	r3, [sp, #16]
 800a586:	f7ff ff79 	bl	800a47c <UART_WaitOnFlagUntilTimeout>
 800a58a:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 800a58c:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a58e:	2800      	cmp	r0, #0
 800a590:	d10d      	bne.n	800a5ae <HAL_UART_Transmit+0xa2>
}
 800a592:	b007      	add	sp, #28
 800a594:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a596:	9b05      	ldr	r3, [sp, #20]
 800a598:	2200      	movs	r2, #0
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	2180      	movs	r1, #128	@ 0x80
 800a59e:	0020      	movs	r0, r4
 800a5a0:	9b04      	ldr	r3, [sp, #16]
 800a5a2:	f7ff ff6b 	bl	800a47c <UART_WaitOnFlagUntilTimeout>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d003      	beq.n	800a5b2 <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800a5aa:	2320      	movs	r3, #32
 800a5ac:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800a5ae:	2003      	movs	r0, #3
 800a5b0:	e7ef      	b.n	800a592 <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5b2:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800a5b4:	2d00      	cmp	r5, #0
 800a5b6:	d10b      	bne.n	800a5d0 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5b8:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800a5ba:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5bc:	05db      	lsls	r3, r3, #23
 800a5be:	0ddb      	lsrs	r3, r3, #23
 800a5c0:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800a5c2:	9b03      	ldr	r3, [sp, #12]
 800a5c4:	9a03      	ldr	r2, [sp, #12]
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	8013      	strh	r3, [r2, #0]
 800a5ce:	e7cf      	b.n	800a570 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5d0:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800a5d2:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5d4:	8513      	strh	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 800a5d6:	e7f4      	b.n	800a5c2 <HAL_UART_Transmit+0xb6>

0800a5d8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d8:	0003      	movs	r3, r0
{
 800a5da:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5dc:	2500      	movs	r5, #0
{
 800a5de:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 800a5e4:	f7fc fd40 	bl	8007068 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5e8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a5ea:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	071b      	lsls	r3, r3, #28
 800a5f0:	d51d      	bpl.n	800a62e <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5f2:	2180      	movs	r1, #128	@ 0x80
 800a5f4:	4b26      	ldr	r3, [pc, #152]	@ (800a690 <UART_CheckIdleState+0xb8>)
 800a5f6:	002a      	movs	r2, r5
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	0389      	lsls	r1, r1, #14
 800a5fc:	0003      	movs	r3, r0
 800a5fe:	0020      	movs	r0, r4
 800a600:	f7ff ff3c 	bl	800a47c <UART_WaitOnFlagUntilTimeout>
 800a604:	42a8      	cmp	r0, r5
 800a606:	d012      	beq.n	800a62e <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a608:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a60c:	2301      	movs	r3, #1
 800a60e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a612:	2080      	movs	r0, #128	@ 0x80
 800a614:	6822      	ldr	r2, [r4, #0]
 800a616:	6813      	ldr	r3, [r2, #0]
 800a618:	4383      	bics	r3, r0
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800a620:	2320      	movs	r3, #32
 800a622:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800a624:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800a626:	2300      	movs	r3, #0
 800a628:	3478      	adds	r4, #120	@ 0x78
 800a62a:	7023      	strb	r3, [r4, #0]
}
 800a62c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a62e:	0025      	movs	r5, r4
 800a630:	cd08      	ldmia	r5!, {r3}
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	075b      	lsls	r3, r3, #29
 800a636:	d523      	bpl.n	800a680 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a638:	2180      	movs	r1, #128	@ 0x80
 800a63a:	4b15      	ldr	r3, [pc, #84]	@ (800a690 <UART_CheckIdleState+0xb8>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	0020      	movs	r0, r4
 800a642:	0033      	movs	r3, r6
 800a644:	03c9      	lsls	r1, r1, #15
 800a646:	f7ff ff19 	bl	800a47c <UART_WaitOnFlagUntilTimeout>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d018      	beq.n	800a680 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a64e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a652:	2201      	movs	r2, #1
 800a654:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a658:	6821      	ldr	r1, [r4, #0]
 800a65a:	4e0e      	ldr	r6, [pc, #56]	@ (800a694 <UART_CheckIdleState+0xbc>)
 800a65c:	680b      	ldr	r3, [r1, #0]
 800a65e:	4033      	ands	r3, r6
 800a660:	600b      	str	r3, [r1, #0]
 800a662:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a666:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a66a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a66e:	6821      	ldr	r1, [r4, #0]
 800a670:	688b      	ldr	r3, [r1, #8]
 800a672:	4393      	bics	r3, r2
 800a674:	608b      	str	r3, [r1, #8]
 800a676:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800a67a:	2320      	movs	r3, #32
 800a67c:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800a67e:	e7d1      	b.n	800a624 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 800a680:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a682:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800a684:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a686:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a688:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a68a:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 800a68c:	e7cb      	b.n	800a626 <UART_CheckIdleState+0x4e>
 800a68e:	46c0      	nop			@ (mov r8, r8)
 800a690:	01ffffff 	.word	0x01ffffff
 800a694:	fffffedf 	.word	0xfffffedf

0800a698 <HAL_UART_Init>:
{
 800a698:	b510      	push	{r4, lr}
 800a69a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800a69c:	d101      	bne.n	800a6a2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800a69e:	2001      	movs	r0, #1
}
 800a6a0:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800a6a2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d104      	bne.n	800a6b2 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800a6a8:	0002      	movs	r2, r0
 800a6aa:	3278      	adds	r2, #120	@ 0x78
 800a6ac:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800a6ae:	f7f9 fa81 	bl	8003bb4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800a6b2:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a6b8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800a6ba:	6813      	ldr	r3, [r2, #0]
 800a6bc:	438b      	bics	r3, r1
 800a6be:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d002      	beq.n	800a6cc <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800a6c6:	0020      	movs	r0, r4
 800a6c8:	f7ff fe70 	bl	800a3ac <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6cc:	0020      	movs	r0, r4
 800a6ce:	f7ff fdab 	bl	800a228 <UART_SetConfig>
 800a6d2:	2801      	cmp	r0, #1
 800a6d4:	d0e3      	beq.n	800a69e <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	4907      	ldr	r1, [pc, #28]	@ (800a6f8 <HAL_UART_Init+0x60>)
 800a6da:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800a6dc:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6de:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6e0:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6e4:	689a      	ldr	r2, [r3, #8]
 800a6e6:	438a      	bics	r2, r1
 800a6e8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	6819      	ldr	r1, [r3, #0]
 800a6ee:	430a      	orrs	r2, r1
 800a6f0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800a6f2:	f7ff ff71 	bl	800a5d8 <UART_CheckIdleState>
 800a6f6:	e7d3      	b.n	800a6a0 <HAL_UART_Init+0x8>
 800a6f8:	ffffb7ff 	.word	0xffffb7ff

0800a6fc <UART_Start_Receive_DMA>:
{
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fe:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 800a700:	0002      	movs	r2, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a702:	0006      	movs	r6, r0
  huart->RxXferSize = Size;
 800a704:	3258      	adds	r2, #88	@ 0x58
  huart->pRxBuffPtr = pData;
 800a706:	6541      	str	r1, [r0, #84]	@ 0x54
{
 800a708:	000f      	movs	r7, r1
  huart->RxXferSize = Size;
 800a70a:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a70c:	2122      	movs	r1, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a70e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a710:	1d05      	adds	r5, r0, #4
{
 800a712:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 800a714:	6f40      	ldr	r0, [r0, #116]	@ 0x74
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a716:	3608      	adds	r6, #8
 800a718:	67f2      	str	r2, [r6, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a71a:	67e9      	str	r1, [r5, #124]	@ 0x7c
  if (huart->hdmarx != NULL)
 800a71c:	4290      	cmp	r0, r2
 800a71e:	d013      	beq.n	800a748 <UART_Start_Receive_DMA+0x4c>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a720:	491d      	ldr	r1, [pc, #116]	@ (800a798 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800a722:	6342      	str	r2, [r0, #52]	@ 0x34
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a724:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a726:	491d      	ldr	r1, [pc, #116]	@ (800a79c <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a728:	003a      	movs	r2, r7
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a72a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a72c:	491c      	ldr	r1, [pc, #112]	@ (800a7a0 <UART_Start_Receive_DMA+0xa4>)
 800a72e:	6301      	str	r1, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a730:	6821      	ldr	r1, [r4, #0]
 800a732:	3124      	adds	r1, #36	@ 0x24
 800a734:	f7fc fd32 	bl	800719c <HAL_DMA_Start_IT>
 800a738:	2800      	cmp	r0, #0
 800a73a:	d005      	beq.n	800a748 <UART_Start_Receive_DMA+0x4c>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a73c:	2310      	movs	r3, #16
      return HAL_ERROR;
 800a73e:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a740:	67f3      	str	r3, [r6, #124]	@ 0x7c
      huart->RxState = HAL_UART_STATE_READY;
 800a742:	18db      	adds	r3, r3, r3
 800a744:	67eb      	str	r3, [r5, #124]	@ 0x7c
}
 800a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00b      	beq.n	800a766 <UART_Start_Receive_DMA+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a74e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a752:	2301      	movs	r3, #1
 800a754:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a758:	6822      	ldr	r2, [r4, #0]
 800a75a:	33ff      	adds	r3, #255	@ 0xff
 800a75c:	6810      	ldr	r0, [r2, #0]
 800a75e:	4303      	orrs	r3, r0
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a766:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a76a:	2301      	movs	r3, #1
 800a76c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a770:	6821      	ldr	r1, [r4, #0]
 800a772:	688a      	ldr	r2, [r1, #8]
 800a774:	431a      	orrs	r2, r3
 800a776:	608a      	str	r2, [r1, #8]
 800a778:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a77c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a780:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a784:	6822      	ldr	r2, [r4, #0]
 800a786:	333f      	adds	r3, #63	@ 0x3f
 800a788:	6890      	ldr	r0, [r2, #8]
 800a78a:	4303      	orrs	r3, r0
 800a78c:	6093      	str	r3, [r2, #8]
 800a78e:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 800a792:	2000      	movs	r0, #0
 800a794:	e7d7      	b.n	800a746 <UART_Start_Receive_DMA+0x4a>
 800a796:	46c0      	nop			@ (mov r8, r8)
 800a798:	0800a18d 	.word	0x0800a18d
 800a79c:	0800a169 	.word	0x0800a169
 800a7a0:	08009e2b 	.word	0x08009e2b

0800a7a4 <HAL_UART_Receive_DMA>:
{
 800a7a4:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7a6:	3004      	adds	r0, #4
{
 800a7a8:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7aa:	6fc4      	ldr	r4, [r0, #124]	@ 0x7c
    return HAL_BUSY;
 800a7ac:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7ae:	2c20      	cmp	r4, #32
 800a7b0:	d125      	bne.n	800a7fe <HAL_UART_Receive_DMA+0x5a>
      return HAL_ERROR;
 800a7b2:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800a7b4:	2900      	cmp	r1, #0
 800a7b6:	d022      	beq.n	800a7fe <HAL_UART_Receive_DMA+0x5a>
 800a7b8:	2a00      	cmp	r2, #0
 800a7ba:	d020      	beq.n	800a7fe <HAL_UART_Receive_DMA+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7bc:	2080      	movs	r0, #128	@ 0x80
 800a7be:	689c      	ldr	r4, [r3, #8]
 800a7c0:	0140      	lsls	r0, r0, #5
 800a7c2:	4284      	cmp	r4, r0
 800a7c4:	d105      	bne.n	800a7d2 <HAL_UART_Receive_DMA+0x2e>
 800a7c6:	6918      	ldr	r0, [r3, #16]
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d102      	bne.n	800a7d2 <HAL_UART_Receive_DMA+0x2e>
      return HAL_ERROR;
 800a7cc:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800a7ce:	4201      	tst	r1, r0
 800a7d0:	d115      	bne.n	800a7fe <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	6618      	str	r0, [r3, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	6840      	ldr	r0, [r0, #4]
 800a7da:	0200      	lsls	r0, r0, #8
 800a7dc:	d50c      	bpl.n	800a7f8 <HAL_UART_Receive_DMA+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7de:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7e2:	2001      	movs	r0, #1
 800a7e4:	f380 8810 	msr	PRIMASK, r0
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a7e8:	2080      	movs	r0, #128	@ 0x80
 800a7ea:	681c      	ldr	r4, [r3, #0]
 800a7ec:	04c0      	lsls	r0, r0, #19
 800a7ee:	6826      	ldr	r6, [r4, #0]
 800a7f0:	4330      	orrs	r0, r6
 800a7f2:	6020      	str	r0, [r4, #0]
 800a7f4:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a7f8:	0018      	movs	r0, r3
 800a7fa:	f7ff ff7f 	bl	800a6fc <UART_Start_Receive_DMA>
}
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}

0800a800 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a800:	4770      	bx	lr
	...

0800a804 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a804:	1d82      	adds	r2, r0, #6
{
 800a806:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 800a808:	2000      	movs	r0, #0
 800a80a:	87d0      	strh	r0, [r2, #62]	@ 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a80c:	4a01      	ldr	r2, [pc, #4]	@ (800a814 <USB_EnableGlobalInt+0x10>)
 800a80e:	3302      	adds	r3, #2
 800a810:	87da      	strh	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
}
 800a812:	4770      	bx	lr
 800a814:	ffffbf80 	.word	0xffffbf80

0800a818 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a818:	3002      	adds	r0, #2
 800a81a:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 800a81c:	4a02      	ldr	r2, [pc, #8]	@ (800a828 <USB_DisableGlobalInt+0x10>)
 800a81e:	4013      	ands	r3, r2
 800a820:	87c3      	strh	r3, [r0, #62]	@ 0x3e

  return HAL_OK;
}
 800a822:	2000      	movs	r0, #0
 800a824:	4770      	bx	lr
 800a826:	46c0      	nop			@ (mov r8, r8)
 800a828:	0000407f 	.word	0x0000407f

0800a82c <USB_DevInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a82c:	1c82      	adds	r2, r0, #2
{
 800a82e:	0003      	movs	r3, r0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a830:	2101      	movs	r1, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a832:	2000      	movs	r0, #0
{
 800a834:	b082      	sub	sp, #8
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a836:	87d1      	strh	r1, [r2, #62]	@ 0x3e
  USBx->CNTR = 0U;
 800a838:	87d0      	strh	r0, [r2, #62]	@ 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a83a:	1d9a      	adds	r2, r3, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a83c:	3350      	adds	r3, #80	@ 0x50
  USBx->ISTR = 0U;
 800a83e:	87d0      	strh	r0, [r2, #62]	@ 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 800a840:	8018      	strh	r0, [r3, #0]

  return HAL_OK;
}
 800a842:	b002      	add	sp, #8
 800a844:	4770      	bx	lr
	...

0800a848 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a84a:	780e      	ldrb	r6, [r1, #0]
 800a84c:	4a7a      	ldr	r2, [pc, #488]	@ (800aa38 <USB_ActivateEndpoint+0x1f0>)
 800a84e:	00b3      	lsls	r3, r6, #2
 800a850:	18c3      	adds	r3, r0, r3
 800a852:	881c      	ldrh	r4, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800a854:	78cf      	ldrb	r7, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a856:	4014      	ands	r4, r2
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 800a858:	2201      	movs	r2, #1
{
 800a85a:	0005      	movs	r5, r0
      ret = HAL_ERROR;
 800a85c:	9200      	str	r2, [sp, #0]
  switch (ep->type)
 800a85e:	2f03      	cmp	r7, #3
 800a860:	d808      	bhi.n	800a874 <USB_ActivateEndpoint+0x2c>
 800a862:	0038      	movs	r0, r7
 800a864:	f7f5 fc62 	bl	800012c <__gnu_thumb1_case_uqi>
 800a868:	3c3f4202 	.word	0x3c3f4202
      wEpRegVal |= USB_EP_CONTROL;
 800a86c:	2280      	movs	r2, #128	@ 0x80
 800a86e:	0092      	lsls	r2, r2, #2
 800a870:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 800a872:	9700      	str	r7, [sp, #0]
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a874:	4a71      	ldr	r2, [pc, #452]	@ (800aa3c <USB_ActivateEndpoint+0x1f4>)
 800a876:	4314      	orrs	r4, r2
 800a878:	b2a4      	uxth	r4, r4
 800a87a:	801c      	strh	r4, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a87c:	8818      	ldrh	r0, [r3, #0]
 800a87e:	4c70      	ldr	r4, [pc, #448]	@ (800aa40 <USB_ActivateEndpoint+0x1f8>)
 800a880:	4020      	ands	r0, r4
 800a882:	4330      	orrs	r0, r6
 800a884:	4310      	orrs	r0, r2
 800a886:	b280      	uxth	r0, r0
 800a888:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a88a:	00f0      	lsls	r0, r6, #3
 800a88c:	4684      	mov	ip, r0
  if (ep->doublebuffer == 0U)
 800a88e:	7b08      	ldrb	r0, [r1, #12]
 800a890:	44ac      	add	ip, r5
 800a892:	3550      	adds	r5, #80	@ 0x50
 800a894:	9501      	str	r5, [sp, #4]
 800a896:	2800      	cmp	r0, #0
 800a898:	d000      	beq.n	800a89c <USB_ActivateEndpoint+0x54>
 800a89a:	e06b      	b.n	800a974 <USB_ActivateEndpoint+0x12c>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a89c:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 800a89e:	7848      	ldrb	r0, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8a0:	086d      	lsrs	r5, r5, #1
 800a8a2:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d023      	beq.n	800a8f0 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8a8:	2080      	movs	r0, #128	@ 0x80
 800a8aa:	9901      	ldr	r1, [sp, #4]
 800a8ac:	00c0      	lsls	r0, r0, #3
 800a8ae:	8809      	ldrh	r1, [r1, #0]
 800a8b0:	4461      	add	r1, ip
 800a8b2:	1809      	adds	r1, r1, r0
 800a8b4:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a8b6:	8819      	ldrh	r1, [r3, #0]
 800a8b8:	0649      	lsls	r1, r1, #25
 800a8ba:	d504      	bpl.n	800a8c6 <USB_ActivateEndpoint+0x7e>
 800a8bc:	8819      	ldrh	r1, [r3, #0]
 800a8be:	4021      	ands	r1, r4
 800a8c0:	4c60      	ldr	r4, [pc, #384]	@ (800aa44 <USB_ActivateEndpoint+0x1fc>)
 800a8c2:	4321      	orrs	r1, r4
 800a8c4:	8019      	strh	r1, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8c6:	4d60      	ldr	r5, [pc, #384]	@ (800aa48 <USB_ActivateEndpoint+0x200>)
 800a8c8:	2f01      	cmp	r7, #1
 800a8ca:	d100      	bne.n	800a8ce <USB_ActivateEndpoint+0x86>
 800a8cc:	e0ae      	b.n	800aa2c <USB_ActivateEndpoint+0x1e4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a8ce:	2120      	movs	r1, #32
 800a8d0:	881c      	ldrh	r4, [r3, #0]
 800a8d2:	402c      	ands	r4, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a8d4:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	b292      	uxth	r2, r2
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 800a8da:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a8dc:	801a      	strh	r2, [r3, #0]
}
 800a8de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 800a8e0:	22c0      	movs	r2, #192	@ 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a8e2:	00d2      	lsls	r2, r2, #3
 800a8e4:	4314      	orrs	r4, r2
  switch (ep->type)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	9200      	str	r2, [sp, #0]
 800a8ea:	e7c3      	b.n	800a874 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a8ec:	2280      	movs	r2, #128	@ 0x80
 800a8ee:	e7f8      	b.n	800a8e2 <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8f0:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a8f2:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8f4:	8807      	ldrh	r7, [r0, #0]
 800a8f6:	4855      	ldr	r0, [pc, #340]	@ (800aa4c <USB_ActivateEndpoint+0x204>)
 800a8f8:	4467      	add	r7, ip
 800a8fa:	183f      	adds	r7, r7, r0
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a8fc:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8fe:	803d      	strh	r5, [r7, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a900:	8805      	ldrh	r5, [r0, #0]
 800a902:	4853      	ldr	r0, [pc, #332]	@ (800aa50 <USB_ActivateEndpoint+0x208>)
 800a904:	4465      	add	r5, ip
 800a906:	182d      	adds	r5, r5, r0
 800a908:	882f      	ldrh	r7, [r5, #0]
 800a90a:	05bf      	lsls	r7, r7, #22
 800a90c:	0dbf      	lsrs	r7, r7, #22
 800a90e:	802f      	strh	r7, [r5, #0]
 800a910:	2900      	cmp	r1, #0
 800a912:	d115      	bne.n	800a940 <USB_ActivateEndpoint+0xf8>
 800a914:	2780      	movs	r7, #128	@ 0x80
 800a916:	8829      	ldrh	r1, [r5, #0]
 800a918:	023f      	lsls	r7, r7, #8
 800a91a:	4339      	orrs	r1, r7
 800a91c:	8029      	strh	r1, [r5, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a91e:	8819      	ldrh	r1, [r3, #0]
 800a920:	0449      	lsls	r1, r1, #17
 800a922:	d504      	bpl.n	800a92e <USB_ActivateEndpoint+0xe6>
 800a924:	8819      	ldrh	r1, [r3, #0]
 800a926:	4021      	ands	r1, r4
 800a928:	4c4a      	ldr	r4, [pc, #296]	@ (800aa54 <USB_ActivateEndpoint+0x20c>)
 800a92a:	4321      	orrs	r1, r4
 800a92c:	8019      	strh	r1, [r3, #0]
      if (ep->num == 0U)
 800a92e:	494a      	ldr	r1, [pc, #296]	@ (800aa58 <USB_ActivateEndpoint+0x210>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a930:	881c      	ldrh	r4, [r3, #0]
 800a932:	400c      	ands	r4, r1
 800a934:	21c0      	movs	r1, #192	@ 0xc0
      if (ep->num == 0U)
 800a936:	2e00      	cmp	r6, #0
 800a938:	d000      	beq.n	800a93c <USB_ActivateEndpoint+0xf4>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a93a:	2180      	movs	r1, #128	@ 0x80
 800a93c:	0189      	lsls	r1, r1, #6
 800a93e:	e7c9      	b.n	800a8d4 <USB_ActivateEndpoint+0x8c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a940:	293e      	cmp	r1, #62	@ 0x3e
 800a942:	d808      	bhi.n	800a956 <USB_ActivateEndpoint+0x10e>
 800a944:	2001      	movs	r0, #1
 800a946:	084f      	lsrs	r7, r1, #1
 800a948:	4001      	ands	r1, r0
 800a94a:	187f      	adds	r7, r7, r1
 800a94c:	8829      	ldrh	r1, [r5, #0]
 800a94e:	02bf      	lsls	r7, r7, #10
 800a950:	4339      	orrs	r1, r7
 800a952:	b289      	uxth	r1, r1
 800a954:	e7e2      	b.n	800a91c <USB_ActivateEndpoint+0xd4>
 800a956:	201f      	movs	r0, #31
 800a958:	094f      	lsrs	r7, r1, #5
 800a95a:	4001      	ands	r1, r0
 800a95c:	0008      	movs	r0, r1
 800a95e:	4241      	negs	r1, r0
 800a960:	4141      	adcs	r1, r0
 800a962:	1a7f      	subs	r7, r7, r1
 800a964:	8829      	ldrh	r1, [r5, #0]
 800a966:	02bf      	lsls	r7, r7, #10
 800a968:	4339      	orrs	r1, r7
 800a96a:	4f3c      	ldr	r7, [pc, #240]	@ (800aa5c <USB_ActivateEndpoint+0x214>)
 800a96c:	430f      	orrs	r7, r1
 800a96e:	b2bf      	uxth	r7, r7
 800a970:	802f      	strh	r7, [r5, #0]
 800a972:	e7d4      	b.n	800a91e <USB_ActivateEndpoint+0xd6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a974:	881d      	ldrh	r5, [r3, #0]
    if (ep->type == EP_TYPE_BULK)
 800a976:	2f02      	cmp	r7, #2
 800a978:	d13a      	bne.n	800a9f0 <USB_ActivateEndpoint+0x1a8>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a97a:	4e39      	ldr	r6, [pc, #228]	@ (800aa60 <USB_ActivateEndpoint+0x218>)
 800a97c:	4025      	ands	r5, r4
 800a97e:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a980:	9801      	ldr	r0, [sp, #4]
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a982:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a984:	8805      	ldrh	r5, [r0, #0]
 800a986:	2080      	movs	r0, #128	@ 0x80
 800a988:	890e      	ldrh	r6, [r1, #8]
 800a98a:	4465      	add	r5, ip
 800a98c:	00c0      	lsls	r0, r0, #3
 800a98e:	0876      	lsrs	r6, r6, #1
 800a990:	182d      	adds	r5, r5, r0
 800a992:	0076      	lsls	r6, r6, #1
 800a994:	9801      	ldr	r0, [sp, #4]
 800a996:	802e      	strh	r6, [r5, #0]
 800a998:	8805      	ldrh	r5, [r0, #0]
 800a99a:	894e      	ldrh	r6, [r1, #10]
 800a99c:	482b      	ldr	r0, [pc, #172]	@ (800aa4c <USB_ActivateEndpoint+0x204>)
 800a99e:	4465      	add	r5, ip
 800a9a0:	0876      	lsrs	r6, r6, #1
 800a9a2:	182d      	adds	r5, r5, r0
 800a9a4:	0076      	lsls	r6, r6, #1
 800a9a6:	802e      	strh	r6, [r5, #0]
    if (ep->is_in == 0U)
 800a9a8:	7849      	ldrb	r1, [r1, #1]
 800a9aa:	4e27      	ldr	r6, [pc, #156]	@ (800aa48 <USB_ActivateEndpoint+0x200>)
 800a9ac:	468c      	mov	ip, r1
 800a9ae:	2180      	movs	r1, #128	@ 0x80
 800a9b0:	4660      	mov	r0, ip
 800a9b2:	4d29      	ldr	r5, [pc, #164]	@ (800aa58 <USB_ActivateEndpoint+0x210>)
 800a9b4:	01c9      	lsls	r1, r1, #7
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d11f      	bne.n	800a9fa <USB_ActivateEndpoint+0x1b2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9ba:	881f      	ldrh	r7, [r3, #0]
 800a9bc:	420f      	tst	r7, r1
 800a9be:	d004      	beq.n	800a9ca <USB_ActivateEndpoint+0x182>
 800a9c0:	8819      	ldrh	r1, [r3, #0]
 800a9c2:	4f24      	ldr	r7, [pc, #144]	@ (800aa54 <USB_ActivateEndpoint+0x20c>)
 800a9c4:	4021      	ands	r1, r4
 800a9c6:	4339      	orrs	r1, r7
 800a9c8:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9ca:	8819      	ldrh	r1, [r3, #0]
 800a9cc:	0649      	lsls	r1, r1, #25
 800a9ce:	d504      	bpl.n	800a9da <USB_ActivateEndpoint+0x192>
 800a9d0:	8819      	ldrh	r1, [r3, #0]
 800a9d2:	4021      	ands	r1, r4
 800a9d4:	4c1b      	ldr	r4, [pc, #108]	@ (800aa44 <USB_ActivateEndpoint+0x1fc>)
 800a9d6:	4321      	orrs	r1, r4
 800a9d8:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a9da:	21c0      	movs	r1, #192	@ 0xc0
 800a9dc:	881c      	ldrh	r4, [r3, #0]
 800a9de:	0189      	lsls	r1, r1, #6
 800a9e0:	402c      	ands	r4, r5
 800a9e2:	4061      	eors	r1, r4
 800a9e4:	4311      	orrs	r1, r2
 800a9e6:	b289      	uxth	r1, r1
 800a9e8:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9ea:	8819      	ldrh	r1, [r3, #0]
 800a9ec:	4031      	ands	r1, r6
 800a9ee:	e772      	b.n	800a8d6 <USB_ActivateEndpoint+0x8e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a9f0:	4e1c      	ldr	r6, [pc, #112]	@ (800aa64 <USB_ActivateEndpoint+0x21c>)
 800a9f2:	4035      	ands	r5, r6
 800a9f4:	4315      	orrs	r5, r2
 800a9f6:	b2ad      	uxth	r5, r5
 800a9f8:	e7c2      	b.n	800a980 <USB_ActivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9fa:	8818      	ldrh	r0, [r3, #0]
 800a9fc:	4208      	tst	r0, r1
 800a9fe:	d004      	beq.n	800aa0a <USB_ActivateEndpoint+0x1c2>
 800aa00:	8819      	ldrh	r1, [r3, #0]
 800aa02:	4814      	ldr	r0, [pc, #80]	@ (800aa54 <USB_ActivateEndpoint+0x20c>)
 800aa04:	4021      	ands	r1, r4
 800aa06:	4301      	orrs	r1, r0
 800aa08:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa0a:	8819      	ldrh	r1, [r3, #0]
 800aa0c:	0649      	lsls	r1, r1, #25
 800aa0e:	d504      	bpl.n	800aa1a <USB_ActivateEndpoint+0x1d2>
 800aa10:	8819      	ldrh	r1, [r3, #0]
 800aa12:	4021      	ands	r1, r4
 800aa14:	4c0b      	ldr	r4, [pc, #44]	@ (800aa44 <USB_ActivateEndpoint+0x1fc>)
 800aa16:	4321      	orrs	r1, r4
 800aa18:	8019      	strh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 800aa1a:	2f01      	cmp	r7, #1
 800aa1c:	d009      	beq.n	800aa32 <USB_ActivateEndpoint+0x1ea>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa1e:	2120      	movs	r1, #32
 800aa20:	881c      	ldrh	r4, [r3, #0]
 800aa22:	4034      	ands	r4, r6
 800aa24:	4061      	eors	r1, r4
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa26:	4311      	orrs	r1, r2
 800aa28:	b289      	uxth	r1, r1
 800aa2a:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa2c:	8819      	ldrh	r1, [r3, #0]
 800aa2e:	4029      	ands	r1, r5
 800aa30:	e751      	b.n	800a8d6 <USB_ActivateEndpoint+0x8e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa32:	8819      	ldrh	r1, [r3, #0]
 800aa34:	4031      	ands	r1, r6
 800aa36:	e7f6      	b.n	800aa26 <USB_ActivateEndpoint+0x1de>
 800aa38:	ffff898f 	.word	0xffff898f
 800aa3c:	ffff8080 	.word	0xffff8080
 800aa40:	ffff8f8f 	.word	0xffff8f8f
 800aa44:	000080c0 	.word	0x000080c0
 800aa48:	ffff8fbf 	.word	0xffff8fbf
 800aa4c:	00000404 	.word	0x00000404
 800aa50:	00000406 	.word	0x00000406
 800aa54:	0000c080 	.word	0x0000c080
 800aa58:	ffffbf8f 	.word	0xffffbf8f
 800aa5c:	ffff8000 	.word	0xffff8000
 800aa60:	00008180 	.word	0x00008180
 800aa64:	ffff8e8f 	.word	0xffff8e8f

0800aa68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa68:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa6a:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 800aa6c:	784a      	ldrb	r2, [r1, #1]
  if (ep->doublebuffer == 0U)
 800aa6e:	7b09      	ldrb	r1, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	18c0      	adds	r0, r0, r3
 800aa74:	4b31      	ldr	r3, [pc, #196]	@ (800ab3c <USB_DeactivateEndpoint+0xd4>)
  if (ep->doublebuffer == 0U)
 800aa76:	2900      	cmp	r1, #0
 800aa78:	d11a      	bne.n	800aab0 <USB_DeactivateEndpoint+0x48>
    if (ep->is_in != 0U)
 800aa7a:	2a00      	cmp	r2, #0
 800aa7c:	d00c      	beq.n	800aa98 <USB_DeactivateEndpoint+0x30>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa7e:	8802      	ldrh	r2, [r0, #0]
 800aa80:	0652      	lsls	r2, r2, #25
 800aa82:	d505      	bpl.n	800aa90 <USB_DeactivateEndpoint+0x28>
 800aa84:	8802      	ldrh	r2, [r0, #0]
 800aa86:	492e      	ldr	r1, [pc, #184]	@ (800ab40 <USB_DeactivateEndpoint+0xd8>)
 800aa88:	400a      	ands	r2, r1
 800aa8a:	492e      	ldr	r1, [pc, #184]	@ (800ab44 <USB_DeactivateEndpoint+0xdc>)
 800aa8c:	430a      	orrs	r2, r1
 800aa8e:	8002      	strh	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa90:	8802      	ldrh	r2, [r0, #0]
 800aa92:	492d      	ldr	r1, [pc, #180]	@ (800ab48 <USB_DeactivateEndpoint+0xe0>)
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa94:	400a      	ands	r2, r1
 800aa96:	e02f      	b.n	800aaf8 <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa98:	8802      	ldrh	r2, [r0, #0]
 800aa9a:	0452      	lsls	r2, r2, #17
 800aa9c:	d505      	bpl.n	800aaaa <USB_DeactivateEndpoint+0x42>
 800aa9e:	8802      	ldrh	r2, [r0, #0]
 800aaa0:	4927      	ldr	r1, [pc, #156]	@ (800ab40 <USB_DeactivateEndpoint+0xd8>)
 800aaa2:	400a      	ands	r2, r1
 800aaa4:	4929      	ldr	r1, [pc, #164]	@ (800ab4c <USB_DeactivateEndpoint+0xe4>)
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aaaa:	8802      	ldrh	r2, [r0, #0]
 800aaac:	4928      	ldr	r1, [pc, #160]	@ (800ab50 <USB_DeactivateEndpoint+0xe8>)
 800aaae:	e7f1      	b.n	800aa94 <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 800aab0:	2780      	movs	r7, #128	@ 0x80
 800aab2:	4e23      	ldr	r6, [pc, #140]	@ (800ab40 <USB_DeactivateEndpoint+0xd8>)
 800aab4:	4d24      	ldr	r5, [pc, #144]	@ (800ab48 <USB_DeactivateEndpoint+0xe0>)
 800aab6:	4926      	ldr	r1, [pc, #152]	@ (800ab50 <USB_DeactivateEndpoint+0xe8>)
 800aab8:	01ff      	lsls	r7, r7, #7
 800aaba:	2a00      	cmp	r2, #0
 800aabc:	d121      	bne.n	800ab02 <USB_DeactivateEndpoint+0x9a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aabe:	8802      	ldrh	r2, [r0, #0]
 800aac0:	423a      	tst	r2, r7
 800aac2:	d004      	beq.n	800aace <USB_DeactivateEndpoint+0x66>
 800aac4:	8802      	ldrh	r2, [r0, #0]
 800aac6:	4c21      	ldr	r4, [pc, #132]	@ (800ab4c <USB_DeactivateEndpoint+0xe4>)
 800aac8:	4032      	ands	r2, r6
 800aaca:	4322      	orrs	r2, r4
 800aacc:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aace:	8802      	ldrh	r2, [r0, #0]
 800aad0:	4c20      	ldr	r4, [pc, #128]	@ (800ab54 <USB_DeactivateEndpoint+0xec>)
 800aad2:	0652      	lsls	r2, r2, #25
 800aad4:	d504      	bpl.n	800aae0 <USB_DeactivateEndpoint+0x78>
 800aad6:	8802      	ldrh	r2, [r0, #0]
 800aad8:	4032      	ands	r2, r6
 800aada:	4322      	orrs	r2, r4
 800aadc:	b292      	uxth	r2, r2
 800aade:	8002      	strh	r2, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 800aae0:	8802      	ldrh	r2, [r0, #0]
 800aae2:	4032      	ands	r2, r6
 800aae4:	4314      	orrs	r4, r2
 800aae6:	b2a4      	uxth	r4, r4
 800aae8:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aaea:	8802      	ldrh	r2, [r0, #0]
 800aaec:	400a      	ands	r2, r1
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	b292      	uxth	r2, r2
 800aaf2:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaf4:	8802      	ldrh	r2, [r0, #0]
 800aaf6:	402a      	ands	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800aafe:	2000      	movs	r0, #0
 800ab00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab02:	8802      	ldrh	r2, [r0, #0]
 800ab04:	4c14      	ldr	r4, [pc, #80]	@ (800ab58 <USB_DeactivateEndpoint+0xf0>)
 800ab06:	423a      	tst	r2, r7
 800ab08:	d004      	beq.n	800ab14 <USB_DeactivateEndpoint+0xac>
 800ab0a:	8802      	ldrh	r2, [r0, #0]
 800ab0c:	4032      	ands	r2, r6
 800ab0e:	4322      	orrs	r2, r4
 800ab10:	b292      	uxth	r2, r2
 800ab12:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab14:	8802      	ldrh	r2, [r0, #0]
 800ab16:	0652      	lsls	r2, r2, #25
 800ab18:	d504      	bpl.n	800ab24 <USB_DeactivateEndpoint+0xbc>
 800ab1a:	8802      	ldrh	r2, [r0, #0]
 800ab1c:	4f09      	ldr	r7, [pc, #36]	@ (800ab44 <USB_DeactivateEndpoint+0xdc>)
 800ab1e:	4032      	ands	r2, r6
 800ab20:	433a      	orrs	r2, r7
 800ab22:	8002      	strh	r2, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ab24:	8802      	ldrh	r2, [r0, #0]
 800ab26:	4032      	ands	r2, r6
 800ab28:	4314      	orrs	r4, r2
 800ab2a:	b2a4      	uxth	r4, r4
 800ab2c:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ab2e:	8802      	ldrh	r2, [r0, #0]
 800ab30:	402a      	ands	r2, r5
 800ab32:	431a      	orrs	r2, r3
 800ab34:	b292      	uxth	r2, r2
 800ab36:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ab38:	8802      	ldrh	r2, [r0, #0]
 800ab3a:	e7ab      	b.n	800aa94 <USB_DeactivateEndpoint+0x2c>
 800ab3c:	ffff8080 	.word	0xffff8080
 800ab40:	ffff8f8f 	.word	0xffff8f8f
 800ab44:	000080c0 	.word	0x000080c0
 800ab48:	ffff8fbf 	.word	0xffff8fbf
 800ab4c:	0000c080 	.word	0x0000c080
 800ab50:	ffffbf8f 	.word	0xffffbf8f
 800ab54:	ffff80c0 	.word	0xffff80c0
 800ab58:	ffffc080 	.word	0xffffc080

0800ab5c <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ab5c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 800ab5e:	7849      	ldrb	r1, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4a0c      	ldr	r2, [pc, #48]	@ (800ab94 <USB_EPSetStall+0x38>)
 800ab64:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 800ab66:	2900      	cmp	r1, #0
 800ab68:	d009      	beq.n	800ab7e <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ab6a:	8801      	ldrh	r1, [r0, #0]
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab98 <USB_EPSetStall+0x3c>)
 800ab6e:	4019      	ands	r1, r3
 800ab70:	2310      	movs	r3, #16
 800ab72:	404b      	eors	r3, r1
 800ab74:	4313      	orrs	r3, r2
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ab7e:	8801      	ldrh	r1, [r0, #0]
 800ab80:	4b06      	ldr	r3, [pc, #24]	@ (800ab9c <USB_EPSetStall+0x40>)
 800ab82:	4019      	ands	r1, r3
 800ab84:	2380      	movs	r3, #128	@ 0x80
 800ab86:	015b      	lsls	r3, r3, #5
 800ab88:	404b      	eors	r3, r1
 800ab8a:	431a      	orrs	r2, r3
 800ab8c:	b292      	uxth	r2, r2
 800ab8e:	8002      	strh	r2, [r0, #0]
 800ab90:	e7f3      	b.n	800ab7a <USB_EPSetStall+0x1e>
 800ab92:	46c0      	nop			@ (mov r8, r8)
 800ab94:	ffff8080 	.word	0xffff8080
 800ab98:	ffff8fbf 	.word	0xffff8fbf
 800ab9c:	ffffbf8f 	.word	0xffffbf8f

0800aba0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800aba0:	7b0b      	ldrb	r3, [r1, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d119      	bne.n	800abda <USB_EPClearStall+0x3a>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aba6:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 800aba8:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	18c0      	adds	r0, r0, r3
 800abae:	8803      	ldrh	r3, [r0, #0]
    if (ep->is_in != 0U)
 800abb0:	2a00      	cmp	r2, #0
 800abb2:	d014      	beq.n	800abde <USB_EPClearStall+0x3e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abb4:	065b      	lsls	r3, r3, #25
 800abb6:	d505      	bpl.n	800abc4 <USB_EPClearStall+0x24>
 800abb8:	8803      	ldrh	r3, [r0, #0]
 800abba:	4a10      	ldr	r2, [pc, #64]	@ (800abfc <USB_EPClearStall+0x5c>)
 800abbc:	4013      	ands	r3, r2
 800abbe:	4a10      	ldr	r2, [pc, #64]	@ (800ac00 <USB_EPClearStall+0x60>)
 800abc0:	4313      	orrs	r3, r2
 800abc2:	8003      	strh	r3, [r0, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abc4:	78cb      	ldrb	r3, [r1, #3]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d007      	beq.n	800abda <USB_EPClearStall+0x3a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800abca:	4b0e      	ldr	r3, [pc, #56]	@ (800ac04 <USB_EPClearStall+0x64>)
 800abcc:	8802      	ldrh	r2, [r0, #0]
 800abce:	401a      	ands	r2, r3
 800abd0:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800abd2:	4053      	eors	r3, r2
 800abd4:	4a0c      	ldr	r2, [pc, #48]	@ (800ac08 <USB_EPClearStall+0x68>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 800abda:	2000      	movs	r0, #0
 800abdc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abde:	045b      	lsls	r3, r3, #17
 800abe0:	d505      	bpl.n	800abee <USB_EPClearStall+0x4e>
 800abe2:	8803      	ldrh	r3, [r0, #0]
 800abe4:	4a05      	ldr	r2, [pc, #20]	@ (800abfc <USB_EPClearStall+0x5c>)
 800abe6:	4013      	ands	r3, r2
 800abe8:	4a08      	ldr	r2, [pc, #32]	@ (800ac0c <USB_EPClearStall+0x6c>)
 800abea:	4313      	orrs	r3, r2
 800abec:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800abee:	4b08      	ldr	r3, [pc, #32]	@ (800ac10 <USB_EPClearStall+0x70>)
 800abf0:	8802      	ldrh	r2, [r0, #0]
 800abf2:	401a      	ands	r2, r3
 800abf4:	23c0      	movs	r3, #192	@ 0xc0
 800abf6:	019b      	lsls	r3, r3, #6
 800abf8:	e7eb      	b.n	800abd2 <USB_EPClearStall+0x32>
 800abfa:	46c0      	nop			@ (mov r8, r8)
 800abfc:	ffff8f8f 	.word	0xffff8f8f
 800ac00:	000080c0 	.word	0x000080c0
 800ac04:	ffff8fbf 	.word	0xffff8fbf
 800ac08:	00008080 	.word	0x00008080
 800ac0c:	0000c080 	.word	0x0000c080
 800ac10:	ffffbf8f 	.word	0xffffbf8f

0800ac14 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800ac14:	2900      	cmp	r1, #0
 800ac16:	d102      	bne.n	800ac1e <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ac18:	2380      	movs	r3, #128	@ 0x80
 800ac1a:	304c      	adds	r0, #76	@ 0x4c
 800ac1c:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 800ac1e:	2000      	movs	r0, #0
 800ac20:	4770      	bx	lr

0800ac22 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ac22:	2280      	movs	r2, #128	@ 0x80
 800ac24:	3058      	adds	r0, #88	@ 0x58
 800ac26:	8803      	ldrh	r3, [r0, #0]
 800ac28:	0212      	lsls	r2, r2, #8
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 800ac2e:	2000      	movs	r0, #0
 800ac30:	4770      	bx	lr

0800ac32 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ac32:	3006      	adds	r0, #6
 800ac34:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 800ac36:	b280      	uxth	r0, r0
  return tmpreg;
}
 800ac38:	4770      	bx	lr

0800ac3a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac3a:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac3c:	2480      	movs	r4, #128	@ 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ac3e:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac40:	00e4      	lsls	r4, r4, #3
 800ac42:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ac44:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac46:	1880      	adds	r0, r0, r2

  for (count = n; count != 0U; count--)
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	18cb      	adds	r3, r1, r3
 800ac4c:	1a40      	subs	r0, r0, r1
 800ac4e:	180c      	adds	r4, r1, r0
 800ac50:	428b      	cmp	r3, r1
 800ac52:	d100      	bne.n	800ac56 <USB_WritePMA+0x1c>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 800ac54:	bd30      	pop	{r4, r5, pc}
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ac56:	784a      	ldrb	r2, [r1, #1]
 800ac58:	780d      	ldrb	r5, [r1, #0]
 800ac5a:	0212      	lsls	r2, r2, #8
 800ac5c:	432a      	orrs	r2, r5
    *pdwVal = (WrVal & 0xFFFFU);
 800ac5e:	8022      	strh	r2, [r4, #0]
    pBuf++;
 800ac60:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 800ac62:	e7f4      	b.n	800ac4e <USB_WritePMA+0x14>

0800ac64 <USB_EPStartXfer>:
{
 800ac64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac66:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 800ac68:	7849      	ldrb	r1, [r1, #1]
{
 800ac6a:	0005      	movs	r5, r0
    if (ep->doublebuffer == 0U)
 800ac6c:	7b22      	ldrb	r2, [r4, #12]
{
 800ac6e:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 800ac70:	2901      	cmp	r1, #1
 800ac72:	d000      	beq.n	800ac76 <USB_EPStartXfer+0x12>
 800ac74:	e11b      	b.n	800aeae <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	69a7      	ldr	r7, [r4, #24]
 800ac7a:	9302      	str	r3, [sp, #8]
 800ac7c:	429f      	cmp	r7, r3
 800ac7e:	d900      	bls.n	800ac82 <USB_EPStartXfer+0x1e>
 800ac80:	001f      	movs	r7, r3
    if (ep->doublebuffer == 0U)
 800ac82:	002b      	movs	r3, r5
 800ac84:	3350      	adds	r3, #80	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ac86:	6961      	ldr	r1, [r4, #20]
 800ac88:	9301      	str	r3, [sp, #4]
    if (ep->doublebuffer == 0U)
 800ac8a:	2a00      	cmp	r2, #0
 800ac8c:	d11d      	bne.n	800acca <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ac8e:	b2bf      	uxth	r7, r7
 800ac90:	003b      	movs	r3, r7
 800ac92:	88e2      	ldrh	r2, [r4, #6]
 800ac94:	0028      	movs	r0, r5
 800ac96:	f7ff ffd0 	bl	800ac3a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ac9a:	9b01      	ldr	r3, [sp, #4]
 800ac9c:	4abe      	ldr	r2, [pc, #760]	@ (800af98 <USB_EPStartXfer+0x334>)
 800ac9e:	8819      	ldrh	r1, [r3, #0]
 800aca0:	7823      	ldrb	r3, [r4, #0]
 800aca2:	18aa      	adds	r2, r5, r2
 800aca4:	00db      	lsls	r3, r3, #3
 800aca6:	1852      	adds	r2, r2, r1
 800aca8:	189b      	adds	r3, r3, r2
 800acaa:	801f      	strh	r7, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800acac:	7823      	ldrb	r3, [r4, #0]
 800acae:	4abb      	ldr	r2, [pc, #748]	@ (800af9c <USB_EPStartXfer+0x338>)
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	18eb      	adds	r3, r5, r3
 800acb4:	8819      	ldrh	r1, [r3, #0]
 800acb6:	4011      	ands	r1, r2
 800acb8:	2230      	movs	r2, #48	@ 0x30
 800acba:	404a      	eors	r2, r1
 800acbc:	49b8      	ldr	r1, [pc, #736]	@ (800afa0 <USB_EPStartXfer+0x33c>)
 800acbe:	430a      	orrs	r2, r1
 800acc0:	b292      	uxth	r2, r2
 800acc2:	801a      	strh	r2, [r3, #0]
  return HAL_OK;
 800acc4:	2000      	movs	r0, #0
}
 800acc6:	b007      	add	sp, #28
 800acc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800acca:	7822      	ldrb	r2, [r4, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 800accc:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800acce:	0093      	lsls	r3, r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800acd0:	00d2      	lsls	r2, r2, #3
 800acd2:	9203      	str	r2, [sp, #12]
      if (ep->type == EP_TYPE_BULK)
 800acd4:	78e0      	ldrb	r0, [r4, #3]
 800acd6:	18eb      	adds	r3, r5, r3
 800acd8:	2802      	cmp	r0, #2
 800acda:	d000      	beq.n	800acde <USB_EPStartXfer+0x7a>
 800acdc:	e0d1      	b.n	800ae82 <USB_EPStartXfer+0x21e>
        if (ep->xfer_len_db > ep->maxpacket)
 800acde:	9a02      	ldr	r2, [sp, #8]
 800ace0:	42b2      	cmp	r2, r6
 800ace2:	d300      	bcc.n	800ace6 <USB_EPStartXfer+0x82>
 800ace4:	e0bb      	b.n	800ae5e <USB_EPStartXfer+0x1fa>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ace6:	881a      	ldrh	r2, [r3, #0]
 800ace8:	48ae      	ldr	r0, [pc, #696]	@ (800afa4 <USB_EPStartXfer+0x340>)
          ep->xfer_len_db -= len;
 800acea:	1bf6      	subs	r6, r6, r7
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800acec:	4010      	ands	r0, r2
 800acee:	4aae      	ldr	r2, [pc, #696]	@ (800afa8 <USB_EPStartXfer+0x344>)
 800acf0:	4310      	orrs	r0, r2
 800acf2:	8018      	strh	r0, [r3, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	2040      	movs	r0, #64	@ 0x40
 800acf8:	469c      	mov	ip, r3
 800acfa:	4662      	mov	r2, ip
 800acfc:	4002      	ands	r2, r0
 800acfe:	9205      	str	r2, [sp, #20]
 800ad00:	4662      	mov	r2, ip
            ep->xfer_buff += len;
 800ad02:	19cb      	adds	r3, r1, r7
 800ad04:	9304      	str	r3, [sp, #16]
          ep->xfer_len_db -= len;
 800ad06:	6226      	str	r6, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ad08:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ad0a:	4202      	tst	r2, r0
 800ad0c:	d055      	beq.n	800adba <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ad0e:	9a01      	ldr	r2, [sp, #4]
 800ad10:	8812      	ldrh	r2, [r2, #0]
 800ad12:	4694      	mov	ip, r2
 800ad14:	4aa5      	ldr	r2, [pc, #660]	@ (800afac <USB_EPStartXfer+0x348>)
 800ad16:	18a8      	adds	r0, r5, r2
 800ad18:	9a03      	ldr	r2, [sp, #12]
 800ad1a:	4460      	add	r0, ip
 800ad1c:	1882      	adds	r2, r0, r2
 800ad1e:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad20:	8962      	ldrh	r2, [r4, #10]
 800ad22:	0028      	movs	r0, r5
 800ad24:	f7ff ff89 	bl	800ac3a <USB_WritePMA>
            ep->xfer_buff += len;
 800ad28:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 800ad2a:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 800ad2c:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 800ad2e:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 800ad30:	42b2      	cmp	r2, r6
 800ad32:	d201      	bcs.n	800ad38 <USB_EPStartXfer+0xd4>
              ep->xfer_len_db -= len;
 800ad34:	1bf3      	subs	r3, r6, r7
 800ad36:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad38:	7862      	ldrb	r2, [r4, #1]
 800ad3a:	6223      	str	r3, [r4, #32]
 800ad3c:	b2b3      	uxth	r3, r6
 800ad3e:	2a00      	cmp	r2, #0
 800ad40:	d12e      	bne.n	800ada0 <USB_EPStartXfer+0x13c>
 800ad42:	9a01      	ldr	r2, [sp, #4]
 800ad44:	4994      	ldr	r1, [pc, #592]	@ (800af98 <USB_EPStartXfer+0x334>)
 800ad46:	8810      	ldrh	r0, [r2, #0]
 800ad48:	7822      	ldrb	r2, [r4, #0]
 800ad4a:	1869      	adds	r1, r5, r1
 800ad4c:	1809      	adds	r1, r1, r0
 800ad4e:	00d2      	lsls	r2, r2, #3
 800ad50:	1852      	adds	r2, r2, r1
 800ad52:	8811      	ldrh	r1, [r2, #0]
 800ad54:	0589      	lsls	r1, r1, #22
 800ad56:	0d89      	lsrs	r1, r1, #22
 800ad58:	8011      	strh	r1, [r2, #0]
 800ad5a:	2e00      	cmp	r6, #0
 800ad5c:	d10a      	bne.n	800ad74 <USB_EPStartXfer+0x110>
 800ad5e:	2080      	movs	r0, #128	@ 0x80
 800ad60:	8811      	ldrh	r1, [r2, #0]
 800ad62:	0200      	lsls	r0, r0, #8
 800ad64:	4301      	orrs	r1, r0
 800ad66:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad68:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad6a:	9904      	ldr	r1, [sp, #16]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad6c:	0028      	movs	r0, r5
 800ad6e:	f7ff ff64 	bl	800ac3a <USB_WritePMA>
 800ad72:	e79b      	b.n	800acac <USB_EPStartXfer+0x48>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad74:	2e3e      	cmp	r6, #62	@ 0x3e
 800ad76:	d808      	bhi.n	800ad8a <USB_EPStartXfer+0x126>
 800ad78:	2101      	movs	r1, #1
 800ad7a:	0870      	lsrs	r0, r6, #1
 800ad7c:	4031      	ands	r1, r6
 800ad7e:	1840      	adds	r0, r0, r1
 800ad80:	8811      	ldrh	r1, [r2, #0]
 800ad82:	0280      	lsls	r0, r0, #10
 800ad84:	4301      	orrs	r1, r0
 800ad86:	b289      	uxth	r1, r1
 800ad88:	e7ed      	b.n	800ad66 <USB_EPStartXfer+0x102>
 800ad8a:	201f      	movs	r0, #31
 800ad8c:	4030      	ands	r0, r6
 800ad8e:	0971      	lsrs	r1, r6, #5
 800ad90:	4246      	negs	r6, r0
 800ad92:	4170      	adcs	r0, r6
 800ad94:	1a09      	subs	r1, r1, r0
 800ad96:	8810      	ldrh	r0, [r2, #0]
 800ad98:	0289      	lsls	r1, r1, #10
 800ad9a:	4308      	orrs	r0, r1
 800ad9c:	4984      	ldr	r1, [pc, #528]	@ (800afb0 <USB_EPStartXfer+0x34c>)
 800ad9e:	e7f1      	b.n	800ad84 <USB_EPStartXfer+0x120>
 800ada0:	2a01      	cmp	r2, #1
 800ada2:	d1e1      	bne.n	800ad68 <USB_EPStartXfer+0x104>
 800ada4:	002a      	movs	r2, r5
 800ada6:	497c      	ldr	r1, [pc, #496]	@ (800af98 <USB_EPStartXfer+0x334>)
 800ada8:	3250      	adds	r2, #80	@ 0x50
 800adaa:	8810      	ldrh	r0, [r2, #0]
 800adac:	7822      	ldrb	r2, [r4, #0]
 800adae:	1869      	adds	r1, r5, r1
 800adb0:	00d2      	lsls	r2, r2, #3
 800adb2:	1809      	adds	r1, r1, r0
 800adb4:	1852      	adds	r2, r2, r1
 800adb6:	8013      	strh	r3, [r2, #0]
 800adb8:	e7d6      	b.n	800ad68 <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800adba:	9a01      	ldr	r2, [sp, #4]
 800adbc:	8812      	ldrh	r2, [r2, #0]
 800adbe:	4694      	mov	ip, r2
 800adc0:	4a75      	ldr	r2, [pc, #468]	@ (800af98 <USB_EPStartXfer+0x334>)
 800adc2:	18a8      	adds	r0, r5, r2
 800adc4:	9a03      	ldr	r2, [sp, #12]
 800adc6:	4460      	add	r0, ip
 800adc8:	1882      	adds	r2, r0, r2
 800adca:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800adcc:	8922      	ldrh	r2, [r4, #8]
 800adce:	0028      	movs	r0, r5
 800add0:	f7ff ff33 	bl	800ac3a <USB_WritePMA>
            ep->xfer_buff += len;
 800add4:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 800add6:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 800add8:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 800adda:	9b05      	ldr	r3, [sp, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800addc:	42b2      	cmp	r2, r6
 800adde:	d201      	bcs.n	800ade4 <USB_EPStartXfer+0x180>
              ep->xfer_len_db -= len;
 800ade0:	1bf3      	subs	r3, r6, r7
 800ade2:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ade4:	7862      	ldrb	r2, [r4, #1]
 800ade6:	6223      	str	r3, [r4, #32]
 800ade8:	b2b3      	uxth	r3, r6
 800adea:	2a00      	cmp	r2, #0
 800adec:	d12a      	bne.n	800ae44 <USB_EPStartXfer+0x1e0>
 800adee:	9a01      	ldr	r2, [sp, #4]
 800adf0:	496e      	ldr	r1, [pc, #440]	@ (800afac <USB_EPStartXfer+0x348>)
 800adf2:	8810      	ldrh	r0, [r2, #0]
 800adf4:	7822      	ldrb	r2, [r4, #0]
 800adf6:	1869      	adds	r1, r5, r1
 800adf8:	1809      	adds	r1, r1, r0
 800adfa:	00d2      	lsls	r2, r2, #3
 800adfc:	1852      	adds	r2, r2, r1
 800adfe:	8811      	ldrh	r1, [r2, #0]
 800ae00:	0589      	lsls	r1, r1, #22
 800ae02:	0d89      	lsrs	r1, r1, #22
 800ae04:	8011      	strh	r1, [r2, #0]
 800ae06:	2e00      	cmp	r6, #0
 800ae08:	d106      	bne.n	800ae18 <USB_EPStartXfer+0x1b4>
 800ae0a:	2080      	movs	r0, #128	@ 0x80
 800ae0c:	8811      	ldrh	r1, [r2, #0]
 800ae0e:	0200      	lsls	r0, r0, #8
 800ae10:	4301      	orrs	r1, r0
 800ae12:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae14:	8962      	ldrh	r2, [r4, #10]
 800ae16:	e7a8      	b.n	800ad6a <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae18:	2e3e      	cmp	r6, #62	@ 0x3e
 800ae1a:	d808      	bhi.n	800ae2e <USB_EPStartXfer+0x1ca>
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	0870      	lsrs	r0, r6, #1
 800ae20:	4031      	ands	r1, r6
 800ae22:	1840      	adds	r0, r0, r1
 800ae24:	8811      	ldrh	r1, [r2, #0]
 800ae26:	0280      	lsls	r0, r0, #10
 800ae28:	4301      	orrs	r1, r0
 800ae2a:	b289      	uxth	r1, r1
 800ae2c:	e7f1      	b.n	800ae12 <USB_EPStartXfer+0x1ae>
 800ae2e:	201f      	movs	r0, #31
 800ae30:	0971      	lsrs	r1, r6, #5
 800ae32:	4006      	ands	r6, r0
 800ae34:	4270      	negs	r0, r6
 800ae36:	4146      	adcs	r6, r0
 800ae38:	8810      	ldrh	r0, [r2, #0]
 800ae3a:	1b89      	subs	r1, r1, r6
 800ae3c:	0289      	lsls	r1, r1, #10
 800ae3e:	4308      	orrs	r0, r1
 800ae40:	495b      	ldr	r1, [pc, #364]	@ (800afb0 <USB_EPStartXfer+0x34c>)
 800ae42:	e7f1      	b.n	800ae28 <USB_EPStartXfer+0x1c4>
 800ae44:	2a01      	cmp	r2, #1
 800ae46:	d1e5      	bne.n	800ae14 <USB_EPStartXfer+0x1b0>
 800ae48:	002a      	movs	r2, r5
 800ae4a:	4958      	ldr	r1, [pc, #352]	@ (800afac <USB_EPStartXfer+0x348>)
 800ae4c:	3250      	adds	r2, #80	@ 0x50
 800ae4e:	8810      	ldrh	r0, [r2, #0]
 800ae50:	7822      	ldrb	r2, [r4, #0]
 800ae52:	1869      	adds	r1, r5, r1
 800ae54:	00d2      	lsls	r2, r2, #3
 800ae56:	1809      	adds	r1, r1, r0
 800ae58:	1852      	adds	r2, r2, r1
 800ae5a:	8013      	strh	r3, [r2, #0]
 800ae5c:	e7da      	b.n	800ae14 <USB_EPStartXfer+0x1b0>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ae5e:	8818      	ldrh	r0, [r3, #0]
 800ae60:	4f54      	ldr	r7, [pc, #336]	@ (800afb4 <USB_EPStartXfer+0x350>)
 800ae62:	4a4f      	ldr	r2, [pc, #316]	@ (800afa0 <USB_EPStartXfer+0x33c>)
 800ae64:	4038      	ands	r0, r7
 800ae66:	4310      	orrs	r0, r2
 800ae68:	b280      	uxth	r0, r0
 800ae6a:	8018      	strh	r0, [r3, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ae6c:	9b01      	ldr	r3, [sp, #4]
 800ae6e:	9a03      	ldr	r2, [sp, #12]
 800ae70:	8818      	ldrh	r0, [r3, #0]
 800ae72:	4b49      	ldr	r3, [pc, #292]	@ (800af98 <USB_EPStartXfer+0x334>)
 800ae74:	18eb      	adds	r3, r5, r3
 800ae76:	181b      	adds	r3, r3, r0
 800ae78:	189a      	adds	r2, r3, r2
 800ae7a:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ae7c:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae7e:	8922      	ldrh	r2, [r4, #8]
 800ae80:	e774      	b.n	800ad6c <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ae82:	8818      	ldrh	r0, [r3, #0]
        ep->xfer_len_db -= len;
 800ae84:	1bf6      	subs	r6, r6, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae86:	9a01      	ldr	r2, [sp, #4]
        ep->xfer_len_db -= len;
 800ae88:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae8a:	8816      	ldrh	r6, [r2, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ae8c:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ae8e:	0640      	lsls	r0, r0, #25
 800ae90:	d507      	bpl.n	800aea2 <USB_EPStartXfer+0x23e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae92:	4a46      	ldr	r2, [pc, #280]	@ (800afac <USB_EPStartXfer+0x348>)
 800ae94:	18a8      	adds	r0, r5, r2
 800ae96:	9a03      	ldr	r2, [sp, #12]
 800ae98:	1980      	adds	r0, r0, r6
 800ae9a:	1882      	adds	r2, r0, r2
 800ae9c:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae9e:	8962      	ldrh	r2, [r4, #10]
 800aea0:	e764      	b.n	800ad6c <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aea2:	4a3d      	ldr	r2, [pc, #244]	@ (800af98 <USB_EPStartXfer+0x334>)
 800aea4:	18a8      	adds	r0, r5, r2
 800aea6:	9a03      	ldr	r2, [sp, #12]
 800aea8:	1980      	adds	r0, r0, r6
 800aeaa:	1882      	adds	r2, r0, r2
 800aeac:	e7e6      	b.n	800ae7c <USB_EPStartXfer+0x218>
    if (ep->doublebuffer == 0U)
 800aeae:	2a00      	cmp	r2, #0
 800aeb0:	d11c      	bne.n	800aeec <USB_EPStartXfer+0x288>
      if (ep->xfer_len > ep->maxpacket)
 800aeb2:	69a3      	ldr	r3, [r4, #24]
 800aeb4:	6921      	ldr	r1, [r4, #16]
 800aeb6:	428b      	cmp	r3, r1
 800aeb8:	d901      	bls.n	800aebe <USB_EPStartXfer+0x25a>
        ep->xfer_len -= len;
 800aeba:	1a5a      	subs	r2, r3, r1
        len = ep->maxpacket;
 800aebc:	000b      	movs	r3, r1
 800aebe:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800aec0:	002a      	movs	r2, r5
 800aec2:	493a      	ldr	r1, [pc, #232]	@ (800afac <USB_EPStartXfer+0x348>)
 800aec4:	3250      	adds	r2, #80	@ 0x50
 800aec6:	8810      	ldrh	r0, [r2, #0]
 800aec8:	7822      	ldrb	r2, [r4, #0]
 800aeca:	1869      	adds	r1, r5, r1
 800aecc:	00d2      	lsls	r2, r2, #3
 800aece:	1809      	adds	r1, r1, r0
 800aed0:	1852      	adds	r2, r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aed2:	8811      	ldrh	r1, [r2, #0]
 800aed4:	0589      	lsls	r1, r1, #22
 800aed6:	0d89      	lsrs	r1, r1, #22
 800aed8:	8011      	strh	r1, [r2, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d000      	beq.n	800aee0 <USB_EPStartXfer+0x27c>
 800aede:	e0d6      	b.n	800b08e <USB_EPStartXfer+0x42a>
 800aee0:	2180      	movs	r1, #128	@ 0x80
 800aee2:	8813      	ldrh	r3, [r2, #0]
 800aee4:	0209      	lsls	r1, r1, #8
 800aee6:	430b      	orrs	r3, r1
 800aee8:	8013      	strh	r3, [r2, #0]
 800aeea:	e03d      	b.n	800af68 <USB_EPStartXfer+0x304>
      if (ep->type == EP_TYPE_BULK)
 800aeec:	78e3      	ldrb	r3, [r4, #3]
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d000      	beq.n	800aef4 <USB_EPStartXfer+0x290>
 800aef2:	e08c      	b.n	800b00e <USB_EPStartXfer+0x3aa>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800aef4:	2900      	cmp	r1, #0
 800aef6:	d124      	bne.n	800af42 <USB_EPStartXfer+0x2de>
 800aef8:	0006      	movs	r6, r0
 800aefa:	4a27      	ldr	r2, [pc, #156]	@ (800af98 <USB_EPStartXfer+0x334>)
 800aefc:	3650      	adds	r6, #80	@ 0x50
 800aefe:	8833      	ldrh	r3, [r6, #0]
 800af00:	7820      	ldrb	r0, [r4, #0]
 800af02:	18aa      	adds	r2, r5, r2
 800af04:	18d2      	adds	r2, r2, r3
 800af06:	00c0      	lsls	r0, r0, #3
 800af08:	1812      	adds	r2, r2, r0
 800af0a:	8813      	ldrh	r3, [r2, #0]
 800af0c:	059b      	lsls	r3, r3, #22
 800af0e:	0d9b      	lsrs	r3, r3, #22
 800af10:	8013      	strh	r3, [r2, #0]
 800af12:	6923      	ldr	r3, [r4, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d134      	bne.n	800af82 <USB_EPStartXfer+0x31e>
 800af18:	2780      	movs	r7, #128	@ 0x80
 800af1a:	8811      	ldrh	r1, [r2, #0]
 800af1c:	023f      	lsls	r7, r7, #8
 800af1e:	4339      	orrs	r1, r7
 800af20:	8011      	strh	r1, [r2, #0]
 800af22:	4a22      	ldr	r2, [pc, #136]	@ (800afac <USB_EPStartXfer+0x348>)
 800af24:	8831      	ldrh	r1, [r6, #0]
 800af26:	18aa      	adds	r2, r5, r2
 800af28:	1852      	adds	r2, r2, r1
 800af2a:	1812      	adds	r2, r2, r0
 800af2c:	8811      	ldrh	r1, [r2, #0]
 800af2e:	0589      	lsls	r1, r1, #22
 800af30:	0d89      	lsrs	r1, r1, #22
 800af32:	8011      	strh	r1, [r2, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d154      	bne.n	800afe2 <USB_EPStartXfer+0x37e>
 800af38:	2180      	movs	r1, #128	@ 0x80
 800af3a:	8813      	ldrh	r3, [r2, #0]
 800af3c:	0209      	lsls	r1, r1, #8
 800af3e:	430b      	orrs	r3, r1
 800af40:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 800af42:	69e3      	ldr	r3, [r4, #28]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00f      	beq.n	800af68 <USB_EPStartXfer+0x304>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800af48:	7823      	ldrb	r3, [r4, #0]
 800af4a:	491b      	ldr	r1, [pc, #108]	@ (800afb8 <USB_EPStartXfer+0x354>)
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	18eb      	adds	r3, r5, r3
 800af50:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800af52:	400a      	ands	r2, r1
 800af54:	428a      	cmp	r2, r1
 800af56:	d001      	beq.n	800af5c <USB_EPStartXfer+0x2f8>
 800af58:	2a00      	cmp	r2, #0
 800af5a:	d105      	bne.n	800af68 <USB_EPStartXfer+0x304>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800af5c:	881a      	ldrh	r2, [r3, #0]
 800af5e:	4911      	ldr	r1, [pc, #68]	@ (800afa4 <USB_EPStartXfer+0x340>)
 800af60:	400a      	ands	r2, r1
 800af62:	4916      	ldr	r1, [pc, #88]	@ (800afbc <USB_EPStartXfer+0x358>)
 800af64:	430a      	orrs	r2, r1
 800af66:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af68:	7823      	ldrb	r3, [r4, #0]
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	18ed      	adds	r5, r5, r3
 800af6e:	882a      	ldrh	r2, [r5, #0]
 800af70:	4b13      	ldr	r3, [pc, #76]	@ (800afc0 <USB_EPStartXfer+0x35c>)
 800af72:	401a      	ands	r2, r3
 800af74:	23c0      	movs	r3, #192	@ 0xc0
 800af76:	019b      	lsls	r3, r3, #6
 800af78:	4053      	eors	r3, r2
 800af7a:	4a12      	ldr	r2, [pc, #72]	@ (800afc4 <USB_EPStartXfer+0x360>)
 800af7c:	4313      	orrs	r3, r2
 800af7e:	802b      	strh	r3, [r5, #0]
 800af80:	e6a0      	b.n	800acc4 <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800af82:	2b3e      	cmp	r3, #62	@ 0x3e
 800af84:	d820      	bhi.n	800afc8 <USB_EPStartXfer+0x364>
 800af86:	2101      	movs	r1, #1
 800af88:	085f      	lsrs	r7, r3, #1
 800af8a:	4019      	ands	r1, r3
 800af8c:	187f      	adds	r7, r7, r1
 800af8e:	8811      	ldrh	r1, [r2, #0]
 800af90:	02bf      	lsls	r7, r7, #10
 800af92:	4339      	orrs	r1, r7
 800af94:	b289      	uxth	r1, r1
 800af96:	e7c3      	b.n	800af20 <USB_EPStartXfer+0x2bc>
 800af98:	00000402 	.word	0x00000402
 800af9c:	ffff8fbf 	.word	0xffff8fbf
 800afa0:	ffff8080 	.word	0xffff8080
 800afa4:	ffff8f8f 	.word	0xffff8f8f
 800afa8:	00008180 	.word	0x00008180
 800afac:	00000406 	.word	0x00000406
 800afb0:	ffff8000 	.word	0xffff8000
 800afb4:	ffff8e8f 	.word	0xffff8e8f
 800afb8:	00004040 	.word	0x00004040
 800afbc:	000080c0 	.word	0x000080c0
 800afc0:	ffffbf8f 	.word	0xffffbf8f
 800afc4:	00008080 	.word	0x00008080
 800afc8:	271f      	movs	r7, #31
 800afca:	401f      	ands	r7, r3
 800afcc:	0039      	movs	r1, r7
 800afce:	424f      	negs	r7, r1
 800afd0:	414f      	adcs	r7, r1
 800afd2:	0959      	lsrs	r1, r3, #5
 800afd4:	1bc9      	subs	r1, r1, r7
 800afd6:	8817      	ldrh	r7, [r2, #0]
 800afd8:	9101      	str	r1, [sp, #4]
 800afda:	0289      	lsls	r1, r1, #10
 800afdc:	430f      	orrs	r7, r1
 800afde:	4937      	ldr	r1, [pc, #220]	@ (800b0bc <USB_EPStartXfer+0x458>)
 800afe0:	e7d7      	b.n	800af92 <USB_EPStartXfer+0x32e>
 800afe2:	2b3e      	cmp	r3, #62	@ 0x3e
 800afe4:	d808      	bhi.n	800aff8 <USB_EPStartXfer+0x394>
 800afe6:	2001      	movs	r0, #1
 800afe8:	0859      	lsrs	r1, r3, #1
 800afea:	4003      	ands	r3, r0
 800afec:	18c9      	adds	r1, r1, r3
 800afee:	8813      	ldrh	r3, [r2, #0]
 800aff0:	0289      	lsls	r1, r1, #10
 800aff2:	430b      	orrs	r3, r1
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	e7a3      	b.n	800af40 <USB_EPStartXfer+0x2dc>
 800aff8:	201f      	movs	r0, #31
 800affa:	0959      	lsrs	r1, r3, #5
 800affc:	4003      	ands	r3, r0
 800affe:	4258      	negs	r0, r3
 800b000:	4143      	adcs	r3, r0
 800b002:	1ac9      	subs	r1, r1, r3
 800b004:	8813      	ldrh	r3, [r2, #0]
 800b006:	0289      	lsls	r1, r1, #10
 800b008:	4319      	orrs	r1, r3
 800b00a:	4b2c      	ldr	r3, [pc, #176]	@ (800b0bc <USB_EPStartXfer+0x458>)
 800b00c:	e7f1      	b.n	800aff2 <USB_EPStartXfer+0x38e>
        return HAL_ERROR;
 800b00e:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 800b010:	4283      	cmp	r3, r0
 800b012:	d000      	beq.n	800b016 <USB_EPStartXfer+0x3b2>
 800b014:	e657      	b.n	800acc6 <USB_EPStartXfer+0x62>
        if (ep->xfer_len > ep->maxpacket)
 800b016:	69a3      	ldr	r3, [r4, #24]
 800b018:	6922      	ldr	r2, [r4, #16]
          ep->xfer_len = 0U;
 800b01a:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d901      	bls.n	800b024 <USB_EPStartXfer+0x3c0>
          ep->xfer_len -= len;
 800b020:	1a98      	subs	r0, r3, r2
          len = ep->maxpacket;
 800b022:	0013      	movs	r3, r2
 800b024:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b026:	2900      	cmp	r1, #0
 800b028:	d19e      	bne.n	800af68 <USB_EPStartXfer+0x304>
 800b02a:	002e      	movs	r6, r5
 800b02c:	4a24      	ldr	r2, [pc, #144]	@ (800b0c0 <USB_EPStartXfer+0x45c>)
 800b02e:	3650      	adds	r6, #80	@ 0x50
 800b030:	8831      	ldrh	r1, [r6, #0]
 800b032:	7820      	ldrb	r0, [r4, #0]
 800b034:	18aa      	adds	r2, r5, r2
 800b036:	1852      	adds	r2, r2, r1
 800b038:	00c0      	lsls	r0, r0, #3
 800b03a:	1812      	adds	r2, r2, r0
 800b03c:	8811      	ldrh	r1, [r2, #0]
 800b03e:	0589      	lsls	r1, r1, #22
 800b040:	0d89      	lsrs	r1, r1, #22
 800b042:	8011      	strh	r1, [r2, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10a      	bne.n	800b05e <USB_EPStartXfer+0x3fa>
 800b048:	2780      	movs	r7, #128	@ 0x80
 800b04a:	8811      	ldrh	r1, [r2, #0]
 800b04c:	023f      	lsls	r7, r7, #8
 800b04e:	4339      	orrs	r1, r7
 800b050:	8011      	strh	r1, [r2, #0]
 800b052:	4a1c      	ldr	r2, [pc, #112]	@ (800b0c4 <USB_EPStartXfer+0x460>)
 800b054:	8831      	ldrh	r1, [r6, #0]
 800b056:	18aa      	adds	r2, r5, r2
 800b058:	1852      	adds	r2, r2, r1
 800b05a:	1812      	adds	r2, r2, r0
 800b05c:	e739      	b.n	800aed2 <USB_EPStartXfer+0x26e>
 800b05e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b060:	d808      	bhi.n	800b074 <USB_EPStartXfer+0x410>
 800b062:	2101      	movs	r1, #1
 800b064:	085f      	lsrs	r7, r3, #1
 800b066:	4019      	ands	r1, r3
 800b068:	187f      	adds	r7, r7, r1
 800b06a:	8811      	ldrh	r1, [r2, #0]
 800b06c:	02bf      	lsls	r7, r7, #10
 800b06e:	4339      	orrs	r1, r7
 800b070:	b289      	uxth	r1, r1
 800b072:	e7ed      	b.n	800b050 <USB_EPStartXfer+0x3ec>
 800b074:	271f      	movs	r7, #31
 800b076:	401f      	ands	r7, r3
 800b078:	0039      	movs	r1, r7
 800b07a:	424f      	negs	r7, r1
 800b07c:	414f      	adcs	r7, r1
 800b07e:	0959      	lsrs	r1, r3, #5
 800b080:	1bc9      	subs	r1, r1, r7
 800b082:	8817      	ldrh	r7, [r2, #0]
 800b084:	9101      	str	r1, [sp, #4]
 800b086:	0289      	lsls	r1, r1, #10
 800b088:	430f      	orrs	r7, r1
 800b08a:	490c      	ldr	r1, [pc, #48]	@ (800b0bc <USB_EPStartXfer+0x458>)
 800b08c:	e7ef      	b.n	800b06e <USB_EPStartXfer+0x40a>
 800b08e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b090:	d808      	bhi.n	800b0a4 <USB_EPStartXfer+0x440>
 800b092:	2001      	movs	r0, #1
 800b094:	0859      	lsrs	r1, r3, #1
 800b096:	4003      	ands	r3, r0
 800b098:	18c9      	adds	r1, r1, r3
 800b09a:	8813      	ldrh	r3, [r2, #0]
 800b09c:	0289      	lsls	r1, r1, #10
 800b09e:	430b      	orrs	r3, r1
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	e721      	b.n	800aee8 <USB_EPStartXfer+0x284>
 800b0a4:	201f      	movs	r0, #31
 800b0a6:	0959      	lsrs	r1, r3, #5
 800b0a8:	4003      	ands	r3, r0
 800b0aa:	4258      	negs	r0, r3
 800b0ac:	4143      	adcs	r3, r0
 800b0ae:	1ac9      	subs	r1, r1, r3
 800b0b0:	8813      	ldrh	r3, [r2, #0]
 800b0b2:	0289      	lsls	r1, r1, #10
 800b0b4:	4319      	orrs	r1, r3
 800b0b6:	4b01      	ldr	r3, [pc, #4]	@ (800b0bc <USB_EPStartXfer+0x458>)
 800b0b8:	e7f1      	b.n	800b09e <USB_EPStartXfer+0x43a>
 800b0ba:	46c0      	nop			@ (mov r8, r8)
 800b0bc:	ffff8000 	.word	0xffff8000
 800b0c0:	00000402 	.word	0x00000402
 800b0c4:	00000406 	.word	0x00000406

0800b0c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0ca:	2580      	movs	r5, #128	@ 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b0cc:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0ce:	00ed      	lsls	r5, r5, #3
 800b0d0:	1952      	adds	r2, r2, r5

  for (count = n; count != 0U; count--)
 800b0d2:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 800b0d4:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0d6:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 800b0d8:	1a47      	subs	r7, r0, r1
 800b0da:	19ea      	adds	r2, r5, r7
 800b0dc:	2e00      	cmp	r6, #0
 800b0de:	d106      	bne.n	800b0ee <USB_ReadPMA+0x26>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b0e0:	07db      	lsls	r3, r3, #31
 800b0e2:	d503      	bpl.n	800b0ec <USB_ReadPMA+0x24>
 800b0e4:	0064      	lsls	r4, r4, #1
  {
    RdVal = *pdwVal;
 800b0e6:	1900      	adds	r0, r0, r4
 800b0e8:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b0ea:	550b      	strb	r3, [r1, r4]
  }
}
 800b0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800b0ee:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 800b0f0:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 800b0f2:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b0f4:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b0f6:	0a12      	lsrs	r2, r2, #8
 800b0f8:	706a      	strb	r2, [r5, #1]
    pBuf++;
 800b0fa:	3502      	adds	r5, #2
  for (count = n; count != 0U; count--)
 800b0fc:	e7ed      	b.n	800b0da <USB_ReadPMA+0x12>
	...

0800b100 <rfalAnalogConfigInitialize>:
{
    /* Use default Analog configuration settings in Flash by default. */

/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = rfalAnalogConfigCustomSettings;
 800b100:	4b04      	ldr	r3, [pc, #16]	@ (800b114 <rfalAnalogConfigInitialize+0x14>)
 800b102:	4a05      	ldr	r2, [pc, #20]	@ (800b118 <rfalAnalogConfigInitialize+0x18>)
 800b104:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
 800b106:	4a05      	ldr	r2, [pc, #20]	@ (800b11c <rfalAnalogConfigInitialize+0x1c>)
 800b108:	8812      	ldrh	r2, [r2, #0]
 800b10a:	809a      	strh	r2, [r3, #4]
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = rfalAnalogConfigDefaultSettings;
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800b10c:	2201      	movs	r2, #1
 800b10e:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 800b110:	4770      	bx	lr
 800b112:	46c0      	nop			@ (mov r8, r8)
 800b114:	20001a38 	.word	0x20001a38
 800b118:	080143fa 	.word	0x080143fa
 800b11c:	080143f8 	.word	0x080143f8

0800b120 <rfalSetAnalogConfig>:
    return RFAL_ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 800b120:	b5f0      	push	{r4, r5, r6, r7, lr}
    rfalAnalogConfigNum numConfigSet;
    const rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = RFAL_ERR_NONE;
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 800b122:	4b2f      	ldr	r3, [pc, #188]	@ (800b1e0 <rfalSetAnalogConfig+0xc0>)
{
 800b124:	0006      	movs	r6, r0
    if (true != gRfalAnalogConfigMgmt.ready)
 800b126:	799b      	ldrb	r3, [r3, #6]
    {
        return RFAL_ERR_REQUEST;
 800b128:	2005      	movs	r0, #5
{
 800b12a:	b085      	sub	sp, #20
    if (true != gRfalAnalogConfigMgmt.ready)
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d025      	beq.n	800b17c <rfalSetAnalogConfig+0x5c>
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800b130:	23fe      	movs	r3, #254	@ 0xfe
 800b132:	01db      	lsls	r3, r3, #7
 800b134:	4033      	ands	r3, r6
 800b136:	9303      	str	r3, [sp, #12]
 800b138:	230f      	movs	r3, #15
    rfalAnalogConfigOffset configOffset = 0;
 800b13a:	2400      	movs	r4, #0
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800b13c:	4033      	ands	r3, r6
 800b13e:	9301      	str	r3, [sp, #4]
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800b140:	4b27      	ldr	r3, [pc, #156]	@ (800b1e0 <rfalSetAnalogConfig+0xc0>)
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800b142:	9a03      	ldr	r2, [sp, #12]
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 800b144:	681d      	ldr	r5, [r3, #0]
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800b146:	2a00      	cmp	r2, #0
 800b148:	d01a      	beq.n	800b180 <rfalSetAnalogConfig+0x60>
 800b14a:	4a26      	ldr	r2, [pc, #152]	@ (800b1e4 <rfalSetAnalogConfig+0xc4>)
 800b14c:	4332      	orrs	r2, r6
 800b14e:	9901      	ldr	r1, [sp, #4]
 800b150:	2900      	cmp	r1, #0
 800b152:	d117      	bne.n	800b184 <rfalSetAnalogConfig+0x64>
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800b154:	310f      	adds	r1, #15
 800b156:	430a      	orrs	r2, r1
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
    }
    
    
    i = *configOffset;
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800b158:	8899      	ldrh	r1, [r3, #4]
 800b15a:	428c      	cmp	r4, r1
 800b15c:	d20d      	bcs.n	800b17a <rfalSetAnalogConfig+0x5a>
    {
        configTbl = &currentConfigTbl[i];
 800b15e:	1928      	adds	r0, r5, r4
        foundConfigId = RFAL_GETU16(configTbl);
        if (configId == (foundConfigId & configIdMaskVal))
 800b160:	7807      	ldrb	r7, [r0, #0]
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
            return configTbl[sizeof(rfalAnalogConfigId)];
 800b162:	7883      	ldrb	r3, [r0, #2]
        if (configId == (foundConfigId & configIdMaskVal))
 800b164:	7840      	ldrb	r0, [r0, #1]
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800b166:	3403      	adds	r4, #3
        if (configId == (foundConfigId & configIdMaskVal))
 800b168:	0200      	lsls	r0, r0, #8
 800b16a:	4338      	orrs	r0, r7
 800b16c:	ba40      	rev16	r0, r0
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800b16e:	b2a4      	uxth	r4, r4
        if (configId == (foundConfigId & configIdMaskVal))
 800b170:	4010      	ands	r0, r2
 800b172:	4286      	cmp	r6, r0
 800b174:	d10c      	bne.n	800b190 <rfalSetAnalogConfig+0x70>
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 800b176:	2bff      	cmp	r3, #255	@ 0xff
 800b178:	d10e      	bne.n	800b198 <rfalSetAnalogConfig+0x78>
    return retCode;
 800b17a:	2000      	movs	r0, #0
} /* rfalSetAnalogConfig() */
 800b17c:	b005      	add	sp, #20
 800b17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800b180:	4a19      	ldr	r2, [pc, #100]	@ (800b1e8 <rfalSetAnalogConfig+0xc8>)
 800b182:	e7e4      	b.n	800b14e <rfalSetAnalogConfig+0x2e>
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 800b184:	9901      	ldr	r1, [sp, #4]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800b186:	4332      	orrs	r2, r6
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 800b188:	2904      	cmp	r1, #4
 800b18a:	d1e5      	bne.n	800b158 <rfalSetAnalogConfig+0x38>
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
 800b18c:	4a16      	ldr	r2, [pc, #88]	@ (800b1e8 <rfalSetAnalogConfig+0xc8>)
 800b18e:	e7e3      	b.n	800b158 <rfalSetAnalogConfig+0x38>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 800b190:	009b      	lsls	r3, r3, #2
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 800b192:	18e4      	adds	r4, r4, r3
 800b194:	b2a4      	uxth	r4, r4
 800b196:	e7e0      	b.n	800b15a <rfalSetAnalogConfig+0x3a>
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800b198:	009b      	lsls	r3, r3, #2
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uintptr_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800b19a:	192d      	adds	r5, r5, r4
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800b19c:	18e4      	adds	r4, r4, r3
 800b19e:	b2a4      	uxth	r4, r4
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 800b1a0:	3101      	adds	r1, #1
 800b1a2:	42a1      	cmp	r1, r4
 800b1a4:	d319      	bcc.n	800b1da <rfalSetAnalogConfig+0xba>
            if( (RFAL_GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800b1a6:	2780      	movs	r7, #128	@ 0x80
 800b1a8:	195b      	adds	r3, r3, r5
 800b1aa:	9302      	str	r3, [sp, #8]
        for ( i = 0; i < numConfigSet; i++)
 800b1ac:	9b02      	ldr	r3, [sp, #8]
 800b1ae:	429d      	cmp	r5, r3
 800b1b0:	d0c6      	beq.n	800b140 <rfalSetAnalogConfig+0x20>
            if( (RFAL_GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800b1b2:	786b      	ldrb	r3, [r5, #1]
 800b1b4:	782a      	ldrb	r2, [r5, #0]
 800b1b6:	021b      	lsls	r3, r3, #8
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	ba5b      	rev16	r3, r3
                RFAL_EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (RFAL_GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800b1bc:	78a9      	ldrb	r1, [r5, #2]
 800b1be:	78ea      	ldrb	r2, [r5, #3]
 800b1c0:	b298      	uxth	r0, r3
            if( (RFAL_GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800b1c2:	421f      	tst	r7, r3
 800b1c4:	d006      	beq.n	800b1d4 <rfalSetAnalogConfig+0xb4>
                RFAL_EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (RFAL_GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800b1c6:	43b8      	bics	r0, r7
 800b1c8:	f7fb f8e3 	bl	8006392 <rfalChipChangeTestRegBits>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d1d5      	bne.n	800b17c <rfalSetAnalogConfig+0x5c>
        for ( i = 0; i < numConfigSet; i++)
 800b1d0:	3504      	adds	r5, #4
 800b1d2:	e7eb      	b.n	800b1ac <rfalSetAnalogConfig+0x8c>
                RFAL_EXIT_ON_ERR(retCode, rfalChipChangeRegBits( RFAL_GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800b1d4:	f7fb f8cc 	bl	8006370 <rfalChipChangeRegBits>
 800b1d8:	e7f8      	b.n	800b1cc <rfalSetAnalogConfig+0xac>
            return RFAL_ERR_NOMEM;
 800b1da:	2001      	movs	r0, #1
 800b1dc:	e7ce      	b.n	800b17c <rfalSetAnalogConfig+0x5c>
 800b1de:	46c0      	nop			@ (mov r8, r8)
 800b1e0:	20001a38 	.word	0x20001a38
 800b1e4:	000080f0 	.word	0x000080f0
 800b1e8:	0000ffff 	.word	0x0000ffff

0800b1ec <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 800b1ec:	b570      	push	{r4, r5, r6, lr}
    uint16_t crc = preloadValue;
    uint16_t index;

    for (index = 0; index < length; index++)
 800b1ee:	2400      	movs	r4, #0
 800b1f0:	b2a3      	uxth	r3, r4
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d800      	bhi.n	800b1f8 <rfalCrcCalculateCcitt+0xc>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
    }

    return crc;
}
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
    uint16_t crc = crcSeed;
    uint8_t  dat = dataByte;
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800b1f8:	5d0b      	ldrb	r3, [r1, r4]
 800b1fa:	3401      	adds	r4, #1
 800b1fc:	4043      	eors	r3, r0
 800b1fe:	b2db      	uxtb	r3, r3
    dat ^= (dat << 4);
 800b200:	001d      	movs	r5, r3
 800b202:	011e      	lsls	r6, r3, #4
 800b204:	b2f6      	uxtb	r6, r6
 800b206:	4075      	eors	r5, r6

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 800b208:	022e      	lsls	r6, r5, #8
 800b20a:	00eb      	lsls	r3, r5, #3
 800b20c:	4073      	eors	r3, r6
 800b20e:	0a00      	lsrs	r0, r0, #8
 800b210:	4058      	eors	r0, r3
 800b212:	092d      	lsrs	r5, r5, #4
 800b214:	4068      	eors	r0, r5
    for (index = 0; index < length; index++)
 800b216:	e7eb      	b.n	800b1f0 <rfalCrcCalculateCcitt+0x4>

0800b218 <rfalIso15693PhyVCDCode1Of256>:
 *  \return RFAL_ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode rfalIso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800b218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t tmp;
    ReturnCode err = RFAL_ERR_NONE;
    uint16_t a;
    uint8_t* outbuf = outbuffer;

    *outBufLen = 0;
 800b21a:	2400      	movs	r4, #0
 800b21c:	801c      	strh	r4, [r3, #0]

    if (maxOutBufLen < 64U) {
        return RFAL_ERR_NOMEM;
 800b21e:	3401      	adds	r4, #1
    if (maxOutBufLen < 64U) {
 800b220:	2a3f      	cmp	r2, #63	@ 0x3f
 800b222:	d91c      	bls.n	800b25e <rfalIso15693PhyVCDCode1Of256+0x46>
 800b224:	000a      	movs	r2, r1
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
                break;
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
                break;
 800b226:	2580      	movs	r5, #128	@ 0x80
                break;
 800b228:	2620      	movs	r6, #32
        switch (tmp)
 800b22a:	2708      	movs	r7, #8
 800b22c:	3240      	adds	r2, #64	@ 0x40
 800b22e:	9201      	str	r2, [sp, #4]
 800b230:	3401      	adds	r4, #1
            default:
                *outbuf = 0;
                break;               
 800b232:	2200      	movs	r2, #0
        switch (tmp)
 800b234:	2803      	cmp	r0, #3
 800b236:	d804      	bhi.n	800b242 <rfalIso15693PhyVCDCode1Of256+0x2a>
 800b238:	f7f4 ff78 	bl	800012c <__gnu_thumb1_case_uqi>
 800b23c:	15130217 	.word	0x15130217
 800b240:	003a      	movs	r2, r7
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 800b242:	700a      	strb	r2, [r1, #0]
        }
        outbuf++;
        (*outBufLen)++;
 800b244:	881a      	ldrh	r2, [r3, #0]
        tmp -= 4U;     /*  PRQA S 2911 # CERT INT30 - Intentional underflow, part of the coding */
 800b246:	3804      	subs	r0, #4
        (*outBufLen)++;
 800b248:	4694      	mov	ip, r2
 800b24a:	2201      	movs	r2, #1
 800b24c:	4494      	add	ip, r2
 800b24e:	4662      	mov	r2, ip
 800b250:	801a      	strh	r2, [r3, #0]
    for (a = 0; a < 64U; a++)
 800b252:	9a01      	ldr	r2, [sp, #4]
        outbuf++;
 800b254:	3101      	adds	r1, #1
        tmp -= 4U;     /*  PRQA S 2911 # CERT INT30 - Intentional underflow, part of the coding */
 800b256:	b2c0      	uxtb	r0, r0
    for (a = 0; a < 64U; a++)
 800b258:	4291      	cmp	r1, r2
 800b25a:	d1ea      	bne.n	800b232 <rfalIso15693PhyVCDCode1Of256+0x1a>
 800b25c:	2400      	movs	r4, #0
    }

    return err;
}
 800b25e:	0020      	movs	r0, r4
 800b260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                break;
 800b262:	0032      	movs	r2, r6
 800b264:	e7ed      	b.n	800b242 <rfalIso15693PhyVCDCode1Of256+0x2a>
                break;
 800b266:	002a      	movs	r2, r5
 800b268:	e7eb      	b.n	800b242 <rfalIso15693PhyVCDCode1Of256+0x2a>
        switch (tmp)
 800b26a:	0022      	movs	r2, r4
 800b26c:	e7e9      	b.n	800b242 <rfalIso15693PhyVCDCode1Of256+0x2a>

0800b26e <rfalIso15693PhyVCDCode1Of4>:
{
 800b26e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b270:	0004      	movs	r4, r0
    *outBufLen = 0;
 800b272:	2000      	movs	r0, #0
 800b274:	8018      	strh	r0, [r3, #0]
        return RFAL_ERR_NOMEM;
 800b276:	3001      	adds	r0, #1
    if (maxOutBufLen < 4U) {
 800b278:	2a03      	cmp	r2, #3
 800b27a:	d917      	bls.n	800b2ac <rfalIso15693PhyVCDCode1Of4+0x3e>
 800b27c:	2503      	movs	r5, #3
        switch (tmp & 0x3U)
 800b27e:	2608      	movs	r6, #8
 800b280:	1d08      	adds	r0, r1, #4
 800b282:	0027      	movs	r7, r4
 800b284:	2220      	movs	r2, #32
 800b286:	402f      	ands	r7, r5
 800b288:	2f02      	cmp	r7, #2
 800b28a:	d006      	beq.n	800b29a <rfalIso15693PhyVCDCode1Of4+0x2c>
 800b28c:	3260      	adds	r2, #96	@ 0x60
 800b28e:	2f03      	cmp	r7, #3
 800b290:	d003      	beq.n	800b29a <rfalIso15693PhyVCDCode1Of4+0x2c>
 800b292:	0032      	movs	r2, r6
 800b294:	2f01      	cmp	r7, #1
 800b296:	d000      	beq.n	800b29a <rfalIso15693PhyVCDCode1Of4+0x2c>
 800b298:	2202      	movs	r2, #2
                *outbuf = ISO15693_DAT_00_1_4;
 800b29a:	700a      	strb	r2, [r1, #0]
        (*outBufLen)++;
 800b29c:	881a      	ldrh	r2, [r3, #0]
        outbuf++;
 800b29e:	3101      	adds	r1, #1
        (*outBufLen)++;
 800b2a0:	3201      	adds	r2, #1
 800b2a2:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800b2a4:	08a4      	lsrs	r4, r4, #2
    for (a = 0; a < 4U; a++)
 800b2a6:	4281      	cmp	r1, r0
 800b2a8:	d1eb      	bne.n	800b282 <rfalIso15693PhyVCDCode1Of4+0x14>
 800b2aa:	2000      	movs	r0, #0
}
 800b2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b2b0 <rfalIso15693PhyConfigure>:
{
 800b2b0:	b570      	push	{r4, r5, r6, lr}
 800b2b2:	0004      	movs	r4, r0
    RFAL_MEMCPY( (uint8_t*)&gIso15693PhyConfig, (const uint8_t*)config, sizeof(rfalIso15693PhyConfig_t));
 800b2b4:	2208      	movs	r2, #8
{
 800b2b6:	000d      	movs	r5, r1
    RFAL_MEMCPY( (uint8_t*)&gIso15693PhyConfig, (const uint8_t*)config, sizeof(rfalIso15693PhyConfig_t));
 800b2b8:	4807      	ldr	r0, [pc, #28]	@ (800b2d8 <rfalIso15693PhyConfigure+0x28>)
 800b2ba:	0021      	movs	r1, r4
 800b2bc:	f008 f82e 	bl	801331c <memcpy>
    if ( config->speedMode <= 3U)
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	6862      	ldr	r2, [r4, #4]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d801      	bhi.n	800b2cc <rfalIso15693PhyConfigure+0x1c>
        auxConfig.report_period_length = (3U - (uint8_t)config->speedMode);
 800b2c8:	1a9b      	subs	r3, r3, r2
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	4a03      	ldr	r2, [pc, #12]	@ (800b2dc <rfalIso15693PhyConfigure+0x2c>)
}
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	70d3      	strb	r3, [r2, #3]
    *needed_stream_config = &auxConfig;
 800b2d2:	602a      	str	r2, [r5, #0]
}
 800b2d4:	bd70      	pop	{r4, r5, r6, pc}
 800b2d6:	46c0      	nop			@ (mov r8, r8)
 800b2d8:	20001a40 	.word	0x20001a40
 800b2dc:	20000618 	.word	0x20000618

0800b2e0 <rfalIso15693VCDCode>:
{
 800b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	9203      	str	r2, [sp, #12]
 800b2e6:	aa0c      	add	r2, sp, #48	@ 0x30
 800b2e8:	7812      	ldrb	r2, [r2, #0]
 800b2ea:	000c      	movs	r4, r1
 800b2ec:	9202      	str	r2, [sp, #8]
 800b2ee:	aa10      	add	r2, sp, #64	@ 0x40
 800b2f0:	8815      	ldrh	r5, [r2, #0]
    *actOutBufSize = 0;
 800b2f2:	2200      	movs	r2, #0
{
 800b2f4:	9001      	str	r0, [sp, #4]
    *actOutBufSize = 0;
 800b2f6:	9811      	ldr	r0, [sp, #68]	@ 0x44
{
 800b2f8:	990d      	ldr	r1, [sp, #52]	@ 0x34
    *actOutBufSize = 0;
 800b2fa:	8002      	strh	r2, [r0, #0]
    crc_len = (uint8_t)((sendCrc)?2:0);
 800b2fc:	9a03      	ldr	r2, [sp, #12]
    if (ISO15693_VCD_CODING_1_4 == gIso15693PhyConfig.coding)
 800b2fe:	4863      	ldr	r0, [pc, #396]	@ (800b48c <rfalIso15693VCDCode+0x1ac>)
    crc_len = (uint8_t)((sendCrc)?2:0);
 800b300:	0052      	lsls	r2, r2, #1
                  + ((length + (uint16_t)crc_len) * 4U)
 800b302:	b2d2      	uxtb	r2, r2
    if (ISO15693_VCD_CODING_1_4 == gIso15693PhyConfig.coding)
 800b304:	7800      	ldrb	r0, [r0, #0]
                  + ((length + (uint16_t)crc_len) * 4U)
 800b306:	1912      	adds	r2, r2, r4
                  + 1U) /* EOF */
 800b308:	b292      	uxth	r2, r2
    if (ISO15693_VCD_CODING_1_4 == gIso15693PhyConfig.coding)
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d109      	bne.n	800b322 <rfalIso15693VCDCode+0x42>
                  + 1U) /* EOF */
 800b30e:	0092      	lsls	r2, r2, #2
 800b310:	3202      	adds	r2, #2
        *subbit_total_length = (
 800b312:	800a      	strh	r2, [r1, #0]
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800b314:	2d04      	cmp	r5, #4
 800b316:	d826      	bhi.n	800b366 <rfalIso15693VCDCode+0x86>
            return RFAL_ERR_NOMEM;
 800b318:	2301      	movs	r3, #1
        return RFAL_ERR_AGAIN;
 800b31a:	9300      	str	r3, [sp, #0]
}
 800b31c:	9800      	ldr	r0, [sp, #0]
 800b31e:	b007      	add	sp, #28
 800b320:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  + 1U) /* EOF */
 800b322:	0192      	lsls	r2, r2, #6
 800b324:	3202      	adds	r2, #2
        *subbit_total_length = (
 800b326:	800a      	strh	r2, [r1, #0]
        if (*offset != 0U)
 800b328:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b32a:	8812      	ldrh	r2, [r2, #0]
 800b32c:	2a00      	cmp	r2, #0
 800b32e:	d005      	beq.n	800b33c <rfalIso15693VCDCode+0x5c>
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 800b330:	2d3f      	cmp	r5, #63	@ 0x3f
 800b332:	d9f1      	bls.n	800b318 <rfalIso15693VCDCode+0x38>
    if (length == 0U)
 800b334:	4f56      	ldr	r7, [pc, #344]	@ (800b490 <rfalIso15693VCDCode+0x1b0>)
 800b336:	2c00      	cmp	r4, #0
 800b338:	d022      	beq.n	800b380 <rfalIso15693VCDCode+0xa0>
 800b33a:	e01d      	b.n	800b378 <rfalIso15693VCDCode+0x98>
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800b33c:	2d40      	cmp	r5, #64	@ 0x40
 800b33e:	d9eb      	bls.n	800b318 <rfalIso15693VCDCode+0x38>
    if (length == 0U)
 800b340:	4f53      	ldr	r7, [pc, #332]	@ (800b490 <rfalIso15693VCDCode+0x1b0>)
 800b342:	2c00      	cmp	r4, #0
 800b344:	d01c      	beq.n	800b380 <rfalIso15693VCDCode+0xa0>
        sof = ISO15693_DAT_SOF_1_256;
 800b346:	2181      	movs	r1, #129	@ 0x81
    if ((length != 0U) && (0U == *offset) && sendFlags && (!picopassMode))
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d11c      	bne.n	800b386 <rfalIso15693VCDCode+0xa6>
        *outputBuf = sof; 
 800b34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
        (*actOutBufSize)++;
 800b34e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
        *outputBuf = sof; 
 800b350:	7019      	strb	r1, [r3, #0]
        (*actOutBufSize)++;
 800b352:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        outputBufSize--;
 800b354:	3d01      	subs	r5, #1
        (*actOutBufSize)++;
 800b356:	881b      	ldrh	r3, [r3, #0]
        outputBufSize--;
 800b358:	b2ad      	uxth	r5, r5
        (*actOutBufSize)++;
 800b35a:	3301      	adds	r3, #1
 800b35c:	8013      	strh	r3, [r2, #0]
        outputBuf++;
 800b35e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b360:	3301      	adds	r3, #1
 800b362:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b364:	e008      	b.n	800b378 <rfalIso15693VCDCode+0x98>
    if (length == 0U)
 800b366:	4a4b      	ldr	r2, [pc, #300]	@ (800b494 <rfalIso15693VCDCode+0x1b4>)
 800b368:	2c00      	cmp	r4, #0
 800b36a:	d008      	beq.n	800b37e <rfalIso15693VCDCode+0x9e>
    if ((length != 0U) && (0U == *offset) && sendFlags && (!picopassMode))
 800b36c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b36e:	0017      	movs	r7, r2
 800b370:	8808      	ldrh	r0, [r1, #0]
 800b372:	2121      	movs	r1, #33	@ 0x21
 800b374:	2800      	cmp	r0, #0
 800b376:	d0e7      	beq.n	800b348 <rfalIso15693VCDCode+0x68>
        txFunc = rfalIso15693PhyVCDCode1Of256;
 800b378:	2300      	movs	r3, #0
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	e02e      	b.n	800b3dc <rfalIso15693VCDCode+0xfc>
 800b37e:	0017      	movs	r7, r2
        *subbit_total_length = 1;
 800b380:	2301      	movs	r3, #1
 800b382:	800b      	strh	r3, [r1, #0]
    if ((length != 0U) && (0U == *offset))
 800b384:	e7f8      	b.n	800b378 <rfalIso15693VCDCode+0x98>
    if ((length != 0U) && (0U == *offset) && sendFlags && (!picopassMode))
 800b386:	9b02      	ldr	r3, [sp, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1df      	bne.n	800b34c <rfalIso15693VCDCode+0x6c>
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800b38c:	9b01      	ldr	r3, [sp, #4]
 800b38e:	781a      	ldrb	r2, [r3, #0]
 800b390:	2301      	movs	r3, #1
 800b392:	439a      	bics	r2, r3
 800b394:	18db      	adds	r3, r3, r3
 800b396:	4313      	orrs	r3, r2
 800b398:	9a01      	ldr	r2, [sp, #4]
 800b39a:	7013      	strb	r3, [r2, #0]
    if ((length != 0U) && (0U == *offset))
 800b39c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d0d3      	beq.n	800b34c <rfalIso15693VCDCode+0x6c>
 800b3a4:	e7e8      	b.n	800b378 <rfalIso15693VCDCode+0x98>
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800b3a6:	aa04      	add	r2, sp, #16
 800b3a8:	1d96      	adds	r6, r2, #6
 800b3aa:	9a01      	ldr	r2, [sp, #4]
 800b3ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b3ae:	5cd0      	ldrb	r0, [r2, r3]
 800b3b0:	002a      	movs	r2, r5
 800b3b2:	0033      	movs	r3, r6
 800b3b4:	47b8      	blx	r7
        (*actOutBufSize) += filled_size;
 800b3b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b3b8:	8833      	ldrh	r3, [r6, #0]
 800b3ba:	8812      	ldrh	r2, [r2, #0]
 800b3bc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b3be:	189a      	adds	r2, r3, r2
 800b3c0:	800a      	strh	r2, [r1, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800b3c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
        outputBufSize -= filled_size;
 800b3c4:	1aed      	subs	r5, r5, r3
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800b3c6:	18d2      	adds	r2, r2, r3
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 800b3c8:	9000      	str	r0, [sp, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800b3ca:	920f      	str	r2, [sp, #60]	@ 0x3c
        outputBufSize -= filled_size;
 800b3cc:	b2ad      	uxth	r5, r5
        if (err == RFAL_ERR_NONE) {
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d104      	bne.n	800b3dc <rfalIso15693VCDCode+0xfc>
            (*offset)++;
 800b3d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	8013      	strh	r3, [r2, #0]
    while ((*offset < length) && (err == RFAL_ERR_NONE))
 800b3dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3de:	9a00      	ldr	r2, [sp, #0]
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	42a3      	cmp	r3, r4
 800b3e4:	d203      	bcs.n	800b3ee <rfalIso15693VCDCode+0x10e>
 800b3e6:	2a00      	cmp	r2, #0
 800b3e8:	d0dd      	beq.n	800b3a6 <rfalIso15693VCDCode+0xc6>
        return RFAL_ERR_AGAIN;
 800b3ea:	230d      	movs	r3, #13
 800b3ec:	e795      	b.n	800b31a <rfalIso15693VCDCode+0x3a>
    if (err != RFAL_ERR_NONE) {
 800b3ee:	2a00      	cmp	r2, #0
 800b3f0:	d1fb      	bne.n	800b3ea <rfalIso15693VCDCode+0x10a>
    while ((err == RFAL_ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800b3f2:	9a03      	ldr	r2, [sp, #12]
    uint16_t crc = 0;
 800b3f4:	9e00      	ldr	r6, [sp, #0]
    while ((err == RFAL_ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800b3f6:	2a00      	cmp	r2, #0
 800b3f8:	d13c      	bne.n	800b474 <rfalIso15693VCDCode+0x194>
    if (((!sendCrc) && (*offset == length))
 800b3fa:	42a3      	cmp	r3, r4
 800b3fc:	d1f5      	bne.n	800b3ea <rfalIso15693VCDCode+0x10a>
        *outputBuf = eof; 
 800b3fe:	2304      	movs	r3, #4
 800b400:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b402:	7013      	strb	r3, [r2, #0]
        (*actOutBufSize)++;
 800b404:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b406:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b408:	881b      	ldrh	r3, [r3, #0]
 800b40a:	3301      	adds	r3, #1
 800b40c:	8013      	strh	r3, [r2, #0]
    return err;
 800b40e:	e785      	b.n	800b31c <rfalIso15693VCDCode+0x3c>
        if ((0U==crc) && (length != 0U))
 800b410:	2e00      	cmp	r6, #0
 800b412:	d111      	bne.n	800b438 <rfalIso15693VCDCode+0x158>
 800b414:	2c00      	cmp	r4, #0
 800b416:	d00f      	beq.n	800b438 <rfalIso15693VCDCode+0x158>
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800b418:	9b02      	ldr	r3, [sp, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d031      	beq.n	800b482 <rfalIso15693VCDCode+0x1a2>
 800b41e:	9b01      	ldr	r3, [sp, #4]
 800b420:	1e62      	subs	r2, r4, #1
 800b422:	481d      	ldr	r0, [pc, #116]	@ (800b498 <rfalIso15693VCDCode+0x1b8>)
 800b424:	1c59      	adds	r1, r3, #1
 800b426:	b292      	uxth	r2, r2
 800b428:	f7ff fee0 	bl	800b1ec <rfalCrcCalculateCcitt>
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800b42c:	9b02      	ldr	r3, [sp, #8]
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800b42e:	0006      	movs	r6, r0
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800b430:	2b00      	cmp	r3, #0
 800b432:	d101      	bne.n	800b438 <rfalIso15693VCDCode+0x158>
 800b434:	43c6      	mvns	r6, r0
 800b436:	b2b6      	uxth	r6, r6
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800b438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800b43a:	aa05      	add	r2, sp, #20
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800b43c:	881b      	ldrh	r3, [r3, #0]
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800b43e:	8016      	strh	r6, [r2, #0]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800b440:	1b1b      	subs	r3, r3, r4
 800b442:	5cd0      	ldrb	r0, [r2, r3]
 800b444:	ab04      	add	r3, sp, #16
 800b446:	002a      	movs	r2, r5
 800b448:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b44a:	3306      	adds	r3, #6
 800b44c:	47b8      	blx	r7
        (*actOutBufSize) += filled_size;
 800b44e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b450:	ab04      	add	r3, sp, #16
 800b452:	88db      	ldrh	r3, [r3, #6]
 800b454:	8812      	ldrh	r2, [r2, #0]
 800b456:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b458:	189a      	adds	r2, r3, r2
 800b45a:	800a      	strh	r2, [r1, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800b45c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
        outputBufSize -= filled_size;
 800b45e:	1aed      	subs	r5, r5, r3
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800b460:	18d2      	adds	r2, r2, r3
 800b462:	920f      	str	r2, [sp, #60]	@ 0x3c
        outputBufSize -= filled_size;
 800b464:	b2ad      	uxth	r5, r5
        if (err == RFAL_ERR_NONE) {
 800b466:	2800      	cmp	r0, #0
 800b468:	d1bf      	bne.n	800b3ea <rfalIso15693VCDCode+0x10a>
            (*offset)++;
 800b46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b46c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b46e:	881b      	ldrh	r3, [r3, #0]
 800b470:	3301      	adds	r3, #1
 800b472:	8013      	strh	r3, [r2, #0]
    while ((err == RFAL_ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800b474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b476:	881a      	ldrh	r2, [r3, #0]
 800b478:	1ca3      	adds	r3, r4, #2
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d3c8      	bcc.n	800b410 <rfalIso15693VCDCode+0x130>
            || (sendCrc && (*offset == (length + 2U))))
 800b47e:	d0be      	beq.n	800b3fe <rfalIso15693VCDCode+0x11e>
 800b480:	e7b3      	b.n	800b3ea <rfalIso15693VCDCode+0x10a>
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800b482:	0022      	movs	r2, r4
 800b484:	9901      	ldr	r1, [sp, #4]
 800b486:	4805      	ldr	r0, [pc, #20]	@ (800b49c <rfalIso15693VCDCode+0x1bc>)
 800b488:	e7ce      	b.n	800b428 <rfalIso15693VCDCode+0x148>
 800b48a:	46c0      	nop			@ (mov r8, r8)
 800b48c:	20001a40 	.word	0x20001a40
 800b490:	0800b219 	.word	0x0800b219
 800b494:	0800b26f 	.word	0x0800b26f
 800b498:	0000e012 	.word	0x0000e012
 800b49c:	0000ffff 	.word	0x0000ffff

0800b4a0 <rfalIso15693VICCDecode>:
{
 800b4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    *bitsBeforeCol = 0;
 800b4a2:	2400      	movs	r4, #0
{
 800b4a4:	0017      	movs	r7, r2
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800b4a6:	221f      	movs	r2, #31
{
 800b4a8:	b087      	sub	sp, #28
 800b4aa:	001d      	movs	r5, r3
 800b4ac:	ab0e      	add	r3, sp, #56	@ 0x38
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	0006      	movs	r6, r0
 800b4b2:	9305      	str	r3, [sp, #20]
 800b4b4:	ab0f      	add	r3, sp, #60	@ 0x3c
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	9100      	str	r1, [sp, #0]
 800b4ba:	9301      	str	r3, [sp, #4]
    *bitsBeforeCol = 0;
 800b4bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4be:	801c      	strh	r4, [r3, #0]
    *outBufPos = 0;
 800b4c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4c2:	801c      	strh	r4, [r3, #0]
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800b4c4:	7803      	ldrb	r3, [r0, #0]
		return RFAL_ERR_FRAMING;
 800b4c6:	2009      	movs	r0, #9
    if ((inBuf[0] & 0x1fU) != 0x17U)
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	2b17      	cmp	r3, #23
 800b4cc:	d102      	bne.n	800b4d4 <rfalIso15693VICCDecode+0x34>
    if (outBufLen == 0U)
 800b4ce:	42a5      	cmp	r5, r4
 800b4d0:	d102      	bne.n	800b4d8 <rfalIso15693VICCDecode+0x38>
        return RFAL_ERR_NONE;
 800b4d2:	2000      	movs	r0, #0
}
 800b4d4:	b007      	add	sp, #28
 800b4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RFAL_MEMSET(outBuf,0,outBufLen);
 800b4d8:	002a      	movs	r2, r5
 800b4da:	0021      	movs	r1, r4
 800b4dc:	0038      	movs	r0, r7
 800b4de:	f007 fee9 	bl	80132b4 <memset>
    if (inBufLen == 0U)
 800b4e2:	9b00      	ldr	r3, [sp, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d06f      	beq.n	800b5c8 <rfalIso15693VICCDecode+0x128>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800b4e8:	00db      	lsls	r3, r3, #3
 800b4ea:	3b02      	subs	r3, #2
 800b4ec:	9304      	str	r3, [sp, #16]
        if ( (bp >= (outBufLen * 8U)) || (err == RFAL_ERR_RF_COLLISION) || isEOF )        
 800b4ee:	00eb      	lsls	r3, r5, #3
    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 800b4f0:	2205      	movs	r2, #5
        if ( (bp >= (outBufLen * 8U)) || (err == RFAL_ERR_RF_COLLISION) || isEOF )        
 800b4f2:	9302      	str	r3, [sp, #8]
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800b4f4:	2307      	movs	r3, #7
    ReturnCode err = RFAL_ERR_NONE;
 800b4f6:	0020      	movs	r0, r4
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800b4f8:	0011      	movs	r1, r2
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800b4fa:	469c      	mov	ip, r3
 800b4fc:	08d3      	lsrs	r3, r2, #3
 800b4fe:	18f5      	adds	r5, r6, r3
 800b500:	9500      	str	r5, [sp, #0]
 800b502:	4665      	mov	r5, ip
 800b504:	5cf3      	ldrb	r3, [r6, r3]
 800b506:	4015      	ands	r5, r2
 800b508:	412b      	asrs	r3, r5
 800b50a:	2501      	movs	r5, #1
 800b50c:	402b      	ands	r3, r5
 800b50e:	9303      	str	r3, [sp, #12]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800b510:	4663      	mov	r3, ip
 800b512:	1949      	adds	r1, r1, r5
 800b514:	08cd      	lsrs	r5, r1, #3
 800b516:	5d75      	ldrb	r5, [r6, r5]
 800b518:	4019      	ands	r1, r3
 800b51a:	410d      	asrs	r5, r1
 800b51c:	2302      	movs	r3, #2
 800b51e:	006d      	lsls	r5, r5, #1
 800b520:	401d      	ands	r5, r3
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	432b      	orrs	r3, r5
        if (1U == man)
 800b526:	2b01      	cmp	r3, #1
 800b528:	d150      	bne.n	800b5cc <rfalIso15693VICCDecode+0x12c>
            bp++;
 800b52a:	3401      	adds	r4, #1
 800b52c:	b2a4      	uxth	r4, r4
        if ((bp%8U) == 0U)
 800b52e:	4661      	mov	r1, ip
 800b530:	420c      	tst	r4, r1
 800b532:	d165      	bne.n	800b600 <rfalIso15693VICCDecode+0x160>
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 800b534:	251f      	movs	r5, #31
 800b536:	9900      	ldr	r1, [sp, #0]
 800b538:	7809      	ldrb	r1, [r1, #0]
 800b53a:	43a9      	bics	r1, r5
 800b53c:	29a0      	cmp	r1, #160	@ 0xa0
 800b53e:	d15f      	bne.n	800b600 <rfalIso15693VICCDecode+0x160>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800b540:	9900      	ldr	r1, [sp, #0]
 800b542:	7849      	ldrb	r1, [r1, #1]
        if ( ((0U == man) || (3U == man)) && (!isEOF) )
 800b544:	2b00      	cmp	r3, #0
 800b546:	d04e      	beq.n	800b5e6 <rfalIso15693VICCDecode+0x146>
 800b548:	2b03      	cmp	r3, #3
 800b54a:	d04c      	beq.n	800b5e6 <rfalIso15693VICCDecode+0x146>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800b54c:	1ecb      	subs	r3, r1, #3
 800b54e:	4259      	negs	r1, r3
 800b550:	414b      	adcs	r3, r1
 800b552:	b2db      	uxtb	r3, r3
        if ( (bp >= (outBufLen * 8U)) || (err == RFAL_ERR_RF_COLLISION) || isEOF )        
 800b554:	9902      	ldr	r1, [sp, #8]
 800b556:	428c      	cmp	r4, r1
 800b558:	d209      	bcs.n	800b56e <rfalIso15693VICCDecode+0xce>
 800b55a:	281d      	cmp	r0, #29
 800b55c:	d007      	beq.n	800b56e <rfalIso15693VICCDecode+0xce>
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d105      	bne.n	800b56e <rfalIso15693VICCDecode+0xce>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 800b562:	3202      	adds	r2, #2
 800b564:	9b04      	ldr	r3, [sp, #16]
 800b566:	b292      	uxth	r2, r2
 800b568:	0011      	movs	r1, r2
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d3c6      	bcc.n	800b4fc <rfalIso15693VICCDecode+0x5c>
    *outBufPos = (bp / 8U);
 800b56e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b570:	08e3      	lsrs	r3, r4, #3
 800b572:	8013      	strh	r3, [r2, #0]
    *bitsBeforeCol = bp;
 800b574:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b576:	801c      	strh	r4, [r3, #0]
    if (err != RFAL_ERR_NONE) 
 800b578:	2800      	cmp	r0, #0
 800b57a:	d1ab      	bne.n	800b4d4 <rfalIso15693VICCDecode+0x34>
    if ((bp%8U) != 0U)
 800b57c:	0764      	lsls	r4, r4, #29
 800b57e:	d123      	bne.n	800b5c8 <rfalIso15693VICCDecode+0x128>
    if (*outBufPos > 2U)
 800b580:	8812      	ldrh	r2, [r2, #0]
 800b582:	2a02      	cmp	r2, #2
 800b584:	d920      	bls.n	800b5c8 <rfalIso15693VICCDecode+0x128>
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800b586:	9b01      	ldr	r3, [sp, #4]
 800b588:	3a02      	subs	r2, #2
 800b58a:	4258      	negs	r0, r3
 800b58c:	4158      	adcs	r0, r3
 800b58e:	4b1f      	ldr	r3, [pc, #124]	@ (800b60c <rfalIso15693VICCDecode+0x16c>)
 800b590:	4240      	negs	r0, r0
 800b592:	4018      	ands	r0, r3
 800b594:	4b1e      	ldr	r3, [pc, #120]	@ (800b610 <rfalIso15693VICCDecode+0x170>)
 800b596:	0039      	movs	r1, r7
 800b598:	18c0      	adds	r0, r0, r3
 800b59a:	b292      	uxth	r2, r2
 800b59c:	f7ff fe26 	bl	800b1ec <rfalCrcCalculateCcitt>
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800b5a0:	9b01      	ldr	r3, [sp, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <rfalIso15693VICCDecode+0x10a>
 800b5a6:	43c0      	mvns	r0, r0
 800b5a8:	b280      	uxth	r0, r0
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800b5aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	18fb      	adds	r3, r7, r3
 800b5b0:	1e9a      	subs	r2, r3, #2
 800b5b2:	7811      	ldrb	r1, [r2, #0]
 800b5b4:	b2c2      	uxtb	r2, r0
 800b5b6:	4291      	cmp	r1, r2
 800b5b8:	d106      	bne.n	800b5c8 <rfalIso15693VICCDecode+0x128>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	0a00      	lsrs	r0, r0, #8
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	b280      	uxth	r0, r0
 800b5c2:	4283      	cmp	r3, r0
 800b5c4:	d100      	bne.n	800b5c8 <rfalIso15693VICCDecode+0x128>
 800b5c6:	e784      	b.n	800b4d2 <rfalIso15693VICCDecode+0x32>
        return RFAL_ERR_CRC;
 800b5c8:	2015      	movs	r0, #21
 800b5ca:	e783      	b.n	800b4d4 <rfalIso15693VICCDecode+0x34>
        if (2U == man)
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d1ae      	bne.n	800b52e <rfalIso15693VICCDecode+0x8e>
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800b5d0:	4661      	mov	r1, ip
 800b5d2:	2501      	movs	r5, #1
 800b5d4:	4021      	ands	r1, r4
 800b5d6:	408d      	lsls	r5, r1
 800b5d8:	0029      	movs	r1, r5
 800b5da:	08e5      	lsrs	r5, r4, #3
 800b5dc:	5d7d      	ldrb	r5, [r7, r5]
 800b5de:	4329      	orrs	r1, r5
 800b5e0:	08e5      	lsrs	r5, r4, #3
 800b5e2:	5579      	strb	r1, [r7, r5]
 800b5e4:	e7a1      	b.n	800b52a <rfalIso15693VICCDecode+0x8a>
 800b5e6:	2301      	movs	r3, #1
        if ( ((0U == man) || (3U == man)) && (!isEOF) )
 800b5e8:	2903      	cmp	r1, #3
 800b5ea:	d0b3      	beq.n	800b554 <rfalIso15693VICCDecode+0xb4>
            if (bp >= ignoreBits)
 800b5ec:	9b05      	ldr	r3, [sp, #20]
 800b5ee:	429c      	cmp	r4, r3
 800b5f0:	d203      	bcs.n	800b5fa <rfalIso15693VICCDecode+0x15a>
                bp++;
 800b5f2:	3401      	adds	r4, #1
 800b5f4:	b2a4      	uxth	r4, r4
        if ( ((0U == man) || (3U == man)) && (!isEOF) )
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e7ac      	b.n	800b554 <rfalIso15693VICCDecode+0xb4>
 800b5fa:	2300      	movs	r3, #0
                err = RFAL_ERR_RF_COLLISION;
 800b5fc:	201d      	movs	r0, #29
 800b5fe:	e7a9      	b.n	800b554 <rfalIso15693VICCDecode+0xb4>
        if ( ((0U == man) || (3U == man)) && (!isEOF) )
 800b600:	2b00      	cmp	r3, #0
 800b602:	d0f3      	beq.n	800b5ec <rfalIso15693VICCDecode+0x14c>
 800b604:	2b03      	cmp	r3, #3
 800b606:	d1f6      	bne.n	800b5f6 <rfalIso15693VICCDecode+0x156>
 800b608:	e7f0      	b.n	800b5ec <rfalIso15693VICCDecode+0x14c>
 800b60a:	46c0      	nop			@ (mov r8, r8)
 800b60c:	00001fed 	.word	0x00001fed
 800b610:	0000e012 	.word	0x0000e012

0800b614 <rfalIsoDepClearCounters>:
 */

/*******************************************************************************/
static void rfalIsoDepClearCounters( void )
{
    gIsoDep.cntIRetrys    = 0;
 800b614:	2200      	movs	r2, #0
 800b616:	4b02      	ldr	r3, [pc, #8]	@ (800b620 <rfalIsoDepClearCounters+0xc>)
 800b618:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys    = 0;
 800b61a:	80da      	strh	r2, [r3, #6]
    gIsoDep.cntSDslRetrys = 0;
    gIsoDep.cntSWtxRetrys = 0;
 800b61c:	811a      	strh	r2, [r3, #8]
    gIsoDep.cntSWtxNack   = 0;
}
 800b61e:	4770      	bx	lr
 800b620:	20001a48 	.word	0x20001a48

0800b624 <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 800b624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800b626:	2440      	movs	r4, #64	@ 0x40
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) || (curMaxBR == RFAL_BR_KEEP) )
 800b628:	2608      	movs	r6, #8
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800b62a:	400c      	ands	r4, r1
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) || (curMaxBR == RFAL_BR_KEEP) )
 800b62c:	400e      	ands	r6, r1
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800b62e:	9401      	str	r4, [sp, #4]
        (*dsi) = RFAL_BR_106;
 800b630:	2400      	movs	r4, #0
 800b632:	7014      	strb	r4, [r2, #0]
        (*dri) = RFAL_BR_106;
 800b634:	701c      	strb	r4, [r3, #0]
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) || (curMaxBR == RFAL_BR_KEEP) )
 800b636:	1e34      	subs	r4, r6, #0
 800b638:	d139      	bne.n	800b6ae <rfalIsoDepCalcBitRate+0x8a>
 800b63a:	2803      	cmp	r0, #3
 800b63c:	d837      	bhi.n	800b6ae <rfalIsoDepCalcBitRate+0x8a>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800b63e:	9d01      	ldr	r5, [sp, #4]
 800b640:	2d00      	cmp	r5, #0
 800b642:	d001      	beq.n	800b648 <rfalIsoDepCalcBitRate+0x24>
 800b644:	2803      	cmp	r0, #3
 800b646:	d033      	beq.n	800b6b0 <rfalIsoDepCalcBitRate+0x8c>
 800b648:	068d      	lsls	r5, r1, #26
 800b64a:	d501      	bpl.n	800b650 <rfalIsoDepCalcBitRate+0x2c>
 800b64c:	2801      	cmp	r0, #1
 800b64e:	d831      	bhi.n	800b6b4 <rfalIsoDepCalcBitRate+0x90>
 800b650:	06cd      	lsls	r5, r1, #27
 800b652:	d503      	bpl.n	800b65c <rfalIsoDepCalcBitRate+0x38>
 800b654:	2800      	cmp	r0, #0
 800b656:	d001      	beq.n	800b65c <rfalIsoDepCalcBitRate+0x38>
            {
                const uint8_t newdsi = ((uint8_t) i) + 1U;
 800b658:	3401      	adds	r4, #1
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 800b65a:	7014      	strb	r4, [r2, #0]
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800b65c:	2701      	movs	r7, #1
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 800b65e:	2407      	movs	r4, #7
 800b660:	2502      	movs	r5, #2
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800b662:	46bc      	mov	ip, r7
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 800b664:	400c      	ands	r4, r1
 800b666:	9400      	str	r4, [sp, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800b668:	9f00      	ldr	r7, [sp, #0]
 800b66a:	4664      	mov	r4, ip
 800b66c:	40ef      	lsrs	r7, r5
 800b66e:	4227      	tst	r7, r4
 800b670:	d022      	beq.n	800b6b8 <rfalIsoDepCalcBitRate+0x94>
 800b672:	1c6f      	adds	r7, r5, #1
 800b674:	42b8      	cmp	r0, r7
 800b676:	d31f      	bcc.n	800b6b8 <rfalIsoDepCalcBitRate+0x94>
            {
                const uint8_t newdri = ((uint8_t) i) + 1U;
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 800b678:	701f      	strb	r7, [r3, #0]
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 800b67a:	b248      	sxtb	r0, r1
 800b67c:	2800      	cmp	r0, #0
 800b67e:	da16      	bge.n	800b6ae <rfalIsoDepCalcBitRate+0x8a>
        {   
            (*dsi) = RFAL_MIN((*dsi), (*dri));
 800b680:	781f      	ldrb	r7, [r3, #0]
 800b682:	7810      	ldrb	r0, [r2, #0]
 800b684:	1c3d      	adds	r5, r7, #0
 800b686:	4287      	cmp	r7, r0
 800b688:	d900      	bls.n	800b68c <rfalIsoDepCalcBitRate+0x68>
 800b68a:	1c05      	adds	r5, r0, #0
 800b68c:	b2e8      	uxtb	r0, r5
 800b68e:	7015      	strb	r5, [r2, #0]
            (*dri) = (*dsi);
 800b690:	701d      	strb	r5, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 800b692:	2800      	cmp	r0, #0
 800b694:	d00b      	beq.n	800b6ae <rfalIsoDepCalcBitRate+0x8a>
 800b696:	2510      	movs	r5, #16
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800b698:	2770      	movs	r7, #112	@ 0x70
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 800b69a:	1e44      	subs	r4, r0, #1
 800b69c:	40a5      	lsls	r5, r4
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800b69e:	400f      	ands	r7, r1
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 800b6a0:	422f      	tst	r7, r5
 800b6a2:	d0c5      	beq.n	800b630 <rfalIsoDepCalcBitRate+0xc>
 800b6a4:	9d00      	ldr	r5, [sp, #0]
 800b6a6:	40e5      	lsrs	r5, r4
 800b6a8:	002c      	movs	r4, r5
 800b6aa:	07e4      	lsls	r4, r4, #31
 800b6ac:	d5c0      	bpl.n	800b630 <rfalIsoDepCalcBitRate+0xc>
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
            }
        }
    } while (!(bitrateFound));
    
}
 800b6ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800b6b0:	2402      	movs	r4, #2
 800b6b2:	e7d1      	b.n	800b658 <rfalIsoDepCalcBitRate+0x34>
 800b6b4:	2401      	movs	r4, #1
 800b6b6:	e7cf      	b.n	800b658 <rfalIsoDepCalcBitRate+0x34>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 800b6b8:	3d01      	subs	r5, #1
 800b6ba:	d2d5      	bcs.n	800b668 <rfalIsoDepCalcBitRate+0x44>
 800b6bc:	e7dd      	b.n	800b67a <rfalIsoDepCalcBitRate+0x56>
	...

0800b6c0 <rfalIsoDepTx>:
{
 800b6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6c2:	0006      	movs	r6, r0
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 800b6c4:	482c      	ldr	r0, [pc, #176]	@ (800b778 <rfalIsoDepTx+0xb8>)
{
 800b6c6:	b089      	sub	sp, #36	@ 0x24
        if ( ((uintptr_t)infBuf - (uintptr_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 800b6c8:	0017      	movs	r7, r2
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 800b6ca:	4c2c      	ldr	r4, [pc, #176]	@ (800b77c <rfalIsoDepTx+0xbc>)
 800b6cc:	7006      	strb	r6, [r0, #0]
    if ( infLen > 0U )
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d006      	beq.n	800b6e0 <rfalIsoDepTx+0x20>
        if ( ((uintptr_t)infBuf - (uintptr_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 800b6d2:	0020      	movs	r0, r4
 800b6d4:	302b      	adds	r0, #43	@ 0x2b
 800b6d6:	7805      	ldrb	r5, [r0, #0]
 800b6d8:	1a51      	subs	r1, r2, r1
            return RFAL_ERR_NOMEM;
 800b6da:	2001      	movs	r0, #1
        if ( ((uintptr_t)infBuf - (uintptr_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 800b6dc:	42a9      	cmp	r1, r5
 800b6de:	d348      	bcc.n	800b772 <rfalIsoDepTx+0xb2>
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && (gIsoDep.lastDID00)) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 800b6e0:	78e1      	ldrb	r1, [r4, #3]
 800b6e2:	2900      	cmp	r1, #0
 800b6e4:	d104      	bne.n	800b6f0 <rfalIsoDepTx+0x30>
 800b6e6:	0021      	movs	r1, r4
 800b6e8:	313c      	adds	r1, #60	@ 0x3c
 800b6ea:	7809      	ldrb	r1, [r1, #0]
 800b6ec:	2900      	cmp	r1, #0
 800b6ee:	d001      	beq.n	800b6f4 <rfalIsoDepTx+0x34>
 800b6f0:	2108      	movs	r1, #8
 800b6f2:	430e      	orrs	r6, r1
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 800b6f4:	7921      	ldrb	r1, [r4, #4]
 800b6f6:	29ff      	cmp	r1, #255	@ 0xff
 800b6f8:	d001      	beq.n	800b6fe <rfalIsoDepTx+0x3e>
 800b6fa:	2004      	movs	r0, #4
 800b6fc:	4306      	orrs	r6, r0
    if ((gIsoDep.isTxChaining) && (rfalIsoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 800b6fe:	7da0      	ldrb	r0, [r4, #22]
 800b700:	2800      	cmp	r0, #0
 800b702:	d007      	beq.n	800b714 <rfalIsoDepTx+0x54>
 800b704:	201d      	movs	r0, #29
 800b706:	0035      	movs	r5, r6
 800b708:	4385      	bics	r5, r0
 800b70a:	0028      	movs	r0, r5
 800b70c:	2d02      	cmp	r5, #2
 800b70e:	d101      	bne.n	800b714 <rfalIsoDepTx+0x54>
 800b710:	300e      	adds	r0, #14
 800b712:	4306      	orrs	r6, r0
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 800b714:	29ff      	cmp	r1, #255	@ 0xff
 800b716:	d001      	beq.n	800b71c <rfalIsoDepTx+0x5c>
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 800b718:	3a01      	subs	r2, #1
 800b71a:	7011      	strb	r1, [r2, #0]
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && (gIsoDep.lastDID00)) )
 800b71c:	78e1      	ldrb	r1, [r4, #3]
 800b71e:	2900      	cmp	r1, #0
 800b720:	d104      	bne.n	800b72c <rfalIsoDepTx+0x6c>
 800b722:	0020      	movs	r0, r4
 800b724:	303c      	adds	r0, #60	@ 0x3c
 800b726:	7800      	ldrb	r0, [r0, #0]
 800b728:	2800      	cmp	r0, #0
 800b72a:	d001      	beq.n	800b730 <rfalIsoDepTx+0x70>
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 800b72c:	3a01      	subs	r2, #1
 800b72e:	7011      	strb	r1, [r2, #0]
    *(--txBlock)      = computedPcb;               /* PCB always present */
 800b730:	3a01      	subs	r2, #1
 800b732:	7016      	strb	r6, [r2, #0]
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 800b734:	8aa1      	ldrh	r1, [r4, #20]
    txBufLen = (infLen + (uint16_t)((uintptr_t)infBuf - (uintptr_t)txBlock)); /* Calculate overall buffer size */
 800b736:	1abf      	subs	r7, r7, r2
 800b738:	19db      	adds	r3, r3, r7
 800b73a:	b29b      	uxth	r3, r3
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 800b73c:	3902      	subs	r1, #2
        return RFAL_ERR_NOTSUPP;
 800b73e:	2018      	movs	r0, #24
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 800b740:	428b      	cmp	r3, r1
 800b742:	d816      	bhi.n	800b772 <rfalIsoDepTx+0xb2>
    rfalCreateByteFlagsTxRxContext( ctx, txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 800b744:	9201      	str	r2, [sp, #4]
 800b746:	466a      	mov	r2, sp
 800b748:	00db      	lsls	r3, r3, #3
 800b74a:	8113      	strh	r3, [r2, #8]
 800b74c:	69e3      	ldr	r3, [r4, #28]
 800b74e:	9303      	str	r3, [sp, #12]
 800b750:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 800b752:	00db      	lsls	r3, r3, #3
 800b754:	8213      	strh	r3, [r2, #16]
 800b756:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b758:	9305      	str	r3, [sp, #20]
 800b75a:	2300      	movs	r3, #0
 800b75c:	9306      	str	r3, [sp, #24]
 800b75e:	7863      	ldrb	r3, [r4, #1]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d101      	bne.n	800b768 <rfalIsoDepTx+0xa8>
 800b764:	3b02      	subs	r3, #2
 800b766:	930e      	str	r3, [sp, #56]	@ 0x38
 800b768:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    return rfalStartTransceive( &ctx );
 800b76a:	a801      	add	r0, sp, #4
    rfalCreateByteFlagsTxRxContext( ctx, txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 800b76c:	9307      	str	r3, [sp, #28]
    return rfalStartTransceive( &ctx );
 800b76e:	f7f8 ff3d 	bl	80045ec <rfalStartTransceive>
}
 800b772:	b009      	add	sp, #36	@ 0x24
 800b774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b776:	46c0      	nop			@ (mov r8, r8)
 800b778:	20001a70 	.word	0x20001a70
 800b77c:	20001a48 	.word	0x20001a48

0800b780 <rfalIsoDepHandleControlMsg>:
{
 800b780:	b5f0      	push	{r4, r5, r6, r7, lr}
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 800b782:	4c35      	ldr	r4, [pc, #212]	@ (800b858 <rfalIsoDepHandleControlMsg+0xd8>)
{
 800b784:	b087      	sub	sp, #28
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 800b786:	68e3      	ldr	r3, [r4, #12]
{
 800b788:	0005      	movs	r5, r0
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 800b78a:	9303      	str	r3, [sp, #12]
 800b78c:	6923      	ldr	r3, [r4, #16]
{
 800b78e:	000e      	movs	r6, r1
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 800b790:	9304      	str	r3, [sp, #16]
 800b792:	9a04      	ldr	r2, [sp, #16]
 800b794:	9b03      	ldr	r3, [sp, #12]
    RFAL_MEMSET( gIsoDep.ctrlBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 800b796:	2100      	movs	r1, #0
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 800b798:	189f      	adds	r7, r3, r2
    RFAL_MEMSET( gIsoDep.ctrlBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 800b79a:	4b30      	ldr	r3, [pc, #192]	@ (800b85c <rfalIsoDepHandleControlMsg+0xdc>)
 800b79c:	2204      	movs	r2, #4
 800b79e:	0018      	movs	r0, r3
 800b7a0:	9305      	str	r3, [sp, #20]
 800b7a2:	f007 fd87 	bl	80132b4 <memset>
    switch( controlMsg )
 800b7a6:	2d02      	cmp	r5, #2
 800b7a8:	d026      	beq.n	800b7f8 <rfalIsoDepHandleControlMsg+0x78>
 800b7aa:	2d03      	cmp	r5, #3
 800b7ac:	d041      	beq.n	800b832 <rfalIsoDepHandleControlMsg+0xb2>
 800b7ae:	0022      	movs	r2, r4
 800b7b0:	79a3      	ldrb	r3, [r4, #6]
 800b7b2:	3240      	adds	r2, #64	@ 0x40
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 800b7b4:	1c59      	adds	r1, r3, #1
 800b7b6:	71a1      	strb	r1, [r4, #6]
 800b7b8:	7812      	ldrb	r2, [r2, #0]
    switch( controlMsg )
 800b7ba:	2d01      	cmp	r5, #1
 800b7bc:	d010      	beq.n	800b7e0 <rfalIsoDepHandleControlMsg+0x60>
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d202      	bcs.n	800b7c8 <rfalIsoDepHandleControlMsg+0x48>
                return RFAL_ERR_TIMEOUT; /* NFC Forum mandates timeout or transmission error depending on previous errors */
 800b7c2:	2004      	movs	r0, #4
}
 800b7c4:	b007      	add	sp, #28
 800b7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pcb = rfalIsoDep_PCBRACK( gIsoDep.blockNumber );
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	78a0      	ldrb	r0, [r4, #2]
 800b7cc:	4018      	ands	r0, r3
 800b7ce:	33a1      	adds	r3, #161	@ 0xa1
            pcb = rfalIsoDep_PCBRNAK( gIsoDep.blockNumber );
 800b7d0:	4318      	orrs	r0, r3
    infLen  = 0;
 800b7d2:	2300      	movs	r3, #0
    return rfalIsoDepTx( pcb, gIsoDep.ctrlBuf, &gIsoDep.ctrlBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 800b7d4:	4a22      	ldr	r2, [pc, #136]	@ (800b860 <rfalIsoDepHandleControlMsg+0xe0>)
 800b7d6:	9905      	ldr	r1, [sp, #20]
 800b7d8:	9700      	str	r7, [sp, #0]
 800b7da:	f7ff ff71 	bl	800b6c0 <rfalIsoDepTx>
 800b7de:	e7f1      	b.n	800b7c4 <rfalIsoDepHandleControlMsg+0x44>
            if( ( gIsoDep.cntRRetrys++ >  gIsoDep.maxRetriesR   )   ||      /* Max R Block retries reached */
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d3ee      	bcc.n	800b7c2 <rfalIsoDepHandleControlMsg+0x42>
                ( gIsoDep.cntSWtxNack  >= gIsoDep.maxRetriesSnWTX )   )     /* Max number PICC is allowed to respond with S(WTX) to R(NAK) */
 800b7e4:	0023      	movs	r3, r4
 800b7e6:	3343      	adds	r3, #67	@ 0x43
            if( ( gIsoDep.cntRRetrys++ >  gIsoDep.maxRetriesR   )   ||      /* Max R Block retries reached */
 800b7e8:	7a62      	ldrb	r2, [r4, #9]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d2e8      	bcs.n	800b7c2 <rfalIsoDepHandleControlMsg+0x42>
            pcb = rfalIsoDep_PCBRNAK( gIsoDep.blockNumber );
 800b7f0:	78a0      	ldrb	r0, [r4, #2]
 800b7f2:	23b2      	movs	r3, #178	@ 0xb2
 800b7f4:	4028      	ands	r0, r5
 800b7f6:	e7eb      	b.n	800b7d0 <rfalIsoDepHandleControlMsg+0x50>
            if( (gIsoDep.cntSWtxRetrys++ > gIsoDep.maxRetriesSWTX) && (gIsoDep.maxRetriesSWTX != RFAL_ISODEP_MAX_WTX_RETRYS_ULTD) )
 800b7f8:	7a23      	ldrb	r3, [r4, #8]
                return RFAL_ERR_PROTO;
 800b7fa:	200b      	movs	r0, #11
            if( (gIsoDep.cntSWtxRetrys++ > gIsoDep.maxRetriesSWTX) && (gIsoDep.maxRetriesSWTX != RFAL_ISODEP_MAX_WTX_RETRYS_ULTD) )
 800b7fc:	1c5a      	adds	r2, r3, #1
 800b7fe:	7222      	strb	r2, [r4, #8]
 800b800:	0022      	movs	r2, r4
 800b802:	3242      	adds	r2, #66	@ 0x42
 800b804:	7812      	ldrb	r2, [r2, #0]
 800b806:	429a      	cmp	r2, r3
 800b808:	d3dc      	bcc.n	800b7c4 <rfalIsoDepHandleControlMsg+0x44>
            if( ! rfalIsoDep_isWTXMValid(param) )
 800b80a:	1e73      	subs	r3, r6, #1
 800b80c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b80e:	d8d9      	bhi.n	800b7c4 <rfalIsoDepHandleControlMsg+0x44>
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 800b810:	7863      	ldrb	r3, [r4, #1]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d108      	bne.n	800b828 <rfalIsoDepHandleControlMsg+0xa8>
                fwtTemp = RFAL_MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 800b816:	2280      	movs	r2, #128	@ 0x80
                fwtTemp = (gIsoDep.fwt * param);
 800b818:	9f03      	ldr	r7, [sp, #12]
                fwtTemp = RFAL_MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 800b81a:	04d2      	lsls	r2, r2, #19
                fwtTemp = (gIsoDep.fwt * param);
 800b81c:	4377      	muls	r7, r6
                fwtTemp = RFAL_MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 800b81e:	4297      	cmp	r7, r2
 800b820:	d900      	bls.n	800b824 <rfalIsoDepHandleControlMsg+0xa4>
 800b822:	0017      	movs	r7, r2
                fwtTemp += gIsoDep.dFwt;
 800b824:	9b04      	ldr	r3, [sp, #16]
 800b826:	19df      	adds	r7, r3, r7
            gIsoDep.ctrlBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 800b828:	3448      	adds	r4, #72	@ 0x48
 800b82a:	2301      	movs	r3, #1
            pcb = ISODEP_PCB_SWTX;
 800b82c:	20f2      	movs	r0, #242	@ 0xf2
            gIsoDep.ctrlBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 800b82e:	7026      	strb	r6, [r4, #0]
            break;
 800b830:	e7d0      	b.n	800b7d4 <rfalIsoDepHandleControlMsg+0x54>
            if( gIsoDep.cntSDslRetrys++ > gIsoDep.maxRetriesSDSL )
 800b832:	79e3      	ldrb	r3, [r4, #7]
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	71e2      	strb	r2, [r4, #7]
 800b838:	0022      	movs	r2, r4
 800b83a:	3241      	adds	r2, #65	@ 0x41
 800b83c:	7812      	ldrb	r2, [r2, #0]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d3bf      	bcc.n	800b7c2 <rfalIsoDepHandleControlMsg+0x42>
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 800b842:	7863      	ldrb	r3, [r4, #1]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d104      	bne.n	800b852 <rfalIsoDepHandleControlMsg+0xd2>
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 800b848:	278c      	movs	r7, #140	@ 0x8c
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 800b84a:	7025      	strb	r5, [r4, #0]
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 800b84c:	027f      	lsls	r7, r7, #9
            pcb = ISODEP_PCB_SDSL;
 800b84e:	20c2      	movs	r0, #194	@ 0xc2
 800b850:	e7c0      	b.n	800b7d4 <rfalIsoDepHandleControlMsg+0x54>
    infLen  = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	e7fb      	b.n	800b84e <rfalIsoDepHandleControlMsg+0xce>
 800b856:	46c0      	nop			@ (mov r8, r8)
 800b858:	20001a48 	.word	0x20001a48
 800b85c:	20001a8e 	.word	0x20001a8e
 800b860:	20001a90 	.word	0x20001a90

0800b864 <rfalIsoDepStartRATS>:
{
 800b864:	b530      	push	{r4, r5, lr}
 800b866:	0005      	movs	r5, r0
 800b868:	b089      	sub	sp, #36	@ 0x24
        return RFAL_ERR_PARAM;
 800b86a:	2007      	movs	r0, #7
    if( ats == NULL)
 800b86c:	2a00      	cmp	r2, #0
 800b86e:	d01d      	beq.n	800b8ac <rfalIsoDepStartRATS+0x48>
    gIsoDep.rxBuf   = (uint8_t*) ats;
 800b870:	4c0f      	ldr	r4, [pc, #60]	@ (800b8b0 <rfalIsoDepStartRATS+0x4c>)
    gIsoDep.actv.ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 800b872:	30d9      	adds	r0, #217	@ 0xd9
    gIsoDep.rxLen8  = atsLen;
 800b874:	67a3      	str	r3, [r4, #120]	@ 0x78
    gIsoDep.actv.ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 800b876:	0023      	movs	r3, r4
 800b878:	334c      	adds	r3, #76	@ 0x4c
 800b87a:	7018      	strb	r0, [r3, #0]
    gIsoDep.actv.ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 800b87c:	38d1      	subs	r0, #209	@ 0xd1
    gIsoDep.did     = DID;
 800b87e:	70e1      	strb	r1, [r4, #3]
    gIsoDep.actv.ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 800b880:	012d      	lsls	r5, r5, #4
 800b882:	4001      	ands	r1, r0
 800b884:	430d      	orrs	r5, r1
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800b886:	9301      	str	r3, [sp, #4]
 800b888:	4669      	mov	r1, sp
 800b88a:	2310      	movs	r3, #16
 800b88c:	810b      	strh	r3, [r1, #8]
 800b88e:	3390      	adds	r3, #144	@ 0x90
 800b890:	820b      	strh	r3, [r1, #16]
 800b892:	4b08      	ldr	r3, [pc, #32]	@ (800b8b4 <rfalIsoDepStartRATS+0x50>)
    gIsoDep.rxBuf   = (uint8_t*) ats;
 800b894:	61e2      	str	r2, [r4, #28]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800b896:	9305      	str	r3, [sp, #20]
 800b898:	2300      	movs	r3, #0
 800b89a:	9306      	str	r3, [sp, #24]
 800b89c:	4b06      	ldr	r3, [pc, #24]	@ (800b8b8 <rfalIsoDepStartRATS+0x54>)
    gIsoDep.actv.ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 800b89e:	344d      	adds	r4, #77	@ 0x4d
    return rfalStartTransceive( &ctx );
 800b8a0:	a801      	add	r0, sp, #4
    gIsoDep.actv.ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 800b8a2:	7025      	strb	r5, [r4, #0]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800b8a4:	9203      	str	r2, [sp, #12]
 800b8a6:	9307      	str	r3, [sp, #28]
    return rfalStartTransceive( &ctx );
 800b8a8:	f7f8 fea0 	bl	80045ec <rfalStartTransceive>
}
 800b8ac:	b009      	add	sp, #36	@ 0x24
 800b8ae:	bd30      	pop	{r4, r5, pc}
 800b8b0:	20001a48 	.word	0x20001a48
 800b8b4:	20001a6a 	.word	0x20001a6a
 800b8b8:	00046780 	.word	0x00046780

0800b8bc <rfalIsoDepGetPPSSTatus>:
{
 800b8bc:	b510      	push	{r4, lr}
    ret = rfalGetTransceiveStatus();
 800b8be:	f7f8 ff75 	bl	80047ac <rfalGetTransceiveStatus>
    if( ret == RFAL_ERR_NONE )
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d10d      	bne.n	800b8e2 <rfalIsoDepGetPPSSTatus+0x26>
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 800b8c6:	4b07      	ldr	r3, [pc, #28]	@ (800b8e4 <rfalIsoDepGetPPSSTatus+0x28>)
 800b8c8:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800b8ca:	3207      	adds	r2, #7
 800b8cc:	08d2      	lsrs	r2, r2, #3
 800b8ce:	845a      	strh	r2, [r3, #34]	@ 0x22
        if( (gIsoDep.rxBufLen != RFAL_ISODEP_PPS_RES_LEN) || (*gIsoDep.rxBuf != gIsoDep.actv.ppsReq.PPSS) ) 
 800b8d0:	2a01      	cmp	r2, #1
 800b8d2:	d105      	bne.n	800b8e0 <rfalIsoDepGetPPSSTatus+0x24>
 800b8d4:	69da      	ldr	r2, [r3, #28]
 800b8d6:	334c      	adds	r3, #76	@ 0x4c
 800b8d8:	7812      	ldrb	r2, [r2, #0]
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d000      	beq.n	800b8e2 <rfalIsoDepGetPPSSTatus+0x26>
            return RFAL_ERR_PROTO;
 800b8e0:	200b      	movs	r0, #11
}
 800b8e2:	bd10      	pop	{r4, pc}
 800b8e4:	20001a48 	.word	0x20001a48

0800b8e8 <rfalIsoDepStartATTRIB>:
{
 800b8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ea:	b08f      	sub	sp, #60	@ 0x3c
 800b8ec:	9103      	str	r1, [sp, #12]
 800b8ee:	a914      	add	r1, sp, #80	@ 0x50
 800b8f0:	7809      	ldrb	r1, [r1, #0]
 800b8f2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800b8f4:	9104      	str	r1, [sp, #16]
 800b8f6:	a915      	add	r1, sp, #84	@ 0x54
 800b8f8:	7809      	ldrb	r1, [r1, #0]
 800b8fa:	9002      	str	r0, [sp, #8]
 800b8fc:	9105      	str	r1, [sp, #20]
 800b8fe:	a818      	add	r0, sp, #96	@ 0x60
 800b900:	a916      	add	r1, sp, #88	@ 0x58
 800b902:	7804      	ldrb	r4, [r0, #0]
 800b904:	7809      	ldrb	r1, [r1, #0]
        return RFAL_ERR_NONE;
 800b906:	1e28      	subs	r0, r5, #0
{
 800b908:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 800b90a:	d046      	beq.n	800b99a <rfalIsoDepStartATTRIB+0xb2>
        return RFAL_ERR_NONE;
 800b90c:	1e30      	subs	r0, r6, #0
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 800b90e:	d044      	beq.n	800b99a <rfalIsoDepStartATTRIB+0xb2>
 800b910:	0017      	movs	r7, r2
        return RFAL_ERR_NONE;
 800b912:	2000      	movs	r0, #0
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 800b914:	431f      	orrs	r7, r3
 800b916:	2f03      	cmp	r7, #3
 800b918:	d83f      	bhi.n	800b99a <rfalIsoDepStartATTRIB+0xb2>
 800b91a:	290e      	cmp	r1, #14
 800b91c:	d83d      	bhi.n	800b99a <rfalIsoDepStartATTRIB+0xb2>
    gIsoDep.rxBuf   = (uint8_t*)  attribRes;
 800b91e:	4828      	ldr	r0, [pc, #160]	@ (800b9c0 <rfalIsoDepStartATTRIB+0xd8>)
    gIsoDep.actv.attribReq.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 800b920:	271d      	movs	r7, #29
    gIsoDep.rxLen8  = attribResLen;
 800b922:	6786      	str	r6, [r0, #120]	@ 0x78
    gIsoDep.actv.attribReq.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 800b924:	0006      	movs	r6, r0
 800b926:	364c      	adds	r6, #76	@ 0x4c
 800b928:	7037      	strb	r7, [r6, #0]
    gIsoDep.actv.attribReq.Param.PARAM1 = PARAM1;
 800b92a:	3734      	adds	r7, #52	@ 0x34
 800b92c:	46bc      	mov	ip, r7
 800b92e:	4484      	add	ip, r0
 800b930:	4667      	mov	r7, ip
    gIsoDep.actv.attribReq.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 800b932:	0192      	lsls	r2, r2, #6
 800b934:	011b      	lsls	r3, r3, #4
 800b936:	4313      	orrs	r3, r2
 800b938:	220f      	movs	r2, #15
    gIsoDep.actv.attribReq.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 800b93a:	9601      	str	r6, [sp, #4]
    gIsoDep.actv.attribReq.Param.PARAM1 = PARAM1;
 800b93c:	9e03      	ldr	r6, [sp, #12]
    gIsoDep.did     = DID;
 800b93e:	70c1      	strb	r1, [r0, #3]
    gIsoDep.actv.attribReq.Param.PARAM1 = PARAM1;
 800b940:	703e      	strb	r6, [r7, #0]
    gIsoDep.actv.attribReq.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 800b942:	9f04      	ldr	r7, [sp, #16]
    gIsoDep.rxBuf   = (uint8_t*)  attribRes;
 800b944:	61c5      	str	r5, [r0, #28]
    gIsoDep.actv.attribReq.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 800b946:	4017      	ands	r7, r2
 800b948:	0002      	movs	r2, r0
 800b94a:	433b      	orrs	r3, r7
 800b94c:	3252      	adds	r2, #82	@ 0x52
 800b94e:	7013      	strb	r3, [r2, #0]
    gIsoDep.actv.attribReq.Param.PARAM3 = PARAM3;
 800b950:	0003      	movs	r3, r0
 800b952:	9a05      	ldr	r2, [sp, #20]
 800b954:	3353      	adds	r3, #83	@ 0x53
 800b956:	701a      	strb	r2, [r3, #0]
    gIsoDep.actv.attribReq.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 800b958:	0003      	movs	r3, r0
 800b95a:	3354      	adds	r3, #84	@ 0x54
 800b95c:	7019      	strb	r1, [r3, #0]
    RFAL_MEMCPY(gIsoDep.actv.attribReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 800b95e:	2204      	movs	r2, #4
 800b960:	9902      	ldr	r1, [sp, #8]
 800b962:	304d      	adds	r0, #77	@ 0x4d
 800b964:	f007 fcda 	bl	801331c <memcpy>
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 800b968:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d020      	beq.n	800b9b0 <rfalIsoDepStartATTRIB+0xc8>
 800b96e:	2c00      	cmp	r4, #0
 800b970:	d115      	bne.n	800b99e <rfalIsoDepStartATTRIB+0xb6>
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.attribReq, (uint16_t)(RFAL_ISODEP_ATTRIB_HDR_LEN + RFAL_MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)gIsoDep.rxBuf, sizeof(rfalIsoDepAttribRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800b972:	9b01      	ldr	r3, [sp, #4]
 800b974:	9307      	str	r3, [sp, #28]
 800b976:	3409      	adds	r4, #9
 800b978:	00e4      	lsls	r4, r4, #3
 800b97a:	ab06      	add	r3, sp, #24
 800b97c:	811c      	strh	r4, [r3, #8]
 800b97e:	2384      	movs	r3, #132	@ 0x84
 800b980:	aa06      	add	r2, sp, #24
 800b982:	005b      	lsls	r3, r3, #1
 800b984:	8213      	strh	r3, [r2, #16]
 800b986:	4b0f      	ldr	r3, [pc, #60]	@ (800b9c4 <rfalIsoDepStartATTRIB+0xdc>)
    return rfalStartTransceive( &ctx );
 800b988:	a807      	add	r0, sp, #28
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.attribReq, (uint16_t)(RFAL_ISODEP_ATTRIB_HDR_LEN + RFAL_MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)gIsoDep.rxBuf, sizeof(rfalIsoDepAttribRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800b98a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b98c:	2300      	movs	r3, #0
 800b98e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b990:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b992:	9509      	str	r5, [sp, #36]	@ 0x24
 800b994:	930d      	str	r3, [sp, #52]	@ 0x34
    return rfalStartTransceive( &ctx );
 800b996:	f7f8 fe29 	bl	80045ec <rfalStartTransceive>
}
 800b99a:	b00f      	add	sp, #60	@ 0x3c
 800b99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        RFAL_MEMCPY(gIsoDep.actv.attribReq.HLInfo, HLInfo, RFAL_MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 800b99e:	480a      	ldr	r0, [pc, #40]	@ (800b9c8 <rfalIsoDepStartATTRIB+0xe0>)
 800b9a0:	1c22      	adds	r2, r4, #0
 800b9a2:	2c20      	cmp	r4, #32
 800b9a4:	d900      	bls.n	800b9a8 <rfalIsoDepStartATTRIB+0xc0>
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800b9aa:	b2d2      	uxtb	r2, r2
 800b9ac:	f007 fcb6 	bl	801331c <memcpy>
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.attribReq, (uint16_t)(RFAL_ISODEP_ATTRIB_HDR_LEN + RFAL_MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)gIsoDep.rxBuf, sizeof(rfalIsoDepAttribRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800b9b0:	4b06      	ldr	r3, [pc, #24]	@ (800b9cc <rfalIsoDepStartATTRIB+0xe4>)
 800b9b2:	9307      	str	r3, [sp, #28]
 800b9b4:	2c1f      	cmp	r4, #31
 800b9b6:	d9de      	bls.n	800b976 <rfalIsoDepStartATTRIB+0x8e>
 800b9b8:	24a4      	movs	r4, #164	@ 0xa4
 800b9ba:	0064      	lsls	r4, r4, #1
 800b9bc:	e7dd      	b.n	800b97a <rfalIsoDepStartATTRIB+0x92>
 800b9be:	46c0      	nop			@ (mov r8, r8)
 800b9c0:	20001a48 	.word	0x20001a48
 800b9c4:	20001a6a 	.word	0x20001a6a
 800b9c8:	20001a9d 	.word	0x20001a9d
 800b9cc:	20001a94 	.word	0x20001a94

0800b9d0 <rfalIsoDepStartPPS>:
{
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	0005      	movs	r5, r0
 800b9d4:	b088      	sub	sp, #32
        return RFAL_ERR_PARAM;
 800b9d6:	2007      	movs	r0, #7
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d024      	beq.n	800ba26 <rfalIsoDepStartPPS+0x56>
 800b9dc:	000c      	movs	r4, r1
 800b9de:	4314      	orrs	r4, r2
 800b9e0:	2c03      	cmp	r4, #3
 800b9e2:	d820      	bhi.n	800ba26 <rfalIsoDepStartPPS+0x56>
 800b9e4:	2d0e      	cmp	r5, #14
 800b9e6:	d81e      	bhi.n	800ba26 <rfalIsoDepStartPPS+0x56>
    gIsoDep.rxBuf   = (uint8_t*) ppsRes;
 800b9e8:	4c10      	ldr	r4, [pc, #64]	@ (800ba2c <rfalIsoDepStartPPS+0x5c>)
    gIsoDep.actv.ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 800b9ea:	0089      	lsls	r1, r1, #2
 800b9ec:	430a      	orrs	r2, r1
    gIsoDep.rxBuf   = (uint8_t*) ppsRes;
 800b9ee:	61e3      	str	r3, [r4, #28]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800b9f0:	4669      	mov	r1, sp
    gIsoDep.actv.ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 800b9f2:	3837      	subs	r0, #55	@ 0x37
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800b9f4:	9303      	str	r3, [sp, #12]
 800b9f6:	2308      	movs	r3, #8
    gIsoDep.actv.ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 800b9f8:	4328      	orrs	r0, r5
 800b9fa:	0025      	movs	r5, r4
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800b9fc:	820b      	strh	r3, [r1, #16]
 800b9fe:	4b0c      	ldr	r3, [pc, #48]	@ (800ba30 <rfalIsoDepStartPPS+0x60>)
    gIsoDep.actv.ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 800ba00:	354c      	adds	r5, #76	@ 0x4c
 800ba02:	7028      	strb	r0, [r5, #0]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800ba04:	9305      	str	r3, [sp, #20]
    gIsoDep.actv.ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 800ba06:	0020      	movs	r0, r4
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800ba08:	2300      	movs	r3, #0
    gIsoDep.actv.ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 800ba0a:	2611      	movs	r6, #17
    gIsoDep.actv.ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 800ba0c:	344e      	adds	r4, #78	@ 0x4e
 800ba0e:	7022      	strb	r2, [r4, #0]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800ba10:	2218      	movs	r2, #24
    gIsoDep.actv.ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 800ba12:	304d      	adds	r0, #77	@ 0x4d
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800ba14:	9306      	str	r3, [sp, #24]
 800ba16:	4b07      	ldr	r3, [pc, #28]	@ (800ba34 <rfalIsoDepStartPPS+0x64>)
    gIsoDep.actv.ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 800ba18:	7006      	strb	r6, [r0, #0]
    return rfalStartTransceive( &ctx );
 800ba1a:	a801      	add	r0, sp, #4
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 800ba1c:	9501      	str	r5, [sp, #4]
 800ba1e:	810a      	strh	r2, [r1, #8]
 800ba20:	9307      	str	r3, [sp, #28]
    return rfalStartTransceive( &ctx );
 800ba22:	f7f8 fde3 	bl	80045ec <rfalStartTransceive>
}
 800ba26:	b008      	add	sp, #32
 800ba28:	bd70      	pop	{r4, r5, r6, pc}
 800ba2a:	46c0      	nop			@ (mov r8, r8)
 800ba2c:	20001a48 	.word	0x20001a48
 800ba30:	20001a6a 	.word	0x20001a6a
 800ba34:	00046780 	.word	0x00046780

0800ba38 <rfalIsoDepReSendControlMsg.isra.0>:
static ReturnCode rfalIsoDepReSendControlMsg( void )
 800ba38:	b510      	push	{r4, lr}
    if( rfalIsoDep_PCBisRACK( gIsoDep.lastPCB ) )
 800ba3a:	4b0f      	ldr	r3, [pc, #60]	@ (800ba78 <rfalIsoDepReSendControlMsg.isra.0+0x40>)
 800ba3c:	2109      	movs	r1, #9
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	4a0e      	ldr	r2, [pc, #56]	@ (800ba7c <rfalIsoDepReSendControlMsg.isra.0+0x44>)
 800ba42:	0018      	movs	r0, r3
 800ba44:	4388      	bics	r0, r1
 800ba46:	28a2      	cmp	r0, #162	@ 0xa2
 800ba48:	d104      	bne.n	800ba54 <rfalIsoDepReSendControlMsg.isra.0+0x1c>
        return rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM );
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	0008      	movs	r0, r1
        return rfalIsoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM );
 800ba4e:	f7ff fe97 	bl	800b780 <rfalIsoDepHandleControlMsg>
}
 800ba52:	bd10      	pop	{r4, pc}
    if( rfalIsoDep_PCBisRNAK( gIsoDep.lastPCB ) )
 800ba54:	28b2      	cmp	r0, #178	@ 0xb2
 800ba56:	d102      	bne.n	800ba5e <rfalIsoDepReSendControlMsg.isra.0+0x26>
        return rfalIsoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM );
 800ba58:	2100      	movs	r1, #0
 800ba5a:	2001      	movs	r0, #1
 800ba5c:	e7f7      	b.n	800ba4e <rfalIsoDepReSendControlMsg.isra.0+0x16>
    if( rfalIsoDep_PCBisSDeselect( gIsoDep.lastPCB ) )
 800ba5e:	2108      	movs	r1, #8
 800ba60:	438b      	bics	r3, r1
 800ba62:	2bc2      	cmp	r3, #194	@ 0xc2
 800ba64:	d102      	bne.n	800ba6c <rfalIsoDepReSendControlMsg.isra.0+0x34>
        return rfalIsoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM );
 800ba66:	2100      	movs	r1, #0
 800ba68:	2003      	movs	r0, #3
 800ba6a:	e7f0      	b.n	800ba4e <rfalIsoDepReSendControlMsg.isra.0+0x16>
    if( rfalIsoDep_PCBisSWTX( gIsoDep.lastPCB ) )
 800ba6c:	2bf2      	cmp	r3, #242	@ 0xf2
 800ba6e:	d1f0      	bne.n	800ba52 <rfalIsoDepReSendControlMsg.isra.0+0x1a>
        return rfalIsoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM );
 800ba70:	3229      	adds	r2, #41	@ 0x29
 800ba72:	2002      	movs	r0, #2
 800ba74:	7811      	ldrb	r1, [r2, #0]
 800ba76:	e7ea      	b.n	800ba4e <rfalIsoDepReSendControlMsg.isra.0+0x16>
 800ba78:	20001a70 	.word	0x20001a70
 800ba7c:	20001a48 	.word	0x20001a48

0800ba80 <rfalIsoDepInitialize>:
{
 800ba80:	b570      	push	{r4, r5, r6, lr}
    gIsoDep.state        = ISODEP_ST_IDLE;
 800ba82:	4c15      	ldr	r4, [pc, #84]	@ (800bad8 <rfalIsoDepInitialize+0x58>)
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 800ba84:	23ff      	movs	r3, #255	@ 0xff
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 800ba86:	0022      	movs	r2, r4
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 800ba88:	7123      	strb	r3, [r4, #4]
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 800ba8a:	3bef      	subs	r3, #239	@ 0xef
 800ba8c:	6163      	str	r3, [r4, #20]
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 800ba8e:	322b      	adds	r2, #43	@ 0x2b
 800ba90:	3b0f      	subs	r3, #15
 800ba92:	7013      	strb	r3, [r2, #0]
    gIsoDep.txBufInfPos  = 0U;
 800ba94:	2280      	movs	r2, #128	@ 0x80
 800ba96:	0352      	lsls	r2, r2, #13
 800ba98:	6262      	str	r2, [r4, #36]	@ 0x24
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 800ba9a:	0022      	movs	r2, r4
 800ba9c:	2140      	movs	r1, #64	@ 0x40
 800ba9e:	3228      	adds	r2, #40	@ 0x28
 800baa0:	7011      	strb	r1, [r2, #0]
    gIsoDep.lastDID00    = false;
 800baa2:	2280      	movs	r2, #128	@ 0x80
 800baa4:	0492      	lsls	r2, r2, #18
 800baa6:	63e2      	str	r2, [r4, #60]	@ 0x3c
    gIsoDep.maxRetriesR      = RFAL_ISODEP_MAX_R_RETRYS;
 800baa8:	4a0c      	ldr	r2, [pc, #48]	@ (800badc <rfalIsoDepInitialize+0x5c>)
    gIsoDep.state        = ISODEP_ST_IDLE;
 800baaa:	2500      	movs	r5, #0
    gIsoDep.maxRetriesR      = RFAL_ISODEP_MAX_R_RETRYS;
 800baac:	6422      	str	r2, [r4, #64]	@ 0x40
    gIsoDep.maxRetriesRATS   = RFAL_ISODEP_RATS_RETRIES;
 800baae:	1da2      	adds	r2, r4, #6
 800bab0:	87d3      	strh	r3, [r2, #62]	@ 0x3e
    gIsoDep.APDUTxPos       = 0;
 800bab2:	0023      	movs	r3, r4
 800bab4:	33b4      	adds	r3, #180	@ 0xb4
 800bab6:	601d      	str	r5, [r3, #0]
    gIsoDep.APDUParam.rxLen = NULL;
 800bab8:	0023      	movs	r3, r4
 800baba:	339c      	adds	r3, #156	@ 0x9c
 800babc:	601d      	str	r5, [r3, #0]
    gIsoDep.APDUParam.rxBuf = NULL;
 800babe:	0023      	movs	r3, r4
 800bac0:	3398      	adds	r3, #152	@ 0x98
 800bac2:	601d      	str	r5, [r3, #0]
    gIsoDep.APDUParam.txBuf = NULL;
 800bac4:	0023      	movs	r3, r4
 800bac6:	3390      	adds	r3, #144	@ 0x90
    gIsoDep.state        = ISODEP_ST_IDLE;
 800bac8:	6025      	str	r5, [r4, #0]
    gIsoDep.rxLen        = NULL;
 800baca:	6325      	str	r5, [r4, #48]	@ 0x30
    gIsoDep.rxBuf        = NULL;
 800bacc:	61e5      	str	r5, [r4, #28]
    gIsoDep.APDUParam.txBuf = NULL;
 800bace:	601d      	str	r5, [r3, #0]
    rfalIsoDepClearCounters();
 800bad0:	f7ff fda0 	bl	800b614 <rfalIsoDepClearCounters>
    gIsoDep.WTXTimer = 0U;
 800bad4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
 800bad8:	20001a48 	.word	0x20001a48
 800badc:	03140003 	.word	0x03140003

0800bae0 <rfalIsoDepDataExchangePCD>:
{
 800bae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bae2:	b087      	sub	sp, #28
 800bae4:	1e05      	subs	r5, r0, #0
 800bae6:	9102      	str	r1, [sp, #8]
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 800bae8:	d102      	bne.n	800baf0 <rfalIsoDepDataExchangePCD+0x10>
        return RFAL_ERR_PARAM;
 800baea:	2007      	movs	r0, #7
}
 800baec:	b007      	add	sp, #28
 800baee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 800baf0:	9b02      	ldr	r3, [sp, #8]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d0f9      	beq.n	800baea <rfalIsoDepDataExchangePCD+0xa>
    *outIsChaining = false;
 800baf6:	2300      	movs	r3, #0
 800baf8:	9a02      	ldr	r2, [sp, #8]
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 800bafa:	4c8f      	ldr	r4, [pc, #572]	@ (800bd38 <rfalIsoDepDataExchangePCD+0x258>)
    *outIsChaining = false;
 800bafc:	7013      	strb	r3, [r2, #0]
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 800bafe:	78e3      	ldrb	r3, [r4, #3]
 800bb00:	1e5a      	subs	r2, r3, #1
 800bb02:	4193      	sbcs	r3, r2
 800bb04:	0022      	movs	r2, r4
 800bb06:	3301      	adds	r3, #1
 800bb08:	322b      	adds	r2, #43	@ 0x2b
 800bb0a:	7013      	strb	r3, [r2, #0]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 800bb0c:	7921      	ldrb	r1, [r4, #4]
 800bb0e:	29ff      	cmp	r1, #255	@ 0xff
 800bb10:	d001      	beq.n	800bb16 <rfalIsoDepDataExchangePCD+0x36>
 800bb12:	3301      	adds	r3, #1
 800bb14:	7013      	strb	r3, [r2, #0]
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 800bb16:	0023      	movs	r3, r4
 800bb18:	1da2      	adds	r2, r4, #6
 800bb1a:	332b      	adds	r3, #43	@ 0x2b
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	7fd2      	ldrb	r2, [r2, #31]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d3e2      	bcc.n	800baea <rfalIsoDepDataExchangePCD+0xa>
 800bb24:	1d62      	adds	r2, r4, #5
 800bb26:	7fd2      	ldrb	r2, [r2, #31]
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d8de      	bhi.n	800baea <rfalIsoDepDataExchangePCD+0xa>
    switch( gIsoDep.state )
 800bb2c:	7826      	ldrb	r6, [r4, #0]
 800bb2e:	2e01      	cmp	r6, #1
 800bb30:	d019      	beq.n	800bb66 <rfalIsoDepDataExchangePCD+0x86>
 800bb32:	d800      	bhi.n	800bb36 <rfalIsoDepDataExchangePCD+0x56>
 800bb34:	e080      	b.n	800bc38 <rfalIsoDepDataExchangePCD+0x158>
 800bb36:	3e02      	subs	r6, #2
    return RFAL_ERR_INTERNAL;
 800bb38:	200c      	movs	r0, #12
    switch( gIsoDep.state )
 800bb3a:	2e01      	cmp	r6, #1
 800bb3c:	d8d6      	bhi.n	800baec <rfalIsoDepDataExchangePCD+0xc>
            ret = rfalGetTransceiveStatus();
 800bb3e:	f7f8 fe35 	bl	80047ac <rfalGetTransceiveStatus>
            switch( ret )
 800bb42:	2809      	cmp	r0, #9
 800bb44:	d923      	bls.n	800bb8e <rfalIsoDepDataExchangePCD+0xae>
 800bb46:	0003      	movs	r3, r0
 800bb48:	3b15      	subs	r3, #21
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	2b13      	cmp	r3, #19
 800bb4e:	d8cd      	bhi.n	800baec <rfalIsoDepDataExchangePCD+0xc>
 800bb50:	4a7a      	ldr	r2, [pc, #488]	@ (800bd3c <rfalIsoDepDataExchangePCD+0x25c>)
 800bb52:	40da      	lsrs	r2, r3
 800bb54:	07d2      	lsls	r2, r2, #31
 800bb56:	d5c9      	bpl.n	800baec <rfalIsoDepDataExchangePCD+0xc>
                    if( gIsoDep.isRxChaining )
 800bb58:	4b77      	ldr	r3, [pc, #476]	@ (800bd38 <rfalIsoDepDataExchangePCD+0x258>)
 800bb5a:	7dd9      	ldrb	r1, [r3, #23]
 800bb5c:	2900      	cmp	r1, #0
 800bb5e:	d01d      	beq.n	800bb9c <rfalIsoDepDataExchangePCD+0xbc>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 800bb60:	2100      	movs	r1, #0
 800bb62:	0008      	movs	r0, r1
 800bb64:	e01d      	b.n	800bba2 <rfalIsoDepDataExchangePCD+0xc2>
            ret = rfalIsoDepTx( rfalIsoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 800bb66:	8c23      	ldrh	r3, [r4, #32]
 800bb68:	68e7      	ldr	r7, [r4, #12]
 800bb6a:	9303      	str	r3, [sp, #12]
 800bb6c:	6923      	ldr	r3, [r4, #16]
 800bb6e:	78a0      	ldrb	r0, [r4, #2]
 800bb70:	469c      	mov	ip, r3
 800bb72:	4030      	ands	r0, r6
 800bb74:	2602      	movs	r6, #2
 800bb76:	69a1      	ldr	r1, [r4, #24]
 800bb78:	4467      	add	r7, ip
 800bb7a:	9b03      	ldr	r3, [sp, #12]
 800bb7c:	188a      	adds	r2, r1, r2
 800bb7e:	4330      	orrs	r0, r6
 800bb80:	9700      	str	r7, [sp, #0]
 800bb82:	f7ff fd9d 	bl	800b6c0 <rfalIsoDepTx>
            switch( ret )
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d1b0      	bne.n	800baec <rfalIsoDepDataExchangePCD+0xc>
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 800bb8a:	7026      	strb	r6, [r4, #0]
                  break;
 800bb8c:	e7d7      	b.n	800bb3e <rfalIsoDepDataExchangePCD+0x5e>
            switch( ret )
 800bb8e:	f7f4 fac3 	bl	8000118 <__gnu_thumb1_case_sqi>
 800bb92:	ad0f      	.short	0xad0f
 800bb94:	ade3ad79 	.word	0xade3ad79
 800bb98:	e3adadad 	.word	0xe3adadad
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 800bb9c:	7818      	ldrb	r0, [r3, #0]
 800bb9e:	2803      	cmp	r0, #3
 800bba0:	d104      	bne.n	800bbac <rfalIsoDepDataExchangePCD+0xcc>
                    RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 800bba2:	f7ff fded 	bl	800b780 <rfalIsoDepHandleControlMsg>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d1a0      	bne.n	800baec <rfalIsoDepDataExchangePCD+0xc>
 800bbaa:	e06b      	b.n	800bc84 <rfalIsoDepDataExchangePCD+0x1a4>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 800bbac:	2001      	movs	r0, #1
 800bbae:	e7f8      	b.n	800bba2 <rfalIsoDepDataExchangePCD+0xc2>
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 800bbb0:	882a      	ldrh	r2, [r5, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 800bbb2:	4b63      	ldr	r3, [pc, #396]	@ (800bd40 <rfalIsoDepDataExchangePCD+0x260>)
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 800bbb4:	3207      	adds	r2, #7
 800bbb6:	08d2      	lsrs	r2, r2, #3
 800bbb8:	802a      	strh	r2, [r5, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 800bbba:	781f      	ldrb	r7, [r3, #0]
 800bbbc:	495e      	ldr	r1, [pc, #376]	@ (800bd38 <rfalIsoDepDataExchangePCD+0x258>)
 800bbbe:	42ba      	cmp	r2, r7
 800bbc0:	d201      	bcs.n	800bbc6 <rfalIsoDepDataExchangePCD+0xe6>
                return RFAL_ERR_PROTO;
 800bbc2:	200b      	movs	r0, #11
 800bbc4:	e792      	b.n	800baec <rfalIsoDepDataExchangePCD+0xc>
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 800bbc6:	8ccb      	ldrh	r3, [r1, #38]	@ 0x26
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d9fa      	bls.n	800bbc2 <rfalIsoDepDataExchangePCD+0xe2>
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( rfalIsoDep_PCBhasDID(rxPCB) || rfalIsoDep_PCBhasNAD(rxPCB)) )
 800bbcc:	0008      	movs	r0, r1
 800bbce:	3045      	adds	r0, #69	@ 0x45
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 800bbd0:	69ce      	ldr	r6, [r1, #28]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( rfalIsoDep_PCBhasDID(rxPCB) || rfalIsoDep_PCBhasNAD(rxPCB)) )
 800bbd2:	7800      	ldrb	r0, [r0, #0]
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 800bbd4:	7833      	ldrb	r3, [r6, #0]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( rfalIsoDep_PCBhasDID(rxPCB) || rfalIsoDep_PCBhasNAD(rxPCB)) )
 800bbd6:	9003      	str	r0, [sp, #12]
 800bbd8:	2801      	cmp	r0, #1
 800bbda:	d102      	bne.n	800bbe2 <rfalIsoDepDataExchangePCD+0x102>
 800bbdc:	300b      	adds	r0, #11
 800bbde:	4203      	tst	r3, r0
 800bbe0:	d1ef      	bne.n	800bbc2 <rfalIsoDepDataExchangePCD+0xe2>
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( (!rfalIsoDep_PCBhasDID(rxPCB)) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 800bbe2:	78c8      	ldrb	r0, [r1, #3]
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d004      	beq.n	800bbf2 <rfalIsoDepDataExchangePCD+0x112>
 800bbe8:	071c      	lsls	r4, r3, #28
 800bbea:	d5ea      	bpl.n	800bbc2 <rfalIsoDepDataExchangePCD+0xe2>
 800bbec:	7874      	ldrb	r4, [r6, #1]
 800bbee:	4284      	cmp	r4, r0
 800bbf0:	d1e7      	bne.n	800bbc2 <rfalIsoDepDataExchangePCD+0xe2>
            if( rfalIsoDep_PCBisSBlock(rxPCB) )
 800bbf2:	2038      	movs	r0, #56	@ 0x38
 800bbf4:	001c      	movs	r4, r3
 800bbf6:	4384      	bics	r4, r0
 800bbf8:	2cc2      	cmp	r4, #194	@ 0xc2
 800bbfa:	d11f      	bne.n	800bc3c <rfalIsoDepDataExchangePCD+0x15c>
                if( rfalIsoDep_PCBisSWTX(rxPCB) )
 800bbfc:	2208      	movs	r2, #8
 800bbfe:	4393      	bics	r3, r2
 800bc00:	2bf2      	cmp	r3, #242	@ 0xf2
 800bc02:	d112      	bne.n	800bc2a <rfalIsoDepDataExchangePCD+0x14a>
                    if( rfalIsoDep_PCBisRNAK( gIsoDep.lastPCB ) )
 800bc04:	000b      	movs	r3, r1
 800bc06:	3328      	adds	r3, #40	@ 0x28
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	3201      	adds	r2, #1
 800bc0c:	4393      	bics	r3, r2
 800bc0e:	2200      	movs	r2, #0
 800bc10:	2bb2      	cmp	r3, #178	@ 0xb2
 800bc12:	d108      	bne.n	800bc26 <rfalIsoDepDataExchangePCD+0x146>
                        gIsoDep.cntSWtxNack++;        /* Count S(WTX) upon R(NAK) */
 800bc14:	7a4b      	ldrb	r3, [r1, #9]
                        gIsoDep.cntRRetrys = 0;       /* Reset R-Block counter has PICC has responded */
 800bc16:	718a      	strb	r2, [r1, #6]
                        gIsoDep.cntSWtxNack++;        /* Count S(WTX) upon R(NAK) */
 800bc18:	3301      	adds	r3, #1
 800bc1a:	724b      	strb	r3, [r1, #9]
                    RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_S_WTX, rfalIsoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 800bc1c:	233f      	movs	r3, #63	@ 0x3f
 800bc1e:	5df1      	ldrb	r1, [r6, r7]
 800bc20:	2002      	movs	r0, #2
 800bc22:	4019      	ands	r1, r3
 800bc24:	e7bd      	b.n	800bba2 <rfalIsoDepDataExchangePCD+0xc2>
                        gIsoDep.cntSWtxNack = 0;      /* Reset R(NACK)->S(WTX) counter */
 800bc26:	724a      	strb	r2, [r1, #9]
 800bc28:	e7f8      	b.n	800bc1c <rfalIsoDepDataExchangePCD+0x13c>
                if( rfalIsoDep_PCBisSDeselect(rxPCB) )
 800bc2a:	2bc2      	cmp	r3, #194	@ 0xc2
 800bc2c:	d1c9      	bne.n	800bbc2 <rfalIsoDepDataExchangePCD+0xe2>
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 800bc2e:	780b      	ldrb	r3, [r1, #0]
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d1c6      	bne.n	800bbc2 <rfalIsoDepDataExchangePCD+0xe2>
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 800bc34:	f7ff ff24 	bl	800ba80 <rfalIsoDepInitialize>
            return RFAL_ERR_NONE;
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e757      	b.n	800baec <rfalIsoDepDataExchangePCD+0xc>
            else if( rfalIsoDep_PCBisRBlock(rxPCB) )
 800bc3c:	2019      	movs	r0, #25
 800bc3e:	001c      	movs	r4, r3
 800bc40:	4384      	bics	r4, r0
 800bc42:	2ca2      	cmp	r4, #162	@ 0xa2
 800bc44:	d120      	bne.n	800bc88 <rfalIsoDepDataExchangePCD+0x1a8>
                if( rfalIsoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 800bc46:	2209      	movs	r2, #9
 800bc48:	0018      	movs	r0, r3
 800bc4a:	4390      	bics	r0, r2
 800bc4c:	28a2      	cmp	r0, #162	@ 0xa2
 800bc4e:	d1b8      	bne.n	800bbc2 <rfalIsoDepDataExchangePCD+0xe2>
                    if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 800bc50:	2401      	movs	r4, #1
 800bc52:	788a      	ldrb	r2, [r1, #2]
 800bc54:	4023      	ands	r3, r4
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d107      	bne.n	800bc6a <rfalIsoDepDataExchangePCD+0x18a>
                        if( !gIsoDep.isTxChaining )
 800bc5a:	7d8b      	ldrb	r3, [r1, #22]
                        gIsoDep.blockNumber = rfalIsoDep_PCBNextBN( gIsoDep.blockNumber );
 800bc5c:	4062      	eors	r2, r4
 800bc5e:	708a      	strb	r2, [r1, #2]
                        if( !gIsoDep.isTxChaining )
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0ae      	beq.n	800bbc2 <rfalIsoDepDataExchangePCD+0xe2>
                    rfalIsoDepClearCounters();
 800bc64:	f7ff fcd6 	bl	800b614 <rfalIsoDepClearCounters>
                    return RFAL_ERR_NONE;
 800bc68:	e7e6      	b.n	800bc38 <rfalIsoDepDataExchangePCD+0x158>
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 800bc6a:	794b      	ldrb	r3, [r1, #5]
                        return RFAL_ERR_TIMEOUT; /* NFC Forum mandates timeout or transmission error depending on previous errors */
 800bc6c:	2004      	movs	r0, #4
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 800bc6e:	1c5a      	adds	r2, r3, #1
 800bc70:	714a      	strb	r2, [r1, #5]
 800bc72:	000a      	movs	r2, r1
 800bc74:	323f      	adds	r2, #63	@ 0x3f
 800bc76:	7812      	ldrb	r2, [r2, #0]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d800      	bhi.n	800bc7e <rfalIsoDepDataExchangePCD+0x19e>
 800bc7c:	e736      	b.n	800baec <rfalIsoDepDataExchangePCD+0xc>
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 800bc7e:	2300      	movs	r3, #0
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 800bc80:	700c      	strb	r4, [r1, #0]
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 800bc82:	718b      	strb	r3, [r1, #6]
                    return RFAL_ERR_BUSY;
 800bc84:	2002      	movs	r0, #2
 800bc86:	e731      	b.n	800baec <rfalIsoDepDataExchangePCD+0xc>
            else if( rfalIsoDep_PCBisIBlock(rxPCB) )
 800bc88:	211d      	movs	r1, #29
 800bc8a:	0018      	movs	r0, r3
 800bc8c:	4388      	bics	r0, r1
 800bc8e:	2802      	cmp	r0, #2
 800bc90:	d197      	bne.n	800bbc2 <rfalIsoDepDataExchangePCD+0xe2>
                if( rfalIsoDep_PCBisChaining(rxPCB) )
 800bc92:	2001      	movs	r0, #1
 800bc94:	0019      	movs	r1, r3
 800bc96:	4001      	ands	r1, r0
 800bc98:	9104      	str	r1, [sp, #16]
 800bc9a:	2110      	movs	r1, #16
 800bc9c:	468c      	mov	ip, r1
 800bc9e:	4019      	ands	r1, r3
 800bca0:	9105      	str	r1, [sp, #20]
 800bca2:	4661      	mov	r1, ip
 800bca4:	4c24      	ldr	r4, [pc, #144]	@ (800bd38 <rfalIsoDepDataExchangePCD+0x258>)
 800bca6:	420b      	tst	r3, r1
 800bca8:	d028      	beq.n	800bcfc <rfalIsoDepDataExchangePCD+0x21c>
                    *outIsChaining       = true;
 800bcaa:	9b02      	ldr	r3, [sp, #8]
                    gIsoDep.isRxChaining = true;
 800bcac:	75e0      	strb	r0, [r4, #23]
                    *outIsChaining       = true;
 800bcae:	7018      	strb	r0, [r3, #0]
                    if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800bcb0:	78a3      	ldrb	r3, [r4, #2]
 800bcb2:	9a04      	ldr	r2, [sp, #16]
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d000      	beq.n	800bcba <rfalIsoDepDataExchangePCD+0x1da>
 800bcb8:	e752      	b.n	800bb60 <rfalIsoDepDataExchangePCD+0x80>
                        rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 800bcba:	4043      	eors	r3, r0
 800bcbc:	70a3      	strb	r3, [r4, #2]
                        rfalIsoDepClearCounters();  /* Clear counters in case R counter is already at max */
 800bcbe:	f7ff fca9 	bl	800b614 <rfalIsoDepClearCounters>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	0008      	movs	r0, r1
 800bcc6:	f7ff fd5b 	bl	800b780 <rfalIsoDepHandleControlMsg>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d000      	beq.n	800bcd0 <rfalIsoDepDataExchangePCD+0x1f0>
 800bcce:	e70d      	b.n	800baec <rfalIsoDepDataExchangePCD+0xc>
                        *outActRxLen -= gIsoDep.hdrLen;
 800bcd0:	0023      	movs	r3, r4
 800bcd2:	332b      	adds	r3, #43	@ 0x2b
 800bcd4:	7819      	ldrb	r1, [r3, #0]
 800bcd6:	882a      	ldrh	r2, [r5, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 800bcd8:	1da3      	adds	r3, r4, #6
                        *outActRxLen -= gIsoDep.hdrLen;
 800bcda:	1a52      	subs	r2, r2, r1
 800bcdc:	b292      	uxth	r2, r2
 800bcde:	802a      	strh	r2, [r5, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 800bce0:	7fdb      	ldrb	r3, [r3, #31]
 800bce2:	4299      	cmp	r1, r3
 800bce4:	d006      	beq.n	800bcf4 <rfalIsoDepDataExchangePCD+0x214>
 800bce6:	2a00      	cmp	r2, #0
 800bce8:	d004      	beq.n	800bcf4 <rfalIsoDepDataExchangePCD+0x214>
                            RFAL_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 800bcea:	69e0      	ldr	r0, [r4, #28]
 800bcec:	1841      	adds	r1, r0, r1
 800bcee:	18c0      	adds	r0, r0, r3
 800bcf0:	f007 face 	bl	8013290 <memmove>
                        rfalIsoDepClearCounters();
 800bcf4:	f7ff fc8e 	bl	800b614 <rfalIsoDepClearCounters>
                        return RFAL_ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 800bcf8:	200d      	movs	r0, #13
 800bcfa:	e6f7      	b.n	800baec <rfalIsoDepDataExchangePCD+0xc>
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 800bcfc:	9b05      	ldr	r3, [sp, #20]
                if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800bcfe:	9904      	ldr	r1, [sp, #16]
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 800bd00:	75e3      	strb	r3, [r4, #23]
                if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800bd02:	78a3      	ldrb	r3, [r4, #2]
 800bd04:	428b      	cmp	r3, r1
 800bd06:	d111      	bne.n	800bd2c <rfalIsoDepDataExchangePCD+0x24c>
                    *outActRxLen -= gIsoDep.hdrLen;
 800bd08:	1bd2      	subs	r2, r2, r7
                    rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 800bd0a:	4043      	eors	r3, r0
                    *outActRxLen -= gIsoDep.hdrLen;
 800bd0c:	b292      	uxth	r2, r2
                    rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 800bd0e:	70a3      	strb	r3, [r4, #2]
                    *outActRxLen -= gIsoDep.hdrLen;
 800bd10:	802a      	strh	r2, [r5, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 800bd12:	1da3      	adds	r3, r4, #6
 800bd14:	7fd8      	ldrb	r0, [r3, #31]
 800bd16:	4287      	cmp	r7, r0
 800bd18:	d005      	beq.n	800bd26 <rfalIsoDepDataExchangePCD+0x246>
 800bd1a:	2a00      	cmp	r2, #0
 800bd1c:	d003      	beq.n	800bd26 <rfalIsoDepDataExchangePCD+0x246>
                        RFAL_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 800bd1e:	19f1      	adds	r1, r6, r7
 800bd20:	1830      	adds	r0, r6, r0
 800bd22:	f007 fab5 	bl	8013290 <memmove>
                    gIsoDep.state = ISODEP_ST_IDLE;
 800bd26:	2300      	movs	r3, #0
 800bd28:	7023      	strb	r3, [r4, #0]
 800bd2a:	e79b      	b.n	800bc64 <rfalIsoDepDataExchangePCD+0x184>
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d000      	beq.n	800bd34 <rfalIsoDepDataExchangePCD+0x254>
 800bd32:	e746      	b.n	800bbc2 <rfalIsoDepDataExchangePCD+0xe2>
                    RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 800bd34:	9905      	ldr	r1, [sp, #20]
 800bd36:	e734      	b.n	800bba2 <rfalIsoDepDataExchangePCD+0xc2>
 800bd38:	20001a48 	.word	0x20001a48
 800bd3c:	00080041 	.word	0x00080041
 800bd40:	20001a73 	.word	0x20001a73

0800bd44 <rfalIsoDepInitializeWithParams>:
{
 800bd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd46:	0007      	movs	r7, r0
 800bd48:	b085      	sub	sp, #20
 800bd4a:	001c      	movs	r4, r3
 800bd4c:	ab0a      	add	r3, sp, #40	@ 0x28
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	000e      	movs	r6, r1
 800bd52:	9301      	str	r3, [sp, #4]
 800bd54:	ab0b      	add	r3, sp, #44	@ 0x2c
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	0015      	movs	r5, r2
 800bd5a:	9302      	str	r3, [sp, #8]
 800bd5c:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	9303      	str	r3, [sp, #12]
    rfalIsoDepInitialize();
 800bd62:	f7ff fe8d 	bl	800ba80 <rfalIsoDepInitialize>
    gIsoDep.compMode        = compMode;
 800bd66:	4b0c      	ldr	r3, [pc, #48]	@ (800bd98 <rfalIsoDepInitializeWithParams+0x54>)
 800bd68:	4a0c      	ldr	r2, [pc, #48]	@ (800bd9c <rfalIsoDepInitializeWithParams+0x58>)
    gIsoDep.maxRetriesSDSL  = maxRetriesSDSL;
 800bd6a:	9901      	ldr	r1, [sp, #4]
    gIsoDep.compMode        = compMode;
 800bd6c:	7017      	strb	r7, [r2, #0]
    gIsoDep.maxRetriesR     = maxRetriesR;
 800bd6e:	001a      	movs	r2, r3
 800bd70:	3240      	adds	r2, #64	@ 0x40
 800bd72:	7016      	strb	r6, [r2, #0]
    gIsoDep.maxRetriesSnWTX = maxRetriesSnWTX;
 800bd74:	001a      	movs	r2, r3
 800bd76:	3243      	adds	r2, #67	@ 0x43
 800bd78:	7015      	strb	r5, [r2, #0]
    gIsoDep.maxRetriesSWTX  = maxRetriesSWTX;
 800bd7a:	001a      	movs	r2, r3
 800bd7c:	3242      	adds	r2, #66	@ 0x42
 800bd7e:	7014      	strb	r4, [r2, #0]
    gIsoDep.maxRetriesSDSL  = maxRetriesSDSL;
 800bd80:	001a      	movs	r2, r3
 800bd82:	3241      	adds	r2, #65	@ 0x41
 800bd84:	7011      	strb	r1, [r2, #0]
    gIsoDep.maxRetriesI     = maxRetriesI;
 800bd86:	001a      	movs	r2, r3
 800bd88:	9902      	ldr	r1, [sp, #8]
 800bd8a:	323f      	adds	r2, #63	@ 0x3f
 800bd8c:	7011      	strb	r1, [r2, #0]
    gIsoDep.maxRetriesRATS  = maxRetriesRATS;
 800bd8e:	9a03      	ldr	r2, [sp, #12]
 800bd90:	3344      	adds	r3, #68	@ 0x44
 800bd92:	701a      	strb	r2, [r3, #0]
}
 800bd94:	b005      	add	sp, #20
 800bd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd98:	20001a48 	.word	0x20001a48
 800bd9c:	20001a8d 	.word	0x20001a8d

0800bda0 <rfalIsoDepStartDeselect>:
    gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 800bda0:	4b07      	ldr	r3, [pc, #28]	@ (800bdc0 <rfalIsoDepStartDeselect+0x20>)
 800bda2:	4a08      	ldr	r2, [pc, #32]	@ (800bdc4 <rfalIsoDepStartDeselect+0x24>)
{
 800bda4:	b510      	push	{r4, lr}
    gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 800bda6:	631a      	str	r2, [r3, #48]	@ 0x30
    gIsoDep.rxBuf       = gIsoDep.ctrlBuf;
 800bda8:	4a07      	ldr	r2, [pc, #28]	@ (800bdc8 <rfalIsoDepStartDeselect+0x28>)
    return rfalIsoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM );
 800bdaa:	2100      	movs	r1, #0
    gIsoDep.rxBuf       = gIsoDep.ctrlBuf;
 800bdac:	61da      	str	r2, [r3, #28]
    gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN - (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800bdae:	2202      	movs	r2, #2
 800bdb0:	845a      	strh	r2, [r3, #34]	@ 0x22
    gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800bdb2:	4a06      	ldr	r2, [pc, #24]	@ (800bdcc <rfalIsoDepStartDeselect+0x2c>)
    return rfalIsoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM );
 800bdb4:	2003      	movs	r0, #3
    gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800bdb6:	849a      	strh	r2, [r3, #36]	@ 0x24
    return rfalIsoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM );
 800bdb8:	f7ff fce2 	bl	800b780 <rfalIsoDepHandleControlMsg>
}
 800bdbc:	bd10      	pop	{r4, pc}
 800bdbe:	46c0      	nop			@ (mov r8, r8)
 800bdc0:	20001a48 	.word	0x20001a48
 800bdc4:	20001a92 	.word	0x20001a92
 800bdc8:	20001a8e 	.word	0x20001a8e
 800bdcc:	00000202 	.word	0x00000202

0800bdd0 <rfalIsoDepGetDeselectStatus>:
{
 800bdd0:	b513      	push	{r0, r1, r4, lr}
    RFAL_EXIT_ON_BUSY( ret, rfalIsoDepDataExchangePCD( gIsoDep.rxLen, &dummyB ) );
 800bdd2:	466a      	mov	r2, sp
 800bdd4:	4b05      	ldr	r3, [pc, #20]	@ (800bdec <rfalIsoDepGetDeselectStatus+0x1c>)
 800bdd6:	1dd1      	adds	r1, r2, #7
 800bdd8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bdda:	f7ff fe81 	bl	800bae0 <rfalIsoDepDataExchangePCD>
 800bdde:	0004      	movs	r4, r0
 800bde0:	2802      	cmp	r0, #2
 800bde2:	d001      	beq.n	800bde8 <rfalIsoDepGetDeselectStatus+0x18>
    rfalIsoDepInitialize();
 800bde4:	f7ff fe4c 	bl	800ba80 <rfalIsoDepInitialize>
}
 800bde8:	0020      	movs	r0, r4
 800bdea:	bd16      	pop	{r1, r2, r4, pc}
 800bdec:	20001a48 	.word	0x20001a48

0800bdf0 <rfalIsoDepFWI2FWT>:
    if( tmpFWI > ISODEP_FWI_MAX )
 800bdf0:	280e      	cmp	r0, #14
 800bdf2:	d900      	bls.n	800bdf6 <rfalIsoDepFWI2FWT+0x6>
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 800bdf4:	2004      	movs	r0, #4
    result = ((uint32_t)1U << (tmpFWI + 12U));
 800bdf6:	300c      	adds	r0, #12
 800bdf8:	b2c3      	uxtb	r3, r0
 800bdfa:	2001      	movs	r0, #1
 800bdfc:	4098      	lsls	r0, r3
}
 800bdfe:	4770      	bx	lr

0800be00 <rfalIsoDepFSxI2FSx>:
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? RFAL_MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : RFAL_MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 800be00:	4b0b      	ldr	r3, [pc, #44]	@ (800be30 <rfalIsoDepFSxI2FSx+0x30>)
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b01      	cmp	r3, #1
 800be06:	d10d      	bne.n	800be24 <rfalIsoDepFSxI2FSx+0x24>
 800be08:	1c03      	adds	r3, r0, #0
 800be0a:	280c      	cmp	r0, #12
 800be0c:	d900      	bls.n	800be10 <rfalIsoDepFSxI2FSx+0x10>
 800be0e:	230c      	movs	r3, #12
 800be10:	b2db      	uxtb	r3, r3
    switch( fsi )
 800be12:	3b01      	subs	r3, #1
 800be14:	b2db      	uxtb	r3, r3
{
 800be16:	2010      	movs	r0, #16
 800be18:	2b0b      	cmp	r3, #11
 800be1a:	d802      	bhi.n	800be22 <rfalIsoDepFSxI2FSx+0x22>
 800be1c:	4a05      	ldr	r2, [pc, #20]	@ (800be34 <rfalIsoDepFSxI2FSx+0x34>)
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	5a98      	ldrh	r0, [r3, r2]
}
 800be22:	4770      	bx	lr
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? RFAL_MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : RFAL_MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 800be24:	1c03      	adds	r3, r0, #0
 800be26:	2808      	cmp	r0, #8
 800be28:	d9f2      	bls.n	800be10 <rfalIsoDepFSxI2FSx+0x10>
 800be2a:	2308      	movs	r3, #8
 800be2c:	e7f0      	b.n	800be10 <rfalIsoDepFSxI2FSx+0x10>
 800be2e:	46c0      	nop			@ (mov r8, r8)
 800be30:	20001a8d 	.word	0x20001a8d
 800be34:	080143cc 	.word	0x080143cc

0800be38 <rfalIsoDepGetRATSStatus>:
{
 800be38:	b570      	push	{r4, r5, r6, lr}
    ret = rfalGetTransceiveStatus();
 800be3a:	f7f8 fcb7 	bl	80047ac <rfalGetTransceiveStatus>
 800be3e:	1e04      	subs	r4, r0, #0
    if( ret == RFAL_ERR_NONE )
 800be40:	d116      	bne.n	800be70 <rfalIsoDepGetRATSStatus+0x38>
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 800be42:	4d0d      	ldr	r5, [pc, #52]	@ (800be78 <rfalIsoDepGetRATSStatus+0x40>)
 800be44:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 800be46:	3307      	adds	r3, #7
 800be48:	08de      	lsrs	r6, r3, #3
        if( (gIsoDep.rxBufLen < RFAL_ISODEP_ATS_MIN_LEN) || (gIsoDep.rxBufLen > RFAL_ISODEP_ATS_MAX_LEN) || ( gIsoDep.rxBuf[RFAL_ISODEP_ATS_TL_POS] != gIsoDep.rxBufLen) )
 800be4a:	1e72      	subs	r2, r6, #1
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 800be4c:	846e      	strh	r6, [r5, #34]	@ 0x22
        if( (gIsoDep.rxBufLen < RFAL_ISODEP_ATS_MIN_LEN) || (gIsoDep.rxBufLen > RFAL_ISODEP_ATS_MAX_LEN) || ( gIsoDep.rxBuf[RFAL_ISODEP_ATS_TL_POS] != gIsoDep.rxBufLen) )
 800be4e:	2a13      	cmp	r2, #19
 800be50:	d810      	bhi.n	800be74 <rfalIsoDepGetRATSStatus+0x3c>
 800be52:	69ea      	ldr	r2, [r5, #28]
 800be54:	7812      	ldrb	r2, [r2, #0]
 800be56:	42b2      	cmp	r2, r6
 800be58:	d10c      	bne.n	800be74 <rfalIsoDepGetRATSStatus+0x3c>
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t) (gIsoDep.actv.ratsReq.PARAM >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 800be5a:	002b      	movs	r3, r5
 800be5c:	334d      	adds	r3, #77	@ 0x4d
 800be5e:	7818      	ldrb	r0, [r3, #0]
 800be60:	0900      	lsrs	r0, r0, #4
 800be62:	f7ff ffcd 	bl	800be00 <rfalIsoDepFSxI2FSx>
        if( gIsoDep.rxLen8 != NULL )
 800be66:	6fab      	ldr	r3, [r5, #120]	@ 0x78
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t) (gIsoDep.actv.ratsReq.PARAM >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 800be68:	84e8      	strh	r0, [r5, #38]	@ 0x26
        if( gIsoDep.rxLen8 != NULL )
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d000      	beq.n	800be70 <rfalIsoDepGetRATSStatus+0x38>
            *gIsoDep.rxLen8 = (uint8_t)gIsoDep.rxBufLen;
 800be6e:	701e      	strb	r6, [r3, #0]
}
 800be70:	0020      	movs	r0, r4
 800be72:	bd70      	pop	{r4, r5, r6, pc}
            return RFAL_ERR_PROTO;
 800be74:	240b      	movs	r4, #11
 800be76:	e7fb      	b.n	800be70 <rfalIsoDepGetRATSStatus+0x38>
 800be78:	20001a48 	.word	0x20001a48

0800be7c <rfalIsoDepGetATTRIBStatus>:
{
 800be7c:	b570      	push	{r4, r5, r6, lr}
    ret = rfalGetTransceiveStatus();
 800be7e:	f7f8 fc95 	bl	80047ac <rfalGetTransceiveStatus>
 800be82:	1e05      	subs	r5, r0, #0
    if( ret == RFAL_ERR_NONE )
 800be84:	d118      	bne.n	800beb8 <rfalIsoDepGetATTRIBStatus+0x3c>
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 800be86:	4c0e      	ldr	r4, [pc, #56]	@ (800bec0 <rfalIsoDepGetATTRIBStatus+0x44>)
 800be88:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 800be8a:	3307      	adds	r3, #7
 800be8c:	08db      	lsrs	r3, r3, #3
 800be8e:	8463      	strh	r3, [r4, #34]	@ 0x22
        if( (gIsoDep.rxBufLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((gIsoDep.rxBuf[RFAL_ISODEP_ATTRIB_RES_MBLIDID_POS] & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != gIsoDep.did) )
 800be90:	d014      	beq.n	800bebc <rfalIsoDepGetATTRIBStatus+0x40>
 800be92:	200f      	movs	r0, #15
 800be94:	69e2      	ldr	r2, [r4, #28]
 800be96:	78e1      	ldrb	r1, [r4, #3]
 800be98:	7812      	ldrb	r2, [r2, #0]
 800be9a:	4002      	ands	r2, r0
 800be9c:	4291      	cmp	r1, r2
 800be9e:	d10d      	bne.n	800bebc <rfalIsoDepGetATTRIBStatus+0x40>
        if( gIsoDep.rxLen8 != NULL )
 800bea0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800bea2:	2a00      	cmp	r2, #0
 800bea4:	d000      	beq.n	800bea8 <rfalIsoDepGetATTRIBStatus+0x2c>
            *gIsoDep.rxLen8 = (uint8_t)gIsoDep.rxBufLen;
 800bea6:	7013      	strb	r3, [r2, #0]
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)(gIsoDep.actv.attribReq.Param.PARAM2 & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 800bea8:	0023      	movs	r3, r4
 800beaa:	3352      	adds	r3, #82	@ 0x52
 800beac:	7818      	ldrb	r0, [r3, #0]
 800beae:	230f      	movs	r3, #15
 800beb0:	4018      	ands	r0, r3
 800beb2:	f7ff ffa5 	bl	800be00 <rfalIsoDepFSxI2FSx>
 800beb6:	84e0      	strh	r0, [r4, #38]	@ 0x26
}
 800beb8:	0028      	movs	r0, r5
 800beba:	bd70      	pop	{r4, r5, r6, pc}
           return RFAL_ERR_PROTO;
 800bebc:	250b      	movs	r5, #11
 800bebe:	e7fb      	b.n	800beb8 <rfalIsoDepGetATTRIBStatus+0x3c>
 800bec0:	20001a48 	.word	0x20001a48

0800bec4 <rfalIsoDepIsRats>:
    if(buf != NULL)
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d007      	beq.n	800bed8 <rfalIsoDepIsRats+0x14>
        if ((RFAL_ISODEP_CMD_RATS == (uint8_t)*buf) && (sizeof(rfalIsoDepRats) == bufLen))
 800bec8:	7803      	ldrb	r3, [r0, #0]
    return false;
 800beca:	2000      	movs	r0, #0
        if ((RFAL_ISODEP_CMD_RATS == (uint8_t)*buf) && (sizeof(rfalIsoDepRats) == bufLen))
 800becc:	2be0      	cmp	r3, #224	@ 0xe0
 800bece:	d103      	bne.n	800bed8 <rfalIsoDepIsRats+0x14>
 800bed0:	3902      	subs	r1, #2
 800bed2:	424b      	negs	r3, r1
 800bed4:	4159      	adcs	r1, r3
 800bed6:	b2c8      	uxtb	r0, r1
}
 800bed8:	4770      	bx	lr
	...

0800bedc <rfalIsoDepListenStartActivation>:
    gIsoDep.txBR = RFAL_BR_106;
 800bedc:	2300      	movs	r3, #0
{
 800bede:	b5f0      	push	{r4, r5, r6, r7, lr}
    gIsoDep.txBR = RFAL_BR_106;
 800bee0:	4d4e      	ldr	r5, [pc, #312]	@ (800c01c <rfalIsoDepListenStartActivation+0x140>)
{
 800bee2:	b087      	sub	sp, #28
 800bee4:	0004      	movs	r4, r0
 800bee6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
        return RFAL_ERR_PARAM;
 800bee8:	2007      	movs	r0, #7
 800beea:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
{
 800beec:	9205      	str	r2, [sp, #20]
    gIsoDep.txBR = RFAL_BR_106;
 800beee:	85ab      	strh	r3, [r5, #44]	@ 0x2c
    if( buffer == NULL )
 800bef0:	2a00      	cmp	r2, #0
 800bef2:	d07e      	beq.n	800bff2 <rfalIsoDepListenStartActivation+0x116>
    if( *buffer == RFAL_ISODEP_CMD_RATS )
 800bef4:	7813      	ldrb	r3, [r2, #0]
 800bef6:	2be0      	cmp	r3, #224	@ 0xe0
 800bef8:	d175      	bne.n	800bfe6 <rfalIsoDepListenStartActivation+0x10a>
        if( atsParam == NULL )
 800befa:	2c00      	cmp	r4, #0
 800befc:	d079      	beq.n	800bff2 <rfalIsoDepListenStartActivation+0x116>
        if( actParam.isoDepDev != NULL )
 800befe:	2e00      	cmp	r6, #0
 800bf00:	d004      	beq.n	800bf0c <rfalIsoDepListenStartActivation+0x30>
            RFAL_MEMCPY( (uint8_t*)&actParam.isoDepDev->activation.A.Poller.RATS, buffer, sizeof(rfalIsoDepRats) );	/* Copy RATS' CMD + PARAM */
 800bf02:	2202      	movs	r2, #2
 800bf04:	0030      	movs	r0, r6
 800bf06:	9905      	ldr	r1, [sp, #20]
 800bf08:	f007 fa08 	bl	801331c <memcpy>
        gIsoDep.fsx = rfalIsoDepFSxI2FSx( (((*buffer) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 800bf0c:	9b05      	ldr	r3, [sp, #20]
 800bf0e:	7858      	ldrb	r0, [r3, #1]
 800bf10:	0900      	lsrs	r0, r0, #4
 800bf12:	f7ff ff75 	bl	800be00 <rfalIsoDepFSxI2FSx>
        gIsoDep.did = (*buffer & RFAL_ISODEP_DID_MASK);
 800bf16:	220f      	movs	r2, #15
 800bf18:	9b05      	ldr	r3, [sp, #20]
        gIsoDep.fsx = rfalIsoDepFSxI2FSx( (((*buffer) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 800bf1a:	82a8      	strh	r0, [r5, #20]
        gIsoDep.did = (*buffer & RFAL_ISODEP_DID_MASK);
 800bf1c:	785b      	ldrb	r3, [r3, #1]
            return RFAL_ERR_PROTO;
 800bf1e:	200b      	movs	r0, #11
        gIsoDep.did = (*buffer & RFAL_ISODEP_DID_MASK);
 800bf20:	4013      	ands	r3, r2
 800bf22:	70eb      	strb	r3, [r5, #3]
        if( gIsoDep.did > RFAL_ISODEP_DID_MAX )
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d064      	beq.n	800bff2 <rfalIsoDepListenStartActivation+0x116>
        if( (gIsoDep.did != RFAL_ISODEP_DID_00) && (!atsParam->didSupport) )
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d003      	beq.n	800bf34 <rfalIsoDepListenStartActivation+0x58>
 800bf2c:	78e3      	ldrb	r3, [r4, #3]
            return RFAL_ERR_NOTSUPP;
 800bf2e:	300d      	adds	r0, #13
        if( (gIsoDep.did != RFAL_ISODEP_DID_00) && (!atsParam->didSupport) )
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d05e      	beq.n	800bff2 <rfalIsoDepListenStartActivation+0x116>
        if( ((!RFAL_SUPPORT_BR_CE_A_212) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_212) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_212) != 0U)))  ||
 800bf34:	2377      	movs	r3, #119	@ 0x77
 800bf36:	7922      	ldrb	r2, [r4, #4]
            return RFAL_ERR_NOTSUPP;
 800bf38:	2018      	movs	r0, #24
        if( ((!RFAL_SUPPORT_BR_CE_A_212) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_212) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_212) != 0U)))  ||
 800bf3a:	421a      	tst	r2, r3
 800bf3c:	d159      	bne.n	800bff2 <rfalIsoDepListenStartActivation+0x116>
        if( atsParam->fwi > ISODEP_FWI_LIS_MAX)
 800bf3e:	0029      	movs	r1, r5
 800bf40:	3145      	adds	r1, #69	@ 0x45
 800bf42:	7809      	ldrb	r1, [r1, #0]
 800bf44:	7863      	ldrb	r3, [r4, #1]
 800bf46:	2901      	cmp	r1, #1
 800bf48:	d164      	bne.n	800c014 <rfalIsoDepListenStartActivation+0x138>
 800bf4a:	2b07      	cmp	r3, #7
 800bf4c:	dd01      	ble.n	800bf52 <rfalIsoDepListenStartActivation+0x76>
            atsParam->fwi = ISODEP_FWI_LIS_MAX;
 800bf4e:	2307      	movs	r3, #7
 800bf50:	7063      	strb	r3, [r4, #1]
        gIsoDep.atsTA  = atsParam->ta;
 800bf52:	002b      	movs	r3, r5
 800bf54:	332a      	adds	r3, #42	@ 0x2a
 800bf56:	701a      	strb	r2, [r3, #0]
        gIsoDep.fwt    = rfalIsoDepFWI2FWT(atsParam->fwi);
 800bf58:	7860      	ldrb	r0, [r4, #1]
 800bf5a:	f7ff ff49 	bl	800bdf0 <rfalIsoDepFWI2FWT>
 800bf5e:	60e8      	str	r0, [r5, #12]
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx(atsParam->fsci);
 800bf60:	7820      	ldrb	r0, [r4, #0]
 800bf62:	f7ff ff4d 	bl	800be00 <rfalIsoDepFSxI2FSx>
 800bf66:	84e8      	strh	r0, [r5, #38]	@ 0x26
        atsParam->hbLen = RFAL_MIN( RFAL_ISODEP_ATS_HB_MAX_LEN, atsParam->hbLen );
 800bf68:	7b22      	ldrb	r2, [r4, #12]
 800bf6a:	1c13      	adds	r3, r2, #0
 800bf6c:	2a0f      	cmp	r2, #15
 800bf6e:	d900      	bls.n	800bf72 <rfalIsoDepListenStartActivation+0x96>
 800bf70:	230f      	movs	r3, #15
 800bf72:	7323      	strb	r3, [r4, #12]
        txBuf[ bufIt++ ] = (RFAL_ISODEP_ATS_HIST_OFFSET + atsParam->hbLen);                                  /* TL */
 800bf74:	3305      	adds	r3, #5
 800bf76:	703b      	strb	r3, [r7, #0]
        txBuf[ bufIt++ ] = ( (RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK | RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK | 
 800bf78:	2370      	movs	r3, #112	@ 0x70
                             (atsParam->sfgi & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) );                          /* TB */
 800bf7a:	210f      	movs	r1, #15
        txBuf[ bufIt++ ] = ( (RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK | RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK | 
 800bf7c:	7822      	ldrb	r2, [r4, #0]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	707b      	strb	r3, [r7, #1]
        txBuf[ bufIt++ ] = atsParam->ta;                                                                     /* TA */
 800bf82:	7923      	ldrb	r3, [r4, #4]
 800bf84:	70bb      	strb	r3, [r7, #2]
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 800bf86:	7863      	ldrb	r3, [r4, #1]
                             (atsParam->sfgi & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) );                          /* TB */
 800bf88:	78a2      	ldrb	r2, [r4, #2]
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 800bf8a:	011b      	lsls	r3, r3, #4
                             (atsParam->sfgi & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) );                          /* TB */
 800bf8c:	438a      	bics	r2, r1
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	70fb      	strb	r3, [r7, #3]
        txBuf[ bufIt++ ] = (uint8_t)((atsParam->didSupport) ? RFAL_ISODEP_ATS_TC_DID : 0U);                  /* TC */
 800bf92:	78e3      	ldrb	r3, [r4, #3]
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	713b      	strb	r3, [r7, #4]
 800bf98:	2305      	movs	r3, #5
        if( atsParam->hbLen > 0U )             /* MISRA 21.18 */
 800bf9a:	7b22      	ldrb	r2, [r4, #12]
        txBuf[ bufIt++ ] = (uint8_t)((atsParam->didSupport) ? RFAL_ISODEP_ATS_TC_DID : 0U);                  /* TC */
 800bf9c:	469c      	mov	ip, r3
        if( atsParam->hbLen > 0U )             /* MISRA 21.18 */
 800bf9e:	2a00      	cmp	r2, #0
 800bfa0:	d007      	beq.n	800bfb2 <rfalIsoDepListenStartActivation+0xd6>
            RFAL_MEMCPY( &txBuf[bufIt], atsParam->hb, atsParam->hbLen );                                       /* T1-Tk */
 800bfa2:	68a1      	ldr	r1, [r4, #8]
 800bfa4:	18f8      	adds	r0, r7, r3
 800bfa6:	f007 f9b9 	bl	801331c <memcpy>
            bufIt += atsParam->hbLen;
 800bfaa:	7b21      	ldrb	r1, [r4, #12]
 800bfac:	3105      	adds	r1, #5
 800bfae:	b2cb      	uxtb	r3, r1
 800bfb0:	469c      	mov	ip, r3
        gIsoDep.state = ISODEP_ST_PICC_ACT_ATS;
 800bfb2:	2304      	movs	r3, #4
 800bfb4:	702b      	strb	r3, [r5, #0]
    gIsoDep.actvParam = actParam;
 800bfb6:	002b      	movs	r3, r5
 800bfb8:	aa0c      	add	r2, sp, #48	@ 0x30
 800bfba:	3380      	adds	r3, #128	@ 0x80
 800bfbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 800bfbe:	c313      	stmia	r3!, {r0, r1, r4}
 800bfc0:	6812      	ldr	r2, [r2, #0]
 800bfc2:	601a      	str	r2, [r3, #0]
    if( actParam.isoDepDev != NULL )
 800bfc4:	2e00      	cmp	r6, #0
 800bfc6:	d116      	bne.n	800bff6 <rfalIsoDepListenStartActivation+0x11a>
    return rfalTransceiveBlockingTx( txBuf, bufIt, (uint8_t*)actParam.rxBuf, sizeof( rfalIsoDepBufFormat ), actParam.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FWT_NONE );
 800bfc8:	2301      	movs	r3, #1
 800bfca:	425b      	negs	r3, r3
 800bfcc:	9302      	str	r3, [sp, #8]
 800bfce:	2300      	movs	r3, #0
 800bfd0:	9301      	str	r3, [sp, #4]
 800bfd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfd4:	003a      	movs	r2, r7
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	2304      	movs	r3, #4
 800bfda:	4661      	mov	r1, ip
 800bfdc:	0038      	movs	r0, r7
 800bfde:	33ff      	adds	r3, #255	@ 0xff
 800bfe0:	f7f9 fdd8 	bl	8005b94 <rfalTransceiveBlockingTx>
 800bfe4:	e005      	b.n	800bff2 <rfalIsoDepListenStartActivation+0x116>
        return RFAL_ERR_PARAM;
 800bfe6:	2007      	movs	r0, #7
    else if( *buffer == RFAL_ISODEP_CMD_ATTRIB )
 800bfe8:	2b1d      	cmp	r3, #29
 800bfea:	d102      	bne.n	800bff2 <rfalIsoDepListenStartActivation+0x116>
        if( attribResParam == NULL )
 800bfec:	2900      	cmp	r1, #0
 800bfee:	d000      	beq.n	800bff2 <rfalIsoDepListenStartActivation+0x116>
        return RFAL_ERR_NOT_IMPLEMENTED;
 800bff0:	3008      	adds	r0, #8
}
 800bff2:	b007      	add	sp, #28
 800bff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        actParam.isoDepDev->info.DID  = gIsoDep.did;
 800bff6:	0033      	movs	r3, r6
 800bff8:	78ea      	ldrb	r2, [r5, #3]
 800bffa:	334a      	adds	r3, #74	@ 0x4a
 800bffc:	701a      	strb	r2, [r3, #0]
        actParam.isoDepDev->info.FSx  = gIsoDep.fsx;
 800bffe:	8aaa      	ldrh	r2, [r5, #20]
 800c000:	1d33      	adds	r3, r6, #4
 800c002:	87da      	strh	r2, [r3, #62]	@ 0x3e
        actParam.isoDepDev->info.FWT  = gIsoDep.fwt;
 800c004:	68eb      	ldr	r3, [r5, #12]
 800c006:	6333      	str	r3, [r6, #48]	@ 0x30
        actParam.isoDepDev->info.dFWT = 0;
 800c008:	2300      	movs	r3, #0
 800c00a:	6373      	str	r3, [r6, #52]	@ 0x34
        actParam.isoDepDev->info.DSI  = gIsoDep.txBR;
 800c00c:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 800c00e:	3648      	adds	r6, #72	@ 0x48
 800c010:	8033      	strh	r3, [r6, #0]
 800c012:	e7d9      	b.n	800bfc8 <rfalIsoDepListenStartActivation+0xec>
        if( atsParam->fwi > ISODEP_FWI_LIS_MAX)
 800c014:	2b08      	cmp	r3, #8
 800c016:	dd9c      	ble.n	800bf52 <rfalIsoDepListenStartActivation+0x76>
            atsParam->fwi = ISODEP_FWI_LIS_MAX;
 800c018:	2308      	movs	r3, #8
 800c01a:	e799      	b.n	800bf50 <rfalIsoDepListenStartActivation+0x74>
 800c01c:	20001a48 	.word	0x20001a48

0800c020 <rfalIsoDepListenGetActivationStatus>:
{
 800c020:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if( gIsoDep.state < ISODEP_ST_PICC_ACT_ATS )
 800c022:	4c50      	ldr	r4, [pc, #320]	@ (800c164 <rfalIsoDepListenGetActivationStatus+0x144>)
        return RFAL_ERR_WRONG_STATE;
 800c024:	2121      	movs	r1, #33	@ 0x21
    if( gIsoDep.state < ISODEP_ST_PICC_ACT_ATS )
 800c026:	7823      	ldrb	r3, [r4, #0]
 800c028:	2b03      	cmp	r3, #3
 800c02a:	d91c      	bls.n	800c066 <rfalIsoDepListenGetActivationStatus+0x46>
    if( gIsoDep.state >= ISODEP_ST_PICC_RX )
 800c02c:	2b05      	cmp	r3, #5
 800c02e:	d900      	bls.n	800c032 <rfalIsoDepListenGetActivationStatus+0x12>
 800c030:	e093      	b.n	800c15a <rfalIsoDepListenGetActivationStatus+0x13a>
    err = rfalGetTransceiveStatus();
 800c032:	f7f8 fbbb 	bl	80047ac <rfalGetTransceiveStatus>
 800c036:	0001      	movs	r1, r0
    switch( err )
 800c038:	2809      	cmp	r0, #9
 800c03a:	d01d      	beq.n	800c078 <rfalIsoDepListenGetActivationStatus+0x58>
 800c03c:	d816      	bhi.n	800c06c <rfalIsoDepListenGetActivationStatus+0x4c>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d01f      	beq.n	800c082 <rfalIsoDepListenGetActivationStatus+0x62>
 800c042:	2802      	cmp	r0, #2
 800c044:	d00e      	beq.n	800c064 <rfalIsoDepListenGetActivationStatus+0x44>
            rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800c046:	2301      	movs	r3, #1
 800c048:	2000      	movs	r0, #0
 800c04a:	425b      	negs	r3, r3
 800c04c:	1d22      	adds	r2, r4, #4
 800c04e:	9302      	str	r3, [sp, #8]
 800c050:	9001      	str	r0, [sp, #4]
 800c052:	3408      	adds	r4, #8
 800c054:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	2304      	movs	r3, #4
 800c05a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 800c05c:	33ff      	adds	r3, #255	@ 0xff
                rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800c05e:	0001      	movs	r1, r0
 800c060:	f7f9 fd98 	bl	8005b94 <rfalTransceiveBlockingTx>
            return RFAL_ERR_BUSY;
 800c064:	2102      	movs	r1, #2
}
 800c066:	0008      	movs	r0, r1
 800c068:	b004      	add	sp, #16
 800c06a:	bd70      	pop	{r4, r5, r6, pc}
    switch( err )
 800c06c:	281b      	cmp	r0, #27
 800c06e:	d003      	beq.n	800c078 <rfalIsoDepListenGetActivationStatus+0x58>
 800c070:	2825      	cmp	r0, #37	@ 0x25
 800c072:	d0f8      	beq.n	800c066 <rfalIsoDepListenGetActivationStatus+0x46>
 800c074:	2815      	cmp	r0, #21
 800c076:	d1e6      	bne.n	800c046 <rfalIsoDepListenGetActivationStatus+0x26>
            if( gIsoDep.state == ISODEP_ST_PICC_ACT_ATS )
 800c078:	7823      	ldrb	r3, [r4, #0]
 800c07a:	2b04      	cmp	r3, #4
 800c07c:	d1e3      	bne.n	800c046 <rfalIsoDepListenGetActivationStatus+0x26>
               gIsoDep.state = ISODEP_ST_PICC_RX;
 800c07e:	3302      	adds	r3, #2
 800c080:	7023      	strb	r3, [r4, #0]
    txBuf = (uint8_t*)gIsoDep.actvParam.rxBuf;   /* Use the rxBuf as TxBuf as well, the struct enforces a size enough  RFAL_MAX(NFCA_PPS_RES_LEN, ISODEP_DSL_MAX_LEN) */    
 800c082:	1d23      	adds	r3, r4, #4
 800c084:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
    gIsoDep.role  = ISODEP_ROLE_PICC;
 800c086:	2301      	movs	r3, #1
 800c088:	7063      	strb	r3, [r4, #1]
    if( gIsoDep.state == ISODEP_ST_PICC_ACT_ATS )
 800c08a:	7823      	ldrb	r3, [r4, #0]
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	d147      	bne.n	800c120 <rfalIsoDepListenGetActivationStatus+0x100>
        if( ( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_PPS_MASK) == RFAL_ISODEP_PPS_SB )
 800c090:	7813      	ldrb	r3, [r2, #0]
 800c092:	210f      	movs	r1, #15
 800c094:	0018      	movs	r0, r3
 800c096:	4388      	bics	r0, r1
 800c098:	28d0      	cmp	r0, #208	@ 0xd0
 800c09a:	d141      	bne.n	800c120 <rfalIsoDepListenGetActivationStatus+0x100>
            if( (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_DID_MASK) != gIsoDep.did)                         ||
 800c09c:	78e0      	ldrb	r0, [r4, #3]
 800c09e:	400b      	ands	r3, r1
 800c0a0:	4298      	cmp	r0, r3
 800c0a2:	d105      	bne.n	800c0b0 <rfalIsoDepListenGetActivationStatus+0x90>
                (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS0_POS] & RFAL_ISODEP_PPS0_VALID_MASK) != RFAL_ISODEP_PPS0_PPS1_NOT_PRESENT)   )
 800c0a4:	7853      	ldrb	r3, [r2, #1]
            if( (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_DID_MASK) != gIsoDep.did)                         ||
 800c0a6:	3101      	adds	r1, #1
 800c0a8:	0018      	movs	r0, r3
 800c0aa:	4388      	bics	r0, r1
 800c0ac:	2801      	cmp	r0, #1
 800c0ae:	d00a      	beq.n	800c0c6 <rfalIsoDepListenGetActivationStatus+0xa6>
                rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	425b      	negs	r3, r3
 800c0b6:	9302      	str	r3, [sp, #8]
 800c0b8:	9001      	str	r0, [sp, #4]
 800c0ba:	3408      	adds	r4, #8
 800c0bc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	2304      	movs	r3, #4
 800c0c2:	33ff      	adds	r3, #255	@ 0xff
 800c0c4:	e7cb      	b.n	800c05e <rfalIsoDepListenGetActivationStatus+0x3e>
            if( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS0_POS] == RFAL_ISODEP_PPS0_PPS1_PRESENT )
 800c0c6:	2b11      	cmp	r3, #17
 800c0c8:	d149      	bne.n	800c15e <rfalIsoDepListenGetActivationStatus+0x13e>
                uint8_t newdri = ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] & RFAL_ISODEP_PPS1_DxI_MASK;                                 /* MISRA 10.8 */
 800c0ca:	2103      	movs	r1, #3
 800c0cc:	7893      	ldrb	r3, [r2, #2]
 800c0ce:	0018      	movs	r0, r3
                uint8_t newdsi = (((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] >> RFAL_ISODEP_PPS1_DSI_SHIFT) & RFAL_ISODEP_PPS1_DxI_MASK; /* MISRA 10.8 */
 800c0d0:	089b      	lsrs	r3, r3, #2
 800c0d2:	400b      	ands	r3, r1
                if( ((!(RFAL_SUPPORT_BR_CE_A_106)) && (( dsi == RFAL_BR_106 ) || ( dri == RFAL_BR_106 )))  ||
 800c0d4:	3b01      	subs	r3, #1
                uint8_t newdri = ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] & RFAL_ISODEP_PPS1_DxI_MASK;                                 /* MISRA 10.8 */
 800c0d6:	4008      	ands	r0, r1
                    return RFAL_ERR_PROTO;
 800c0d8:	3108      	adds	r1, #8
                if( ((!(RFAL_SUPPORT_BR_CE_A_106)) && (( dsi == RFAL_BR_106 ) || ( dri == RFAL_BR_106 )))  ||
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d9c3      	bls.n	800c066 <rfalIsoDepListenGetActivationStatus+0x46>
 800c0de:	3801      	subs	r0, #1
                dsi = (rfalBitRate) (newdsi);
 800c0e0:	2600      	movs	r6, #0
                if( ((!(RFAL_SUPPORT_BR_CE_A_106)) && (( dsi == RFAL_BR_106 ) || ( dri == RFAL_BR_106 )))  ||
 800c0e2:	2802      	cmp	r0, #2
 800c0e4:	d9bf      	bls.n	800c066 <rfalIsoDepListenGetActivationStatus+0x46>
            rfalTransceiveBlockingTx( txBuf, bufIt, (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FWT_NONE );
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	425b      	negs	r3, r3
 800c0ea:	9302      	str	r3, [sp, #8]
 800c0ec:	2500      	movs	r5, #0
 800c0ee:	0023      	movs	r3, r4
 800c0f0:	9501      	str	r5, [sp, #4]
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	2304      	movs	r3, #4
 800c0fc:	0010      	movs	r0, r2
 800c0fe:	33ff      	adds	r3, #255	@ 0xff
 800c100:	f7f9 fd48 	bl	8005b94 <rfalTransceiveBlockingTx>
            if( dri != RFAL_BR_KEEP )
 800c104:	2eff      	cmp	r6, #255	@ 0xff
 800c106:	d00b      	beq.n	800c120 <rfalIsoDepListenGetActivationStatus+0x100>
                rfalSetBitRate( dsi, dri );
 800c108:	0029      	movs	r1, r5
 800c10a:	0028      	movs	r0, r5
 800c10c:	f7f7 ff96 	bl	800403c <rfalSetBitRate>
                if(gIsoDep.actvParam.isoDepDev != NULL)
 800c110:	0023      	movs	r3, r4
 800c112:	338c      	adds	r3, #140	@ 0x8c
 800c114:	681b      	ldr	r3, [r3, #0]
                gIsoDep.txBR = dsi;  /* DSI codes the divisor from PICC to PCD */
 800c116:	85a5      	strh	r5, [r4, #44]	@ 0x2c
                if(gIsoDep.actvParam.isoDepDev != NULL)
 800c118:	42ab      	cmp	r3, r5
 800c11a:	d001      	beq.n	800c120 <rfalIsoDepListenGetActivationStatus+0x100>
                    gIsoDep.actvParam.isoDepDev->info.DSI =  dsi;
 800c11c:	3348      	adds	r3, #72	@ 0x48
 800c11e:	801d      	strh	r5, [r3, #0]
     gIsoDep.hdrLen  += (uint8_t)((gIsoDep.nad != RFAL_ISODEP_NO_NAD) ? RFAL_ISODEP_NAD_LEN : 0U);
 800c120:	7923      	ldrb	r3, [r4, #4]
 800c122:	3bff      	subs	r3, #255	@ 0xff
 800c124:	1e5a      	subs	r2, r3, #1
 800c126:	4193      	sbcs	r3, r2
 800c128:	0022      	movs	r2, r4
 800c12a:	3302      	adds	r3, #2
 800c12c:	322b      	adds	r2, #43	@ 0x2b
 800c12e:	7013      	strb	r3, [r2, #0]
     gIsoDep.blockNumber = 1;
 800c130:	2301      	movs	r3, #1
 800c132:	70a3      	strb	r3, [r4, #2]
    gIsoDep.rxBuf       = (uint8_t*)gIsoDep.actvParam.rxBuf;
 800c134:	1d23      	adds	r3, r4, #4
 800c136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    gIsoDep.rxBufInfPos = (uint8_t)((uint32_t)gIsoDep.actvParam.rxBuf->inf - (uint32_t)gIsoDep.actvParam.rxBuf->prologue);
 800c138:	2203      	movs	r2, #3
    gIsoDep.rxBuf       = (uint8_t*)gIsoDep.actvParam.rxBuf;
 800c13a:	61e3      	str	r3, [r4, #28]
    gIsoDep.rxBufLen    = sizeof( rfalIsoDepBufFormat );
 800c13c:	2304      	movs	r3, #4
 800c13e:	33ff      	adds	r3, #255	@ 0xff
 800c140:	8463      	strh	r3, [r4, #34]	@ 0x22
    gIsoDep.rxBufInfPos = (uint8_t)((uint32_t)gIsoDep.actvParam.rxBuf->inf - (uint32_t)gIsoDep.actvParam.rxBuf->prologue);
 800c142:	1da3      	adds	r3, r4, #6
 800c144:	77da      	strb	r2, [r3, #31]
    gIsoDep.rxLen       = gIsoDep.actvParam.rxLen;
 800c146:	0023      	movs	r3, r4
 800c148:	3308      	adds	r3, #8
 800c14a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c14c:	6323      	str	r3, [r4, #48]	@ 0x30
    gIsoDep.rxChaining  = gIsoDep.actvParam.isRxChaining;
 800c14e:	0023      	movs	r3, r4
 800c150:	3388      	adds	r3, #136	@ 0x88
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	6363      	str	r3, [r4, #52]	@ 0x34
    gIsoDep.state = ISODEP_ST_PICC_RX;
 800c156:	2306      	movs	r3, #6
 800c158:	7023      	strb	r3, [r4, #0]
        return RFAL_ERR_NONE;
 800c15a:	2100      	movs	r1, #0
 800c15c:	e783      	b.n	800c066 <rfalIsoDepListenGetActivationStatus+0x46>
    dsi   = RFAL_BR_KEEP;                        /* MISRA 9.1 */
 800c15e:	26ff      	movs	r6, #255	@ 0xff
 800c160:	e7c1      	b.n	800c0e6 <rfalIsoDepListenGetActivationStatus+0xc6>
 800c162:	46c0      	nop			@ (mov r8, r8)
 800c164:	20001a48 	.word	0x20001a48

0800c168 <rfalIsoDepGetMaxInfLen>:
{
 800c168:	b510      	push	{r4, lr}
    if( (gIsoDep.fsx < (uint16_t)RFAL_ISODEP_FSX_16) || (gIsoDep.fsx > (uint16_t)RFAL_ISODEP_FSX_4096) || (gIsoDep.hdrLen > ISODEP_HDR_MAX_LEN) )
 800c16a:	4a09      	ldr	r2, [pc, #36]	@ (800c190 <rfalIsoDepGetMaxInfLen+0x28>)
 800c16c:	24ff      	movs	r4, #255	@ 0xff
 800c16e:	8a93      	ldrh	r3, [r2, #20]
        return (aux - RFAL_ISODEP_PCB_LEN - ISODEP_CRC_LEN);
 800c170:	200d      	movs	r0, #13
    if( (gIsoDep.fsx < (uint16_t)RFAL_ISODEP_FSX_16) || (gIsoDep.fsx > (uint16_t)RFAL_ISODEP_FSX_4096) || (gIsoDep.hdrLen > ISODEP_HDR_MAX_LEN) )
 800c172:	0019      	movs	r1, r3
 800c174:	3910      	subs	r1, #16
 800c176:	b289      	uxth	r1, r1
 800c178:	0124      	lsls	r4, r4, #4
 800c17a:	42a1      	cmp	r1, r4
 800c17c:	d806      	bhi.n	800c18c <rfalIsoDepGetMaxInfLen+0x24>
 800c17e:	322b      	adds	r2, #43	@ 0x2b
 800c180:	7812      	ldrb	r2, [r2, #0]
 800c182:	2a03      	cmp	r2, #3
 800c184:	d802      	bhi.n	800c18c <rfalIsoDepGetMaxInfLen+0x24>
    return (gIsoDep.fsx - gIsoDep.hdrLen - ISODEP_CRC_LEN);
 800c186:	3b02      	subs	r3, #2
 800c188:	1a9b      	subs	r3, r3, r2
 800c18a:	b298      	uxth	r0, r3
}
 800c18c:	bd10      	pop	{r4, pc}
 800c18e:	46c0      	nop			@ (mov r8, r8)
 800c190:	20001a48 	.word	0x20001a48

0800c194 <rfalIsoDepStartTransceive>:
{
 800c194:	b084      	sub	sp, #16
 800c196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    gIsoDep.txBuf        = param.txBuf->prologue;
 800c198:	4c1e      	ldr	r4, [pc, #120]	@ (800c214 <rfalIsoDepStartTransceive+0x80>)
{
 800c19a:	9208      	str	r2, [sp, #32]
 800c19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c19e:	9006      	str	r0, [sp, #24]
 800c1a0:	9107      	str	r1, [sp, #28]
 800c1a2:	af06      	add	r7, sp, #24
 800c1a4:	8bbd      	ldrh	r5, [r7, #28]
    gIsoDep.rxBuf        = param.rxBuf->prologue;
 800c1a6:	61e2      	str	r2, [r4, #28]
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 800c1a8:	2204      	movs	r2, #4
    gIsoDep.rxLen        = param.rxLen;
 800c1aa:	6323      	str	r3, [r4, #48]	@ 0x30
    gIsoDep.rxChaining   = param.isRxChaining;
 800c1ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 800c1ae:	32ff      	adds	r2, #255	@ 0xff
    gIsoDep.rxChaining   = param.isRxChaining;
 800c1b0:	6363      	str	r3, [r4, #52]	@ 0x34
    gIsoDep.fwt          = param.FWT;
 800c1b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 800c1b4:	8462      	strh	r2, [r4, #34]	@ 0x22
    gIsoDep.fwt          = param.FWT;
 800c1b6:	60e3      	str	r3, [r4, #12]
    gIsoDep.txBufInfPos  = (uint8_t)((uintptr_t)param.txBuf->inf - (uintptr_t)param.txBuf->prologue);
 800c1b8:	4a17      	ldr	r2, [pc, #92]	@ (800c218 <rfalIsoDepStartTransceive+0x84>)
    gIsoDep.dFwt         = param.dFWT;
 800c1ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
{
 800c1bc:	0c0e      	lsrs	r6, r1, #16
    gIsoDep.txBuf        = param.txBuf->prologue;
 800c1be:	61a0      	str	r0, [r4, #24]
    gIsoDep.txBufLen     = param.txBufLen;
 800c1c0:	8421      	strh	r1, [r4, #32]
    gIsoDep.isTxChaining = param.isTxChaining;
 800c1c2:	75a6      	strb	r6, [r4, #22]
    gIsoDep.txBufInfPos  = (uint8_t)((uintptr_t)param.txBuf->inf - (uintptr_t)param.txBuf->prologue);
 800c1c4:	84a2      	strh	r2, [r4, #36]	@ 0x24
    gIsoDep.dFwt         = param.dFWT;
 800c1c6:	6123      	str	r3, [r4, #16]
    gIsoDep.fsx          = param.FSx;
 800c1c8:	8bfb      	ldrh	r3, [r7, #30]
 800c1ca:	82a3      	strh	r3, [r4, #20]
    gIsoDep.did          = param.DID;
 800c1cc:	2319      	movs	r3, #25
 800c1ce:	446b      	add	r3, sp
 800c1d0:	7fdb      	ldrb	r3, [r3, #31]
 800c1d2:	70e3      	strb	r3, [r4, #3]
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 800c1d4:	2dff      	cmp	r5, #255	@ 0xff
 800c1d6:	d100      	bne.n	800c1da <rfalIsoDepStartTransceive+0x46>
 800c1d8:	8ce5      	ldrh	r5, [r4, #38]	@ 0x26
    gIsoDep.isRxChaining  = false;
 800c1da:	2300      	movs	r3, #0
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 800c1dc:	84e5      	strh	r5, [r4, #38]	@ 0x26
    gIsoDep.isRxChaining  = false;
 800c1de:	75e3      	strb	r3, [r4, #23]
    rfalIsoDepClearCounters();
 800c1e0:	f7ff fa18 	bl	800b614 <rfalIsoDepClearCounters>
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	7862      	ldrb	r2, [r4, #1]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d10c      	bne.n	800c206 <rfalIsoDepStartTransceive+0x72>
       if(gIsoDep.txBufLen > 0U)
 800c1ec:	8c23      	ldrh	r3, [r4, #32]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d008      	beq.n	800c204 <rfalIsoDepStartTransceive+0x70>
           if( !gIsoDep.isWait4WTX )
 800c1f2:	0023      	movs	r3, r4
 800c1f4:	333e      	adds	r3, #62	@ 0x3e
 800c1f6:	7819      	ldrb	r1, [r3, #0]
 800c1f8:	2309      	movs	r3, #9
 800c1fa:	2900      	cmp	r1, #0
 800c1fc:	d003      	beq.n	800c206 <rfalIsoDepStartTransceive+0x72>
               gIsoDep.isTxPending = true;
 800c1fe:	0023      	movs	r3, r4
 800c200:	333d      	adds	r3, #61	@ 0x3d
 800c202:	701a      	strb	r2, [r3, #0]
       return RFAL_ERR_NONE;
 800c204:	2306      	movs	r3, #6
}
 800c206:	2000      	movs	r0, #0
               gIsoDep.state = ISODEP_ST_PICC_TX;
 800c208:	7023      	strb	r3, [r4, #0]
}
 800c20a:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c20c:	bc08      	pop	{r3}
 800c20e:	b004      	add	sp, #16
 800c210:	4718      	bx	r3
 800c212:	46c0      	nop			@ (mov r8, r8)
 800c214:	20001a48 	.word	0x20001a48
 800c218:	00000303 	.word	0x00000303

0800c21c <rfalIsoDepGetTransceiveStatus>:
{
 800c21c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 800c21e:	4cb9      	ldr	r4, [pc, #740]	@ (800c504 <rfalIsoDepGetTransceiveStatus+0x2e8>)
{
 800c220:	b089      	sub	sp, #36	@ 0x24
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 800c222:	7863      	ldrb	r3, [r4, #1]
 800c224:	2b01      	cmp	r3, #1
 800c226:	d000      	beq.n	800c22a <rfalIsoDepGetTransceiveStatus+0xe>
 800c228:	e1b9      	b.n	800c59e <rfalIsoDepGetTransceiveStatus+0x382>
    switch( gIsoDep.state )
 800c22a:	7825      	ldrb	r5, [r4, #0]
 800c22c:	2d09      	cmp	r5, #9
 800c22e:	d900      	bls.n	800c232 <rfalIsoDepGetTransceiveStatus+0x16>
 800c230:	e1ba      	b.n	800c5a8 <rfalIsoDepGetTransceiveStatus+0x38c>
 800c232:	0028      	movs	r0, r5
 800c234:	f7f3 ff8e 	bl	8000154 <__gnu_thumb1_case_uhi>
 800c238:	01b80139 	.word	0x01b80139
 800c23c:	01b801b8 	.word	0x01b801b8
 800c240:	01b801b8 	.word	0x01b801b8
 800c244:	00760023 	.word	0x00760023
 800c248:	000a009b 	.word	0x000a009b
            ret = rfalIsoDepTx( rfalIsoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, RFAL_FWT_NONE );
 800c24c:	2001      	movs	r0, #1
 800c24e:	78a5      	ldrb	r5, [r4, #2]
 800c250:	1d62      	adds	r2, r4, #5
 800c252:	4005      	ands	r5, r0
 800c254:	1800      	adds	r0, r0, r0
 800c256:	4328      	orrs	r0, r5
 800c258:	2501      	movs	r5, #1
 800c25a:	69a1      	ldr	r1, [r4, #24]
 800c25c:	7fd2      	ldrb	r2, [r2, #31]
 800c25e:	426d      	negs	r5, r5
 800c260:	8c23      	ldrh	r3, [r4, #32]
 800c262:	188a      	adds	r2, r1, r2
 800c264:	9500      	str	r5, [sp, #0]
 800c266:	f7ff fa2b 	bl	800b6c0 <rfalIsoDepTx>
            gIsoDep.isTxPending = false;
 800c26a:	0023      	movs	r3, r4
 800c26c:	2200      	movs	r2, #0
 800c26e:	333d      	adds	r3, #61	@ 0x3d
 800c270:	701a      	strb	r2, [r3, #0]
            switch( ret )
 800c272:	4290      	cmp	r0, r2
 800c274:	d110      	bne.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
            gIsoDep.state = ISODEP_ST_PICC_RX;                    /* Go back to Rx to process WTX ack        */
 800c276:	2306      	movs	r3, #6
 800c278:	7023      	strb	r3, [r4, #0]
                 return RFAL_ERR_BUSY;
 800c27a:	2002      	movs	r0, #2
 800c27c:	e00c      	b.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
            ret = rfalGetTransceiveStatus();
 800c27e:	f7f8 fa95 	bl	80047ac <rfalGetTransceiveStatus>
            switch( ret )
 800c282:	281b      	cmp	r0, #27
 800c284:	d808      	bhi.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
 800c286:	2501      	movs	r5, #1
 800c288:	002a      	movs	r2, r5
 800c28a:	4082      	lsls	r2, r0
 800c28c:	0013      	movs	r3, r2
 800c28e:	4a9e      	ldr	r2, [pc, #632]	@ (800c508 <rfalIsoDepGetTransceiveStatus+0x2ec>)
 800c290:	4213      	tst	r3, r2
 800c292:	d103      	bne.n	800c29c <rfalIsoDepGetTransceiveStatus+0x80>
 800c294:	422b      	tst	r3, r5
 800c296:	d10f      	bne.n	800c2b8 <rfalIsoDepGetTransceiveStatus+0x9c>
}
 800c298:	b009      	add	sp, #36	@ 0x24
 800c29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 800c29c:	2301      	movs	r3, #1
 800c29e:	2000      	movs	r0, #0
 800c2a0:	425b      	negs	r3, r3
 800c2a2:	9302      	str	r3, [sp, #8]
 800c2a4:	9001      	str	r0, [sp, #4]
 800c2a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	2304      	movs	r3, #4
 800c2ac:	69e2      	ldr	r2, [r4, #28]
 800c2ae:	33ff      	adds	r3, #255	@ 0xff
        rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800c2b0:	0001      	movs	r1, r0
 800c2b2:	f7f9 fc6f 	bl	8005b94 <rfalTransceiveBlockingTx>
        return RFAL_ERR_BUSY;  /* RFAL_ERR_PROTO Ignore this protocol request */
 800c2b6:	e7e0      	b.n	800c27a <rfalIsoDepGetTransceiveStatus+0x5e>
                    *gIsoDep.rxLen = rfalConvBitsToBytes( *gIsoDep.rxLen );
 800c2b8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800c2ba:	8813      	ldrh	r3, [r2, #0]
 800c2bc:	3307      	adds	r3, #7
 800c2be:	08db      	lsrs	r3, r3, #3
 800c2c0:	8013      	strh	r3, [r2, #0]
    rfalIsoDepClearCounters();
 800c2c2:	f7ff f9a7 	bl	800b614 <rfalIsoDepClearCounters>
    rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 800c2c6:	2008      	movs	r0, #8
 800c2c8:	2104      	movs	r1, #4
 800c2ca:	69e2      	ldr	r2, [r4, #28]
 800c2cc:	7813      	ldrb	r3, [r2, #0]
    gIsoDep.hdrLen  += (uint8_t)( (rfalIsoDep_PCBhasDID(rxPCB)) ? RFAL_ISODEP_DID_LEN : 0U );
 800c2ce:	4019      	ands	r1, r3
 800c2d0:	4018      	ands	r0, r3
    gIsoDep.hdrLen  += (uint8_t)( (rfalIsoDep_PCBhasNAD(rxPCB)) ? RFAL_ISODEP_NAD_LEN : 0U );
 800c2d2:	468c      	mov	ip, r1
    gIsoDep.hdrLen  += (uint8_t)( (rfalIsoDep_PCBhasDID(rxPCB)) ? RFAL_ISODEP_DID_LEN : 0U );
 800c2d4:	0006      	movs	r6, r0
 800c2d6:	1e71      	subs	r1, r6, #1
 800c2d8:	418e      	sbcs	r6, r1
    gIsoDep.hdrLen  += (uint8_t)( (rfalIsoDep_PCBhasNAD(rxPCB)) ? RFAL_ISODEP_NAD_LEN : 0U );
 800c2da:	4661      	mov	r1, ip
 800c2dc:	1e4f      	subs	r7, r1, #1
 800c2de:	41b9      	sbcs	r1, r7
 800c2e0:	1876      	adds	r6, r6, r1
 800c2e2:	0021      	movs	r1, r4
 800c2e4:	3601      	adds	r6, #1
 800c2e6:	312b      	adds	r1, #43	@ 0x2b
 800c2e8:	700e      	strb	r6, [r1, #0]
    if( gIsoDep.did == RFAL_ISODEP_DID_00 )
 800c2ea:	78e1      	ldrb	r1, [r4, #3]
 800c2ec:	9107      	str	r1, [sp, #28]
 800c2ee:	2900      	cmp	r1, #0
 800c2f0:	d046      	beq.n	800c380 <rfalIsoDepGetTransceiveStatus+0x164>
    if( ((*gIsoDep.rxLen) < gIsoDep.hdrLen) || ((*gIsoDep.rxLen) > (gIsoDep.ourFsx - ISODEP_CRC_LEN)) )
 800c2f2:	4d84      	ldr	r5, [pc, #528]	@ (800c504 <rfalIsoDepGetTransceiveStatus+0x2e8>)
 800c2f4:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800c2f6:	9706      	str	r7, [sp, #24]
 800c2f8:	883f      	ldrh	r7, [r7, #0]
 800c2fa:	9705      	str	r7, [sp, #20]
 800c2fc:	42b7      	cmp	r7, r6
 800c2fe:	d304      	bcc.n	800c30a <rfalIsoDepGetTransceiveStatus+0xee>
 800c300:	8cef      	ldrh	r7, [r5, #38]	@ 0x26
 800c302:	9905      	ldr	r1, [sp, #20]
 800c304:	3f02      	subs	r7, #2
 800c306:	42b9      	cmp	r1, r7
 800c308:	d940      	bls.n	800c38c <rfalIsoDepGetTransceiveStatus+0x170>
        rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800c30a:	2301      	movs	r3, #1
 800c30c:	2000      	movs	r0, #0
 800c30e:	425b      	negs	r3, r3
 800c310:	1d22      	adds	r2, r4, #4
 800c312:	9302      	str	r3, [sp, #8]
 800c314:	9001      	str	r0, [sp, #4]
 800c316:	3408      	adds	r4, #8
 800c318:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	2304      	movs	r3, #4
 800c31e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 800c320:	33ff      	adds	r3, #255	@ 0xff
 800c322:	e7c5      	b.n	800c2b0 <rfalIsoDepGetTransceiveStatus+0x94>
            if( !rfalIsoDepTimerisExpired( gIsoDep.WTXTimer ) )       /* Do nothing until WTX timer has expired */
 800c324:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800c326:	f7fa fdbd 	bl	8006ea4 <timerIsExpired>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d0a5      	beq.n	800c27a <rfalIsoDepGetTransceiveStatus+0x5e>
            gIsoDep.isWait4WTX = true;
 800c32e:	0023      	movs	r3, r4
 800c330:	2201      	movs	r2, #1
 800c332:	333e      	adds	r3, #62	@ 0x3e
 800c334:	701a      	strb	r2, [r3, #0]
            gIsoDep.lastWTXM = (uint8_t)rfalIsoDep_WTXMListenerMax( gIsoDep.fwt );
 800c336:	0023      	movs	r3, r4
 800c338:	3345      	adds	r3, #69	@ 0x45
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d000      	beq.n	800c342 <rfalIsoDepGetTransceiveStatus+0x126>
 800c340:	2508      	movs	r5, #8
 800c342:	0028      	movs	r0, r5
 800c344:	f7ff fd54 	bl	800bdf0 <rfalIsoDepFWI2FWT>
 800c348:	68e1      	ldr	r1, [r4, #12]
 800c34a:	f7f3 ff0d 	bl	8000168 <__udivsi3>
 800c34e:	1c03      	adds	r3, r0, #0
 800c350:	b2c0      	uxtb	r0, r0
 800c352:	283b      	cmp	r0, #59	@ 0x3b
 800c354:	d900      	bls.n	800c358 <rfalIsoDepGetTransceiveStatus+0x13c>
 800c356:	233b      	movs	r3, #59	@ 0x3b
 800c358:	0022      	movs	r2, r4
            RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM ) );
 800c35a:	2002      	movs	r0, #2
            gIsoDep.lastWTXM = (uint8_t)rfalIsoDep_WTXMListenerMax( gIsoDep.fwt );
 800c35c:	3229      	adds	r2, #41	@ 0x29
 800c35e:	b2d9      	uxtb	r1, r3
 800c360:	7013      	strb	r3, [r2, #0]
            RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM ) );
 800c362:	f7ff fa0d 	bl	800b780 <rfalIsoDepHandleControlMsg>
 800c366:	2800      	cmp	r0, #0
 800c368:	d100      	bne.n	800c36c <rfalIsoDepGetTransceiveStatus+0x150>
 800c36a:	e784      	b.n	800c276 <rfalIsoDepGetTransceiveStatus+0x5a>
 800c36c:	e794      	b.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
            if( !rfalIsTransceiveInTx() )       /* Wait until DSL response has been sent */
 800c36e:	f7f8 fa11 	bl	8004794 <rfalIsTransceiveInTx>
 800c372:	2800      	cmp	r0, #0
 800c374:	d000      	beq.n	800c378 <rfalIsoDepGetTransceiveStatus+0x15c>
 800c376:	e780      	b.n	800c27a <rfalIsoDepGetTransceiveStatus+0x5e>
                rfalIsoDepInitialize();         /* Session finished reInit vars, go back to ISODEP_ST_IDLE */
 800c378:	f7ff fb82 	bl	800ba80 <rfalIsoDepInitialize>
                return RFAL_ERR_SLEEP_REQ;           /* Notify Deselect request      */
 800c37c:	2020      	movs	r0, #32
 800c37e:	e78b      	b.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
        gIsoDep.lastDID00 = ( (rfalIsoDep_PCBhasDID(rxPCB)) ? true : false );
 800c380:	08df      	lsrs	r7, r3, #3
 800c382:	403d      	ands	r5, r7
 800c384:	0027      	movs	r7, r4
 800c386:	373c      	adds	r7, #60	@ 0x3c
 800c388:	703d      	strb	r5, [r7, #0]
 800c38a:	e7b2      	b.n	800c2f2 <rfalIsoDepGetTransceiveStatus+0xd6>
    if( ((gIsoDep.did != RFAL_ISODEP_DID_00) && ( (!rfalIsoDep_PCBhasDID(rxPCB)) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])))   ||
 800c38c:	9907      	ldr	r1, [sp, #28]
 800c38e:	2900      	cmp	r1, #0
 800c390:	d034      	beq.n	800c3fc <rfalIsoDepGetTransceiveStatus+0x1e0>
 800c392:	2800      	cmp	r0, #0
 800c394:	d0b9      	beq.n	800c30a <rfalIsoDepGetTransceiveStatus+0xee>
 800c396:	7850      	ldrb	r0, [r2, #1]
 800c398:	4288      	cmp	r0, r1
 800c39a:	d1b6      	bne.n	800c30a <rfalIsoDepGetTransceiveStatus+0xee>
    if( (gIsoDep.nad == RFAL_ISODEP_NO_NAD) && rfalIsoDep_PCBhasNAD(rxPCB) )
 800c39c:	7929      	ldrb	r1, [r5, #4]
 800c39e:	29ff      	cmp	r1, #255	@ 0xff
 800c3a0:	d102      	bne.n	800c3a8 <rfalIsoDepGetTransceiveStatus+0x18c>
 800c3a2:	4661      	mov	r1, ip
 800c3a4:	2900      	cmp	r1, #0
 800c3a6:	d1b0      	bne.n	800c30a <rfalIsoDepGetTransceiveStatus+0xee>
    if( rfalIsoDep_PCBisSBlock(rxPCB) )
 800c3a8:	2138      	movs	r1, #56	@ 0x38
 800c3aa:	0018      	movs	r0, r3
 800c3ac:	4388      	bics	r0, r1
 800c3ae:	0001      	movs	r1, r0
 800c3b0:	28c2      	cmp	r0, #194	@ 0xc2
 800c3b2:	d144      	bne.n	800c43e <rfalIsoDepGetTransceiveStatus+0x222>
       if( rfalIsoDep_PCBisSWTX(rxPCB) )
 800c3b4:	2408      	movs	r4, #8
 800c3b6:	43a3      	bics	r3, r4
 800c3b8:	2bf2      	cmp	r3, #242	@ 0xf2
 800c3ba:	d132      	bne.n	800c422 <rfalIsoDepGetTransceiveStatus+0x206>
            if( rfalIsoDep_PCBisWTX( gIsoDep.lastPCB ) )
 800c3bc:	002b      	movs	r3, r5
 800c3be:	3328      	adds	r3, #40	@ 0x28
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	3992      	subs	r1, #146	@ 0x92
 800c3c4:	400b      	ands	r3, r1
 800c3c6:	428b      	cmp	r3, r1
 800c3c8:	d000      	beq.n	800c3cc <rfalIsoDepGetTransceiveStatus+0x1b0>
 800c3ca:	e095      	b.n	800c4f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
                if( ( gIsoDep.rxBuf[ gIsoDep.hdrLen ] == gIsoDep.lastWTXM) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_SWTX_INF_LEN) )
 800c3cc:	002b      	movs	r3, r5
 800c3ce:	3329      	adds	r3, #41	@ 0x29
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	5d94      	ldrb	r4, [r2, r6]
 800c3d4:	429c      	cmp	r4, r3
 800c3d6:	d000      	beq.n	800c3da <rfalIsoDepGetTransceiveStatus+0x1be>
 800c3d8:	e08e      	b.n	800c4f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
 800c3da:	9b05      	ldr	r3, [sp, #20]
 800c3dc:	1b9e      	subs	r6, r3, r6
 800c3de:	2e01      	cmp	r6, #1
 800c3e0:	d000      	beq.n	800c3e4 <rfalIsoDepGetTransceiveStatus+0x1c8>
 800c3e2:	e089      	b.n	800c4f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
                    gIsoDep.isWait4WTX = false;
 800c3e4:	002b      	movs	r3, r5
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	333e      	adds	r3, #62	@ 0x3e
 800c3ea:	701a      	strb	r2, [r3, #0]
                    if( gIsoDep.isTxPending )
 800c3ec:	002b      	movs	r3, r5
 800c3ee:	333d      	adds	r3, #61	@ 0x3d
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d008      	beq.n	800c408 <rfalIsoDepGetTransceiveStatus+0x1ec>
                        gIsoDep.state = ISODEP_ST_PICC_TX;
 800c3f6:	2309      	movs	r3, #9
                    gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800c3f8:	702b      	strb	r3, [r5, #0]
                    return RFAL_ERR_BUSY;
 800c3fa:	e73e      	b.n	800c27a <rfalIsoDepGetTransceiveStatus+0x5e>
        ((gIsoDep.did == RFAL_ISODEP_DID_00) &&    rfalIsoDep_PCBhasDID(rxPCB) && (RFAL_ISODEP_DID_00 != gIsoDep.rxBuf[ ISODEP_DID_POS ]) )     )
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d0cd      	beq.n	800c39c <rfalIsoDepGetTransceiveStatus+0x180>
 800c400:	7851      	ldrb	r1, [r2, #1]
 800c402:	2900      	cmp	r1, #0
 800c404:	d0ca      	beq.n	800c39c <rfalIsoDepGetTransceiveStatus+0x180>
 800c406:	e780      	b.n	800c30a <rfalIsoDepGetTransceiveStatus+0xee>
                    rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( (gIsoDep.lastWTXM * rfalConv1fcToMs( gIsoDep.fwt )) ) );
 800c408:	68e8      	ldr	r0, [r5, #12]
 800c40a:	4940      	ldr	r1, [pc, #256]	@ (800c50c <rfalIsoDepGetTransceiveStatus+0x2f0>)
 800c40c:	f7f3 feac 	bl	8000168 <__udivsi3>
 800c410:	4360      	muls	r0, r4
 800c412:	08c3      	lsrs	r3, r0, #3
 800c414:	1ac0      	subs	r0, r0, r3
 800c416:	b280      	uxth	r0, r0
 800c418:	f7fa fd3e 	bl	8006e98 <timerCalculateTimer>
                    gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800c41c:	2307      	movs	r3, #7
                    rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( (gIsoDep.lastWTXM * rfalConv1fcToMs( gIsoDep.fwt )) ) );
 800c41e:	63a8      	str	r0, [r5, #56]	@ 0x38
                    gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800c420:	e7ea      	b.n	800c3f8 <rfalIsoDepGetTransceiveStatus+0x1dc>
       if( rfalIsoDep_PCBisSDeselect(rxPCB) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_SDSL_INF_LEN) )
 800c422:	2bc2      	cmp	r3, #194	@ 0xc2
 800c424:	d168      	bne.n	800c4f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
 800c426:	9b05      	ldr	r3, [sp, #20]
 800c428:	42b3      	cmp	r3, r6
 800c42a:	d165      	bne.n	800c4f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
           RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 800c42c:	2100      	movs	r1, #0
 800c42e:	2003      	movs	r0, #3
 800c430:	f7ff f9a6 	bl	800b780 <rfalIsoDepHandleControlMsg>
 800c434:	2800      	cmp	r0, #0
 800c436:	d000      	beq.n	800c43a <rfalIsoDepGetTransceiveStatus+0x21e>
 800c438:	e72e      	b.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
           gIsoDep.state = ISODEP_ST_PICC_SDSL;
 800c43a:	702c      	strb	r4, [r5, #0]
           return RFAL_ERR_BUSY;
 800c43c:	e71d      	b.n	800c27a <rfalIsoDepGetTransceiveStatus+0x5e>
    else if( rfalIsoDep_PCBisRBlock(rxPCB) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_RBLOCK_INF_LEN))
 800c43e:	2119      	movs	r1, #25
 800c440:	0018      	movs	r0, r3
 800c442:	4388      	bics	r0, r1
 800c444:	28a2      	cmp	r0, #162	@ 0xa2
 800c446:	d141      	bne.n	800c4cc <rfalIsoDepGetTransceiveStatus+0x2b0>
 800c448:	9905      	ldr	r1, [sp, #20]
 800c44a:	42b1      	cmp	r1, r6
 800c44c:	d154      	bne.n	800c4f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
        if( rfalIsoDep_PCBisRACK(rxPCB) )                             /* Check if is a R-ACK */
 800c44e:	2109      	movs	r1, #9
 800c450:	0018      	movs	r0, r3
 800c452:	4388      	bics	r0, r1
 800c454:	28a2      	cmp	r0, #162	@ 0xa2
 800c456:	d12a      	bne.n	800c4ae <rfalIsoDepGetTransceiveStatus+0x292>
            if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )      /* Check block number  */
 800c458:	2401      	movs	r4, #1
 800c45a:	78a9      	ldrb	r1, [r5, #2]
 800c45c:	4023      	ands	r3, r4
 800c45e:	428b      	cmp	r3, r1
 800c460:	d109      	bne.n	800c476 <rfalIsoDepGetTransceiveStatus+0x25a>
                if( !rfalIsoDep_PCBisIBlock(gIsoDep.lastPCB) )
 800c462:	002b      	movs	r3, r5
 800c464:	221d      	movs	r2, #29
 800c466:	3328      	adds	r3, #40	@ 0x28
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	4393      	bics	r3, r2
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d0c2      	beq.n	800c3f6 <rfalIsoDepGetTransceiveStatus+0x1da>
                    rfalIsoDepReSendControlMsg();
 800c470:	f7ff fae2 	bl	800ba38 <rfalIsoDepReSendControlMsg.isra.0>
 800c474:	e701      	b.n	800c27a <rfalIsoDepGetTransceiveStatus+0x5e>
                if( !gIsoDep.isTxChaining )
 800c476:	7da8      	ldrb	r0, [r5, #22]
 800c478:	2800      	cmp	r0, #0
 800c47a:	d108      	bne.n	800c48e <rfalIsoDepGetTransceiveStatus+0x272>
                    rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 800c47c:	2301      	movs	r3, #1
 800c47e:	425b      	negs	r3, r3
 800c480:	9302      	str	r3, [sp, #8]
    rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 800c482:	9b06      	ldr	r3, [sp, #24]
 800c484:	9001      	str	r0, [sp, #4]
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	2304      	movs	r3, #4
 800c48a:	33ff      	adds	r3, #255	@ 0xff
 800c48c:	e710      	b.n	800c2b0 <rfalIsoDepGetTransceiveStatus+0x94>
                rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 800c48e:	438c      	bics	r4, r1
                rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 800c490:	68e8      	ldr	r0, [r5, #12]
 800c492:	491e      	ldr	r1, [pc, #120]	@ (800c50c <rfalIsoDepGetTransceiveStatus+0x2f0>)
                rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 800c494:	70ac      	strb	r4, [r5, #2]
                rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 800c496:	f7f3 fe67 	bl	8000168 <__udivsi3>
 800c49a:	08c3      	lsrs	r3, r0, #3
 800c49c:	1ac0      	subs	r0, r0, r3
 800c49e:	b280      	uxth	r0, r0
 800c4a0:	f7fa fcfa 	bl	8006e98 <timerCalculateTimer>
                gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800c4a4:	2307      	movs	r3, #7
                rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 800c4a6:	63a8      	str	r0, [r5, #56]	@ 0x38
                gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800c4a8:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_NONE;
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	e6f4      	b.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
        else if( rfalIsoDep_PCBisRNAK(rxPCB) )                       /* Check if is a R-NACK */
 800c4ae:	28b2      	cmp	r0, #178	@ 0xb2
 800c4b0:	d122      	bne.n	800c4f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
            if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Check block number  */
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	78a9      	ldrb	r1, [r5, #2]
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	4299      	cmp	r1, r3
 800c4ba:	d0d2      	beq.n	800c462 <rfalIsoDepGetTransceiveStatus+0x246>
                RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800c4bc:	2100      	movs	r1, #0
 800c4be:	0008      	movs	r0, r1
 800c4c0:	f7ff f95e 	bl	800b780 <rfalIsoDepHandleControlMsg>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d000      	beq.n	800c4ca <rfalIsoDepGetTransceiveStatus+0x2ae>
 800c4c8:	e6e6      	b.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
 800c4ca:	e6d6      	b.n	800c27a <rfalIsoDepGetTransceiveStatus+0x5e>
    else if( rfalIsoDep_PCBisIBlock(rxPCB) )
 800c4cc:	211d      	movs	r1, #29
 800c4ce:	0018      	movs	r0, r3
 800c4d0:	4388      	bics	r0, r1
 800c4d2:	2802      	cmp	r0, #2
 800c4d4:	d110      	bne.n	800c4f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
        rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 800c4d6:	2701      	movs	r7, #1
 800c4d8:	0038      	movs	r0, r7
 800c4da:	4c0a      	ldr	r4, [pc, #40]	@ (800c504 <rfalIsoDepGetTransceiveStatus+0x2e8>)
 800c4dc:	78a1      	ldrb	r1, [r4, #2]
 800c4de:	4388      	bics	r0, r1
 800c4e0:	9107      	str	r1, [sp, #28]
        if( (rfalIsoDep_GetBN(rxPCB) != gIsoDep.blockNumber) || (gIsoDep.isTxChaining) )
 800c4e2:	0019      	movs	r1, r3
        rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 800c4e4:	70a0      	strb	r0, [r4, #2]
        if( (rfalIsoDep_GetBN(rxPCB) != gIsoDep.blockNumber) || (gIsoDep.isTxChaining) )
 800c4e6:	4039      	ands	r1, r7
 800c4e8:	4288      	cmp	r0, r1
 800c4ea:	d102      	bne.n	800c4f2 <rfalIsoDepGetTransceiveStatus+0x2d6>
 800c4ec:	7da0      	ldrb	r0, [r4, #22]
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d00e      	beq.n	800c510 <rfalIsoDepGetTransceiveStatus+0x2f4>
            rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 800c4f2:	9907      	ldr	r1, [sp, #28]
 800c4f4:	4039      	ands	r1, r7
 800c4f6:	70a9      	strb	r1, [r5, #2]
    rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	425b      	negs	r3, r3
 800c4fc:	2000      	movs	r0, #0
 800c4fe:	9302      	str	r3, [sp, #8]
 800c500:	e7bf      	b.n	800c482 <rfalIsoDepGetTransceiveStatus+0x266>
 800c502:	46c0      	nop			@ (mov r8, r8)
 800c504:	20001a48 	.word	0x20001a48
 800c508:	08200210 	.word	0x08200210
 800c50c:	000034f8 	.word	0x000034f8
        if( rfalIsoDep_PCBisChaining(rxPCB) )
 800c510:	2510      	movs	r5, #16
 800c512:	46ac      	mov	ip, r5
            *gIsoDep.rxChaining   = true; /* Output Parameter*/            
 800c514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
        if( rfalIsoDep_PCBisChaining(rxPCB) )
 800c516:	401d      	ands	r5, r3
            *gIsoDep.rxChaining   = true; /* Output Parameter*/            
 800c518:	9107      	str	r1, [sp, #28]
        if( rfalIsoDep_PCBisChaining(rxPCB) )
 800c51a:	4661      	mov	r1, ip
 800c51c:	420b      	tst	r3, r1
 800c51e:	d01e      	beq.n	800c55e <rfalIsoDepGetTransceiveStatus+0x342>
            *gIsoDep.rxChaining   = true; /* Output Parameter*/            
 800c520:	9b07      	ldr	r3, [sp, #28]
            gIsoDep.isRxChaining  = true;
 800c522:	75e7      	strb	r7, [r4, #23]
            RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800c524:	0001      	movs	r1, r0
            *gIsoDep.rxChaining   = true; /* Output Parameter*/            
 800c526:	701f      	strb	r7, [r3, #0]
            RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 800c528:	f7ff f92a 	bl	800b780 <rfalIsoDepHandleControlMsg>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d000      	beq.n	800c532 <rfalIsoDepGetTransceiveStatus+0x316>
 800c530:	e6b2      	b.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
            *gIsoDep.rxLen -= gIsoDep.hdrLen;
 800c532:	0022      	movs	r2, r4
 800c534:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c536:	322b      	adds	r2, #43	@ 0x2b
 800c538:	7811      	ldrb	r1, [r2, #0]
 800c53a:	881a      	ldrh	r2, [r3, #0]
 800c53c:	1a52      	subs	r2, r2, r1
 800c53e:	b292      	uxth	r2, r2
 800c540:	801a      	strh	r2, [r3, #0]
            if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*gIsoDep.rxLen > 0U) )
 800c542:	1da3      	adds	r3, r4, #6
 800c544:	7fdb      	ldrb	r3, [r3, #31]
 800c546:	4299      	cmp	r1, r3
 800c548:	d001      	beq.n	800c54e <rfalIsoDepGetTransceiveStatus+0x332>
 800c54a:	2a00      	cmp	r2, #0
 800c54c:	d101      	bne.n	800c552 <rfalIsoDepGetTransceiveStatus+0x336>
            return RFAL_ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/            
 800c54e:	200d      	movs	r0, #13
 800c550:	e6a2      	b.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
                RFAL_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *gIsoDep.rxLen );
 800c552:	69e0      	ldr	r0, [r4, #28]
 800c554:	1841      	adds	r1, r0, r1
 800c556:	18c0      	adds	r0, r0, r3
 800c558:	f006 fe9a 	bl	8013290 <memmove>
 800c55c:	e7f7      	b.n	800c54e <rfalIsoDepGetTransceiveStatus+0x332>
        *gIsoDep.rxChaining   = false; /* Output Parameter        */
 800c55e:	9b07      	ldr	r3, [sp, #28]
        gIsoDep.isRxChaining  = false; /* clear PCD chaining flag */
 800c560:	75e5      	strb	r5, [r4, #23]
        *gIsoDep.rxChaining   = false; /* Output Parameter        */
 800c562:	701d      	strb	r5, [r3, #0]
        *gIsoDep.rxLen -= gIsoDep.hdrLen;
 800c564:	9b05      	ldr	r3, [sp, #20]
 800c566:	9906      	ldr	r1, [sp, #24]
 800c568:	1b9b      	subs	r3, r3, r6
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	800b      	strh	r3, [r1, #0]
        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*gIsoDep.rxLen > 0U) )
 800c56e:	1da1      	adds	r1, r4, #6
 800c570:	7fc8      	ldrb	r0, [r1, #31]
 800c572:	4286      	cmp	r6, r0
 800c574:	d006      	beq.n	800c584 <rfalIsoDepGetTransceiveStatus+0x368>
 800c576:	2b00      	cmp	r3, #0
 800c578:	d004      	beq.n	800c584 <rfalIsoDepGetTransceiveStatus+0x368>
            RFAL_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *gIsoDep.rxLen );
 800c57a:	1991      	adds	r1, r2, r6
 800c57c:	1810      	adds	r0, r2, r0
 800c57e:	001a      	movs	r2, r3
 800c580:	f006 fe86 	bl	8013290 <memmove>
        rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 800c584:	68e0      	ldr	r0, [r4, #12]
 800c586:	4909      	ldr	r1, [pc, #36]	@ (800c5ac <rfalIsoDepGetTransceiveStatus+0x390>)
 800c588:	f7f3 fdee 	bl	8000168 <__udivsi3>
 800c58c:	08c3      	lsrs	r3, r0, #3
 800c58e:	1ac0      	subs	r0, r0, r3
 800c590:	b280      	uxth	r0, r0
 800c592:	f7fa fc81 	bl	8006e98 <timerCalculateTimer>
        gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800c596:	2307      	movs	r3, #7
        rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 800c598:	63a0      	str	r0, [r4, #56]	@ 0x38
        gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800c59a:	7023      	strb	r3, [r4, #0]
        return RFAL_ERR_NONE;
 800c59c:	e785      	b.n	800c4aa <rfalIsoDepGetTransceiveStatus+0x28e>
        return rfalIsoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 800c59e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5a0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c5a2:	f7ff fa9d 	bl	800bae0 <rfalIsoDepDataExchangePCD>
 800c5a6:	e677      	b.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
            return RFAL_ERR_INTERNAL;
 800c5a8:	200c      	movs	r0, #12
 800c5aa:	e675      	b.n	800c298 <rfalIsoDepGetTransceiveStatus+0x7c>
 800c5ac:	000034f8 	.word	0x000034f8

0800c5b0 <rfalIsoDepPollAStartActivation>:
{
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	0006      	movs	r6, r0
 800c5b4:	000f      	movs	r7, r1
 800c5b6:	0015      	movs	r5, r2
 800c5b8:	001c      	movs	r4, r3
        return RFAL_ERR_PARAM;
 800c5ba:	2007      	movs	r0, #7
    if( rfalIsoDepDev == NULL )
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d016      	beq.n	800c5ee <rfalIsoDepPollAStartActivation+0x3e>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMD );
 800c5c0:	3806      	subs	r0, #6
 800c5c2:	f7f7 ff5d 	bl	8004480 <rfalSetErrorHandling>
    RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartRATS( FSDI, DID, &rfalIsoDepDev->activation.A.Listener.ATS, &rfalIsoDepDev->activation.A.Listener.ATSLen ) );
 800c5c6:	0023      	movs	r3, r4
 800c5c8:	0022      	movs	r2, r4
 800c5ca:	0039      	movs	r1, r7
 800c5cc:	0030      	movs	r0, r6
 800c5ce:	3314      	adds	r3, #20
 800c5d0:	f7ff f948 	bl	800b864 <rfalIsoDepStartRATS>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d10a      	bne.n	800c5ee <rfalIsoDepPollAStartActivation+0x3e>
    rfalIsoDepDev->info.DSI = maxBR;
 800c5d8:	0023      	movs	r3, r4
 800c5da:	3348      	adds	r3, #72	@ 0x48
 800c5dc:	701d      	strb	r5, [r3, #0]
    gIsoDep.actvDev     = rfalIsoDepDev;
 800c5de:	4b04      	ldr	r3, [pc, #16]	@ (800c5f0 <rfalIsoDepPollAStartActivation+0x40>)
    gIsoDep.cntRRetrys  = gIsoDep.maxRetriesRATS;
 800c5e0:	001a      	movs	r2, r3
    gIsoDep.actvDev     = rfalIsoDepDev;
 800c5e2:	67dc      	str	r4, [r3, #124]	@ 0x7c
    gIsoDep.cntRRetrys  = gIsoDep.maxRetriesRATS;
 800c5e4:	3244      	adds	r2, #68	@ 0x44
 800c5e6:	7812      	ldrb	r2, [r2, #0]
 800c5e8:	719a      	strb	r2, [r3, #6]
    gIsoDep.state       = ISODEP_ST_PCD_ACT_RATS;
 800c5ea:	220a      	movs	r2, #10
 800c5ec:	701a      	strb	r2, [r3, #0]
}
 800c5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5f0:	20001a48 	.word	0x20001a48

0800c5f4 <rfalIsoDepPollAGetActivationStatus>:
{
 800c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( gIsoDep.state )
 800c5f6:	4c6b      	ldr	r4, [pc, #428]	@ (800c7a4 <rfalIsoDepPollAGetActivationStatus+0x1b0>)
 800c5f8:	7823      	ldrb	r3, [r4, #0]
 800c5fa:	2b0a      	cmp	r3, #10
 800c5fc:	d00b      	beq.n	800c616 <rfalIsoDepPollAGetActivationStatus+0x22>
 800c5fe:	2b0b      	cmp	r3, #11
 800c600:	d100      	bne.n	800c604 <rfalIsoDepPollAGetActivationStatus+0x10>
 800c602:	e0bb      	b.n	800c77c <rfalIsoDepPollAGetActivationStatus+0x188>
 800c604:	2021      	movs	r0, #33	@ 0x21
 800c606:	2b03      	cmp	r3, #3
 800c608:	d133      	bne.n	800c672 <rfalIsoDepPollAGetActivationStatus+0x7e>
            ret = rfalIsoDepGetDeselectStatus();
 800c60a:	f7ff fbe1 	bl	800bdd0 <rfalIsoDepGetDeselectStatus>
            if( ret != RFAL_ERR_BUSY )
 800c60e:	2802      	cmp	r0, #2
 800c610:	d027      	beq.n	800c662 <rfalIsoDepPollAGetActivationStatus+0x6e>
                ret = RFAL_ERR_FRAMING;
 800c612:	2009      	movs	r0, #9
 800c614:	e02d      	b.n	800c672 <rfalIsoDepPollAGetActivationStatus+0x7e>
            ret = rfalIsoDepGetRATSStatus();
 800c616:	f7ff fc0f 	bl	800be38 <rfalIsoDepGetRATSStatus>
 800c61a:	0003      	movs	r3, r0
            if( ret != RFAL_ERR_BUSY )
 800c61c:	2802      	cmp	r0, #2
 800c61e:	d020      	beq.n	800c662 <rfalIsoDepPollAGetActivationStatus+0x6e>
                if( ret != RFAL_ERR_NONE )
 800c620:	2800      	cmp	r0, #0
 800c622:	d027      	beq.n	800c674 <rfalIsoDepPollAGetActivationStatus+0x80>
                    if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != RFAL_ERR_TIMEOUT) )
 800c624:	0023      	movs	r3, r4
 800c626:	3345      	adds	r3, #69	@ 0x45
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d101      	bne.n	800c632 <rfalIsoDepPollAGetActivationStatus+0x3e>
 800c62e:	2804      	cmp	r0, #4
 800c630:	d11f      	bne.n	800c672 <rfalIsoDepPollAGetActivationStatus+0x7e>
                    if( gIsoDep.cntRRetrys != 0U )
 800c632:	79a2      	ldrb	r2, [r4, #6]
 800c634:	2a00      	cmp	r2, #0
 800c636:	d016      	beq.n	800c666 <rfalIsoDepPollAGetActivationStatus+0x72>
                        rfalSetGT( rfalGetFDTPoll() );
 800c638:	f7f7 ff44 	bl	80044c4 <rfalGetFDTPoll>
 800c63c:	f7f7 ff52 	bl	80044e4 <rfalSetGT>
                        rfalFieldOnAndStartGT();
 800c640:	f7f7 ff68 	bl	8004514 <rfalFieldOnAndStartGT>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartRATS( (rfalIsoDepFSxI)(uint8_t)(gIsoDep.actv.ratsReq.PARAM >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT), 
 800c644:	0020      	movs	r0, r4
 800c646:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800c648:	304d      	adds	r0, #77	@ 0x4d
 800c64a:	0013      	movs	r3, r2
 800c64c:	7800      	ldrb	r0, [r0, #0]
 800c64e:	78e1      	ldrb	r1, [r4, #3]
 800c650:	3314      	adds	r3, #20
 800c652:	0900      	lsrs	r0, r0, #4
 800c654:	f7ff f906 	bl	800b864 <rfalIsoDepStartRATS>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d10a      	bne.n	800c672 <rfalIsoDepPollAGetActivationStatus+0x7e>
                        gIsoDep.cntRRetrys--;
 800c65c:	79a3      	ldrb	r3, [r4, #6]
 800c65e:	3b01      	subs	r3, #1
 800c660:	71a3      	strb	r3, [r4, #6]
                        return RFAL_ERR_BUSY;
 800c662:	2002      	movs	r0, #2
 800c664:	e005      	b.n	800c672 <rfalIsoDepPollAGetActivationStatus+0x7e>
                    else if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 800c666:	2b02      	cmp	r3, #2
 800c668:	d103      	bne.n	800c672 <rfalIsoDepPollAGetActivationStatus+0x7e>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartDeselect() );
 800c66a:	f7ff fb99 	bl	800bda0 <rfalIsoDepStartDeselect>
 800c66e:	2800      	cmp	r0, #0
 800c670:	d0f7      	beq.n	800c662 <rfalIsoDepPollAGetActivationStatus+0x6e>
}
 800c672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    maxBR = gIsoDep.actvDev->info.DSI;             /* Retrieve requested max bitrate */
 800c674:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
                    gIsoDep.actvDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 800c676:	2604      	movs	r6, #4
                    maxBR = gIsoDep.actvDev->info.DSI;             /* Retrieve requested max bitrate */
 800c678:	002a      	movs	r2, r5
                    gIsoDep.actvDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 800c67a:	0029      	movs	r1, r5
                    maxBR = gIsoDep.actvDev->info.DSI;             /* Retrieve requested max bitrate */
 800c67c:	3248      	adds	r2, #72	@ 0x48
                    gIsoDep.actvDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 800c67e:	312c      	adds	r1, #44	@ 0x2c
                    gIsoDep.actvDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 800c680:	002f      	movs	r7, r5
                    maxBR = gIsoDep.actvDev->info.DSI;             /* Retrieve requested max bitrate */
 800c682:	7810      	ldrb	r0, [r2, #0]
                    gIsoDep.actvDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 800c684:	700e      	strb	r6, [r1, #0]
                    gIsoDep.actvDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 800c686:	2102      	movs	r1, #2
 800c688:	3740      	adds	r7, #64	@ 0x40
                    gIsoDep.actvDev->info.SFGI = 0U;
 800c68a:	63ab      	str	r3, [r5, #56]	@ 0x38
                    gIsoDep.actvDev->info.MBL  = 0U;
 800c68c:	646b      	str	r3, [r5, #68]	@ 0x44
                    gIsoDep.actvDev->info.DSI  = RFAL_BR_106;
 800c68e:	8013      	strh	r3, [r2, #0]
                    gIsoDep.actvDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 800c690:	7039      	strb	r1, [r7, #0]
                    if( gIsoDep.actvDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 800c692:	782b      	ldrb	r3, [r5, #0]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d92b      	bls.n	800c6f0 <rfalIsoDepPollAGetActivationStatus+0xfc>
                        gIsoDep.actvDev->info.FSxI = (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 800c698:	786b      	ldrb	r3, [r5, #1]
 800c69a:	360b      	adds	r6, #11
 800c69c:	401e      	ands	r6, r3
 800c69e:	703e      	strb	r6, [r7, #0]
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 800c6a0:	06db      	lsls	r3, r3, #27
 800c6a2:	d505      	bpl.n	800c6b0 <rfalIsoDepPollAGetActivationStatus+0xbc>
                            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++], &gIsoDep.actvDev->info.DSI, &gIsoDep.actvDev->info.DRI );
 800c6a4:	002b      	movs	r3, r5
 800c6a6:	78a9      	ldrb	r1, [r5, #2]
 800c6a8:	3349      	adds	r3, #73	@ 0x49
 800c6aa:	f7fe ffbb 	bl	800b624 <rfalIsoDepCalcBitRate>
 800c6ae:	2103      	movs	r1, #3
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 800c6b0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800c6b2:	7858      	ldrb	r0, [r3, #1]
 800c6b4:	0682      	lsls	r2, r0, #26
 800c6b6:	d509      	bpl.n	800c6cc <rfalIsoDepPollAGetActivationStatus+0xd8>
                            gIsoDep.actvDev->info.SFGI  = ((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++];
 800c6b8:	5c5a      	ldrb	r2, [r3, r1]
 800c6ba:	1c4d      	adds	r5, r1, #1
                            gIsoDep.actvDev->info.FWI   = (uint8_t)((gIsoDep.actvDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 800c6bc:	0019      	movs	r1, r3
 800c6be:	0916      	lsrs	r6, r2, #4
 800c6c0:	312c      	adds	r1, #44	@ 0x2c
 800c6c2:	700e      	strb	r6, [r1, #0]
                            gIsoDep.actvDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 800c6c4:	210f      	movs	r1, #15
 800c6c6:	400a      	ands	r2, r1
 800c6c8:	639a      	str	r2, [r3, #56]	@ 0x38
                            gIsoDep.actvDev->info.SFGI  = ((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++];
 800c6ca:	b2e9      	uxtb	r1, r5
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 800c6cc:	0640      	lsls	r0, r0, #25
 800c6ce:	d50f      	bpl.n	800c6f0 <rfalIsoDepPollAGetActivationStatus+0xfc>
                            gIsoDep.actvDev->info.supAdFt = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 800c6d0:	2001      	movs	r0, #1
 800c6d2:	001d      	movs	r5, r3
 800c6d4:	5c5a      	ldrb	r2, [r3, r1]
 800c6d6:	354e      	adds	r5, #78	@ 0x4e
 800c6d8:	0912      	lsrs	r2, r2, #4
 800c6da:	4002      	ands	r2, r0
 800c6dc:	702a      	strb	r2, [r5, #0]
                            gIsoDep.actvDev->info.supDID  = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 800c6de:	5c5a      	ldrb	r2, [r3, r1]
 800c6e0:	3d02      	subs	r5, #2
 800c6e2:	40c2      	lsrs	r2, r0
 800c6e4:	4002      	ands	r2, r0
 800c6e6:	702a      	strb	r2, [r5, #0]
                            gIsoDep.actvDev->info.supNAD  = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 800c6e8:	5c5a      	ldrb	r2, [r3, r1]
 800c6ea:	334d      	adds	r3, #77	@ 0x4d
 800c6ec:	4002      	ands	r2, r0
 800c6ee:	701a      	strb	r2, [r3, #0]
                    gIsoDep.actvDev->info.FSx  = rfalIsoDepFSxI2FSx(gIsoDep.actvDev->info.FSxI);
 800c6f0:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
 800c6f2:	002b      	movs	r3, r5
 800c6f4:	3340      	adds	r3, #64	@ 0x40
 800c6f6:	7818      	ldrb	r0, [r3, #0]
 800c6f8:	f7ff fb82 	bl	800be00 <rfalIsoDepFSxI2FSx>
 800c6fc:	1d2b      	adds	r3, r5, #4
 800c6fe:	87d8      	strh	r0, [r3, #62]	@ 0x3e
                    gIsoDep.actvDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)gIsoDep.actvDev->info.SFGI );
 800c700:	6bab      	ldr	r3, [r5, #56]	@ 0x38
                    gIsoDep.fsx                = gIsoDep.actvDev->info.FSx;
 800c702:	82a0      	strh	r0, [r4, #20]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 800c704:	1e5a      	subs	r2, r3, #1
 800c706:	b2d2      	uxtb	r2, r2
 800c708:	2a0d      	cmp	r2, #13
 800c70a:	d835      	bhi.n	800c778 <rfalIsoDepPollAGetActivationStatus+0x184>
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = rfalIsoDepCalcSGFT(sfgi) + rfalIsoDepCalcdSGFT(sfgi);
 800c70c:	208c      	movs	r0, #140	@ 0x8c
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	0140      	lsls	r0, r0, #5
 800c712:	4098      	lsls	r0, r3
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 800c714:	4924      	ldr	r1, [pc, #144]	@ (800c7a8 <rfalIsoDepPollAGetActivationStatus+0x1b4>)
 800c716:	f7f3 fd27 	bl	8000168 <__udivsi3>
                    rfalSetGT( rfalConvMsTo1fc(gIsoDep.actvDev->info.SFGT) );
 800c71a:	4b23      	ldr	r3, [pc, #140]	@ (800c7a8 <rfalIsoDepPollAGetActivationStatus+0x1b4>)
    return (rfalConv1fcToMs(sfgt) + 1U);
 800c71c:	3001      	adds	r0, #1
                    gIsoDep.actvDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)gIsoDep.actvDev->info.SFGI );
 800c71e:	63e8      	str	r0, [r5, #60]	@ 0x3c
                    rfalSetGT( rfalConvMsTo1fc(gIsoDep.actvDev->info.SFGT) );
 800c720:	4358      	muls	r0, r3
 800c722:	f7f7 fedf 	bl	80044e4 <rfalSetGT>
                    rfalFieldOnAndStartGT();
 800c726:	f7f7 fef5 	bl	8004514 <rfalFieldOnAndStartGT>
                    gIsoDep.actvDev->info.FWT  = rfalIsoDepFWI2FWT( gIsoDep.actvDev->info.FWI );
 800c72a:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
 800c72c:	002b      	movs	r3, r5
 800c72e:	332c      	adds	r3, #44	@ 0x2c
 800c730:	7818      	ldrb	r0, [r3, #0]
 800c732:	f7ff fb5d 	bl	800bdf0 <rfalIsoDepFWI2FWT>
                    gIsoDep.actvDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 800c736:	23c0      	movs	r3, #192	@ 0xc0
 800c738:	021b      	lsls	r3, r3, #8
 800c73a:	636b      	str	r3, [r5, #52]	@ 0x34
                    gIsoDep.actvDev->info.DID = ( (gIsoDep.actvDev->info.supDID) ? gIsoDep.did : RFAL_ISODEP_NO_DID);
 800c73c:	002b      	movs	r3, r5
                    gIsoDep.actvDev->info.FWT  = rfalIsoDepFWI2FWT( gIsoDep.actvDev->info.FWI );
 800c73e:	6328      	str	r0, [r5, #48]	@ 0x30
                    gIsoDep.actvDev->info.DID = ( (gIsoDep.actvDev->info.supDID) ? gIsoDep.did : RFAL_ISODEP_NO_DID);
 800c740:	2000      	movs	r0, #0
 800c742:	334c      	adds	r3, #76	@ 0x4c
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	4283      	cmp	r3, r0
 800c748:	d000      	beq.n	800c74c <rfalIsoDepPollAGetActivationStatus+0x158>
 800c74a:	78e0      	ldrb	r0, [r4, #3]
 800c74c:	002b      	movs	r3, r5
                    gIsoDep.actvDev->info.NAD = RFAL_ISODEP_NO_NAD;
 800c74e:	22ff      	movs	r2, #255	@ 0xff
                    if( (gIsoDep.actvDev->info.DSI != RFAL_BR_106) || (gIsoDep.actvDev->info.DRI != RFAL_BR_106) )
 800c750:	0029      	movs	r1, r5
                    gIsoDep.actvDev->info.DID = ( (gIsoDep.actvDev->info.supDID) ? gIsoDep.did : RFAL_ISODEP_NO_DID);
 800c752:	334a      	adds	r3, #74	@ 0x4a
 800c754:	7018      	strb	r0, [r3, #0]
                    gIsoDep.actvDev->info.NAD = RFAL_ISODEP_NO_NAD;
 800c756:	705a      	strb	r2, [r3, #1]
                    if( (gIsoDep.actvDev->info.DSI != RFAL_BR_106) || (gIsoDep.actvDev->info.DRI != RFAL_BR_106) )
 800c758:	3148      	adds	r1, #72	@ 0x48
 800c75a:	880b      	ldrh	r3, [r1, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d01c      	beq.n	800c79a <rfalIsoDepPollAGetActivationStatus+0x1a6>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartPPS( gIsoDep.actvDev->info.DID, gIsoDep.actvDev->info.DSI, gIsoDep.actvDev->info.DRI, (rfalIsoDepPpsRes*)&gIsoDep.ctrlBuf ));
 800c760:	3549      	adds	r5, #73	@ 0x49
 800c762:	4b12      	ldr	r3, [pc, #72]	@ (800c7ac <rfalIsoDepPollAGetActivationStatus+0x1b8>)
 800c764:	782a      	ldrb	r2, [r5, #0]
 800c766:	7809      	ldrb	r1, [r1, #0]
 800c768:	f7ff f932 	bl	800b9d0 <rfalIsoDepStartPPS>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d000      	beq.n	800c772 <rfalIsoDepPollAGetActivationStatus+0x17e>
 800c770:	e77f      	b.n	800c672 <rfalIsoDepPollAGetActivationStatus+0x7e>
                        gIsoDep.state = ISODEP_ST_PCD_ACT_PPS;
 800c772:	230b      	movs	r3, #11
 800c774:	7023      	strb	r3, [r4, #0]
                        return RFAL_ERR_BUSY;
 800c776:	e774      	b.n	800c662 <rfalIsoDepPollAGetActivationStatus+0x6e>
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 800c778:	480d      	ldr	r0, [pc, #52]	@ (800c7b0 <rfalIsoDepPollAGetActivationStatus+0x1bc>)
 800c77a:	e7cb      	b.n	800c714 <rfalIsoDepPollAGetActivationStatus+0x120>
            ret = rfalIsoDepGetPPSSTatus();
 800c77c:	f7ff f89e 	bl	800b8bc <rfalIsoDepGetPPSSTatus>
            if( ret != RFAL_ERR_BUSY )
 800c780:	2802      	cmp	r0, #2
 800c782:	d100      	bne.n	800c786 <rfalIsoDepPollAGetActivationStatus+0x192>
 800c784:	e76d      	b.n	800c662 <rfalIsoDepPollAGetActivationStatus+0x6e>
                    rfalSetBitRate( gIsoDep.actvDev->info.DRI, gIsoDep.actvDev->info.DSI );
 800c786:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800c788:	001a      	movs	r2, r3
 800c78a:	3248      	adds	r2, #72	@ 0x48
                if( ret == RFAL_ERR_NONE )
 800c78c:	2800      	cmp	r0, #0
 800c78e:	d106      	bne.n	800c79e <rfalIsoDepPollAGetActivationStatus+0x1aa>
                    rfalSetBitRate( gIsoDep.actvDev->info.DRI, gIsoDep.actvDev->info.DSI );
 800c790:	3349      	adds	r3, #73	@ 0x49
 800c792:	7811      	ldrb	r1, [r2, #0]
 800c794:	7818      	ldrb	r0, [r3, #0]
 800c796:	f7f7 fc51 	bl	800403c <rfalSetBitRate>
                    return RFAL_ERR_NONE;
 800c79a:	2000      	movs	r0, #0
 800c79c:	e769      	b.n	800c672 <rfalIsoDepPollAGetActivationStatus+0x7e>
                    gIsoDep.actvDev->info.DSI = RFAL_BR_106;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	8013      	strh	r3, [r2, #0]
                    ret = RFAL_ERR_NONE;
 800c7a2:	e7fa      	b.n	800c79a <rfalIsoDepPollAGetActivationStatus+0x1a6>
 800c7a4:	20001a48 	.word	0x20001a48
 800c7a8:	000034f8 	.word	0x000034f8
 800c7ac:	20001a8e 	.word	0x20001a8e
 800c7b0:	00001a7c 	.word	0x00001a7c

0800c7b4 <rfalIsoDepPollBStartActivation>:
{
 800c7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7b6:	b08f      	sub	sp, #60	@ 0x3c
 800c7b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c7ba:	ab16      	add	r3, sp, #88	@ 0x58
 800c7bc:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c7c2:	930d      	str	r3, [sp, #52]	@ 0x34
    rfalIsoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 800c7c4:	0023      	movs	r3, r4
{
 800c7c6:	900a      	str	r0, [sp, #40]	@ 0x28
 800c7c8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c7ca:	9109      	str	r1, [sp, #36]	@ 0x24
    rfalIsoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 800c7cc:	7b2e      	ldrb	r6, [r5, #12]
 800c7ce:	332c      	adds	r3, #44	@ 0x2c
 800c7d0:	0930      	lsrs	r0, r6, #4
 800c7d2:	7018      	strb	r0, [r3, #0]
    rfalIsoDepDev->info.FWT     = rfalIsoDepFWI2FWT( rfalIsoDepDev->info.FWI );
 800c7d4:	f7ff fb0c 	bl	800bdf0 <rfalIsoDepFWI2FWT>
    rfalIsoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 800c7d8:	23c0      	movs	r3, #192	@ 0xc0
 800c7da:	021b      	lsls	r3, r3, #8
    rfalIsoDepDev->info.FWT     = rfalIsoDepFWI2FWT( rfalIsoDepDev->info.FWI );
 800c7dc:	6320      	str	r0, [r4, #48]	@ 0x30
    rfalIsoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 800c7de:	6363      	str	r3, [r4, #52]	@ 0x34
    rfalIsoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 800c7e0:	7b6b      	ldrb	r3, [r5, #13]
    if (tmpSFGI != ISODEP_SFGI_MIN)
 800c7e2:	4a38      	ldr	r2, [pc, #224]	@ (800c8c4 <rfalIsoDepPollBStartActivation+0x110>)
    rfalIsoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 800c7e4:	091b      	lsrs	r3, r3, #4
    if (tmpSFGI != ISODEP_SFGI_MIN)
 800c7e6:	40da      	lsrs	r2, r3
    rfalIsoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 800c7e8:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (tmpSFGI != ISODEP_SFGI_MIN)
 800c7ea:	07d2      	lsls	r2, r2, #31
 800c7ec:	d462      	bmi.n	800c8b4 <rfalIsoDepPollBStartActivation+0x100>
        sfgt  = rfalIsoDepCalcSGFT(sfgi) + rfalIsoDepCalcdSGFT(sfgi);
 800c7ee:	208c      	movs	r0, #140	@ 0x8c
 800c7f0:	0140      	lsls	r0, r0, #5
 800c7f2:	4098      	lsls	r0, r3
    return (rfalConv1fcToMs(sfgt) + 1U);
 800c7f4:	4934      	ldr	r1, [pc, #208]	@ (800c8c8 <rfalIsoDepPollBStartActivation+0x114>)
 800c7f6:	f7f3 fcb7 	bl	8000168 <__udivsi3>
    rfalIsoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 800c7fa:	0023      	movs	r3, r4
    return (rfalConv1fcToMs(sfgt) + 1U);
 800c7fc:	3001      	adds	r0, #1
    rfalIsoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)rfalIsoDepDev->info.SFGI );
 800c7fe:	63e0      	str	r0, [r4, #60]	@ 0x3c
    rfalIsoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 800c800:	7ae8      	ldrb	r0, [r5, #11]
 800c802:	3340      	adds	r3, #64	@ 0x40
 800c804:	0900      	lsrs	r0, r0, #4
 800c806:	7018      	strb	r0, [r3, #0]
    rfalIsoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(rfalIsoDepDev->info.FSxI);
 800c808:	f7ff fafa 	bl	800be00 <rfalIsoDepFSxI2FSx>
    rfalIsoDepDev->info.DID     = DID;
 800c80c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    rfalIsoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(rfalIsoDepDev->info.FSxI);
 800c80e:	1d23      	adds	r3, r4, #4
 800c810:	87d8      	strh	r0, [r3, #62]	@ 0x3e
    rfalIsoDepDev->info.DID     = DID;
 800c812:	3346      	adds	r3, #70	@ 0x46
 800c814:	701a      	strb	r2, [r3, #0]
    rfalIsoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 800c816:	2201      	movs	r2, #1
 800c818:	0033      	movs	r3, r6
    rfalIsoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 800c81a:	40d6      	lsrs	r6, r2
    rfalIsoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 800c81c:	4013      	ands	r3, r2
    rfalIsoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 800c81e:	4016      	ands	r6, r2
    rfalIsoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 800c820:	0021      	movs	r1, r4
    rfalIsoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 800c822:	0022      	movs	r2, r4
    rfalIsoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 800c824:	314c      	adds	r1, #76	@ 0x4c
    rfalIsoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 800c826:	324d      	adds	r2, #77	@ 0x4d
    rfalIsoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 800c828:	700b      	strb	r3, [r1, #0]
    rfalIsoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 800c82a:	7016      	strb	r6, [r2, #0]
    if( (DID != RFAL_ISODEP_NO_DID) && (!rfalIsoDepDev->info.supDID) )
 800c82c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c82e:	2a00      	cmp	r2, #0
 800c830:	d002      	beq.n	800c838 <rfalIsoDepPollBStartActivation+0x84>
        return RFAL_ERR_PARAM;
 800c832:	2007      	movs	r0, #7
    if( (DID != RFAL_ISODEP_NO_DID) && (!rfalIsoDepDev->info.supDID) )
 800c834:	2b00      	cmp	r3, #0
 800c836:	d03b      	beq.n	800c8b0 <rfalIsoDepPollBStartActivation+0xfc>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMD );
 800c838:	2001      	movs	r0, #1
 800c83a:	f7f7 fe21 	bl	8004480 <rfalSetErrorHandling>
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 800c83e:	4b23      	ldr	r3, [pc, #140]	@ (800c8cc <rfalIsoDepPollBStartActivation+0x118>)
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d138      	bne.n	800c8b8 <rfalIsoDepPollBStartActivation+0x104>
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 800c846:	4822      	ldr	r0, [pc, #136]	@ (800c8d0 <rfalIsoDepPollBStartActivation+0x11c>)
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &rfalIsoDepDev->info.DSI, &rfalIsoDepDev->info.DRI );
 800c848:	0026      	movs	r6, r4
 800c84a:	0027      	movs	r7, r4
 800c84c:	3649      	adds	r6, #73	@ 0x49
 800c84e:	3748      	adds	r7, #72	@ 0x48
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 800c850:	f7f7 fe2c 	bl	80044ac <rfalSetFDTPoll>
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &rfalIsoDepDev->info.DSI, &rfalIsoDepDev->info.DRI );
 800c854:	0033      	movs	r3, r6
 800c856:	003a      	movs	r2, r7
 800c858:	7aa9      	ldrb	r1, [r5, #10]
 800c85a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c85c:	f7fe fee2 	bl	800b624 <rfalIsoDepCalcBitRate>
    RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 800c860:	7b2a      	ldrb	r2, [r5, #12]
 800c862:	2308      	movs	r3, #8
 800c864:	0011      	movs	r1, r2
 800c866:	1ca8      	adds	r0, r5, #2
 800c868:	4019      	ands	r1, r3
 800c86a:	421a      	tst	r2, r3
 800c86c:	d000      	beq.n	800c870 <rfalIsoDepPollBStartActivation+0xbc>
 800c86e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c870:	7833      	ldrb	r3, [r6, #0]
 800c872:	4e16      	ldr	r6, [pc, #88]	@ (800c8cc <rfalIsoDepPollBStartActivation+0x118>)
 800c874:	783a      	ldrb	r2, [r7, #0]
 800c876:	7836      	ldrb	r6, [r6, #0]
 800c878:	2e01      	cmp	r6, #1
 800c87a:	d002      	beq.n	800c882 <rfalIsoDepPollBStartActivation+0xce>
 800c87c:	7aee      	ldrb	r6, [r5, #11]
 800c87e:	2507      	movs	r5, #7
 800c880:	402e      	ands	r6, r5
 800c882:	0025      	movs	r5, r4
 800c884:	3521      	adds	r5, #33	@ 0x21
 800c886:	9507      	str	r5, [sp, #28]
 800c888:	9406      	str	r4, [sp, #24]
 800c88a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c88c:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 800c88e:	9601      	str	r6, [sp, #4]
 800c890:	19ed      	adds	r5, r5, r7
 800c892:	9505      	str	r5, [sp, #20]
 800c894:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c896:	9504      	str	r5, [sp, #16]
 800c898:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 800c89a:	9503      	str	r5, [sp, #12]
 800c89c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c89e:	9502      	str	r5, [sp, #8]
 800c8a0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c8a2:	9500      	str	r5, [sp, #0]
 800c8a4:	f7ff f820 	bl	800b8e8 <rfalIsoDepStartATTRIB>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d101      	bne.n	800c8b0 <rfalIsoDepPollBStartActivation+0xfc>
    gIsoDep.actvDev = rfalIsoDepDev;
 800c8ac:	4b09      	ldr	r3, [pc, #36]	@ (800c8d4 <rfalIsoDepPollBStartActivation+0x120>)
 800c8ae:	67dc      	str	r4, [r3, #124]	@ 0x7c
}
 800c8b0:	b00f      	add	sp, #60	@ 0x3c
 800c8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 800c8b4:	4806      	ldr	r0, [pc, #24]	@ (800c8d0 <rfalIsoDepPollBStartActivation+0x11c>)
 800c8b6:	e79d      	b.n	800c7f4 <rfalIsoDepPollBStartActivation+0x40>
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 800c8b8:	7ae8      	ldrb	r0, [r5, #11]
 800c8ba:	0740      	lsls	r0, r0, #29
 800c8bc:	0f80      	lsrs	r0, r0, #30
 800c8be:	f003 fc7f 	bl	80101c0 <rfalNfcbTR2ToFDT>
 800c8c2:	e7c1      	b.n	800c848 <rfalIsoDepPollBStartActivation+0x94>
 800c8c4:	00008001 	.word	0x00008001
 800c8c8:	000034f8 	.word	0x000034f8
 800c8cc:	20001a8d 	.word	0x20001a8d
 800c8d0:	00001a7c 	.word	0x00001a7c
 800c8d4:	20001a48 	.word	0x20001a48

0800c8d8 <rfalIsoDepPollBGetActivationStatus>:
{
 800c8d8:	b570      	push	{r4, r5, r6, lr}
    ret = rfalIsoDepGetATTRIBStatus();
 800c8da:	f7ff facf 	bl	800be7c <rfalIsoDepGetATTRIBStatus>
 800c8de:	0004      	movs	r4, r0
    if( ret != RFAL_ERR_BUSY)
 800c8e0:	2802      	cmp	r0, #2
 800c8e2:	d023      	beq.n	800c92c <rfalIsoDepPollBGetActivationStatus+0x54>
            if( (gIsoDep.actvDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != gIsoDep.did )
 800c8e4:	4d15      	ldr	r5, [pc, #84]	@ (800c93c <rfalIsoDepPollBGetActivationStatus+0x64>)
 800c8e6:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
        if( ret == RFAL_ERR_NONE )
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d121      	bne.n	800c930 <rfalIsoDepPollBGetActivationStatus+0x58>
            if( (gIsoDep.actvDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != gIsoDep.did )
 800c8ec:	210f      	movs	r1, #15
 800c8ee:	781a      	ldrb	r2, [r3, #0]
 800c8f0:	78e8      	ldrb	r0, [r5, #3]
 800c8f2:	4011      	ands	r1, r2
 800c8f4:	4288      	cmp	r0, r1
 800c8f6:	d11f      	bne.n	800c938 <rfalIsoDepPollBGetActivationStatus+0x60>
            mbli = ((gIsoDep.actvDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 800c8f8:	0912      	lsrs	r2, r2, #4
            if( mbli > 0U)
 800c8fa:	d004      	beq.n	800c906 <rfalIsoDepPollBGetActivationStatus+0x2e>
                gIsoDep.actvDev->info.MBL = (gIsoDep.actvDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 800c8fc:	1d19      	adds	r1, r3, #4
 800c8fe:	8fc9      	ldrh	r1, [r1, #62]	@ 0x3e
 800c900:	3a01      	subs	r2, #1
 800c902:	4091      	lsls	r1, r2
 800c904:	6459      	str	r1, [r3, #68]	@ 0x44
            rfalSetBitRate( gIsoDep.actvDev->info.DRI, gIsoDep.actvDev->info.DSI );
 800c906:	001a      	movs	r2, r3
 800c908:	3349      	adds	r3, #73	@ 0x49
 800c90a:	3248      	adds	r2, #72	@ 0x48
 800c90c:	7811      	ldrb	r1, [r2, #0]
 800c90e:	7818      	ldrb	r0, [r3, #0]
 800c910:	f7f7 fb94 	bl	800403c <rfalSetBitRate>
            rfalSetGT( rfalConvMsTo1fc(gIsoDep.actvDev->info.SFGT) );
 800c914:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800c916:	480a      	ldr	r0, [pc, #40]	@ (800c940 <rfalIsoDepPollBGetActivationStatus+0x68>)
 800c918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c91a:	4358      	muls	r0, r3
 800c91c:	f7f7 fde2 	bl	80044e4 <rfalSetGT>
            rfalFieldOnAndStartGT();
 800c920:	f7f7 fdf8 	bl	8004514 <rfalFieldOnAndStartGT>
        gIsoDep.fsx    = gIsoDep.actvDev->info.FSx;
 800c924:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800c926:	3304      	adds	r3, #4
 800c928:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c92a:	82ab      	strh	r3, [r5, #20]
}
 800c92c:	0020      	movs	r0, r4
 800c92e:	bd70      	pop	{r4, r5, r6, pc}
            gIsoDep.actvDev->info.DSI = RFAL_BR_106;
 800c930:	2200      	movs	r2, #0
 800c932:	3348      	adds	r3, #72	@ 0x48
 800c934:	801a      	strh	r2, [r3, #0]
 800c936:	e7f5      	b.n	800c924 <rfalIsoDepPollBGetActivationStatus+0x4c>
                return RFAL_ERR_PROTO;
 800c938:	240b      	movs	r4, #11
 800c93a:	e7f7      	b.n	800c92c <rfalIsoDepPollBGetActivationStatus+0x54>
 800c93c:	20001a48 	.word	0x20001a48
 800c940:	000034f8 	.word	0x000034f8

0800c944 <rfalIsoDepStartApduTransceive>:
}
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepStartApduTransceive( rfalIsoDepApduTxRxParam param )
{
 800c944:	b084      	sub	sp, #16
 800c946:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c948:	b095      	sub	sp, #84	@ 0x54
 800c94a:	911b      	str	r1, [sp, #108]	@ 0x6c
    rfalIsoDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gIsoDep.APDUParam = param;
 800c94c:	4933      	ldr	r1, [pc, #204]	@ (800ca1c <rfalIsoDepStartApduTransceive+0xd8>)
{
 800c94e:	901a      	str	r0, [sp, #104]	@ 0x68
 800c950:	921c      	str	r2, [sp, #112]	@ 0x70
 800c952:	931d      	str	r3, [sp, #116]	@ 0x74
 800c954:	ab1a      	add	r3, sp, #104	@ 0x68
 800c956:	8bdc      	ldrh	r4, [r3, #30]
    gIsoDep.APDUParam = param;
 800c958:	000b      	movs	r3, r1
 800c95a:	aa1a      	add	r2, sp, #104	@ 0x68
 800c95c:	cae0      	ldmia	r2!, {r5, r6, r7}
 800c95e:	c3e0      	stmia	r3!, {r5, r6, r7}
 800c960:	ca62      	ldmia	r2!, {r1, r5, r6}
 800c962:	c362      	stmia	r3!, {r1, r5, r6}
 800c964:	482e      	ldr	r0, [pc, #184]	@ (800ca20 <rfalIsoDepStartApduTransceive+0xdc>)
 800c966:	ca62      	ldmia	r2!, {r1, r5, r6}
 800c968:	c362      	stmia	r3!, {r1, r5, r6}
    gIsoDep.APDUTxPos = 0;
 800c96a:	0003      	movs	r3, r0
 800c96c:	2200      	movs	r2, #0
 800c96e:	33b4      	adds	r3, #180	@ 0xb4
 800c970:	601a      	str	r2, [r3, #0]
    gIsoDep.APDURxPos = 0;
    
    /* Assign current FSx to calculate INF length (only change the FSx from activation if no to Keep) */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 800c972:	2cff      	cmp	r4, #255	@ 0xff
 800c974:	d100      	bne.n	800c978 <rfalIsoDepStartApduTransceive+0x34>
 800c976:	8cc4      	ldrh	r4, [r0, #38]	@ 0x26
 800c978:	84c4      	strh	r4, [r0, #38]	@ 0x26
    gIsoDep.fsx    = param.FSx;
 800c97a:	ab1a      	add	r3, sp, #104	@ 0x68
 800c97c:	8b9b      	ldrh	r3, [r3, #28]
 800c97e:	0002      	movs	r2, r0
 800c980:	8283      	strh	r3, [r0, #20]
    
    /* Convert APDU TxRxParams to I-Block TxRxParams */
    rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 800c982:	0003      	movs	r3, r0
 800c984:	3390      	adds	r3, #144	@ 0x90
 800c986:	681f      	ldr	r7, [r3, #0]
 800c988:	0003      	movs	r3, r0
 800c98a:	3394      	adds	r3, #148	@ 0x94
 800c98c:	881d      	ldrh	r5, [r3, #0]
 800c98e:	0003      	movs	r3, r0
 800c990:	339c      	adds	r3, #156	@ 0x9c
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	32a8      	adds	r2, #168	@ 0xa8
 800c996:	6812      	ldr	r2, [r2, #0]
 800c998:	9307      	str	r3, [sp, #28]
 800c99a:	0003      	movs	r3, r0
 800c99c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c99e:	0002      	movs	r2, r0
 800c9a0:	33a0      	adds	r3, #160	@ 0xa0
 800c9a2:	32ac      	adds	r2, #172	@ 0xac
 800c9a4:	681e      	ldr	r6, [r3, #0]
 800c9a6:	0003      	movs	r3, r0
 800c9a8:	8811      	ldrh	r1, [r2, #0]
 800c9aa:	0002      	movs	r2, r0
     iBlockParam->DID    = apduParam.DID;
 800c9ac:	30b0      	adds	r0, #176	@ 0xb0
 800c9ae:	7800      	ldrb	r0, [r0, #0]
 800c9b0:	33a4      	adds	r3, #164	@ 0xa4
 800c9b2:	4684      	mov	ip, r0
 800c9b4:	201d      	movs	r0, #29
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	ac0b      	add	r4, sp, #44	@ 0x2c
 800c9ba:	9308      	str	r3, [sp, #32]
 800c9bc:	ab04      	add	r3, sp, #16
 800c9be:	18c0      	adds	r0, r0, r3
 800c9c0:	4663      	mov	r3, ip
 800c9c2:	77c3      	strb	r3, [r0, #31]
     iBlockParam->FWT    = apduParam.FWT;
 800c9c4:	9b08      	ldr	r3, [sp, #32]
 800c9c6:	32ae      	adds	r2, #174	@ 0xae
 800c9c8:	8812      	ldrh	r2, [r2, #0]
 800c9ca:	6163      	str	r3, [r4, #20]
     iBlockParam->dFWT   = apduParam.dFWT;
 800c9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
     iBlockParam->FSx    = apduParam.FSx;
 800c9ce:	83e1      	strh	r1, [r4, #30]
     iBlockParam->ourFSx = apduParam.ourFSx;
 800c9d0:	83a2      	strh	r2, [r4, #28]
     iBlockParam->dFWT   = apduParam.dFWT;
 800c9d2:	61a3      	str	r3, [r4, #24]
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 800c9d4:	f7ff fbc8 	bl	800c168 <rfalIsoDepGetMaxInfLen>
 800c9d8:	4285      	cmp	r5, r0
 800c9da:	d91c      	bls.n	800ca16 <rfalIsoDepStartApduTransceive+0xd2>
         iBlockParam->isTxChaining = true;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	71a3      	strb	r3, [r4, #6]
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 800c9e0:	f7ff fbc2 	bl	800c168 <rfalIsoDepGetMaxInfLen>
 800c9e4:	0005      	movs	r5, r0
    
    return rfalIsoDepStartTransceive( txRxParam );
 800c9e6:	466a      	mov	r2, sp
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 800c9e8:	4b0e      	ldr	r3, [pc, #56]	@ (800ca24 <rfalIsoDepStartApduTransceive+0xe0>)
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 800c9ea:	80a5      	strh	r5, [r4, #4]
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 800c9ec:	6123      	str	r3, [r4, #16]
     iBlockParam->rxLen        = apduParam.rxLen;
 800c9ee:	9b07      	ldr	r3, [sp, #28]
     iBlockParam->txBuf        = (rfalIsoDepBufFormat*)apduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800c9f0:	970b      	str	r7, [sp, #44]	@ 0x2c
     iBlockParam->rxLen        = apduParam.rxLen;
 800c9f2:	60e3      	str	r3, [r4, #12]
     iBlockParam->rxBuf        = apduParam.tmpBuf;                        /* Simply using the apdu buffer is not possible because of current ACK handling */
 800c9f4:	60a6      	str	r6, [r4, #8]
    return rfalIsoDepStartTransceive( txRxParam );
 800c9f6:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c9f8:	cb23      	ldmia	r3!, {r0, r1, r5}
 800c9fa:	c223      	stmia	r2!, {r0, r1, r5}
 800c9fc:	cb03      	ldmia	r3!, {r0, r1}
 800c9fe:	c203      	stmia	r2!, {r0, r1}
 800ca00:	0038      	movs	r0, r7
 800ca02:	0032      	movs	r2, r6
 800ca04:	6861      	ldr	r1, [r4, #4]
 800ca06:	9b07      	ldr	r3, [sp, #28]
 800ca08:	f7ff fbc4 	bl	800c194 <rfalIsoDepStartTransceive>
}
 800ca0c:	b015      	add	sp, #84	@ 0x54
 800ca0e:	bcf0      	pop	{r4, r5, r6, r7}
 800ca10:	bc08      	pop	{r3}
 800ca12:	b004      	add	sp, #16
 800ca14:	4718      	bx	r3
         iBlockParam->isTxChaining = false;
 800ca16:	2300      	movs	r3, #0
 800ca18:	71a3      	strb	r3, [r4, #6]
         iBlockParam->txBufLen     = (apduParam.txBufLen - txPos);
 800ca1a:	e7e4      	b.n	800c9e6 <rfalIsoDepStartApduTransceive+0xa2>
 800ca1c:	20001ad8 	.word	0x20001ad8
 800ca20:	20001a48 	.word	0x20001a48
 800ca24:	20001b00 	.word	0x20001b00

0800ca28 <rfalIsoDepGetApduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepGetApduTransceiveStatus( void )
{
 800ca28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca2a:	b097      	sub	sp, #92	@ 0x5c
    ReturnCode          ret;
    rfalIsoDepTxRxParam txRxParam;
    
    ret = rfalIsoDepGetTransceiveStatus();
 800ca2c:	f7ff fbf6 	bl	800c21c <rfalIsoDepGetTransceiveStatus>
 800ca30:	1e05      	subs	r5, r0, #0
    switch( ret )
 800ca32:	d004      	beq.n	800ca3e <rfalIsoDepGetApduTransceiveStatus+0x16>
 800ca34:	280d      	cmp	r0, #13
 800ca36:	d100      	bne.n	800ca3a <rfalIsoDepGetApduTransceiveStatus+0x12>
 800ca38:	e066      	b.n	800cb08 <rfalIsoDepGetApduTransceiveStatus+0xe0>
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
    }
    
    return ret;
 }
 800ca3a:	b017      	add	sp, #92	@ 0x5c
 800ca3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( gIsoDep.isTxChaining )
 800ca3e:	484c      	ldr	r0, [pc, #304]	@ (800cb70 <rfalIsoDepGetApduTransceiveStatus+0x148>)
 800ca40:	7d83      	ldrb	r3, [r0, #22]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d060      	beq.n	800cb08 <rfalIsoDepGetApduTransceiveStatus+0xe0>
                gIsoDep.APDUTxPos += gIsoDep.txBufLen;
 800ca46:	0003      	movs	r3, r0
 800ca48:	33b4      	adds	r3, #180	@ 0xb4
 800ca4a:	881f      	ldrh	r7, [r3, #0]
 800ca4c:	8c02      	ldrh	r2, [r0, #32]
     iBlockParam->DID    = apduParam.DID;
 800ca4e:	ac0d      	add	r4, sp, #52	@ 0x34
                gIsoDep.APDUTxPos += gIsoDep.txBufLen;
 800ca50:	18bf      	adds	r7, r7, r2
 800ca52:	b2bf      	uxth	r7, r7
 800ca54:	801f      	strh	r7, [r3, #0]
                rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 800ca56:	0003      	movs	r3, r0
 800ca58:	3390      	adds	r3, #144	@ 0x90
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	0002      	movs	r2, r0
 800ca5e:	9308      	str	r3, [sp, #32]
 800ca60:	0003      	movs	r3, r0
 800ca62:	3394      	adds	r3, #148	@ 0x94
 800ca64:	881e      	ldrh	r6, [r3, #0]
 800ca66:	0003      	movs	r3, r0
 800ca68:	339c      	adds	r3, #156	@ 0x9c
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	32a8      	adds	r2, #168	@ 0xa8
 800ca6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca70:	0003      	movs	r3, r0
 800ca72:	6812      	ldr	r2, [r2, #0]
 800ca74:	33a0      	adds	r3, #160	@ 0xa0
 800ca76:	4694      	mov	ip, r2
 800ca78:	0002      	movs	r2, r0
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	32ac      	adds	r2, #172	@ 0xac
 800ca7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca80:	0003      	movs	r3, r0
 800ca82:	8811      	ldrh	r1, [r2, #0]
 800ca84:	0002      	movs	r2, r0
     iBlockParam->DID    = apduParam.DID;
 800ca86:	30b0      	adds	r0, #176	@ 0xb0
 800ca88:	7800      	ldrb	r0, [r0, #0]
 800ca8a:	33a4      	adds	r3, #164	@ 0xa4
 800ca8c:	9007      	str	r0, [sp, #28]
 800ca8e:	201d      	movs	r0, #29
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	32ae      	adds	r2, #174	@ 0xae
 800ca94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca96:	ab06      	add	r3, sp, #24
 800ca98:	18c0      	adds	r0, r0, r3
 800ca9a:	9b07      	ldr	r3, [sp, #28]
 800ca9c:	8812      	ldrh	r2, [r2, #0]
 800ca9e:	77c3      	strb	r3, [r0, #31]
     iBlockParam->FWT    = apduParam.FWT;
 800caa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 800caa2:	1bf6      	subs	r6, r6, r7
     iBlockParam->FWT    = apduParam.FWT;
 800caa4:	6163      	str	r3, [r4, #20]
     iBlockParam->dFWT   = apduParam.dFWT;
 800caa6:	4663      	mov	r3, ip
     iBlockParam->FSx    = apduParam.FSx;
 800caa8:	83e1      	strh	r1, [r4, #30]
     iBlockParam->ourFSx = apduParam.ourFSx;
 800caaa:	83a2      	strh	r2, [r4, #28]
     iBlockParam->dFWT   = apduParam.dFWT;
 800caac:	61a3      	str	r3, [r4, #24]
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 800caae:	f7ff fb5b 	bl	800c168 <rfalIsoDepGetMaxInfLen>
 800cab2:	4286      	cmp	r6, r0
 800cab4:	dd25      	ble.n	800cb02 <rfalIsoDepGetApduTransceiveStatus+0xda>
         iBlockParam->isTxChaining = true;
 800cab6:	2301      	movs	r3, #1
 800cab8:	71a3      	strb	r3, [r4, #6]
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 800caba:	f7ff fb55 	bl	800c168 <rfalIsoDepGetMaxInfLen>
 800cabe:	0006      	movs	r6, r0
     iBlockParam->txBuf        = (rfalIsoDepBufFormat*)apduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800cac0:	9b08      	ldr	r3, [sp, #32]
 800cac2:	930d      	str	r3, [sp, #52]	@ 0x34
     iBlockParam->rxBuf        = apduParam.tmpBuf;                        /* Simply using the apdu buffer is not possible because of current ACK handling */
 800cac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cac6:	60a3      	str	r3, [r4, #8]
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 800cac8:	4b2a      	ldr	r3, [pc, #168]	@ (800cb74 <rfalIsoDepGetApduTransceiveStatus+0x14c>)
 800caca:	6123      	str	r3, [r4, #16]
     iBlockParam->rxLen        = apduParam.rxLen;
 800cacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cace:	60e3      	str	r3, [r4, #12]
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 800cad0:	2e00      	cmp	r6, #0
 800cad2:	d006      	beq.n	800cae2 <rfalIsoDepGetApduTransceiveStatus+0xba>
                    RFAL_MEMCPY( gIsoDep.APDUParam.txBuf->apdu, &gIsoDep.APDUParam.txBuf->apdu[gIsoDep.APDUTxPos], txRxParam.txBufLen );
 800cad4:	9b08      	ldr	r3, [sp, #32]
 800cad6:	3703      	adds	r7, #3
 800cad8:	0032      	movs	r2, r6
 800cada:	1cd8      	adds	r0, r3, #3
 800cadc:	19d9      	adds	r1, r3, r7
 800cade:	f006 fc1d 	bl	801331c <memcpy>
                RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartTransceive( txRxParam ) );
 800cae2:	466a      	mov	r2, sp
 800cae4:	80a6      	strh	r6, [r4, #4]
 800cae6:	ab11      	add	r3, sp, #68	@ 0x44
 800cae8:	cb23      	ldmia	r3!, {r0, r1, r5}
 800caea:	c223      	stmia	r2!, {r0, r1, r5}
 800caec:	cb03      	ldmia	r3!, {r0, r1}
 800caee:	c203      	stmia	r2!, {r0, r1}
 800caf0:	3404      	adds	r4, #4
 800caf2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800caf4:	cc0e      	ldmia	r4!, {r1, r2, r3}
 800caf6:	f7ff fb4d 	bl	800c194 <rfalIsoDepStartTransceive>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d19d      	bne.n	800ca3a <rfalIsoDepGetApduTransceiveStatus+0x12>
                return RFAL_ERR_BUSY;
 800cafe:	2002      	movs	r0, #2
 800cb00:	e79b      	b.n	800ca3a <rfalIsoDepGetApduTransceiveStatus+0x12>
         iBlockParam->isTxChaining = false;
 800cb02:	71a5      	strb	r5, [r4, #6]
         iBlockParam->txBufLen     = (apduParam.txBufLen - txPos);
 800cb04:	b2b6      	uxth	r6, r6
 800cb06:	e7db      	b.n	800cac0 <rfalIsoDepGetApduTransceiveStatus+0x98>
            if( gIsoDep.APDUParam.rxLen == NULL )
 800cb08:	4f1b      	ldr	r7, [pc, #108]	@ (800cb78 <rfalIsoDepGetApduTransceiveStatus+0x150>)
 800cb0a:	4c19      	ldr	r4, [pc, #100]	@ (800cb70 <rfalIsoDepGetApduTransceiveStatus+0x148>)
 800cb0c:	6838      	ldr	r0, [r7, #0]
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d104      	bne.n	800cb1c <rfalIsoDepGetApduTransceiveStatus+0xf4>
                if( ret == RFAL_ERR_AGAIN  )
 800cb12:	2d0d      	cmp	r5, #13
 800cb14:	d000      	beq.n	800cb18 <rfalIsoDepGetApduTransceiveStatus+0xf0>
 800cb16:	e790      	b.n	800ca3a <rfalIsoDepGetApduTransceiveStatus+0x12>
                    return RFAL_ERR_NOTSUPP;
 800cb18:	3018      	adds	r0, #24
 800cb1a:	e78e      	b.n	800ca3a <rfalIsoDepGetApduTransceiveStatus+0x12>
                if( (gIsoDep.APDURxPos + (*gIsoDep.APDUParam.rxLen)) > (uint16_t)RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 800cb1c:	0026      	movs	r6, r4
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 800cb1e:	8802      	ldrh	r2, [r0, #0]
                if( (gIsoDep.APDURxPos + (*gIsoDep.APDUParam.rxLen)) > (uint16_t)RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 800cb20:	36b6      	adds	r6, #182	@ 0xb6
 800cb22:	8833      	ldrh	r3, [r6, #0]
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 800cb24:	2a00      	cmp	r2, #0
 800cb26:	d017      	beq.n	800cb58 <rfalIsoDepGetApduTransceiveStatus+0x130>
                if( (gIsoDep.APDURxPos + (*gIsoDep.APDUParam.rxLen)) > (uint16_t)RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 800cb28:	2080      	movs	r0, #128	@ 0x80
 800cb2a:	0080      	lsls	r0, r0, #2
 800cb2c:	4684      	mov	ip, r0
 800cb2e:	1899      	adds	r1, r3, r2
                    return RFAL_ERR_NOMEM;
 800cb30:	2001      	movs	r0, #1
                if( (gIsoDep.APDURxPos + (*gIsoDep.APDUParam.rxLen)) > (uint16_t)RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 800cb32:	4561      	cmp	r1, ip
 800cb34:	dd00      	ble.n	800cb38 <rfalIsoDepGetApduTransceiveStatus+0x110>
 800cb36:	e780      	b.n	800ca3a <rfalIsoDepGetApduTransceiveStatus+0x12>
                RFAL_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 800cb38:	0021      	movs	r1, r4
 800cb3a:	3198      	adds	r1, #152	@ 0x98
 800cb3c:	6808      	ldr	r0, [r1, #0]
 800cb3e:	3303      	adds	r3, #3
 800cb40:	18c0      	adds	r0, r0, r3
 800cb42:	0023      	movs	r3, r4
 800cb44:	33a0      	adds	r3, #160	@ 0xa0
 800cb46:	6819      	ldr	r1, [r3, #0]
 800cb48:	3103      	adds	r1, #3
 800cb4a:	f006 fbe7 	bl	801331c <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	8832      	ldrh	r2, [r6, #0]
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	189b      	adds	r3, r3, r2
 800cb56:	8033      	strh	r3, [r6, #0]
            *gIsoDep.APDUParam.rxLen = gIsoDep.APDURxPos;
 800cb58:	0023      	movs	r3, r4
 800cb5a:	349c      	adds	r4, #156	@ 0x9c
 800cb5c:	33b6      	adds	r3, #182	@ 0xb6
 800cb5e:	881a      	ldrh	r2, [r3, #0]
 800cb60:	6823      	ldr	r3, [r4, #0]
            return ((ret == RFAL_ERR_AGAIN) ? RFAL_ERR_BUSY : RFAL_ERR_NONE);
 800cb62:	3d0d      	subs	r5, #13
            *gIsoDep.APDUParam.rxLen = gIsoDep.APDURxPos;
 800cb64:	801a      	strh	r2, [r3, #0]
            return ((ret == RFAL_ERR_AGAIN) ? RFAL_ERR_BUSY : RFAL_ERR_NONE);
 800cb66:	426b      	negs	r3, r5
 800cb68:	415d      	adcs	r5, r3
 800cb6a:	0068      	lsls	r0, r5, #1
 800cb6c:	e765      	b.n	800ca3a <rfalIsoDepGetApduTransceiveStatus+0x12>
 800cb6e:	46c0      	nop			@ (mov r8, r8)
 800cb70:	20001a48 	.word	0x20001a48
 800cb74:	20001b00 	.word	0x20001b00
 800cb78:	20001ae4 	.word	0x20001ae4

0800cb7c <rfalNfcDeactivation>:
 * \return  RFAL_ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 800cb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Suppress warning when specific RFAL features have been disabled */
    RFAL_NO_WARNING( ret );
    
    
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 800cb7e:	4c3a      	ldr	r4, [pc, #232]	@ (800cc68 <rfalNfcDeactivation+0xec>)
 800cb80:	68e3      	ldr	r3, [r4, #12]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d118      	bne.n	800cbb8 <rfalNfcDeactivation+0x3c>
    aux = false;
 800cb86:	2200      	movs	r2, #0
            }
        }
    }
    
    /* If deactivation type is only to Sleep, mark it and keep Field On  */
    if( (gNfcDev.deactType == RFAL_NFC_DEACTIVATE_SLEEP) && (gNfcDev.activeDev != NULL) && (aux) )
 800cb88:	4b38      	ldr	r3, [pc, #224]	@ (800cc6c <rfalNfcDeactivation+0xf0>)
 800cb8a:	4d39      	ldr	r5, [pc, #228]	@ (800cc70 <rfalNfcDeactivation+0xf4>)
 800cb8c:	5ce1      	ldrb	r1, [r4, r3]
 800cb8e:	2901      	cmp	r1, #1
 800cb90:	d13d      	bne.n	800cc0e <rfalNfcDeactivation+0x92>
 800cb92:	68e3      	ldr	r3, [r4, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d03a      	beq.n	800cc0e <rfalNfcDeactivation+0x92>
 800cb98:	2a00      	cmp	r2, #0
 800cb9a:	d038      	beq.n	800cc0e <rfalNfcDeactivation+0x92>
    {
        gNfcDev.isOperOngoing = false;
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	4a35      	ldr	r2, [pc, #212]	@ (800cc74 <rfalNfcDeactivation+0xf8>)
 800cba0:	54a0      	strb	r0, [r4, r2]
        
        
        if( gNfcDev.activeDev->type == RFAL_NFC_LISTEN_TYPE_NFCA )
 800cba2:	781a      	ldrb	r2, [r3, #0]
 800cba4:	4282      	cmp	r2, r0
 800cba6:	d12e      	bne.n	800cc06 <rfalNfcDeactivation+0x8a>
        {
            gNfcDev.activeDev->dev.nfca.isSleep = true;
 800cba8:	7599      	strb	r1, [r3, #22]
    }
    
    gNfcDev.activeDev      = NULL;                                                               /* Clear Active Device info */
    gNfcDev.isDeactivating = false;
    gNfcDev.isTechInit     = false;
    gNfcDev.isFieldOn      = false;
 800cbaa:	23ca      	movs	r3, #202	@ 0xca
    gNfcDev.activeDev      = NULL;                                                               /* Clear Active Device info */
 800cbac:	2000      	movs	r0, #0
    gNfcDev.isFieldOn      = false;
 800cbae:	009b      	lsls	r3, r3, #2
    gNfcDev.activeDev      = NULL;                                                               /* Clear Active Device info */
 800cbb0:	60e0      	str	r0, [r4, #12]
    gNfcDev.isDeactivating = false;
 800cbb2:	5560      	strb	r0, [r4, r5]
    gNfcDev.isFieldOn      = false;
 800cbb4:	52e0      	strh	r0, [r4, r3]
    return RFAL_ERR_NONE;
 800cbb6:	e00a      	b.n	800cbce <rfalNfcDeactivation+0x52>
        if( rfalNfcIsRemDevListener( gNfcDev.activeDev->type ) )                          /* Listen mode no additional deactivation to be performed*/
 800cbb8:	781a      	ldrb	r2, [r3, #0]
 800cbba:	2a05      	cmp	r2, #5
 800cbbc:	d8e3      	bhi.n	800cb86 <rfalNfcDeactivation+0xa>
            switch( gNfcDev.activeDev->rfInterface )
 800cbbe:	7f5d      	ldrb	r5, [r3, #29]
 800cbc0:	2d01      	cmp	r5, #1
 800cbc2:	d005      	beq.n	800cbd0 <rfalNfcDeactivation+0x54>
 800cbc4:	2d02      	cmp	r5, #2
 800cbc6:	d016      	beq.n	800cbf6 <rfalNfcDeactivation+0x7a>
 800cbc8:	2005      	movs	r0, #5
 800cbca:	2d00      	cmp	r5, #0
 800cbcc:	d0db      	beq.n	800cb86 <rfalNfcDeactivation+0xa>
}
 800cbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if( !gNfcDev.isOperOngoing )
 800cbd0:	4e28      	ldr	r6, [pc, #160]	@ (800cc74 <rfalNfcDeactivation+0xf8>)
 800cbd2:	5da3      	ldrb	r3, [r4, r6]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d106      	bne.n	800cbe6 <rfalNfcDeactivation+0x6a>
                        ret = rfalIsoDepStartDeselect();
 800cbd8:	f7ff f8e2 	bl	800bda0 <rfalIsoDepStartDeselect>
                        if( ret == RFAL_ERR_NONE )                                        /* Send a Deselect to device */
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d1d2      	bne.n	800cb86 <rfalNfcDeactivation+0xa>
                            gNfcDev.isOperOngoing = true;
 800cbe0:	55a5      	strb	r5, [r4, r6]
                            return RFAL_ERR_BUSY;
 800cbe2:	2002      	movs	r0, #2
 800cbe4:	e7f3      	b.n	800cbce <rfalNfcDeactivation+0x52>
                        RFAL_EXIT_ON_BUSY( ret, rfalIsoDepGetDeselectStatus() );          /* Check if deselection has finished */
 800cbe6:	f7ff f8f3 	bl	800bdd0 <rfalIsoDepGetDeselectStatus>
 800cbea:	2802      	cmp	r0, #2
 800cbec:	d0f9      	beq.n	800cbe2 <rfalNfcDeactivation+0x66>
                        gNfcDev.isOperOngoing = false;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	55a3      	strb	r3, [r4, r6]
                        aux                   = true;                                     /* Mark device as deselected */
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	e7c8      	b.n	800cb88 <rfalNfcDeactivation+0xc>
                    switch ( gNfcDev.activeDev->type )
 800cbf6:	2a05      	cmp	r2, #5
 800cbf8:	d102      	bne.n	800cc00 <rfalNfcDeactivation+0x84>
                            rfalNfcDepRLS();                                              /* Send a Release to device */
 800cbfa:	f001 fd5f 	bl	800e6bc <rfalNfcDepRLS>
                            break;
 800cbfe:	e7c2      	b.n	800cb86 <rfalNfcDeactivation+0xa>
                            rfalNfcDepDSL();                                              /* Send a Deselect to device */
 800cc00:	f001 fd2c 	bl	800e65c <rfalNfcDepDSL>
                            break;
 800cc04:	e7f5      	b.n	800cbf2 <rfalNfcDeactivation+0x76>
        else if( gNfcDev.activeDev->type == RFAL_NFC_LISTEN_TYPE_NFCB )
 800cc06:	2a01      	cmp	r2, #1
 800cc08:	d1cf      	bne.n	800cbaa <rfalNfcDeactivation+0x2e>
            gNfcDev.activeDev->dev.nfcb.isSleep = true;
 800cc0a:	73da      	strb	r2, [r3, #15]
 800cc0c:	e7cd      	b.n	800cbaa <rfalNfcDeactivation+0x2e>
        if( !gNfcDev.isDeactivating )                                                            /* Check if the Field deactivation has not started */
 800cc0e:	5d63      	ldrb	r3, [r4, r5]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d120      	bne.n	800cc56 <rfalNfcDeactivation+0xda>
            rfalWakeUpModeStop();
 800cc14:	f7f9 fb8a 	bl	800632c <rfalWakeUpModeStop>
            rfalListenStop();
 800cc18:	f7f7 febe 	bl	8004998 <rfalListenStop>
            if( (gNfcDev.isFieldOn) && rfalNfcHasPollerTechs() )                                 /* Check if configured to Poll modes and the Field is On */
 800cc1c:	23ca      	movs	r3, #202	@ 0xca
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	5ce3      	ldrb	r3, [r4, r3]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d0c1      	beq.n	800cbaa <rfalNfcDeactivation+0x2e>
 800cc26:	8a63      	ldrh	r3, [r4, #18]
 800cc28:	065b      	lsls	r3, r3, #25
 800cc2a:	d0be      	beq.n	800cbaa <rfalNfcDeactivation+0x2e>
                aux = platformTimerIsExpired(gNfcDev.discTmr);                                   /* Check total duration timer is already expired */
 800cc2c:	26c7      	movs	r6, #199	@ 0xc7
 800cc2e:	00b6      	lsls	r6, r6, #2
 800cc30:	59a0      	ldr	r0, [r4, r6]
 800cc32:	f7fa f937 	bl	8006ea4 <timerIsExpired>
 800cc36:	0007      	movs	r7, r0
                if( ((platformGetSysTick() + RFAL_NFC_T_FIELD_OFF) > gNfcDev.discTmr) || (aux) ) /* In case Total Duration has expired or expring in less than tFIELD_OFF */
 800cc38:	f7f5 f814 	bl	8001c64 <BSP_GetTick>
 800cc3c:	59a3      	ldr	r3, [r4, r6]
 800cc3e:	3005      	adds	r0, #5
 800cc40:	4298      	cmp	r0, r3
 800cc42:	d801      	bhi.n	800cc48 <rfalNfcDeactivation+0xcc>
 800cc44:	2f00      	cmp	r7, #0
 800cc46:	d003      	beq.n	800cc50 <rfalNfcDeactivation+0xd4>
                    gNfcDev.discTmr = (uint32_t)platformTimerCreate( RFAL_NFC_T_FIELD_OFF );     /* Ensure that Operating Field is in Off condition at least tFIELD_OFF */
 800cc48:	2005      	movs	r0, #5
 800cc4a:	f7fa f925 	bl	8006e98 <timerCalculateTimer>
 800cc4e:	51a0      	str	r0, [r4, r6]
                gNfcDev.isDeactivating = true;
 800cc50:	2301      	movs	r3, #1
 800cc52:	5563      	strb	r3, [r4, r5]
                return RFAL_ERR_BUSY;
 800cc54:	e7c5      	b.n	800cbe2 <rfalNfcDeactivation+0x66>
            if( !platformTimerIsExpired(gNfcDev.discTmr) )
 800cc56:	23c7      	movs	r3, #199	@ 0xc7
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	58e0      	ldr	r0, [r4, r3]
 800cc5c:	f7fa f922 	bl	8006ea4 <timerIsExpired>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	d1a2      	bne.n	800cbaa <rfalNfcDeactivation+0x2e>
 800cc64:	e7bd      	b.n	800cbe2 <rfalNfcDeactivation+0x66>
 800cc66:	46c0      	nop			@ (mov r8, r8)
 800cc68:	20001c24 	.word	0x20001c24
 800cc6c:	00000322 	.word	0x00000322
 800cc70:	0000032b 	.word	0x0000032b
 800cc74:	0000032a 	.word	0x0000032a

0800cc78 <rfalNfcNfcDepActivate>:
{
 800cc78:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( rfalNfcIsRemDevListener( device->type ) )
 800cc7a:	7805      	ldrb	r5, [r0, #0]
{
 800cc7c:	b09d      	sub	sp, #116	@ 0x74
 800cc7e:	0004      	movs	r4, r0
 800cc80:	000e      	movs	r6, r1
 800cc82:	9204      	str	r2, [sp, #16]
 800cc84:	9305      	str	r3, [sp, #20]
    if( rfalNfcIsRemDevListener( device->type ) )
 800cc86:	2d05      	cmp	r5, #5
 800cc88:	d824      	bhi.n	800ccd4 <rfalNfcNfcDepActivate+0x5c>
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 800cc8a:	2d02      	cmp	r5, #2
 800cc8c:	d11f      	bne.n	800ccce <rfalNfcNfcDepActivate+0x56>
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 800cc8e:	2308      	movs	r3, #8
 800cc90:	1cc2      	adds	r2, r0, #3
 800cc92:	ad0b      	add	r5, sp, #44	@ 0x2c
 800cc94:	920c      	str	r2, [sp, #48]	@ 0x30
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 800cc96:	722b      	strb	r3, [r5, #8]
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	726b      	strb	r3, [r5, #9]
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 800cc9c:	816b      	strh	r3, [r5, #10]
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800cc9e:	732b      	strb	r3, [r5, #12]
        initParam.LR        = gNfcDev.disc.nfcDepLR;
 800cca0:	4b32      	ldr	r3, [pc, #200]	@ (800cd6c <rfalNfcNfcDepActivate+0xf4>)
 800cca2:	4f33      	ldr	r7, [pc, #204]	@ (800cd70 <rfalNfcNfcDepActivate+0xf8>)
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	736b      	strb	r3, [r5, #13]
        initParam.GB        = gNfcDev.disc.GB;
 800cca8:	4b32      	ldr	r3, [pc, #200]	@ (800cd74 <rfalNfcNfcDepActivate+0xfc>)
 800ccaa:	930f      	str	r3, [sp, #60]	@ 0x3c
        initParam.GBLen     = gNfcDev.disc.GBLen;
 800ccac:	003b      	movs	r3, r7
 800ccae:	3355      	adds	r3, #85	@ 0x55
 800ccb0:	781b      	ldrb	r3, [r3, #0]
        initParam.commMode  = commMode;
 800ccb2:	702e      	strb	r6, [r5, #0]
        initParam.GBLen     = gNfcDev.disc.GBLen;
 800ccb4:	752b      	strb	r3, [r5, #20]
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800ccb6:	230e      	movs	r3, #14
 800ccb8:	706b      	strb	r3, [r5, #1]
        rfalNfcDepInitialize();
 800ccba:	f001 fbdd 	bl	800e478 <rfalNfcDepInitialize>
        return rfalNfcDepInitiatorHandleActivation( &initParam, gNfcDev.disc.maxBR, &device->proto.nfcDep );
 800ccbe:	0022      	movs	r2, r4
 800ccc0:	0028      	movs	r0, r5
 800ccc2:	7e79      	ldrb	r1, [r7, #25]
 800ccc4:	3220      	adds	r2, #32
 800ccc6:	f001 fd29 	bl	800e71c <rfalNfcDepInitiatorHandleActivation>
}
 800ccca:	b01d      	add	sp, #116	@ 0x74
 800cccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccce:	230a      	movs	r3, #10
 800ccd0:	4a29      	ldr	r2, [pc, #164]	@ (800cd78 <rfalNfcNfcDepActivate+0x100>)
 800ccd2:	e7de      	b.n	800cc92 <rfalNfcNfcDepActivate+0x1a>
    else if( rfalNfcIsRemDevPoller( device->type ) )
 800ccd4:	002b      	movs	r3, r5
 800ccd6:	3b0a      	subs	r3, #10
        return RFAL_ERR_INTERNAL;
 800ccd8:	200c      	movs	r0, #12
    else if( rfalNfcIsRemDevPoller( device->type ) )
 800ccda:	2b05      	cmp	r3, #5
 800ccdc:	d8f5      	bhi.n	800ccca <rfalNfcNfcDepActivate+0x52>
        RFAL_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 800ccde:	ab02      	add	r3, sp, #8
 800cce0:	3019      	adds	r0, #25
 800cce2:	220a      	movs	r2, #10
 800cce4:	4924      	ldr	r1, [pc, #144]	@ (800cd78 <rfalNfcNfcDepActivate+0x100>)
 800cce6:	18c0      	adds	r0, r0, r3
 800cce8:	4f21      	ldr	r7, [pc, #132]	@ (800cd70 <rfalNfcNfcDepActivate+0xf8>)
 800ccea:	f006 fb17 	bl	801331c <memcpy>
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800ccee:	2300      	movs	r3, #0
        RFAL_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 800ccf0:	ac0b      	add	r4, sp, #44	@ 0x2c
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800ccf2:	72e3      	strb	r3, [r4, #11]
        targetParam.brt       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800ccf4:	23a0      	movs	r3, #160	@ 0xa0
 800ccf6:	011b      	lsls	r3, r3, #4
 800ccf8:	81a3      	strh	r3, [r4, #12]
        targetParam.ppt       = rfalNfcDepLR2PP(gNfcDev.disc.nfcDepLR);
 800ccfa:	003b      	movs	r3, r7
 800ccfc:	2130      	movs	r1, #48	@ 0x30
 800ccfe:	003a      	movs	r2, r7
 800cd00:	3371      	adds	r3, #113	@ 0x71
 800cd02:	781b      	ldrb	r3, [r3, #0]
        if( gNfcDev.disc.GBLen >= RFAL_NFCDEP_GB_MAX_LEN )
 800cd04:	3255      	adds	r2, #85	@ 0x55
        targetParam.ppt       = rfalNfcDepLR2PP(gNfcDev.disc.nfcDepLR);
 800cd06:	011b      	lsls	r3, r3, #4
 800cd08:	400b      	ands	r3, r1
 800cd0a:	73a3      	strb	r3, [r4, #14]
        if( gNfcDev.disc.GBLen >= RFAL_NFCDEP_GB_MAX_LEN )
 800cd0c:	7812      	ldrb	r2, [r2, #0]
            return RFAL_ERR_PARAM;
 800cd0e:	2007      	movs	r0, #7
        if( gNfcDev.disc.GBLen >= RFAL_NFCDEP_GB_MAX_LEN )
 800cd10:	2a2f      	cmp	r2, #47	@ 0x2f
 800cd12:	d8da      	bhi.n	800ccca <rfalNfcNfcDepActivate+0x52>
        targetParam.GBtLen    = gNfcDev.disc.GBLen;
 800cd14:	2363      	movs	r3, #99	@ 0x63
 800cd16:	a902      	add	r1, sp, #8
 800cd18:	185b      	adds	r3, r3, r1
 800cd1a:	701a      	strb	r2, [r3, #0]
        if( gNfcDev.disc.GBLen > 0U )
 800cd1c:	2a00      	cmp	r2, #0
 800cd1e:	d005      	beq.n	800cd2c <rfalNfcNfcDepActivate+0xb4>
            RFAL_MEMCPY(targetParam.GBt, gNfcDev.disc.GB, gNfcDev.disc.GBLen);
 800cd20:	302c      	adds	r0, #44	@ 0x2c
 800cd22:	ab02      	add	r3, sp, #8
 800cd24:	4913      	ldr	r1, [pc, #76]	@ (800cd74 <rfalNfcNfcDepActivate+0xfc>)
 800cd26:	18c0      	adds	r0, r0, r3
 800cd28:	f006 faf8 	bl	801331c <memcpy>
        targetParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800cd2c:	220e      	movs	r2, #14
 800cd2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cd30:	701a      	strb	r2, [r3, #0]
        actvParams.rxBuf        = (rfalNfcDepBufFormat*) &gNfcDev.rxBuf.nfcDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800cd32:	4b12      	ldr	r3, [pc, #72]	@ (800cd7c <rfalNfcNfcDepActivate+0x104>)
        targetParam.commMode  = commMode;
 800cd34:	7026      	strb	r6, [r4, #0]
        actvParams.rxBuf        = (rfalNfcDepBufFormat*) &gNfcDev.rxBuf.nfcDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800cd36:	9307      	str	r3, [sp, #28]
        actvParams.rxLen        = &gNfcDev.rxLen;
 800cd38:	4b11      	ldr	r3, [pc, #68]	@ (800cd80 <rfalNfcNfcDepActivate+0x108>)
 800cd3a:	9308      	str	r3, [sp, #32]
        actvParams.isRxChaining = &gNfcDev.isRxChaining;
 800cd3c:	4b11      	ldr	r3, [pc, #68]	@ (800cd84 <rfalNfcNfcDepActivate+0x10c>)
 800cd3e:	9309      	str	r3, [sp, #36]	@ 0x24
        actvParams.nfcDepDev    = &gNfcDev.devList->proto.nfcDep;
 800cd40:	4b11      	ldr	r3, [pc, #68]	@ (800cd88 <rfalNfcNfcDepActivate+0x110>)
 800cd42:	930a      	str	r3, [sp, #40]	@ 0x28
        rfalListenSetState( ((device->type == RFAL_NFC_POLL_TYPE_NFCA) ? RFAL_LM_STATE_TARGET_A : RFAL_LM_STATE_TARGET_F) );
 800cd44:	2d0a      	cmp	r5, #10
 800cd46:	d000      	beq.n	800cd4a <rfalNfcNfcDepActivate+0xd2>
 800cd48:	250b      	movs	r5, #11
 800cd4a:	0028      	movs	r0, r5
 800cd4c:	f7f7 feb4 	bl	8004ab8 <rfalListenSetState>
        rfalNfcDepInitialize();
 800cd50:	f001 fb92 	bl	800e478 <rfalNfcDepInitialize>
        return rfalNfcDepListenStartActivation( &targetParam, atrReq, atrReqLen, actvParams );
 800cd54:	466a      	mov	r2, sp
 800cd56:	ab08      	add	r3, sp, #32
 800cd58:	cb23      	ldmia	r3!, {r0, r1, r5}
 800cd5a:	c223      	stmia	r2!, {r0, r1, r5}
 800cd5c:	0020      	movs	r0, r4
 800cd5e:	9b07      	ldr	r3, [sp, #28]
 800cd60:	9a05      	ldr	r2, [sp, #20]
 800cd62:	9904      	ldr	r1, [sp, #16]
 800cd64:	f001 fd6a 	bl	800e83c <rfalNfcDepListenStartActivation>
 800cd68:	e7af      	b.n	800ccca <rfalNfcNfcDepActivate+0x52>
 800cd6a:	46c0      	nop			@ (mov r8, r8)
 800cd6c:	20001c95 	.word	0x20001c95
 800cd70:	20001c24 	.word	0x20001c24
 800cd74:	20001c49 	.word	0x20001c49
 800cd78:	20001c3f 	.word	0x20001c3f
 800cd7c:	20002165 	.word	0x20002165
 800cd80:	2000236a 	.word	0x2000236a
 800cd84:	20001f47 	.word	0x20001f47
 800cd88:	20001d04 	.word	0x20001d04

0800cd8c <rfalNfcInitialize>:
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 800cd8c:	2300      	movs	r3, #0
{
 800cd8e:	b570      	push	{r4, r5, r6, lr}
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 800cd90:	4d08      	ldr	r5, [pc, #32]	@ (800cdb4 <rfalNfcInitialize+0x28>)
 800cd92:	702b      	strb	r3, [r5, #0]
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 800cd94:	f7fe f9b4 	bl	800b100 <rfalAnalogConfigInitialize>
    RFAL_EXIT_ON_ERR( err, rfalInitialize() ); /* Initialize RFAL */
 800cd98:	f7f7 f914 	bl	8003fc4 <rfalInitialize>
 800cd9c:	1e04      	subs	r4, r0, #0
 800cd9e:	d106      	bne.n	800cdae <rfalNfcInitialize+0x22>
    RFAL_MEMSET( &gNfcDev, 0x00, sizeof(gNfcDev) );
 800cda0:	0001      	movs	r1, r0
 800cda2:	4a05      	ldr	r2, [pc, #20]	@ (800cdb8 <rfalNfcInitialize+0x2c>)
 800cda4:	0028      	movs	r0, r5
 800cda6:	f006 fa85 	bl	80132b4 <memset>
    gNfcDev.state = RFAL_NFC_STATE_IDLE;       /* Go to initialized */
 800cdaa:	2301      	movs	r3, #1
 800cdac:	702b      	strb	r3, [r5, #0]
}
 800cdae:	0020      	movs	r0, r4
 800cdb0:	bd70      	pop	{r4, r5, r6, pc}
 800cdb2:	46c0      	nop			@ (mov r8, r8)
 800cdb4:	20001c24 	.word	0x20001c24
 800cdb8:	0000084c 	.word	0x0000084c

0800cdbc <rfalNfcDiscover>:
{
 800cdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 800cdbe:	4d28      	ldr	r5, [pc, #160]	@ (800ce60 <rfalNfcDiscover+0xa4>)
{
 800cdc0:	0001      	movs	r1, r0
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 800cdc2:	782b      	ldrb	r3, [r5, #0]
        return RFAL_ERR_WRONG_STATE;
 800cdc4:	2421      	movs	r4, #33	@ 0x21
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d145      	bne.n	800ce56 <rfalNfcDiscover+0x9a>
        return RFAL_ERR_PARAM;
 800cdca:	3c1a      	subs	r4, #26
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                 || 
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d042      	beq.n	800ce56 <rfalNfcDiscover+0x9a>
 800cdd0:	7a03      	ldrb	r3, [r0, #8]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	2b04      	cmp	r3, #4
 800cdd6:	d83e      	bhi.n	800ce56 <rfalNfcDiscover+0x9a>
        ( (disParams->maxBR > RFAL_BR_1695) && (disParams->maxBR != RFAL_BR_KEEP) )                                                                        ||
 800cdd8:	7a43      	ldrb	r3, [r0, #9]
 800cdda:	3b05      	subs	r3, #5
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                 || 
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	2bf9      	cmp	r3, #249	@ 0xf9
 800cde0:	d939      	bls.n	800ce56 <rfalNfcDiscover+0x9a>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )         ||
 800cde2:	8843      	ldrh	r3, [r0, #2]
        ( (disParams->maxBR > RFAL_BR_1695) && (disParams->maxBR != RFAL_BR_KEEP) )                                                                        ||
 800cde4:	075a      	lsls	r2, r3, #29
 800cde6:	d503      	bpl.n	800cdf0 <rfalNfcDiscover+0x34>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )         ||
 800cde8:	7a82      	ldrb	r2, [r0, #10]
 800cdea:	3a01      	subs	r2, #1
 800cdec:	2a01      	cmp	r2, #1
 800cdee:	d832      	bhi.n	800ce56 <rfalNfcDiscover+0x9a>
 800cdf0:	06da      	lsls	r2, r3, #27
 800cdf2:	d505      	bpl.n	800ce00 <rfalNfcDiscover+0x44>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN) )  )
 800cdf4:	000a      	movs	r2, r1
 800cdf6:	3246      	adds	r2, #70	@ 0x46
 800cdf8:	7812      	ldrb	r2, [r2, #0]
        return RFAL_ERR_PARAM;
 800cdfa:	2407      	movs	r4, #7
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN) )  )
 800cdfc:	2a02      	cmp	r2, #2
 800cdfe:	d82a      	bhi.n	800ce56 <rfalNfcDiscover+0x9a>
 800ce00:	000a      	movs	r2, r1
 800ce02:	3245      	adds	r2, #69	@ 0x45
 800ce04:	7812      	ldrb	r2, [r2, #0]
        return RFAL_ERR_PARAM;
 800ce06:	2407      	movs	r4, #7
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN) )  )
 800ce08:	2a30      	cmp	r2, #48	@ 0x30
 800ce0a:	d824      	bhi.n	800ce56 <rfalNfcDiscover+0x9a>
    if( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_A) != 0U)      && (!((bool)RFAL_SUPPORT_MODE_POLL_NFCA)))         ||
 800ce0c:	2680      	movs	r6, #128	@ 0x80
 800ce0e:	001c      	movs	r4, r3
 800ce10:	01b6      	lsls	r6, r6, #6
 800ce12:	4034      	ands	r4, r6
 800ce14:	4233      	tst	r3, r6
 800ce16:	d120      	bne.n	800ce5a <rfalNfcDiscover+0x9e>
    gNfcDev.devCnt          = 0;
 800ce18:	23c6      	movs	r3, #198	@ 0xc6
    gNfcDev.deactType       = RFAL_NFC_DEACTIVATE_DISCOVERY;
 800ce1a:	2702      	movs	r7, #2
    gNfcDev.disc            = *disParams;
 800ce1c:	0028      	movs	r0, r5
    gNfcDev.devCnt          = 0;
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	54ec      	strb	r4, [r5, r3]
    gNfcDev.deactType       = RFAL_NFC_DEACTIVATE_DISCOVERY;
 800ce22:	4b10      	ldr	r3, [pc, #64]	@ (800ce64 <rfalNfcDiscover+0xa8>)
    gNfcDev.disc            = *disParams;
 800ce24:	22b0      	movs	r2, #176	@ 0xb0
    gNfcDev.deactType       = RFAL_NFC_DEACTIVATE_DISCOVERY;
 800ce26:	54ef      	strb	r7, [r5, r3]
    gNfcDev.isFieldOn       = false;
 800ce28:	3306      	adds	r3, #6
 800ce2a:	52ec      	strh	r4, [r5, r3]
    gNfcDev.isDeactivating  = false;
 800ce2c:	4b0e      	ldr	r3, [pc, #56]	@ (800ce68 <rfalNfcDiscover+0xac>)
    gNfcDev.disc            = *disParams;
 800ce2e:	3010      	adds	r0, #16
    gNfcDev.isDeactivating  = false;
 800ce30:	54ec      	strb	r4, [r5, r3]
    gNfcDev.activeDev       = NULL;
 800ce32:	60ec      	str	r4, [r5, #12]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 800ce34:	806c      	strh	r4, [r5, #2]
    gNfcDev.techDctCnt      = 0;
 800ce36:	80ec      	strh	r4, [r5, #6]
    gNfcDev.disc            = *disParams;
 800ce38:	f006 fa70 	bl	801331c <memcpy>
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 800ce3c:	8a6b      	ldrh	r3, [r5, #18]
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 800ce3e:	21e0      	movs	r1, #224	@ 0xe0
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 800ce40:	089a      	lsrs	r2, r3, #2
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 800ce42:	b21b      	sxth	r3, r3
 800ce44:	413b      	asrs	r3, r7
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 800ce46:	0149      	lsls	r1, r1, #5
 800ce48:	400a      	ands	r2, r1
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 800ce4a:	4033      	ands	r3, r6
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	22c9      	movs	r2, #201	@ 0xc9
 800ce50:	0092      	lsls	r2, r2, #2
 800ce52:	50ab      	str	r3, [r5, r2]
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 800ce54:	702f      	strb	r7, [r5, #0]
}
 800ce56:	0020      	movs	r0, r4
 800ce58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return RFAL_ERR_NOTSUPP;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
 800ce5a:	2418      	movs	r4, #24
 800ce5c:	e7fb      	b.n	800ce56 <rfalNfcDiscover+0x9a>
 800ce5e:	46c0      	nop			@ (mov r8, r8)
 800ce60:	20001c24 	.word	0x20001c24
 800ce64:	00000322 	.word	0x00000322
 800ce68:	0000032b 	.word	0x0000032b

0800ce6c <rfalNfcDeactivate>:
{
 800ce6c:	b570      	push	{r4, r5, r6, lr}
    if( (gNfcDev.state <= RFAL_NFC_STATE_IDLE) || ((deactType == RFAL_NFC_DEACTIVATE_SLEEP) && ((gNfcDev.state < RFAL_NFC_STATE_ACTIVATED) || (gNfcDev.activeDev == NULL))) )
 800ce6e:	4c15      	ldr	r4, [pc, #84]	@ (800cec4 <rfalNfcDeactivate+0x58>)
{
 800ce70:	0003      	movs	r3, r0
    if( (gNfcDev.state <= RFAL_NFC_STATE_IDLE) || ((deactType == RFAL_NFC_DEACTIVATE_SLEEP) && ((gNfcDev.state < RFAL_NFC_STATE_ACTIVATED) || (gNfcDev.activeDev == NULL))) )
 800ce72:	7822      	ldrb	r2, [r4, #0]
        return RFAL_ERR_WRONG_STATE;
 800ce74:	2021      	movs	r0, #33	@ 0x21
    if( (gNfcDev.state <= RFAL_NFC_STATE_IDLE) || ((deactType == RFAL_NFC_DEACTIVATE_SLEEP) && ((gNfcDev.state < RFAL_NFC_STATE_ACTIVATED) || (gNfcDev.activeDev == NULL))) )
 800ce76:	2a01      	cmp	r2, #1
 800ce78:	d90b      	bls.n	800ce92 <rfalNfcDeactivate+0x26>
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d10a      	bne.n	800ce94 <rfalNfcDeactivate+0x28>
 800ce7e:	2a1d      	cmp	r2, #29
 800ce80:	d907      	bls.n	800ce92 <rfalNfcDeactivate+0x26>
 800ce82:	68e2      	ldr	r2, [r4, #12]
 800ce84:	2a00      	cmp	r2, #0
 800ce86:	d004      	beq.n	800ce92 <rfalNfcDeactivate+0x26>
    if( ( (deactType == RFAL_NFC_DEACTIVATE_SLEEP) && rfalNfcIsRemDevPoller(gNfcDev.activeDev->type) )       || 
 800ce88:	7812      	ldrb	r2, [r2, #0]
        return RFAL_ERR_PARAM;
 800ce8a:	381a      	subs	r0, #26
    if( ( (deactType == RFAL_NFC_DEACTIVATE_SLEEP) && rfalNfcIsRemDevPoller(gNfcDev.activeDev->type) )       || 
 800ce8c:	3a0a      	subs	r2, #10
 800ce8e:	2a05      	cmp	r2, #5
 800ce90:	d806      	bhi.n	800cea0 <rfalNfcDeactivate+0x34>
}
 800ce92:	bd70      	pop	{r4, r5, r6, pc}
    if( ( (deactType == RFAL_NFC_DEACTIVATE_SLEEP) && rfalNfcIsRemDevPoller(gNfcDev.activeDev->type) )       || 
 800ce94:	2b02      	cmp	r3, #2
 800ce96:	d103      	bne.n	800cea0 <rfalNfcDeactivate+0x34>
        ( (deactType == RFAL_NFC_DEACTIVATE_DISCOVERY)  && (gNfcDev.disc.techs2Find == RFAL_NFC_TECH_NONE) )    )
 800ce98:	8a62      	ldrh	r2, [r4, #18]
        return RFAL_ERR_PARAM;
 800ce9a:	2007      	movs	r0, #7
        ( (deactType == RFAL_NFC_DEACTIVATE_DISCOVERY)  && (gNfcDev.disc.techs2Find == RFAL_NFC_TECH_NONE) )    )
 800ce9c:	2a00      	cmp	r2, #0
 800ce9e:	d0f8      	beq.n	800ce92 <rfalNfcDeactivate+0x26>
    gNfcDev.deactType = deactType;
 800cea0:	4a09      	ldr	r2, [pc, #36]	@ (800cec8 <rfalNfcDeactivate+0x5c>)
 800cea2:	54a3      	strb	r3, [r4, r2]
    if( (deactType == RFAL_NFC_DEACTIVATE_DISCOVERY) || (deactType == RFAL_NFC_DEACTIVATE_SLEEP) )
 800cea4:	3b01      	subs	r3, #1
 800cea6:	2222      	movs	r2, #34	@ 0x22
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d907      	bls.n	800cebc <rfalNfcDeactivate+0x50>
        rfalRunBlocking( ret, rfalNfcDeactivation() );
 800ceac:	f7ff fe66 	bl	800cb7c <rfalNfcDeactivation>
 800ceb0:	0005      	movs	r5, r0
 800ceb2:	f7f8 f803 	bl	8004ebc <rfalWorker>
 800ceb6:	2d02      	cmp	r5, #2
 800ceb8:	d0f8      	beq.n	800ceac <rfalNfcDeactivate+0x40>
 800ceba:	2201      	movs	r2, #1
    return RFAL_ERR_NONE;
 800cebc:	2000      	movs	r0, #0
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 800cebe:	7022      	strb	r2, [r4, #0]
 800cec0:	e7e7      	b.n	800ce92 <rfalNfcDeactivate+0x26>
 800cec2:	46c0      	nop			@ (mov r8, r8)
 800cec4:	20001c24 	.word	0x20001c24
 800cec8:	00000322 	.word	0x00000322

0800cecc <rfalNfcSelect>:
    if( gNfcDev.state != RFAL_NFC_STATE_POLL_SELECT )
 800cecc:	4b06      	ldr	r3, [pc, #24]	@ (800cee8 <rfalNfcSelect+0x1c>)
{
 800cece:	0002      	movs	r2, r0
    if( gNfcDev.state != RFAL_NFC_STATE_POLL_SELECT )
 800ced0:	7819      	ldrb	r1, [r3, #0]
        return RFAL_ERR_WRONG_STATE;
 800ced2:	2021      	movs	r0, #33	@ 0x21
    if( gNfcDev.state != RFAL_NFC_STATE_POLL_SELECT )
 800ced4:	290c      	cmp	r1, #12
 800ced6:	d105      	bne.n	800cee4 <rfalNfcSelect+0x18>
    gNfcDev.isTechInit = false;
 800ced8:	2000      	movs	r0, #0
    gNfcDev.selDevIdx  = devIdx;
 800ceda:	725a      	strb	r2, [r3, #9]
    gNfcDev.state      = RFAL_NFC_STATE_POLL_ACTIVATION;
 800cedc:	220d      	movs	r2, #13
    gNfcDev.isTechInit = false;
 800cede:	4903      	ldr	r1, [pc, #12]	@ (800ceec <rfalNfcSelect+0x20>)
    gNfcDev.state      = RFAL_NFC_STATE_POLL_ACTIVATION;
 800cee0:	701a      	strb	r2, [r3, #0]
    gNfcDev.isTechInit = false;
 800cee2:	5458      	strb	r0, [r3, r1]
}
 800cee4:	4770      	bx	lr
 800cee6:	46c0      	nop			@ (mov r8, r8)
 800cee8:	20001c24 	.word	0x20001c24
 800ceec:	00000329 	.word	0x00000329

0800cef0 <rfalNfcGetState>:
    return gNfcDev.state;
 800cef0:	4b01      	ldr	r3, [pc, #4]	@ (800cef8 <rfalNfcGetState+0x8>)
 800cef2:	7818      	ldrb	r0, [r3, #0]
}
 800cef4:	4770      	bx	lr
 800cef6:	46c0      	nop			@ (mov r8, r8)
 800cef8:	20001c24 	.word	0x20001c24

0800cefc <rfalNfcGetDevicesFound>:
    if( gNfcDev.state < RFAL_NFC_STATE_POLL_SELECT )
 800cefc:	4a09      	ldr	r2, [pc, #36]	@ (800cf24 <rfalNfcGetDevicesFound+0x28>)
{
 800cefe:	b510      	push	{r4, lr}
    if( gNfcDev.state < RFAL_NFC_STATE_POLL_SELECT )
 800cf00:	7814      	ldrb	r4, [r2, #0]
{
 800cf02:	0003      	movs	r3, r0
        return RFAL_ERR_WRONG_STATE;
 800cf04:	2021      	movs	r0, #33	@ 0x21
    if( gNfcDev.state < RFAL_NFC_STATE_POLL_SELECT )
 800cf06:	2c0b      	cmp	r4, #11
 800cf08:	d90b      	bls.n	800cf22 <rfalNfcGetDevicesFound+0x26>
        return RFAL_ERR_PARAM;
 800cf0a:	381a      	subs	r0, #26
    if( (devList == NULL) || (devCnt == NULL) )
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d008      	beq.n	800cf22 <rfalNfcGetDevicesFound+0x26>
 800cf10:	2900      	cmp	r1, #0
 800cf12:	d006      	beq.n	800cf22 <rfalNfcGetDevicesFound+0x26>
    *devCnt  = gNfcDev.devCnt;
 800cf14:	20c6      	movs	r0, #198	@ 0xc6
 800cf16:	0080      	lsls	r0, r0, #2
 800cf18:	5c12      	ldrb	r2, [r2, r0]
    return RFAL_ERR_NONE;
 800cf1a:	2000      	movs	r0, #0
    *devCnt  = gNfcDev.devCnt;
 800cf1c:	700a      	strb	r2, [r1, #0]
    *devList = gNfcDev.devList;
 800cf1e:	4a02      	ldr	r2, [pc, #8]	@ (800cf28 <rfalNfcGetDevicesFound+0x2c>)
 800cf20:	601a      	str	r2, [r3, #0]
}
 800cf22:	bd10      	pop	{r4, pc}
 800cf24:	20001c24 	.word	0x20001c24
 800cf28:	20001ce4 	.word	0x20001ce4

0800cf2c <rfalNfcGetActiveDevice>:
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 800cf2c:	4a0a      	ldr	r2, [pc, #40]	@ (800cf58 <rfalNfcGetActiveDevice+0x2c>)
{
 800cf2e:	0003      	movs	r3, r0
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 800cf30:	7811      	ldrb	r1, [r2, #0]
        return RFAL_ERR_WRONG_STATE;
 800cf32:	2021      	movs	r0, #33	@ 0x21
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 800cf34:	291d      	cmp	r1, #29
 800cf36:	d90d      	bls.n	800cf54 <rfalNfcGetActiveDevice+0x28>
        return RFAL_ERR_PARAM;
 800cf38:	381a      	subs	r0, #26
    if( dev == NULL )
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00a      	beq.n	800cf54 <rfalNfcGetActiveDevice+0x28>
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 800cf3e:	21c6      	movs	r1, #198	@ 0xc6
 800cf40:	0089      	lsls	r1, r1, #2
 800cf42:	5c51      	ldrb	r1, [r2, r1]
        return RFAL_ERR_REQUEST;
 800cf44:	3802      	subs	r0, #2
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 800cf46:	2900      	cmp	r1, #0
 800cf48:	d004      	beq.n	800cf54 <rfalNfcGetActiveDevice+0x28>
 800cf4a:	68d2      	ldr	r2, [r2, #12]
 800cf4c:	2a00      	cmp	r2, #0
 800cf4e:	d001      	beq.n	800cf54 <rfalNfcGetActiveDevice+0x28>
    return RFAL_ERR_NONE;
 800cf50:	2000      	movs	r0, #0
    *dev = gNfcDev.activeDev;
 800cf52:	601a      	str	r2, [r3, #0]
}
 800cf54:	4770      	bx	lr
 800cf56:	46c0      	nop			@ (mov r8, r8)
 800cf58:	20001c24 	.word	0x20001c24

0800cf5c <rfalNfcDataExchangeStart>:
{
 800cf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf5e:	001e      	movs	r6, r3
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 800cf60:	4b60      	ldr	r3, [pc, #384]	@ (800d0e4 <rfalNfcDataExchangeStart+0x188>)
{
 800cf62:	b093      	sub	sp, #76	@ 0x4c
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 800cf64:	9306      	str	r3, [sp, #24]
 800cf66:	781b      	ldrb	r3, [r3, #0]
{
 800cf68:	000c      	movs	r4, r1
 800cf6a:	0017      	movs	r7, r2
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 800cf6c:	2b1d      	cmp	r3, #29
 800cf6e:	d800      	bhi.n	800cf72 <rfalNfcDataExchangeStart+0x16>
 800cf70:	e0b3      	b.n	800d0da <rfalNfcDataExchangeStart+0x17e>
 800cf72:	9a06      	ldr	r2, [sp, #24]
 800cf74:	68d5      	ldr	r5, [r2, #12]
 800cf76:	2d00      	cmp	r5, #0
 800cf78:	d100      	bne.n	800cf7c <rfalNfcDataExchangeStart+0x20>
 800cf7a:	e0ae      	b.n	800d0da <rfalNfcDataExchangeStart+0x17e>
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 800cf7c:	2b1e      	cmp	r3, #30
 800cf7e:	d114      	bne.n	800cfaa <rfalNfcDataExchangeStart+0x4e>
 800cf80:	782b      	ldrb	r3, [r5, #0]
 800cf82:	3b0a      	subs	r3, #10
 800cf84:	2b05      	cmp	r3, #5
 800cf86:	d810      	bhi.n	800cfaa <rfalNfcDataExchangeStart+0x4e>
            if( txDataLen > 0U )
 800cf88:	2900      	cmp	r1, #0
 800cf8a:	d000      	beq.n	800cf8e <rfalNfcDataExchangeStart+0x32>
 800cf8c:	e0a5      	b.n	800d0da <rfalNfcDataExchangeStart+0x17e>
            *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 800cf8e:	4b56      	ldr	r3, [pc, #344]	@ (800d0e8 <rfalNfcDataExchangeStart+0x18c>)
 800cf90:	6033      	str	r3, [r6, #0]
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.apdu : 
 800cf92:	7f6a      	ldrb	r2, [r5, #29]
 800cf94:	4b55      	ldr	r3, [pc, #340]	@ (800d0ec <rfalNfcDataExchangeStart+0x190>)
 800cf96:	2a01      	cmp	r2, #1
 800cf98:	d003      	beq.n	800cfa2 <rfalNfcDataExchangeStart+0x46>
                                  ((gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_NFCDEP) ? gNfcDev.rxBuf.nfcDepBuf.pdu  : gNfcDev.rxBuf.rfBuf));
 800cf9a:	4b55      	ldr	r3, [pc, #340]	@ (800d0f0 <rfalNfcDataExchangeStart+0x194>)
 800cf9c:	2a02      	cmp	r2, #2
 800cf9e:	d100      	bne.n	800cfa2 <rfalNfcDataExchangeStart+0x46>
 800cfa0:	4b54      	ldr	r3, [pc, #336]	@ (800d0f4 <rfalNfcDataExchangeStart+0x198>)
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.apdu : 
 800cfa2:	603b      	str	r3, [r7, #0]
}
 800cfa4:	0020      	movs	r0, r4
 800cfa6:	b013      	add	sp, #76	@ 0x4c
 800cfa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 800cfaa:	7f6b      	ldrb	r3, [r5, #29]
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d020      	beq.n	800cff2 <rfalNfcDataExchangeStart+0x96>
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d054      	beq.n	800d05e <rfalNfcDataExchangeStart+0x102>
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d000      	beq.n	800cfba <rfalNfcDataExchangeStart+0x5e>
 800cfb8:	e091      	b.n	800d0de <rfalNfcDataExchangeStart+0x182>
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800cfba:	2281      	movs	r2, #129	@ 0x81
 800cfbc:	494c      	ldr	r1, [pc, #304]	@ (800d0f0 <rfalNfcDataExchangeStart+0x194>)
 800cfbe:	9009      	str	r0, [sp, #36]	@ 0x24
 800cfc0:	0112      	lsls	r2, r2, #4
 800cfc2:	a802      	add	r0, sp, #8
 800cfc4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cfc6:	8502      	strh	r2, [r0, #40]	@ 0x28
 800cfc8:	4a47      	ldr	r2, [pc, #284]	@ (800d0e8 <rfalNfcDataExchangeStart+0x18c>)
 800cfca:	930e      	str	r3, [sp, #56]	@ 0x38
 800cfcc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800cfce:	920d      	str	r2, [sp, #52]	@ 0x34
 800cfd0:	930f      	str	r3, [sp, #60]	@ 0x3c
                *rxData = (uint8_t*)gNfcDev.rxBuf.rfBuf;
 800cfd2:	6039      	str	r1, [r7, #0]
                ctx.txBufLen = txDataLen;    /* RF interface uses number of bits */
 800cfd4:	8404      	strh	r4, [r0, #32]
                *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 800cfd6:	6032      	str	r2, [r6, #0]
                err = rfalStartTransceive( &ctx );
 800cfd8:	a809      	add	r0, sp, #36	@ 0x24
 800cfda:	f7f7 fb07 	bl	80045ec <rfalStartTransceive>
                err = rfalNfcDepStartPduTransceive( rfalNfcDepTxRx );                          
 800cfde:	1e04      	subs	r4, r0, #0
        if( err == RFAL_ERR_NONE )
 800cfe0:	d1e0      	bne.n	800cfa4 <rfalNfcDataExchangeStart+0x48>
            gNfcDev.dataExErr = RFAL_ERR_BUSY;
 800cfe2:	23c8      	movs	r3, #200	@ 0xc8
 800cfe4:	2202      	movs	r2, #2
 800cfe6:	9906      	ldr	r1, [sp, #24]
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	52ca      	strh	r2, [r1, r3]
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800cfec:	231f      	movs	r3, #31
 800cfee:	700b      	strb	r3, [r1, #0]
 800cff0:	e7d8      	b.n	800cfa4 <rfalNfcDataExchangeStart+0x48>
                if( txDataLen > sizeof(gNfcDev.txBuf.isoDepBuf.apdu) )
 800cff2:	2380      	movs	r3, #128	@ 0x80
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	429c      	cmp	r4, r3
 800cff8:	d901      	bls.n	800cffe <rfalNfcDataExchangeStart+0xa2>
                    return RFAL_ERR_NOMEM;
 800cffa:	2401      	movs	r4, #1
 800cffc:	e7d2      	b.n	800cfa4 <rfalNfcDataExchangeStart+0x48>
                if( txDataLen > 0U )
 800cffe:	2c00      	cmp	r4, #0
 800d000:	d005      	beq.n	800d00e <rfalNfcDataExchangeStart+0xb2>
                    RFAL_MEMCPY( (uint8_t*)gNfcDev.txBuf.isoDepBuf.apdu, txData, txDataLen );
 800d002:	4b3d      	ldr	r3, [pc, #244]	@ (800d0f8 <rfalNfcDataExchangeStart+0x19c>)
 800d004:	0001      	movs	r1, r0
 800d006:	0022      	movs	r2, r4
 800d008:	0018      	movs	r0, r3
 800d00a:	f006 f987 	bl	801331c <memcpy>
                rfalIsoDepTxRx.DID       = RFAL_ISODEP_NO_DID;
 800d00e:	231d      	movs	r3, #29
 800d010:	a902      	add	r1, sp, #8
 800d012:	185b      	adds	r3, r3, r1
 800d014:	2100      	movs	r1, #0
 800d016:	77d9      	strb	r1, [r3, #31]
                rfalIsoDepTxRx.ourFSx    = RFAL_ISODEP_FSX_KEEP;
 800d018:	23ff      	movs	r3, #255	@ 0xff
                rfalIsoDepTxRx.DID       = RFAL_ISODEP_NO_DID;
 800d01a:	aa09      	add	r2, sp, #36	@ 0x24
                rfalIsoDepTxRx.ourFSx    = RFAL_ISODEP_FSX_KEEP;
 800d01c:	83d3      	strh	r3, [r2, #30]
                rfalIsoDepTxRx.FSx       = gNfcDev.activeDev->proto.isoDep.info.FSx;
 800d01e:	002b      	movs	r3, r5
 800d020:	3362      	adds	r3, #98	@ 0x62
 800d022:	881b      	ldrh	r3, [r3, #0]
                rfalIsoDepTxRx.txBuf     = &gNfcDev.txBuf.isoDepBuf;
 800d024:	4835      	ldr	r0, [pc, #212]	@ (800d0fc <rfalNfcDataExchangeStart+0x1a0>)
                rfalIsoDepTxRx.FSx       = gNfcDev.activeDev->proto.isoDep.info.FSx;
 800d026:	8393      	strh	r3, [r2, #28]
                rfalIsoDepTxRx.dFWT      = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 800d028:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
                rfalIsoDepTxRx.tmpBuf    = &gNfcDev.tmpBuf.isoDepBuf;
 800d02a:	4935      	ldr	r1, [pc, #212]	@ (800d100 <rfalNfcDataExchangeStart+0x1a4>)
                rfalIsoDepTxRx.dFWT      = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 800d02c:	930f      	str	r3, [sp, #60]	@ 0x3c
                rfalIsoDepTxRx.FWT       = gNfcDev.activeDev->proto.isoDep.info.FWT;
 800d02e:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
                rfalIsoDepTxRx.txBuf     = &gNfcDev.txBuf.isoDepBuf;
 800d030:	9009      	str	r0, [sp, #36]	@ 0x24
                rfalIsoDepTxRx.FWT       = gNfcDev.activeDev->proto.isoDep.info.FWT;
 800d032:	930e      	str	r3, [sp, #56]	@ 0x38
                rfalIsoDepTxRx.txBufLen  = txDataLen;
 800d034:	8094      	strh	r4, [r2, #4]
                err = rfalIsoDepStartApduTransceive( rfalIsoDepTxRx );
 800d036:	466c      	mov	r4, sp
                rfalIsoDepTxRx.rxBuf     = &gNfcDev.rxBuf.isoDepBuf;
 800d038:	4b2d      	ldr	r3, [pc, #180]	@ (800d0f0 <rfalNfcDataExchangeStart+0x194>)
                rfalIsoDepTxRx.tmpBuf    = &gNfcDev.tmpBuf.isoDepBuf;
 800d03a:	910d      	str	r1, [sp, #52]	@ 0x34
                rfalIsoDepTxRx.rxBuf     = &gNfcDev.rxBuf.isoDepBuf;
 800d03c:	469c      	mov	ip, r3
 800d03e:	930b      	str	r3, [sp, #44]	@ 0x2c
                *rxData                  = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.apdu;
 800d040:	492a      	ldr	r1, [pc, #168]	@ (800d0ec <rfalNfcDataExchangeStart+0x190>)
                rfalIsoDepTxRx.rxLen     = &gNfcDev.rxLen;
 800d042:	4b29      	ldr	r3, [pc, #164]	@ (800d0e8 <rfalNfcDataExchangeStart+0x18c>)
                *rxData                  = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.apdu;
 800d044:	6039      	str	r1, [r7, #0]
                rfalIsoDepTxRx.rxLen     = &gNfcDev.rxLen;
 800d046:	930c      	str	r3, [sp, #48]	@ 0x30
                *rvdLen                  = (uint16_t*)&gNfcDev.rxLen;
 800d048:	6033      	str	r3, [r6, #0]
                err = rfalIsoDepStartApduTransceive( rfalIsoDepTxRx );
 800d04a:	a90d      	add	r1, sp, #52	@ 0x34
 800d04c:	c9e0      	ldmia	r1!, {r5, r6, r7}
 800d04e:	c4e0      	stmia	r4!, {r5, r6, r7}
 800d050:	c960      	ldmia	r1!, {r5, r6}
 800d052:	c460      	stmia	r4!, {r5, r6}
 800d054:	4662      	mov	r2, ip
 800d056:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d058:	f7ff fc74 	bl	800c944 <rfalIsoDepStartApduTransceive>
 800d05c:	e7bf      	b.n	800cfde <rfalNfcDataExchangeStart+0x82>
                if( txDataLen > sizeof(gNfcDev.txBuf.nfcDepBuf.pdu) )
 800d05e:	2380      	movs	r3, #128	@ 0x80
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	429c      	cmp	r4, r3
 800d064:	d8c9      	bhi.n	800cffa <rfalNfcDataExchangeStart+0x9e>
                if( txDataLen > 0U)
 800d066:	2c00      	cmp	r4, #0
 800d068:	d005      	beq.n	800d076 <rfalNfcDataExchangeStart+0x11a>
                    RFAL_MEMCPY( (uint8_t*)gNfcDev.txBuf.nfcDepBuf.pdu, txData, txDataLen );
 800d06a:	4b26      	ldr	r3, [pc, #152]	@ (800d104 <rfalNfcDataExchangeStart+0x1a8>)
 800d06c:	0001      	movs	r1, r0
 800d06e:	0022      	movs	r2, r4
 800d070:	0018      	movs	r0, r3
 800d072:	f006 f953 	bl	801331c <memcpy>
                rfalNfcDepTxRx.DID       = RFAL_NFCDEP_DID_KEEP;
 800d076:	23ff      	movs	r3, #255	@ 0xff
 800d078:	a909      	add	r1, sp, #36	@ 0x24
 800d07a:	778b      	strb	r3, [r1, #30]
                rfalNfcDepTxRx.FSx       = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 800d07c:	782b      	ldrb	r3, [r5, #0]
 800d07e:	2203      	movs	r2, #3
 800d080:	2b05      	cmp	r3, #5
 800d082:	d827      	bhi.n	800d0d4 <rfalNfcDataExchangeStart+0x178>
                                           rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) ) :
 800d084:	002b      	movs	r3, r5
 800d086:	3330      	adds	r3, #48	@ 0x30
                                           rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Initiator.ATR_REQ.PPi ) );
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	091b      	lsrs	r3, r3, #4
 800d08c:	4013      	ands	r3, r2
 800d08e:	3301      	adds	r3, #1
                rfalNfcDepTxRx.FSx       = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 800d090:	22fe      	movs	r2, #254	@ 0xfe
                                           rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Initiator.ATR_REQ.PPi ) );
 800d092:	019b      	lsls	r3, r3, #6
                rfalNfcDepTxRx.FSx       = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 800d094:	2bfd      	cmp	r3, #253	@ 0xfd
 800d096:	d800      	bhi.n	800d09a <rfalNfcDataExchangeStart+0x13e>
 800d098:	b29a      	uxth	r2, r3
 800d09a:	838a      	strh	r2, [r1, #28]
                err = rfalNfcDepStartPduTransceive( rfalNfcDepTxRx );                          
 800d09c:	466a      	mov	r2, sp
                rfalNfcDepTxRx.dFWT      = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 800d09e:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
                rfalNfcDepTxRx.txBuf     = &gNfcDev.txBuf.nfcDepBuf;
 800d0a0:	4816      	ldr	r0, [pc, #88]	@ (800d0fc <rfalNfcDataExchangeStart+0x1a0>)
                rfalNfcDepTxRx.dFWT      = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 800d0a2:	618b      	str	r3, [r1, #24]
                rfalNfcDepTxRx.FWT       = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 800d0a4:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800d0a6:	614b      	str	r3, [r1, #20]
                rfalNfcDepTxRx.txBuf     = &gNfcDev.txBuf.nfcDepBuf;
 800d0a8:	9009      	str	r0, [sp, #36]	@ 0x24
                rfalNfcDepTxRx.rxBuf     = &gNfcDev.rxBuf.nfcDepBuf;
 800d0aa:	4b11      	ldr	r3, [pc, #68]	@ (800d0f0 <rfalNfcDataExchangeStart+0x194>)
                rfalNfcDepTxRx.txBufLen  = txDataLen;
 800d0ac:	808c      	strh	r4, [r1, #4]
                rfalNfcDepTxRx.tmpBuf    = &gNfcDev.tmpBuf.nfcDepBuf;
 800d0ae:	4c14      	ldr	r4, [pc, #80]	@ (800d100 <rfalNfcDataExchangeStart+0x1a4>)
                rfalNfcDepTxRx.rxBuf     = &gNfcDev.rxBuf.nfcDepBuf;
 800d0b0:	9307      	str	r3, [sp, #28]
 800d0b2:	608b      	str	r3, [r1, #8]
                rfalNfcDepTxRx.tmpBuf    = &gNfcDev.tmpBuf.nfcDepBuf;
 800d0b4:	610c      	str	r4, [r1, #16]
                rfalNfcDepTxRx.rxLen     = &gNfcDev.rxLen;
 800d0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d0e8 <rfalNfcDataExchangeStart+0x18c>)
                *rxData                  = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.pdu;
 800d0b8:	4c0e      	ldr	r4, [pc, #56]	@ (800d0f4 <rfalNfcDataExchangeStart+0x198>)
                rfalNfcDepTxRx.rxLen     = &gNfcDev.rxLen;
 800d0ba:	60cb      	str	r3, [r1, #12]
                *rxData                  = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.pdu;
 800d0bc:	603c      	str	r4, [r7, #0]
                *rvdLen                  = (uint16_t*)&gNfcDev.rxLen;
 800d0be:	6033      	str	r3, [r6, #0]
                err = rfalNfcDepStartPduTransceive( rfalNfcDepTxRx );                          
 800d0c0:	ac0d      	add	r4, sp, #52	@ 0x34
 800d0c2:	cce0      	ldmia	r4!, {r5, r6, r7}
 800d0c4:	c2e0      	stmia	r2!, {r5, r6, r7}
 800d0c6:	6824      	ldr	r4, [r4, #0]
 800d0c8:	6014      	str	r4, [r2, #0]
 800d0ca:	6849      	ldr	r1, [r1, #4]
 800d0cc:	9a07      	ldr	r2, [sp, #28]
 800d0ce:	f002 f951 	bl	800f374 <rfalNfcDepStartPduTransceive>
 800d0d2:	e784      	b.n	800cfde <rfalNfcDataExchangeStart+0x82>
                                           rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Initiator.ATR_REQ.PPi ) );
 800d0d4:	002b      	movs	r3, r5
 800d0d6:	332f      	adds	r3, #47	@ 0x2f
 800d0d8:	e7d6      	b.n	800d088 <rfalNfcDataExchangeStart+0x12c>
                return RFAL_ERR_WRONG_STATE;
 800d0da:	2421      	movs	r4, #33	@ 0x21
 800d0dc:	e762      	b.n	800cfa4 <rfalNfcDataExchangeStart+0x48>
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 800d0de:	2407      	movs	r4, #7
 800d0e0:	e760      	b.n	800cfa4 <rfalNfcDataExchangeStart+0x48>
 800d0e2:	46c0      	nop			@ (mov r8, r8)
 800d0e4:	20001c24 	.word	0x20001c24
 800d0e8:	2000236a 	.word	0x2000236a
 800d0ec:	20002168 	.word	0x20002168
 800d0f0:	20002165 	.word	0x20002165
 800d0f4:	2000216a 	.word	0x2000216a
 800d0f8:	20001f63 	.word	0x20001f63
 800d0fc:	20001f60 	.word	0x20001f60
 800d100:	2000236c 	.word	0x2000236c
 800d104:	20001f65 	.word	0x20001f65

0800d108 <rfalNfcDataExchangeGetStatus>:
{
 800d108:	b570      	push	{r4, r5, r6, lr}
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 800d10a:	4c24      	ldr	r4, [pc, #144]	@ (800d19c <rfalNfcDataExchangeGetStatus+0x94>)
 800d10c:	7823      	ldrb	r3, [r4, #0]
 800d10e:	2b1e      	cmp	r3, #30
 800d110:	d10d      	bne.n	800d12e <rfalNfcDataExchangeGetStatus+0x26>
        gNfcDev.dataExErr = RFAL_ERR_BUSY;
 800d112:	23c8      	movs	r3, #200	@ 0xc8
 800d114:	2202      	movs	r2, #2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	52e2      	strh	r2, [r4, r3]
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800d11a:	321d      	adds	r2, #29
 800d11c:	7022      	strb	r2, [r4, #0]
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 800d11e:	68e2      	ldr	r2, [r4, #12]
 800d120:	7811      	ldrb	r1, [r2, #0]
 800d122:	290c      	cmp	r1, #12
 800d124:	d103      	bne.n	800d12e <rfalNfcDataExchangeGetStatus+0x26>
 800d126:	7f52      	ldrb	r2, [r2, #29]
 800d128:	2a00      	cmp	r2, #0
 800d12a:	d100      	bne.n	800d12e <rfalNfcDataExchangeGetStatus+0x26>
            gNfcDev.dataExErr = RFAL_ERR_NONE;
 800d12c:	52e2      	strh	r2, [r4, r3]
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 800d12e:	7823      	ldrb	r3, [r4, #0]
 800d130:	2b17      	cmp	r3, #23
 800d132:	d103      	bne.n	800d13c <rfalNfcDataExchangeGetStatus+0x34>
    return gNfcDev.dataExErr;
 800d134:	23c8      	movs	r3, #200	@ 0xc8
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	5ae0      	ldrh	r0, [r4, r3]
 800d13a:	e023      	b.n	800d184 <rfalNfcDataExchangeGetStatus+0x7c>
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE) )
 800d13c:	22fd      	movs	r2, #253	@ 0xfd
 800d13e:	3b1f      	subs	r3, #31
        return RFAL_ERR_WRONG_STATE;
 800d140:	2021      	movs	r0, #33	@ 0x21
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE) )
 800d142:	4213      	tst	r3, r2
 800d144:	d11e      	bne.n	800d184 <rfalNfcDataExchangeGetStatus+0x7c>
    if( gNfcDev.dataExErr == RFAL_ERR_BUSY )
 800d146:	22c8      	movs	r2, #200	@ 0xc8
 800d148:	0092      	lsls	r2, r2, #2
 800d14a:	5aa3      	ldrh	r3, [r4, r2]
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d1f1      	bne.n	800d134 <rfalNfcDataExchangeGetStatus+0x2c>
        switch( gNfcDev.activeDev->rfInterface )
 800d150:	68e3      	ldr	r3, [r4, #12]
 800d152:	7f5b      	ldrb	r3, [r3, #29]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d016      	beq.n	800d186 <rfalNfcDataExchangeGetStatus+0x7e>
 800d158:	2b02      	cmp	r3, #2
 800d15a:	d017      	beq.n	800d18c <rfalNfcDataExchangeGetStatus+0x84>
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d118      	bne.n	800d192 <rfalNfcDataExchangeGetStatus+0x8a>
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 800d160:	f7f7 fb24 	bl	80047ac <rfalGetTransceiveStatus>
 800d164:	26c8      	movs	r6, #200	@ 0xc8
 800d166:	00b6      	lsls	r6, r6, #2
                gNfcDev.dataExErr = rfalNfcDepGetPduTransceiveStatus();
 800d168:	0005      	movs	r5, r0
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 800d16a:	53a0      	strh	r0, [r4, r6]
        if( gNfcDev.dataExErr == RFAL_ERR_SLEEP_REQ )
 800d16c:	2820      	cmp	r0, #32
 800d16e:	d1e1      	bne.n	800d134 <rfalNfcDataExchangeGetStatus+0x2c>
            RFAL_EXIT_ON_ERR( gNfcDev.dataExErr, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 800d170:	2281      	movs	r2, #129	@ 0x81
 800d172:	200c      	movs	r0, #12
 800d174:	4b0a      	ldr	r3, [pc, #40]	@ (800d1a0 <rfalNfcDataExchangeGetStatus+0x98>)
 800d176:	490b      	ldr	r1, [pc, #44]	@ (800d1a4 <rfalNfcDataExchangeGetStatus+0x9c>)
 800d178:	0052      	lsls	r2, r2, #1
 800d17a:	f7f7 fc3b 	bl	80049f4 <rfalListenSleepStart>
 800d17e:	2800      	cmp	r0, #0
 800d180:	d00a      	beq.n	800d198 <rfalNfcDataExchangeGetStatus+0x90>
 800d182:	53a0      	strh	r0, [r4, r6]
}
 800d184:	bd70      	pop	{r4, r5, r6, pc}
                gNfcDev.dataExErr = rfalIsoDepGetApduTransceiveStatus();
 800d186:	f7ff fc4f 	bl	800ca28 <rfalIsoDepGetApduTransceiveStatus>
 800d18a:	e7eb      	b.n	800d164 <rfalNfcDataExchangeGetStatus+0x5c>
                gNfcDev.dataExErr = rfalNfcDepGetPduTransceiveStatus();
 800d18c:	f002 f942 	bl	800f414 <rfalNfcDepGetPduTransceiveStatus>
 800d190:	e7e8      	b.n	800d164 <rfalNfcDataExchangeGetStatus+0x5c>
                gNfcDev.dataExErr = RFAL_ERR_PARAM;
 800d192:	2307      	movs	r3, #7
 800d194:	52a3      	strh	r3, [r4, r2]
        if( gNfcDev.dataExErr == RFAL_ERR_SLEEP_REQ )
 800d196:	e7cd      	b.n	800d134 <rfalNfcDataExchangeGetStatus+0x2c>
            gNfcDev.dataExErr = RFAL_ERR_SLEEP_REQ;
 800d198:	53a5      	strh	r5, [r4, r6]
 800d19a:	e7cb      	b.n	800d134 <rfalNfcDataExchangeGetStatus+0x2c>
 800d19c:	20001c24 	.word	0x20001c24
 800d1a0:	2000236a 	.word	0x2000236a
 800d1a4:	20002165 	.word	0x20002165

0800d1a8 <rfalNfcWorker>:
{
 800d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1aa:	b09d      	sub	sp, #116	@ 0x74
    rfalWorker();                                                                     /* Execute RFAL process  */
 800d1ac:	f7f7 fe86 	bl	8004ebc <rfalWorker>
    switch( gNfcDev.state )
 800d1b0:	4ca6      	ldr	r4, [pc, #664]	@ (800d44c <rfalNfcWorker+0x2a4>)
 800d1b2:	7820      	ldrb	r0, [r4, #0]
 800d1b4:	3802      	subs	r0, #2
 800d1b6:	2820      	cmp	r0, #32
 800d1b8:	d900      	bls.n	800d1bc <rfalNfcWorker+0x14>
 800d1ba:	e0bc      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d1bc:	f7f2 ffca 	bl	8000154 <__gnu_thumb1_case_uhi>
 800d1c0:	00590021 	.word	0x00590021
 800d1c4:	00bb00bb 	.word	0x00bb00bb
 800d1c8:	00bb00bb 	.word	0x00bb00bb
 800d1cc:	00bb00bb 	.word	0x00bb00bb
 800d1d0:	021e006a 	.word	0x021e006a
 800d1d4:	043000bb 	.word	0x043000bb
 800d1d8:	00bb00bb 	.word	0x00bb00bb
 800d1dc:	00bb00bb 	.word	0x00bb00bb
 800d1e0:	00bb00bb 	.word	0x00bb00bb
 800d1e4:	0672064a 	.word	0x0672064a
 800d1e8:	06870687 	.word	0x06870687
 800d1ec:	00bb00bb 	.word	0x00bb00bb
 800d1f0:	00bb00bb 	.word	0x00bb00bb
 800d1f4:	00bb00bb 	.word	0x00bb00bb
 800d1f8:	060a00bb 	.word	0x060a00bb
 800d1fc:	00bb00bb 	.word	0x00bb00bb
 800d200:	063a      	.short	0x063a
            gNfcDev.devCnt         = 0;
 800d202:	22c6      	movs	r2, #198	@ 0xc6
 800d204:	2300      	movs	r3, #0
 800d206:	0092      	lsls	r2, r2, #2
 800d208:	54a3      	strb	r3, [r4, r2]
            gNfcDev.techs2do       = gNfcDev.disc.techs2Find;
 800d20a:	8a62      	ldrh	r2, [r4, #18]
            gNfcDev.selDevIdx      = 0;
 800d20c:	7263      	strb	r3, [r4, #9]
            gNfcDev.techs2do       = gNfcDev.disc.techs2Find;
 800d20e:	80a2      	strh	r2, [r4, #4]
            gNfcDev.state          = RFAL_NFC_STATE_POLL_TECHDETECT;
 800d210:	220a      	movs	r2, #10
 800d212:	7022      	strb	r2, [r4, #0]
            gNfcDev.isDeactivating = false;
 800d214:	4a8e      	ldr	r2, [pc, #568]	@ (800d450 <rfalNfcWorker+0x2a8>)
            gNfcDev.techsFound     = RFAL_NFC_TECH_NONE;
 800d216:	8063      	strh	r3, [r4, #2]
            gNfcDev.isDeactivating = false;
 800d218:	54a3      	strb	r3, [r4, r2]
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 800d21a:	8ae0      	ldrh	r0, [r4, #22]
 800d21c:	f7f9 fe3c 	bl	8006e98 <timerCalculateTimer>
 800d220:	23c7      	movs	r3, #199	@ 0xc7
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	50e0      	str	r0, [r4, r3]
            if( (gNfcDev.disc.wakeupEnabled) && ((gNfcDev.techDctCnt == 0U) || (gNfcDev.techDctCnt >= gNfcDev.disc.wakeupNPolls)) )
 800d226:	0023      	movs	r3, r4
 800d228:	339c      	adds	r3, #156	@ 0x9c
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d015      	beq.n	800d25c <rfalNfcWorker+0xb4>
 800d230:	88e3      	ldrh	r3, [r4, #6]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d004      	beq.n	800d240 <rfalNfcWorker+0x98>
 800d236:	0022      	movs	r2, r4
 800d238:	32be      	adds	r2, #190	@ 0xbe
 800d23a:	8812      	ldrh	r2, [r2, #0]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d80d      	bhi.n	800d25c <rfalNfcWorker+0xb4>
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 800d240:	0023      	movs	r3, r4
 800d242:	339d      	adds	r3, #157	@ 0x9d
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	4883      	ldr	r0, [pc, #524]	@ (800d454 <rfalNfcWorker+0x2ac>)
 800d248:	425a      	negs	r2, r3
 800d24a:	4153      	adcs	r3, r2
 800d24c:	425b      	negs	r3, r3
 800d24e:	4018      	ands	r0, r3
 800d250:	f7f8 fee2 	bl	8006018 <rfalWakeUpModeStart>
                if( err == RFAL_ERR_NONE )
 800d254:	2800      	cmp	r0, #0
 800d256:	d101      	bne.n	800d25c <rfalNfcWorker+0xb4>
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 800d258:	2303      	movs	r3, #3
 800d25a:	7023      	strb	r3, [r4, #0]
            gNfcDev.techDctCnt++;
 800d25c:	88e3      	ldrh	r3, [r4, #6]
 800d25e:	3301      	adds	r3, #1
 800d260:	80e3      	strh	r3, [r4, #6]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 800d262:	0023      	movs	r3, r4
 800d264:	3398      	adds	r3, #152	@ 0x98
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d064      	beq.n	800d336 <rfalNfcWorker+0x18e>
 800d26c:	7820      	ldrb	r0, [r4, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller             */
 800d26e:	4798      	blx	r3
 800d270:	e061      	b.n	800d336 <rfalNfcWorker+0x18e>
            if( rfalWakeUpModeHasWoke() )
 800d272:	f7f9 f851 	bl	8006318 <rfalWakeUpModeHasWoke>
 800d276:	2800      	cmp	r0, #0
 800d278:	d05d      	beq.n	800d336 <rfalNfcWorker+0x18e>
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 800d27a:	f7f9 f857 	bl	800632c <rfalWakeUpModeStop>
                gNfcDev.state      = RFAL_NFC_STATE_POLL_TECHDETECT;                  /* Go to Technology detection     */
 800d27e:	230a      	movs	r3, #10
                gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 800d280:	8ae0      	ldrh	r0, [r4, #22]
                gNfcDev.state      = RFAL_NFC_STATE_POLL_TECHDETECT;                  /* Go to Technology detection     */
 800d282:	7023      	strb	r3, [r4, #0]
                gNfcDev.techDctCnt = 1;                                               /* Tech Detect counter (1 woke)   */
 800d284:	3b09      	subs	r3, #9
 800d286:	80e3      	strh	r3, [r4, #6]
                gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 800d288:	f7f9 fe06 	bl	8006e98 <timerCalculateTimer>
 800d28c:	23c7      	movs	r3, #199	@ 0xc7
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	50e0      	str	r0, [r4, r3]
 800d292:	e7e6      	b.n	800d262 <rfalNfcWorker+0xba>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 800d294:	2210      	movs	r2, #16
 800d296:	8a63      	ldrh	r3, [r4, #18]
 800d298:	4213      	tst	r3, r2
 800d29a:	d04e      	beq.n	800d33a <rfalNfcWorker+0x192>
 800d29c:	88a1      	ldrh	r1, [r4, #4]
 800d29e:	4211      	tst	r1, r2
 800d2a0:	d04b      	beq.n	800d33a <rfalNfcWorker+0x192>
        if( !gNfcDev.isTechInit )
 800d2a2:	4d6d      	ldr	r5, [pc, #436]	@ (800d458 <rfalNfcWorker+0x2b0>)
 800d2a4:	5d63      	ldrb	r3, [r4, r5]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d11b      	bne.n	800d2e2 <rfalNfcWorker+0x13a>
            RFAL_EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 800d2aa:	0023      	movs	r3, r4
 800d2ac:	3356      	adds	r3, #86	@ 0x56
 800d2ae:	7819      	ldrb	r1, [r3, #0]
 800d2b0:	2009      	movs	r0, #9
 800d2b2:	000a      	movs	r2, r1
 800d2b4:	f7f6 ffda 	bl	800426c <rfalSetMode>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d000      	beq.n	800d2be <rfalNfcWorker+0x116>
 800d2bc:	e19b      	b.n	800d5f6 <rfalNfcWorker+0x44e>
            rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 800d2be:	f7f7 f8df 	bl	8004480 <rfalSetErrorHandling>
            rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 800d2c2:	2040      	movs	r0, #64	@ 0x40
 800d2c4:	f7f7 f904 	bl	80044d0 <rfalSetFDTListen>
            rfalSetFDTPoll( RFAL_FDT_POLL_AP2P_POLLER );
 800d2c8:	4864      	ldr	r0, [pc, #400]	@ (800d45c <rfalNfcWorker+0x2b4>)
 800d2ca:	f7f7 f8ef 	bl	80044ac <rfalSetFDTPoll>
            rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 800d2ce:	4864      	ldr	r0, [pc, #400]	@ (800d460 <rfalNfcWorker+0x2b8>)
 800d2d0:	f7f7 f908 	bl	80044e4 <rfalSetGT>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                /* Turns the Field On and starts GT timer */
 800d2d4:	f7f7 f91e 	bl	8004514 <rfalFieldOnAndStartGT>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d000      	beq.n	800d2de <rfalNfcWorker+0x136>
 800d2dc:	e18b      	b.n	800d5f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit = true;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	5563      	strb	r3, [r4, r5]
        if( rfalIsGTExpired() )                                                              /* Wait until Guard Time is fulfilled */
 800d2e2:	f7f7 f90b 	bl	80044fc <rfalIsGTExpired>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d025      	beq.n	800d336 <rfalNfcWorker+0x18e>
            gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 800d2ea:	2610      	movs	r6, #16
 800d2ec:	88a3      	ldrh	r3, [r4, #4]
            err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 800d2ee:	4f5d      	ldr	r7, [pc, #372]	@ (800d464 <rfalNfcWorker+0x2bc>)
            gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 800d2f0:	43b3      	bics	r3, r6
 800d2f2:	80a3      	strh	r3, [r4, #4]
            err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	2101      	movs	r1, #1
 800d2f8:	001a      	movs	r2, r3
 800d2fa:	0038      	movs	r0, r7
 800d2fc:	f7ff fcbc 	bl	800cc78 <rfalNfcNfcDepActivate>
            if( err == RFAL_ERR_NONE )
 800d300:	2800      	cmp	r0, #0
 800d302:	d114      	bne.n	800d32e <rfalNfcWorker+0x186>
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 800d304:	8863      	ldrh	r3, [r4, #2]
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 800d306:	2202      	movs	r2, #2
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 800d308:	431e      	orrs	r6, r3
                gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 800d30a:	2305      	movs	r3, #5
 800d30c:	703b      	strb	r3, [r7, #0]
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 800d30e:	0023      	movs	r3, r4
 800d310:	33dd      	adds	r3, #221	@ 0xdd
 800d312:	701a      	strb	r2, [r3, #0]
                gNfcDev.devCnt++;
 800d314:	22c6      	movs	r2, #198	@ 0xc6
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 800d316:	8066      	strh	r6, [r4, #2]
                gNfcDev.devCnt++;
 800d318:	0092      	lsls	r2, r2, #2
 800d31a:	5ca3      	ldrb	r3, [r4, r2]
 800d31c:	3301      	adds	r3, #1
 800d31e:	54a3      	strb	r3, [r4, r2]
                if( ( err != RFAL_ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 800d320:	8863      	ldrh	r3, [r4, #2]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d100      	bne.n	800d328 <rfalNfcWorker+0x180>
 800d326:	e140      	b.n	800d5aa <rfalNfcWorker+0x402>
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 800d328:	80a3      	strh	r3, [r4, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 800d32a:	230b      	movs	r3, #11
 800d32c:	e144      	b.n	800d5b8 <rfalNfcWorker+0x410>
            gNfcDev.isTechInit = false;
 800d32e:	2300      	movs	r3, #0
 800d330:	5563      	strb	r3, [r4, r5]
            rfalFieldOff();
 800d332:	f7f7 f947 	bl	80045c4 <rfalFieldOff>
}
 800d336:	b01d      	add	sp, #116	@ 0x74
 800d338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( (!gNfcDev.isFieldOn) && ( (gNfcDev.disc.techs2Find & (RFAL_NFC_POLL_TECH_A | RFAL_NFC_POLL_TECH_B | RFAL_NFC_POLL_TECH_F | RFAL_NFC_POLL_TECH_V | RFAL_NFC_POLL_TECH_ST25TB | RFAL_NFC_POLL_TECH_PROP)) != 0U) )
 800d33a:	25ca      	movs	r5, #202	@ 0xca
 800d33c:	00ad      	lsls	r5, r5, #2
 800d33e:	5d62      	ldrb	r2, [r4, r5]
 800d340:	2a00      	cmp	r2, #0
 800d342:	d10a      	bne.n	800d35a <rfalNfcWorker+0x1b2>
 800d344:	326f      	adds	r2, #111	@ 0x6f
 800d346:	4213      	tst	r3, r2
 800d348:	d0ea      	beq.n	800d320 <rfalNfcWorker+0x178>
        RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* Turns the Field On  */
 800d34a:	f7f7 f8e3 	bl	8004514 <rfalFieldOnAndStartGT>
 800d34e:	2800      	cmp	r0, #0
 800d350:	d000      	beq.n	800d354 <rfalNfcWorker+0x1ac>
 800d352:	e150      	b.n	800d5f6 <rfalNfcWorker+0x44e>
        gNfcDev.isFieldOn = true;
 800d354:	2301      	movs	r3, #1
 800d356:	5563      	strb	r3, [r4, r5]
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800d358:	e7ed      	b.n	800d336 <rfalNfcWorker+0x18e>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 800d35a:	2601      	movs	r6, #1
 800d35c:	4233      	tst	r3, r6
 800d35e:	d039      	beq.n	800d3d4 <rfalNfcWorker+0x22c>
 800d360:	88a2      	ldrh	r2, [r4, #4]
 800d362:	4232      	tst	r2, r6
 800d364:	d036      	beq.n	800d3d4 <rfalNfcWorker+0x22c>
        if( !gNfcDev.isTechInit )
 800d366:	4d3c      	ldr	r5, [pc, #240]	@ (800d458 <rfalNfcWorker+0x2b0>)
 800d368:	5d63      	ldrb	r3, [r4, r5]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10c      	bne.n	800d388 <rfalNfcWorker+0x1e0>
            RFAL_EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                       /* Initialize RFAL for NFC-A */
 800d36e:	f002 f915 	bl	800f59c <rfalNfcaPollerInitialize>
 800d372:	2800      	cmp	r0, #0
 800d374:	d000      	beq.n	800d378 <rfalNfcWorker+0x1d0>
 800d376:	e13e      	b.n	800d5f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                          /* As field is already On only starts GT timer */
 800d378:	f7f7 f8cc 	bl	8004514 <rfalFieldOnAndStartGT>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d000      	beq.n	800d382 <rfalNfcWorker+0x1da>
 800d380:	e139      	b.n	800d5f6 <rfalNfcWorker+0x44e>
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800d382:	4a39      	ldr	r2, [pc, #228]	@ (800d468 <rfalNfcWorker+0x2c0>)
            gNfcDev.isTechInit    = true;
 800d384:	5566      	strb	r6, [r4, r5]
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800d386:	54a0      	strb	r0, [r4, r2]
        if( rfalIsGTExpired() )                                                        /* Wait until Guard Time is fulfilled */
 800d388:	f7f7 f8b8 	bl	80044fc <rfalIsGTExpired>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	d0d2      	beq.n	800d336 <rfalNfcWorker+0x18e>
            if( !gNfcDev.isOperOngoing )
 800d390:	4e35      	ldr	r6, [pc, #212]	@ (800d468 <rfalNfcWorker+0x2c0>)
 800d392:	5da3      	ldrb	r3, [r4, r6]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d106      	bne.n	800d3a6 <rfalNfcWorker+0x1fe>
                rfalNfcaPollerStartTechnologyDetection( gNfcDev.disc.compMode, &gNfcDev.sensRes );/* Poll for NFC-A devices */
 800d398:	4934      	ldr	r1, [pc, #208]	@ (800d46c <rfalNfcWorker+0x2c4>)
 800d39a:	7c20      	ldrb	r0, [r4, #16]
 800d39c:	f002 fbf8 	bl	800fb90 <rfalNfcaPollerStartTechnologyDetection>
                gNfcDev.isOperOngoing = true;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	55a3      	strb	r3, [r4, r6]
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800d3a4:	e7c7      	b.n	800d336 <rfalNfcWorker+0x18e>
            err = rfalNfcaPollerGetTechnologyDetectionStatus();
 800d3a6:	f002 fc13 	bl	800fbd0 <rfalNfcaPollerGetTechnologyDetectionStatus>
            if( err != RFAL_ERR_BUSY )
 800d3aa:	2802      	cmp	r0, #2
 800d3ac:	d00b      	beq.n	800d3c6 <rfalNfcWorker+0x21e>
                if( err == RFAL_ERR_NONE )
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d103      	bne.n	800d3ba <rfalNfcWorker+0x212>
                    gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	8862      	ldrh	r2, [r4, #2]
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	8063      	strh	r3, [r4, #2]
                gNfcDev.isTechInit = false;
 800d3ba:	2300      	movs	r3, #0
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 800d3bc:	2201      	movs	r2, #1
                gNfcDev.isTechInit = false;
 800d3be:	5563      	strb	r3, [r4, r5]
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 800d3c0:	88a3      	ldrh	r3, [r4, #4]
 800d3c2:	4393      	bics	r3, r2
 800d3c4:	80a3      	strh	r3, [r4, #4]
            if( ((gNfcDev.disc.techs2Bail & RFAL_NFC_POLL_TECH_A) != 0U) && (gNfcDev.techsFound != 0U) )
 800d3c6:	8aa3      	ldrh	r3, [r4, #20]
 800d3c8:	07db      	lsls	r3, r3, #31
 800d3ca:	d5b4      	bpl.n	800d336 <rfalNfcWorker+0x18e>
            if( ((gNfcDev.disc.techs2Bail & RFAL_NFC_POLL_TECH_F) != 0U) && (gNfcDev.techsFound != 0U) )
 800d3cc:	8863      	ldrh	r3, [r4, #2]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d1a6      	bne.n	800d320 <rfalNfcWorker+0x178>
 800d3d2:	e7b0      	b.n	800d336 <rfalNfcWorker+0x18e>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 800d3d4:	2202      	movs	r2, #2
 800d3d6:	4213      	tst	r3, r2
 800d3d8:	d04e      	beq.n	800d478 <rfalNfcWorker+0x2d0>
 800d3da:	88a1      	ldrh	r1, [r4, #4]
 800d3dc:	4211      	tst	r1, r2
 800d3de:	d04b      	beq.n	800d478 <rfalNfcWorker+0x2d0>
        if( !gNfcDev.isTechInit )
 800d3e0:	4d1d      	ldr	r5, [pc, #116]	@ (800d458 <rfalNfcWorker+0x2b0>)
 800d3e2:	5d63      	ldrb	r3, [r4, r5]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d10d      	bne.n	800d404 <rfalNfcWorker+0x25c>
            RFAL_EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                      /* Initialize RFAL for NFC-B */
 800d3e8:	f002 fcc0 	bl	800fd6c <rfalNfcbPollerInitialize>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	d000      	beq.n	800d3f2 <rfalNfcWorker+0x24a>
 800d3f0:	e101      	b.n	800d5f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* As field is already On only starts GT timer */
 800d3f2:	f7f7 f88f 	bl	8004514 <rfalFieldOnAndStartGT>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d000      	beq.n	800d3fc <rfalNfcWorker+0x254>
 800d3fa:	e0fc      	b.n	800d5f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit    = true;
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	5562      	strb	r2, [r4, r5]
            gNfcDev.isOperOngoing = false;                                            /* No operation currently ongoing  */
 800d400:	4a19      	ldr	r2, [pc, #100]	@ (800d468 <rfalNfcWorker+0x2c0>)
 800d402:	54a0      	strb	r0, [r4, r2]
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 800d404:	f7f7 f87a 	bl	80044fc <rfalIsGTExpired>
 800d408:	2800      	cmp	r0, #0
 800d40a:	d100      	bne.n	800d40e <rfalNfcWorker+0x266>
 800d40c:	e793      	b.n	800d336 <rfalNfcWorker+0x18e>
            if( !gNfcDev.isOperOngoing )
 800d40e:	4e16      	ldr	r6, [pc, #88]	@ (800d468 <rfalNfcWorker+0x2c0>)
 800d410:	5da3      	ldrb	r3, [r4, r6]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d105      	bne.n	800d422 <rfalNfcWorker+0x27a>
                rfalNfcbPollerStartTechnologyDetection( gNfcDev.disc.compMode, &gNfcDev.sensbRes, &gNfcDev.sensbResLen );/* Poll for NFC-B devices */
 800d416:	4a16      	ldr	r2, [pc, #88]	@ (800d470 <rfalNfcWorker+0x2c8>)
 800d418:	4916      	ldr	r1, [pc, #88]	@ (800d474 <rfalNfcWorker+0x2cc>)
 800d41a:	7c20      	ldrb	r0, [r4, #16]
 800d41c:	f002 fd86 	bl	800ff2c <rfalNfcbPollerStartTechnologyDetection>
 800d420:	e7be      	b.n	800d3a0 <rfalNfcWorker+0x1f8>
            err = rfalNfcbPollerGetTechnologyDetectionStatus();
 800d422:	f002 fd8e 	bl	800ff42 <rfalNfcbPollerGetTechnologyDetectionStatus>
            if( err != RFAL_ERR_BUSY )
 800d426:	2802      	cmp	r0, #2
 800d428:	d00b      	beq.n	800d442 <rfalNfcWorker+0x29a>
                if( err == RFAL_ERR_NONE )
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d103      	bne.n	800d436 <rfalNfcWorker+0x28e>
                    gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 800d42e:	2302      	movs	r3, #2
 800d430:	8862      	ldrh	r2, [r4, #2]
 800d432:	4313      	orrs	r3, r2
 800d434:	8063      	strh	r3, [r4, #2]
                gNfcDev.isTechInit = false;
 800d436:	2300      	movs	r3, #0
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 800d438:	2202      	movs	r2, #2
                gNfcDev.isTechInit = false;
 800d43a:	5563      	strb	r3, [r4, r5]
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 800d43c:	88a3      	ldrh	r3, [r4, #4]
 800d43e:	4393      	bics	r3, r2
 800d440:	80a3      	strh	r3, [r4, #4]
            if( ((gNfcDev.disc.techs2Bail & RFAL_NFC_POLL_TECH_B) != 0U) && (gNfcDev.techsFound != 0U) )
 800d442:	8aa3      	ldrh	r3, [r4, #20]
 800d444:	079b      	lsls	r3, r3, #30
 800d446:	d4c1      	bmi.n	800d3cc <rfalNfcWorker+0x224>
 800d448:	e775      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d44a:	46c0      	nop			@ (mov r8, r8)
 800d44c:	20001c24 	.word	0x20001c24
 800d450:	0000032b 	.word	0x0000032b
 800d454:	20001cc2 	.word	0x20001cc2
 800d458:	00000329 	.word	0x00000329
 800d45c:	00001a90 	.word	0x00001a90
 800d460:	00063510 	.word	0x00063510
 800d464:	20001ce4 	.word	0x20001ce4
 800d468:	0000032a 	.word	0x0000032a
 800d46c:	20001f50 	.word	0x20001f50
 800d470:	20001f5f 	.word	0x20001f5f
 800d474:	20001f52 	.word	0x20001f52
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 800d478:	2204      	movs	r2, #4
 800d47a:	4213      	tst	r3, r2
 800d47c:	d036      	beq.n	800d4ec <rfalNfcWorker+0x344>
 800d47e:	88a1      	ldrh	r1, [r4, #4]
 800d480:	4211      	tst	r1, r2
 800d482:	d033      	beq.n	800d4ec <rfalNfcWorker+0x344>
        if( !gNfcDev.isTechInit )
 800d484:	4dbd      	ldr	r5, [pc, #756]	@ (800d77c <rfalNfcWorker+0x5d4>)
 800d486:	5d63      	ldrb	r3, [r4, r5]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d10e      	bne.n	800d4aa <rfalNfcWorker+0x302>
            RFAL_EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );/* Initialize RFAL for NFC-F */
 800d48c:	7ea0      	ldrb	r0, [r4, #26]
 800d48e:	f002 ff01 	bl	8010294 <rfalNfcfPollerInitialize>
 800d492:	2800      	cmp	r0, #0
 800d494:	d000      	beq.n	800d498 <rfalNfcWorker+0x2f0>
 800d496:	e0ae      	b.n	800d5f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                        /* As field is already On only starts GT timer */
 800d498:	f7f7 f83c 	bl	8004514 <rfalFieldOnAndStartGT>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d000      	beq.n	800d4a2 <rfalNfcWorker+0x2fa>
 800d4a0:	e0a9      	b.n	800d5f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit    = true;
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	5562      	strb	r2, [r4, r5]
            gNfcDev.isOperOngoing = false;                                           /* No operation currently ongoing  */
 800d4a6:	4ab6      	ldr	r2, [pc, #728]	@ (800d780 <rfalNfcWorker+0x5d8>)
 800d4a8:	54a0      	strb	r0, [r4, r2]
        if( rfalIsGTExpired() )                                                      /* Wait until Guard Time is fulfilled */
 800d4aa:	f7f7 f827 	bl	80044fc <rfalIsGTExpired>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d100      	bne.n	800d4b4 <rfalNfcWorker+0x30c>
 800d4b2:	e740      	b.n	800d336 <rfalNfcWorker+0x18e>
            if( !gNfcDev.isOperOngoing )
 800d4b4:	4eb2      	ldr	r6, [pc, #712]	@ (800d780 <rfalNfcWorker+0x5d8>)
 800d4b6:	5da3      	ldrb	r3, [r4, r6]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d102      	bne.n	800d4c2 <rfalNfcWorker+0x31a>
                rfalNfcfPollerStartCheckPresence();
 800d4bc:	f002 ff08 	bl	80102d0 <rfalNfcfPollerStartCheckPresence>
                gNfcDev.isOperOngoing = true;
 800d4c0:	e76e      	b.n	800d3a0 <rfalNfcWorker+0x1f8>
            err = rfalNfcfPollerGetCheckPresenceStatus();                            /* Poll for NFC-F devices */
 800d4c2:	f002 ff2b 	bl	801031c <rfalNfcfPollerGetCheckPresenceStatus>
            if( err != RFAL_ERR_BUSY )
 800d4c6:	2802      	cmp	r0, #2
 800d4c8:	d00b      	beq.n	800d4e2 <rfalNfcWorker+0x33a>
                if( err == RFAL_ERR_NONE )
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d103      	bne.n	800d4d6 <rfalNfcWorker+0x32e>
                    gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 800d4ce:	2304      	movs	r3, #4
 800d4d0:	8862      	ldrh	r2, [r4, #2]
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	8063      	strh	r3, [r4, #2]
                gNfcDev.isTechInit = false;
 800d4d6:	2300      	movs	r3, #0
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 800d4d8:	2204      	movs	r2, #4
                gNfcDev.isTechInit = false;
 800d4da:	5563      	strb	r3, [r4, r5]
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 800d4dc:	88a3      	ldrh	r3, [r4, #4]
 800d4de:	4393      	bics	r3, r2
 800d4e0:	80a3      	strh	r3, [r4, #4]
            if( ((gNfcDev.disc.techs2Bail & RFAL_NFC_POLL_TECH_F) != 0U) && (gNfcDev.techsFound != 0U) )
 800d4e2:	8aa3      	ldrh	r3, [r4, #20]
 800d4e4:	075b      	lsls	r3, r3, #29
 800d4e6:	d500      	bpl.n	800d4ea <rfalNfcWorker+0x342>
 800d4e8:	e770      	b.n	800d3cc <rfalNfcWorker+0x224>
 800d4ea:	e724      	b.n	800d336 <rfalNfcWorker+0x18e>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 800d4ec:	2208      	movs	r2, #8
 800d4ee:	4213      	tst	r3, r2
 800d4f0:	d025      	beq.n	800d53e <rfalNfcWorker+0x396>
 800d4f2:	88a1      	ldrh	r1, [r4, #4]
 800d4f4:	4211      	tst	r1, r2
 800d4f6:	d022      	beq.n	800d53e <rfalNfcWorker+0x396>
        if( !gNfcDev.isTechInit )
 800d4f8:	4da0      	ldr	r5, [pc, #640]	@ (800d77c <rfalNfcWorker+0x5d4>)
 800d4fa:	5d63      	ldrb	r3, [r4, r5]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d109      	bne.n	800d514 <rfalNfcWorker+0x36c>
            RFAL_EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                      /* Initialize RFAL for NFC-V */
 800d500:	f003 f828 	bl	8010554 <rfalNfcvPollerInitialize>
 800d504:	2800      	cmp	r0, #0
 800d506:	d176      	bne.n	800d5f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* As field is already On only starts GT timer */
 800d508:	f7f7 f804 	bl	8004514 <rfalFieldOnAndStartGT>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d172      	bne.n	800d5f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit = true;
 800d510:	2301      	movs	r3, #1
 800d512:	5563      	strb	r3, [r4, r5]
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 800d514:	f7f6 fff2 	bl	80044fc <rfalIsGTExpired>
 800d518:	2800      	cmp	r0, #0
 800d51a:	d100      	bne.n	800d51e <rfalNfcWorker+0x376>
 800d51c:	e70b      	b.n	800d336 <rfalNfcWorker+0x18e>
            err = rfalNfcvPollerCheckPresence( &invRes );                             /* Poll for NFC-V devices */
 800d51e:	a80b      	add	r0, sp, #44	@ 0x2c
 800d520:	f003 f876 	bl	8010610 <rfalNfcvPollerCheckPresence>
            if( err == RFAL_ERR_NONE )
 800d524:	2800      	cmp	r0, #0
 800d526:	d103      	bne.n	800d530 <rfalNfcWorker+0x388>
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 800d528:	2308      	movs	r3, #8
 800d52a:	8862      	ldrh	r2, [r4, #2]
 800d52c:	4313      	orrs	r3, r2
 800d52e:	8063      	strh	r3, [r4, #2]
            gNfcDev.isTechInit = false;
 800d530:	2300      	movs	r3, #0
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 800d532:	2208      	movs	r2, #8
            gNfcDev.isTechInit = false;
 800d534:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 800d536:	88a3      	ldrh	r3, [r4, #4]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800d538:	4393      	bics	r3, r2
 800d53a:	80a3      	strh	r3, [r4, #4]
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800d53c:	e6fb      	b.n	800d336 <rfalNfcWorker+0x18e>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 800d53e:	2220      	movs	r2, #32
 800d540:	4213      	tst	r3, r2
 800d542:	d023      	beq.n	800d58c <rfalNfcWorker+0x3e4>
 800d544:	88a1      	ldrh	r1, [r4, #4]
 800d546:	4211      	tst	r1, r2
 800d548:	d020      	beq.n	800d58c <rfalNfcWorker+0x3e4>
        if( !gNfcDev.isTechInit )
 800d54a:	4d8c      	ldr	r5, [pc, #560]	@ (800d77c <rfalNfcWorker+0x5d4>)
 800d54c:	5d63      	ldrb	r3, [r4, r5]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d109      	bne.n	800d566 <rfalNfcWorker+0x3be>
            RFAL_EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                    /* Initialize RFAL for NFC-V */
 800d552:	f003 fa05 	bl	8010960 <rfalSt25tbPollerInitialize>
 800d556:	2800      	cmp	r0, #0
 800d558:	d14d      	bne.n	800d5f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* As field is already On only starts GT timer */
 800d55a:	f7f6 ffdb 	bl	8004514 <rfalFieldOnAndStartGT>
 800d55e:	2800      	cmp	r0, #0
 800d560:	d149      	bne.n	800d5f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit = true;
 800d562:	2301      	movs	r3, #1
 800d564:	5563      	strb	r3, [r4, r5]
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 800d566:	f7f6 ffc9 	bl	80044fc <rfalIsGTExpired>
 800d56a:	2800      	cmp	r0, #0
 800d56c:	d100      	bne.n	800d570 <rfalNfcWorker+0x3c8>
 800d56e:	e6e2      	b.n	800d336 <rfalNfcWorker+0x18e>
            err = rfalSt25tbPollerCheckPresence( NULL );                              /* Poll for ST25TB devices */
 800d570:	2000      	movs	r0, #0
 800d572:	f003 fa1b 	bl	80109ac <rfalSt25tbPollerCheckPresence>
            if( err == RFAL_ERR_NONE )
 800d576:	2800      	cmp	r0, #0
 800d578:	d103      	bne.n	800d582 <rfalNfcWorker+0x3da>
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 800d57a:	2320      	movs	r3, #32
 800d57c:	8862      	ldrh	r2, [r4, #2]
 800d57e:	4313      	orrs	r3, r2
 800d580:	8063      	strh	r3, [r4, #2]
            gNfcDev.isTechInit = false;
 800d582:	2300      	movs	r3, #0
 800d584:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800d586:	2220      	movs	r2, #32
 800d588:	88a3      	ldrh	r3, [r4, #4]
 800d58a:	e7d5      	b.n	800d538 <rfalNfcWorker+0x390>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_PROP) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_PROP) != 0U) )
 800d58c:	2240      	movs	r2, #64	@ 0x40
 800d58e:	4213      	tst	r3, r2
 800d590:	d100      	bne.n	800d594 <rfalNfcWorker+0x3ec>
 800d592:	e6c5      	b.n	800d320 <rfalNfcWorker+0x178>
 800d594:	88a3      	ldrh	r3, [r4, #4]
 800d596:	4213      	tst	r3, r2
 800d598:	d100      	bne.n	800d59c <rfalNfcWorker+0x3f4>
 800d59a:	e6c1      	b.n	800d320 <rfalNfcWorker+0x178>
        if( !gNfcDev.isTechInit )
 800d59c:	4d77      	ldr	r5, [pc, #476]	@ (800d77c <rfalNfcWorker+0x5d4>)
 800d59e:	5d63      	ldrb	r3, [r4, r5]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d114      	bne.n	800d5ce <rfalNfcWorker+0x426>
            RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerInitialize() );                    /* Initialize RFAL for Proprietary NFC */
 800d5a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d108      	bne.n	800d5bc <rfalNfcWorker+0x414>
                    rfalFieldOff();
 800d5aa:	f7f7 f80b 	bl	80045c4 <rfalFieldOff>
                    gNfcDev.isFieldOn = false;
 800d5ae:	23ca      	movs	r3, #202	@ 0xca
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	54e2      	strb	r2, [r4, r3]
                    gNfcDev.state     = RFAL_NFC_STATE_LISTEN_TECHDETECT;             /* Nothing found as poller, go to listener */
 800d5b6:	2314      	movs	r3, #20
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 800d5b8:	7023      	strb	r3, [r4, #0]
 800d5ba:	e6bc      	b.n	800d336 <rfalNfcWorker+0x18e>
            RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerInitialize() );                    /* Initialize RFAL for Proprietary NFC */
 800d5bc:	4798      	blx	r3
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d119      	bne.n	800d5f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* As field may already be On only starts GT timer */
 800d5c2:	f7f6 ffa7 	bl	8004514 <rfalFieldOnAndStartGT>
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d115      	bne.n	800d5f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit = true;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	5563      	strb	r3, [r4, r5]
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 800d5ce:	f7f6 ff95 	bl	80044fc <rfalIsGTExpired>
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	d100      	bne.n	800d5d8 <rfalNfcWorker+0x430>
 800d5d6:	e6ae      	b.n	800d336 <rfalNfcWorker+0x18e>
            err = rfalNfcpCbPollerTechnologyDetection();                              /* Poll for devices */
 800d5d8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d006      	beq.n	800d5ec <rfalNfcWorker+0x444>
 800d5de:	4798      	blx	r3
            if( err == RFAL_ERR_NONE )
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	d103      	bne.n	800d5ec <rfalNfcWorker+0x444>
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_PROP;
 800d5e4:	2340      	movs	r3, #64	@ 0x40
 800d5e6:	8862      	ldrh	r2, [r4, #2]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	8063      	strh	r3, [r4, #2]
            gNfcDev.isTechInit = false;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_PROP;
 800d5f0:	2240      	movs	r2, #64	@ 0x40
 800d5f2:	88a3      	ldrh	r3, [r4, #4]
 800d5f4:	e7a0      	b.n	800d538 <rfalNfcWorker+0x390>
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800d5f6:	2802      	cmp	r0, #2
 800d5f8:	d1d7      	bne.n	800d5aa <rfalNfcWorker+0x402>
 800d5fa:	e69c      	b.n	800d336 <rfalNfcWorker+0x18e>
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 800d5fc:	23c6      	movs	r3, #198	@ 0xc6
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	5ce2      	ldrb	r2, [r4, r3]
 800d602:	7e23      	ldrb	r3, [r4, #24]
 800d604:	4293      	cmp	r3, r2
 800d606:	d800      	bhi.n	800d60a <rfalNfcWorker+0x462>
 800d608:	e1f9      	b.n	800d9fe <rfalNfcWorker+0x856>
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 800d60a:	2601      	movs	r6, #1
 800d60c:	8863      	ldrh	r3, [r4, #2]
 800d60e:	4233      	tst	r3, r6
 800d610:	d05c      	beq.n	800d6cc <rfalNfcWorker+0x524>
 800d612:	88a1      	ldrh	r1, [r4, #4]
 800d614:	4231      	tst	r1, r6
 800d616:	d059      	beq.n	800d6cc <rfalNfcWorker+0x524>
        if( !gNfcDev.isTechInit )
 800d618:	4d58      	ldr	r5, [pc, #352]	@ (800d77c <rfalNfcWorker+0x5d4>)
 800d61a:	5d63      	ldrb	r3, [r4, r5]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d10c      	bne.n	800d63a <rfalNfcWorker+0x492>
            RFAL_EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                       /* Initialize RFAL for NFC-A */
 800d620:	f001 ffbc 	bl	800f59c <rfalNfcaPollerInitialize>
 800d624:	2800      	cmp	r0, #0
 800d626:	d000      	beq.n	800d62a <rfalNfcWorker+0x482>
 800d628:	e1e5      	b.n	800d9f6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                          /* Turns the Field On and starts GT timer */
 800d62a:	f7f6 ff73 	bl	8004514 <rfalFieldOnAndStartGT>
 800d62e:	2800      	cmp	r0, #0
 800d630:	d000      	beq.n	800d634 <rfalNfcWorker+0x48c>
 800d632:	e1e0      	b.n	800d9f6 <rfalNfcWorker+0x84e>
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800d634:	4a52      	ldr	r2, [pc, #328]	@ (800d780 <rfalNfcWorker+0x5d8>)
            gNfcDev.isTechInit    = true;                                              /* Technology has been initialized */
 800d636:	5566      	strb	r6, [r4, r5]
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800d638:	54a0      	strb	r0, [r4, r2]
        if( !rfalIsGTExpired() )
 800d63a:	f7f6 ff5f 	bl	80044fc <rfalIsGTExpired>
 800d63e:	2800      	cmp	r0, #0
 800d640:	d100      	bne.n	800d644 <rfalNfcWorker+0x49c>
 800d642:	e678      	b.n	800d336 <rfalNfcWorker+0x18e>
        if( !gNfcDev.isOperOngoing )
 800d644:	4b4e      	ldr	r3, [pc, #312]	@ (800d780 <rfalNfcWorker+0x5d8>)
 800d646:	5ce3      	ldrb	r3, [r4, r3]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d111      	bne.n	800d670 <rfalNfcWorker+0x4c8>
            RFAL_EXIT_ON_ERR( err, rfalNfcaPollerStartFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt ) );
 800d64c:	20c6      	movs	r0, #198	@ 0xc6
 800d64e:	0080      	lsls	r0, r0, #2
 800d650:	5c20      	ldrb	r0, [r4, r0]
 800d652:	7e21      	ldrb	r1, [r4, #24]
 800d654:	4b4b      	ldr	r3, [pc, #300]	@ (800d784 <rfalNfcWorker+0x5dc>)
 800d656:	1a09      	subs	r1, r1, r0
 800d658:	4a4b      	ldr	r2, [pc, #300]	@ (800d788 <rfalNfcWorker+0x5e0>)
 800d65a:	7c20      	ldrb	r0, [r4, #16]
 800d65c:	b2c9      	uxtb	r1, r1
 800d65e:	f002 f963 	bl	800f928 <rfalNfcaPollerStartFullCollisionResolution>
 800d662:	2800      	cmp	r0, #0
 800d664:	d000      	beq.n	800d668 <rfalNfcWorker+0x4c0>
 800d666:	e1c6      	b.n	800d9f6 <rfalNfcWorker+0x84e>
            gNfcDev.isOperOngoing = true;
 800d668:	2201      	movs	r2, #1
 800d66a:	4b45      	ldr	r3, [pc, #276]	@ (800d780 <rfalNfcWorker+0x5d8>)
                    gNfcDev.isOperOngoing = false;
 800d66c:	54e2      	strb	r2, [r4, r3]
            if( err != RFAL_ERR_BUSY )                                                     /* Wait until all Activation is complete */
 800d66e:	e662      	b.n	800d336 <rfalNfcWorker+0x18e>
        err = rfalNfcaPollerGetFullCollisionResolutionStatus();
 800d670:	f002 fac0 	bl	800fbf4 <rfalNfcaPollerGetFullCollisionResolutionStatus>
        if( err != RFAL_ERR_BUSY )
 800d674:	2802      	cmp	r0, #2
 800d676:	d100      	bne.n	800d67a <rfalNfcWorker+0x4d2>
 800d678:	e65d      	b.n	800d336 <rfalNfcWorker+0x18e>
            gNfcDev.isTechInit = false;
 800d67a:	2300      	movs	r3, #0
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 800d67c:	2201      	movs	r2, #1
            gNfcDev.isTechInit = false;
 800d67e:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 800d680:	88a3      	ldrh	r3, [r4, #4]
 800d682:	4393      	bics	r3, r2
 800d684:	80a3      	strh	r3, [r4, #4]
            if( (err == RFAL_ERR_NONE) && (devCnt != 0U) )
 800d686:	2800      	cmp	r0, #0
 800d688:	d000      	beq.n	800d68c <rfalNfcWorker+0x4e4>
 800d68a:	e654      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d68c:	4b3d      	ldr	r3, [pc, #244]	@ (800d784 <rfalNfcWorker+0x5dc>)
 800d68e:	781d      	ldrb	r5, [r3, #0]
 800d690:	2d00      	cmp	r5, #0
 800d692:	d100      	bne.n	800d696 <rfalNfcWorker+0x4ee>
 800d694:	e64f      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d696:	23c6      	movs	r3, #198	@ 0xc6
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	5ce6      	ldrb	r6, [r4, r3]
 800d69c:	4f3a      	ldr	r7, [pc, #232]	@ (800d788 <rfalNfcWorker+0x5e0>)
 800d69e:	19ad      	adds	r5, r5, r6
 800d6a0:	b2ed      	uxtb	r5, r5
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 800d6a2:	2078      	movs	r0, #120	@ 0x78
 800d6a4:	4370      	muls	r0, r6
 800d6a6:	1820      	adds	r0, r4, r0
 800d6a8:	0003      	movs	r3, r0
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	33c0      	adds	r3, #192	@ 0xc0
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 800d6ae:	3601      	adds	r6, #1
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 800d6b0:	0039      	movs	r1, r7
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 800d6b2:	701a      	strb	r2, [r3, #0]
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 800d6b4:	30c1      	adds	r0, #193	@ 0xc1
 800d6b6:	3216      	adds	r2, #22
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 800d6b8:	b2f6      	uxtb	r6, r6
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 800d6ba:	f005 fe2f 	bl	801331c <memcpy>
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 800d6be:	3716      	adds	r7, #22
 800d6c0:	42ae      	cmp	r6, r5
 800d6c2:	d1ee      	bne.n	800d6a2 <rfalNfcWorker+0x4fa>
 800d6c4:	23c6      	movs	r3, #198	@ 0xc6
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	54e5      	strb	r5, [r4, r3]
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800d6ca:	e634      	b.n	800d336 <rfalNfcWorker+0x18e>
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 800d6cc:	2102      	movs	r1, #2
 800d6ce:	420b      	tst	r3, r1
 800d6d0:	d05e      	beq.n	800d790 <rfalNfcWorker+0x5e8>
 800d6d2:	88a0      	ldrh	r0, [r4, #4]
 800d6d4:	4208      	tst	r0, r1
 800d6d6:	d05b      	beq.n	800d790 <rfalNfcWorker+0x5e8>
        if( !gNfcDev.isTechInit )
 800d6d8:	4d28      	ldr	r5, [pc, #160]	@ (800d77c <rfalNfcWorker+0x5d4>)
 800d6da:	5d63      	ldrb	r3, [r4, r5]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10d      	bne.n	800d6fc <rfalNfcWorker+0x554>
            RFAL_EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                        /* Initialize RFAL for NFC-B */
 800d6e0:	f002 fb44 	bl	800fd6c <rfalNfcbPollerInitialize>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d000      	beq.n	800d6ea <rfalNfcWorker+0x542>
 800d6e8:	e185      	b.n	800d9f6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                          /* Ensure GT again as other technologies have also been polled */
 800d6ea:	f7f6 ff13 	bl	8004514 <rfalFieldOnAndStartGT>
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d000      	beq.n	800d6f4 <rfalNfcWorker+0x54c>
 800d6f2:	e180      	b.n	800d9f6 <rfalNfcWorker+0x84e>
            gNfcDev.isTechInit    = true;
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	5562      	strb	r2, [r4, r5]
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800d6f8:	4a21      	ldr	r2, [pc, #132]	@ (800d780 <rfalNfcWorker+0x5d8>)
 800d6fa:	54a0      	strb	r0, [r4, r2]
        if( !rfalIsGTExpired() )
 800d6fc:	f7f6 fefe 	bl	80044fc <rfalIsGTExpired>
 800d700:	2800      	cmp	r0, #0
 800d702:	d100      	bne.n	800d706 <rfalNfcWorker+0x55e>
 800d704:	e617      	b.n	800d336 <rfalNfcWorker+0x18e>
        if( !gNfcDev.isOperOngoing )
 800d706:	4b1e      	ldr	r3, [pc, #120]	@ (800d780 <rfalNfcWorker+0x5d8>)
 800d708:	5ce3      	ldrb	r3, [r4, r3]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d10b      	bne.n	800d726 <rfalNfcWorker+0x57e>
            RFAL_EXIT_ON_ERR( err, rfalNfcbPollerStartCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt ) );
 800d70e:	20c6      	movs	r0, #198	@ 0xc6
 800d710:	0080      	lsls	r0, r0, #2
 800d712:	5c20      	ldrb	r0, [r4, r0]
 800d714:	7e21      	ldrb	r1, [r4, #24]
 800d716:	4b1b      	ldr	r3, [pc, #108]	@ (800d784 <rfalNfcWorker+0x5dc>)
 800d718:	1a09      	subs	r1, r1, r0
 800d71a:	4a1c      	ldr	r2, [pc, #112]	@ (800d78c <rfalNfcWorker+0x5e4>)
 800d71c:	7c20      	ldrb	r0, [r4, #16]
 800d71e:	b2c9      	uxtb	r1, r1
 800d720:	f002 fc3c 	bl	800ff9c <rfalNfcbPollerStartCollisionResolution>
 800d724:	e79d      	b.n	800d662 <rfalNfcWorker+0x4ba>
        err = rfalNfcbPollerGetCollisionResolutionStatus();
 800d726:	f002 fc47 	bl	800ffb8 <rfalNfcbPollerGetCollisionResolutionStatus>
        if( err != RFAL_ERR_BUSY )
 800d72a:	2802      	cmp	r0, #2
 800d72c:	d100      	bne.n	800d730 <rfalNfcWorker+0x588>
 800d72e:	e602      	b.n	800d336 <rfalNfcWorker+0x18e>
            gNfcDev.isTechInit = false;
 800d730:	2300      	movs	r3, #0
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 800d732:	2202      	movs	r2, #2
            gNfcDev.isTechInit = false;
 800d734:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 800d736:	88a3      	ldrh	r3, [r4, #4]
 800d738:	4393      	bics	r3, r2
 800d73a:	80a3      	strh	r3, [r4, #4]
            if( (err == RFAL_ERR_NONE) && (devCnt != 0U) )
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d000      	beq.n	800d742 <rfalNfcWorker+0x59a>
 800d740:	e5f9      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d742:	4b10      	ldr	r3, [pc, #64]	@ (800d784 <rfalNfcWorker+0x5dc>)
 800d744:	781d      	ldrb	r5, [r3, #0]
 800d746:	2d00      	cmp	r5, #0
 800d748:	d100      	bne.n	800d74c <rfalNfcWorker+0x5a4>
 800d74a:	e5f4      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d74c:	23c6      	movs	r3, #198	@ 0xc6
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	5ce6      	ldrb	r6, [r4, r3]
 800d752:	4f0e      	ldr	r7, [pc, #56]	@ (800d78c <rfalNfcWorker+0x5e4>)
 800d754:	19ad      	adds	r5, r5, r6
 800d756:	b2ed      	uxtb	r5, r5
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 800d758:	2078      	movs	r0, #120	@ 0x78
 800d75a:	4370      	muls	r0, r6
 800d75c:	1820      	adds	r0, r4, r0
 800d75e:	0003      	movs	r3, r0
 800d760:	2201      	movs	r2, #1
 800d762:	33c0      	adds	r3, #192	@ 0xc0
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 800d764:	3601      	adds	r6, #1
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 800d766:	0039      	movs	r1, r7
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 800d768:	701a      	strb	r2, [r3, #0]
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 800d76a:	30c1      	adds	r0, #193	@ 0xc1
 800d76c:	320e      	adds	r2, #14
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 800d76e:	b2f6      	uxtb	r6, r6
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 800d770:	f005 fdd4 	bl	801331c <memcpy>
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 800d774:	370f      	adds	r7, #15
 800d776:	42ae      	cmp	r6, r5
 800d778:	d1ee      	bne.n	800d758 <rfalNfcWorker+0x5b0>
 800d77a:	e7a3      	b.n	800d6c4 <rfalNfcWorker+0x51c>
 800d77c:	00000329 	.word	0x00000329
 800d780:	0000032a 	.word	0x0000032a
 800d784:	20001bb3 	.word	0x20001bb3
 800d788:	20001bb4 	.word	0x20001bb4
 800d78c:	20001b68 	.word	0x20001b68
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 800d790:	2104      	movs	r1, #4
 800d792:	420b      	tst	r3, r1
 800d794:	d055      	beq.n	800d842 <rfalNfcWorker+0x69a>
 800d796:	88a0      	ldrh	r0, [r4, #4]
 800d798:	4208      	tst	r0, r1
 800d79a:	d052      	beq.n	800d842 <rfalNfcWorker+0x69a>
        if( !gNfcDev.isTechInit )
 800d79c:	4dc1      	ldr	r5, [pc, #772]	@ (800daa4 <rfalNfcWorker+0x8fc>)
 800d79e:	5d63      	ldrb	r3, [r4, r5]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10e      	bne.n	800d7c2 <rfalNfcWorker+0x61a>
            RFAL_EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));   /* Initialize RFAL for NFC-F */
 800d7a4:	7ea0      	ldrb	r0, [r4, #26]
 800d7a6:	f002 fd75 	bl	8010294 <rfalNfcfPollerInitialize>
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d000      	beq.n	800d7b0 <rfalNfcWorker+0x608>
 800d7ae:	e122      	b.n	800d9f6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                          /* Ensure GT again as other technologies have also been polled */
 800d7b0:	f7f6 feb0 	bl	8004514 <rfalFieldOnAndStartGT>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	d000      	beq.n	800d7ba <rfalNfcWorker+0x612>
 800d7b8:	e11d      	b.n	800d9f6 <rfalNfcWorker+0x84e>
            gNfcDev.isTechInit    = true;
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	5562      	strb	r2, [r4, r5]
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800d7be:	4aba      	ldr	r2, [pc, #744]	@ (800daa8 <rfalNfcWorker+0x900>)
 800d7c0:	54a0      	strb	r0, [r4, r2]
        if( !rfalIsGTExpired() )
 800d7c2:	f7f6 fe9b 	bl	80044fc <rfalIsGTExpired>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d100      	bne.n	800d7cc <rfalNfcWorker+0x624>
 800d7ca:	e5b4      	b.n	800d336 <rfalNfcWorker+0x18e>
        if( !gNfcDev.isOperOngoing )
 800d7cc:	4bb6      	ldr	r3, [pc, #728]	@ (800daa8 <rfalNfcWorker+0x900>)
 800d7ce:	5ce3      	ldrb	r3, [r4, r3]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10b      	bne.n	800d7ec <rfalNfcWorker+0x644>
            RFAL_EXIT_ON_ERR( err, rfalNfcfPollerStartCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt ) );
 800d7d4:	20c6      	movs	r0, #198	@ 0xc6
 800d7d6:	0080      	lsls	r0, r0, #2
 800d7d8:	5c20      	ldrb	r0, [r4, r0]
 800d7da:	7e21      	ldrb	r1, [r4, #24]
 800d7dc:	4bb3      	ldr	r3, [pc, #716]	@ (800daac <rfalNfcWorker+0x904>)
 800d7de:	1a09      	subs	r1, r1, r0
 800d7e0:	4ab3      	ldr	r2, [pc, #716]	@ (800dab0 <rfalNfcWorker+0x908>)
 800d7e2:	7c20      	ldrb	r0, [r4, #16]
 800d7e4:	b2c9      	uxtb	r1, r1
 800d7e6:	f002 fd9d 	bl	8010324 <rfalNfcfPollerStartCollisionResolution>
 800d7ea:	e73a      	b.n	800d662 <rfalNfcWorker+0x4ba>
        err = rfalNfcfPollerGetCollisionResolutionStatus();
 800d7ec:	f002 fdc0 	bl	8010370 <rfalNfcfPollerGetCollisionResolutionStatus>
        if( err != RFAL_ERR_BUSY )
 800d7f0:	2802      	cmp	r0, #2
 800d7f2:	d100      	bne.n	800d7f6 <rfalNfcWorker+0x64e>
 800d7f4:	e59f      	b.n	800d336 <rfalNfcWorker+0x18e>
            gNfcDev.isTechInit = false;
 800d7f6:	2300      	movs	r3, #0
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 800d7f8:	2204      	movs	r2, #4
            gNfcDev.isTechInit = false;
 800d7fa:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 800d7fc:	88a3      	ldrh	r3, [r4, #4]
 800d7fe:	4393      	bics	r3, r2
 800d800:	80a3      	strh	r3, [r4, #4]
            if( (err == RFAL_ERR_NONE) && (devCnt != 0U) )
 800d802:	2800      	cmp	r0, #0
 800d804:	d000      	beq.n	800d808 <rfalNfcWorker+0x660>
 800d806:	e596      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d808:	4ba8      	ldr	r3, [pc, #672]	@ (800daac <rfalNfcWorker+0x904>)
 800d80a:	781d      	ldrb	r5, [r3, #0]
 800d80c:	2d00      	cmp	r5, #0
 800d80e:	d100      	bne.n	800d812 <rfalNfcWorker+0x66a>
 800d810:	e591      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d812:	23c6      	movs	r3, #198	@ 0xc6
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	5ce6      	ldrb	r6, [r4, r3]
 800d818:	4fa5      	ldr	r7, [pc, #660]	@ (800dab0 <rfalNfcWorker+0x908>)
 800d81a:	19ad      	adds	r5, r5, r6
 800d81c:	b2ed      	uxtb	r5, r5
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 800d81e:	2078      	movs	r0, #120	@ 0x78
 800d820:	4370      	muls	r0, r6
 800d822:	1820      	adds	r0, r4, r0
 800d824:	0003      	movs	r3, r0
 800d826:	2202      	movs	r2, #2
 800d828:	33c0      	adds	r3, #192	@ 0xc0
                for( i=0; i<devCnt; i++ )                                              /* Copy devices found form local Nfcf list into global device list */
 800d82a:	3601      	adds	r6, #1
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 800d82c:	0039      	movs	r1, r7
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 800d82e:	701a      	strb	r2, [r3, #0]
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 800d830:	30c1      	adds	r0, #193	@ 0xc1
 800d832:	3212      	adds	r2, #18
                for( i=0; i<devCnt; i++ )                                              /* Copy devices found form local Nfcf list into global device list */
 800d834:	b2f6      	uxtb	r6, r6
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 800d836:	f005 fd71 	bl	801331c <memcpy>
                for( i=0; i<devCnt; i++ )                                              /* Copy devices found form local Nfcf list into global device list */
 800d83a:	3714      	adds	r7, #20
 800d83c:	42b5      	cmp	r5, r6
 800d83e:	d1ee      	bne.n	800d81e <rfalNfcWorker+0x676>
 800d840:	e740      	b.n	800d6c4 <rfalNfcWorker+0x51c>
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 800d842:	2108      	movs	r1, #8
 800d844:	420b      	tst	r3, r1
 800d846:	d049      	beq.n	800d8dc <rfalNfcWorker+0x734>
 800d848:	88a0      	ldrh	r0, [r4, #4]
 800d84a:	4208      	tst	r0, r1
 800d84c:	d046      	beq.n	800d8dc <rfalNfcWorker+0x734>
        if( !gNfcDev.isTechInit )
 800d84e:	4d95      	ldr	r5, [pc, #596]	@ (800daa4 <rfalNfcWorker+0x8fc>)
 800d850:	5d63      	ldrb	r3, [r4, r5]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d10b      	bne.n	800d86e <rfalNfcWorker+0x6c6>
            RFAL_EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                       /* Initialize RFAL for NFC-V */
 800d856:	f002 fe7d 	bl	8010554 <rfalNfcvPollerInitialize>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d000      	beq.n	800d860 <rfalNfcWorker+0x6b8>
 800d85e:	e0ca      	b.n	800d9f6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* Ensure GT again as other technologies have also been polled */
 800d860:	f7f6 fe58 	bl	8004514 <rfalFieldOnAndStartGT>
 800d864:	2800      	cmp	r0, #0
 800d866:	d000      	beq.n	800d86a <rfalNfcWorker+0x6c2>
 800d868:	e0c5      	b.n	800d9f6 <rfalNfcWorker+0x84e>
            gNfcDev.isTechInit = true;
 800d86a:	2301      	movs	r3, #1
 800d86c:	5563      	strb	r3, [r4, r5]
        if( !rfalIsGTExpired() )
 800d86e:	f7f6 fe45 	bl	80044fc <rfalIsGTExpired>
 800d872:	2800      	cmp	r0, #0
 800d874:	d100      	bne.n	800d878 <rfalNfcWorker+0x6d0>
 800d876:	e55e      	b.n	800d336 <rfalNfcWorker+0x18e>
        devCnt             = 0;
 800d878:	2000      	movs	r0, #0
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 800d87a:	2208      	movs	r2, #8
        gNfcDev.isTechInit = false;
 800d87c:	5560      	strb	r0, [r4, r5]
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 800d87e:	25c6      	movs	r5, #198	@ 0xc6
        devCnt             = 0;
 800d880:	4e8a      	ldr	r6, [pc, #552]	@ (800daac <rfalNfcWorker+0x904>)
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 800d882:	00ad      	lsls	r5, r5, #2
        devCnt             = 0;
 800d884:	7030      	strb	r0, [r6, #0]
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 800d886:	88a3      	ldrh	r3, [r4, #4]
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 800d888:	7e21      	ldrb	r1, [r4, #24]
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 800d88a:	4393      	bics	r3, r2
 800d88c:	80a3      	strh	r3, [r4, #4]
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 800d88e:	5d63      	ldrb	r3, [r4, r5]
 800d890:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d892:	1ac9      	subs	r1, r1, r3
 800d894:	b2c9      	uxtb	r1, r1
 800d896:	0033      	movs	r3, r6
 800d898:	f002 fece 	bl	8010638 <rfalNfcvPollerCollisionResolution>
        if( (err == RFAL_ERR_NONE) && (devCnt != 0U) )
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d000      	beq.n	800d8a2 <rfalNfcWorker+0x6fa>
 800d8a0:	e549      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d8a2:	7833      	ldrb	r3, [r6, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d100      	bne.n	800d8aa <rfalNfcWorker+0x702>
 800d8a8:	e545      	b.n	800d336 <rfalNfcWorker+0x18e>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 800d8aa:	2778      	movs	r7, #120	@ 0x78
 800d8ac:	5d65      	ldrb	r5, [r4, r5]
 800d8ae:	ae0b      	add	r6, sp, #44	@ 0x2c
 800d8b0:	195b      	adds	r3, r3, r5
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	9305      	str	r3, [sp, #20]
 800d8b6:	0038      	movs	r0, r7
 800d8b8:	4368      	muls	r0, r5
 800d8ba:	1820      	adds	r0, r4, r0
 800d8bc:	0003      	movs	r3, r0
 800d8be:	2203      	movs	r2, #3
 800d8c0:	33c0      	adds	r3, #192	@ 0xc0
 800d8c2:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 800d8c4:	0031      	movs	r1, r6
 800d8c6:	30c1      	adds	r0, #193	@ 0xc1
 800d8c8:	320a      	adds	r2, #10
 800d8ca:	f005 fd27 	bl	801331c <memcpy>
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 800d8ce:	3501      	adds	r5, #1
 800d8d0:	9b05      	ldr	r3, [sp, #20]
 800d8d2:	b2ed      	uxtb	r5, r5
 800d8d4:	360d      	adds	r6, #13
 800d8d6:	429d      	cmp	r5, r3
 800d8d8:	d1ed      	bne.n	800d8b6 <rfalNfcWorker+0x70e>
 800d8da:	e6f3      	b.n	800d6c4 <rfalNfcWorker+0x51c>
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 800d8dc:	2120      	movs	r1, #32
 800d8de:	420b      	tst	r3, r1
 800d8e0:	d045      	beq.n	800d96e <rfalNfcWorker+0x7c6>
 800d8e2:	88a0      	ldrh	r0, [r4, #4]
 800d8e4:	4208      	tst	r0, r1
 800d8e6:	d042      	beq.n	800d96e <rfalNfcWorker+0x7c6>
        if( !gNfcDev.isTechInit )
 800d8e8:	4d6e      	ldr	r5, [pc, #440]	@ (800daa4 <rfalNfcWorker+0x8fc>)
 800d8ea:	5d63      	ldrb	r3, [r4, r5]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10a      	bne.n	800d906 <rfalNfcWorker+0x75e>
            RFAL_EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                    /* Initialize RFAL for ST25TB */
 800d8f0:	f003 f836 	bl	8010960 <rfalSt25tbPollerInitialize>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d000      	beq.n	800d8fa <rfalNfcWorker+0x752>
 800d8f8:	e07d      	b.n	800d9f6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* Ensure GT again as other technologies have also been polled */
 800d8fa:	f7f6 fe0b 	bl	8004514 <rfalFieldOnAndStartGT>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d179      	bne.n	800d9f6 <rfalNfcWorker+0x84e>
            gNfcDev.isTechInit = true;
 800d902:	2301      	movs	r3, #1
 800d904:	5563      	strb	r3, [r4, r5]
        if( !rfalIsGTExpired() )
 800d906:	f7f6 fdf9 	bl	80044fc <rfalIsGTExpired>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d100      	bne.n	800d910 <rfalNfcWorker+0x768>
 800d90e:	e512      	b.n	800d336 <rfalNfcWorker+0x18e>
        devCnt             = 0;
 800d910:	2300      	movs	r3, #0
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800d912:	2220      	movs	r2, #32
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 800d914:	27c6      	movs	r7, #198	@ 0xc6
        devCnt             = 0;
 800d916:	4e65      	ldr	r6, [pc, #404]	@ (800daac <rfalNfcWorker+0x904>)
        gNfcDev.isTechInit = false;
 800d918:	5563      	strb	r3, [r4, r5]
        devCnt             = 0;
 800d91a:	7033      	strb	r3, [r6, #0]
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800d91c:	88a3      	ldrh	r3, [r4, #4]
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 800d91e:	00bf      	lsls	r7, r7, #2
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800d920:	4393      	bics	r3, r2
 800d922:	80a3      	strh	r3, [r4, #4]
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 800d924:	7e20      	ldrb	r0, [r4, #24]
 800d926:	5de3      	ldrb	r3, [r4, r7]
 800d928:	0032      	movs	r2, r6
 800d92a:	1ac0      	subs	r0, r0, r3
 800d92c:	b2c0      	uxtb	r0, r0
 800d92e:	a90b      	add	r1, sp, #44	@ 0x2c
 800d930:	f003 f8d2 	bl	8010ad8 <rfalSt25tbPollerCollisionResolution>
        if( (err == RFAL_ERR_NONE) && (devCnt != 0U) )
 800d934:	2800      	cmp	r0, #0
 800d936:	d000      	beq.n	800d93a <rfalNfcWorker+0x792>
 800d938:	e4fd      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d93a:	7835      	ldrb	r5, [r6, #0]
 800d93c:	2d00      	cmp	r5, #0
 800d93e:	d100      	bne.n	800d942 <rfalNfcWorker+0x79a>
 800d940:	e4f9      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d942:	5de6      	ldrb	r6, [r4, r7]
 800d944:	af0b      	add	r7, sp, #44	@ 0x2c
 800d946:	19ad      	adds	r5, r5, r6
 800d948:	b2ed      	uxtb	r5, r5
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 800d94a:	2078      	movs	r0, #120	@ 0x78
 800d94c:	4370      	muls	r0, r6
 800d94e:	1820      	adds	r0, r4, r0
 800d950:	0003      	movs	r3, r0
 800d952:	2204      	movs	r2, #4
 800d954:	33c0      	adds	r3, #192	@ 0xc0
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 800d956:	3601      	adds	r6, #1
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 800d958:	0039      	movs	r1, r7
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 800d95a:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 800d95c:	30c1      	adds	r0, #193	@ 0xc1
 800d95e:	3206      	adds	r2, #6
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 800d960:	b2f6      	uxtb	r6, r6
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 800d962:	f005 fcdb 	bl	801331c <memcpy>
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 800d966:	370a      	adds	r7, #10
 800d968:	42b5      	cmp	r5, r6
 800d96a:	d1ee      	bne.n	800d94a <rfalNfcWorker+0x7a2>
 800d96c:	e6aa      	b.n	800d6c4 <rfalNfcWorker+0x51c>
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_PROP) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_PROP) != 0U) )   /* If a device was found/detected, perform Collision Resolution */
 800d96e:	2140      	movs	r1, #64	@ 0x40
 800d970:	420b      	tst	r3, r1
 800d972:	d044      	beq.n	800d9fe <rfalNfcWorker+0x856>
 800d974:	88a3      	ldrh	r3, [r4, #4]
 800d976:	420b      	tst	r3, r1
 800d978:	d041      	beq.n	800d9fe <rfalNfcWorker+0x856>
        if( !gNfcDev.isTechInit )
 800d97a:	4d4a      	ldr	r5, [pc, #296]	@ (800daa4 <rfalNfcWorker+0x8fc>)
 800d97c:	5d63      	ldrb	r3, [r4, r5]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d112      	bne.n	800d9a8 <rfalNfcWorker+0x800>
            RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerInitialize() );                     /* Initialize RFAL for Proprietary NFC */
 800d982:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d984:	2b00      	cmp	r3, #0
 800d986:	d104      	bne.n	800d992 <rfalNfcWorker+0x7ea>
                    gNfcDev.deactType = RFAL_NFC_DEACTIVATE_DISCOVERY;
 800d988:	2202      	movs	r2, #2
 800d98a:	4b4a      	ldr	r3, [pc, #296]	@ (800dab4 <rfalNfcWorker+0x90c>)
 800d98c:	54e2      	strb	r2, [r4, r3]
                    gNfcDev.state     = RFAL_NFC_STATE_DEACTIVATION;
 800d98e:	2322      	movs	r3, #34	@ 0x22
 800d990:	e612      	b.n	800d5b8 <rfalNfcWorker+0x410>
            RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerInitialize() );                     /* Initialize RFAL for Proprietary NFC */
 800d992:	4798      	blx	r3
 800d994:	2800      	cmp	r0, #0
 800d996:	d12e      	bne.n	800d9f6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                          /* Turns the Field On and starts GT timer */
 800d998:	f7f6 fdbc 	bl	8004514 <rfalFieldOnAndStartGT>
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d12a      	bne.n	800d9f6 <rfalNfcWorker+0x84e>
            gNfcDev.isTechInit    = true;                                              /* Technology has been initialized */
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	5562      	strb	r2, [r4, r5]
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800d9a4:	4a40      	ldr	r2, [pc, #256]	@ (800daa8 <rfalNfcWorker+0x900>)
 800d9a6:	54a0      	strb	r0, [r4, r2]
        if( !rfalIsGTExpired() )
 800d9a8:	f7f6 fda8 	bl	80044fc <rfalIsGTExpired>
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	d100      	bne.n	800d9b2 <rfalNfcWorker+0x80a>
 800d9b0:	e4c1      	b.n	800d336 <rfalNfcWorker+0x18e>
        if( !gNfcDev.isOperOngoing )
 800d9b2:	4b3d      	ldr	r3, [pc, #244]	@ (800daa8 <rfalNfcWorker+0x900>)
 800d9b4:	5ce3      	ldrb	r3, [r4, r3]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d104      	bne.n	800d9c4 <rfalNfcWorker+0x81c>
            RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerStartCollisionResolution() );
 800d9ba:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d0e3      	beq.n	800d988 <rfalNfcWorker+0x7e0>
 800d9c0:	4798      	blx	r3
 800d9c2:	e64e      	b.n	800d662 <rfalNfcWorker+0x4ba>
        err = rfalNfcpCbPollerGetCollisionResolutionStatus();
 800d9c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d013      	beq.n	800d9f2 <rfalNfcWorker+0x84a>
 800d9ca:	4798      	blx	r3
        if( err != RFAL_ERR_BUSY )
 800d9cc:	2802      	cmp	r0, #2
 800d9ce:	d100      	bne.n	800d9d2 <rfalNfcWorker+0x82a>
 800d9d0:	e4b1      	b.n	800d336 <rfalNfcWorker+0x18e>
            gNfcDev.isTechInit = false;
 800d9d2:	2300      	movs	r3, #0
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_PROP;
 800d9d4:	2240      	movs	r2, #64	@ 0x40
            gNfcDev.isTechInit = false;
 800d9d6:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_PROP;
 800d9d8:	88a3      	ldrh	r3, [r4, #4]
 800d9da:	4393      	bics	r3, r2
 800d9dc:	80a3      	strh	r3, [r4, #4]
            if( err == RFAL_ERR_NONE )
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d000      	beq.n	800d9e4 <rfalNfcWorker+0x83c>
 800d9e2:	e4a8      	b.n	800d336 <rfalNfcWorker+0x18e>
                gNfcDev.devCnt = 1;                                                   /* Device list held by caller */
 800d9e4:	23c6      	movs	r3, #198	@ 0xc6
 800d9e6:	3a3f      	subs	r2, #63	@ 0x3f
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	54e2      	strb	r2, [r4, r3]
                gNfcDev.devList[0].type = RFAL_NFC_LISTEN_TYPE_PROP;
 800d9ec:	2306      	movs	r3, #6
 800d9ee:	34c0      	adds	r4, #192	@ 0xc0
 800d9f0:	e5e2      	b.n	800d5b8 <rfalNfcWorker+0x410>
        err = rfalNfcpCbPollerGetCollisionResolutionStatus();
 800d9f2:	2018      	movs	r0, #24
 800d9f4:	e7ed      	b.n	800d9d2 <rfalNfcWorker+0x82a>
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800d9f6:	2802      	cmp	r0, #2
 800d9f8:	d100      	bne.n	800d9fc <rfalNfcWorker+0x854>
 800d9fa:	e49c      	b.n	800d336 <rfalNfcWorker+0x18e>
 800d9fc:	e7c4      	b.n	800d988 <rfalNfcWorker+0x7e0>
                if( (err != RFAL_ERR_NONE) || (gNfcDev.devCnt == 0U) )                /* Check if any error occurred or no devices were found */
 800d9fe:	2a00      	cmp	r2, #0
 800da00:	d0c2      	beq.n	800d988 <rfalNfcWorker+0x7e0>
                if( gNfcDev.devCnt > 1U )
 800da02:	2a01      	cmp	r2, #1
 800da04:	d008      	beq.n	800da18 <rfalNfcWorker+0x870>
                    if( gNfcDev.disc.notifyCb != NULL )
 800da06:	0023      	movs	r3, r4
 800da08:	3398      	adds	r3, #152	@ 0x98
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d003      	beq.n	800da18 <rfalNfcWorker+0x870>
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 800da10:	200c      	movs	r0, #12
 800da12:	7020      	strb	r0, [r4, #0]
                        rfalNfcNfcNotify( gNfcDev.state );
 800da14:	f7ff fc2b 	bl	800d26e <rfalNfcWorker+0xc6>
                gNfcDev.selDevIdx = 0U;
 800da18:	2300      	movs	r3, #0
 800da1a:	7263      	strb	r3, [r4, #9]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 800da1c:	330d      	adds	r3, #13
 800da1e:	e5cb      	b.n	800d5b8 <rfalNfcWorker+0x410>
    if( devIt > gNfcDev.devCnt )
 800da20:	23c6      	movs	r3, #198	@ 0xc6
 800da22:	009b      	lsls	r3, r3, #2
            err = rfalNfcPollActivation( gNfcDev.selDevIdx );
 800da24:	7a66      	ldrb	r6, [r4, #9]
    if( devIt > gNfcDev.devCnt )
 800da26:	5ce3      	ldrb	r3, [r4, r3]
 800da28:	42b3      	cmp	r3, r6
 800da2a:	d200      	bcs.n	800da2e <rfalNfcWorker+0x886>
 800da2c:	e0bb      	b.n	800dba6 <rfalNfcWorker+0x9fe>
    switch( gNfcDev.devList[devIt].type )
 800da2e:	2378      	movs	r3, #120	@ 0x78
 800da30:	001a      	movs	r2, r3
 800da32:	4372      	muls	r2, r6
 800da34:	18a2      	adds	r2, r4, r2
 800da36:	32c0      	adds	r2, #192	@ 0xc0
 800da38:	7812      	ldrb	r2, [r2, #0]
 800da3a:	9205      	str	r2, [sp, #20]
 800da3c:	2a06      	cmp	r2, #6
 800da3e:	d900      	bls.n	800da42 <rfalNfcWorker+0x89a>
 800da40:	e0b1      	b.n	800dba6 <rfalNfcWorker+0x9fe>
 800da42:	0010      	movs	r0, r2
 800da44:	f7f2 fb86 	bl	8000154 <__gnu_thumb1_case_uhi>
 800da48:	00e90022 	.word	0x00e90022
 800da4c:	01830154 	.word	0x01830154
 800da50:	00070191 	.word	0x00070191
 800da54:	019a      	.short	0x019a
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 800da56:	4373      	muls	r3, r6
 800da58:	18e2      	adds	r2, r4, r3
 800da5a:	0011      	movs	r1, r2
 800da5c:	33e2      	adds	r3, #226	@ 0xe2
 800da5e:	18e3      	adds	r3, r4, r3
 800da60:	31d8      	adds	r1, #216	@ 0xd8
 800da62:	600b      	str	r3, [r1, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 800da64:	230a      	movs	r3, #10
 800da66:	32dc      	adds	r2, #220	@ 0xdc
 800da68:	7013      	strb	r3, [r2, #0]
    gNfcDev.activeDev     = &gNfcDev.devList[devIt];                                  /* Assign active device to be used further on */
 800da6a:	2378      	movs	r3, #120	@ 0x78
    gNfcDev.isOperOngoing = false;
 800da6c:	2200      	movs	r2, #0
                gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                             /* Device has been properly activated    */
 800da6e:	201e      	movs	r0, #30
    gNfcDev.activeDev     = &gNfcDev.devList[devIt];                                  /* Assign active device to be used further on */
 800da70:	4373      	muls	r3, r6
 800da72:	33c0      	adds	r3, #192	@ 0xc0
 800da74:	18e3      	adds	r3, r4, r3
 800da76:	60e3      	str	r3, [r4, #12]
    gNfcDev.isOperOngoing = false;
 800da78:	4b0b      	ldr	r3, [pc, #44]	@ (800daa8 <rfalNfcWorker+0x900>)
 800da7a:	54e2      	strb	r2, [r4, r3]
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800da7c:	7020      	strb	r0, [r4, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller             */
 800da7e:	3498      	adds	r4, #152	@ 0x98
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	4293      	cmp	r3, r2
 800da84:	d001      	beq.n	800da8a <rfalNfcWorker+0x8e2>
 800da86:	f7ff fbf2 	bl	800d26e <rfalNfcWorker+0xc6>
 800da8a:	e454      	b.n	800d336 <rfalNfcWorker+0x18e>
            if( !gNfcDev.isTechInit )
 800da8c:	4d05      	ldr	r5, [pc, #20]	@ (800daa4 <rfalNfcWorker+0x8fc>)
 800da8e:	5d67      	ldrb	r7, [r4, r5]
 800da90:	2f00      	cmp	r7, #0
 800da92:	d111      	bne.n	800dab8 <rfalNfcWorker+0x910>
                rfalNfcaPollerInitialize();
 800da94:	f001 fd82 	bl	800f59c <rfalNfcaPollerInitialize>
                gNfcDev.isTechInit    = true;
 800da98:	2301      	movs	r3, #1
 800da9a:	5563      	strb	r3, [r4, r5]
                gNfcDev.isOperOngoing = false;
 800da9c:	4b02      	ldr	r3, [pc, #8]	@ (800daa8 <rfalNfcWorker+0x900>)
 800da9e:	54e7      	strb	r7, [r4, r3]
            if( err != RFAL_ERR_BUSY )                                                     /* Wait until all Activation is complete */
 800daa0:	e449      	b.n	800d336 <rfalNfcWorker+0x18e>
 800daa2:	46c0      	nop			@ (mov r8, r8)
 800daa4:	00000329 	.word	0x00000329
 800daa8:	0000032a 	.word	0x0000032a
 800daac:	20001bb3 	.word	0x20001bb3
 800dab0:	20001b04 	.word	0x20001b04
 800dab4:	00000322 	.word	0x00000322
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 800dab8:	2578      	movs	r5, #120	@ 0x78
 800daba:	4375      	muls	r5, r6
 800dabc:	1967      	adds	r7, r4, r5
 800dabe:	003b      	movs	r3, r7
 800dac0:	33d6      	adds	r3, #214	@ 0xd6
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d038      	beq.n	800db3a <rfalNfcWorker+0x992>
                if( !gNfcDev.isOperOngoing )
 800dac8:	4bd3      	ldr	r3, [pc, #844]	@ (800de18 <rfalNfcWorker+0xc70>)
 800daca:	5ce3      	ldrb	r3, [r4, r3]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d116      	bne.n	800dafe <rfalNfcWorker+0x956>
                    RFAL_EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &gNfcDev.sensRes ) );
 800dad0:	2052      	movs	r0, #82	@ 0x52
 800dad2:	49d2      	ldr	r1, [pc, #840]	@ (800de1c <rfalNfcWorker+0xc74>)
 800dad4:	f001 fd7e 	bl	800f5d4 <rfalNfcaPollerCheckPresence>
 800dad8:	2800      	cmp	r0, #0
 800dada:	d10b      	bne.n	800daf4 <rfalNfcWorker+0x94c>
                    RFAL_EXIT_ON_ERR( err, rfalNfcaPollerStartSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &gNfcDev.devList[devIt].dev.nfca.selRes ) ); 
 800dadc:	002a      	movs	r2, r5
 800dade:	37c5      	adds	r7, #197	@ 0xc5
 800dae0:	32c4      	adds	r2, #196	@ 0xc4
 800dae2:	35c6      	adds	r5, #198	@ 0xc6
 800dae4:	7839      	ldrb	r1, [r7, #0]
 800dae6:	18a2      	adds	r2, r4, r2
 800dae8:	1960      	adds	r0, r4, r5
 800daea:	f001 ff9f 	bl	800fa2c <rfalNfcaPollerStartSelect>
                RFAL_EXIT_ON_ERR( err, rfalNfcpCbStartActivation() );
 800daee:	2800      	cmp	r0, #0
 800daf0:	d100      	bne.n	800daf4 <rfalNfcWorker+0x94c>
 800daf2:	e5b9      	b.n	800d668 <rfalNfcWorker+0x4c0>
            if( err != RFAL_ERR_BUSY )                                                     /* Wait until all Activation is complete */
 800daf4:	2802      	cmp	r0, #2
 800daf6:	d101      	bne.n	800dafc <rfalNfcWorker+0x954>
 800daf8:	f7ff fc1d 	bl	800d336 <rfalNfcWorker+0x18e>
 800dafc:	e053      	b.n	800dba6 <rfalNfcWorker+0x9fe>
                    RFAL_EXIT_ON_ERR( err, rfalNfcaPollerGetSelectStatus() ); 
 800dafe:	f001 ffb5 	bl	800fa6c <rfalNfcaPollerGetSelectStatus>
 800db02:	2800      	cmp	r0, #0
 800db04:	d1f6      	bne.n	800daf4 <rfalNfcWorker+0x94c>
                    for( devIdx = 0; devIdx < gNfcDev.devCnt; devIdx++ )
 800db06:	23c6      	movs	r3, #198	@ 0xc6
                            gNfcDev.devList[devIdx].dev.nfca.isSleep = true;
 800db08:	2101      	movs	r1, #1
                    for( devIdx = 0; devIdx < gNfcDev.devCnt; devIdx++ )
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	5ce2      	ldrb	r2, [r4, r3]
 800db0e:	4bc4      	ldr	r3, [pc, #784]	@ (800de20 <rfalNfcWorker+0xc78>)
 800db10:	9805      	ldr	r0, [sp, #20]
 800db12:	4290      	cmp	r0, r2
 800db14:	d107      	bne.n	800db26 <rfalNfcWorker+0x97e>
                    gNfcDev.devList[devIt].dev.nfca.isSleep = false;
 800db16:	2378      	movs	r3, #120	@ 0x78
 800db18:	2200      	movs	r2, #0
 800db1a:	4373      	muls	r3, r6
 800db1c:	18e3      	adds	r3, r4, r3
 800db1e:	33d6      	adds	r3, #214	@ 0xd6
 800db20:	701a      	strb	r2, [r3, #0]
                    gNfcDev.isOperOngoing = false;
 800db22:	4bbd      	ldr	r3, [pc, #756]	@ (800de18 <rfalNfcWorker+0xc70>)
 800db24:	e5a2      	b.n	800d66c <rfalNfcWorker+0x4c4>
                        if( gNfcDev.devList[devIdx].type == RFAL_NFC_LISTEN_TYPE_NFCA )
 800db26:	7818      	ldrb	r0, [r3, #0]
 800db28:	2800      	cmp	r0, #0
 800db2a:	d100      	bne.n	800db2e <rfalNfcWorker+0x986>
                            gNfcDev.devList[devIdx].dev.nfca.isSleep = true;
 800db2c:	7599      	strb	r1, [r3, #22]
                    for( devIdx = 0; devIdx < gNfcDev.devCnt; devIdx++ )
 800db2e:	9805      	ldr	r0, [sp, #20]
 800db30:	3378      	adds	r3, #120	@ 0x78
 800db32:	3001      	adds	r0, #1
 800db34:	b2c0      	uxtb	r0, r0
 800db36:	9005      	str	r0, [sp, #20]
 800db38:	e7ea      	b.n	800db10 <rfalNfcWorker+0x968>
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 800db3a:	002b      	movs	r3, r5
 800db3c:	003a      	movs	r2, r7
 800db3e:	33c6      	adds	r3, #198	@ 0xc6
 800db40:	18e3      	adds	r3, r4, r3
 800db42:	32d8      	adds	r2, #216	@ 0xd8
 800db44:	6013      	str	r3, [r2, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 800db46:	003b      	movs	r3, r7
 800db48:	0039      	movs	r1, r7
 800db4a:	33c5      	adds	r3, #197	@ 0xc5
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	31dc      	adds	r1, #220	@ 0xdc
 800db50:	700b      	strb	r3, [r1, #0]
            nfcaType = gNfcDev.devList[devIt].dev.nfca.type;
 800db52:	003b      	movs	r3, r7
 800db54:	33c1      	adds	r3, #193	@ 0xc1
 800db56:	781b      	ldrb	r3, [r3, #0]
            if( nfcaType == RFAL_NFCA_T4T_NFCDEP )
 800db58:	2b60      	cmp	r3, #96	@ 0x60
 800db5a:	d11d      	bne.n	800db98 <rfalNfcWorker+0x9f0>
                nfcaType = ( (gNfcDev.disc.p2pNfcaPrio) ? RFAL_NFCA_NFCDEP : RFAL_NFCA_T4T);
 800db5c:	0023      	movs	r3, r4
 800db5e:	3357      	adds	r3, #87	@ 0x57
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d12e      	bne.n	800dbc4 <rfalNfcWorker+0xa1c>
                    if( !gNfcDev.isOperOngoing )
 800db66:	4bac      	ldr	r3, [pc, #688]	@ (800de18 <rfalNfcWorker+0xc70>)
 800db68:	5ce7      	ldrb	r7, [r4, r3]
 800db6a:	2f00      	cmp	r7, #0
 800db6c:	d149      	bne.n	800dc02 <rfalNfcWorker+0xa5a>
                        rfalIsoDepInitializeWithParams( gNfcDev.disc.compMode, RFAL_ISODEP_MAX_R_RETRYS, RFAL_ISODEP_MAX_WTX_NACK_RETRYS, RFAL_ISODEP_MAX_WTX_RETRYS, RFAL_ISODEP_MAX_DSL_RETRYS, RFAL_ISODEP_MAX_I_RETRYS, RFAL_ISODEP_RATS_RETRIES);
 800db6e:	2301      	movs	r3, #1
 800db70:	2203      	movs	r2, #3
 800db72:	7c20      	ldrb	r0, [r4, #16]
 800db74:	9302      	str	r3, [sp, #8]
 800db76:	18db      	adds	r3, r3, r3
 800db78:	0011      	movs	r1, r2
 800db7a:	9301      	str	r3, [sp, #4]
 800db7c:	9700      	str	r7, [sp, #0]
 800db7e:	3312      	adds	r3, #18
 800db80:	f7fe f8e0 	bl	800bd44 <rfalIsoDepInitializeWithParams>
                        RFAL_EXIT_ON_ERR( err, rfalIsoDepPollAStartActivation( gNfcDev.disc.isoDepFS, RFAL_ISODEP_NO_DID, gNfcDev.disc.maxBR, &gNfcDev.devList[devIt].proto.isoDep ) );
 800db84:	0021      	movs	r1, r4
 800db86:	35e0      	adds	r5, #224	@ 0xe0
 800db88:	3170      	adds	r1, #112	@ 0x70
 800db8a:	7e62      	ldrb	r2, [r4, #25]
 800db8c:	7808      	ldrb	r0, [r1, #0]
 800db8e:	1963      	adds	r3, r4, r5
 800db90:	0039      	movs	r1, r7
 800db92:	f7fe fd0d 	bl	800c5b0 <rfalIsoDepPollAStartActivation>
 800db96:	e7aa      	b.n	800daee <rfalNfcWorker+0x946>
            switch( nfcaType )
 800db98:	2b20      	cmp	r3, #32
 800db9a:	d0e4      	beq.n	800db66 <rfalNfcWorker+0x9be>
 800db9c:	d810      	bhi.n	800dbc0 <rfalNfcWorker+0xa18>
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d02c      	beq.n	800dbfc <rfalNfcWorker+0xa54>
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d024      	beq.n	800dbf0 <rfalNfcWorker+0xa48>
                    if( (gNfcDev.devCnt > 1U) && (gNfcDev.disc.notifyCb != NULL) )
 800dba6:	23c6      	movs	r3, #198	@ 0xc6
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	5ce3      	ldrb	r3, [r4, r3]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d800      	bhi.n	800dbb2 <rfalNfcWorker+0xa0a>
 800dbb0:	e6ea      	b.n	800d988 <rfalNfcWorker+0x7e0>
 800dbb2:	0023      	movs	r3, r4
 800dbb4:	3398      	adds	r3, #152	@ 0x98
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d000      	beq.n	800dbbe <rfalNfcWorker+0xa16>
 800dbbc:	e728      	b.n	800da10 <rfalNfcWorker+0x868>
 800dbbe:	e6e3      	b.n	800d988 <rfalNfcWorker+0x7e0>
            switch( nfcaType )
 800dbc0:	2b40      	cmp	r3, #64	@ 0x40
 800dbc2:	d1f0      	bne.n	800dba6 <rfalNfcWorker+0x9fe>
                    RFAL_EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 800dbc4:	0028      	movs	r0, r5
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	30c0      	adds	r0, #192	@ 0xc0
 800dbca:	001a      	movs	r2, r3
 800dbcc:	0019      	movs	r1, r3
 800dbce:	1820      	adds	r0, r4, r0
 800dbd0:	f7ff f852 	bl	800cc78 <rfalNfcNfcDepActivate>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d18d      	bne.n	800daf4 <rfalNfcWorker+0x94c>
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 800dbd8:	2378      	movs	r3, #120	@ 0x78
 800dbda:	4373      	muls	r3, r6
 800dbdc:	18e3      	adds	r3, r4, r3
 800dbde:	001a      	movs	r2, r3
 800dbe0:	35e2      	adds	r5, #226	@ 0xe2
 800dbe2:	32d8      	adds	r2, #216	@ 0xd8
 800dbe4:	1965      	adds	r5, r4, r5
 800dbe6:	6015      	str	r5, [r2, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800dbe8:	4a8e      	ldr	r2, [pc, #568]	@ (800de24 <rfalNfcWorker+0xc7c>)
 800dbea:	33dc      	adds	r3, #220	@ 0xdc
            gNfcDev.devList[devIt].nfcidLen = 0;
 800dbec:	801a      	strh	r2, [r3, #0]
            break;
 800dbee:	e73c      	b.n	800da6a <rfalNfcWorker+0x8c2>
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 800dbf0:	2304      	movs	r3, #4
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 800dbf2:	35d2      	adds	r5, #210	@ 0xd2
 800dbf4:	1965      	adds	r5, r4, r5
 800dbf6:	6015      	str	r5, [r2, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 800dbf8:	800b      	strh	r3, [r1, #0]
                    break;
 800dbfa:	e736      	b.n	800da6a <rfalNfcWorker+0x8c2>
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 800dbfc:	37dd      	adds	r7, #221	@ 0xdd
 800dbfe:	703b      	strb	r3, [r7, #0]
                    break;
 800dc00:	e733      	b.n	800da6a <rfalNfcWorker+0x8c2>
                    err = rfalIsoDepPollAGetActivationStatus();
 800dc02:	f7fe fcf7 	bl	800c5f4 <rfalIsoDepPollAGetActivationStatus>
                    if( err != RFAL_ERR_NONE )
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d000      	beq.n	800dc0c <rfalNfcWorker+0xa64>
 800dc0a:	e773      	b.n	800daf4 <rfalNfcWorker+0x94c>
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 800dc0c:	2378      	movs	r3, #120	@ 0x78
 800dc0e:	2201      	movs	r2, #1
 800dc10:	4373      	muls	r3, r6
 800dc12:	18e3      	adds	r3, r4, r3
 800dc14:	33dd      	adds	r3, #221	@ 0xdd
 800dc16:	701a      	strb	r2, [r3, #0]
                    break;
 800dc18:	e727      	b.n	800da6a <rfalNfcWorker+0x8c2>
            if( !gNfcDev.isTechInit )
 800dc1a:	4f83      	ldr	r7, [pc, #524]	@ (800de28 <rfalNfcWorker+0xc80>)
 800dc1c:	5de5      	ldrb	r5, [r4, r7]
 800dc1e:	2d00      	cmp	r5, #0
 800dc20:	d116      	bne.n	800dc50 <rfalNfcWorker+0xaa8>
                rfalNfcbPollerInitialize();
 800dc22:	f002 f8a3 	bl	800fd6c <rfalNfcbPollerInitialize>
                gNfcDev.isTechInit    = true;
 800dc26:	2301      	movs	r3, #1
 800dc28:	55e3      	strb	r3, [r4, r7]
                gNfcDev.isOperOngoing = false;
 800dc2a:	4b7b      	ldr	r3, [pc, #492]	@ (800de18 <rfalNfcWorker+0xc70>)
 800dc2c:	54e5      	strb	r5, [r4, r3]
                if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                         /* Check if desired device is in Sleep */
 800dc2e:	2378      	movs	r3, #120	@ 0x78
 800dc30:	4373      	muls	r3, r6
 800dc32:	18e3      	adds	r3, r4, r3
 800dc34:	33cf      	adds	r3, #207	@ 0xcf
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d101      	bne.n	800dc40 <rfalNfcWorker+0xa98>
 800dc3c:	f7ff fb7b 	bl	800d336 <rfalNfcWorker+0x18e>
                    rfalNfcbPollerStartCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &gNfcDev.sensbRes, &gNfcDev.sensbResLen );
 800dc40:	0029      	movs	r1, r5
 800dc42:	4b7a      	ldr	r3, [pc, #488]	@ (800de2c <rfalNfcWorker+0xc84>)
 800dc44:	4a7a      	ldr	r2, [pc, #488]	@ (800de30 <rfalNfcWorker+0xc88>)
 800dc46:	2008      	movs	r0, #8
 800dc48:	f002 f8ae 	bl	800fda8 <rfalNfcbPollerStartCheckPresence>
            if( err != RFAL_ERR_BUSY )                                                     /* Wait until all Activation is complete */
 800dc4c:	f7ff fb73 	bl	800d336 <rfalNfcWorker+0x18e>
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is still in Sleep */
 800dc50:	2578      	movs	r5, #120	@ 0x78
 800dc52:	4375      	muls	r5, r6
 800dc54:	1965      	adds	r5, r4, r5
 800dc56:	35cf      	adds	r5, #207	@ 0xcf
 800dc58:	782b      	ldrb	r3, [r5, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d007      	beq.n	800dc6e <rfalNfcWorker+0xac6>
                RFAL_EXIT_ON_BUSY( err, rfalNfcbPollerGetCheckPresenceStatus() );
 800dc5e:	f002 f8db 	bl	800fe18 <rfalNfcbPollerGetCheckPresenceStatus>
 800dc62:	2802      	cmp	r0, #2
 800dc64:	d101      	bne.n	800dc6a <rfalNfcWorker+0xac2>
 800dc66:	f7ff fb66 	bl	800d336 <rfalNfcWorker+0x18e>
                gNfcDev.devList[devIt].dev.nfcb.isSleep = false;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	702b      	strb	r3, [r5, #0]
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 800dc6e:	2378      	movs	r3, #120	@ 0x78
 800dc70:	4373      	muls	r3, r6
 800dc72:	18e5      	adds	r5, r4, r3
 800dc74:	002a      	movs	r2, r5
 800dc76:	9305      	str	r3, [sp, #20]
 800dc78:	33c3      	adds	r3, #195	@ 0xc3
 800dc7a:	32d8      	adds	r2, #216	@ 0xd8
 800dc7c:	18e3      	adds	r3, r4, r3
 800dc7e:	6013      	str	r3, [r2, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 800dc80:	002b      	movs	r3, r5
 800dc82:	2204      	movs	r2, #4
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 800dc84:	2101      	movs	r1, #1
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 800dc86:	33dc      	adds	r3, #220	@ 0xdc
 800dc88:	701a      	strb	r2, [r3, #0]
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 800dc8a:	3b10      	subs	r3, #16
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	3a03      	subs	r2, #3
 800dc90:	401a      	ands	r2, r3
 800dc92:	420b      	tst	r3, r1
 800dc94:	d029      	beq.n	800dcea <rfalNfcWorker+0xb42>
                if( !gNfcDev.isOperOngoing )
 800dc96:	4b60      	ldr	r3, [pc, #384]	@ (800de18 <rfalNfcWorker+0xc70>)
 800dc98:	5ce7      	ldrb	r7, [r4, r3]
 800dc9a:	2f00      	cmp	r7, #0
 800dc9c:	d11c      	bne.n	800dcd8 <rfalNfcWorker+0xb30>
                    rfalIsoDepInitializeWithParams( gNfcDev.disc.compMode, RFAL_ISODEP_MAX_R_RETRYS, RFAL_ISODEP_MAX_WTX_NACK_RETRYS, RFAL_ISODEP_MAX_WTX_RETRYS, RFAL_ISODEP_MAX_DSL_RETRYS, RFAL_ISODEP_MAX_I_RETRYS, RFAL_ISODEP_RATS_RETRIES);
 800dc9e:	2203      	movs	r2, #3
 800dca0:	2302      	movs	r3, #2
 800dca2:	7c20      	ldrb	r0, [r4, #16]
 800dca4:	9102      	str	r1, [sp, #8]
 800dca6:	9301      	str	r3, [sp, #4]
 800dca8:	0011      	movs	r1, r2
 800dcaa:	9700      	str	r7, [sp, #0]
 800dcac:	3312      	adds	r3, #18
 800dcae:	f7fe f849 	bl	800bd44 <rfalIsoDepInitializeWithParams>
                    RFAL_EXIT_ON_ERR( err, rfalIsoDepPollBStartActivation( gNfcDev.disc.isoDepFS, RFAL_ISODEP_NO_DID, gNfcDev.disc.maxBR, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 800dcb2:	0023      	movs	r3, r4
 800dcb4:	3370      	adds	r3, #112	@ 0x70
 800dcb6:	7818      	ldrb	r0, [r3, #0]
 800dcb8:	9b05      	ldr	r3, [sp, #20]
 800dcba:	7e62      	ldrb	r2, [r4, #25]
 800dcbc:	33e0      	adds	r3, #224	@ 0xe0
 800dcbe:	18e3      	adds	r3, r4, r3
 800dcc0:	9303      	str	r3, [sp, #12]
 800dcc2:	9b05      	ldr	r3, [sp, #20]
 800dcc4:	0039      	movs	r1, r7
 800dcc6:	33c1      	adds	r3, #193	@ 0xc1
 800dcc8:	18e3      	adds	r3, r4, r3
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	9702      	str	r7, [sp, #8]
 800dcce:	003b      	movs	r3, r7
 800dcd0:	9701      	str	r7, [sp, #4]
 800dcd2:	f7fe fd6f 	bl	800c7b4 <rfalIsoDepPollBStartActivation>
 800dcd6:	e70a      	b.n	800daee <rfalNfcWorker+0x946>
                err = rfalIsoDepPollBGetActivationStatus();
 800dcd8:	f7fe fdfe 	bl	800c8d8 <rfalIsoDepPollBGetActivationStatus>
                if( err != RFAL_ERR_NONE )
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	d000      	beq.n	800dce2 <rfalNfcWorker+0xb3a>
 800dce0:	e708      	b.n	800daf4 <rfalNfcWorker+0x94c>
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 800dce2:	2301      	movs	r3, #1
 800dce4:	35dd      	adds	r5, #221	@ 0xdd
 800dce6:	702b      	strb	r3, [r5, #0]
                break;
 800dce8:	e6bf      	b.n	800da6a <rfalNfcWorker+0x8c2>
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 800dcea:	35dd      	adds	r5, #221	@ 0xdd
 800dcec:	702a      	strb	r2, [r5, #0]
            break;
 800dcee:	e6bc      	b.n	800da6a <rfalNfcWorker+0x8c2>
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 800dcf0:	2578      	movs	r5, #120	@ 0x78
 800dcf2:	4375      	muls	r5, r6
 800dcf4:	7ea0      	ldrb	r0, [r4, #26]
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 800dcf6:	1967      	adds	r7, r4, r5
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 800dcf8:	f002 facc 	bl	8010294 <rfalNfcfPollerInitialize>
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 800dcfc:	003b      	movs	r3, r7
 800dcfe:	33c3      	adds	r3, #195	@ 0xc3
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d118      	bne.n	800dd38 <rfalNfcWorker+0xb90>
 800dd06:	003b      	movs	r3, r7
 800dd08:	33c4      	adds	r3, #196	@ 0xc4
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2bfe      	cmp	r3, #254	@ 0xfe
 800dd0e:	d113      	bne.n	800dd38 <rfalNfcWorker+0xb90>
                RFAL_EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 800dd10:	0028      	movs	r0, r5
 800dd12:	2300      	movs	r3, #0
 800dd14:	30c0      	adds	r0, #192	@ 0xc0
 800dd16:	001a      	movs	r2, r3
 800dd18:	0019      	movs	r1, r3
 800dd1a:	1820      	adds	r0, r4, r0
 800dd1c:	f7fe ffac 	bl	800cc78 <rfalNfcNfcDepActivate>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d000      	beq.n	800dd26 <rfalNfcWorker+0xb7e>
 800dd24:	e6e6      	b.n	800daf4 <rfalNfcWorker+0x94c>
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 800dd26:	003b      	movs	r3, r7
 800dd28:	35e2      	adds	r5, #226	@ 0xe2
 800dd2a:	33d8      	adds	r3, #216	@ 0xd8
 800dd2c:	1965      	adds	r5, r4, r5
 800dd2e:	601d      	str	r5, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800dd30:	4b3c      	ldr	r3, [pc, #240]	@ (800de24 <rfalNfcWorker+0xc7c>)
 800dd32:	37dc      	adds	r7, #220	@ 0xdc
 800dd34:	803b      	strh	r3, [r7, #0]
                break;
 800dd36:	e698      	b.n	800da6a <rfalNfcWorker+0x8c2>
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 800dd38:	2378      	movs	r3, #120	@ 0x78
 800dd3a:	4373      	muls	r3, r6
 800dd3c:	18e3      	adds	r3, r4, r3
 800dd3e:	001a      	movs	r2, r3
 800dd40:	35c3      	adds	r5, #195	@ 0xc3
 800dd42:	32d8      	adds	r2, #216	@ 0xd8
 800dd44:	1965      	adds	r5, r4, r5
 800dd46:	6015      	str	r5, [r2, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 800dd48:	33dc      	adds	r3, #220	@ 0xdc
 800dd4a:	2208      	movs	r2, #8
 800dd4c:	e74e      	b.n	800dbec <rfalNfcWorker+0xa44>
            rfalNfcvPollerInitialize();
 800dd4e:	f002 fc01 	bl	8010554 <rfalNfcvPollerInitialize>
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 800dd52:	2378      	movs	r3, #120	@ 0x78
 800dd54:	4373      	muls	r3, r6
 800dd56:	18e2      	adds	r2, r4, r3
 800dd58:	0011      	movs	r1, r2
 800dd5a:	33c3      	adds	r3, #195	@ 0xc3
 800dd5c:	31d8      	adds	r1, #216	@ 0xd8
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 800dd5e:	18e3      	adds	r3, r4, r3
 800dd60:	600b      	str	r3, [r1, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 800dd62:	2308      	movs	r3, #8
 800dd64:	32dc      	adds	r2, #220	@ 0xdc
 800dd66:	8013      	strh	r3, [r2, #0]
            break;
 800dd68:	e67f      	b.n	800da6a <rfalNfcWorker+0x8c2>
            rfalSt25tbPollerInitialize();
 800dd6a:	f002 fdf9 	bl	8010960 <rfalSt25tbPollerInitialize>
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 800dd6e:	2378      	movs	r3, #120	@ 0x78
 800dd70:	4373      	muls	r3, r6
 800dd72:	18e2      	adds	r2, r4, r3
 800dd74:	0011      	movs	r1, r2
 800dd76:	33c2      	adds	r3, #194	@ 0xc2
 800dd78:	31d8      	adds	r1, #216	@ 0xd8
 800dd7a:	e7f0      	b.n	800dd5e <rfalNfcWorker+0xbb6>
            if( !gNfcDev.isTechInit )
 800dd7c:	4d2a      	ldr	r5, [pc, #168]	@ (800de28 <rfalNfcWorker+0xc80>)
 800dd7e:	5d63      	ldrb	r3, [r4, r5]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d10d      	bne.n	800dda0 <rfalNfcWorker+0xbf8>
                RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerInitialize() );
 800dd84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d100      	bne.n	800dd8c <rfalNfcWorker+0xbe4>
 800dd8a:	e70c      	b.n	800dba6 <rfalNfcWorker+0x9fe>
 800dd8c:	4798      	blx	r3
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d000      	beq.n	800dd94 <rfalNfcWorker+0xbec>
 800dd92:	e6af      	b.n	800daf4 <rfalNfcWorker+0x94c>
                gNfcDev.isTechInit    = true;
 800dd94:	2201      	movs	r2, #1
 800dd96:	5562      	strb	r2, [r4, r5]
                gNfcDev.isOperOngoing = false;
 800dd98:	4a1f      	ldr	r2, [pc, #124]	@ (800de18 <rfalNfcWorker+0xc70>)
 800dd9a:	54a0      	strb	r0, [r4, r2]
            if( err != RFAL_ERR_BUSY )                                                     /* Wait until all Activation is complete */
 800dd9c:	f7ff facb 	bl	800d336 <rfalNfcWorker+0x18e>
            if( !gNfcDev.isOperOngoing )
 800dda0:	4b1d      	ldr	r3, [pc, #116]	@ (800de18 <rfalNfcWorker+0xc70>)
 800dda2:	5ce3      	ldrb	r3, [r4, r3]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d105      	bne.n	800ddb4 <rfalNfcWorker+0xc0c>
                RFAL_EXIT_ON_ERR( err, rfalNfcpCbStartActivation() );
 800dda8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d100      	bne.n	800ddb0 <rfalNfcWorker+0xc08>
 800ddae:	e6fa      	b.n	800dba6 <rfalNfcWorker+0x9fe>
 800ddb0:	4798      	blx	r3
 800ddb2:	e69c      	b.n	800daee <rfalNfcWorker+0x946>
            err = rfalNfcpCbGetActivationStatus();
 800ddb4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d100      	bne.n	800ddbc <rfalNfcWorker+0xc14>
 800ddba:	e6f4      	b.n	800dba6 <rfalNfcWorker+0x9fe>
 800ddbc:	4798      	blx	r3
 800ddbe:	1e02      	subs	r2, r0, #0
            if( err != RFAL_ERR_NONE )
 800ddc0:	d000      	beq.n	800ddc4 <rfalNfcWorker+0xc1c>
 800ddc2:	e697      	b.n	800daf4 <rfalNfcWorker+0x94c>
            gNfcDev.devList[devIt].nfcid = NULL;
 800ddc4:	2378      	movs	r3, #120	@ 0x78
 800ddc6:	4373      	muls	r3, r6
 800ddc8:	18e3      	adds	r3, r4, r3
 800ddca:	0019      	movs	r1, r3
 800ddcc:	31d8      	adds	r1, #216	@ 0xd8
 800ddce:	6008      	str	r0, [r1, #0]
            gNfcDev.devList[devIt].nfcidLen = 0;
 800ddd0:	33dc      	adds	r3, #220	@ 0xdc
 800ddd2:	e70b      	b.n	800dbec <rfalNfcWorker+0xa44>
            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 800ddd4:	f7ff f998 	bl	800d108 <rfalNfcDataExchangeGetStatus>
            if( gNfcDev.dataExErr != RFAL_ERR_BUSY )                                  /* If Dataexchange has terminated */
 800ddd8:	23c8      	movs	r3, #200	@ 0xc8
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	5ae3      	ldrh	r3, [r4, r3]
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	d101      	bne.n	800dde6 <rfalNfcWorker+0xc3e>
 800dde2:	f7ff faa8 	bl	800d336 <rfalNfcWorker+0x18e>
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800dde6:	0023      	movs	r3, r4
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 800dde8:	2021      	movs	r0, #33	@ 0x21
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800ddea:	3398      	adds	r3, #152	@ 0x98
 800ddec:	681b      	ldr	r3, [r3, #0]
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 800ddee:	7020      	strb	r0, [r4, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d000      	beq.n	800ddf6 <rfalNfcWorker+0xc4e>
 800ddf4:	4798      	blx	r3
            if( gNfcDev.dataExErr == RFAL_ERR_SLEEP_REQ )                             /* Check if Listen mode has to go to Sleep */
 800ddf6:	23c8      	movs	r3, #200	@ 0xc8
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	5ae3      	ldrh	r3, [r4, r3]
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 800ddfc:	2017      	movs	r0, #23
            if( gNfcDev.dataExErr == RFAL_ERR_SLEEP_REQ )                             /* Check if Listen mode has to go to Sleep */
 800ddfe:	2b20      	cmp	r3, #32
 800de00:	d001      	beq.n	800de06 <rfalNfcWorker+0xc5e>
 800de02:	f7ff fa98 	bl	800d336 <rfalNfcWorker+0x18e>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 800de06:	7020      	strb	r0, [r4, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller             */
 800de08:	3498      	adds	r4, #152	@ 0x98
 800de0a:	6823      	ldr	r3, [r4, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <rfalNfcWorker+0xc6c>
 800de10:	f7ff fa2d 	bl	800d26e <rfalNfcWorker+0xc6>
 800de14:	f7ff fa8f 	bl	800d336 <rfalNfcWorker+0x18e>
 800de18:	0000032a 	.word	0x0000032a
 800de1c:	20001f50 	.word	0x20001f50
 800de20:	20001ce4 	.word	0x20001ce4
 800de24:	0000020a 	.word	0x0000020a
 800de28:	00000329 	.word	0x00000329
 800de2c:	20001f5f 	.word	0x20001f5f
 800de30:	20001f52 	.word	0x20001f52
            err = rfalNfcDeactivation();                                              /* Deactivate current device */
 800de34:	f7fe fea2 	bl	800cb7c <rfalNfcDeactivation>
            if( err != RFAL_ERR_BUSY )
 800de38:	2802      	cmp	r0, #2
 800de3a:	d101      	bne.n	800de40 <rfalNfcWorker+0xc98>
 800de3c:	f7ff fa7b 	bl	800d336 <rfalNfcWorker+0x18e>
                if( gNfcDev.deactType == RFAL_NFC_DEACTIVATE_SLEEP )
 800de40:	4bb9      	ldr	r3, [pc, #740]	@ (800e128 <rfalNfcWorker+0xf80>)
 800de42:	5ce0      	ldrb	r0, [r4, r3]
 800de44:	2801      	cmp	r0, #1
 800de46:	d003      	beq.n	800de50 <rfalNfcWorker+0xca8>
                    gNfcDev.state = ( (gNfcDev.deactType == RFAL_NFC_DEACTIVATE_DISCOVERY) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE );
 800de48:	2802      	cmp	r0, #2
 800de4a:	d0dc      	beq.n	800de06 <rfalNfcWorker+0xc5e>
 800de4c:	2001      	movs	r0, #1
 800de4e:	e7da      	b.n	800de06 <rfalNfcWorker+0xc5e>
 800de50:	200c      	movs	r0, #12
 800de52:	e7d8      	b.n	800de06 <rfalNfcWorker+0xc5e>
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 800de54:	23c7      	movs	r3, #199	@ 0xc7
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	58e0      	ldr	r0, [r4, r3]
 800de5a:	f7f9 f823 	bl	8006ea4 <timerIsExpired>
 800de5e:	1e02      	subs	r2, r0, #0
 800de60:	d007      	beq.n	800de72 <rfalNfcWorker+0xcca>
                    rfalListenStop();
 800de62:	f7f6 fd99 	bl	8004998 <rfalListenStop>
                gNfcDev.isFieldOn = false;
 800de66:	23ca      	movs	r3, #202	@ 0xca
 800de68:	2200      	movs	r2, #0
 800de6a:	009b      	lsls	r3, r3, #2
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800de6c:	2002      	movs	r0, #2
                gNfcDev.isFieldOn = false;
 800de6e:	54e2      	strb	r2, [r4, r3]
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800de70:	e604      	b.n	800da7c <rfalNfcWorker+0x8d4>
            if( gNfcDev.lmMask != 0U )                                                /* Check if configured to perform Listen mode */
 800de72:	23c9      	movs	r3, #201	@ 0xc9
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	58e0      	ldr	r0, [r4, r3]
 800de78:	2800      	cmp	r0, #0
 800de7a:	d101      	bne.n	800de80 <rfalNfcWorker+0xcd8>
 800de7c:	f7ff fa5b 	bl	800d336 <rfalNfcWorker+0x18e>
                err = rfalListenStart( gNfcDev.lmMask, &gNfcDev.disc.lmConfigPA, NULL, &gNfcDev.disc.lmConfigPF, (uint8_t*)&gNfcDev.rxBuf.rfBuf, (uint16_t)rfalConvBytesToBits(sizeof(gNfcDev.rxBuf.rfBuf)), &gNfcDev.rxLen );
 800de80:	4daa      	ldr	r5, [pc, #680]	@ (800e12c <rfalNfcWorker+0xf84>)
 800de82:	4bab      	ldr	r3, [pc, #684]	@ (800e130 <rfalNfcWorker+0xf88>)
 800de84:	9502      	str	r5, [sp, #8]
 800de86:	2581      	movs	r5, #129	@ 0x81
 800de88:	012d      	lsls	r5, r5, #4
 800de8a:	9501      	str	r5, [sp, #4]
 800de8c:	4da9      	ldr	r5, [pc, #676]	@ (800e134 <rfalNfcWorker+0xf8c>)
 800de8e:	49aa      	ldr	r1, [pc, #680]	@ (800e138 <rfalNfcWorker+0xf90>)
 800de90:	9500      	str	r5, [sp, #0]
 800de92:	f7f6 ff25 	bl	8004ce0 <rfalListenStart>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_COLAVOIDANCE;               /* Wait for listen mode to be activated */
 800de96:	2315      	movs	r3, #21
                if( err == RFAL_ERR_NONE )
 800de98:	2800      	cmp	r0, #0
 800de9a:	d101      	bne.n	800dea0 <rfalNfcWorker+0xcf8>
 800de9c:	f7ff fb8c 	bl	800d5b8 <rfalNfcWorker+0x410>
 800dea0:	f7ff fa49 	bl	800d336 <rfalNfcWorker+0x18e>
            if( platformTimerIsExpired( gNfcDev.discTmr ) )                           /* Check if the total duration has been reached */
 800dea4:	23c7      	movs	r3, #199	@ 0xc7
 800dea6:	009b      	lsls	r3, r3, #2
 800dea8:	58e0      	ldr	r0, [r4, r3]
 800deaa:	f7f8 fffb 	bl	8006ea4 <timerIsExpired>
 800deae:	2800      	cmp	r0, #0
 800deb0:	d003      	beq.n	800deba <rfalNfcWorker+0xd12>
                    rfalListenStop();
 800deb2:	f7f6 fd71 	bl	8004998 <rfalListenStop>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 800deb6:	2002      	movs	r0, #2
 800deb8:	e7a5      	b.n	800de06 <rfalNfcWorker+0xc5e>
            if( rfalListenGetState( NULL, NULL ) >= RFAL_LM_STATE_IDLE )
 800deba:	0001      	movs	r1, r0
 800debc:	f7f6 fdea 	bl	8004a94 <rfalListenGetState>
 800dec0:	2801      	cmp	r0, #1
 800dec2:	d801      	bhi.n	800dec8 <rfalNfcWorker+0xd20>
 800dec4:	f7ff fa37 	bl	800d336 <rfalNfcWorker+0x18e>
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 800dec8:	2316      	movs	r3, #22
 800deca:	f7ff fb75 	bl	800d5b8 <rfalNfcWorker+0x410>
    lmSt = rfalListenGetState( &isDataRcvd, &bitRate );
 800dece:	2612      	movs	r6, #18
 800ded0:	ab02      	add	r3, sp, #8
 800ded2:	18f6      	adds	r6, r6, r3
 800ded4:	2313      	movs	r3, #19
 800ded6:	aa02      	add	r2, sp, #8
 800ded8:	189b      	adds	r3, r3, r2
 800deda:	0019      	movs	r1, r3
 800dedc:	0030      	movs	r0, r6
 800dede:	f7f6 fdd9 	bl	8004a94 <rfalListenGetState>
 800dee2:	0005      	movs	r5, r0
    switch(lmSt)
 800dee4:	3801      	subs	r0, #1
 800dee6:	280f      	cmp	r0, #15
 800dee8:	d900      	bls.n	800deec <rfalNfcWorker+0xd44>
 800deea:	e119      	b.n	800e120 <rfalNfcWorker+0xf78>
 800deec:	f7f2 f928 	bl	8000140 <__gnu_thumb1_case_shi>
 800def0:	00e0011a 	.word	0x00e0011a
 800def4:	0118fa23 	.word	0x0118fa23
 800def8:	001000aa 	.word	0x001000aa
 800defc:	0118008b 	.word	0x0118008b
 800df00:	00d700cf 	.word	0x00d700cf
 800df04:	fa2300d7 	.word	0xfa2300d7
 800df08:	fa230118 	.word	0xfa230118
 800df0c:	fa230010 	.word	0xfa230010
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 800df10:	7833      	ldrb	r3, [r6, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d101      	bne.n	800df1a <rfalNfcWorker+0xd72>
 800df16:	f7ff fa0e 	bl	800d336 <rfalNfcWorker+0x18e>
                if( rfalNfcaListenerIsSleepReq( gNfcDev.rxBuf.rfBuf, rfalConvBitsToBytes(gNfcDev.rxLen)) )     /* Check if received data is a SLP_REQ */
 800df1a:	4e88      	ldr	r6, [pc, #544]	@ (800e13c <rfalNfcWorker+0xf94>)
 800df1c:	4f85      	ldr	r7, [pc, #532]	@ (800e134 <rfalNfcWorker+0xf8c>)
 800df1e:	5ba1      	ldrh	r1, [r4, r6]
 800df20:	0038      	movs	r0, r7
 800df22:	3107      	adds	r1, #7
 800df24:	08c9      	lsrs	r1, r1, #3
 800df26:	f001 fee9 	bl	800fcfc <rfalNfcaListenerIsSleepReq>
 800df2a:	9005      	str	r0, [sp, #20]
 800df2c:	2800      	cmp	r0, #0
 800df2e:	d00e      	beq.n	800df4e <rfalNfcWorker+0xda6>
                    RFAL_EXIT_ON_ERR( ret, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 800df30:	2281      	movs	r2, #129	@ 0x81
 800df32:	0039      	movs	r1, r7
 800df34:	200c      	movs	r0, #12
 800df36:	4b7d      	ldr	r3, [pc, #500]	@ (800e12c <rfalNfcWorker+0xf84>)
 800df38:	0052      	lsls	r2, r2, #1
 800df3a:	f7f6 fd5b 	bl	80049f4 <rfalListenSleepStart>
                    RFAL_EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800df3e:	1e05      	subs	r5, r0, #0
 800df40:	d101      	bne.n	800df46 <rfalNfcWorker+0xd9e>
 800df42:	f7ff f9f8 	bl	800d336 <rfalNfcWorker+0x18e>
            if( err != RFAL_ERR_BUSY )
 800df46:	2d02      	cmp	r5, #2
 800df48:	d13e      	bne.n	800dfc8 <rfalNfcWorker+0xe20>
 800df4a:	f7ff f9f4 	bl	800d336 <rfalNfcWorker+0x18e>
                else if( rfalIsoDepIsRats( gNfcDev.rxBuf.rfBuf, (uint8_t)rfalConvBitsToBytes(gNfcDev.rxLen) ) )
 800df4e:	5ba1      	ldrh	r1, [r4, r6]
 800df50:	0038      	movs	r0, r7
 800df52:	3107      	adds	r1, #7
 800df54:	08c9      	lsrs	r1, r1, #3
 800df56:	b2c9      	uxtb	r1, r1
 800df58:	f7fd ffb4 	bl	800bec4 <rfalIsoDepIsRats>
 800df5c:	1e05      	subs	r5, r0, #0
 800df5e:	d024      	beq.n	800dfaa <rfalNfcWorker+0xe02>
                    atsParam.fsci       = (uint8_t)RFAL_ISODEP_DEFAULT_FSCI;
 800df60:	4b77      	ldr	r3, [pc, #476]	@ (800e140 <rfalNfcWorker+0xf98>)
                    atsParam.ta         = RFAL_ISODEP_ATS_TA_SAME_D;
 800df62:	aa02      	add	r2, sp, #8
                    atsParam.fsci       = (uint8_t)RFAL_ISODEP_DEFAULT_FSCI;
 800df64:	9307      	str	r3, [sp, #28]
                    atsParam.ta         = RFAL_ISODEP_ATS_TA_SAME_D;
 800df66:	2380      	movs	r3, #128	@ 0x80
 800df68:	7613      	strb	r3, [r2, #24]
                    atsParam.hb         = NULL;
 800df6a:	9b05      	ldr	r3, [sp, #20]
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_4A );                   /* Set next state CE T4T */
 800df6c:	2007      	movs	r0, #7
                    atsParam.hb         = NULL;
 800df6e:	9309      	str	r3, [sp, #36]	@ 0x24
                    atsParam.hbLen      = 0;
 800df70:	0013      	movs	r3, r2
 800df72:	2220      	movs	r2, #32
 800df74:	189b      	adds	r3, r3, r2
 800df76:	9a05      	ldr	r2, [sp, #20]
                    rxParam.rxBuf        = (rfalIsoDepBufFormat*) &gNfcDev.rxBuf.isoDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800df78:	970b      	str	r7, [sp, #44]	@ 0x2c
                    atsParam.hbLen      = 0;
 800df7a:	701a      	strb	r2, [r3, #0]
                    rxParam.rxLen        = &gNfcDev.rxLen;
 800df7c:	4b6b      	ldr	r3, [pc, #428]	@ (800e12c <rfalNfcWorker+0xf84>)
                    rxParam.rxBuf        = (rfalIsoDepBufFormat*) &gNfcDev.rxBuf.isoDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800df7e:	ad0b      	add	r5, sp, #44	@ 0x2c
                    rxParam.rxLen        = &gNfcDev.rxLen;
 800df80:	930c      	str	r3, [sp, #48]	@ 0x30
                    rxParam.isoDepDev    = &gNfcDev.devList->proto.isoDep;
 800df82:	4b70      	ldr	r3, [pc, #448]	@ (800e144 <rfalNfcWorker+0xf9c>)
 800df84:	930e      	str	r3, [sp, #56]	@ 0x38
                    rxParam.isRxChaining = &gNfcDev.isRxChaining;
 800df86:	4b70      	ldr	r3, [pc, #448]	@ (800e148 <rfalNfcWorker+0xfa0>)
 800df88:	930d      	str	r3, [sp, #52]	@ 0x34
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_4A );                   /* Set next state CE T4T */
 800df8a:	f7f6 fd95 	bl	8004ab8 <rfalListenSetState>
                    rfalIsoDepInitialize();                                           /* Initialize ISO-DEP layer to handle ISO14443-a activation / RATS */
 800df8e:	f7fd fd77 	bl	800ba80 <rfalIsoDepInitialize>
                    RFAL_EXIT_ON_ERR( ret, rfalIsoDepListenStartActivation( &atsParam, NULL, gNfcDev.rxBuf.rfBuf, gNfcDev.rxLen, rxParam ) );
 800df92:	466a      	mov	r2, sp
 800df94:	5ba3      	ldrh	r3, [r4, r6]
 800df96:	cd43      	ldmia	r5!, {r0, r1, r6}
 800df98:	c243      	stmia	r2!, {r0, r1, r6}
 800df9a:	6829      	ldr	r1, [r5, #0]
 800df9c:	a807      	add	r0, sp, #28
 800df9e:	6011      	str	r1, [r2, #0]
 800dfa0:	9905      	ldr	r1, [sp, #20]
 800dfa2:	003a      	movs	r2, r7
 800dfa4:	f7fd ff9a 	bl	800bedc <rfalIsoDepListenStartActivation>
 800dfa8:	e7c9      	b.n	800df3e <rfalNfcWorker+0xd96>
                else if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 800dfaa:	0023      	movs	r3, r4
 800dfac:	5ba1      	ldrh	r1, [r4, r6]
 800dfae:	4f67      	ldr	r7, [pc, #412]	@ (800e14c <rfalNfcWorker+0xfa4>)
 800dfb0:	3107      	adds	r1, #7
 800dfb2:	08c9      	lsrs	r1, r1, #3
 800dfb4:	33d8      	adds	r3, #216	@ 0xd8
 800dfb6:	3902      	subs	r1, #2
 800dfb8:	0038      	movs	r0, r7
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	b289      	uxth	r1, r1
 800dfbe:	f000 fa8b 	bl	800e4d8 <rfalNfcDepIsAtrReq>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d111      	bne.n	800dfea <rfalNfcWorker+0xe42>
                    return RFAL_ERR_PROTO;
 800dfc6:	250b      	movs	r5, #11
                else if( (!platformTimerIsExpired( gNfcDev.discTmr )) && (err == RFAL_ERR_LINK_LOSS) && (gNfcDev.state == RFAL_NFC_STATE_LISTEN_ACTIVATION) )
 800dfc8:	23c7      	movs	r3, #199	@ 0xc7
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	58e0      	ldr	r0, [r4, r3]
 800dfce:	f7f8 ff69 	bl	8006ea4 <timerIsExpired>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d000      	beq.n	800dfd8 <rfalNfcWorker+0xe30>
 800dfd6:	e76c      	b.n	800deb2 <rfalNfcWorker+0xd0a>
 800dfd8:	2d25      	cmp	r5, #37	@ 0x25
 800dfda:	d000      	beq.n	800dfde <rfalNfcWorker+0xe36>
 800dfdc:	e769      	b.n	800deb2 <rfalNfcWorker+0xd0a>
 800dfde:	7823      	ldrb	r3, [r4, #0]
 800dfe0:	2b16      	cmp	r3, #22
 800dfe2:	d000      	beq.n	800dfe6 <rfalNfcWorker+0xe3e>
 800dfe4:	e765      	b.n	800deb2 <rfalNfcWorker+0xd0a>
 800dfe6:	f7ff f9a6 	bl	800d336 <rfalNfcWorker+0x18e>
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 800dfea:	0020      	movs	r0, r4
 800dfec:	230a      	movs	r3, #10
                    RFAL_EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800dfee:	003a      	movs	r2, r7
 800dff0:	0029      	movs	r1, r5
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 800dff2:	30c0      	adds	r0, #192	@ 0xc0
 800dff4:	7003      	strb	r3, [r0, #0]
                    RFAL_EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800dff6:	5ba3      	ldrh	r3, [r4, r6]
 800dff8:	3307      	adds	r3, #7
 800dffa:	08db      	lsrs	r3, r3, #3
 800dffc:	3b02      	subs	r3, #2
 800dffe:	b29b      	uxth	r3, r3
 800e000:	f7fe fe3a 	bl	800cc78 <rfalNfcNfcDepActivate>
 800e004:	e79b      	b.n	800df3e <rfalNfcWorker+0xd96>
            ret = rfalIsoDepListenGetActivationStatus();
 800e006:	f7fe f80b 	bl	800c020 <rfalIsoDepListenGetActivationStatus>
 800e00a:	1e05      	subs	r5, r0, #0
            if( ret == RFAL_ERR_NONE )
 800e00c:	d117      	bne.n	800e03e <rfalNfcWorker+0xe96>
                gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCA;
 800e00e:	0023      	movs	r3, r4
 800e010:	220a      	movs	r2, #10
 800e012:	33c0      	adds	r3, #192	@ 0xc0
 800e014:	701a      	strb	r2, [r3, #0]
 800e016:	2301      	movs	r3, #1
 800e018:	0002      	movs	r2, r0
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_ISODEP;
 800e01a:	0021      	movs	r1, r4
 800e01c:	31dd      	adds	r1, #221	@ 0xdd
 800e01e:	700b      	strb	r3, [r1, #0]
                gNfcDev.devList->nfcid       = NULL;
 800e020:	0023      	movs	r3, r4
 800e022:	33d8      	adds	r3, #216	@ 0xd8
 800e024:	601d      	str	r5, [r3, #0]
                gNfcDev.devList->nfcidLen    = 0;
 800e026:	0023      	movs	r3, r4
 800e028:	33dc      	adds	r3, #220	@ 0xdc
 800e02a:	701a      	strb	r2, [r3, #0]
                    gNfcDev.devCnt++;
 800e02c:	22c6      	movs	r2, #198	@ 0xc6
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 800e02e:	4b48      	ldr	r3, [pc, #288]	@ (800e150 <rfalNfcWorker+0xfa8>)
                    gNfcDev.devCnt++;
 800e030:	0092      	lsls	r2, r2, #2
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 800e032:	60e3      	str	r3, [r4, #12]
                    gNfcDev.devCnt++;
 800e034:	5ca3      	ldrb	r3, [r4, r2]
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 800e036:	201e      	movs	r0, #30
                    gNfcDev.devCnt++;
 800e038:	3301      	adds	r3, #1
 800e03a:	54a3      	strb	r3, [r4, r2]
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 800e03c:	e6e3      	b.n	800de06 <rfalNfcWorker+0xc5e>
            return ( (ret == RFAL_ERR_LINK_LOSS) ? RFAL_ERR_PROTO : ret);             /* Link loss during protocol activation, reMap error */
 800e03e:	2825      	cmp	r0, #37	@ 0x25
 800e040:	d0c1      	beq.n	800dfc6 <rfalNfcWorker+0xe1e>
 800e042:	e780      	b.n	800df46 <rfalNfcWorker+0xd9e>
            if( isDataRcvd )                                                          /* Wait for the first received data */
 800e044:	7833      	ldrb	r3, [r6, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d101      	bne.n	800e04e <rfalNfcWorker+0xea6>
 800e04a:	f7ff f974 	bl	800d336 <rfalNfcWorker+0x18e>
                if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 800e04e:	0023      	movs	r3, r4
 800e050:	4e3a      	ldr	r6, [pc, #232]	@ (800e13c <rfalNfcWorker+0xf94>)
 800e052:	4d40      	ldr	r5, [pc, #256]	@ (800e154 <rfalNfcWorker+0xfac>)
 800e054:	5ba1      	ldrh	r1, [r4, r6]
 800e056:	33d8      	adds	r3, #216	@ 0xd8
 800e058:	3107      	adds	r1, #7
 800e05a:	08c9      	lsrs	r1, r1, #3
 800e05c:	3901      	subs	r1, #1
 800e05e:	0028      	movs	r0, r5
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	b289      	uxth	r1, r1
 800e064:	f000 fa38 	bl	800e4d8 <rfalNfcDepIsAtrReq>
 800e068:	2800      	cmp	r0, #0
 800e06a:	d00b      	beq.n	800e084 <rfalNfcWorker+0xedc>
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCF;
 800e06c:	0020      	movs	r0, r4
 800e06e:	230c      	movs	r3, #12
 800e070:	30c0      	adds	r0, #192	@ 0xc0
 800e072:	7003      	strb	r3, [r0, #0]
                    RFAL_EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800e074:	5ba3      	ldrh	r3, [r4, r6]
 800e076:	002a      	movs	r2, r5
 800e078:	3307      	adds	r3, #7
 800e07a:	08db      	lsrs	r3, r3, #3
 800e07c:	3b01      	subs	r3, #1
 800e07e:	2100      	movs	r1, #0
 800e080:	b29b      	uxth	r3, r3
 800e082:	e7bd      	b.n	800e000 <rfalNfcWorker+0xe58>
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_3 );                    /* First data already received - set T3T CE */
 800e084:	2009      	movs	r0, #9
 800e086:	f7f6 fd17 	bl	8004ab8 <rfalListenSetState>
            if( err != RFAL_ERR_BUSY )
 800e08a:	f7ff f954 	bl	800d336 <rfalNfcWorker+0x18e>
            gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCF;
 800e08e:	0023      	movs	r3, r4
 800e090:	220c      	movs	r2, #12
 800e092:	33c0      	adds	r3, #192	@ 0xc0
 800e094:	701a      	strb	r2, [r3, #0]
 800e096:	2300      	movs	r3, #0
 800e098:	001d      	movs	r5, r3
 800e09a:	001a      	movs	r2, r3
 800e09c:	e7bd      	b.n	800e01a <rfalNfcWorker+0xe72>
            ret = rfalNfcDepListenGetActivationStatus();
 800e09e:	f000 fc7f 	bl	800e9a0 <rfalNfcDepListenGetActivationStatus>
 800e0a2:	1e05      	subs	r5, r0, #0
            if( ret == RFAL_ERR_NONE )
 800e0a4:	d000      	beq.n	800e0a8 <rfalNfcWorker+0xf00>
 800e0a6:	e74e      	b.n	800df46 <rfalNfcWorker+0xd9e>
 800e0a8:	2302      	movs	r3, #2
 800e0aa:	220a      	movs	r2, #10
 800e0ac:	4d2a      	ldr	r5, [pc, #168]	@ (800e158 <rfalNfcWorker+0xfb0>)
 800e0ae:	e7b4      	b.n	800e01a <rfalNfcWorker+0xe72>
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 800e0b0:	7833      	ldrb	r3, [r6, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d101      	bne.n	800e0ba <rfalNfcWorker+0xf12>
 800e0b6:	f7ff f93e 	bl	800d336 <rfalNfcWorker+0x18e>
                if( (gNfcDev.lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )                /* Check if AP2P is enabled */
 800e0ba:	23c9      	movs	r3, #201	@ 0xc9
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	58e3      	ldr	r3, [r4, r3]
 800e0c0:	049b      	lsls	r3, r3, #18
 800e0c2:	d401      	bmi.n	800e0c8 <rfalNfcWorker+0xf20>
 800e0c4:	f7ff f937 	bl	800d336 <rfalNfcWorker+0x18e>
                    hdrLen = ( (bitRate == RFAL_BR_106) ? (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN) : RFAL_NFCDEP_LEN_LEN );
 800e0c8:	ab02      	add	r3, sp, #8
 800e0ca:	7cdb      	ldrb	r3, [r3, #19]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d000      	beq.n	800e0d2 <rfalNfcWorker+0xf2a>
 800e0d0:	2501      	movs	r5, #1
                    if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), NULL) )
 800e0d2:	4b22      	ldr	r3, [pc, #136]	@ (800e15c <rfalNfcWorker+0xfb4>)
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	18ee      	adds	r6, r5, r3
 800e0d8:	19a3      	adds	r3, r4, r6
 800e0da:	4e18      	ldr	r6, [pc, #96]	@ (800e13c <rfalNfcWorker+0xf94>)
 800e0dc:	9305      	str	r3, [sp, #20]
 800e0de:	5ba1      	ldrh	r1, [r4, r6]
 800e0e0:	0018      	movs	r0, r3
 800e0e2:	3107      	adds	r1, #7
 800e0e4:	08c9      	lsrs	r1, r1, #3
 800e0e6:	1b49      	subs	r1, r1, r5
 800e0e8:	b289      	uxth	r1, r1
 800e0ea:	f000 f9f5 	bl	800e4d8 <rfalNfcDepIsAtrReq>
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d100      	bne.n	800e0f4 <rfalNfcWorker+0xf4c>
 800e0f2:	e768      	b.n	800dfc6 <rfalNfcWorker+0xe1e>
                        gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_AP2P;
 800e0f4:	0027      	movs	r7, r4
 800e0f6:	230f      	movs	r3, #15
 800e0f8:	37c0      	adds	r7, #192	@ 0xc0
 800e0fa:	703b      	strb	r3, [r7, #0]
                        rfalSetMode( (RFAL_MODE_LISTEN_ACTIVE_P2P), bitRate, bitRate );
 800e0fc:	ab02      	add	r3, sp, #8
 800e0fe:	7cd9      	ldrb	r1, [r3, #19]
 800e100:	200d      	movs	r0, #13
 800e102:	000a      	movs	r2, r1
 800e104:	f7f6 f8b2 	bl	800426c <rfalSetMode>
                        rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_LISTENER );
 800e108:	2040      	movs	r0, #64	@ 0x40
 800e10a:	f7f6 f9e1 	bl	80044d0 <rfalSetFDTListen>
                        RFAL_EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800e10e:	5ba3      	ldrh	r3, [r4, r6]
 800e110:	2101      	movs	r1, #1
 800e112:	3307      	adds	r3, #7
 800e114:	08db      	lsrs	r3, r3, #3
 800e116:	1b5b      	subs	r3, r3, r5
 800e118:	0038      	movs	r0, r7
 800e11a:	9a05      	ldr	r2, [sp, #20]
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	e76f      	b.n	800e000 <rfalNfcWorker+0xe58>
    return RFAL_ERR_INTERNAL;
 800e120:	250c      	movs	r5, #12
 800e122:	e751      	b.n	800dfc8 <rfalNfcWorker+0xe20>
            return RFAL_ERR_LINK_LOSS;
 800e124:	2525      	movs	r5, #37	@ 0x25
 800e126:	e74f      	b.n	800dfc8 <rfalNfcWorker+0xe20>
 800e128:	00000322 	.word	0x00000322
 800e12c:	2000236a 	.word	0x2000236a
 800e130:	20001ca4 	.word	0x20001ca4
 800e134:	20002165 	.word	0x20002165
 800e138:	20001c96 	.word	0x20001c96
 800e13c:	00000746 	.word	0x00000746
 800e140:	00000808 	.word	0x00000808
 800e144:	20001d04 	.word	0x20001d04
 800e148:	20001f47 	.word	0x20001f47
 800e14c:	20002167 	.word	0x20002167
 800e150:	20001ce4 	.word	0x20001ce4
 800e154:	20002166 	.word	0x20002166
 800e158:	20001d06 	.word	0x20001d06
 800e15c:	00000541 	.word	0x00000541

0800e160 <nfcipClearCounters>:
static void nfcipClearCounters( void )
{
    gNfcip.cntATNRetrys  = 0;
    gNfcip.cntNACKRetrys = 0;
    gNfcip.cntTORetrys   = 0;
    gNfcip.cntTxRetrys   = 0;
 800e160:	2200      	movs	r2, #0
 800e162:	4b04      	ldr	r3, [pc, #16]	@ (800e174 <nfcipClearCounters+0x14>)
 800e164:	4904      	ldr	r1, [pc, #16]	@ (800e178 <nfcipClearCounters+0x18>)
 800e166:	800a      	strh	r2, [r1, #0]
    gNfcip.cntRTOXRetrys = 0;
 800e168:	0019      	movs	r1, r3
    gNfcip.cntATNRetrys  = 0;
 800e16a:	335a      	adds	r3, #90	@ 0x5a
    gNfcip.cntRTOXRetrys = 0;
 800e16c:	3158      	adds	r1, #88	@ 0x58
 800e16e:	800a      	strh	r2, [r1, #0]
    gNfcip.cntATNRetrys  = 0;
 800e170:	701a      	strb	r2, [r3, #0]
}
 800e172:	4770      	bx	lr
 800e174:	20002470 	.word	0x20002470
 800e178:	200024c6 	.word	0x200024c6

0800e17c <nfcipTx>:
}


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 800e17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e17e:	b087      	sub	sp, #28
 800e180:	9305      	str	r3, [sp, #20]
 800e182:	ab0c      	add	r3, sp, #48	@ 0x30
 800e184:	0007      	movs	r7, r0
 800e186:	0014      	movs	r4, r2
 800e188:	781b      	ldrb	r3, [r3, #0]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 800e18a:	2900      	cmp	r1, #0
 800e18c:	d103      	bne.n	800e196 <nfcipTx+0x1a>
    {
        return RFAL_ERR_PARAM;
 800e18e:	2307      	movs	r3, #7
        return RFAL_ERR_NOTSUPP;
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
}
 800e190:	0018      	movs	r0, r3
 800e192:	b007      	add	sp, #28
 800e194:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 800e196:	9a05      	ldr	r2, [sp, #20]
 800e198:	2a00      	cmp	r2, #0
 800e19a:	d001      	beq.n	800e1a0 <nfcipTx+0x24>
 800e19c:	2c00      	cmp	r4, #0
 800e19e:	d100      	bne.n	800e1a2 <nfcipTx+0x26>
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 800e1a0:	1d4c      	adds	r4, r1, #5
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 800e1a2:	4a5e      	ldr	r2, [pc, #376]	@ (800e31c <nfcipTx+0x1a0>)
 800e1a4:	4e5e      	ldr	r6, [pc, #376]	@ (800e320 <nfcipTx+0x1a4>)
 800e1a6:	7017      	strb	r7, [r2, #0]
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 800e1a8:	0032      	movs	r2, r6
 800e1aa:	21ff      	movs	r1, #255	@ 0xff
 800e1ac:	3253      	adds	r2, #83	@ 0x53
    switch( cmd )
 800e1ae:	1eb8      	subs	r0, r7, #2
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 800e1b0:	7011      	strb	r1, [r2, #0]
    switch( cmd )
 800e1b2:	2809      	cmp	r0, #9
 800e1b4:	d806      	bhi.n	800e1c4 <nfcipTx+0x48>
 800e1b6:	f7f1 ffb9 	bl	800012c <__gnu_thumb1_case_uqi>
 800e1ba:	705f      	.short	0x705f
 800e1bc:	7b7b7070 	.word	0x7b7b7070
 800e1c0:	75757575 	.word	0x75757575
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 800e1c4:	220a      	movs	r2, #10
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	0020      	movs	r0, r4
 800e1ca:	f005 f873 	bl	80132b4 <memset>
 800e1ce:	7c72      	ldrb	r2, [r6, #17]
 800e1d0:	2a00      	cmp	r2, #0
 800e1d2:	d003      	beq.n	800e1dc <nfcipTx+0x60>
 800e1d4:	0020      	movs	r0, r4
 800e1d6:	4953      	ldr	r1, [pc, #332]	@ (800e324 <nfcipTx+0x1a8>)
 800e1d8:	f005 f8a0 	bl	801331c <memcpy>
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 800e1dc:	78f3      	ldrb	r3, [r6, #3]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 800e1de:	250d      	movs	r5, #13
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 800e1e0:	72a3      	strb	r3, [r4, #10]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 800e1e2:	7973      	ldrb	r3, [r6, #5]
 800e1e4:	72e3      	strb	r3, [r4, #11]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 800e1e6:	79b3      	ldrb	r3, [r6, #6]
 800e1e8:	7323      	strb	r3, [r4, #12]
            if( cmd == NFCIP_CMD_ATR_RES )
 800e1ea:	2f01      	cmp	r7, #1
 800e1ec:	d104      	bne.n	800e1f8 <nfcipTx+0x7c>
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 800e1ee:	0033      	movs	r3, r6
 800e1f0:	3344      	adds	r3, #68	@ 0x44
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	3501      	adds	r5, #1
 800e1f6:	7363      	strb	r3, [r4, #13]
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 800e1f8:	0033      	movs	r3, r6
 800e1fa:	2130      	movs	r1, #48	@ 0x30
 800e1fc:	3343      	adds	r3, #67	@ 0x43
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	1962      	adds	r2, r4, r5
 800e202:	011b      	lsls	r3, r3, #4
 800e204:	400b      	ands	r3, r1
            if( gNfcip.cfg.gbLen > 0U)
 800e206:	4948      	ldr	r1, [pc, #288]	@ (800e328 <nfcipTx+0x1ac>)
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 800e208:	3501      	adds	r5, #1
            if( gNfcip.cfg.gbLen > 0U)
 800e20a:	7809      	ldrb	r1, [r1, #0]
 800e20c:	2900      	cmp	r1, #0
 800e20e:	d031      	beq.n	800e274 <nfcipTx+0xf8>
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 800e210:	2102      	movs	r1, #2
 800e212:	430b      	orrs	r3, r1
 800e214:	7013      	strb	r3, [r2, #0]
                RFAL_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 800e216:	4b44      	ldr	r3, [pc, #272]	@ (800e328 <nfcipTx+0x1ac>)
 800e218:	1960      	adds	r0, r4, r5
 800e21a:	781a      	ldrb	r2, [r3, #0]
 800e21c:	4943      	ldr	r1, [pc, #268]	@ (800e32c <nfcipTx+0x1b0>)
 800e21e:	f005 f87d 	bl	801331c <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 800e222:	4b41      	ldr	r3, [pc, #260]	@ (800e328 <nfcipTx+0x1ac>)
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	18ed      	adds	r5, r5, r3
 800e228:	b2ad      	uxth	r5, r5
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 800e22a:	1cab      	adds	r3, r5, #2
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	2b40      	cmp	r3, #64	@ 0x40
 800e230:	d8ad      	bhi.n	800e18e <nfcipTx+0x12>
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 800e232:	0020      	movs	r0, r4
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 800e234:	1e43      	subs	r3, r0, #1
 800e236:	701f      	strb	r7, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 800e238:	2301      	movs	r3, #1
 800e23a:	401f      	ands	r7, r3
 800e23c:	9b05      	ldr	r3, [sp, #20]
 800e23e:	3802      	subs	r0, #2
 800e240:	18ed      	adds	r5, r5, r3
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800e242:	0033      	movs	r3, r6
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 800e244:	3f2c      	subs	r7, #44	@ 0x2c
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800e246:	335c      	adds	r3, #92	@ 0x5c
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 800e248:	7007      	strb	r7, [r0, #0]
    txBufIt += paylLen + (uint16_t)((uintptr_t)payloadBuf - (uintptr_t)txBlock);         /* Calculate overall buffer size */
 800e24a:	1a24      	subs	r4, r4, r0
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800e24c:	881a      	ldrh	r2, [r3, #0]
    txBufIt += paylLen + (uint16_t)((uintptr_t)payloadBuf - (uintptr_t)txBlock);         /* Calculate overall buffer size */
 800e24e:	192d      	adds	r5, r5, r4
 800e250:	b2a9      	uxth	r1, r5
        return RFAL_ERR_NOTSUPP;
 800e252:	2318      	movs	r3, #24
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800e254:	428a      	cmp	r2, r1
 800e256:	d39b      	bcc.n	800e190 <nfcipTx+0x14>


/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 800e258:	0033      	movs	r3, r6
 800e25a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e25c:	336a      	adds	r3, #106	@ 0x6a
 800e25e:	881b      	ldrh	r3, [r3, #0]
 800e260:	9202      	str	r2, [sp, #8]
 800e262:	2204      	movs	r2, #4
 800e264:	9201      	str	r2, [sp, #4]
 800e266:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
 800e268:	9200      	str	r2, [sp, #0]
 800e26a:	6e72      	ldr	r2, [r6, #100]	@ 0x64
 800e26c:	f7f7 fc92 	bl	8005b94 <rfalTransceiveBlockingTx>
 800e270:	0003      	movs	r3, r0
    return nfcipDataTx( txBlock, txBufIt, fwt );
 800e272:	e78d      	b.n	800e190 <nfcipTx+0x14>
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 800e274:	7013      	strb	r3, [r2, #0]
 800e276:	e7dc      	b.n	800e232 <nfcipTx+0xb6>
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 800e278:	220a      	movs	r2, #10
 800e27a:	2100      	movs	r1, #0
 800e27c:	0020      	movs	r0, r4
 800e27e:	f005 f819 	bl	80132b4 <memset>
 800e282:	7c72      	ldrb	r2, [r6, #17]
 800e284:	2a00      	cmp	r2, #0
 800e286:	d003      	beq.n	800e290 <nfcipTx+0x114>
 800e288:	0020      	movs	r0, r4
 800e28a:	4926      	ldr	r1, [pc, #152]	@ (800e324 <nfcipTx+0x1a8>)
 800e28c:	f005 f846 	bl	801331c <memcpy>
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800e290:	78f3      	ldrb	r3, [r6, #3]
 800e292:	1e60      	subs	r0, r4, #1
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 800e294:	250a      	movs	r5, #10
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800e296:	7003      	strb	r3, [r0, #0]
            break;
 800e298:	e7cc      	b.n	800e234 <nfcipTx+0xb8>
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800e29a:	78f3      	ldrb	r3, [r6, #3]
 800e29c:	1e60      	subs	r0, r4, #1
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 800e29e:	7003      	strb	r3, [r0, #0]
    txBufIt  = 0;
 800e2a0:	2500      	movs	r5, #0
 800e2a2:	e7c7      	b.n	800e234 <nfcipTx+0xb8>
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 800e2a4:	78f3      	ldrb	r3, [r6, #3]
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 800e2a6:	0020      	movs	r0, r4
    txBufIt  = 0;
 800e2a8:	1e1d      	subs	r5, r3, #0
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 800e2aa:	d0c3      	beq.n	800e234 <nfcipTx+0xb8>
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 800e2ac:	1e60      	subs	r0, r4, #1
 800e2ae:	e7f6      	b.n	800e29e <nfcipTx+0x122>
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 800e2b0:	78f2      	ldrb	r2, [r6, #3]
 800e2b2:	2a00      	cmp	r2, #0
 800e2b4:	d001      	beq.n	800e2ba <nfcipTx+0x13e>
 800e2b6:	2204      	movs	r2, #4
 800e2b8:	4313      	orrs	r3, r2
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 800e2ba:	7932      	ldrb	r2, [r6, #4]
 800e2bc:	2a00      	cmp	r2, #0
 800e2be:	d001      	beq.n	800e2c4 <nfcipTx+0x148>
 800e2c0:	2108      	movs	r1, #8
 800e2c2:	430b      	orrs	r3, r1
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 800e2c4:	0031      	movs	r1, r6
 800e2c6:	315e      	adds	r1, #94	@ 0x5e
 800e2c8:	7809      	ldrb	r1, [r1, #0]
 800e2ca:	2900      	cmp	r1, #0
 800e2cc:	d003      	beq.n	800e2d6 <nfcipTx+0x15a>
 800e2ce:	2b1f      	cmp	r3, #31
 800e2d0:	d801      	bhi.n	800e2d6 <nfcipTx+0x15a>
 800e2d2:	2110      	movs	r1, #16
 800e2d4:	430b      	orrs	r3, r1
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 800e2d6:	0031      	movs	r1, r6
 800e2d8:	3153      	adds	r1, #83	@ 0x53
            if( !nfcip_PFBisSATN(pfb) )
 800e2da:	0018      	movs	r0, r3
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 800e2dc:	700b      	strb	r3, [r1, #0]
            if( !nfcip_PFBisSATN(pfb) )
 800e2de:	210f      	movs	r1, #15
 800e2e0:	4388      	bics	r0, r1
 800e2e2:	2880      	cmp	r0, #128	@ 0x80
 800e2e4:	d002      	beq.n	800e2ec <nfcipTx+0x170>
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 800e2e6:	0031      	movs	r1, r6
 800e2e8:	3154      	adds	r1, #84	@ 0x54
 800e2ea:	700b      	strb	r3, [r1, #0]
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 800e2ec:	0020      	movs	r0, r4
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 800e2ee:	2a00      	cmp	r2, #0
 800e2f0:	d001      	beq.n	800e2f6 <nfcipTx+0x17a>
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800e2f2:	1e60      	subs	r0, r4, #1
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 800e2f4:	7002      	strb	r2, [r0, #0]
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 800e2f6:	78f2      	ldrb	r2, [r6, #3]
 800e2f8:	2a00      	cmp	r2, #0
 800e2fa:	d001      	beq.n	800e300 <nfcipTx+0x184>
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 800e2fc:	3801      	subs	r0, #1
 800e2fe:	7002      	strb	r2, [r0, #0]
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 800e300:	9a05      	ldr	r2, [sp, #20]
            *(--txBlock) = pfb;                                                          /* PFB */
 800e302:	3801      	subs	r0, #1
 800e304:	7003      	strb	r3, [r0, #0]
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 800e306:	2a00      	cmp	r2, #0
 800e308:	d1ca      	bne.n	800e2a0 <nfcipTx+0x124>
 800e30a:	78b2      	ldrb	r2, [r6, #2]
 800e30c:	0752      	lsls	r2, r2, #29
 800e30e:	d502      	bpl.n	800e316 <nfcipTx+0x19a>
 800e310:	2b1f      	cmp	r3, #31
 800e312:	d800      	bhi.n	800e316 <nfcipTx+0x19a>
 800e314:	e73b      	b.n	800e18e <nfcipTx+0x12>
    txBufIt  = 0;
 800e316:	9d05      	ldr	r5, [sp, #20]
 800e318:	e78c      	b.n	800e234 <nfcipTx+0xb8>
 800e31a:	46c0      	nop			@ (mov r8, r8)
 800e31c:	200024c2 	.word	0x200024c2
 800e320:	20002470 	.word	0x20002470
 800e324:	20002477 	.word	0x20002477
 800e328:	200024b2 	.word	0x200024b2
 800e32c:	20002482 	.word	0x20002482

0800e330 <nfcipDEPControlMsg>:
{
 800e330:	b530      	push	{r4, r5, lr}
 800e332:	230f      	movs	r3, #15
 800e334:	0005      	movs	r5, r0
 800e336:	0002      	movs	r2, r0
    const rfalNfcDepCmd depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);
 800e338:	4814      	ldr	r0, [pc, #80]	@ (800e38c <nfcipDEPControlMsg+0x5c>)
 800e33a:	439d      	bics	r5, r3
 800e33c:	7803      	ldrb	r3, [r0, #0]
{
 800e33e:	b089      	sub	sp, #36	@ 0x24
 800e340:	000c      	movs	r4, r1
 800e342:	a903      	add	r1, sp, #12
    const rfalNfcDepCmd depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);
 800e344:	2b01      	cmp	r3, #1
 800e346:	d108      	bne.n	800e35a <nfcipDEPControlMsg+0x2a>
    if( nfcip_PFBisSTO( pfb ) )
 800e348:	2d90      	cmp	r5, #144	@ 0x90
 800e34a:	d01b      	beq.n	800e384 <nfcipDEPControlMsg+0x54>
    const rfalNfcDepCmd depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);
 800e34c:	2007      	movs	r0, #7
 800e34e:	3b02      	subs	r3, #2
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 800e350:	9301      	str	r3, [sp, #4]
 800e352:	2300      	movs	r3, #0
 800e354:	9200      	str	r2, [sp, #0]
 800e356:	001a      	movs	r2, r3
 800e358:	e00d      	b.n	800e376 <nfcipDEPControlMsg+0x46>
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 800e35a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800e35c:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800e35e:	2d90      	cmp	r5, #144	@ 0x90
 800e360:	d10d      	bne.n	800e37e <nfcipDEPControlMsg+0x4e>
 800e362:	4363      	muls	r3, r4
 800e364:	181b      	adds	r3, r3, r0
    const rfalNfcDepCmd depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);
 800e366:	2006      	movs	r0, #6
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 800e368:	714c      	strb	r4, [r1, #5]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 800e36a:	2211      	movs	r2, #17
 800e36c:	9301      	str	r3, [sp, #4]
 800e36e:	2390      	movs	r3, #144	@ 0x90
 800e370:	446a      	add	r2, sp
 800e372:	9300      	str	r3, [sp, #0]
 800e374:	3b8f      	subs	r3, #143	@ 0x8f
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 800e376:	f7ff ff01 	bl	800e17c <nfcipTx>
}
 800e37a:	b009      	add	sp, #36	@ 0x24
 800e37c:	bd30      	pop	{r4, r5, pc}
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 800e37e:	181b      	adds	r3, r3, r0
    const rfalNfcDepCmd depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);
 800e380:	2006      	movs	r0, #6
 800e382:	e7e5      	b.n	800e350 <nfcipDEPControlMsg+0x20>
 800e384:	2301      	movs	r3, #1
 800e386:	2007      	movs	r0, #7
 800e388:	425b      	negs	r3, r3
 800e38a:	e7ed      	b.n	800e368 <nfcipDEPControlMsg+0x38>
 800e38c:	20002470 	.word	0x20002470

0800e390 <nfcipDataRx>:
}


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 800e390:	b510      	push	{r4, lr}
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 800e392:	2800      	cmp	r0, #0
 800e394:	d017      	beq.n	800e3c6 <nfcipDataRx+0x36>
    {
        ret = rfalTransceiveBlockingRx();
 800e396:	f7f7 fcc9 	bl	8005d2c <rfalTransceiveBlockingRx>
    else
    {
        ret = rfalGetTransceiveStatus();
    }
    
    if( ret != RFAL_ERR_BUSY )
 800e39a:	2802      	cmp	r0, #2
 800e39c:	d012      	beq.n	800e3c4 <nfcipDataRx+0x34>
    {
        if( gNfcip.rxRcvdLen != NULL )
 800e39e:	490b      	ldr	r1, [pc, #44]	@ (800e3cc <nfcipDataRx+0x3c>)
 800e3a0:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 800e3a2:	2a00      	cmp	r2, #0
 800e3a4:	d00e      	beq.n	800e3c4 <nfcipDataRx+0x34>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 800e3a6:	8813      	ldrh	r3, [r2, #0]
 800e3a8:	3307      	adds	r3, #7
 800e3aa:	08dc      	lsrs	r4, r3, #3
 800e3ac:	8014      	strh	r4, [r2, #0]
                        
            if( (ret == RFAL_ERR_NONE) && (gNfcip.rxBuf != NULL) )
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d108      	bne.n	800e3c4 <nfcipDataRx+0x34>
 800e3b2:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 800e3b4:	2a00      	cmp	r2, #0
 800e3b6:	d005      	beq.n	800e3c4 <nfcipDataRx+0x34>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 800e3b8:	7812      	ldrb	r2, [r2, #0]
 800e3ba:	42a2      	cmp	r2, r4
 800e3bc:	d101      	bne.n	800e3c2 <nfcipDataRx+0x32>
 800e3be:	2c02      	cmp	r4, #2
 800e3c0:	d800      	bhi.n	800e3c4 <nfcipDataRx+0x34>
                {
                    return RFAL_ERR_FRAMING;
 800e3c2:	2009      	movs	r0, #9
            }
        }
    }
    
    return ret;
}
 800e3c4:	bd10      	pop	{r4, pc}
        ret = rfalGetTransceiveStatus();
 800e3c6:	f7f6 f9f1 	bl	80047ac <rfalGetTransceiveStatus>
 800e3ca:	e7e6      	b.n	800e39a <nfcipDataRx+0xa>
 800e3cc:	20002470 	.word	0x20002470

0800e3d0 <nfcipConfig.part.0>:
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
 800e3d0:	b510      	push	{r4, lr}
    RFAL_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 800e3d2:	4c14      	ldr	r4, [pc, #80]	@ (800e424 <nfcipConfig.part.0+0x54>)
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
 800e3d4:	0001      	movs	r1, r0
    RFAL_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 800e3d6:	2250      	movs	r2, #80	@ 0x50
 800e3d8:	0020      	movs	r0, r4
 800e3da:	f004 ff9f 	bl	801331c <memcpy>
    gNfcip.cfg.to   = RFAL_MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 800e3de:	0023      	movs	r3, r4
 800e3e0:	3344      	adds	r3, #68	@ 0x44
 800e3e2:	7819      	ldrb	r1, [r3, #0]
 800e3e4:	1c0a      	adds	r2, r1, #0
 800e3e6:	290e      	cmp	r1, #14
 800e3e8:	d900      	bls.n	800e3ec <nfcipConfig.part.0+0x1c>
 800e3ea:	220e      	movs	r2, #14
 800e3ec:	701a      	strb	r2, [r3, #0]
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 800e3ee:	78e2      	ldrb	r2, [r4, #3]
 800e3f0:	1c13      	adds	r3, r2, #0
 800e3f2:	2a0e      	cmp	r2, #14
 800e3f4:	d900      	bls.n	800e3f8 <nfcipConfig.part.0+0x28>
 800e3f6:	230e      	movs	r3, #14
 800e3f8:	70e3      	strb	r3, [r4, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 800e3fa:	0023      	movs	r3, r4
 800e3fc:	3343      	adds	r3, #67	@ 0x43
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	22fe      	movs	r2, #254	@ 0xfe
 800e402:	3301      	adds	r3, #1
 800e404:	019b      	lsls	r3, r3, #6
 800e406:	2bfd      	cmp	r3, #253	@ 0xfd
 800e408:	d800      	bhi.n	800e40c <nfcipConfig.part.0+0x3c>
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	0023      	movs	r3, r4
 800e40e:	335c      	adds	r3, #92	@ 0x5c
 800e410:	801a      	strh	r2, [r3, #0]
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 800e412:	2301      	movs	r3, #1
 800e414:	7822      	ldrb	r2, [r4, #0]
 800e416:	429a      	cmp	r2, r3
 800e418:	d100      	bne.n	800e41c <nfcipConfig.part.0+0x4c>
 800e41a:	3309      	adds	r3, #9
 800e41c:	3450      	adds	r4, #80	@ 0x50
 800e41e:	7023      	strb	r3, [r4, #0]
}
 800e420:	bd10      	pop	{r4, pc}
 800e422:	46c0      	nop			@ (mov r8, r8)
 800e424:	20002470 	.word	0x20002470

0800e428 <nfcipTxRx>:
{
 800e428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e42a:	0004      	movs	r4, r0
 800e42c:	0016      	movs	r6, r2
 800e42e:	a80a      	add	r0, sp, #40	@ 0x28
 800e430:	001a      	movs	r2, r3
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 800e432:	1fa5      	subs	r5, r4, #6
{
 800e434:	ab08      	add	r3, sp, #32
 800e436:	8807      	ldrh	r7, [r0, #0]
 800e438:	781b      	ldrb	r3, [r3, #0]
        return RFAL_ERR_PARAM;
 800e43a:	2007      	movs	r0, #7
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 800e43c:	2d01      	cmp	r5, #1
 800e43e:	d918      	bls.n	800e472 <nfcipTxRx+0x4a>
    gNfcip.rxBuf       = rxBuf;
 800e440:	480c      	ldr	r0, [pc, #48]	@ (800e474 <nfcipTxRx+0x4c>)
 800e442:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e444:	6645      	str	r5, [r0, #100]	@ 0x64
    gNfcip.rxBufLen    = rxBufLen;
 800e446:	0005      	movs	r5, r0
 800e448:	356a      	adds	r5, #106	@ 0x6a
 800e44a:	802f      	strh	r7, [r5, #0]
    gNfcip.rxRcvdLen   = rxActLen;
 800e44c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e44e:	66c5      	str	r5, [r0, #108]	@ 0x6c
        RFAL_EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 800e450:	2000      	movs	r0, #0
 800e452:	9601      	str	r6, [sp, #4]
 800e454:	9000      	str	r0, [sp, #0]
 800e456:	0020      	movs	r0, r4
 800e458:	f7ff fe90 	bl	800e17c <nfcipTx>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d108      	bne.n	800e472 <nfcipTxRx+0x4a>
    ret = nfcipDataRx( true );
 800e460:	3001      	adds	r0, #1
 800e462:	f7ff ff95 	bl	800e390 <nfcipDataRx>
    if( ret != RFAL_ERR_NONE )
 800e466:	2800      	cmp	r0, #0
 800e468:	d103      	bne.n	800e472 <nfcipTxRx+0x4a>
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 800e46a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e46c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	8013      	strh	r3, [r2, #0]
}
 800e472:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e474:	20002470 	.word	0x20002470

0800e478 <rfalNfcDepInitialize>:
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800e478:	4b15      	ldr	r3, [pc, #84]	@ (800e4d0 <rfalNfcDepInitialize+0x58>)
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800e47a:	20fe      	movs	r0, #254	@ 0xfe
 800e47c:	0019      	movs	r1, r3
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800e47e:	2202      	movs	r2, #2
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800e480:	315c      	adds	r1, #92	@ 0x5c
{
 800e482:	b510      	push	{r4, lr}
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800e484:	8008      	strh	r0, [r1, #0]
    gNfcip.cfg.gbLen = 0;
 800e486:	20c0      	movs	r0, #192	@ 0xc0
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800e488:	805a      	strh	r2, [r3, #2]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 800e48a:	2200      	movs	r2, #0
    gNfcip.cfg.gbLen = 0;
 800e48c:	1d19      	adds	r1, r3, #4
 800e48e:	0080      	lsls	r0, r0, #2
 800e490:	87c8      	strh	r0, [r1, #62]	@ 0x3e
    gNfcip.isDeactivating = NULL;
 800e492:	67ca      	str	r2, [r1, #124]	@ 0x7c
    gNfcip.isReqPending   = false;
 800e494:	0019      	movs	r1, r3
 800e496:	3184      	adds	r1, #132	@ 0x84
 800e498:	800a      	strh	r2, [r1, #0]
    gNfcip.isWait4RTOX    = false;
 800e49a:	0019      	movs	r1, r3
 800e49c:	3186      	adds	r1, #134	@ 0x86
 800e49e:	700a      	strb	r2, [r1, #0]
    gNfcip.PDUTxPos = 0;
 800e4a0:	0019      	movs	r1, r3
    gNfcip.cfg.fwt   = NFCIP_RWT_ACTIVATION;
 800e4a2:	480c      	ldr	r0, [pc, #48]	@ (800e4d4 <rfalNfcDepInitialize+0x5c>)
    gNfcip.PDUTxPos = 0;
 800e4a4:	31a8      	adds	r1, #168	@ 0xa8
 800e4a6:	600a      	str	r2, [r1, #0]
    gNfcip.PDUParam.rxLen = NULL;
 800e4a8:	0019      	movs	r1, r3
    gNfcip.cfg.fwt   = NFCIP_RWT_ACTIVATION;
 800e4aa:	6498      	str	r0, [r3, #72]	@ 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_WT_DELTA;
 800e4ac:	200c      	movs	r0, #12
    gNfcip.PDUParam.rxLen = NULL;
 800e4ae:	3194      	adds	r1, #148	@ 0x94
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_WT_DELTA;
 800e4b0:	64d8      	str	r0, [r3, #76]	@ 0x4c
    gNfcip.PDUParam.rxLen = NULL;
 800e4b2:	600a      	str	r2, [r1, #0]
    gNfcip.state          = NFCIP_ST_IDLE;
 800e4b4:	0018      	movs	r0, r3
    gNfcip.PDUParam.rxBuf = NULL;
 800e4b6:	0019      	movs	r1, r3
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 800e4b8:	809a      	strh	r2, [r3, #4]
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800e4ba:	719a      	strb	r2, [r3, #6]
    gNfcip.state          = NFCIP_ST_IDLE;
 800e4bc:	3050      	adds	r0, #80	@ 0x50
    gNfcip.RTOXTimer = 0U;
 800e4be:	67da      	str	r2, [r3, #124]	@ 0x7c
    gNfcip.PDUParam.rxBuf = NULL;
 800e4c0:	3190      	adds	r1, #144	@ 0x90
    gNfcip.PDUParam.txBuf = NULL;
 800e4c2:	3388      	adds	r3, #136	@ 0x88
    gNfcip.state          = NFCIP_ST_IDLE;
 800e4c4:	8002      	strh	r2, [r0, #0]
    gNfcip.PDUParam.rxBuf = NULL;
 800e4c6:	600a      	str	r2, [r1, #0]
    gNfcip.PDUParam.txBuf = NULL;
 800e4c8:	601a      	str	r2, [r3, #0]
    nfcipClearCounters();
 800e4ca:	f7ff fe49 	bl	800e160 <nfcipClearCounters>
}
 800e4ce:	bd10      	pop	{r4, pc}
 800e4d0:	20002470 	.word	0x20002470
 800e4d4:	01000c01 	.word	0x01000c01

0800e4d8 <rfalNfcDepIsAtrReq>:
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 800e4d8:	3910      	subs	r1, #16
{
 800e4da:	0003      	movs	r3, r0
 800e4dc:	b510      	push	{r4, lr}
 800e4de:	0010      	movs	r0, r2
        return false;
 800e4e0:	2200      	movs	r2, #0
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 800e4e2:	2930      	cmp	r1, #48	@ 0x30
 800e4e4:	d808      	bhi.n	800e4f8 <rfalNfcDepIsAtrReq+0x20>
    if ( buf[msgIt++] != NFCIP_REQ )
 800e4e6:	7819      	ldrb	r1, [r3, #0]
 800e4e8:	29d4      	cmp	r1, #212	@ 0xd4
 800e4ea:	d105      	bne.n	800e4f8 <rfalNfcDepIsAtrReq+0x20>
    if( buf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_REQ )
 800e4ec:	7859      	ldrb	r1, [r3, #1]
 800e4ee:	4291      	cmp	r1, r2
 800e4f0:	d102      	bne.n	800e4f8 <rfalNfcDepIsAtrReq+0x20>
    if( nfcid3 != NULL )
 800e4f2:	4290      	cmp	r0, r2
 800e4f4:	d102      	bne.n	800e4fc <rfalNfcDepIsAtrReq+0x24>
{
 800e4f6:	2201      	movs	r2, #1
}
 800e4f8:	0010      	movs	r0, r2
 800e4fa:	bd10      	pop	{r4, pc}
        RFAL_MEMCPY( nfcid3, &buf[RFAL_NFCDEP_ATR_REQ_NFCID3_POS], RFAL_NFCDEP_NFCID3_LEN );
 800e4fc:	220a      	movs	r2, #10
 800e4fe:	1c99      	adds	r1, r3, #2
 800e500:	f004 ff0c 	bl	801331c <memcpy>
 800e504:	e7f7      	b.n	800e4f6 <rfalNfcDepIsAtrReq+0x1e>
	...

0800e508 <rfalNfcDepATR>:
{
 800e508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e50a:	b0bd      	sub	sp, #244	@ 0xf4
 800e50c:	0006      	movs	r6, r0
 800e50e:	0015      	movs	r5, r2
        return RFAL_ERR_PARAM;
 800e510:	2407      	movs	r4, #7
{
 800e512:	9104      	str	r1, [sp, #16]
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 800e514:	2800      	cmp	r0, #0
 800e516:	d06d      	beq.n	800e5f4 <rfalNfcDepATR+0xec>
 800e518:	2900      	cmp	r1, #0
 800e51a:	d06b      	beq.n	800e5f4 <rfalNfcDepATR+0xec>
 800e51c:	2a00      	cmp	r2, #0
 800e51e:	d069      	beq.n	800e5f4 <rfalNfcDepATR+0xec>
    RFAL_MEMSET( &cfg, 0x00, sizeof(rfalNfcDepConfigs) );
 800e520:	ac28      	add	r4, sp, #160	@ 0xa0
 800e522:	2248      	movs	r2, #72	@ 0x48
 800e524:	2100      	movs	r1, #0
 800e526:	0020      	movs	r0, r4
 800e528:	f004 fec4 	bl	80132b4 <memset>
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 800e52c:	2380      	movs	r3, #128	@ 0x80
 800e52e:	035b      	lsls	r3, r3, #13
    cfg.did  = param->DID;
 800e530:	7a72      	ldrb	r2, [r6, #9]
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 800e532:	64a3      	str	r3, [r4, #72]	@ 0x48
    cfg.dFwt = RFAL_NFCDEP_WT_DELTA;
 800e534:	230c      	movs	r3, #12
 800e536:	64e3      	str	r3, [r4, #76]	@ 0x4c
    cfg.br   = param->BR;
 800e538:	7b33      	ldrb	r3, [r6, #12]
    cfg.did  = param->DID;
 800e53a:	70e2      	strb	r2, [r4, #3]
    cfg.br   = param->BR;
 800e53c:	71a3      	strb	r3, [r4, #6]
    cfg.lr   = param->LR;
 800e53e:	23db      	movs	r3, #219	@ 0xdb
    cfg.nad  = param->NAD;
 800e540:	8972      	ldrh	r2, [r6, #10]
    cfg.lr   = param->LR;
 800e542:	a902      	add	r1, sp, #8
    cfg.nad  = param->NAD;
 800e544:	80a2      	strh	r2, [r4, #4]
    cfg.lr   = param->LR;
 800e546:	7b72      	ldrb	r2, [r6, #13]
 800e548:	185b      	adds	r3, r3, r1
 800e54a:	701a      	strb	r2, [r3, #0]
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 800e54c:	220e      	movs	r2, #14
 800e54e:	ab39      	add	r3, sp, #228	@ 0xe4
 800e550:	701a      	strb	r2, [r3, #0]
    cfg.gbLen = param->GBLen;
 800e552:	23da      	movs	r3, #218	@ 0xda
 800e554:	7d32      	ldrb	r2, [r6, #20]
 800e556:	185b      	adds	r3, r3, r1
 800e558:	701a      	strb	r2, [r3, #0]
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 800e55a:	2a00      	cmp	r2, #0
 800e55c:	d005      	beq.n	800e56a <rfalNfcDepATR+0x62>
        RFAL_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 800e55e:	20aa      	movs	r0, #170	@ 0xaa
 800e560:	ab02      	add	r3, sp, #8
 800e562:	6931      	ldr	r1, [r6, #16]
 800e564:	18c0      	adds	r0, r0, r3
 800e566:	f004 fed9 	bl	801331c <memcpy>
    cfg.nfcidLen = param->nfcidLen;
 800e56a:	7a32      	ldrb	r2, [r6, #8]
 800e56c:	7462      	strb	r2, [r4, #17]
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 800e56e:	2a00      	cmp	r2, #0
 800e570:	d005      	beq.n	800e57e <rfalNfcDepATR+0x76>
        RFAL_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 800e572:	209f      	movs	r0, #159	@ 0x9f
 800e574:	ab02      	add	r3, sp, #8
 800e576:	6871      	ldr	r1, [r6, #4]
 800e578:	18c0      	adds	r0, r0, r3
 800e57a:	f004 fecf 	bl	801331c <memcpy>
    cfg.oper     = param->operParam;
 800e57e:	7873      	ldrb	r3, [r6, #1]
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 800e580:	2712      	movs	r7, #18
    cfg.oper     = param->operParam;
 800e582:	70a3      	strb	r3, [r4, #2]
    cfg.commMode = param->commMode;
 800e584:	7833      	ldrb	r3, [r6, #0]
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 800e586:	ae17      	add	r6, sp, #92	@ 0x5c
    cfg.commMode = param->commMode;
 800e588:	7063      	strb	r3, [r4, #1]
    rfalNfcDepInitialize();
 800e58a:	f7ff ff75 	bl	800e478 <rfalNfcDepInitialize>
    if (cfg == NULL) 
 800e58e:	0020      	movs	r0, r4
 800e590:	f7ff ff1e 	bl	800e3d0 <nfcipConfig.part.0>
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 800e594:	4b1a      	ldr	r3, [pc, #104]	@ (800e600 <rfalNfcDepATR+0xf8>)
 800e596:	2000      	movs	r0, #0
 800e598:	785a      	ldrb	r2, [r3, #1]
 800e59a:	a907      	add	r1, sp, #28
 800e59c:	3a01      	subs	r2, #1
 800e59e:	1e53      	subs	r3, r2, #1
 800e5a0:	419a      	sbcs	r2, r3
 800e5a2:	23e0      	movs	r3, #224	@ 0xe0
 800e5a4:	4252      	negs	r2, r2
 800e5a6:	041b      	lsls	r3, r3, #16
 800e5a8:	401a      	ands	r2, r3
 800e5aa:	4b16      	ldr	r3, [pc, #88]	@ (800e604 <rfalNfcDepATR+0xfc>)
 800e5ac:	9601      	str	r6, [sp, #4]
 800e5ae:	18d2      	adds	r2, r2, r3
 800e5b0:	ab02      	add	r3, sp, #8
 800e5b2:	18ff      	adds	r7, r7, r3
 800e5b4:	2341      	movs	r3, #65	@ 0x41
 800e5b6:	9703      	str	r7, [sp, #12]
 800e5b8:	9302      	str	r3, [sp, #8]
 800e5ba:	9000      	str	r0, [sp, #0]
 800e5bc:	0003      	movs	r3, r0
 800e5be:	f7ff ff33 	bl	800e428 <nfcipTxRx>
 800e5c2:	1e04      	subs	r4, r0, #0
 800e5c4:	d116      	bne.n	800e5f4 <rfalNfcDepATR+0xec>
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 800e5c6:	7833      	ldrb	r3, [r6, #0]
 800e5c8:	1e5a      	subs	r2, r3, #1
 800e5ca:	9205      	str	r2, [sp, #20]
 800e5cc:	466a      	mov	r2, sp
 800e5ce:	8a92      	ldrh	r2, [r2, #20]
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 800e5d0:	3b12      	subs	r3, #18
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 800e5d2:	803a      	strh	r2, [r7, #0]
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 800e5d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e5d6:	d810      	bhi.n	800e5fa <rfalNfcDepATR+0xf2>
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 800e5d8:	7873      	ldrb	r3, [r6, #1]
 800e5da:	2bd5      	cmp	r3, #213	@ 0xd5
 800e5dc:	d10d      	bne.n	800e5fa <rfalNfcDepATR+0xf2>
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 800e5de:	78b3      	ldrb	r3, [r6, #2]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d10a      	bne.n	800e5fa <rfalNfcDepATR+0xf2>
    RFAL_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 800e5e4:	2155      	movs	r1, #85	@ 0x55
 800e5e6:	ab02      	add	r3, sp, #8
 800e5e8:	18c9      	adds	r1, r1, r3
 800e5ea:	9804      	ldr	r0, [sp, #16]
 800e5ec:	f004 fe96 	bl	801331c <memcpy>
    *atrResLen = (uint8_t)rxLen;
 800e5f0:	9b05      	ldr	r3, [sp, #20]
 800e5f2:	702b      	strb	r3, [r5, #0]
}
 800e5f4:	0020      	movs	r0, r4
 800e5f6:	b03d      	add	sp, #244	@ 0xf4
 800e5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return RFAL_ERR_PROTO;
 800e5fa:	240b      	movs	r4, #11
 800e5fc:	e7fa      	b.n	800e5f4 <rfalNfcDepATR+0xec>
 800e5fe:	46c0      	nop			@ (mov r8, r8)
 800e600:	20002470 	.word	0x20002470
 800e604:	00200c01 	.word	0x00200c01

0800e608 <rfalNfcDepPSL>:
{
 800e608:	b530      	push	{r4, r5, lr}
 800e60a:	b089      	sub	sp, #36	@ 0x24
    txBuf[msgIt++] = BRS;
 800e60c:	466b      	mov	r3, sp
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, (gNfcip.cfg.fwt + gNfcip.cfg.dFwt), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 800e60e:	4d12      	ldr	r5, [pc, #72]	@ (800e658 <rfalNfcDepPSL+0x50>)
    txBuf[msgIt++] = BRS;
 800e610:	7718      	strb	r0, [r3, #28]
    txBuf[msgIt++] = FSL;
 800e612:	7759      	strb	r1, [r3, #29]
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, (gNfcip.cfg.fwt + gNfcip.cfg.dFwt), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 800e614:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 800e616:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e618:	2004      	movs	r0, #4
 800e61a:	18d2      	adds	r2, r2, r3
 800e61c:	2312      	movs	r3, #18
 800e61e:	446b      	add	r3, sp
 800e620:	9303      	str	r3, [sp, #12]
 800e622:	2302      	movs	r3, #2
 800e624:	ac05      	add	r4, sp, #20
 800e626:	9300      	str	r3, [sp, #0]
 800e628:	9002      	str	r0, [sp, #8]
 800e62a:	9401      	str	r4, [sp, #4]
 800e62c:	ab07      	add	r3, sp, #28
 800e62e:	a906      	add	r1, sp, #24
 800e630:	f7ff fefa 	bl	800e428 <nfcipTxRx>
 800e634:	2800      	cmp	r0, #0
 800e636:	d10d      	bne.n	800e654 <rfalNfcDepPSL+0x4c>
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 800e638:	7823      	ldrb	r3, [r4, #0]
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d909      	bls.n	800e652 <rfalNfcDepPSL+0x4a>
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 800e63e:	7863      	ldrb	r3, [r4, #1]
 800e640:	2bd5      	cmp	r3, #213	@ 0xd5
 800e642:	d106      	bne.n	800e652 <rfalNfcDepPSL+0x4a>
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 800e644:	78a3      	ldrb	r3, [r4, #2]
 800e646:	2b05      	cmp	r3, #5
 800e648:	d103      	bne.n	800e652 <rfalNfcDepPSL+0x4a>
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 800e64a:	78e2      	ldrb	r2, [r4, #3]
 800e64c:	78eb      	ldrb	r3, [r5, #3]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d000      	beq.n	800e654 <rfalNfcDepPSL+0x4c>
        return RFAL_ERR_PROTO;
 800e652:	200b      	movs	r0, #11
}
 800e654:	b009      	add	sp, #36	@ 0x24
 800e656:	bd30      	pop	{r4, r5, pc}
 800e658:	20002470 	.word	0x20002470

0800e65c <rfalNfcDepDSL>:
    uint16_t rxLen = 0;
 800e65c:	2112      	movs	r1, #18
 800e65e:	2300      	movs	r3, #0
{   
 800e660:	b530      	push	{r4, r5, lr}
    if( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )
 800e662:	4d15      	ldr	r5, [pc, #84]	@ (800e6b8 <rfalNfcDepDSL+0x5c>)
{   
 800e664:	b089      	sub	sp, #36	@ 0x24
    if( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )
 800e666:	782a      	ldrb	r2, [r5, #0]
    uint16_t rxLen = 0;
 800e668:	4469      	add	r1, sp
 800e66a:	800b      	strh	r3, [r1, #0]
    if( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )
 800e66c:	2a01      	cmp	r2, #1
 800e66e:	d102      	bne.n	800e676 <rfalNfcDepDSL+0x1a>
        return RFAL_ERR_NONE;                                  /* Target has no deselect procedure */
 800e670:	2000      	movs	r0, #0
}
 800e672:	b009      	add	sp, #36	@ 0x24
 800e674:	bd30      	pop	{r4, r5, pc}
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_DSL_REQ, txBuf, (gNfcip.cfg.fwt + gNfcip.cfg.dFwt), NULL, 0, rxBuf, (uint16_t)sizeof(rxBuf), &rxLen  ) );
 800e676:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e678:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 800e67a:	9103      	str	r1, [sp, #12]
 800e67c:	2104      	movs	r1, #4
 800e67e:	ac05      	add	r4, sp, #20
 800e680:	1812      	adds	r2, r2, r0
 800e682:	9102      	str	r1, [sp, #8]
 800e684:	2008      	movs	r0, #8
 800e686:	9401      	str	r4, [sp, #4]
 800e688:	9300      	str	r3, [sp, #0]
 800e68a:	a906      	add	r1, sp, #24
 800e68c:	f7ff fecc 	bl	800e428 <nfcipTxRx>
 800e690:	2800      	cmp	r0, #0
 800e692:	d1ee      	bne.n	800e672 <rfalNfcDepDSL+0x16>
    if( rxBuf[rxMsgIt++] < NFCIP_DSLRES_MIN )             /* Checking length: LEN + DSL_RES */
 800e694:	7823      	ldrb	r3, [r4, #0]
        return RFAL_ERR_PROTO;
 800e696:	300b      	adds	r0, #11
    if( rxBuf[rxMsgIt++] < NFCIP_DSLRES_MIN )             /* Checking length: LEN + DSL_RES */
 800e698:	2b02      	cmp	r3, #2
 800e69a:	d9ea      	bls.n	800e672 <rfalNfcDepDSL+0x16>
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 800e69c:	7863      	ldrb	r3, [r4, #1]
 800e69e:	2bd5      	cmp	r3, #213	@ 0xd5
 800e6a0:	d1e7      	bne.n	800e672 <rfalNfcDepDSL+0x16>
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DSL_RES )  /* Checking if is DSL RES          */
 800e6a2:	78a3      	ldrb	r3, [r4, #2]
 800e6a4:	2b09      	cmp	r3, #9
 800e6a6:	d1e4      	bne.n	800e672 <rfalNfcDepDSL+0x16>
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800e6a8:	78eb      	ldrb	r3, [r5, #3]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d0e0      	beq.n	800e670 <rfalNfcDepDSL+0x14>
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 800e6ae:	78e2      	ldrb	r2, [r4, #3]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d0dd      	beq.n	800e670 <rfalNfcDepDSL+0x14>
 800e6b4:	e7dd      	b.n	800e672 <rfalNfcDepDSL+0x16>
 800e6b6:	46c0      	nop			@ (mov r8, r8)
 800e6b8:	20002470 	.word	0x20002470

0800e6bc <rfalNfcDepRLS>:
    uint16_t   rxLen = 0;
 800e6bc:	2112      	movs	r1, #18
 800e6be:	2300      	movs	r3, #0
{   
 800e6c0:	b530      	push	{r4, r5, lr}
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 800e6c2:	4d15      	ldr	r5, [pc, #84]	@ (800e718 <rfalNfcDepRLS+0x5c>)
{   
 800e6c4:	b089      	sub	sp, #36	@ 0x24
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 800e6c6:	782a      	ldrb	r2, [r5, #0]
    uint16_t   rxLen = 0;
 800e6c8:	4469      	add	r1, sp
 800e6ca:	800b      	strh	r3, [r1, #0]
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 800e6cc:	2a01      	cmp	r2, #1
 800e6ce:	d102      	bne.n	800e6d6 <rfalNfcDepRLS+0x1a>
        return RFAL_ERR_NONE;
 800e6d0:	2000      	movs	r0, #0
}
 800e6d2:	b009      	add	sp, #36	@ 0x24
 800e6d4:	bd30      	pop	{r4, r5, pc}
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, (gNfcip.cfg.fwt + gNfcip.cfg.dFwt), NULL, 0, rxBuf, (uint16_t)sizeof(rxBuf), &rxLen  ) );
 800e6d6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e6d8:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 800e6da:	9103      	str	r1, [sp, #12]
 800e6dc:	2104      	movs	r1, #4
 800e6de:	ac05      	add	r4, sp, #20
 800e6e0:	1812      	adds	r2, r2, r0
 800e6e2:	9102      	str	r1, [sp, #8]
 800e6e4:	200a      	movs	r0, #10
 800e6e6:	9401      	str	r4, [sp, #4]
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	a906      	add	r1, sp, #24
 800e6ec:	f7ff fe9c 	bl	800e428 <nfcipTxRx>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d1ee      	bne.n	800e6d2 <rfalNfcDepRLS+0x16>
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 800e6f4:	7823      	ldrb	r3, [r4, #0]
        return RFAL_ERR_PROTO;
 800e6f6:	300b      	adds	r0, #11
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d9ea      	bls.n	800e6d2 <rfalNfcDepRLS+0x16>
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 800e6fc:	7863      	ldrb	r3, [r4, #1]
 800e6fe:	2bd5      	cmp	r3, #213	@ 0xd5
 800e700:	d1e7      	bne.n	800e6d2 <rfalNfcDepRLS+0x16>
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 800e702:	78a3      	ldrb	r3, [r4, #2]
 800e704:	4283      	cmp	r3, r0
 800e706:	d1e4      	bne.n	800e6d2 <rfalNfcDepRLS+0x16>
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800e708:	78ea      	ldrb	r2, [r5, #3]
 800e70a:	2a00      	cmp	r2, #0
 800e70c:	d0e0      	beq.n	800e6d0 <rfalNfcDepRLS+0x14>
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 800e70e:	78e1      	ldrb	r1, [r4, #3]
 800e710:	4291      	cmp	r1, r2
 800e712:	d0dd      	beq.n	800e6d0 <rfalNfcDepRLS+0x14>
        return RFAL_ERR_PROTO;
 800e714:	0018      	movs	r0, r3
 800e716:	e7dc      	b.n	800e6d2 <rfalNfcDepRLS+0x16>
 800e718:	20002470 	.word	0x20002470

0800e71c <rfalNfcDepInitiatorHandleActivation>:
{
 800e71c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e71e:	000d      	movs	r5, r1
 800e720:	0014      	movs	r4, r2
        return RFAL_ERR_PARAM;
 800e722:	2607      	movs	r6, #7
{
 800e724:	9000      	str	r0, [sp, #0]
    if( (param == NULL) || (nfcDepDev == NULL) )
 800e726:	2800      	cmp	r0, #0
 800e728:	d100      	bne.n	800e72c <rfalNfcDepInitiatorHandleActivation+0x10>
 800e72a:	e07f      	b.n	800e82c <rfalNfcDepInitiatorHandleActivation+0x110>
 800e72c:	2a00      	cmp	r2, #0
 800e72e:	d07d      	beq.n	800e82c <rfalNfcDepInitiatorHandleActivation+0x110>
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 800e730:	2300      	movs	r3, #0
 800e732:	2703      	movs	r7, #3
 800e734:	7283      	strb	r3, [r0, #10]
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 800e736:	0023      	movs	r3, r4
 800e738:	3341      	adds	r3, #65	@ 0x41
 800e73a:	001a      	movs	r2, r3
 800e73c:	0021      	movs	r1, r4
 800e73e:	9800      	ldr	r0, [sp, #0]
 800e740:	9301      	str	r3, [sp, #4]
 800e742:	f7ff fee1 	bl	800e508 <rfalNfcDepATR>
 800e746:	0006      	movs	r6, r0
         if( nfcipIsTransmissionError(ret) )
 800e748:	281b      	cmp	r0, #27
 800e74a:	d86f      	bhi.n	800e82c <rfalNfcDepInitiatorHandleActivation+0x110>
 800e74c:	4b39      	ldr	r3, [pc, #228]	@ (800e834 <rfalNfcDepInitiatorHandleActivation+0x118>)
 800e74e:	40c3      	lsrs	r3, r0
 800e750:	07db      	lsls	r3, r3, #31
 800e752:	d503      	bpl.n	800e75c <rfalNfcDepInitiatorHandleActivation+0x40>
    while( (maxRetyrs--) != 0U );
 800e754:	3f01      	subs	r7, #1
 800e756:	b2ff      	uxtb	r7, r7
 800e758:	2f00      	cmp	r7, #0
 800e75a:	d1ec      	bne.n	800e736 <rfalNfcDepInitiatorHandleActivation+0x1a>
    if( ret != RFAL_ERR_NONE )
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d165      	bne.n	800e82c <rfalNfcDepInitiatorHandleActivation+0x110>
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 800e760:	0022      	movs	r2, r4
 800e762:	9b01      	ldr	r3, [sp, #4]
 800e764:	3244      	adds	r2, #68	@ 0x44
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	3b11      	subs	r3, #17
 800e76a:	7013      	strb	r3, [r2, #0]
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 800e76c:	0023      	movs	r3, r4
 800e76e:	7b22      	ldrb	r2, [r4, #12]
 800e770:	3356      	adds	r3, #86	@ 0x56
 800e772:	701a      	strb	r2, [r3, #0]
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 800e774:	0022      	movs	r2, r4
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 800e776:	7058      	strb	r0, [r3, #1]
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 800e778:	7c23      	ldrb	r3, [r4, #16]
 800e77a:	3250      	adds	r2, #80	@ 0x50
 800e77c:	069b      	lsls	r3, r3, #26
 800e77e:	0f9b      	lsrs	r3, r3, #30
 800e780:	7013      	strb	r3, [r2, #0]
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 800e782:	3301      	adds	r3, #1
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 800e784:	9200      	str	r2, [sp, #0]
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 800e786:	019b      	lsls	r3, r3, #6
 800e788:	22fe      	movs	r2, #254	@ 0xfe
 800e78a:	2bfd      	cmp	r3, #253	@ 0xfd
 800e78c:	d800      	bhi.n	800e790 <rfalNfcDepInitiatorHandleActivation+0x74>
 800e78e:	b29a      	uxth	r2, r3
 800e790:	0023      	movs	r3, r4
 800e792:	3352      	adds	r3, #82	@ 0x52
 800e794:	801a      	strh	r2, [r3, #0]
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 800e796:	230f      	movs	r3, #15
 800e798:	7be2      	ldrb	r2, [r4, #15]
 800e79a:	401a      	ands	r2, r3
 800e79c:	0023      	movs	r3, r4
 800e79e:	3345      	adds	r3, #69	@ 0x45
 800e7a0:	701a      	strb	r2, [r3, #0]
    const uint8_t responseWaitTime = RFAL_MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 800e7a2:	1c13      	adds	r3, r2, #0
 800e7a4:	2a0e      	cmp	r2, #14
 800e7a6:	d900      	bls.n	800e7aa <rfalNfcDepInitiatorHandleActivation+0x8e>
 800e7a8:	230e      	movs	r3, #14
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	330c      	adds	r3, #12
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	409a      	lsls	r2, r3
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 800e7b2:	230c      	movs	r3, #12
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 800e7b4:	0027      	movs	r7, r4
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 800e7b6:	64e3      	str	r3, [r4, #76]	@ 0x4c
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 800e7b8:	0023      	movs	r3, r4
 800e7ba:	3754      	adds	r7, #84	@ 0x54
 800e7bc:	3355      	adds	r3, #85	@ 0x55
 800e7be:	0019      	movs	r1, r3
 800e7c0:	0038      	movs	r0, r7
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 800e7c2:	64a2      	str	r2, [r4, #72]	@ 0x48
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 800e7c4:	9301      	str	r3, [sp, #4]
 800e7c6:	f7f5 fe45 	bl	8004454 <rfalGetBitRate>
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 800e7ca:	9b00      	ldr	r3, [sp, #0]
 800e7cc:	7819      	ldrb	r1, [r3, #0]
    if( (nfcDepDev->info.DSI != desiredBR) && (desiredBR != RFAL_BR_KEEP) )    /* if desired BR is different    */
 800e7ce:	783b      	ldrb	r3, [r7, #0]
 800e7d0:	42ab      	cmp	r3, r5
 800e7d2:	d02b      	beq.n	800e82c <rfalNfcDepInitiatorHandleActivation+0x110>
 800e7d4:	2dff      	cmp	r5, #255	@ 0xff
 800e7d6:	d029      	beq.n	800e82c <rfalNfcDepInitiatorHandleActivation+0x110>
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 800e7d8:	7ba0      	ldrb	r0, [r4, #14]
 800e7da:	7b62      	ldrb	r2, [r4, #13]
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 800e7dc:	2d02      	cmp	r5, #2
 800e7de:	d908      	bls.n	800e7f2 <rfalNfcDepInitiatorHandleActivation+0xd6>
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 800e7e0:	2d03      	cmp	r5, #3
 800e7e2:	d123      	bne.n	800e82c <rfalNfcDepInitiatorHandleActivation+0x110>
	Bx = RFAL_MIN(BRx, BSx);
 800e7e4:	1c03      	adds	r3, r0, #0
 800e7e6:	4290      	cmp	r0, r2
 800e7e8:	d900      	bls.n	800e7ec <rfalNfcDepInitiatorHandleActivation+0xd0>
 800e7ea:	1c13      	adds	r3, r2, #0
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d01c      	beq.n	800e82c <rfalNfcDepInitiatorHandleActivation+0x110>
        gNfcip.cfg.fwt = nfcDepDev->info.FWT;
 800e7f2:	4b11      	ldr	r3, [pc, #68]	@ (800e838 <rfalNfcDepInitiatorHandleActivation+0x11c>)
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 800e7f4:	00e8      	lsls	r0, r5, #3
        gNfcip.cfg.fwt = nfcDepDev->info.FWT;
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	9a00      	ldr	r2, [sp, #0]
 800e7fa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 800e7fc:	4328      	orrs	r0, r5
        RFAL_EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 800e7fe:	b2c0      	uxtb	r0, r0
        gNfcip.cfg.fwt = nfcDepDev->info.FWT;
 800e800:	6493      	str	r3, [r2, #72]	@ 0x48
        RFAL_EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 800e802:	f7ff ff01 	bl	800e608 <rfalNfcDepPSL>
 800e806:	2800      	cmp	r0, #0
 800e808:	d112      	bne.n	800e830 <rfalNfcDepInitiatorHandleActivation+0x114>
        if( nfcDepDev->info.DSI != desiredBR )
 800e80a:	783b      	ldrb	r3, [r7, #0]
 800e80c:	42ab      	cmp	r3, r5
 800e80e:	d00d      	beq.n	800e82c <rfalNfcDepInitiatorHandleActivation+0x110>
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 800e810:	9a00      	ldr	r2, [sp, #0]
 800e812:	7852      	ldrb	r2, [r2, #1]
 800e814:	4313      	orrs	r3, r2
 800e816:	d102      	bne.n	800e81e <rfalNfcDepInitiatorHandleActivation+0x102>
                rfalNfcfPollerInitialize( desiredBR );
 800e818:	0028      	movs	r0, r5
 800e81a:	f001 fd3b 	bl	8010294 <rfalNfcfPollerInitialize>
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 800e81e:	9b01      	ldr	r3, [sp, #4]
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 800e820:	0029      	movs	r1, r5
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 800e822:	701d      	strb	r5, [r3, #0]
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 800e824:	0028      	movs	r0, r5
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 800e826:	703d      	strb	r5, [r7, #0]
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 800e828:	f7f5 fc08 	bl	800403c <rfalSetBitRate>
}
 800e82c:	0030      	movs	r0, r6
 800e82e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        RFAL_EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 800e830:	0006      	movs	r6, r0
 800e832:	e7fb      	b.n	800e82c <rfalNfcDepInitiatorHandleActivation+0x110>
 800e834:	08200200 	.word	0x08200200
 800e838:	20002470 	.word	0x20002470

0800e83c <rfalNfcDepListenStartActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenStartActivation( const rfalNfcDepTargetParam *param, const uint8_t *atrReq, uint16_t atrReqLength, rfalNfcDepListenActvParam rxParam )
{
 800e83c:	b082      	sub	sp, #8
 800e83e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e840:	b099      	sub	sp, #100	@ 0x64
 800e842:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e844:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e846:	0005      	movs	r5, r0
 800e848:	000f      	movs	r7, r1
 800e84a:	0016      	movs	r6, r2
 800e84c:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 800e84e:	9302      	str	r3, [sp, #8]
    ReturnCode        ret;
    rfalNfcDepConfigs cfg;
    
    
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 800e850:	2800      	cmp	r0, #0
 800e852:	d105      	bne.n	800e860 <rfalNfcDepListenStartActivation+0x24>
    {
        return RFAL_ERR_PARAM;
 800e854:	2007      	movs	r0, #7
    RFAL_EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
    
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
    
    return RFAL_ERR_NONE;
}
 800e856:	b019      	add	sp, #100	@ 0x64
 800e858:	bcf0      	pop	{r4, r5, r6, r7}
 800e85a:	bc08      	pop	{r3}
 800e85c:	b002      	add	sp, #8
 800e85e:	4718      	bx	r3
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 800e860:	2900      	cmp	r1, #0
 800e862:	d0f7      	beq.n	800e854 <rfalNfcDepListenStartActivation+0x18>
 800e864:	9b02      	ldr	r3, [sp, #8]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d0f4      	beq.n	800e854 <rfalNfcDepListenStartActivation+0x18>
    if( !rfalNfcDepIsAtrReq( atrReq, atrReqLength, NULL ) )
 800e86a:	2200      	movs	r2, #0
 800e86c:	0031      	movs	r1, r6
 800e86e:	0038      	movs	r0, r7
 800e870:	f7ff fe32 	bl	800e4d8 <rfalNfcDepIsAtrReq>
 800e874:	2800      	cmp	r0, #0
 800e876:	d0ed      	beq.n	800e854 <rfalNfcDepListenStartActivation+0x18>
    rxParam.nfcDepDev->activation.Initiator.ATR_REQLen = (uint8_t)atrReqLength;                   /* nfcipIsAtrReq() is already checking Min and Max buffer lengths */ 
 800e878:	b2f3      	uxtb	r3, r6
 800e87a:	9303      	str	r3, [sp, #12]
 800e87c:	0023      	movs	r3, r4
 800e87e:	b2f2      	uxtb	r2, r6
 800e880:	3340      	adds	r3, #64	@ 0x40
 800e882:	701a      	strb	r2, [r3, #0]
    if( atrReqLength > 0U )                                                                       /* MISRA 21.18 */
 800e884:	2e00      	cmp	r6, #0
 800e886:	d004      	beq.n	800e892 <rfalNfcDepListenStartActivation+0x56>
        RFAL_MEMCPY( (uint8_t*)&rxParam.nfcDepDev->activation.Initiator.ATR_REQ, atrReq, atrReqLength );
 800e888:	0032      	movs	r2, r6
 800e88a:	0039      	movs	r1, r7
 800e88c:	0020      	movs	r0, r4
 800e88e:	f004 fd45 	bl	801331c <memcpy>
    rxParam.nfcDepDev->info.GBLen = (uint8_t)(atrReqLength - RFAL_NFCDEP_ATRREQ_MIN_LEN);
 800e892:	0023      	movs	r3, r4
 800e894:	9f03      	ldr	r7, [sp, #12]
 800e896:	3344      	adds	r3, #68	@ 0x44
 800e898:	3f10      	subs	r7, #16
 800e89a:	701f      	strb	r7, [r3, #0]
    rxParam.nfcDepDev->info.DID   = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800e89c:	7b22      	ldrb	r2, [r4, #12]
 800e89e:	749a      	strb	r2, [r3, #18]
    rxParam.nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                        /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	74da      	strb	r2, [r3, #19]
    rxParam.nfcDepDev->info.LR    = rfalNfcDepPP2LR( rxParam.nfcDepDev->activation.Initiator.ATR_REQ.PPi );
 800e8a4:	0022      	movs	r2, r4
 800e8a6:	7be3      	ldrb	r3, [r4, #15]
 800e8a8:	3250      	adds	r2, #80	@ 0x50
 800e8aa:	069b      	lsls	r3, r3, #26
 800e8ac:	0f9b      	lsrs	r3, r3, #30
 800e8ae:	7013      	strb	r3, [r2, #0]
    rxParam.nfcDepDev->info.FS    = rfalNfcDepLR2FS( rxParam.nfcDepDev->info.LR );
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	22fe      	movs	r2, #254	@ 0xfe
 800e8b4:	019b      	lsls	r3, r3, #6
 800e8b6:	2bfd      	cmp	r3, #253	@ 0xfd
 800e8b8:	d800      	bhi.n	800e8bc <rfalNfcDepListenStartActivation+0x80>
 800e8ba:	b29a      	uxth	r2, r3
 800e8bc:	0023      	movs	r3, r4
 800e8be:	3352      	adds	r3, #82	@ 0x52
 800e8c0:	801a      	strh	r2, [r3, #0]
    rxParam.nfcDepDev->info.WT    = 0;
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	3b0d      	subs	r3, #13
 800e8c6:	701a      	strb	r2, [r3, #0]
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 800e8c8:	2301      	movs	r3, #1
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 800e8ca:	0021      	movs	r1, r4
 800e8cc:	0020      	movs	r0, r4
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 800e8ce:	425b      	negs	r3, r3
 800e8d0:	64a3      	str	r3, [r4, #72]	@ 0x48
    rxParam.nfcDepDev->info.dFWT  = NFCIP_NO_FWT;
 800e8d2:	64e3      	str	r3, [r4, #76]	@ 0x4c
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 800e8d4:	3155      	adds	r1, #85	@ 0x55
 800e8d6:	3054      	adds	r0, #84	@ 0x54
 800e8d8:	f7f5 fdbc 	bl	8004454 <rfalGetBitRate>
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 800e8dc:	4f2e      	ldr	r7, [pc, #184]	@ (800e998 <rfalNfcDepListenStartActivation+0x15c>)
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800e8de:	ae04      	add	r6, sp, #16
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 800e8e0:	67bc      	str	r4, [r7, #120]	@ 0x78
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800e8e2:	7b23      	ldrb	r3, [r4, #12]
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 800e8e4:	2200      	movs	r2, #0
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800e8e6:	70f3      	strb	r3, [r6, #3]
    cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 800e8e8:	2380      	movs	r3, #128	@ 0x80
 800e8ea:	035b      	lsls	r3, r3, #13
 800e8ec:	64b3      	str	r3, [r6, #72]	@ 0x48
    cfg.dFwt  = RFAL_NFCDEP_WT_DELTA;
 800e8ee:	230c      	movs	r3, #12
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 800e8f0:	7132      	strb	r2, [r6, #4]
    cfg.dFwt  = RFAL_NFCDEP_WT_DELTA;
 800e8f2:	64f3      	str	r3, [r6, #76]	@ 0x4c
    cfg.br = param->brt;
 800e8f4:	7b2b      	ldrb	r3, [r5, #12]
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 800e8f6:	a902      	add	r1, sp, #8
    cfg.br = param->brt;
 800e8f8:	71b3      	strb	r3, [r6, #6]
    cfg.bs = param->bst;
 800e8fa:	7aeb      	ldrb	r3, [r5, #11]
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 800e8fc:	324b      	adds	r2, #75	@ 0x4b
    cfg.bs = param->bst;
 800e8fe:	7173      	strb	r3, [r6, #5]
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 800e900:	7bab      	ldrb	r3, [r5, #14]
 800e902:	1852      	adds	r2, r2, r1
 800e904:	069b      	lsls	r3, r3, #26
 800e906:	0f9b      	lsrs	r3, r3, #30
 800e908:	7013      	strb	r3, [r2, #0]
    cfg.gbLen = param->GBtLen;
 800e90a:	002b      	movs	r3, r5
 800e90c:	333f      	adds	r3, #63	@ 0x3f
 800e90e:	781a      	ldrb	r2, [r3, #0]
 800e910:	234a      	movs	r3, #74	@ 0x4a
 800e912:	185b      	adds	r3, r3, r1
 800e914:	701a      	strb	r2, [r3, #0]
    if( cfg.gbLen > 0U )          /* MISRA 21.18 */
 800e916:	2a00      	cmp	r2, #0
 800e918:	d006      	beq.n	800e928 <rfalNfcDepListenStartActivation+0xec>
        RFAL_MEMCPY(cfg.gb, param->GBt, cfg.gbLen);
 800e91a:	0029      	movs	r1, r5
 800e91c:	201a      	movs	r0, #26
 800e91e:	ab02      	add	r3, sp, #8
 800e920:	310f      	adds	r1, #15
 800e922:	18c0      	adds	r0, r0, r3
 800e924:	f004 fcfa 	bl	801331c <memcpy>
    RFAL_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 800e928:	200f      	movs	r0, #15
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800e92a:	220a      	movs	r2, #10
    RFAL_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 800e92c:	ab02      	add	r3, sp, #8
 800e92e:	1c69      	adds	r1, r5, #1
 800e930:	18c0      	adds	r0, r0, r3
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800e932:	7472      	strb	r2, [r6, #17]
    RFAL_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 800e934:	f004 fcf2 	bl	801331c <memcpy>
    cfg.to = param->to;
 800e938:	7b6a      	ldrb	r2, [r5, #13]
 800e93a:	ab15      	add	r3, sp, #84	@ 0x54
 800e93c:	701a      	strb	r2, [r3, #0]
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 800e93e:	2401      	movs	r4, #1
    cfg.oper     = param->operParam;
 800e940:	002b      	movs	r3, r5
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 800e942:	7034      	strb	r4, [r6, #0]
    cfg.oper     = param->operParam;
 800e944:	3340      	adds	r3, #64	@ 0x40
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	70b3      	strb	r3, [r6, #2]
    cfg.commMode = param->commMode;
 800e94a:	782b      	ldrb	r3, [r5, #0]
 800e94c:	7073      	strb	r3, [r6, #1]
    rfalNfcDepInitialize();
 800e94e:	f7ff fd93 	bl	800e478 <rfalNfcDepInitialize>
    if (cfg == NULL) 
 800e952:	0030      	movs	r0, r6
 800e954:	f7ff fd3c 	bl	800e3d0 <nfcipConfig.part.0>
    gNfcip.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 800e958:	003b      	movs	r3, r7
 800e95a:	2204      	movs	r2, #4
 800e95c:	336a      	adds	r3, #106	@ 0x6a
 800e95e:	32ff      	adds	r2, #255	@ 0xff
 800e960:	801a      	strh	r2, [r3, #0]
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 800e962:	9b02      	ldr	r3, [sp, #8]
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 800e964:	4a0d      	ldr	r2, [pc, #52]	@ (800e99c <rfalNfcDepListenStartActivation+0x160>)
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 800e966:	66fb      	str	r3, [r7, #108]	@ 0x6c
    gNfcip.isChaining   = rxParam.isRxChaining;
 800e968:	9b21      	ldr	r3, [sp, #132]	@ 0x84
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 800e96a:	991f      	ldr	r1, [sp, #124]	@ 0x7c
    gNfcip.isChaining   = rxParam.isRxChaining;
 800e96c:	677b      	str	r3, [r7, #116]	@ 0x74
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 800e96e:	003b      	movs	r3, r7
 800e970:	3370      	adds	r3, #112	@ 0x70
 800e972:	801a      	strh	r2, [r3, #0]
    RFAL_EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 800e974:	2301      	movs	r3, #1
 800e976:	2200      	movs	r2, #0
 800e978:	425b      	negs	r3, r3
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 800e97a:	6679      	str	r1, [r7, #100]	@ 0x64
    RFAL_EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 800e97c:	0020      	movs	r0, r4
 800e97e:	9301      	str	r3, [sp, #4]
 800e980:	9200      	str	r2, [sp, #0]
 800e982:	0013      	movs	r3, r2
 800e984:	f7ff fbfa 	bl	800e17c <nfcipTx>
 800e988:	2800      	cmp	r0, #0
 800e98a:	d000      	beq.n	800e98e <rfalNfcDepListenStartActivation+0x152>
 800e98c:	e763      	b.n	800e856 <rfalNfcDepListenStartActivation+0x1a>
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
 800e98e:	230b      	movs	r3, #11
 800e990:	3750      	adds	r7, #80	@ 0x50
 800e992:	703b      	strb	r3, [r7, #0]
    return RFAL_ERR_NONE;
 800e994:	e75f      	b.n	800e856 <rfalNfcDepListenStartActivation+0x1a>
 800e996:	46c0      	nop			@ (mov r8, r8)
 800e998:	20002470 	.word	0x20002470
 800e99c:	00000505 	.word	0x00000505

0800e9a0 <rfalNfcDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenGetActivationStatus( void )
{
 800e9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ReturnCode err;
    uint8_t    BRS;
    
    BRS = RFAL_NFCDEP_BRS_MAINTAIN;
    
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 800e9a2:	4d4d      	ldr	r5, [pc, #308]	@ (800ead8 <rfalNfcDepListenGetActivationStatus+0x138>)
        return RFAL_ERR_WRONG_STATE;
 800e9a4:	2421      	movs	r4, #33	@ 0x21
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 800e9a6:	002b      	movs	r3, r5
 800e9a8:	3350      	adds	r3, #80	@ 0x50
 800e9aa:	781b      	ldrb	r3, [r3, #0]
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 800e9ac:	6faf      	ldr	r7, [r5, #120]	@ 0x78
{
 800e9ae:	b087      	sub	sp, #28
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 800e9b0:	2b0b      	cmp	r3, #11
 800e9b2:	d10c      	bne.n	800e9ce <rfalNfcDepListenGetActivationStatus+0x2e>
    ret = nfcipDataRx( false );
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	f7ff fceb 	bl	800e390 <nfcipDataRx>
 800e9ba:	1e04      	subs	r4, r0, #0
    if( ret != RFAL_ERR_NONE )
 800e9bc:	d157      	bne.n	800ea6e <rfalNfcDepListenGetActivationStatus+0xce>
    if( gNfcip.rxBuf == NULL )
 800e9be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
        return RFAL_ERR_IO;
 800e9c0:	3403      	adds	r4, #3
    if( gNfcip.rxBuf == NULL )
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d003      	beq.n	800e9ce <rfalNfcDepListenGetActivationStatus+0x2e>
    if ( gNfcip.rxBuf[msgIt++] != NFCIP_REQ )
 800e9c6:	785a      	ldrb	r2, [r3, #1]
 800e9c8:	2ad4      	cmp	r2, #212	@ 0xd4
 800e9ca:	d010      	beq.n	800e9ee <rfalNfcDepListenGetActivationStatus+0x4e>
        return RFAL_ERR_PROTO;
 800e9cc:	240b      	movs	r4, #11
            break;
            
        case RFAL_ERR_PROTO:
        default:
            // re-enable receiving of data
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800e9ce:	002b      	movs	r3, r5
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	2100      	movs	r1, #0
 800e9d4:	4252      	negs	r2, r2
 800e9d6:	336a      	adds	r3, #106	@ 0x6a
 800e9d8:	881b      	ldrh	r3, [r3, #0]
 800e9da:	9202      	str	r2, [sp, #8]
 800e9dc:	3205      	adds	r2, #5
 800e9de:	9201      	str	r2, [sp, #4]
 800e9e0:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800e9e2:	0008      	movs	r0, r1
 800e9e4:	9200      	str	r2, [sp, #0]
 800e9e6:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 800e9e8:	f7f7 f8d4 	bl	8005b94 <rfalTransceiveBlockingTx>
            break;
 800e9ec:	e055      	b.n	800ea9a <rfalNfcDepListenGetActivationStatus+0xfa>
    if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_PSL_REQ )
 800e9ee:	789a      	ldrb	r2, [r3, #2]
 800e9f0:	2a04      	cmp	r2, #4
 800e9f2:	d13f      	bne.n	800ea74 <rfalNfcDepListenGetActivationStatus+0xd4>
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 800e9f4:	78d9      	ldrb	r1, [r3, #3]
 800e9f6:	78ea      	ldrb	r2, [r5, #3]
 800e9f8:	4291      	cmp	r1, r2
 800e9fa:	d1e7      	bne.n	800e9cc <rfalNfcDepListenGetActivationStatus+0x2c>
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 800e9fc:	2103      	movs	r1, #3
        *outBRS = gNfcip.rxBuf[msgIt++];                  /* assign output BRS value      */
 800e9fe:	791e      	ldrb	r6, [r3, #4]
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 800ea00:	795b      	ldrb	r3, [r3, #5]
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800ea02:	22fe      	movs	r2, #254	@ 0xfe
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 800ea04:	4019      	ands	r1, r3
 800ea06:	002b      	movs	r3, r5
 800ea08:	3343      	adds	r3, #67	@ 0x43
 800ea0a:	7019      	strb	r1, [r3, #0]
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800ea0c:	1c4b      	adds	r3, r1, #1
 800ea0e:	019b      	lsls	r3, r3, #6
 800ea10:	2bfd      	cmp	r3, #253	@ 0xfd
 800ea12:	d800      	bhi.n	800ea16 <rfalNfcDepListenGetActivationStatus+0x76>
 800ea14:	b29a      	uxth	r2, r3
 800ea16:	002b      	movs	r3, r5
 800ea18:	335c      	adds	r3, #92	@ 0x5c
 800ea1a:	801a      	strh	r2, [r3, #0]
        if( nfcDepDev != NULL )
 800ea1c:	2f00      	cmp	r7, #0
 800ea1e:	d014      	beq.n	800ea4a <rfalNfcDepListenGetActivationStatus+0xaa>
            nfcDepDev->info.DSI = (rfalBitRate)rfalNfcDepBRS2DSI( *outBRS );   /* DSI codes the bit rate from Initiator to Target */
 800ea20:	2307      	movs	r3, #7
 800ea22:	003c      	movs	r4, r7
 800ea24:	08f0      	lsrs	r0, r6, #3
 800ea26:	4018      	ands	r0, r3
 800ea28:	3454      	adds	r4, #84	@ 0x54
 800ea2a:	7020      	strb	r0, [r4, #0]
            nfcDepDev->info.DRI = (rfalBitRate)rfalNfcDepBRS2DRI( *outBRS );   /* DRI codes the bit rate from Target to Initiator */
 800ea2c:	0038      	movs	r0, r7
 800ea2e:	4033      	ands	r3, r6
 800ea30:	3055      	adds	r0, #85	@ 0x55
 800ea32:	7003      	strb	r3, [r0, #0]
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 800ea34:	003b      	movs	r3, r7
 800ea36:	3350      	adds	r3, #80	@ 0x50
            nfcDepDev->info.FS = gNfcip.fsc;
 800ea38:	805a      	strh	r2, [r3, #2]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 800ea3a:	2230      	movs	r2, #48	@ 0x30
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 800ea3c:	7019      	strb	r1, [r3, #0]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 800ea3e:	7bfb      	ldrb	r3, [r7, #15]
 800ea40:	4393      	bics	r3, r2
 800ea42:	001a      	movs	r2, r3
            nfcDepDev->activation.Initiator.ATR_REQ.PPi |= rfalNfcDepLR2PP( gNfcip.cfg.lr );
 800ea44:	010b      	lsls	r3, r1, #4
 800ea46:	4313      	orrs	r3, r2
 800ea48:	73fb      	strb	r3, [r7, #15]
        rfalSetBitRate( RFAL_BR_KEEP, gNfcip.nfcDepDev->info.DSI );
 800ea4a:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800ea4c:	20ff      	movs	r0, #255	@ 0xff
 800ea4e:	3354      	adds	r3, #84	@ 0x54
 800ea50:	7819      	ldrb	r1, [r3, #0]
 800ea52:	f7f5 faf3 	bl	800403c <rfalSetBitRate>
        RFAL_EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_PSL_RES, txBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 800ea56:	2301      	movs	r3, #1
 800ea58:	2200      	movs	r2, #0
 800ea5a:	425b      	negs	r3, r3
 800ea5c:	9301      	str	r3, [sp, #4]
 800ea5e:	2005      	movs	r0, #5
 800ea60:	0013      	movs	r3, r2
 800ea62:	9200      	str	r2, [sp, #0]
 800ea64:	a904      	add	r1, sp, #16
 800ea66:	f7ff fb89 	bl	800e17c <nfcipTx>
 800ea6a:	1e04      	subs	r4, r0, #0
 800ea6c:	d01b      	beq.n	800eaa6 <rfalNfcDepListenGetActivationStatus+0x106>
    switch (err)
 800ea6e:	2c02      	cmp	r4, #2
 800ea70:	d013      	beq.n	800ea9a <rfalNfcDepListenGetActivationStatus+0xfa>
 800ea72:	e7ac      	b.n	800e9ce <rfalNfcDepListenGetActivationStatus+0x2e>
        if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_DEP_REQ )
 800ea74:	2a06      	cmp	r2, #6
 800ea76:	d108      	bne.n	800ea8a <rfalNfcDepListenGetActivationStatus+0xea>
            if( nfcip_PBF_PNI( gNfcip.rxBuf[msgIt] ) != 0U )
 800ea78:	78da      	ldrb	r2, [r3, #3]
 800ea7a:	0791      	lsls	r1, r2, #30
 800ea7c:	d1a6      	bne.n	800e9cc <rfalNfcDepListenGetActivationStatus+0x2c>
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 800ea7e:	78e9      	ldrb	r1, [r5, #3]
            if( nfcip_PFBhasDID( gNfcip.rxBuf[ msgIt] ) ) 
 800ea80:	0752      	lsls	r2, r2, #29
 800ea82:	d50d      	bpl.n	800eaa0 <rfalNfcDepListenGetActivationStatus+0x100>
                if( gNfcip.rxBuf[++msgIt] != gNfcip.cfg.did )
 800ea84:	791b      	ldrb	r3, [r3, #4]
 800ea86:	428b      	cmp	r3, r1
 800ea88:	d1a0      	bne.n	800e9cc <rfalNfcDepListenGetActivationStatus+0x2c>
        gNfcip.isReqPending = true;
 800ea8a:	002b      	movs	r3, r5
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	3384      	adds	r3, #132	@ 0x84
 800ea90:	701a      	strb	r2, [r3, #0]
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 800ea92:	230d      	movs	r3, #13
 800ea94:	3550      	adds	r5, #80	@ 0x50
 800ea96:	702b      	strb	r3, [r5, #0]
                    RFAL_EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 800ea98:	2400      	movs	r4, #0
    }
    
    return err;
}
 800ea9a:	0020      	movs	r0, r4
 800ea9c:	b007      	add	sp, #28
 800ea9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )          /* DID expected but not rcv */
 800eaa0:	2900      	cmp	r1, #0
 800eaa2:	d0f2      	beq.n	800ea8a <rfalNfcDepListenGetActivationStatus+0xea>
 800eaa4:	e792      	b.n	800e9cc <rfalNfcDepListenGetActivationStatus+0x2c>
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 800eaa6:	002b      	movs	r3, r5
 800eaa8:	200d      	movs	r0, #13
 800eaaa:	3350      	adds	r3, #80	@ 0x50
 800eaac:	7018      	strb	r0, [r3, #0]
            if( BRS != RFAL_NFCDEP_BRS_MAINTAIN )
 800eaae:	2ec0      	cmp	r6, #192	@ 0xc0
 800eab0:	d0f2      	beq.n	800ea98 <rfalNfcDepListenGetActivationStatus+0xf8>
                    RFAL_EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 800eab2:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800eab4:	001a      	movs	r2, r3
 800eab6:	3354      	adds	r3, #84	@ 0x54
 800eab8:	3255      	adds	r2, #85	@ 0x55
 800eaba:	7811      	ldrb	r1, [r2, #0]
 800eabc:	781a      	ldrb	r2, [r3, #0]
                if( gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_ACTIVE )
 800eabe:	786b      	ldrb	r3, [r5, #1]
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d103      	bne.n	800eacc <rfalNfcDepListenGetActivationStatus+0x12c>
                    RFAL_EXIT_ON_ERR( err, rfalSetMode( ((RFAL_BR_106 == gNfcip.nfcDepDev->info.DRI) ? RFAL_MODE_LISTEN_NFCA : RFAL_MODE_LISTEN_NFCF), gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 800eac4:	f7f5 fbd2 	bl	800426c <rfalSetMode>
 800eac8:	0004      	movs	r4, r0
 800eaca:	e7e6      	b.n	800ea9a <rfalNfcDepListenGetActivationStatus+0xfa>
 800eacc:	200c      	movs	r0, #12
 800eace:	2900      	cmp	r1, #0
 800ead0:	d1f8      	bne.n	800eac4 <rfalNfcDepListenGetActivationStatus+0x124>
 800ead2:	3802      	subs	r0, #2
 800ead4:	e7f6      	b.n	800eac4 <rfalNfcDepListenGetActivationStatus+0x124>
 800ead6:	46c0      	nop			@ (mov r8, r8)
 800ead8:	20002470 	.word	0x20002470

0800eadc <rfalNfcDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalNfcDepStartTransceive( const rfalNfcDepTxRxParam *param )
{
 800eadc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    nfcDepParams.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;  /* position in txBuf where actual outgoing data is located */
    nfcDepParams.did          = RFAL_NFCDEP_DID_KEEP;
    nfcDepParams.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
    nfcDepParams.rxBufLen     = sizeof(rfalNfcDepBufFormat);
    nfcDepParams.fsc          = param->FSx;
 800eade:	8b82      	ldrh	r2, [r0, #28]
    nfcDepParams.txBufLen     = param->txBufLen;
 800eae0:	8883      	ldrh	r3, [r0, #4]
    nfcDepParams.txChaining   = param->isTxChaining;
 800eae2:	7987      	ldrb	r7, [r0, #6]
    nfcDepParams.fsc          = param->FSx;
 800eae4:	9200      	str	r2, [sp, #0]
    nfcDepParams.fwt          = param->FWT;
    nfcDepParams.dFwt         = param->dFWT;
 800eae6:	6982      	ldr	r2, [r0, #24]
    nfcDepParams.txBuf        = (uint8_t *)param->txBuf;
 800eae8:	6806      	ldr	r6, [r0, #0]

    gNfcip.rxRcvdLen          = param->rxLen;
 800eaea:	4c1b      	ldr	r4, [pc, #108]	@ (800eb58 <rfalNfcDepStartTransceive+0x7c>)
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
 800eaec:	6885      	ldr	r5, [r0, #8]
    nfcDepParams.fwt          = param->FWT;
 800eaee:	6941      	ldr	r1, [r0, #20]
    nfcDepParams.dFwt         = param->dFWT;
 800eaf0:	9201      	str	r2, [sp, #4]
    gNfcip.rxRcvdLen          = param->rxLen;
 800eaf2:	68c2      	ldr	r2, [r0, #12]
    gNfcip.isChaining         = param->isRxChaining;
 800eaf4:	6900      	ldr	r0, [r0, #16]
    gNfcip.rxBuf        = DEPParams->rxBuf;
 800eaf6:	6665      	str	r5, [r4, #100]	@ 0x64
    gNfcip.isChaining         = param->isRxChaining;
 800eaf8:	6760      	str	r0, [r4, #116]	@ 0x74
    gNfcip.isTxChaining = DEPParams->txChaining;
 800eafa:	0020      	movs	r0, r4
 800eafc:	305e      	adds	r0, #94	@ 0x5e
 800eafe:	7007      	strb	r7, [r0, #0]
    gNfcip.txBufLen     = DEPParams->txBufLen;
 800eb00:	0020      	movs	r0, r4
 800eb02:	3068      	adds	r0, #104	@ 0x68
 800eb04:	8003      	strh	r3, [r0, #0]
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 800eb06:	2504      	movs	r5, #4
 800eb08:	0020      	movs	r0, r4
 800eb0a:	35ff      	adds	r5, #255	@ 0xff
 800eb0c:	306a      	adds	r0, #106	@ 0x6a
    gNfcip.rxRcvdLen          = param->rxLen;
 800eb0e:	66e2      	str	r2, [r4, #108]	@ 0x6c
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 800eb10:	9a01      	ldr	r2, [sp, #4]
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 800eb12:	8005      	strh	r5, [r0, #0]
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 800eb14:	0020      	movs	r0, r4
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 800eb16:	64e2      	str	r2, [r4, #76]	@ 0x4c
    gNfcip.fsc          = DEPParams->fsc;
 800eb18:	0022      	movs	r2, r4
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 800eb1a:	4d10      	ldr	r5, [pc, #64]	@ (800eb5c <rfalNfcDepStartTransceive+0x80>)
 800eb1c:	3070      	adds	r0, #112	@ 0x70
    gNfcip.cfg.fwt      = DEPParams->fwt;
 800eb1e:	64a1      	str	r1, [r4, #72]	@ 0x48
    gNfcip.fsc          = DEPParams->fsc;
 800eb20:	9900      	ldr	r1, [sp, #0]
 800eb22:	325c      	adds	r2, #92	@ 0x5c
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 800eb24:	8005      	strh	r5, [r0, #0]
    gNfcip.fsc          = DEPParams->fsc;
 800eb26:	8011      	strh	r1, [r2, #0]
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 800eb28:	7822      	ldrb	r2, [r4, #0]
    gNfcip.txBuf        = DEPParams->txBuf;
 800eb2a:	6626      	str	r6, [r4, #96]	@ 0x60
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 800eb2c:	2a01      	cmp	r2, #1
 800eb2e:	d10f      	bne.n	800eb50 <rfalNfcDepStartTransceive+0x74>
        if(DEPParams->txBufLen > 0U)
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d008      	beq.n	800eb46 <rfalNfcDepStartTransceive+0x6a>
            if( !gNfcip.isWait4RTOX )
 800eb34:	0023      	movs	r3, r4
 800eb36:	3386      	adds	r3, #134	@ 0x86
 800eb38:	7819      	ldrb	r1, [r3, #0]
 800eb3a:	230f      	movs	r3, #15
 800eb3c:	2900      	cmp	r1, #0
 800eb3e:	d003      	beq.n	800eb48 <rfalNfcDepStartTransceive+0x6c>
                gNfcip.isTxPending = true;
 800eb40:	0023      	movs	r3, r4
 800eb42:	3385      	adds	r3, #133	@ 0x85
 800eb44:	701a      	strb	r2, [r3, #0]
        return;
 800eb46:	230d      	movs	r3, #13
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800eb48:	3450      	adds	r4, #80	@ 0x50

    nfcipSetDEPParams(&nfcDepParams);
    
    return RFAL_ERR_NONE;
}
 800eb4a:	2000      	movs	r0, #0
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800eb4c:	7023      	strb	r3, [r4, #0]
}
 800eb4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    nfcipClearCounters();
 800eb50:	f7ff fb06 	bl	800e160 <nfcipClearCounters>
 800eb54:	2305      	movs	r3, #5
 800eb56:	e7f7      	b.n	800eb48 <rfalNfcDepStartTransceive+0x6c>
 800eb58:	20002470 	.word	0x20002470
 800eb5c:	00000505 	.word	0x00000505

0800eb60 <rfalNfcDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 800eb60:	b5f0      	push	{r4, r5, r6, r7, lr}
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 800eb62:	4da3      	ldr	r5, [pc, #652]	@ (800edf0 <rfalNfcDepGetTransceiveStatus+0x290>)
{
 800eb64:	b08f      	sub	sp, #60	@ 0x3c
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 800eb66:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800eb68:	9307      	str	r3, [sp, #28]
 800eb6a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800eb6c:	9309      	str	r3, [sp, #36]	@ 0x24
    switch( gNfcip.state )
 800eb6e:	002b      	movs	r3, r5
 800eb70:	3350      	adds	r3, #80	@ 0x50
 800eb72:	7818      	ldrb	r0, [r3, #0]
 800eb74:	2810      	cmp	r0, #16
 800eb76:	d901      	bls.n	800eb7c <rfalNfcDepGetTransceiveStatus+0x1c>
 800eb78:	f000 fbf1 	bl	800f35e <rfalNfcDepGetTransceiveStatus+0x7fe>
 800eb7c:	f7f1 faea 	bl	8000154 <__gnu_thumb1_case_uhi>
 800eb80:	03ef00d8 	.word	0x03ef00d8
 800eb84:	03ef03ef 	.word	0x03ef03ef
 800eb88:	001100d8 	.word	0x001100d8
 800eb8c:	03ef002d 	.word	0x03ef002d
 800eb90:	03ef03ef 	.word	0x03ef03ef
 800eb94:	03ef03ef 	.word	0x03ef03ef
 800eb98:	01d400d8 	.word	0x01d400d8
 800eb9c:	01af0180 	.word	0x01af0180
 800eba0:	00d8      	.short	0x00d8
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 800eba2:	002b      	movs	r3, r5
 800eba4:	002a      	movs	r2, r5
 800eba6:	6cec      	ldr	r4, [r5, #76]	@ 0x4c
 800eba8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ebaa:	3368      	adds	r3, #104	@ 0x68
 800ebac:	1900      	adds	r0, r0, r4
 800ebae:	3270      	adds	r2, #112	@ 0x70
 800ebb0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ebb2:	881b      	ldrh	r3, [r3, #0]
 800ebb4:	7812      	ldrb	r2, [r2, #0]
 800ebb6:	9001      	str	r0, [sp, #4]
 800ebb8:	0028      	movs	r0, r5
 800ebba:	2403      	movs	r4, #3
 800ebbc:	3051      	adds	r0, #81	@ 0x51
 800ebbe:	7800      	ldrb	r0, [r0, #0]
 800ebc0:	188a      	adds	r2, r1, r2
 800ebc2:	4020      	ands	r0, r4
 800ebc4:	9000      	str	r0, [sp, #0]
 800ebc6:	2006      	movs	r0, #6
 800ebc8:	f7ff fad8 	bl	800e17c <nfcipTx>
 800ebcc:	002b      	movs	r3, r5
 800ebce:	0004      	movs	r4, r0
            switch( ret )
 800ebd0:	3350      	adds	r3, #80	@ 0x50
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	d124      	bne.n	800ec20 <rfalNfcDepGetTransceiveStatus+0xc0>
                    gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 800ebd6:	2206      	movs	r2, #6
 800ebd8:	701a      	strb	r2, [r3, #0]
            ret = nfcipDataRx( false );
 800ebda:	2000      	movs	r0, #0
 800ebdc:	f7ff fbd8 	bl	800e390 <nfcipDataRx>
 800ebe0:	0004      	movs	r4, r0
            if( ret != RFAL_ERR_BUSY )
 800ebe2:	2802      	cmp	r0, #2
 800ebe4:	d100      	bne.n	800ebe8 <rfalNfcDepGetTransceiveStatus+0x88>
 800ebe6:	e101      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
    *outActRxLen    = 0;
 800ebe8:	2100      	movs	r1, #0
 800ebea:	9b07      	ldr	r3, [sp, #28]
 800ebec:	8019      	strh	r1, [r3, #0]
    *outIsChaining  = false;
 800ebee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebf0:	7019      	strb	r1, [r3, #0]
    switch( rxRes )
 800ebf2:	281d      	cmp	r0, #29
 800ebf4:	d900      	bls.n	800ebf8 <rfalNfcDepGetTransceiveStatus+0x98>
 800ebf6:	e09c      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	001a      	movs	r2, r3
 800ebfc:	4082      	lsls	r2, r0
 800ebfe:	487d      	ldr	r0, [pc, #500]	@ (800edf4 <rfalNfcDepGetTransceiveStatus+0x294>)
 800ec00:	4202      	tst	r2, r0
 800ec02:	d13b      	bne.n	800ec7c <rfalNfcDepGetTransceiveStatus+0x11c>
 800ec04:	421a      	tst	r2, r3
 800ec06:	d148      	bne.n	800ec9a <rfalNfcDepGetTransceiveStatus+0x13a>
 800ec08:	2c04      	cmp	r4, #4
 800ec0a:	d000      	beq.n	800ec0e <rfalNfcDepGetTransceiveStatus+0xae>
 800ec0c:	e091      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            if( gNfcip.cntTORetrys++ >= RFAL_NFCDEP_TO_RETRYS )
 800ec0e:	002a      	movs	r2, r5
 800ec10:	3257      	adds	r2, #87	@ 0x57
 800ec12:	7813      	ldrb	r3, [r2, #0]
 800ec14:	1c59      	adds	r1, r3, #1
 800ec16:	7011      	strb	r1, [r2, #0]
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d904      	bls.n	800ec26 <rfalNfcDepGetTransceiveStatus+0xc6>
                return RFAL_ERR_PROTO;
 800ec1c:	240b      	movs	r4, #11
 800ec1e:	e088      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
                    gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 800ec20:	2204      	movs	r2, #4
            gNfcip.isRxChaining = false;
 800ec22:	701a      	strb	r2, [r3, #0]
            ret = RFAL_ERR_NONE;                            /* Data exchange done */
 800ec24:	e085      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            if( nfcipIsDeactivationPending() )
 800ec26:	1d2b      	adds	r3, r5, #4
 800ec28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d118      	bne.n	800ec60 <rfalNfcDepGetTransceiveStatus+0x100>
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 800ec2e:	002b      	movs	r3, r5
 800ec30:	3353      	adds	r3, #83	@ 0x53
 800ec32:	7818      	ldrb	r0, [r3, #0]
 800ec34:	230f      	movs	r3, #15
 800ec36:	4398      	bics	r0, r3
 800ec38:	2850      	cmp	r0, #80	@ 0x50
 800ec3a:	d116      	bne.n	800ec6a <rfalNfcDepGetTransceiveStatus+0x10a>
                if( gNfcip.cntNACKRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 800ec3c:	002a      	movs	r2, r5
 800ec3e:	3259      	adds	r2, #89	@ 0x59
 800ec40:	7813      	ldrb	r3, [r2, #0]
 800ec42:	1c59      	adds	r1, r3, #1
 800ec44:	7011      	strb	r1, [r2, #0]
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	d8e8      	bhi.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
                RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 800ec4a:	2203      	movs	r2, #3
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	3551      	adds	r5, #81	@ 0x51
 800ec50:	782b      	ldrb	r3, [r5, #0]
 800ec52:	4013      	ands	r3, r2
 800ec54:	4318      	orrs	r0, r3
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 800ec56:	f7ff fb6b 	bl	800e330 <nfcipDEPControlMsg>
 800ec5a:	1e04      	subs	r4, r0, #0
 800ec5c:	d169      	bne.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
 800ec5e:	e0c5      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
            if( nfcipIsDeactivationPending() )
 800ec60:	4798      	blx	r3
 800ec62:	2800      	cmp	r0, #0
 800ec64:	d0e3      	beq.n	800ec2e <rfalNfcDepGetTransceiveStatus+0xce>
                return RFAL_ERR_TIMEOUT;
 800ec66:	2404      	movs	r4, #4
 800ec68:	e063      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            if( gNfcip.cntATNRetrys++ >= RFAL_NFCDEP_MAX_ATN_RETRYS )
 800ec6a:	355a      	adds	r5, #90	@ 0x5a
 800ec6c:	782b      	ldrb	r3, [r5, #0]
 800ec6e:	1c5a      	adds	r2, r3, #1
 800ec70:	702a      	strb	r2, [r5, #0]
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d8d2      	bhi.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 800ec76:	2100      	movs	r1, #0
 800ec78:	2080      	movs	r0, #128	@ 0x80
 800ec7a:	e7ec      	b.n	800ec56 <rfalNfcDepGetTransceiveStatus+0xf6>
            if( gNfcip.cntNACKRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 800ec7c:	002a      	movs	r2, r5
 800ec7e:	3259      	adds	r2, #89	@ 0x59
 800ec80:	7813      	ldrb	r3, [r2, #0]
                return RFAL_ERR_FRAMING;
 800ec82:	2409      	movs	r4, #9
            if( gNfcip.cntNACKRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 800ec84:	1c58      	adds	r0, r3, #1
 800ec86:	7010      	strb	r0, [r2, #0]
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d852      	bhi.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 800ec8c:	2203      	movs	r2, #3
 800ec8e:	2050      	movs	r0, #80	@ 0x50
 800ec90:	3551      	adds	r5, #81	@ 0x51
 800ec92:	782b      	ldrb	r3, [r5, #0]
 800ec94:	4013      	ands	r3, r2
 800ec96:	4318      	orrs	r0, r3
 800ec98:	e7dd      	b.n	800ec56 <rfalNfcDepGetTransceiveStatus+0xf6>
    if( gNfcip.rxBuf == NULL )
 800ec9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
        return RFAL_ERR_IO;
 800ec9c:	2403      	movs	r4, #3
    if( gNfcip.rxBuf == NULL )
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d047      	beq.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 800eca2:	781a      	ldrb	r2, [r3, #0]
 800eca4:	9205      	str	r2, [sp, #20]
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 800eca6:	785a      	ldrb	r2, [r3, #1]
 800eca8:	2ad5      	cmp	r2, #213	@ 0xd5
 800ecaa:	d1b7      	bne.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 800ecac:	789a      	ldrb	r2, [r3, #2]
 800ecae:	2a07      	cmp	r2, #7
 800ecb0:	d1b4      	bne.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 800ecb2:	78dc      	ldrb	r4, [r3, #3]
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 800ecb4:	3218      	adds	r2, #24
 800ecb6:	0021      	movs	r1, r4
 800ecb8:	4391      	bics	r1, r2
 800ecba:	0008      	movs	r0, r1
 800ecbc:	000a      	movs	r2, r1
 800ecbe:	21bf      	movs	r1, #191	@ 0xbf
 800ecc0:	3840      	subs	r0, #64	@ 0x40
 800ecc2:	4208      	tst	r0, r1
 800ecc4:	d001      	beq.n	800ecca <rfalNfcDepGetTransceiveStatus+0x16a>
 800ecc6:	2c1f      	cmp	r4, #31
 800ecc8:	d8a8      	bhi.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800ecca:	78e9      	ldrb	r1, [r5, #3]
 800eccc:	2900      	cmp	r1, #0
 800ecce:	d033      	beq.n	800ed38 <rfalNfcDepGetTransceiveStatus+0x1d8>
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (!nfcip_PFBhasDID( rxPFB )) )
 800ecd0:	7918      	ldrb	r0, [r3, #4]
 800ecd2:	4288      	cmp	r0, r1
 800ecd4:	d1a2      	bne.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
 800ecd6:	0761      	lsls	r1, r4, #29
 800ecd8:	d5a0      	bpl.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800ecda:	2601      	movs	r6, #1
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (!nfcip_PFBhasDID( rxPFB )) )
 800ecdc:	2705      	movs	r7, #5
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 800ecde:	7929      	ldrb	r1, [r5, #4]
 800ece0:	2900      	cmp	r1, #0
 800ece2:	d02f      	beq.n	800ed44 <rfalNfcDepGetTransceiveStatus+0x1e4>
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || (!nfcip_PFBhasNAD( rxPFB )) )
 800ece4:	5dd8      	ldrb	r0, [r3, r7]
 800ece6:	4288      	cmp	r0, r1
 800ece8:	d198      	bne.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
 800ecea:	0721      	lsls	r1, r4, #28
 800ecec:	d596      	bpl.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
 800ecee:	3701      	adds	r7, #1
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800ecf0:	3601      	adds	r6, #1
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || (!nfcip_PFBhasNAD( rxPFB )) )
 800ecf2:	b2ff      	uxtb	r7, r7
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800ecf4:	b2f6      	uxtb	r6, r6
    if( nfcip_PFBisRPDU( rxPFB ) )
 800ecf6:	2a40      	cmp	r2, #64	@ 0x40
 800ecf8:	d137      	bne.n	800ed6a <rfalNfcDepGetTransceiveStatus+0x20a>
        if( nfcip_PFBisRACK( rxPFB ) )
 800ecfa:	230f      	movs	r3, #15
 800ecfc:	0022      	movs	r2, r4
 800ecfe:	439a      	bics	r2, r3
 800ed00:	2a40      	cmp	r2, #64	@ 0x40
 800ed02:	d18b      	bne.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 800ed04:	0029      	movs	r1, r5
 800ed06:	2203      	movs	r2, #3
 800ed08:	0020      	movs	r0, r4
 800ed0a:	3151      	adds	r1, #81	@ 0x51
 800ed0c:	780b      	ldrb	r3, [r1, #0]
 800ed0e:	4010      	ands	r0, r2
 800ed10:	4283      	cmp	r3, r0
 800ed12:	d11a      	bne.n	800ed4a <rfalNfcDepGetTransceiveStatus+0x1ea>
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800ed14:	3301      	adds	r3, #1
 800ed16:	4013      	ands	r3, r2
 800ed18:	700b      	strb	r3, [r1, #0]
                if( !gNfcip.isTxChaining )
 800ed1a:	002b      	movs	r3, r5
 800ed1c:	335e      	adds	r3, #94	@ 0x5e
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d100      	bne.n	800ed26 <rfalNfcDepGetTransceiveStatus+0x1c6>
 800ed24:	e77a      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
                nfcipClearCounters();
 800ed26:	f7ff fa1b 	bl	800e160 <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 800ed2a:	2304      	movs	r3, #4
 800ed2c:	3550      	adds	r5, #80	@ 0x50
 800ed2e:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_NONE;
 800ed30:	2400      	movs	r4, #0
}
 800ed32:	0020      	movs	r0, r4
 800ed34:	b00f      	add	sp, #60	@ 0x3c
 800ed36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 800ed38:	2704      	movs	r7, #4
 800ed3a:	0026      	movs	r6, r4
 800ed3c:	403e      	ands	r6, r7
 800ed3e:	423c      	tst	r4, r7
 800ed40:	d0cd      	beq.n	800ecde <rfalNfcDepGetTransceiveStatus+0x17e>
 800ed42:	e76b      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 800ed44:	0721      	lsls	r1, r4, #28
 800ed46:	d5d6      	bpl.n	800ecf6 <rfalNfcDepGetTransceiveStatus+0x196>
 800ed48:	e768      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
                if( gNfcip.cntTxRetrys++ >= RFAL_NFCDEP_MAX_TX_RETRYS )
 800ed4a:	3556      	adds	r5, #86	@ 0x56
 800ed4c:	7829      	ldrb	r1, [r5, #0]
 800ed4e:	1c48      	adds	r0, r1, #1
 800ed50:	7028      	strb	r0, [r5, #0]
 800ed52:	2902      	cmp	r1, #2
 800ed54:	d900      	bls.n	800ed58 <rfalNfcDepGetTransceiveStatus+0x1f8>
 800ed56:	e761      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 800ed58:	3b01      	subs	r3, #1
 800ed5a:	4063      	eors	r3, r4
 800ed5c:	4213      	tst	r3, r2
 800ed5e:	d000      	beq.n	800ed62 <rfalNfcDepGetTransceiveStatus+0x202>
 800ed60:	e75c      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 800ed62:	2205      	movs	r2, #5
 800ed64:	4b24      	ldr	r3, [pc, #144]	@ (800edf8 <rfalNfcDepGetTransceiveStatus+0x298>)
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800ed66:	701a      	strb	r2, [r3, #0]
                    return RFAL_ERR_BUSY;
 800ed68:	e040      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 800ed6a:	2a80      	cmp	r2, #128	@ 0x80
 800ed6c:	d146      	bne.n	800edfc <rfalNfcDepGetTransceiveStatus+0x29c>
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 800ed6e:	0020      	movs	r0, r4
 800ed70:	3a71      	subs	r2, #113	@ 0x71
 800ed72:	4390      	bics	r0, r2
 800ed74:	2880      	cmp	r0, #128	@ 0x80
 800ed76:	d11b      	bne.n	800edb0 <rfalNfcDepGetTransceiveStatus+0x250>
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 800ed78:	002b      	movs	r3, r5
 800ed7a:	3353      	adds	r3, #83	@ 0x53
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	4393      	bics	r3, r2
 800ed80:	2b80      	cmp	r3, #128	@ 0x80
 800ed82:	d000      	beq.n	800ed86 <rfalNfcDepGetTransceiveStatus+0x226>
 800ed84:	e74a      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 800ed86:	002b      	movs	r3, r5
 800ed88:	2100      	movs	r1, #0
 800ed8a:	335a      	adds	r3, #90	@ 0x5a
 800ed8c:	7019      	strb	r1, [r3, #0]
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800ed8e:	002b      	movs	r3, r5
 800ed90:	3354      	adds	r3, #84	@ 0x54
 800ed92:	7818      	ldrb	r0, [r3, #0]
 800ed94:	4390      	bics	r0, r2
 800ed96:	2890      	cmp	r0, #144	@ 0x90
 800ed98:	d102      	bne.n	800eda0 <rfalNfcDepGetTransceiveStatus+0x240>
                    RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800ed9a:	3555      	adds	r5, #85	@ 0x55
 800ed9c:	7829      	ldrb	r1, [r5, #0]
 800ed9e:	e75a      	b.n	800ec56 <rfalNfcDepGetTransceiveStatus+0xf6>
                    if( gNfcip.cntTxRetrys++ >= RFAL_NFCDEP_MAX_TX_RETRYS )
 800eda0:	3556      	adds	r5, #86	@ 0x56
 800eda2:	782b      	ldrb	r3, [r5, #0]
 800eda4:	1c5a      	adds	r2, r3, #1
 800eda6:	702a      	strb	r2, [r5, #0]
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	d900      	bls.n	800edae <rfalNfcDepGetTransceiveStatus+0x24e>
 800edac:	e736      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
 800edae:	e7d8      	b.n	800ed62 <rfalNfcDepGetTransceiveStatus+0x202>
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 800edb0:	2890      	cmp	r0, #144	@ 0x90
 800edb2:	d000      	beq.n	800edb6 <rfalNfcDepGetTransceiveStatus+0x256>
 800edb4:	e732      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
            if( (gNfcip.cntRTOXRetrys++ > RFAL_NFCDEP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 800edb6:	0029      	movs	r1, r5
 800edb8:	3158      	adds	r1, #88	@ 0x58
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 800edba:	5dde      	ldrb	r6, [r3, r7]
            if( (gNfcip.cntRTOXRetrys++ > RFAL_NFCDEP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 800edbc:	780b      	ldrb	r3, [r1, #0]
 800edbe:	1c5c      	adds	r4, r3, #1
 800edc0:	700c      	strb	r4, [r1, #0]
 800edc2:	2b0a      	cmp	r3, #10
 800edc4:	d900      	bls.n	800edc8 <rfalNfcDepGetTransceiveStatus+0x268>
 800edc6:	e729      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
 800edc8:	002b      	movs	r3, r5
 800edca:	3353      	adds	r3, #83	@ 0x53
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	4393      	bics	r3, r2
 800edd0:	2b80      	cmp	r3, #128	@ 0x80
 800edd2:	d100      	bne.n	800edd6 <rfalNfcDepGetTransceiveStatus+0x276>
 800edd4:	e722      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 800edd6:	1e73      	subs	r3, r6, #1
 800edd8:	2b3a      	cmp	r3, #58	@ 0x3a
 800edda:	d900      	bls.n	800edde <rfalNfcDepGetTransceiveStatus+0x27e>
 800eddc:	e71e      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 800edde:	0031      	movs	r1, r6
 800ede0:	f7ff faa6 	bl	800e330 <nfcipDEPControlMsg>
 800ede4:	1e04      	subs	r4, r0, #0
 800ede6:	d1a4      	bne.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            gNfcip.lastRTOX = rxRTOX;
 800ede8:	3555      	adds	r5, #85	@ 0x55
 800edea:	702e      	strb	r6, [r5, #0]
            return RFAL_ERR_BUSY;  /* Debug purposes */
 800edec:	2402      	movs	r4, #2
 800edee:	e7a0      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
 800edf0:	20002470 	.word	0x20002470
 800edf4:	28200200 	.word	0x28200200
 800edf8:	200024c0 	.word	0x200024c0
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 800edfc:	2103      	movs	r1, #3
 800edfe:	0020      	movs	r0, r4
 800ee00:	4aca      	ldr	r2, [pc, #808]	@ (800f12c <rfalNfcDepGetTransceiveStatus+0x5cc>)
 800ee02:	4dcb      	ldr	r5, [pc, #812]	@ (800f130 <rfalNfcDepGetTransceiveStatus+0x5d0>)
 800ee04:	7813      	ldrb	r3, [r2, #0]
 800ee06:	4008      	ands	r0, r1
 800ee08:	4283      	cmp	r3, r0
 800ee0a:	d000      	beq.n	800ee0e <rfalNfcDepGetTransceiveStatus+0x2ae>
 800ee0c:	e706      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800ee0e:	3301      	adds	r3, #1
 800ee10:	400b      	ands	r3, r1
 800ee12:	7013      	strb	r3, [r2, #0]
        nfcipClearCounters();
 800ee14:	f7ff f9a4 	bl	800e160 <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 800ee18:	9a05      	ldr	r2, [sp, #20]
 800ee1a:	9b07      	ldr	r3, [sp, #28]
 800ee1c:	3a04      	subs	r2, #4
 800ee1e:	1b92      	subs	r2, r2, r6
 800ee20:	b292      	uxth	r2, r2
 800ee22:	801a      	strh	r2, [r3, #0]
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 800ee24:	002b      	movs	r3, r5
 800ee26:	3371      	adds	r3, #113	@ 0x71
 800ee28:	3604      	adds	r6, #4
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	b2f6      	uxtb	r6, r6
 800ee2e:	42b3      	cmp	r3, r6
 800ee30:	d006      	beq.n	800ee40 <rfalNfcDepGetTransceiveStatus+0x2e0>
 800ee32:	2a00      	cmp	r2, #0
 800ee34:	d004      	beq.n	800ee40 <rfalNfcDepGetTransceiveStatus+0x2e0>
            RFAL_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 800ee36:	6e68      	ldr	r0, [r5, #100]	@ 0x64
 800ee38:	1981      	adds	r1, r0, r6
 800ee3a:	18c0      	adds	r0, r0, r3
 800ee3c:	f004 fa28 	bl	8013290 <memmove>
        if( nfcip_PFBisIMI( rxPFB ) )
 800ee40:	230f      	movs	r3, #15
 800ee42:	439c      	bics	r4, r3
 800ee44:	2c10      	cmp	r4, #16
 800ee46:	d114      	bne.n	800ee72 <rfalNfcDepGetTransceiveStatus+0x312>
            gNfcip.isRxChaining = true;
 800ee48:	002a      	movs	r2, r5
 800ee4a:	3b0e      	subs	r3, #14
 800ee4c:	325f      	adds	r2, #95	@ 0x5f
 800ee4e:	7013      	strb	r3, [r2, #0]
            *outIsChaining      = true;
 800ee50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800ee52:	2040      	movs	r0, #64	@ 0x40
            *outIsChaining      = true;
 800ee54:	7013      	strb	r3, [r2, #0]
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800ee56:	2203      	movs	r2, #3
 800ee58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee5a:	3551      	adds	r5, #81	@ 0x51
 800ee5c:	5dd9      	ldrb	r1, [r3, r7]
 800ee5e:	782b      	ldrb	r3, [r5, #0]
 800ee60:	4013      	ands	r3, r2
 800ee62:	4318      	orrs	r0, r3
 800ee64:	f7ff fa64 	bl	800e330 <nfcipDEPControlMsg>
 800ee68:	1e04      	subs	r4, r0, #0
 800ee6a:	d000      	beq.n	800ee6e <rfalNfcDepGetTransceiveStatus+0x30e>
 800ee6c:	e761      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            return RFAL_ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 800ee6e:	240d      	movs	r4, #13
 800ee70:	e75f      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            gNfcip.isRxChaining = false;
 800ee72:	2200      	movs	r2, #0
 800ee74:	4baf      	ldr	r3, [pc, #700]	@ (800f134 <rfalNfcDepGetTransceiveStatus+0x5d4>)
 800ee76:	701a      	strb	r2, [r3, #0]
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 800ee78:	4baf      	ldr	r3, [pc, #700]	@ (800f138 <rfalNfcDepGetTransceiveStatus+0x5d8>)
 800ee7a:	3204      	adds	r2, #4
 800ee7c:	701a      	strb	r2, [r3, #0]
    return ret;
 800ee7e:	e757      	b.n	800ed30 <rfalNfcDepGetTransceiveStatus+0x1d0>
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 800ee80:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 800ee82:	f7f8 f80f 	bl	8006ea4 <timerIsExpired>
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d0b0      	beq.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 800ee8a:	78ab      	ldrb	r3, [r5, #2]
 800ee8c:	07db      	lsls	r3, r3, #31
 800ee8e:	d500      	bpl.n	800ee92 <rfalNfcDepGetTransceiveStatus+0x332>
 800ee90:	e6e9      	b.n	800ec66 <rfalNfcDepGetTransceiveStatus+0x106>
            if( gNfcip.cntRTOXRetrys++ > RFAL_NFCDEP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 800ee92:	002a      	movs	r2, r5
 800ee94:	3258      	adds	r2, #88	@ 0x58
 800ee96:	7813      	ldrb	r3, [r2, #0]
 800ee98:	1c59      	adds	r1, r3, #1
 800ee9a:	7011      	strb	r1, [r2, #0]
 800ee9c:	2b0a      	cmp	r3, #10
 800ee9e:	d900      	bls.n	800eea2 <rfalNfcDepGetTransceiveStatus+0x342>
 800eea0:	e6bc      	b.n	800ec1c <rfalNfcDepGetTransceiveStatus+0xbc>
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 800eea2:	002b      	movs	r3, r5
 800eea4:	220f      	movs	r2, #15
 800eea6:	2180      	movs	r1, #128	@ 0x80
 800eea8:	3344      	adds	r3, #68	@ 0x44
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	04c9      	lsls	r1, r1, #19
 800eeae:	4013      	ands	r3, r2
 800eeb0:	330c      	adds	r3, #12
 800eeb2:	40d9      	lsrs	r1, r3
 800eeb4:	293b      	cmp	r1, #59	@ 0x3b
 800eeb6:	d900      	bls.n	800eeba <rfalNfcDepGetTransceiveStatus+0x35a>
 800eeb8:	213b      	movs	r1, #59	@ 0x3b
 800eeba:	002b      	movs	r3, r5
 800eebc:	b2c9      	uxtb	r1, r1
 800eebe:	3355      	adds	r3, #85	@ 0x55
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800eec0:	2090      	movs	r0, #144	@ 0x90
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 800eec2:	7019      	strb	r1, [r3, #0]
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800eec4:	f7ff fa34 	bl	800e330 <nfcipDEPControlMsg>
 800eec8:	1e04      	subs	r4, r0, #0
 800eeca:	d000      	beq.n	800eece <rfalNfcDepGetTransceiveStatus+0x36e>
 800eecc:	e731      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            gNfcip.isWait4RTOX = true;
 800eece:	002b      	movs	r3, r5
 800eed0:	2201      	movs	r2, #1
 800eed2:	3386      	adds	r3, #134	@ 0x86
 800eed4:	701a      	strb	r2, [r3, #0]
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 800eed6:	230d      	movs	r3, #13
 800eed8:	3550      	adds	r5, #80	@ 0x50
 800eeda:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_BUSY;
 800eedc:	e786      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 800eede:	002b      	movs	r3, r5
 800eee0:	002a      	movs	r2, r5
 800eee2:	2001      	movs	r0, #1
 800eee4:	002e      	movs	r6, r5
 800eee6:	2703      	movs	r7, #3
 800eee8:	4240      	negs	r0, r0
 800eeea:	3368      	adds	r3, #104	@ 0x68
 800eeec:	3270      	adds	r2, #112	@ 0x70
 800eeee:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	7812      	ldrb	r2, [r2, #0]
 800eef4:	3651      	adds	r6, #81	@ 0x51
 800eef6:	9001      	str	r0, [sp, #4]
 800eef8:	7830      	ldrb	r0, [r6, #0]
 800eefa:	188a      	adds	r2, r1, r2
 800eefc:	4038      	ands	r0, r7
 800eefe:	9000      	str	r0, [sp, #0]
 800ef00:	2007      	movs	r0, #7
 800ef02:	f7ff f93b 	bl	800e17c <nfcipTx>
            gNfcip.isTxPending = false;
 800ef06:	002a      	movs	r2, r5
 800ef08:	2300      	movs	r3, #0
 800ef0a:	3285      	adds	r2, #133	@ 0x85
 800ef0c:	7013      	strb	r3, [r2, #0]
            gNfcip.isWait4RTOX = false;
 800ef0e:	002a      	movs	r2, r5
 800ef10:	3286      	adds	r2, #134	@ 0x86
 800ef12:	7013      	strb	r3, [r2, #0]
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800ef14:	7833      	ldrb	r3, [r6, #0]
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 800ef16:	0004      	movs	r4, r0
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800ef18:	3301      	adds	r3, #1
 800ef1a:	403b      	ands	r3, r7
 800ef1c:	7033      	strb	r3, [r6, #0]
            switch( ret )
 800ef1e:	3550      	adds	r5, #80	@ 0x50
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d11f      	bne.n	800ef64 <rfalNfcDepGetTransceiveStatus+0x404>
                    gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 800ef24:	230d      	movs	r3, #13
 800ef26:	702b      	strb	r3, [r5, #0]
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 800ef28:	4b84      	ldr	r3, [pc, #528]	@ (800f13c <rfalNfcDepGetTransceiveStatus+0x5dc>)
 800ef2a:	4d81      	ldr	r5, [pc, #516]	@ (800f130 <rfalNfcDepGetTransceiveStatus+0x5d0>)
 800ef2c:	7818      	ldrb	r0, [r3, #0]
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d01b      	beq.n	800ef6a <rfalNfcDepGetTransceiveStatus+0x40a>
                gNfcip.isReqPending = false;
 800ef32:	2400      	movs	r4, #0
 800ef34:	701c      	strb	r4, [r3, #0]
    *outActRxLen    = 0;
 800ef36:	2000      	movs	r0, #0
 800ef38:	9b07      	ldr	r3, [sp, #28]
 800ef3a:	8018      	strh	r0, [r3, #0]
    *outIsChaining  = false;
 800ef3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef3e:	7018      	strb	r0, [r3, #0]
    switch( rxRes )
 800ef40:	4284      	cmp	r4, r0
 800ef42:	d018      	beq.n	800ef76 <rfalNfcDepGetTransceiveStatus+0x416>
 800ef44:	2c25      	cmp	r4, #37	@ 0x25
 800ef46:	d100      	bne.n	800ef4a <rfalNfcDepGetTransceiveStatus+0x3ea>
 800ef48:	e6f3      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ef4a:	002b      	movs	r3, r5
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	336a      	adds	r3, #106	@ 0x6a
 800ef50:	4252      	negs	r2, r2
 800ef52:	881b      	ldrh	r3, [r3, #0]
 800ef54:	9202      	str	r2, [sp, #8]
 800ef56:	3205      	adds	r2, #5
 800ef58:	9201      	str	r2, [sp, #4]
 800ef5a:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800ef5c:	9200      	str	r2, [sp, #0]
 800ef5e:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ef60:	0001      	movs	r1, r0
 800ef62:	e01d      	b.n	800efa0 <rfalNfcDepGetTransceiveStatus+0x440>
                    gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 800ef64:	230c      	movs	r3, #12
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800ef66:	702b      	strb	r3, [r5, #0]
                return RFAL_ERR_NONE;                        /* This block has been transmitted */
 800ef68:	e6e3      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
                ret = nfcipDataRx( false );
 800ef6a:	f7ff fa11 	bl	800e390 <nfcipDataRx>
 800ef6e:	0004      	movs	r4, r0
            if( ret != RFAL_ERR_BUSY )
 800ef70:	2802      	cmp	r0, #2
 800ef72:	d1e0      	bne.n	800ef36 <rfalNfcDepGetTransceiveStatus+0x3d6>
 800ef74:	e73a      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
    if( gNfcip.rxBuf == NULL )
 800ef76:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 800ef78:	2a00      	cmp	r2, #0
 800ef7a:	d100      	bne.n	800ef7e <rfalNfcDepGetTransceiveStatus+0x41e>
 800ef7c:	e1ed      	b.n	800f35a <rfalNfcDepGetTransceiveStatus+0x7fa>
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 800ef7e:	7813      	ldrb	r3, [r2, #0]
 800ef80:	469c      	mov	ip, r3
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 800ef82:	7853      	ldrb	r3, [r2, #1]
 800ef84:	2bd4      	cmp	r3, #212	@ 0xd4
 800ef86:	d00e      	beq.n	800efa6 <rfalNfcDepGetTransceiveStatus+0x446>
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ef88:	002b      	movs	r3, r5
 800ef8a:	2101      	movs	r1, #1
 800ef8c:	336a      	adds	r3, #106	@ 0x6a
 800ef8e:	4249      	negs	r1, r1
 800ef90:	881b      	ldrh	r3, [r3, #0]
 800ef92:	9102      	str	r1, [sp, #8]
 800ef94:	3105      	adds	r1, #5
 800ef96:	9101      	str	r1, [sp, #4]
 800ef98:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800ef9a:	0020      	movs	r0, r4
 800ef9c:	9100      	str	r1, [sp, #0]
 800ef9e:	0021      	movs	r1, r4
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800efa0:	f7f6 fdf8 	bl	8005b94 <rfalTransceiveBlockingTx>
            return RFAL_ERR_BUSY;            /* RFAL_ERR_PROTO - Ignore bad PNI value  */
 800efa4:	e722      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
    switch( gNfcip.rxBuf[rxMsgIt++] )
 800efa6:	7893      	ldrb	r3, [r2, #2]
 800efa8:	2b08      	cmp	r3, #8
 800efaa:	d025      	beq.n	800eff8 <rfalNfcDepGetTransceiveStatus+0x498>
 800efac:	2b0a      	cmp	r3, #10
 800efae:	d043      	beq.n	800f038 <rfalNfcDepGetTransceiveStatus+0x4d8>
 800efb0:	2b06      	cmp	r3, #6
 800efb2:	d1e9      	bne.n	800ef88 <rfalNfcDepGetTransceiveStatus+0x428>
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 800efb4:	78d3      	ldrb	r3, [r2, #3]
 800efb6:	9305      	str	r3, [sp, #20]
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 800efb8:	231f      	movs	r3, #31
 800efba:	9905      	ldr	r1, [sp, #20]
 800efbc:	4399      	bics	r1, r3
 800efbe:	0008      	movs	r0, r1
 800efc0:	000b      	movs	r3, r1
 800efc2:	21bf      	movs	r1, #191	@ 0xbf
 800efc4:	3840      	subs	r0, #64	@ 0x40
 800efc6:	4208      	tst	r0, r1
 800efc8:	d002      	beq.n	800efd0 <rfalNfcDepGetTransceiveStatus+0x470>
 800efca:	9905      	ldr	r1, [sp, #20]
 800efcc:	291f      	cmp	r1, #31
 800efce:	d8db      	bhi.n	800ef88 <rfalNfcDepGetTransceiveStatus+0x428>
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800efd0:	2004      	movs	r0, #4
 800efd2:	4f57      	ldr	r7, [pc, #348]	@ (800f130 <rfalNfcDepGetTransceiveStatus+0x5d0>)
 800efd4:	9905      	ldr	r1, [sp, #20]
 800efd6:	78fd      	ldrb	r5, [r7, #3]
 800efd8:	4001      	ands	r1, r0
 800efda:	2d00      	cmp	r5, #0
 800efdc:	d05a      	beq.n	800f094 <rfalNfcDepGetTransceiveStatus+0x534>
        if( !nfcip_PFBhasDID( rxPFB ) )
 800efde:	2900      	cmp	r1, #0
 800efe0:	d14a      	bne.n	800f078 <rfalNfcDepGetTransceiveStatus+0x518>
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800efe2:	003b      	movs	r3, r7
 800efe4:	2401      	movs	r4, #1
 800efe6:	336a      	adds	r3, #106	@ 0x6a
 800efe8:	4264      	negs	r4, r4
 800efea:	881b      	ldrh	r3, [r3, #0]
 800efec:	9402      	str	r4, [sp, #8]
 800efee:	9001      	str	r0, [sp, #4]
 800eff0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800eff2:	9000      	str	r0, [sp, #0]
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800eff4:	0008      	movs	r0, r1
 800eff6:	e7d3      	b.n	800efa0 <rfalNfcDepGetTransceiveStatus+0x440>
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 800eff8:	78e9      	ldrb	r1, [r5, #3]
 800effa:	78d3      	ldrb	r3, [r2, #3]
 800effc:	428b      	cmp	r3, r1
 800effe:	d102      	bne.n	800f006 <rfalNfcDepGetTransceiveStatus+0x4a6>
 800f000:	4662      	mov	r2, ip
 800f002:	2a04      	cmp	r2, #4
 800f004:	d006      	beq.n	800f014 <rfalNfcDepGetTransceiveStatus+0x4b4>
 800f006:	2900      	cmp	r1, #0
 800f008:	d000      	beq.n	800f00c <rfalNfcDepGetTransceiveStatus+0x4ac>
 800f00a:	e6ef      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 800f00c:	4663      	mov	r3, ip
 800f00e:	2b03      	cmp	r3, #3
 800f010:	d003      	beq.n	800f01a <rfalNfcDepGetTransceiveStatus+0x4ba>
 800f012:	e6eb      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
 800f014:	2b00      	cmp	r3, #0
 800f016:	d100      	bne.n	800f01a <rfalNfcDepGetTransceiveStatus+0x4ba>
 800f018:	e6e8      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 800f01a:	2301      	movs	r3, #1
 800f01c:	2200      	movs	r2, #0
 800f01e:	425b      	negs	r3, r3
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	2009      	movs	r0, #9
 800f024:	0013      	movs	r3, r2
 800f026:	9200      	str	r2, [sp, #0]
 800f028:	a90c      	add	r1, sp, #48	@ 0x30
 800f02a:	f7ff f8a7 	bl	800e17c <nfcipTx>
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 800f02e:	2310      	movs	r3, #16
 800f030:	3550      	adds	r5, #80	@ 0x50
            return RFAL_ERR_SLEEP_REQ;
 800f032:	2420      	movs	r4, #32
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 800f034:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_SLEEP_REQ;
 800f036:	e67c      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 800f038:	78e9      	ldrb	r1, [r5, #3]
 800f03a:	78d3      	ldrb	r3, [r2, #3]
 800f03c:	428b      	cmp	r3, r1
 800f03e:	d102      	bne.n	800f046 <rfalNfcDepGetTransceiveStatus+0x4e6>
 800f040:	4662      	mov	r2, ip
 800f042:	2a04      	cmp	r2, #4
 800f044:	d006      	beq.n	800f054 <rfalNfcDepGetTransceiveStatus+0x4f4>
 800f046:	2900      	cmp	r1, #0
 800f048:	d000      	beq.n	800f04c <rfalNfcDepGetTransceiveStatus+0x4ec>
 800f04a:	e6cf      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 800f04c:	4663      	mov	r3, ip
 800f04e:	2b03      	cmp	r3, #3
 800f050:	d903      	bls.n	800f05a <rfalNfcDepGetTransceiveStatus+0x4fa>
 800f052:	e6cb      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
 800f054:	2b00      	cmp	r3, #0
 800f056:	d100      	bne.n	800f05a <rfalNfcDepGetTransceiveStatus+0x4fa>
 800f058:	e6c8      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 800f05a:	2301      	movs	r3, #1
 800f05c:	2200      	movs	r2, #0
 800f05e:	425b      	negs	r3, r3
 800f060:	9301      	str	r3, [sp, #4]
 800f062:	200b      	movs	r0, #11
 800f064:	0013      	movs	r3, r2
 800f066:	9200      	str	r2, [sp, #0]
 800f068:	a90c      	add	r1, sp, #48	@ 0x30
 800f06a:	f7ff f887 	bl	800e17c <nfcipTx>
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 800f06e:	230c      	movs	r3, #12
 800f070:	3550      	adds	r5, #80	@ 0x50
            return RFAL_ERR_RELEASE_REQ;
 800f072:	241f      	movs	r4, #31
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 800f074:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_RELEASE_REQ;
 800f076:	e65c      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 800f078:	7916      	ldrb	r6, [r2, #4]
 800f07a:	42ae      	cmp	r6, r5
 800f07c:	d01a      	beq.n	800f0b4 <rfalNfcDepGetTransceiveStatus+0x554>
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800f07e:	003b      	movs	r3, r7
 800f080:	2101      	movs	r1, #1
 800f082:	336a      	adds	r3, #106	@ 0x6a
 800f084:	4249      	negs	r1, r1
 800f086:	881b      	ldrh	r3, [r3, #0]
 800f088:	9102      	str	r1, [sp, #8]
 800f08a:	9001      	str	r0, [sp, #4]
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800f08c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800f08e:	9100      	str	r1, [sp, #0]
 800f090:	2100      	movs	r1, #0
 800f092:	e7af      	b.n	800eff4 <rfalNfcDepGetTransceiveStatus+0x494>
    optHdrLen  = 0;
 800f094:	9508      	str	r5, [sp, #32]
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 800f096:	9006      	str	r0, [sp, #24]
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 800f098:	2900      	cmp	r1, #0
 800f09a:	d00f      	beq.n	800f0bc <rfalNfcDepGetTransceiveStatus+0x55c>
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800f09c:	003b      	movs	r3, r7
 800f09e:	2101      	movs	r1, #1
 800f0a0:	336a      	adds	r3, #106	@ 0x6a
 800f0a2:	4249      	negs	r1, r1
 800f0a4:	881b      	ldrh	r3, [r3, #0]
 800f0a6:	9001      	str	r0, [sp, #4]
 800f0a8:	9102      	str	r1, [sp, #8]
 800f0aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800f0ac:	0028      	movs	r0, r5
 800f0ae:	9100      	str	r1, [sp, #0]
 800f0b0:	0029      	movs	r1, r5
 800f0b2:	e775      	b.n	800efa0 <rfalNfcDepGetTransceiveStatus+0x440>
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800f0b4:	2001      	movs	r0, #1
 800f0b6:	9008      	str	r0, [sp, #32]
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 800f0b8:	3004      	adds	r0, #4
 800f0ba:	9006      	str	r0, [sp, #24]
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 800f0bc:	4e1c      	ldr	r6, [pc, #112]	@ (800f130 <rfalNfcDepGetTransceiveStatus+0x5d0>)
 800f0be:	7930      	ldrb	r0, [r6, #4]
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d03d      	beq.n	800f140 <rfalNfcDepGetTransceiveStatus+0x5e0>
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (!nfcip_PFBhasDID( rxPFB )) )
 800f0c4:	9806      	ldr	r0, [sp, #24]
 800f0c6:	5c10      	ldrb	r0, [r2, r0]
 800f0c8:	42a8      	cmp	r0, r5
 800f0ca:	d101      	bne.n	800f0d0 <rfalNfcDepGetTransceiveStatus+0x570>
 800f0cc:	2900      	cmp	r1, #0
 800f0ce:	d108      	bne.n	800f0e2 <rfalNfcDepGetTransceiveStatus+0x582>
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800f0d0:	003b      	movs	r3, r7
 800f0d2:	2101      	movs	r1, #1
 800f0d4:	336a      	adds	r3, #106	@ 0x6a
 800f0d6:	4249      	negs	r1, r1
 800f0d8:	881b      	ldrh	r3, [r3, #0]
 800f0da:	9102      	str	r1, [sp, #8]
 800f0dc:	3105      	adds	r1, #5
 800f0de:	9101      	str	r1, [sp, #4]
 800f0e0:	e7d4      	b.n	800f08c <rfalNfcDepGetTransceiveStatus+0x52c>
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (!nfcip_PFBhasDID( rxPFB )) )
 800f0e2:	9906      	ldr	r1, [sp, #24]
 800f0e4:	3101      	adds	r1, #1
 800f0e6:	b2c9      	uxtb	r1, r1
 800f0e8:	9106      	str	r1, [sp, #24]
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800f0ea:	9908      	ldr	r1, [sp, #32]
 800f0ec:	3101      	adds	r1, #1
 800f0ee:	b2c9      	uxtb	r1, r1
 800f0f0:	9108      	str	r1, [sp, #32]
    if( nfcip_PFBisRPDU( rxPFB ) )
 800f0f2:	210f      	movs	r1, #15
 800f0f4:	2b40      	cmp	r3, #64	@ 0x40
 800f0f6:	d16a      	bne.n	800f1ce <rfalNfcDepGetTransceiveStatus+0x66e>
        if( nfcip_PFBisRACK( rxPFB ) )
 800f0f8:	9b05      	ldr	r3, [sp, #20]
 800f0fa:	438b      	bics	r3, r1
 800f0fc:	2b40      	cmp	r3, #64	@ 0x40
 800f0fe:	d154      	bne.n	800f1aa <rfalNfcDepGetTransceiveStatus+0x64a>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 800f100:	2603      	movs	r6, #3
 800f102:	480a      	ldr	r0, [pc, #40]	@ (800f12c <rfalNfcDepGetTransceiveStatus+0x5cc>)
 800f104:	9f05      	ldr	r7, [sp, #20]
 800f106:	7803      	ldrb	r3, [r0, #0]
 800f108:	4d09      	ldr	r5, [pc, #36]	@ (800f130 <rfalNfcDepGetTransceiveStatus+0x5d0>)
 800f10a:	4037      	ands	r7, r6
 800f10c:	42bb      	cmp	r3, r7
 800f10e:	d138      	bne.n	800f182 <rfalNfcDepGetTransceiveStatus+0x622>
                if( !gNfcip.isTxChaining )
 800f110:	002b      	movs	r3, r5
 800f112:	335e      	adds	r3, #94	@ 0x5e
 800f114:	7818      	ldrb	r0, [r3, #0]
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800f116:	002b      	movs	r3, r5
                if( !gNfcip.isTxChaining )
 800f118:	2800      	cmp	r0, #0
 800f11a:	d11f      	bne.n	800f15c <rfalNfcDepGetTransceiveStatus+0x5fc>
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800f11c:	3910      	subs	r1, #16
 800f11e:	336a      	adds	r3, #106	@ 0x6a
 800f120:	881b      	ldrh	r3, [r3, #0]
 800f122:	9102      	str	r1, [sp, #8]
 800f124:	3105      	adds	r1, #5
 800f126:	9101      	str	r1, [sp, #4]
 800f128:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800f12a:	e015      	b.n	800f158 <rfalNfcDepGetTransceiveStatus+0x5f8>
 800f12c:	200024c1 	.word	0x200024c1
 800f130:	20002470 	.word	0x20002470
 800f134:	200024cf 	.word	0x200024cf
 800f138:	200024c0 	.word	0x200024c0
 800f13c:	200024f4 	.word	0x200024f4
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 800f140:	9905      	ldr	r1, [sp, #20]
 800f142:	0709      	lsls	r1, r1, #28
 800f144:	d5d5      	bpl.n	800f0f2 <rfalNfcDepGetTransceiveStatus+0x592>
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800f146:	0033      	movs	r3, r6
 800f148:	2101      	movs	r1, #1
 800f14a:	336a      	adds	r3, #106	@ 0x6a
 800f14c:	4249      	negs	r1, r1
 800f14e:	881b      	ldrh	r3, [r3, #0]
 800f150:	9102      	str	r1, [sp, #8]
 800f152:	3105      	adds	r1, #5
 800f154:	9101      	str	r1, [sp, #4]
 800f156:	6ef1      	ldr	r1, [r6, #108]	@ 0x6c
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800f158:	9100      	str	r1, [sp, #0]
 800f15a:	e701      	b.n	800ef60 <rfalNfcDepGetTransceiveStatus+0x400>
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800f15c:	2001      	movs	r0, #1
 800f15e:	3344      	adds	r3, #68	@ 0x44
 800f160:	781b      	ldrb	r3, [r3, #0]
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800f162:	3550      	adds	r5, #80	@ 0x50
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800f164:	400b      	ands	r3, r1
 800f166:	330c      	adds	r3, #12
 800f168:	4098      	lsls	r0, r3
 800f16a:	497e      	ldr	r1, [pc, #504]	@ (800f364 <rfalNfcDepGetTransceiveStatus+0x804>)
 800f16c:	f7f0 fffc 	bl	8000168 <__udivsi3>
 800f170:	3001      	adds	r0, #1
 800f172:	08c3      	lsrs	r3, r0, #3
 800f174:	1ac0      	subs	r0, r0, r3
 800f176:	b280      	uxth	r0, r0
 800f178:	f7f7 fe8e 	bl	8006e98 <timerCalculateTimer>
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800f17c:	230e      	movs	r3, #14
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800f17e:	62e8      	str	r0, [r5, #44]	@ 0x2c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800f180:	e6f1      	b.n	800ef66 <rfalNfcDepGetTransceiveStatus+0x406>
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 800f182:	002a      	movs	r2, r5
 800f184:	3253      	adds	r2, #83	@ 0x53
 800f186:	7812      	ldrb	r2, [r2, #0]
    ret        = RFAL_ERR_INTERNAL;
 800f188:	240c      	movs	r4, #12
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 800f18a:	438a      	bics	r2, r1
 800f18c:	2a80      	cmp	r2, #128	@ 0x80
 800f18e:	d000      	beq.n	800f192 <rfalNfcDepGetTransceiveStatus+0x632>
 800f190:	e5cf      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
 800f192:	9a05      	ldr	r2, [sp, #20]
 800f194:	3b01      	subs	r3, #1
 800f196:	b2db      	uxtb	r3, r3
 800f198:	405a      	eors	r2, r3
 800f19a:	4232      	tst	r2, r6
 800f19c:	d000      	beq.n	800f1a0 <rfalNfcDepGetTransceiveStatus+0x640>
 800f19e:	e5c8      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 800f1a0:	4033      	ands	r3, r6
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800f1a2:	3550      	adds	r5, #80	@ 0x50
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 800f1a4:	7003      	strb	r3, [r0, #0]
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800f1a6:	7029      	strb	r1, [r5, #0]
                return RFAL_ERR_BUSY;
 800f1a8:	e620      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 800f1aa:	2b50      	cmp	r3, #80	@ 0x50
 800f1ac:	d190      	bne.n	800f0d0 <rfalNfcDepGetTransceiveStatus+0x570>
 800f1ae:	0030      	movs	r0, r6
 800f1b0:	2403      	movs	r4, #3
 800f1b2:	3051      	adds	r0, #81	@ 0x51
 800f1b4:	7803      	ldrb	r3, [r0, #0]
 800f1b6:	9d05      	ldr	r5, [sp, #20]
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	405d      	eors	r5, r3
 800f1be:	4225      	tst	r5, r4
 800f1c0:	d000      	beq.n	800f1c4 <rfalNfcDepGetTransceiveStatus+0x664>
 800f1c2:	e785      	b.n	800f0d0 <rfalNfcDepGetTransceiveStatus+0x570>
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 800f1c4:	4023      	ands	r3, r4
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800f1c6:	3650      	adds	r6, #80	@ 0x50
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 800f1c8:	7003      	strb	r3, [r0, #0]
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800f1ca:	7031      	strb	r1, [r6, #0]
            return RFAL_ERR_BUSY;
 800f1cc:	e60e      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
    if( nfcip_PFBisSPDU( rxPFB ) )
 800f1ce:	2b80      	cmp	r3, #128	@ 0x80
 800f1d0:	d142      	bne.n	800f258 <rfalNfcDepGetTransceiveStatus+0x6f8>
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 800f1d2:	9805      	ldr	r0, [sp, #20]
 800f1d4:	4388      	bics	r0, r1
 800f1d6:	2880      	cmp	r0, #128	@ 0x80
 800f1d8:	d102      	bne.n	800f1e0 <rfalNfcDepGetTransceiveStatus+0x680>
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 800f1da:	2100      	movs	r1, #0
 800f1dc:	0018      	movs	r0, r3
 800f1de:	e53a      	b.n	800ec56 <rfalNfcDepGetTransceiveStatus+0xf6>
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 800f1e0:	2890      	cmp	r0, #144	@ 0x90
 800f1e2:	d000      	beq.n	800f1e6 <rfalNfcDepGetTransceiveStatus+0x686>
 800f1e4:	e774      	b.n	800f0d0 <rfalNfcDepGetTransceiveStatus+0x570>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800f1e6:	0033      	movs	r3, r6
 800f1e8:	3354      	adds	r3, #84	@ 0x54
 800f1ea:	781b      	ldrb	r3, [r3, #0]
    ret        = RFAL_ERR_INTERNAL;
 800f1ec:	240c      	movs	r4, #12
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800f1ee:	438b      	bics	r3, r1
 800f1f0:	2b90      	cmp	r3, #144	@ 0x90
 800f1f2:	d000      	beq.n	800f1f6 <rfalNfcDepGetTransceiveStatus+0x696>
 800f1f4:	e59d      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 800f1f6:	0033      	movs	r3, r6
 800f1f8:	9806      	ldr	r0, [sp, #24]
 800f1fa:	3355      	adds	r3, #85	@ 0x55
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	5c10      	ldrb	r0, [r2, r0]
 800f200:	4298      	cmp	r0, r3
 800f202:	d009      	beq.n	800f218 <rfalNfcDepGetTransceiveStatus+0x6b8>
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800f204:	0033      	movs	r3, r6
 800f206:	2101      	movs	r1, #1
 800f208:	336a      	adds	r3, #106	@ 0x6a
 800f20a:	4249      	negs	r1, r1
 800f20c:	881b      	ldrh	r3, [r3, #0]
 800f20e:	9102      	str	r1, [sp, #8]
 800f210:	3105      	adds	r1, #5
 800f212:	9101      	str	r1, [sp, #4]
 800f214:	6ef1      	ldr	r1, [r6, #108]	@ 0x6c
 800f216:	e73a      	b.n	800f08e <rfalNfcDepGetTransceiveStatus+0x52e>
                gNfcip.isWait4RTOX = false;
 800f218:	0033      	movs	r3, r6
 800f21a:	2200      	movs	r2, #0
 800f21c:	3386      	adds	r3, #134	@ 0x86
 800f21e:	701a      	strb	r2, [r3, #0]
                if( gNfcip.isTxPending )
 800f220:	0033      	movs	r3, r6
 800f222:	3385      	adds	r3, #133	@ 0x85
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	4293      	cmp	r3, r2
 800f228:	d002      	beq.n	800f230 <rfalNfcDepGetTransceiveStatus+0x6d0>
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800f22a:	220f      	movs	r2, #15
 800f22c:	4b4e      	ldr	r3, [pc, #312]	@ (800f368 <rfalNfcDepGetTransceiveStatus+0x808>)
 800f22e:	e59a      	b.n	800ed66 <rfalNfcDepGetTransceiveStatus+0x206>
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 800f230:	0033      	movs	r3, r6
 800f232:	3344      	adds	r3, #68	@ 0x44
 800f234:	781b      	ldrb	r3, [r3, #0]
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800f236:	3650      	adds	r6, #80	@ 0x50
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 800f238:	400b      	ands	r3, r1
 800f23a:	330c      	adds	r3, #12
 800f23c:	4098      	lsls	r0, r3
 800f23e:	4949      	ldr	r1, [pc, #292]	@ (800f364 <rfalNfcDepGetTransceiveStatus+0x804>)
 800f240:	f7f0 ff92 	bl	8000168 <__udivsi3>
 800f244:	3001      	adds	r0, #1
 800f246:	08c3      	lsrs	r3, r0, #3
 800f248:	1ac0      	subs	r0, r0, r3
 800f24a:	b280      	uxth	r0, r0
 800f24c:	f7f7 fe24 	bl	8006e98 <timerCalculateTimer>
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800f250:	220e      	movs	r2, #14
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 800f252:	62f0      	str	r0, [r6, #44]	@ 0x2c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800f254:	7032      	strb	r2, [r6, #0]
                return RFAL_ERR_BUSY;
 800f256:	e5c9      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 800f258:	2003      	movs	r0, #3
 800f25a:	4b44      	ldr	r3, [pc, #272]	@ (800f36c <rfalNfcDepGetTransceiveStatus+0x80c>)
 800f25c:	4d44      	ldr	r5, [pc, #272]	@ (800f370 <rfalNfcDepGetTransceiveStatus+0x810>)
 800f25e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f264:	9b05      	ldr	r3, [sp, #20]
 800f266:	4003      	ands	r3, r0
 800f268:	0018      	movs	r0, r3
 800f26a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f26c:	4283      	cmp	r3, r0
 800f26e:	d023      	beq.n	800f2b8 <rfalNfcDepGetTransceiveStatus+0x758>
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 800f270:	3553      	adds	r5, #83	@ 0x53
 800f272:	7828      	ldrb	r0, [r5, #0]
 800f274:	4388      	bics	r0, r1
 800f276:	2880      	cmp	r0, #128	@ 0x80
 800f278:	d1c4      	bne.n	800f204 <rfalNfcDepGetTransceiveStatus+0x6a4>
 800f27a:	2403      	movs	r4, #3
 800f27c:	9805      	ldr	r0, [sp, #20]
 800f27e:	3b01      	subs	r3, #1
 800f280:	b2db      	uxtb	r3, r3
 800f282:	4058      	eors	r0, r3
 800f284:	4220      	tst	r0, r4
 800f286:	d1bd      	bne.n	800f204 <rfalNfcDepGetTransceiveStatus+0x6a4>
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 800f288:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f28a:	4023      	ands	r3, r4
 800f28c:	7003      	strb	r3, [r0, #0]
                if( nfcip_PFBisIMI( rxPFB ) )
 800f28e:	9805      	ldr	r0, [sp, #20]
 800f290:	4388      	bics	r0, r1
 800f292:	2810      	cmp	r0, #16
 800f294:	d1c9      	bne.n	800f22a <rfalNfcDepGetTransceiveStatus+0x6ca>
                    RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800f296:	2040      	movs	r0, #64	@ 0x40
 800f298:	9906      	ldr	r1, [sp, #24]
 800f29a:	4318      	orrs	r0, r3
 800f29c:	5c51      	ldrb	r1, [r2, r1]
 800f29e:	f7ff f847 	bl	800e330 <nfcipDEPControlMsg>
 800f2a2:	1e04      	subs	r4, r0, #0
 800f2a4:	d000      	beq.n	800f2a8 <rfalNfcDepGetTransceiveStatus+0x748>
 800f2a6:	e544      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800f2a8:	2203      	movs	r2, #3
 800f2aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	4013      	ands	r3, r2
 800f2b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2b4:	7013      	strb	r3, [r2, #0]
 800f2b6:	e599      	b.n	800edec <rfalNfcDepGetTransceiveStatus+0x28c>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 800f2b8:	4663      	mov	r3, ip
 800f2ba:	9a08      	ldr	r2, [sp, #32]
 800f2bc:	3b04      	subs	r3, #4
 800f2be:	1a9b      	subs	r3, r3, r2
 800f2c0:	9a07      	ldr	r2, [sp, #28]
 800f2c2:	8013      	strh	r3, [r2, #0]
        nfcipClearCounters();
 800f2c4:	f7fe ff4c 	bl	800e160 <nfcipClearCounters>
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 800f2c8:	002b      	movs	r3, r5
 800f2ca:	9a08      	ldr	r2, [sp, #32]
 800f2cc:	3371      	adds	r3, #113	@ 0x71
 800f2ce:	1d11      	adds	r1, r2, #4
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	b2c9      	uxtb	r1, r1
 800f2d4:	428b      	cmp	r3, r1
 800f2d6:	d008      	beq.n	800f2ea <rfalNfcDepGetTransceiveStatus+0x78a>
 800f2d8:	9a07      	ldr	r2, [sp, #28]
 800f2da:	8812      	ldrh	r2, [r2, #0]
 800f2dc:	2a00      	cmp	r2, #0
 800f2de:	d004      	beq.n	800f2ea <rfalNfcDepGetTransceiveStatus+0x78a>
            RFAL_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 800f2e0:	6e68      	ldr	r0, [r5, #100]	@ 0x64
 800f2e2:	1841      	adds	r1, r0, r1
 800f2e4:	18c0      	adds	r0, r0, r3
 800f2e6:	f003 ffd3 	bl	8013290 <memmove>
        if( nfcip_PFBisIMI( rxPFB ) )
 800f2ea:	220f      	movs	r2, #15
 800f2ec:	9b05      	ldr	r3, [sp, #20]
 800f2ee:	4393      	bics	r3, r2
 800f2f0:	2b10      	cmp	r3, #16
 800f2f2:	d119      	bne.n	800f328 <rfalNfcDepGetTransceiveStatus+0x7c8>
            gNfcip.isRxChaining = true;
 800f2f4:	002a      	movs	r2, r5
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800f2f6:	2603      	movs	r6, #3
 800f2f8:	2040      	movs	r0, #64	@ 0x40
            gNfcip.isRxChaining = true;
 800f2fa:	3b0f      	subs	r3, #15
 800f2fc:	325f      	adds	r2, #95	@ 0x5f
 800f2fe:	7013      	strb	r3, [r2, #0]
            *outIsChaining      = true;
 800f300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f302:	7013      	strb	r3, [r2, #0]
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800f304:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f306:	9a06      	ldr	r2, [sp, #24]
 800f308:	3551      	adds	r5, #81	@ 0x51
 800f30a:	5c99      	ldrb	r1, [r3, r2]
 800f30c:	782b      	ldrb	r3, [r5, #0]
 800f30e:	4033      	ands	r3, r6
 800f310:	4318      	orrs	r0, r3
 800f312:	f7ff f80d 	bl	800e330 <nfcipDEPControlMsg>
 800f316:	1e04      	subs	r4, r0, #0
 800f318:	d000      	beq.n	800f31c <rfalNfcDepGetTransceiveStatus+0x7bc>
 800f31a:	e50a      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800f31c:	782b      	ldrb	r3, [r5, #0]
            return RFAL_ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 800f31e:	340d      	adds	r4, #13
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800f320:	3301      	adds	r3, #1
 800f322:	4033      	ands	r3, r6
 800f324:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 800f326:	e504      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800f328:	003b      	movs	r3, r7
 800f32a:	2001      	movs	r0, #1
 800f32c:	3344      	adds	r3, #68	@ 0x44
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	490c      	ldr	r1, [pc, #48]	@ (800f364 <rfalNfcDepGetTransceiveStatus+0x804>)
 800f332:	4013      	ands	r3, r2
 800f334:	330c      	adds	r3, #12
 800f336:	4098      	lsls	r0, r3
 800f338:	f7f0 ff16 	bl	8000168 <__udivsi3>
 800f33c:	3001      	adds	r0, #1
 800f33e:	08c3      	lsrs	r3, r0, #3
 800f340:	1ac0      	subs	r0, r0, r3
 800f342:	b280      	uxth	r0, r0
 800f344:	f7f7 fda8 	bl	8006e98 <timerCalculateTimer>
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800f348:	003b      	movs	r3, r7
 800f34a:	220e      	movs	r2, #14
 800f34c:	3350      	adds	r3, #80	@ 0x50
 800f34e:	701a      	strb	r2, [r3, #0]
            gNfcip.isRxChaining = false;
 800f350:	003b      	movs	r3, r7
 800f352:	2200      	movs	r2, #0
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800f354:	67f8      	str	r0, [r7, #124]	@ 0x7c
            gNfcip.isRxChaining = false;
 800f356:	335f      	adds	r3, #95	@ 0x5f
 800f358:	e463      	b.n	800ec22 <rfalNfcDepGetTransceiveStatus+0xc2>
        return RFAL_ERR_IO;
 800f35a:	2403      	movs	r4, #3
 800f35c:	e4e9      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
    switch( gNfcip.state )
 800f35e:	2414      	movs	r4, #20
 800f360:	e4e7      	b.n	800ed32 <rfalNfcDepGetTransceiveStatus+0x1d2>
 800f362:	46c0      	nop			@ (mov r8, r8)
 800f364:	000034f8 	.word	0x000034f8
 800f368:	200024c0 	.word	0x200024c0
 800f36c:	200024c1 	.word	0x200024c1
 800f370:	20002470 	.word	0x20002470

0800f374 <rfalNfcDepStartPduTransceive>:
}
 
 
/*******************************************************************************/
ReturnCode rfalNfcDepStartPduTransceive( rfalNfcDepPduTxRxParam param )
{
 800f374:	b084      	sub	sp, #16
 800f376:	b5f0      	push	{r4, r5, r6, r7, lr}
    rfalNfcDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gNfcip.PDUParam = param;
 800f378:	4c23      	ldr	r4, [pc, #140]	@ (800f408 <rfalNfcDepStartPduTransceive+0x94>)
{
 800f37a:	b08b      	sub	sp, #44	@ 0x2c
 800f37c:	9313      	str	r3, [sp, #76]	@ 0x4c
    gNfcip.PDUParam = param;
 800f37e:	0023      	movs	r3, r4
{
 800f380:	9010      	str	r0, [sp, #64]	@ 0x40
 800f382:	9111      	str	r1, [sp, #68]	@ 0x44
 800f384:	9212      	str	r2, [sp, #72]	@ 0x48
    gNfcip.PDUParam = param;
 800f386:	a910      	add	r1, sp, #64	@ 0x40
 800f388:	c961      	ldmia	r1!, {r0, r5, r6}
 800f38a:	c361      	stmia	r3!, {r0, r5, r6}
 800f38c:	c961      	ldmia	r1!, {r0, r5, r6}
 800f38e:	c361      	stmia	r3!, {r0, r5, r6}
 800f390:	4a1e      	ldr	r2, [pc, #120]	@ (800f40c <rfalNfcDepStartPduTransceive+0x98>)
 800f392:	c921      	ldmia	r1!, {r0, r5}
 800f394:	c321      	stmia	r3!, {r0, r5}
    gNfcip.PDUTxPos = 0;
 800f396:	0013      	movs	r3, r2
 800f398:	2000      	movs	r0, #0
 800f39a:	33a8      	adds	r3, #168	@ 0xa8
 800f39c:	6018      	str	r0, [r3, #0]
    gNfcip.PDURxPos = 0;
    
    /* Convert PDU TxRxParams to Block TxRxParams */
    rfalNfcDepPdu2BLockParam( gNfcip.PDUParam, &txRxParam, gNfcip.PDUTxPos, gNfcip.PDURxPos );
 800f39e:	0013      	movs	r3, r2
 800f3a0:	338c      	adds	r3, #140	@ 0x8c
 800f3a2:	6825      	ldr	r5, [r4, #0]
 800f3a4:	881c      	ldrh	r4, [r3, #0]
 800f3a6:	0013      	movs	r3, r2
 800f3a8:	3394      	adds	r3, #148	@ 0x94
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	469c      	mov	ip, r3
 800f3ae:	0013      	movs	r3, r2
 800f3b0:	3398      	adds	r3, #152	@ 0x98
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	9301      	str	r3, [sp, #4]
 800f3b6:	0013      	movs	r3, r2
 800f3b8:	339c      	adds	r3, #156	@ 0x9c
 800f3ba:	681f      	ldr	r7, [r3, #0]
 800f3bc:	0013      	movs	r3, r2
 800f3be:	33a0      	adds	r3, #160	@ 0xa0
 800f3c0:	681e      	ldr	r6, [r3, #0]
 800f3c2:	0013      	movs	r3, r2
    maxInfLen += ((blockParam->DID != RFAL_NFCDEP_DID_NO) ? RFAL_NFCDEP_DID_LEN : 0U);
 800f3c4:	32a6      	adds	r2, #166	@ 0xa6
 800f3c6:	7812      	ldrb	r2, [r2, #0]
 800f3c8:	33a4      	adds	r3, #164	@ 0xa4
 800f3ca:	8819      	ldrh	r1, [r3, #0]
 800f3cc:	1e53      	subs	r3, r2, #1
 800f3ce:	419a      	sbcs	r2, r3
 800f3d0:	1ecb      	subs	r3, r1, #3
 800f3d2:	189b      	adds	r3, r3, r2
 800f3d4:	b29b      	uxth	r3, r3
    if( (pduParam.txBufLen - txPos) > maxInfLen )
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	429c      	cmp	r4, r3
 800f3da:	d801      	bhi.n	800f3e0 <rfalNfcDepStartPduTransceive+0x6c>
 800f3dc:	0023      	movs	r3, r4
 800f3de:	0002      	movs	r2, r0
    blockParam->FSx    = pduParam.FSx;
 800f3e0:	a802      	add	r0, sp, #8
        blockParam->txBufLen     = maxInfLen;
 800f3e2:	8083      	strh	r3, [r0, #4]
    blockParam->rxBuf        = pduParam.tmpBuf;                        /* Simply using the pdu buffer is not possible because of current ACK handling */
 800f3e4:	9b01      	ldr	r3, [sp, #4]
    blockParam->FSx    = pduParam.FSx;
 800f3e6:	8381      	strh	r1, [r0, #28]
    blockParam->rxBuf        = pduParam.tmpBuf;                        /* Simply using the pdu buffer is not possible because of current ACK handling */
 800f3e8:	9304      	str	r3, [sp, #16]
    blockParam->isRxChaining = &gNfcip.isPDURxChaining;
 800f3ea:	4b09      	ldr	r3, [pc, #36]	@ (800f410 <rfalNfcDepStartPduTransceive+0x9c>)
    blockParam->FWT    = pduParam.FWT;
 800f3ec:	9707      	str	r7, [sp, #28]
    blockParam->isRxChaining = &gNfcip.isPDURxChaining;
 800f3ee:	9306      	str	r3, [sp, #24]
    blockParam->rxLen        = pduParam.rxLen;
 800f3f0:	4663      	mov	r3, ip
    blockParam->dFWT   = pduParam.dFWT;
 800f3f2:	9608      	str	r6, [sp, #32]
        blockParam->isTxChaining = true;
 800f3f4:	7182      	strb	r2, [r0, #6]
    blockParam->txBuf        = (rfalNfcDepBufFormat*)pduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800f3f6:	9502      	str	r5, [sp, #8]
    blockParam->rxLen        = pduParam.rxLen;
 800f3f8:	9305      	str	r3, [sp, #20]
    
    return rfalNfcDepStartTransceive( &txRxParam );
 800f3fa:	f7ff fb6f 	bl	800eadc <rfalNfcDepStartTransceive>
}
 800f3fe:	b00b      	add	sp, #44	@ 0x2c
 800f400:	bcf0      	pop	{r4, r5, r6, r7}
 800f402:	bc08      	pop	{r3}
 800f404:	b004      	add	sp, #16
 800f406:	4718      	bx	r3
 800f408:	200024f8 	.word	0x200024f8
 800f40c:	20002470 	.word	0x20002470
 800f410:	2000251c 	.word	0x2000251c

0800f414 <rfalNfcDepGetPduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalNfcDepGetPduTransceiveStatus( void )
{
 800f414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f416:	b08d      	sub	sp, #52	@ 0x34
    ReturnCode          ret;
    rfalNfcDepTxRxParam txRxParam;
    
    ret = rfalNfcDepGetTransceiveStatus();
 800f418:	f7ff fba2 	bl	800eb60 <rfalNfcDepGetTransceiveStatus>
 800f41c:	1e04      	subs	r4, r0, #0
    switch( ret )
 800f41e:	d003      	beq.n	800f428 <rfalNfcDepGetPduTransceiveStatus+0x14>
 800f420:	280d      	cmp	r0, #13
 800f422:	d052      	beq.n	800f4ca <rfalNfcDepGetPduTransceiveStatus+0xb6>
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
    }
    
    return ret;
 }
 800f424:	b00d      	add	sp, #52	@ 0x34
 800f426:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( gNfcip.isTxChaining )
 800f428:	4b41      	ldr	r3, [pc, #260]	@ (800f530 <rfalNfcDepGetPduTransceiveStatus+0x11c>)
 800f42a:	4a42      	ldr	r2, [pc, #264]	@ (800f534 <rfalNfcDepGetPduTransceiveStatus+0x120>)
 800f42c:	781e      	ldrb	r6, [r3, #0]
 800f42e:	2e00      	cmp	r6, #0
 800f430:	d04b      	beq.n	800f4ca <rfalNfcDepGetPduTransceiveStatus+0xb6>
                gNfcip.PDUTxPos += gNfcip.txBufLen;
 800f432:	0013      	movs	r3, r2
 800f434:	0011      	movs	r1, r2
 800f436:	33a8      	adds	r3, #168	@ 0xa8
 800f438:	3168      	adds	r1, #104	@ 0x68
 800f43a:	881d      	ldrh	r5, [r3, #0]
 800f43c:	8809      	ldrh	r1, [r1, #0]
 800f43e:	186d      	adds	r5, r5, r1
 800f440:	b2ad      	uxth	r5, r5
 800f442:	801d      	strh	r5, [r3, #0]
                rfalNfcDepPdu2BLockParam( gNfcip.PDUParam, &txRxParam, gNfcip.PDUTxPos, gNfcip.PDURxPos );
 800f444:	0013      	movs	r3, r2
 800f446:	3388      	adds	r3, #136	@ 0x88
 800f448:	6819      	ldr	r1, [r3, #0]
 800f44a:	0013      	movs	r3, r2
 800f44c:	338c      	adds	r3, #140	@ 0x8c
 800f44e:	8818      	ldrh	r0, [r3, #0]
 800f450:	0013      	movs	r3, r2
 800f452:	3394      	adds	r3, #148	@ 0x94
 800f454:	681b      	ldr	r3, [r3, #0]
    if( (pduParam.txBufLen - txPos) > maxInfLen )
 800f456:	1b40      	subs	r0, r0, r5
 800f458:	469c      	mov	ip, r3
 800f45a:	0013      	movs	r3, r2
 800f45c:	3398      	adds	r3, #152	@ 0x98
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	9301      	str	r3, [sp, #4]
 800f462:	0013      	movs	r3, r2
 800f464:	339c      	adds	r3, #156	@ 0x9c
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	9302      	str	r3, [sp, #8]
 800f46a:	0013      	movs	r3, r2
 800f46c:	33a0      	adds	r3, #160	@ 0xa0
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	9303      	str	r3, [sp, #12]
 800f472:	0013      	movs	r3, r2
    maxInfLen += ((blockParam->DID != RFAL_NFCDEP_DID_NO) ? RFAL_NFCDEP_DID_LEN : 0U);
 800f474:	32a6      	adds	r2, #166	@ 0xa6
 800f476:	7812      	ldrb	r2, [r2, #0]
 800f478:	33a4      	adds	r3, #164	@ 0xa4
 800f47a:	881f      	ldrh	r7, [r3, #0]
 800f47c:	1e53      	subs	r3, r2, #1
 800f47e:	419a      	sbcs	r2, r3
 800f480:	1efb      	subs	r3, r7, #3
 800f482:	189a      	adds	r2, r3, r2
 800f484:	b292      	uxth	r2, r2
    if( (pduParam.txBufLen - txPos) > maxInfLen )
 800f486:	4290      	cmp	r0, r2
 800f488:	dc01      	bgt.n	800f48e <rfalNfcDepGetPduTransceiveStatus+0x7a>
        blockParam->txBufLen     = (pduParam.txBufLen - txPos);
 800f48a:	0026      	movs	r6, r4
 800f48c:	b282      	uxth	r2, r0
    blockParam->FSx    = pduParam.FSx;
 800f48e:	ab04      	add	r3, sp, #16
 800f490:	839f      	strh	r7, [r3, #28]
    blockParam->FWT    = pduParam.FWT;
 800f492:	9b02      	ldr	r3, [sp, #8]
    blockParam->txBuf        = (rfalNfcDepBufFormat*)pduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800f494:	9104      	str	r1, [sp, #16]
    blockParam->FWT    = pduParam.FWT;
 800f496:	9309      	str	r3, [sp, #36]	@ 0x24
    blockParam->dFWT   = pduParam.dFWT;
 800f498:	9b03      	ldr	r3, [sp, #12]
 800f49a:	930a      	str	r3, [sp, #40]	@ 0x28
        blockParam->isTxChaining = true;
 800f49c:	ab04      	add	r3, sp, #16
 800f49e:	719e      	strb	r6, [r3, #6]
        blockParam->txBufLen     = maxInfLen;
 800f4a0:	809a      	strh	r2, [r3, #4]
    blockParam->rxBuf        = pduParam.tmpBuf;                        /* Simply using the pdu buffer is not possible because of current ACK handling */
 800f4a2:	9b01      	ldr	r3, [sp, #4]
 800f4a4:	9306      	str	r3, [sp, #24]
    blockParam->isRxChaining = &gNfcip.isPDURxChaining;
 800f4a6:	4b24      	ldr	r3, [pc, #144]	@ (800f538 <rfalNfcDepGetPduTransceiveStatus+0x124>)
 800f4a8:	9308      	str	r3, [sp, #32]
    blockParam->rxLen        = pduParam.rxLen;
 800f4aa:	4663      	mov	r3, ip
 800f4ac:	9307      	str	r3, [sp, #28]
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 800f4ae:	2a00      	cmp	r2, #0
 800f4b0:	d004      	beq.n	800f4bc <rfalNfcDepGetPduTransceiveStatus+0xa8>
                    RFAL_MEMCPY( gNfcip.PDUParam.txBuf->pdu, &gNfcip.PDUParam.txBuf->pdu[gNfcip.PDUTxPos], txRxParam.txBufLen );
 800f4b2:	3505      	adds	r5, #5
 800f4b4:	1d48      	adds	r0, r1, #5
 800f4b6:	1949      	adds	r1, r1, r5
 800f4b8:	f003 ff30 	bl	801331c <memcpy>
                RFAL_EXIT_ON_ERR( ret, rfalNfcDepStartTransceive( &txRxParam ) );
 800f4bc:	a804      	add	r0, sp, #16
 800f4be:	f7ff fb0d 	bl	800eadc <rfalNfcDepStartTransceive>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d1ae      	bne.n	800f424 <rfalNfcDepGetPduTransceiveStatus+0x10>
                return RFAL_ERR_BUSY;
 800f4c6:	2002      	movs	r0, #2
 800f4c8:	e7ac      	b.n	800f424 <rfalNfcDepGetPduTransceiveStatus+0x10>
            if( gNfcip.PDUParam.rxLen == NULL )
 800f4ca:	4f1c      	ldr	r7, [pc, #112]	@ (800f53c <rfalNfcDepGetPduTransceiveStatus+0x128>)
 800f4cc:	4d19      	ldr	r5, [pc, #100]	@ (800f534 <rfalNfcDepGetPduTransceiveStatus+0x120>)
 800f4ce:	6838      	ldr	r0, [r7, #0]
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d103      	bne.n	800f4dc <rfalNfcDepGetPduTransceiveStatus+0xc8>
                if( ret == RFAL_ERR_AGAIN  )
 800f4d4:	2c0d      	cmp	r4, #13
 800f4d6:	d1a5      	bne.n	800f424 <rfalNfcDepGetPduTransceiveStatus+0x10>
                    return RFAL_ERR_NOTSUPP;
 800f4d8:	3018      	adds	r0, #24
 800f4da:	e7a3      	b.n	800f424 <rfalNfcDepGetPduTransceiveStatus+0x10>
                if( (uint16_t)((uint16_t)gNfcip.PDURxPos + (*gNfcip.PDUParam.rxLen)) > RFAL_FEATURE_NFC_DEP_PDU_MAX_LEN )
 800f4dc:	002e      	movs	r6, r5
            if( (*gNfcip.PDUParam.rxLen) > 0U )    /* MISRA 21.18 */
 800f4de:	8802      	ldrh	r2, [r0, #0]
                if( (uint16_t)((uint16_t)gNfcip.PDURxPos + (*gNfcip.PDUParam.rxLen)) > RFAL_FEATURE_NFC_DEP_PDU_MAX_LEN )
 800f4e0:	36aa      	adds	r6, #170	@ 0xaa
 800f4e2:	8831      	ldrh	r1, [r6, #0]
            if( (*gNfcip.PDUParam.rxLen) > 0U )    /* MISRA 21.18 */
 800f4e4:	2a00      	cmp	r2, #0
 800f4e6:	d018      	beq.n	800f51a <rfalNfcDepGetPduTransceiveStatus+0x106>
                if( (uint16_t)((uint16_t)gNfcip.PDURxPos + (*gNfcip.PDUParam.rxLen)) > RFAL_FEATURE_NFC_DEP_PDU_MAX_LEN )
 800f4e8:	2080      	movs	r0, #128	@ 0x80
 800f4ea:	0080      	lsls	r0, r0, #2
 800f4ec:	4684      	mov	ip, r0
 800f4ee:	1853      	adds	r3, r2, r1
 800f4f0:	b29b      	uxth	r3, r3
                    return RFAL_ERR_NOMEM;
 800f4f2:	2001      	movs	r0, #1
                if( (uint16_t)((uint16_t)gNfcip.PDURxPos + (*gNfcip.PDUParam.rxLen)) > RFAL_FEATURE_NFC_DEP_PDU_MAX_LEN )
 800f4f4:	4563      	cmp	r3, ip
 800f4f6:	d900      	bls.n	800f4fa <rfalNfcDepGetPduTransceiveStatus+0xe6>
 800f4f8:	e794      	b.n	800f424 <rfalNfcDepGetPduTransceiveStatus+0x10>
                RFAL_MEMCPY( &gNfcip.PDUParam.rxBuf->pdu[gNfcip.PDURxPos], gNfcip.PDUParam.tmpBuf->inf, *gNfcip.PDUParam.rxLen );
 800f4fa:	002b      	movs	r3, r5
 800f4fc:	3390      	adds	r3, #144	@ 0x90
 800f4fe:	6818      	ldr	r0, [r3, #0]
 800f500:	002b      	movs	r3, r5
 800f502:	3105      	adds	r1, #5
 800f504:	3398      	adds	r3, #152	@ 0x98
 800f506:	1840      	adds	r0, r0, r1
 800f508:	6819      	ldr	r1, [r3, #0]
 800f50a:	3105      	adds	r1, #5
 800f50c:	f003 ff06 	bl	801331c <memcpy>
                gNfcip.PDURxPos += *gNfcip.PDUParam.rxLen;
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	8832      	ldrh	r2, [r6, #0]
 800f514:	881b      	ldrh	r3, [r3, #0]
 800f516:	189b      	adds	r3, r3, r2
 800f518:	8033      	strh	r3, [r6, #0]
            *gNfcip.PDUParam.rxLen = gNfcip.PDURxPos;
 800f51a:	002b      	movs	r3, r5
 800f51c:	3594      	adds	r5, #148	@ 0x94
 800f51e:	33aa      	adds	r3, #170	@ 0xaa
 800f520:	881a      	ldrh	r2, [r3, #0]
 800f522:	682b      	ldr	r3, [r5, #0]
            return ((ret == RFAL_ERR_AGAIN) ? RFAL_ERR_BUSY : RFAL_ERR_NONE);
 800f524:	3c0d      	subs	r4, #13
            *gNfcip.PDUParam.rxLen = gNfcip.PDURxPos;
 800f526:	801a      	strh	r2, [r3, #0]
            return ((ret == RFAL_ERR_AGAIN) ? RFAL_ERR_BUSY : RFAL_ERR_NONE);
 800f528:	4263      	negs	r3, r4
 800f52a:	415c      	adcs	r4, r3
 800f52c:	0060      	lsls	r0, r4, #1
 800f52e:	e779      	b.n	800f424 <rfalNfcDepGetPduTransceiveStatus+0x10>
 800f530:	200024ce 	.word	0x200024ce
 800f534:	20002470 	.word	0x20002470
 800f538:	2000251c 	.word	0x2000251c
 800f53c:	20002504 	.word	0x20002504

0800f540 <rfalNfcaPollerStartSingleCollisionResolution>:
    return BCC;
}

/*******************************************************************************/
static ReturnCode rfalNfcaPollerStartSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 800f540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f542:	000e      	movs	r6, r1
 800f544:	9001      	str	r0, [sp, #4]
 800f546:	0017      	movs	r7, r2
 800f548:	001d      	movs	r5, r3
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
    {
        return RFAL_ERR_PARAM;
 800f54a:	2007      	movs	r0, #7
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 800f54c:	2900      	cmp	r1, #0
 800f54e:	d01f      	beq.n	800f590 <rfalNfcaPollerStartSingleCollisionResolution+0x50>
 800f550:	2a00      	cmp	r2, #0
 800f552:	d01d      	beq.n	800f590 <rfalNfcaPollerStartSingleCollisionResolution+0x50>
 800f554:	2b00      	cmp	r3, #0
 800f556:	d01b      	beq.n	800f590 <rfalNfcaPollerStartSingleCollisionResolution+0x50>
 800f558:	9b08      	ldr	r3, [sp, #32]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d018      	beq.n	800f590 <rfalNfcaPollerStartSingleCollisionResolution+0x50>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 800f55e:	2400      	movs	r4, #0
    *nfcId1Len   = 0;
    RFAL_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 800f560:	220a      	movs	r2, #10
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 800f562:	700c      	strb	r4, [r1, #0]
    RFAL_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 800f564:	0028      	movs	r0, r5
    *nfcId1Len   = 0;
 800f566:	701c      	strb	r4, [r3, #0]
    RFAL_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 800f568:	0021      	movs	r1, r4
 800f56a:	f003 fea3 	bl	80132b4 <memset>
    
    
    /* Save parameters */
    gNfca.CR.devLimit    = devLimit;
 800f56e:	4b09      	ldr	r3, [pc, #36]	@ (800f594 <rfalNfcaPollerStartSingleCollisionResolution+0x54>)
 800f570:	9a01      	ldr	r2, [sp, #4]
    gNfca.CR.tmrFDT      = RFAL_TIMING_NONE;
    gNfca.CR.retries     = RFAL_NFCA_N_RETRANS;
    gNfca.CR.cascadeLv   = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1;
    gNfca.CR.state       = RFAL_NFCA_CR_CL;
   
    gNfca.CR.doBacktrack  = false;
 800f572:	0020      	movs	r0, r4
    gNfca.CR.devLimit    = devLimit;
 800f574:	711a      	strb	r2, [r3, #4]
    gNfca.CR.nfcId1Len   = nfcId1Len;
 800f576:	9a08      	ldr	r2, [sp, #32]
    gNfca.CR.collPend    = collPending;
 800f578:	615e      	str	r6, [r3, #20]
    gNfca.CR.nfcId1Len   = nfcId1Len;
 800f57a:	629a      	str	r2, [r3, #40]	@ 0x28
    gNfca.CR.cascadeLv   = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1;
 800f57c:	2280      	movs	r2, #128	@ 0x80
 800f57e:	0052      	lsls	r2, r2, #1
 800f580:	859a      	strh	r2, [r3, #44]	@ 0x2c
    gNfca.CR.retries     = RFAL_NFCA_N_RETRANS;
 800f582:	4a05      	ldr	r2, [pc, #20]	@ (800f598 <rfalNfcaPollerStartSingleCollisionResolution+0x58>)
    gNfca.CR.selRes      = selRes;
 800f584:	621f      	str	r7, [r3, #32]
    gNfca.CR.nfcId1      = nfcId1;
 800f586:	625d      	str	r5, [r3, #36]	@ 0x24
    gNfca.CR.tmrFDT      = RFAL_TIMING_NONE;
 800f588:	635c      	str	r4, [r3, #52]	@ 0x34
    gNfca.CR.retries     = RFAL_NFCA_N_RETRANS;
 800f58a:	871a      	strh	r2, [r3, #56]	@ 0x38
    gNfca.CR.doBacktrack  = false;
 800f58c:	333a      	adds	r3, #58	@ 0x3a
 800f58e:	701c      	strb	r4, [r3, #0]
    gNfca.CR.backtrackCnt = 3U;
    
    return RFAL_ERR_NONE;
}
 800f590:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f592:	46c0      	nop			@ (mov r8, r8)
 800f594:	20002520 	.word	0x20002520
 800f598:	00000302 	.word	0x00000302

0800f59c <rfalNfcaPollerInitialize>:
/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
    ReturnCode ret;
    
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 800f59c:	2200      	movs	r2, #0
{
 800f59e:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 800f5a0:	0011      	movs	r1, r2
 800f5a2:	2001      	movs	r0, #1
 800f5a4:	f7f4 fe62 	bl	800426c <rfalSetMode>
 800f5a8:	1e04      	subs	r4, r0, #0
 800f5aa:	d10a      	bne.n	800f5c2 <rfalNfcaPollerInitialize+0x26>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 800f5ac:	f7f4 ff68 	bl	8004480 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 800f5b0:	4805      	ldr	r0, [pc, #20]	@ (800f5c8 <rfalNfcaPollerInitialize+0x2c>)
 800f5b2:	f7f4 ff97 	bl	80044e4 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 800f5b6:	4805      	ldr	r0, [pc, #20]	@ (800f5cc <rfalNfcaPollerInitialize+0x30>)
 800f5b8:	f7f4 ff8a 	bl	80044d0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 800f5bc:	4804      	ldr	r0, [pc, #16]	@ (800f5d0 <rfalNfcaPollerInitialize+0x34>)
 800f5be:	f7f4 ff75 	bl	80044ac <rfalSetFDTPoll>
    
    return RFAL_ERR_NONE;
}
 800f5c2:	0020      	movs	r0, r4
 800f5c4:	bd10      	pop	{r4, pc}
 800f5c6:	46c0      	nop			@ (mov r8, r8)
 800f5c8:	000108d8 	.word	0x000108d8
 800f5cc:	00000494 	.word	0x00000494
 800f5d0:	00001a7c 	.word	0x00001a7c

0800f5d4 <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 800f5d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800f5d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f614 <rfalNfcaPollerCheckPresence+0x40>)
 800f5d8:	2210      	movs	r2, #16
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	230e      	movs	r3, #14
 800f5de:	446b      	add	r3, sp
 800f5e0:	f7f6 fbe4 	bl	8005dac <rfalISO14443ATransceiveShortFrame>
    if( (ret == RFAL_ERR_RF_COLLISION) || (ret == RFAL_ERR_CRC)  || (ret == RFAL_ERR_NOMEM) || (ret == RFAL_ERR_FRAMING) || (ret == RFAL_ERR_PAR) || (ret == RFAL_ERR_INCOMPLETE_BYTE) )
 800f5e4:	2828      	cmp	r0, #40	@ 0x28
 800f5e6:	d808      	bhi.n	800f5fa <rfalNfcaPollerCheckPresence+0x26>
 800f5e8:	2814      	cmp	r0, #20
 800f5ea:	d808      	bhi.n	800f5fe <rfalNfcaPollerCheckPresence+0x2a>
 800f5ec:	2308      	movs	r3, #8
 800f5ee:	0002      	movs	r2, r0
 800f5f0:	439a      	bics	r2, r3
 800f5f2:	b293      	uxth	r3, r2
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d100      	bne.n	800f5fa <rfalNfcaPollerCheckPresence+0x26>
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800f5f8:	2000      	movs	r0, #0
    {
       ret = RFAL_ERR_NONE;
    }

    return ret;
}
 800f5fa:	b005      	add	sp, #20
 800f5fc:	bd00      	pop	{pc}
 800f5fe:	0002      	movs	r2, r0
 800f600:	4b05      	ldr	r3, [pc, #20]	@ (800f618 <rfalNfcaPollerCheckPresence+0x44>)
 800f602:	3a15      	subs	r2, #21
 800f604:	b292      	uxth	r2, r2
 800f606:	40d3      	lsrs	r3, r2
 800f608:	2201      	movs	r2, #1
 800f60a:	4013      	ands	r3, r2
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800f60c:	3b01      	subs	r3, #1
 800f60e:	4018      	ands	r0, r3
 800f610:	e7f3      	b.n	800f5fa <rfalNfcaPollerCheckPresence+0x26>
 800f612:	46c0      	nop			@ (mov r8, r8)
 800f614:	00000654 	.word	0x00000654
 800f618:	00080141 	.word	0x00080141

0800f61c <rfalNfcaPollerGetSingleCollisionResolutionStatus>:
{
 800f61c:	b570      	push	{r4, r5, r6, lr}
    if(gNfca.CR.tmrFDT != RFAL_TIMING_NONE )
 800f61e:	4cbc      	ldr	r4, [pc, #752]	@ (800f910 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2f4>)
{
 800f620:	b086      	sub	sp, #24
    if(gNfca.CR.tmrFDT != RFAL_TIMING_NONE )
 800f622:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800f624:	2800      	cmp	r0, #0
 800f626:	d108      	bne.n	800f63a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1e>
    if( gNfca.CR.cascadeLv > (uint8_t)RFAL_NFCA_SEL_CASCADE_L3 )
 800f628:	0023      	movs	r3, r4
 800f62a:	332c      	adds	r3, #44	@ 0x2c
 800f62c:	781d      	ldrb	r5, [r3, #0]
        return RFAL_ERR_INTERNAL;
 800f62e:	210c      	movs	r1, #12
    if( gNfca.CR.cascadeLv > (uint8_t)RFAL_NFCA_SEL_CASCADE_L3 )
 800f630:	2d02      	cmp	r5, #2
 800f632:	d908      	bls.n	800f646 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2a>
}
 800f634:	0008      	movs	r0, r1
 800f636:	b006      	add	sp, #24
 800f638:	bd70      	pop	{r4, r5, r6, pc}
        if( (!platformTimerIsExpired( gNfca.CR.tmrFDT )) )
 800f63a:	f7f7 fc33 	bl	8006ea4 <timerIsExpired>
 800f63e:	2800      	cmp	r0, #0
 800f640:	d1f2      	bne.n	800f628 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xc>
            return RFAL_ERR_BUSY;
 800f642:	2102      	movs	r1, #2
 800f644:	e7f6      	b.n	800f634 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
    switch( gNfca.CR.state )
 800f646:	0023      	movs	r3, r4
 800f648:	332d      	adds	r3, #45	@ 0x2d
 800f64a:	7818      	ldrb	r0, [r3, #0]
 800f64c:	2121      	movs	r1, #33	@ 0x21
 800f64e:	3801      	subs	r0, #1
 800f650:	2805      	cmp	r0, #5
 800f652:	d8ef      	bhi.n	800f634 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
 800f654:	f7f0 fd7e 	bl	8000154 <__gnu_thumb1_case_uhi>
 800f658:	00180008 	.word	0x00180008
 800f65c:	01040030 	.word	0x01040030
 800f660:	00060113 	.word	0x00060113
            return RFAL_ERR_NONE;
 800f664:	2100      	movs	r1, #0
 800f666:	e7e5      	b.n	800f634 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
            RFAL_MEMSET( (uint8_t*)&gNfca.CR.selReq, 0x00, sizeof(rfalNfcaSelReq) );
 800f668:	2205      	movs	r2, #5
 800f66a:	2100      	movs	r1, #0
 800f66c:	48a9      	ldr	r0, [pc, #676]	@ (800f914 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2f8>)
 800f66e:	f003 fe21 	bl	80132b4 <memset>
            gNfca.CR.bytesTxRx = RFAL_NFCA_SDD_REQ_LEN;
 800f672:	0022      	movs	r2, r4
 800f674:	2302      	movs	r3, #2
 800f676:	322f      	adds	r2, #47	@ 0x2f
 800f678:	7013      	strb	r3, [r2, #0]
            gNfca.CR.bitsTxRx  = 0U;
 800f67a:	0022      	movs	r2, r4
 800f67c:	2100      	movs	r1, #0
 800f67e:	3230      	adds	r2, #48	@ 0x30
 800f680:	7011      	strb	r1, [r2, #0]
            gNfca.CR.state     = RFAL_NFCA_CR_SDD_TX;
 800f682:	0022      	movs	r2, r4
 800f684:	322d      	adds	r2, #45	@ 0x2d
 800f686:	7013      	strb	r3, [r2, #0]
            gNfca.CR.selReq.selPar = rfalNfcaSelPar(gNfca.CR.bytesTxRx, gNfca.CR.bitsTxRx);
 800f688:	0021      	movs	r1, r4
 800f68a:	0022      	movs	r2, r4
            gNfca.CR.selReq.selCmd = rfalNfcaCLn2SELCMD( gNfca.CR.cascadeLv );
 800f68c:	006b      	lsls	r3, r5, #1
            gNfca.CR.selReq.selPar = rfalNfcaSelPar(gNfca.CR.bytesTxRx, gNfca.CR.bitsTxRx);
 800f68e:	250f      	movs	r5, #15
            gNfca.CR.selReq.selCmd = rfalNfcaCLn2SELCMD( gNfca.CR.cascadeLv );
 800f690:	3b6d      	subs	r3, #109	@ 0x6d
 800f692:	7623      	strb	r3, [r4, #24]
            gNfca.CR.selReq.selPar = rfalNfcaSelPar(gNfca.CR.bytesTxRx, gNfca.CR.bitsTxRx);
 800f694:	312f      	adds	r1, #47	@ 0x2f
 800f696:	3230      	adds	r2, #48	@ 0x30
 800f698:	780b      	ldrb	r3, [r1, #0]
 800f69a:	7810      	ldrb	r0, [r2, #0]
 800f69c:	011b      	lsls	r3, r3, #4
 800f69e:	4028      	ands	r0, r5
            rfalISO14443AStartTransceiveAnticollisionFrame( (uint8_t*)&gNfca.CR.selReq, &gNfca.CR.bytesTxRx, &gNfca.CR.bitsTxRx, &gNfca.CR.rxLen, RFAL_NFCA_FDTMIN );
 800f6a0:	4d9d      	ldr	r5, [pc, #628]	@ (800f918 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2fc>)
            gNfca.CR.selReq.selPar = rfalNfcaSelPar(gNfca.CR.bytesTxRx, gNfca.CR.bitsTxRx);
 800f6a2:	4303      	orrs	r3, r0
 800f6a4:	7663      	strb	r3, [r4, #25]
            rfalISO14443AStartTransceiveAnticollisionFrame( (uint8_t*)&gNfca.CR.selReq, &gNfca.CR.bytesTxRx, &gNfca.CR.bitsTxRx, &gNfca.CR.rxLen, RFAL_NFCA_FDTMIN );
 800f6a6:	489d      	ldr	r0, [pc, #628]	@ (800f91c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x300>)
 800f6a8:	4b9d      	ldr	r3, [pc, #628]	@ (800f920 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x304>)
 800f6aa:	9500      	str	r5, [sp, #0]
 800f6ac:	f7f6 fad0 	bl	8005c50 <rfalISO14443AStartTransceiveAnticollisionFrame>
            gNfca.CR.state = RFAL_NFCA_CR_SDD;
 800f6b0:	2303      	movs	r3, #3
 800f6b2:	342d      	adds	r4, #45	@ 0x2d
 800f6b4:	7023      	strb	r3, [r4, #0]
            break;
 800f6b6:	e7c4      	b.n	800f642 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
            RFAL_EXIT_ON_BUSY( ret, rfalISO14443AGetTransceiveAnticollisionFrameStatus() );
 800f6b8:	f7f5 f882 	bl	80047c0 <rfalISO14443AGetTransceiveAnticollisionFrameStatus>
 800f6bc:	0003      	movs	r3, r0
 800f6be:	0001      	movs	r1, r0
 800f6c0:	2802      	cmp	r0, #2
 800f6c2:	d0be      	beq.n	800f642 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
            if( (ret == RFAL_ERR_TIMEOUT) && (gNfca.CR.devLimit==0U) && (gNfca.CR.retries != 0U) )
 800f6c4:	2804      	cmp	r0, #4
 800f6c6:	d110      	bne.n	800f6ea <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xce>
 800f6c8:	7922      	ldrb	r2, [r4, #4]
 800f6ca:	2a00      	cmp	r2, #0
 800f6cc:	d10d      	bne.n	800f6ea <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xce>
 800f6ce:	0020      	movs	r0, r4
 800f6d0:	3038      	adds	r0, #56	@ 0x38
 800f6d2:	7802      	ldrb	r2, [r0, #0]
 800f6d4:	2a00      	cmp	r2, #0
 800f6d6:	d008      	beq.n	800f6ea <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xce>
                gNfca.CR.retries--;
 800f6d8:	3a01      	subs	r2, #1
 800f6da:	7002      	strb	r2, [r0, #0]
                gNfca.CR.tmrFDT = platformTimerCreate( RFAL_NFCA_T_RETRANS );
 800f6dc:	2005      	movs	r0, #5
 800f6de:	f7f7 fbdb 	bl	8006e98 <timerCalculateTimer>
 800f6e2:	6360      	str	r0, [r4, #52]	@ 0x34
                gNfca.CR.state = RFAL_NFCA_CR_SDD_TX;
 800f6e4:	2302      	movs	r3, #2
 800f6e6:	342d      	adds	r4, #45	@ 0x2d
 800f6e8:	e7e4      	b.n	800f6b4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x98>
            gNfca.CR.rxLen = rfalConvBitsToBytes( gNfca.CR.rxLen );
 800f6ea:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 800f6ec:	3207      	adds	r2, #7
 800f6ee:	08d2      	lsrs	r2, r2, #3
 800f6f0:	8662      	strh	r2, [r4, #50]	@ 0x32
            if( (ret == RFAL_ERR_TIMEOUT) && (gNfca.CR.backtrackCnt != 0U) && (!gNfca.CR.doBacktrack)
 800f6f2:	2b04      	cmp	r3, #4
 800f6f4:	d14d      	bne.n	800f792 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x176>
 800f6f6:	0023      	movs	r3, r4
 800f6f8:	3339      	adds	r3, #57	@ 0x39
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d044      	beq.n	800f78a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x16e>
 800f700:	0023      	movs	r3, r4
 800f702:	333a      	adds	r3, #58	@ 0x3a
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d13f      	bne.n	800f78a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x16e>
                && (!((RFAL_NFCA_SDD_REQ_LEN == gNfca.CR.bytesTxRx) && (0U == gNfca.CR.bitsTxRx)))     )
 800f70a:	0023      	movs	r3, r4
 800f70c:	332f      	adds	r3, #47	@ 0x2f
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	2b02      	cmp	r3, #2
 800f712:	d105      	bne.n	800f720 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x104>
 800f714:	0023      	movs	r3, r4
 800f716:	3330      	adds	r3, #48	@ 0x30
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d100      	bne.n	800f720 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x104>
 800f71e:	e789      	b.n	800f634 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 800f720:	2026      	movs	r0, #38	@ 0x26
 800f722:	a905      	add	r1, sp, #20
 800f724:	f7ff ff56 	bl	800f5d4 <rfalNfcaPollerCheckPresence>
                if (0U == gNfca.CR.bitsTxRx)
 800f728:	0022      	movs	r2, r4
 800f72a:	3230      	adds	r2, #48	@ 0x30
 800f72c:	7813      	ldrb	r3, [r2, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d104      	bne.n	800f73c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x120>
                    gNfca.CR.bitsTxRx = 7;
 800f732:	3307      	adds	r3, #7
 800f734:	7013      	strb	r3, [r2, #0]
                    gNfca.CR.bytesTxRx--;
 800f736:	0022      	movs	r2, r4
 800f738:	322f      	adds	r2, #47	@ 0x2f
 800f73a:	7813      	ldrb	r3, [r2, #0]
                    gNfca.CR.bitsTxRx--;
 800f73c:	3b01      	subs	r3, #1
 800f73e:	7013      	strb	r3, [r2, #0]
                collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) );
 800f740:	0023      	movs	r3, r4
 800f742:	2101      	movs	r1, #1
 800f744:	332f      	adds	r3, #47	@ 0x2f
 800f746:	7818      	ldrb	r0, [r3, #0]
 800f748:	0023      	movs	r3, r4
 800f74a:	000d      	movs	r5, r1
 800f74c:	3330      	adds	r3, #48	@ 0x30
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	4a72      	ldr	r2, [pc, #456]	@ (800f91c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x300>)
 800f752:	409d      	lsls	r5, r3
 800f754:	002b      	movs	r3, r5
 800f756:	5c12      	ldrb	r2, [r2, r0]
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 800f758:	4013      	ands	r3, r2
 800f75a:	425a      	negs	r2, r3
 800f75c:	4153      	adcs	r3, r2
                gNfca.CR.doBacktrack = true;
 800f75e:	0022      	movs	r2, r4
 800f760:	323a      	adds	r2, #58	@ 0x3a
 800f762:	7011      	strb	r1, [r2, #0]
                gNfca.CR.backtrackCnt--;
 800f764:	0021      	movs	r1, r4
 800f766:	3139      	adds	r1, #57	@ 0x39
 800f768:	780a      	ldrb	r2, [r1, #0]
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 800f76a:	b2db      	uxtb	r3, r3
                gNfca.CR.backtrackCnt--;
 800f76c:	3a01      	subs	r2, #1
 800f76e:	700a      	strb	r2, [r1, #0]
                if( (gNfca.CR.bytesTxRx + ((gNfca.CR.bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 800f770:	0020      	movs	r0, r4
 800f772:	0025      	movs	r5, r4
 800f774:	3030      	adds	r0, #48	@ 0x30
 800f776:	7802      	ldrb	r2, [r0, #0]
 800f778:	352f      	adds	r5, #47	@ 0x2f
 800f77a:	1e51      	subs	r1, r2, #1
 800f77c:	418a      	sbcs	r2, r1
 800f77e:	7829      	ldrb	r1, [r5, #0]
 800f780:	1852      	adds	r2, r2, r1
 800f782:	2a07      	cmp	r2, #7
 800f784:	d90d      	bls.n	800f7a2 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x186>
                    return RFAL_ERR_PROTO;
 800f786:	210b      	movs	r1, #11
 800f788:	e754      	b.n	800f634 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
                gNfca.CR.doBacktrack = false;
 800f78a:	2300      	movs	r3, #0
 800f78c:	343a      	adds	r4, #58	@ 0x3a
 800f78e:	7023      	strb	r3, [r4, #0]
            if( ret == RFAL_ERR_RF_COLLISION )
 800f790:	e750      	b.n	800f634 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
                gNfca.CR.doBacktrack = false;
 800f792:	0020      	movs	r0, r4
 800f794:	2500      	movs	r5, #0
 800f796:	303a      	adds	r0, #58	@ 0x3a
 800f798:	7005      	strb	r5, [r0, #0]
            if( ret == RFAL_ERR_RF_COLLISION )
 800f79a:	2b1d      	cmp	r3, #29
 800f79c:	d144      	bne.n	800f828 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x20c>
 800f79e:	3b1c      	subs	r3, #28
 800f7a0:	e7e6      	b.n	800f770 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x154>
                if( ((gNfca.CR.bytesTxRx + ((gNfca.CR.bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (gNfca.CR.backtrackCnt != 0U) )
 800f7a2:	2a07      	cmp	r2, #7
 800f7a4:	d10c      	bne.n	800f7c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1a4>
 800f7a6:	0026      	movs	r6, r4
 800f7a8:	3639      	adds	r6, #57	@ 0x39
 800f7aa:	7831      	ldrb	r1, [r6, #0]
 800f7ac:	2900      	cmp	r1, #0
 800f7ae:	d007      	beq.n	800f7c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1a4>
                    gNfca.CR.bytesTxRx = (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN) - 1U;
 800f7b0:	2305      	movs	r3, #5
 800f7b2:	702b      	strb	r3, [r5, #0]
                    collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 800f7b4:	7f63      	ldrb	r3, [r4, #29]
                    gNfca.CR.backtrackCnt--;
 800f7b6:	3901      	subs	r1, #1
                    gNfca.CR.bitsTxRx = 7;
 800f7b8:	7002      	strb	r2, [r0, #0]
                    collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 800f7ba:	3278      	adds	r2, #120	@ 0x78
                    gNfca.CR.backtrackCnt--;
 800f7bc:	7031      	strb	r1, [r6, #0]
                    collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 800f7be:	4393      	bics	r3, r2
                if( (gNfca.CR.devLimit == 0U) && (!(*gNfca.CR.collPend)) )
 800f7c0:	7920      	ldrb	r0, [r4, #4]
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	6961      	ldr	r1, [r4, #20]
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d105      	bne.n	800f7d6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ba>
 800f7ca:	7808      	ldrb	r0, [r1, #0]
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d102      	bne.n	800f7d6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ba>
                    *gNfca.CR.collPend = true;
 800f7d0:	700a      	strb	r2, [r1, #0]
                    return RFAL_ERR_IGNORE;
 800f7d2:	2112      	movs	r1, #18
 800f7d4:	e72e      	b.n	800f634 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
                *gNfca.CR.collPend = true;
 800f7d6:	700a      	strb	r2, [r1, #0]
                if (collBit != 0U)
 800f7d8:	4950      	ldr	r1, [pc, #320]	@ (800f91c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x300>)
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d012      	beq.n	800f804 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1e8>
                    ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] = (uint8_t)(((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] | (1U << gNfca.CR.bitsTxRx));   /* MISRA 10.3 */
 800f7de:	0020      	movs	r0, r4
 800f7e0:	0023      	movs	r3, r4
 800f7e2:	3030      	adds	r0, #48	@ 0x30
 800f7e4:	7800      	ldrb	r0, [r0, #0]
 800f7e6:	332f      	adds	r3, #47	@ 0x2f
 800f7e8:	4082      	lsls	r2, r0
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	5cc8      	ldrb	r0, [r1, r3]
 800f7ee:	4302      	orrs	r2, r0
 800f7f0:	54ca      	strb	r2, [r1, r3]
                gNfca.CR.bitsTxRx++;
 800f7f2:	0022      	movs	r2, r4
 800f7f4:	3230      	adds	r2, #48	@ 0x30
 800f7f6:	7813      	ldrb	r3, [r2, #0]
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	b2db      	uxtb	r3, r3
                if( gNfca.CR.bitsTxRx == RFAL_BITS_IN_BYTE )
 800f7fc:	2b08      	cmp	r3, #8
 800f7fe:	d00c      	beq.n	800f81a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1fe>
                    gNfca.CR.bytesTxRx++;
 800f800:	7013      	strb	r3, [r2, #0]
 800f802:	e76f      	b.n	800f6e4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xc8>
                    ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] = (uint8_t)(((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & ~(1U << gNfca.CR.bitsTxRx));  /* MISRA 10.3 */
 800f804:	0023      	movs	r3, r4
 800f806:	332f      	adds	r3, #47	@ 0x2f
 800f808:	7818      	ldrb	r0, [r3, #0]
 800f80a:	0023      	movs	r3, r4
 800f80c:	3330      	adds	r3, #48	@ 0x30
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	409a      	lsls	r2, r3
 800f812:	5c0b      	ldrb	r3, [r1, r0]
 800f814:	4393      	bics	r3, r2
 800f816:	540b      	strb	r3, [r1, r0]
 800f818:	e7eb      	b.n	800f7f2 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1d6>
                    gNfca.CR.bitsTxRx = 0;
 800f81a:	2300      	movs	r3, #0
 800f81c:	7013      	strb	r3, [r2, #0]
                    gNfca.CR.bytesTxRx++;
 800f81e:	0022      	movs	r2, r4
 800f820:	322f      	adds	r2, #47	@ 0x2f
 800f822:	7813      	ldrb	r3, [r2, #0]
 800f824:	3301      	adds	r3, #1
 800f826:	e7eb      	b.n	800f800 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1e4>
            if( ret != RFAL_ERR_NONE )
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d000      	beq.n	800f82e <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x212>
 800f82c:	e702      	b.n	800f634 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
            if( (gNfca.CR.devLimit == 0U) && (gNfca.CR.rxLen != sizeof(rfalNfcaSddRes)) )
 800f82e:	7923      	ldrb	r3, [r4, #4]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d101      	bne.n	800f838 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x21c>
 800f834:	2a05      	cmp	r2, #5
 800f836:	d1a6      	bne.n	800f786 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x16a>
            if( gNfca.CR.selReq.bcc != rfalNfcaCalculateBcc( gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 800f838:	2200      	movs	r2, #0
    BCC = 0;
 800f83a:	0013      	movs	r3, r2
            if( gNfca.CR.selReq.bcc != rfalNfcaCalculateBcc( gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 800f83c:	7fa1      	ldrb	r1, [r4, #30]
        BCC ^= buf[i];
 800f83e:	4d35      	ldr	r5, [pc, #212]	@ (800f914 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2f8>)
 800f840:	5ca8      	ldrb	r0, [r5, r2]
    for(i = 0; i < bufLen; i++)
 800f842:	3201      	adds	r2, #1
        BCC ^= buf[i];
 800f844:	4043      	eors	r3, r0
    for(i = 0; i < bufLen; i++)
 800f846:	2a04      	cmp	r2, #4
 800f848:	d1fa      	bne.n	800f840 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x224>
            if( gNfca.CR.selReq.bcc != rfalNfcaCalculateBcc( gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 800f84a:	4299      	cmp	r1, r3
 800f84c:	d19b      	bne.n	800f786 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x16a>
            gNfca.CR.selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800f84e:	2370      	movs	r3, #112	@ 0x70
 800f850:	7663      	strb	r3, [r4, #25]
            gNfca.CR.retries = RFAL_NFCA_N_RETRANS;
 800f852:	0023      	movs	r3, r4
 800f854:	2102      	movs	r1, #2
 800f856:	3338      	adds	r3, #56	@ 0x38
            gNfca.CR.state   = RFAL_NFCA_CR_SEL_TX;
 800f858:	342d      	adds	r4, #45	@ 0x2d
            gNfca.CR.retries = RFAL_NFCA_N_RETRANS;
 800f85a:	7019      	strb	r1, [r3, #0]
            gNfca.CR.state   = RFAL_NFCA_CR_SEL_TX;
 800f85c:	7022      	strb	r2, [r4, #0]
            break;
 800f85e:	e6f0      	b.n	800f642 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
            rfalTransceiveBlockingTx( (uint8_t*)&gNfca.CR.selReq, sizeof(rfalNfcaSelReq), (uint8_t*)gNfca.CR.selRes, sizeof(rfalNfcaSelRes), &gNfca.CR.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN );        
 800f860:	4b2d      	ldr	r3, [pc, #180]	@ (800f918 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2fc>)
 800f862:	2107      	movs	r1, #7
 800f864:	9302      	str	r3, [sp, #8]
 800f866:	2300      	movs	r3, #0
 800f868:	9301      	str	r3, [sp, #4]
 800f86a:	4b2d      	ldr	r3, [pc, #180]	@ (800f920 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x304>)
 800f86c:	482b      	ldr	r0, [pc, #172]	@ (800f91c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x300>)
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	6a22      	ldr	r2, [r4, #32]
 800f872:	2301      	movs	r3, #1
 800f874:	f7f6 f98e 	bl	8005b94 <rfalTransceiveBlockingTx>
            gNfca.CR.state   = RFAL_NFCA_CR_SEL;
 800f878:	342d      	adds	r4, #45	@ 0x2d
 800f87a:	2305      	movs	r3, #5
 800f87c:	e71a      	b.n	800f6b4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x98>
            RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 800f87e:	f7f4 ff95 	bl	80047ac <rfalGetTransceiveStatus>
 800f882:	0005      	movs	r5, r0
 800f884:	0001      	movs	r1, r0
 800f886:	2802      	cmp	r0, #2
 800f888:	d100      	bne.n	800f88c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x270>
 800f88a:	e6da      	b.n	800f642 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
            if( (ret == RFAL_ERR_TIMEOUT) && (gNfca.CR.devLimit==0U) && (gNfca.CR.retries != 0U) )
 800f88c:	2804      	cmp	r0, #4
 800f88e:	d112      	bne.n	800f8b6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x29a>
 800f890:	7923      	ldrb	r3, [r4, #4]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d000      	beq.n	800f898 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x27c>
 800f896:	e6cd      	b.n	800f634 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
 800f898:	0022      	movs	r2, r4
 800f89a:	3238      	adds	r2, #56	@ 0x38
 800f89c:	7813      	ldrb	r3, [r2, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d100      	bne.n	800f8a4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x288>
 800f8a2:	e6c7      	b.n	800f634 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
                gNfca.CR.retries--;
 800f8a4:	3b01      	subs	r3, #1
                gNfca.CR.tmrFDT = platformTimerCreate( RFAL_NFCA_T_RETRANS );
 800f8a6:	2005      	movs	r0, #5
                gNfca.CR.retries--;
 800f8a8:	7013      	strb	r3, [r2, #0]
                gNfca.CR.tmrFDT = platformTimerCreate( RFAL_NFCA_T_RETRANS );
 800f8aa:	f7f7 faf5 	bl	8006e98 <timerCalculateTimer>
 800f8ae:	6360      	str	r0, [r4, #52]	@ 0x34
                gNfca.CR.state = RFAL_NFCA_CR_SEL_TX;
 800f8b0:	342d      	adds	r4, #45	@ 0x2d
 800f8b2:	7025      	strb	r5, [r4, #0]
                break;
 800f8b4:	e6c5      	b.n	800f642 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
            if( ret != RFAL_ERR_NONE )
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d000      	beq.n	800f8bc <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2a0>
 800f8ba:	e6bb      	b.n	800f634 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
            gNfca.CR.rxLen = rfalConvBitsToBytes( gNfca.CR.rxLen );
 800f8bc:	8e65      	ldrh	r5, [r4, #50]	@ 0x32
 800f8be:	3507      	adds	r5, #7
 800f8c0:	08ed      	lsrs	r5, r5, #3
 800f8c2:	8665      	strh	r5, [r4, #50]	@ 0x32
            if( gNfca.CR.rxLen != sizeof(rfalNfcaSelRes) )
 800f8c4:	2d01      	cmp	r5, #1
 800f8c6:	d000      	beq.n	800f8ca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2ae>
 800f8c8:	e75d      	b.n	800f786 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x16a>
            if( *gNfca.CR.selReq.nfcid1 == RFAL_NFCA_SDD_CT )
 800f8ca:	0026      	movs	r6, r4
                RFAL_MEMCPY( &gNfca.CR.nfcId1[*gNfca.CR.nfcId1Len], &((uint8_t*)&gNfca.CR.selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800f8cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f8ce:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	362d      	adds	r6, #45	@ 0x2d
 800f8d4:	18c0      	adds	r0, r0, r3
            if( *gNfca.CR.selReq.nfcid1 == RFAL_NFCA_SDD_CT )
 800f8d6:	7ea3      	ldrb	r3, [r4, #26]
 800f8d8:	2b88      	cmp	r3, #136	@ 0x88
 800f8da:	d10c      	bne.n	800f8f6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2da>
                RFAL_MEMCPY( &gNfca.CR.nfcId1[*gNfca.CR.nfcId1Len], &((uint8_t*)&gNfca.CR.selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800f8dc:	2203      	movs	r2, #3
 800f8de:	4911      	ldr	r1, [pc, #68]	@ (800f924 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x308>)
 800f8e0:	f003 fd1c 	bl	801331c <memcpy>
                *gNfca.CR.nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800f8e4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
                gNfca.CR.cascadeLv++;
 800f8e6:	342c      	adds	r4, #44	@ 0x2c
                *gNfca.CR.nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800f8e8:	7813      	ldrb	r3, [r2, #0]
 800f8ea:	3303      	adds	r3, #3
 800f8ec:	7013      	strb	r3, [r2, #0]
                gNfca.CR.state = RFAL_NFCA_CR_CL;
 800f8ee:	7035      	strb	r5, [r6, #0]
                gNfca.CR.cascadeLv++;
 800f8f0:	7823      	ldrb	r3, [r4, #0]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	e6de      	b.n	800f6b4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x98>
                RFAL_MEMCPY( &gNfca.CR.nfcId1[*gNfca.CR.nfcId1Len], (uint8_t*)&gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 800f8f6:	0021      	movs	r1, r4
 800f8f8:	2204      	movs	r2, #4
 800f8fa:	311a      	adds	r1, #26
 800f8fc:	f003 fd0e 	bl	801331c <memcpy>
                *gNfca.CR.nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 800f900:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800f902:	7813      	ldrb	r3, [r2, #0]
 800f904:	3304      	adds	r3, #4
 800f906:	7013      	strb	r3, [r2, #0]
                gNfca.CR.state = RFAL_NFCA_CR_DONE;
 800f908:	2306      	movs	r3, #6
 800f90a:	7033      	strb	r3, [r6, #0]
                break;                             /* Only flag operation complete on the next execution */
 800f90c:	e699      	b.n	800f642 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
 800f90e:	46c0      	nop			@ (mov r8, r8)
 800f910:	20002520 	.word	0x20002520
 800f914:	2000253a 	.word	0x2000253a
 800f918:	00000654 	.word	0x00000654
 800f91c:	20002538 	.word	0x20002538
 800f920:	20002552 	.word	0x20002552
 800f924:	2000253b 	.word	0x2000253b

0800f928 <rfalNfcaPollerStartFullCollisionResolution>:
}


/*******************************************************************************/
ReturnCode rfalNfcaPollerStartFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 800f928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f92a:	b089      	sub	sp, #36	@ 0x24
 800f92c:	000f      	movs	r7, r1
 800f92e:	0015      	movs	r5, r2
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
    {
        return RFAL_ERR_PARAM;
 800f930:	2407      	movs	r4, #7
{
 800f932:	9003      	str	r0, [sp, #12]
 800f934:	9304      	str	r3, [sp, #16]
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 800f936:	2a00      	cmp	r2, #0
 800f938:	d058      	beq.n	800f9ec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d056      	beq.n	800f9ec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
    }
    
    *devCnt = 0;
 800f93e:	2300      	movs	r3, #0
 800f940:	9a04      	ldr	r2, [sp, #16]
 800f942:	7013      	strb	r3, [r2, #0]
    ret     = RFAL_ERR_NONE;
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 800f944:	2802      	cmp	r0, #2
 800f946:	d13a      	bne.n	800f9be <rfalNfcaPollerStartFullCollisionResolution+0x96>
    ret     = RFAL_ERR_NONE;
 800f948:	2400      	movs	r4, #0
        }
    }
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 800f94a:	78ab      	ldrb	r3, [r5, #2]
 800f94c:	786e      	ldrb	r6, [r5, #1]
 800f94e:	9305      	str	r3, [sp, #20]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 800f950:	2f00      	cmp	r7, #0
 800f952:	d005      	beq.n	800f960 <rfalNfcaPollerStartFullCollisionResolution+0x38>
    {
        RFAL_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 800f954:	2216      	movs	r2, #22
 800f956:	2100      	movs	r1, #0
 800f958:	0028      	movs	r0, r5
 800f95a:	437a      	muls	r2, r7
 800f95c:	f003 fcaa 	bl	80132b4 <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 800f960:	9b05      	ldr	r3, [sp, #20]
 800f962:	706e      	strb	r6, [r5, #1]
 800f964:	70ab      	strb	r3, [r5, #2]
    
    /* Save parameters */
    gNfca.CR.devCnt      = devCnt;
 800f966:	4e2e      	ldr	r6, [pc, #184]	@ (800fa20 <rfalNfcaPollerStartFullCollisionResolution+0xf8>)
 800f968:	9b04      	ldr	r3, [sp, #16]
    gNfca.CR.devLimit    = devLimit;
    gNfca.CR.nfcaDevList = nfcaDevList;
    gNfca.CR.compMode    = compMode;
    gNfca.CR.fState      = RFAL_NFCA_CR_FULL_START;
 800f96a:	2200      	movs	r2, #0
    gNfca.CR.devCnt      = devCnt;
 800f96c:	60f3      	str	r3, [r6, #12]
    gNfca.CR.compMode    = compMode;
 800f96e:	9b03      	ldr	r3, [sp, #12]
    gNfca.CR.devLimit    = devLimit;
 800f970:	7137      	strb	r7, [r6, #4]
    gNfca.CR.compMode    = compMode;
 800f972:	7173      	strb	r3, [r6, #5]
    gNfca.CR.fState      = RFAL_NFCA_CR_FULL_START;
 800f974:	0033      	movs	r3, r6
 800f976:	332e      	adds	r3, #46	@ 0x2e
 800f978:	701a      	strb	r2, [r3, #0]
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == RFAL_ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 800f97a:	230f      	movs	r3, #15
 800f97c:	9a05      	ldr	r2, [sp, #20]
    gNfca.CR.nfcaDevList = nfcaDevList;
 800f97e:	60b5      	str	r5, [r6, #8]
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == RFAL_ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 800f980:	4013      	ands	r3, r2
 800f982:	2b0c      	cmp	r3, #12
 800f984:	d13f      	bne.n	800fa06 <rfalNfcaPollerStartFullCollisionResolution+0xde>
 800f986:	2f00      	cmp	r7, #0
 800f988:	d03d      	beq.n	800fa06 <rfalNfcaPollerStartFullCollisionResolution+0xde>
 800f98a:	2c00      	cmp	r4, #0
 800f98c:	d13b      	bne.n	800fa06 <rfalNfcaPollerStartFullCollisionResolution+0xde>
 800f98e:	9b03      	ldr	r3, [sp, #12]
 800f990:	2b01      	cmp	r3, #1
 800f992:	d038      	beq.n	800fa06 <rfalNfcaPollerStartFullCollisionResolution+0xde>
    {
        /* RID_REQ shall be performed              Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 800f994:	f001 f91a 	bl	8010bcc <rfalT1TPollerInitialize>
        RFAL_EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 800f998:	0028      	movs	r0, r5
 800f99a:	300f      	adds	r0, #15
 800f99c:	f001 f92e 	bl	8010bfc <rfalT1TPollerRid>
 800f9a0:	1e04      	subs	r4, r0, #0
 800f9a2:	d123      	bne.n	800f9ec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
        
        *devCnt = 1U;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	9a04      	ldr	r2, [sp, #16]
        nfcaDevList->isSleep   = false;
        nfcaDevList->type      = RFAL_NFCA_T1T;
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
        RFAL_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 800f9a8:	0029      	movs	r1, r5
        *devCnt = 1U;
 800f9aa:	7013      	strb	r3, [r2, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 800f9ac:	2204      	movs	r2, #4
        nfcaDevList->isSleep   = false;
 800f9ae:	7568      	strb	r0, [r5, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 800f9b0:	702b      	strb	r3, [r5, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 800f9b2:	712a      	strb	r2, [r5, #4]
        RFAL_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 800f9b4:	1d68      	adds	r0, r5, #5
 800f9b6:	3111      	adds	r1, #17
 800f9b8:	f003 fcb0 	bl	801331c <memcpy>
        
        return RFAL_ERR_NONE;
 800f9bc:	e016      	b.n	800f9ec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800f9be:	260e      	movs	r6, #14
 800f9c0:	ab04      	add	r3, sp, #16
 800f9c2:	18f6      	adds	r6, r6, r3
 800f9c4:	4b17      	ldr	r3, [pc, #92]	@ (800fa24 <rfalNfcaPollerStartFullCollisionResolution+0xfc>)
 800f9c6:	2210      	movs	r2, #16
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	2052      	movs	r0, #82	@ 0x52
 800f9cc:	0033      	movs	r3, r6
 800f9ce:	1c69      	adds	r1, r5, #1
 800f9d0:	f7f6 f9ec 	bl	8005dac <rfalISO14443ATransceiveShortFrame>
 800f9d4:	1e04      	subs	r4, r0, #0
        if(ret != RFAL_ERR_NONE)
 800f9d6:	d011      	beq.n	800f9fc <rfalNfcaPollerStartFullCollisionResolution+0xd4>
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != RFAL_ERR_RF_COLLISION) && (ret != RFAL_ERR_CRC) && (ret != RFAL_ERR_FRAMING) && (ret != RFAL_ERR_PAR) && (ret != RFAL_ERR_INCOMPLETE_BYTE)) )
 800f9d8:	9b03      	ldr	r3, [sp, #12]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d006      	beq.n	800f9ec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
 800f9de:	281b      	cmp	r0, #27
 800f9e0:	d0b3      	beq.n	800f94a <rfalNfcaPollerStartFullCollisionResolution+0x22>
 800f9e2:	d806      	bhi.n	800f9f2 <rfalNfcaPollerStartFullCollisionResolution+0xca>
 800f9e4:	2809      	cmp	r0, #9
 800f9e6:	d0b0      	beq.n	800f94a <rfalNfcaPollerStartFullCollisionResolution+0x22>
 800f9e8:	2815      	cmp	r0, #21
 800f9ea:	d0ae      	beq.n	800f94a <rfalNfcaPollerStartFullCollisionResolution+0x22>
    
    RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartSingleCollisionResolution( devLimit, &gNfca.CR.collPending, &nfcaDevList->selRes, (uint8_t*)&nfcaDevList->nfcId1, &nfcaDevList->nfcId1Len ) );
    
    gNfca.CR.fState = RFAL_NFCA_CR_FULL_START;
    return RFAL_ERR_NONE;
}
 800f9ec:	0020      	movs	r0, r4
 800f9ee:	b009      	add	sp, #36	@ 0x24
 800f9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9f2:	281d      	cmp	r0, #29
 800f9f4:	d0a9      	beq.n	800f94a <rfalNfcaPollerStartFullCollisionResolution+0x22>
 800f9f6:	2828      	cmp	r0, #40	@ 0x28
 800f9f8:	d0a7      	beq.n	800f94a <rfalNfcaPollerStartFullCollisionResolution+0x22>
 800f9fa:	e7f7      	b.n	800f9ec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
        if( (ret == RFAL_ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 800f9fc:	8833      	ldrh	r3, [r6, #0]
            return RFAL_ERR_PROTO;
 800f9fe:	240b      	movs	r4, #11
        if( (ret == RFAL_ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 800fa00:	2b10      	cmp	r3, #16
 800fa02:	d0a1      	beq.n	800f948 <rfalNfcaPollerStartFullCollisionResolution+0x20>
 800fa04:	e7f2      	b.n	800f9ec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
    RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartSingleCollisionResolution( devLimit, &gNfca.CR.collPending, &nfcaDevList->selRes, (uint8_t*)&nfcaDevList->nfcId1, &nfcaDevList->nfcId1Len ) );
 800fa06:	1d6b      	adds	r3, r5, #5
 800fa08:	1cea      	adds	r2, r5, #3
 800fa0a:	3504      	adds	r5, #4
 800fa0c:	0038      	movs	r0, r7
 800fa0e:	4906      	ldr	r1, [pc, #24]	@ (800fa28 <rfalNfcaPollerStartFullCollisionResolution+0x100>)
 800fa10:	9500      	str	r5, [sp, #0]
 800fa12:	f7ff fd95 	bl	800f540 <rfalNfcaPollerStartSingleCollisionResolution>
 800fa16:	1e04      	subs	r4, r0, #0
 800fa18:	d1e8      	bne.n	800f9ec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
    gNfca.CR.fState = RFAL_NFCA_CR_FULL_START;
 800fa1a:	362e      	adds	r6, #46	@ 0x2e
 800fa1c:	7030      	strb	r0, [r6, #0]
    return RFAL_ERR_NONE;
 800fa1e:	e7e5      	b.n	800f9ec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
 800fa20:	20002520 	.word	0x20002520
 800fa24:	00000654 	.word	0x00000654
 800fa28:	20002530 	.word	0x20002530

0800fa2c <rfalNfcaPollerStartSelect>:
}


/*******************************************************************************/
ReturnCode rfalNfcaPollerStartSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 800fa2c:	b570      	push	{r4, r5, r6, lr}
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
    {
        return RFAL_ERR_PARAM;
 800fa2e:	2307      	movs	r3, #7
{
 800fa30:	0004      	movs	r4, r0
 800fa32:	0015      	movs	r5, r2
 800fa34:	0008      	movs	r0, r1
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 800fa36:	2c00      	cmp	r4, #0
 800fa38:	d012      	beq.n	800fa60 <rfalNfcaPollerStartSelect+0x34>
 800fa3a:	290a      	cmp	r1, #10
 800fa3c:	d810      	bhi.n	800fa60 <rfalNfcaPollerStartSelect+0x34>
 800fa3e:	2a00      	cmp	r2, #0
 800fa40:	d00e      	beq.n	800fa60 <rfalNfcaPollerStartSelect+0x34>
    }
    
    
    /* Calculate Cascate Level */
    gNfca.SEL.fCascadeLv = rfalNfcaNfcidLen2CL( nfcidLen );
 800fa42:	2105      	movs	r1, #5
 800fa44:	f7f0 fb90 	bl	8000168 <__udivsi3>
 800fa48:	4e06      	ldr	r6, [pc, #24]	@ (800fa64 <rfalNfcaPollerStartSelect+0x38>)
 800fa4a:	4b07      	ldr	r3, [pc, #28]	@ (800fa68 <rfalNfcaPollerStartSelect+0x3c>)
    gNfca.SEL.cascadeLv  = RFAL_NFCA_SEL_CASCADE_L1;
 800fa4c:	0031      	movs	r1, r6
    gNfca.SEL.fCascadeLv = rfalNfcaNfcidLen2CL( nfcidLen );
 800fa4e:	7018      	strb	r0, [r3, #0]
    gNfca.SEL.cascadeLv  = RFAL_NFCA_SEL_CASCADE_L1;
 800fa50:	2300      	movs	r3, #0
 800fa52:	313c      	adds	r1, #60	@ 0x3c
 800fa54:	700b      	strb	r3, [r1, #0]
    
    gNfca.SEL.nfcidOffset  = 0;
 800fa56:	0031      	movs	r1, r6
 800fa58:	314c      	adds	r1, #76	@ 0x4c
 800fa5a:	800b      	strh	r3, [r1, #0]
    gNfca.SEL.isRx         = false;
    gNfca.SEL.selRes       = selRes;
 800fa5c:	6435      	str	r5, [r6, #64]	@ 0x40
    gNfca.SEL.nfcid1       = nfcid1;
 800fa5e:	64b4      	str	r4, [r6, #72]	@ 0x48
    
    return RFAL_ERR_NONE;
}
 800fa60:	0018      	movs	r0, r3
 800fa62:	bd70      	pop	{r4, r5, r6, pc}
 800fa64:	20002520 	.word	0x20002520
 800fa68:	2000255d 	.word	0x2000255d

0800fa6c <rfalNfcaPollerGetSelectStatus>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerGetSelectStatus( void )
{
 800fa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (!gNfca.SEL.isRx) )
 800fa6e:	4d30      	ldr	r5, [pc, #192]	@ (800fb30 <rfalNfcaPollerGetSelectStatus+0xc4>)
 800fa70:	4c30      	ldr	r4, [pc, #192]	@ (800fb34 <rfalNfcaPollerGetSelectStatus+0xc8>)
 800fa72:	782b      	ldrb	r3, [r5, #0]
{
 800fa74:	b087      	sub	sp, #28
    if( (!gNfca.SEL.isRx) )
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d142      	bne.n	800fb00 <rfalNfcaPollerGetSelectStatus+0x94>
    {
        /*******************************************************************************/
        /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
        if( gNfca.SEL.cascadeLv <= gNfca.SEL.fCascadeLv )
 800fa7a:	0023      	movs	r3, r4
 800fa7c:	0022      	movs	r2, r4
 800fa7e:	333c      	adds	r3, #60	@ 0x3c
 800fa80:	323d      	adds	r2, #61	@ 0x3d
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	7810      	ldrb	r0, [r2, #0]
 800fa86:	4283      	cmp	r3, r0
 800fa88:	d902      	bls.n	800fa90 <rfalNfcaPollerGetSelectStatus+0x24>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return RFAL_ERR_NONE;
 800fa8a:	2000      	movs	r0, #0
}
 800fa8c:	b007      	add	sp, #28
 800fa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            selReq.selCmd = rfalNfcaCLn2SELCMD(gNfca.SEL.cascadeLv);
 800fa90:	005a      	lsls	r2, r3, #1
 800fa92:	ad04      	add	r5, sp, #16
 800fa94:	3a6d      	subs	r2, #109	@ 0x6d
 800fa96:	702a      	strb	r2, [r5, #0]
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800fa98:	0027      	movs	r7, r4
            selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800fa9a:	2270      	movs	r2, #112	@ 0x70
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800fa9c:	374c      	adds	r7, #76	@ 0x4c
            selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800fa9e:	706a      	strb	r2, [r5, #1]
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800faa0:	783e      	ldrb	r6, [r7, #0]
 800faa2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800faa4:	1989      	adds	r1, r1, r6
            if( gNfca.SEL.fCascadeLv != gNfca.SEL.cascadeLv )
 800faa6:	4283      	cmp	r3, r0
 800faa8:	d024      	beq.n	800faf4 <rfalNfcaPollerGetSelectStatus+0x88>
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800faaa:	2013      	movs	r0, #19
                *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 800faac:	2388      	movs	r3, #136	@ 0x88
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800faae:	3a6d      	subs	r2, #109	@ 0x6d
 800fab0:	4468      	add	r0, sp
                gNfca.SEL.nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800fab2:	3603      	adds	r6, #3
                *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 800fab4:	70ab      	strb	r3, [r5, #2]
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800fab6:	f003 fc31 	bl	801331c <memcpy>
                gNfca.SEL.nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800faba:	703e      	strb	r6, [r7, #0]
{
 800fabc:	2300      	movs	r3, #0
    BCC = 0;
 800fabe:	001a      	movs	r2, r3
        BCC ^= buf[i];
 800fac0:	18e9      	adds	r1, r5, r3
 800fac2:	7889      	ldrb	r1, [r1, #2]
    for(i = 0; i < bufLen; i++)
 800fac4:	3301      	adds	r3, #1
        BCC ^= buf[i];
 800fac6:	404a      	eors	r2, r1
    for(i = 0; i < bufLen; i++)
 800fac8:	2b04      	cmp	r3, #4
 800faca:	d1f9      	bne.n	800fac0 <rfalNfcaPollerGetSelectStatus+0x54>
            RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)gNfca.SEL.selRes, sizeof(rfalNfcaSelRes), &gNfca.SEL.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 800facc:	4b1a      	ldr	r3, [pc, #104]	@ (800fb38 <rfalNfcaPollerGetSelectStatus+0xcc>)
            selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 800face:	71aa      	strb	r2, [r5, #6]
            RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)gNfca.SEL.selRes, sizeof(rfalNfcaSelRes), &gNfca.SEL.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 800fad0:	9302      	str	r3, [sp, #8]
 800fad2:	2300      	movs	r3, #0
 800fad4:	9301      	str	r3, [sp, #4]
 800fad6:	4b19      	ldr	r3, [pc, #100]	@ (800fb3c <rfalNfcaPollerGetSelectStatus+0xd0>)
 800fad8:	2107      	movs	r1, #7
 800fada:	9300      	str	r3, [sp, #0]
 800fadc:	0028      	movs	r0, r5
 800fade:	2301      	movs	r3, #1
 800fae0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800fae2:	f7f6 f857 	bl	8005b94 <rfalTransceiveBlockingTx>
 800fae6:	2800      	cmp	r0, #0
 800fae8:	d1d0      	bne.n	800fa8c <rfalNfcaPollerGetSelectStatus+0x20>
            gNfca.SEL.isRx = true;
 800faea:	2301      	movs	r3, #1
 800faec:	344d      	adds	r4, #77	@ 0x4d
 800faee:	7023      	strb	r3, [r4, #0]
            return RFAL_ERR_BUSY;
 800faf0:	2002      	movs	r0, #2
 800faf2:	e7cb      	b.n	800fa8c <rfalNfcaPollerGetSelectStatus+0x20>
                RFAL_MEMCPY( selReq.nfcid1, &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 800faf4:	2012      	movs	r0, #18
 800faf6:	2204      	movs	r2, #4
 800faf8:	4468      	add	r0, sp
 800fafa:	f003 fc0f 	bl	801331c <memcpy>
 800fafe:	e7dd      	b.n	800fabc <rfalNfcaPollerGetSelectStatus+0x50>
        RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 800fb00:	f7f4 fe54 	bl	80047ac <rfalGetTransceiveStatus>
 800fb04:	2802      	cmp	r0, #2
 800fb06:	d0f3      	beq.n	800faf0 <rfalNfcaPollerGetSelectStatus+0x84>
        if( rfalConvBitsToBytes( gNfca.SEL.rxLen ) != sizeof(rfalNfcaSelRes) )
 800fb08:	1da3      	adds	r3, r4, #6
 800fb0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
            return RFAL_ERR_PROTO;
 800fb0c:	200b      	movs	r0, #11
        if( rfalConvBitsToBytes( gNfca.SEL.rxLen ) != sizeof(rfalNfcaSelRes) )
 800fb0e:	3307      	adds	r3, #7
 800fb10:	08db      	lsrs	r3, r3, #3
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d1ba      	bne.n	800fa8c <rfalNfcaPollerGetSelectStatus+0x20>
        if( gNfca.SEL.cascadeLv < gNfca.SEL.fCascadeLv )
 800fb16:	0022      	movs	r2, r4
 800fb18:	343d      	adds	r4, #61	@ 0x3d
 800fb1a:	323c      	adds	r2, #60	@ 0x3c
 800fb1c:	7813      	ldrb	r3, [r2, #0]
 800fb1e:	7821      	ldrb	r1, [r4, #0]
 800fb20:	4299      	cmp	r1, r3
 800fb22:	d9b2      	bls.n	800fa8a <rfalNfcaPollerGetSelectStatus+0x1e>
            gNfca.SEL.cascadeLv++;
 800fb24:	3301      	adds	r3, #1
 800fb26:	7013      	strb	r3, [r2, #0]
            gNfca.SEL.isRx = false;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_BUSY;
 800fb2c:	e7e0      	b.n	800faf0 <rfalNfcaPollerGetSelectStatus+0x84>
 800fb2e:	46c0      	nop			@ (mov r8, r8)
 800fb30:	2000256d 	.word	0x2000256d
 800fb34:	20002520 	.word	0x20002520
 800fb38:	00000654 	.word	0x00000654
 800fb3c:	20002564 	.word	0x20002564

0800fb40 <rfalNfcaPollerSelect>:
{
 800fb40:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartSelect( nfcid1, nfcidLen, selRes ) );
 800fb42:	f7ff ff73 	bl	800fa2c <rfalNfcaPollerStartSelect>
 800fb46:	1e04      	subs	r4, r0, #0
 800fb48:	d106      	bne.n	800fb58 <rfalNfcaPollerSelect+0x18>
    rfalRunBlocking( ret, rfalNfcaPollerGetSelectStatus() );
 800fb4a:	f7ff ff8f 	bl	800fa6c <rfalNfcaPollerGetSelectStatus>
 800fb4e:	0004      	movs	r4, r0
 800fb50:	f7f5 f9b4 	bl	8004ebc <rfalWorker>
 800fb54:	2c02      	cmp	r4, #2
 800fb56:	d0f8      	beq.n	800fb4a <rfalNfcaPollerSelect+0xa>
}
 800fb58:	0020      	movs	r0, r4
 800fb5a:	bd10      	pop	{r4, pc}

0800fb5c <rfalNfcaPollerStartSleep>:
/*******************************************************************************/
ReturnCode rfalNfcaPollerStartSleep( void )
{
    rfalTransceiveContext ctx;
    
    gNfca.slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 800fb5c:	2250      	movs	r2, #80	@ 0x50
{
 800fb5e:	b500      	push	{lr}
    gNfca.slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 800fb60:	4b09      	ldr	r3, [pc, #36]	@ (800fb88 <rfalNfcaPollerStartSleep+0x2c>)
{
 800fb62:	b089      	sub	sp, #36	@ 0x24
    gNfca.slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
    
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gNfca.slpReq, sizeof(rfalNfcaSlpReq), (uint8_t*)&gNfca.slpReq, sizeof(gNfca.slpReq), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 800fb64:	9301      	str	r3, [sp, #4]
    gNfca.slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 800fb66:	801a      	strh	r2, [r3, #0]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gNfca.slpReq, sizeof(rfalNfcaSlpReq), (uint8_t*)&gNfca.slpReq, sizeof(gNfca.slpReq), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 800fb68:	9303      	str	r3, [sp, #12]
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	4669      	mov	r1, sp
 800fb6e:	9305      	str	r3, [sp, #20]
 800fb70:	9306      	str	r3, [sp, #24]
 800fb72:	4b06      	ldr	r3, [pc, #24]	@ (800fb8c <rfalNfcaPollerStartSleep+0x30>)
 800fb74:	3a40      	subs	r2, #64	@ 0x40
    return rfalStartTransceive( &ctx );
 800fb76:	a801      	add	r0, sp, #4
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gNfca.slpReq, sizeof(rfalNfcaSlpReq), (uint8_t*)&gNfca.slpReq, sizeof(gNfca.slpReq), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 800fb78:	810a      	strh	r2, [r1, #8]
 800fb7a:	820a      	strh	r2, [r1, #16]
 800fb7c:	9307      	str	r3, [sp, #28]
    return rfalStartTransceive( &ctx );
 800fb7e:	f7f4 fd35 	bl	80045ec <rfalStartTransceive>
}
 800fb82:	b009      	add	sp, #36	@ 0x24
 800fb84:	bd00      	pop	{pc}
 800fb86:	46c0      	nop			@ (mov r8, r8)
 800fb88:	20002570 	.word	0x20002570
 800fb8c:	000034f8 	.word	0x000034f8

0800fb90 <rfalNfcaPollerStartTechnologyDetection>:
{
 800fb90:	b510      	push	{r4, lr}
    gNfca.DT.compMode = compMode;
 800fb92:	4c0a      	ldr	r4, [pc, #40]	@ (800fbbc <rfalNfcaPollerStartTechnologyDetection+0x2c>)
{
 800fb94:	0003      	movs	r3, r0
    gNfca.DT.compMode = compMode;
 800fb96:	7020      	strb	r0, [r4, #0]
    gNfca.DT.ret      = rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes );
 800fb98:	2026      	movs	r0, #38	@ 0x26
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d100      	bne.n	800fba0 <rfalNfcaPollerStartTechnologyDetection+0x10>
 800fb9e:	302c      	adds	r0, #44	@ 0x2c
 800fba0:	f7ff fd18 	bl	800f5d4 <rfalNfcaPollerCheckPresence>
    if( (gNfca.DT.compMode != RFAL_COMPLIANCE_MODE_ISO) && (gNfca.DT.ret == RFAL_ERR_NONE) )
 800fba4:	7822      	ldrb	r2, [r4, #0]
    gNfca.DT.ret      = rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes );
 800fba6:	0003      	movs	r3, r0
 800fba8:	8060      	strh	r0, [r4, #2]
    return RFAL_ERR_NONE;
 800fbaa:	2000      	movs	r0, #0
    if( (gNfca.DT.compMode != RFAL_COMPLIANCE_MODE_ISO) && (gNfca.DT.ret == RFAL_ERR_NONE) )
 800fbac:	2a02      	cmp	r2, #2
 800fbae:	d003      	beq.n	800fbb8 <rfalNfcaPollerStartTechnologyDetection+0x28>
 800fbb0:	4283      	cmp	r3, r0
 800fbb2:	d101      	bne.n	800fbb8 <rfalNfcaPollerStartTechnologyDetection+0x28>
        RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartSleep() );
 800fbb4:	f7ff ffd2 	bl	800fb5c <rfalNfcaPollerStartSleep>
}
 800fbb8:	bd10      	pop	{r4, pc}
 800fbba:	46c0      	nop			@ (mov r8, r8)
 800fbbc:	20002520 	.word	0x20002520

0800fbc0 <rfalNfcaPollerGetSleepStatus>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerGetSleepStatus( void )
{
 800fbc0:	b510      	push	{r4, lr}
    
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 800fbc2:	f7f4 fdf3 	bl	80047ac <rfalGetTransceiveStatus>
 800fbc6:	3802      	subs	r0, #2
 800fbc8:	4243      	negs	r3, r0
 800fbca:	4158      	adcs	r0, r3
    
    return RFAL_ERR_NONE;
}
 800fbcc:	0040      	lsls	r0, r0, #1
 800fbce:	bd10      	pop	{r4, pc}

0800fbd0 <rfalNfcaPollerGetTechnologyDetectionStatus>:
{
 800fbd0:	b510      	push	{r4, lr}
    if( (gNfca.DT.compMode != RFAL_COMPLIANCE_MODE_ISO) && (gNfca.DT.ret == RFAL_ERR_NONE) )
 800fbd2:	4c07      	ldr	r4, [pc, #28]	@ (800fbf0 <rfalNfcaPollerGetTechnologyDetectionStatus+0x20>)
 800fbd4:	7822      	ldrb	r2, [r4, #0]
 800fbd6:	8863      	ldrh	r3, [r4, #2]
 800fbd8:	2a02      	cmp	r2, #2
 800fbda:	d101      	bne.n	800fbe0 <rfalNfcaPollerGetTechnologyDetectionStatus+0x10>
    return gNfca.DT.ret;
 800fbdc:	8860      	ldrh	r0, [r4, #2]
}
 800fbde:	bd10      	pop	{r4, pc}
    if( (gNfca.DT.compMode != RFAL_COMPLIANCE_MODE_ISO) && (gNfca.DT.ret == RFAL_ERR_NONE) )
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d1fb      	bne.n	800fbdc <rfalNfcaPollerGetTechnologyDetectionStatus+0xc>
        RFAL_EXIT_ON_BUSY( ret, rfalNfcaPollerGetSleepStatus() );
 800fbe4:	f7ff ffec 	bl	800fbc0 <rfalNfcaPollerGetSleepStatus>
 800fbe8:	2802      	cmp	r0, #2
 800fbea:	d1f7      	bne.n	800fbdc <rfalNfcaPollerGetTechnologyDetectionStatus+0xc>
 800fbec:	e7f7      	b.n	800fbde <rfalNfcaPollerGetTechnologyDetectionStatus+0xe>
 800fbee:	46c0      	nop			@ (mov r8, r8)
 800fbf0:	20002520 	.word	0x20002520

0800fbf4 <rfalNfcaPollerGetFullCollisionResolutionStatus>:
{
 800fbf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( (gNfca.CR.nfcaDevList == NULL) || (gNfca.CR.devCnt == NULL) )
 800fbf6:	4c38      	ldr	r4, [pc, #224]	@ (800fcd8 <rfalNfcaPollerGetFullCollisionResolutionStatus+0xe4>)
 800fbf8:	2021      	movs	r0, #33	@ 0x21
 800fbfa:	68a3      	ldr	r3, [r4, #8]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d014      	beq.n	800fc2a <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
 800fc00:	68e2      	ldr	r2, [r4, #12]
 800fc02:	2a00      	cmp	r2, #0
 800fc04:	d011      	beq.n	800fc2a <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
    switch( gNfca.CR.fState )
 800fc06:	0025      	movs	r5, r4
 800fc08:	352e      	adds	r5, #46	@ 0x2e
 800fc0a:	782e      	ldrb	r6, [r5, #0]
 800fc0c:	2e01      	cmp	r6, #1
 800fc0e:	d03d      	beq.n	800fc8c <rfalNfcaPollerGetFullCollisionResolutionStatus+0x98>
 800fc10:	2e02      	cmp	r6, #2
 800fc12:	d00b      	beq.n	800fc2c <rfalNfcaPollerGetFullCollisionResolutionStatus+0x38>
 800fc14:	2e00      	cmp	r6, #0
 800fc16:	d108      	bne.n	800fc2a <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
            if( rfalNfcaIsSensResT1T( &gNfca.CR.nfcaDevList->sensRes ) && (gNfca.CR.nfcaDevList->type == RFAL_NFCA_T1T) )
 800fc18:	210f      	movs	r1, #15
 800fc1a:	789a      	ldrb	r2, [r3, #2]
 800fc1c:	400a      	ands	r2, r1
 800fc1e:	2a0c      	cmp	r2, #12
 800fc20:	d104      	bne.n	800fc2c <rfalNfcaPollerGetFullCollisionResolutionStatus+0x38>
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d101      	bne.n	800fc2c <rfalNfcaPollerGetFullCollisionResolutionStatus+0x38>
                return RFAL_ERR_NONE;
 800fc28:	2000      	movs	r0, #0
}
 800fc2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerGetSingleCollisionResolutionStatus() );
 800fc2c:	f7ff fcf6 	bl	800f61c <rfalNfcaPollerGetSingleCollisionResolutionStatus>
 800fc30:	1e02      	subs	r2, r0, #0
 800fc32:	d1fa      	bne.n	800fc2a <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
            newDevType = ((uint8_t)gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 800fc34:	2516      	movs	r5, #22
 800fc36:	2760      	movs	r7, #96	@ 0x60
 800fc38:	68e1      	ldr	r1, [r4, #12]
 800fc3a:	68a0      	ldr	r0, [r4, #8]
 800fc3c:	780b      	ldrb	r3, [r1, #0]
 800fc3e:	436b      	muls	r3, r5
 800fc40:	18c3      	adds	r3, r0, r3
 800fc42:	78de      	ldrb	r6, [r3, #3]
 800fc44:	403e      	ands	r6, r7
            gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].type    = (rfalNfcaListenDeviceType) newDevType;
 800fc46:	701e      	strb	r6, [r3, #0]
            gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].isSleep = false;
 800fc48:	780b      	ldrb	r3, [r1, #0]
 800fc4a:	436b      	muls	r3, r5
 800fc4c:	18c0      	adds	r0, r0, r3
 800fc4e:	7542      	strb	r2, [r0, #21]
            (*gNfca.CR.devCnt)++;
 800fc50:	780b      	ldrb	r3, [r1, #0]
 800fc52:	3301      	adds	r3, #1
 800fc54:	700b      	strb	r3, [r1, #0]
            if( (*gNfca.CR.devCnt < gNfca.CR.devLimit) && (gNfca.CR.collPending) )
 800fc56:	68e3      	ldr	r3, [r4, #12]
 800fc58:	781a      	ldrb	r2, [r3, #0]
 800fc5a:	7923      	ldrb	r3, [r4, #4]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d212      	bcs.n	800fc86 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x92>
 800fc60:	7c23      	ldrb	r3, [r4, #16]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d00f      	beq.n	800fc86 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x92>
                RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartSleep() );
 800fc66:	f7ff ff79 	bl	800fb5c <rfalNfcaPollerStartSleep>
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	d1dd      	bne.n	800fc2a <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
                gNfca.CR.nfcaDevList[(*gNfca.CR.devCnt - 1U)].isSleep = true;
 800fc6e:	68e3      	ldr	r3, [r4, #12]
 800fc70:	781a      	ldrb	r2, [r3, #0]
 800fc72:	68a3      	ldr	r3, [r4, #8]
 800fc74:	4355      	muls	r5, r2
 800fc76:	195d      	adds	r5, r3, r5
 800fc78:	2301      	movs	r3, #1
 800fc7a:	3d16      	subs	r5, #22
                gNfca.CR.fState = RFAL_NFCA_CR_FULL_SLPCHECK;
 800fc7c:	342e      	adds	r4, #46	@ 0x2e
                gNfca.CR.nfcaDevList[(*gNfca.CR.devCnt - 1U)].isSleep = true;
 800fc7e:	756b      	strb	r3, [r5, #21]
                gNfca.CR.fState = RFAL_NFCA_CR_FULL_SLPCHECK;
 800fc80:	7023      	strb	r3, [r4, #0]
                return RFAL_ERR_BUSY;
 800fc82:	2002      	movs	r0, #2
 800fc84:	e7d1      	b.n	800fc2a <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
                gNfca.CR.collPending = false;
 800fc86:	2300      	movs	r3, #0
 800fc88:	7423      	strb	r3, [r4, #16]
            break;
 800fc8a:	e7cd      	b.n	800fc28 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x34>
            RFAL_EXIT_ON_BUSY( ret, rfalNfcaPollerGetSleepStatus() );
 800fc8c:	f7ff ff98 	bl	800fbc0 <rfalNfcaPollerGetSleepStatus>
 800fc90:	2802      	cmp	r0, #2
 800fc92:	d0f6      	beq.n	800fc82 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x8e>
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].sensRes );
 800fc94:	2716      	movs	r7, #22
 800fc96:	68e3      	ldr	r3, [r4, #12]
 800fc98:	68a1      	ldr	r1, [r4, #8]
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	2026      	movs	r0, #38	@ 0x26
 800fc9e:	437b      	muls	r3, r7
 800fca0:	18c9      	adds	r1, r1, r3
 800fca2:	3101      	adds	r1, #1
 800fca4:	f7ff fc96 	bl	800f5d4 <rfalNfcaPollerCheckPresence>
            if( ret == RFAL_ERR_TIMEOUT )
 800fca8:	2804      	cmp	r0, #4
 800fcaa:	d0ec      	beq.n	800fc86 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x92>
                if( (*gNfca.CR.devCnt < gNfca.CR.devLimit) && (gNfca.CR.collPending) )
 800fcac:	68e3      	ldr	r3, [r4, #12]
                gNfca.CR.collPending = true;
 800fcae:	7426      	strb	r6, [r4, #16]
                if( (*gNfca.CR.devCnt < gNfca.CR.devLimit) && (gNfca.CR.collPending) )
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	7920      	ldrb	r0, [r4, #4]
 800fcb4:	4283      	cmp	r3, r0
 800fcb6:	d2b7      	bcs.n	800fc28 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x34>
                    RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartSingleCollisionResolution(  gNfca.CR.devLimit, 
 800fcb8:	435f      	muls	r7, r3
 800fcba:	68a4      	ldr	r4, [r4, #8]
 800fcbc:	4907      	ldr	r1, [pc, #28]	@ (800fcdc <rfalNfcaPollerGetFullCollisionResolutionStatus+0xe8>)
 800fcbe:	19e4      	adds	r4, r4, r7
 800fcc0:	1d63      	adds	r3, r4, #5
 800fcc2:	1ce2      	adds	r2, r4, #3
 800fcc4:	3404      	adds	r4, #4
 800fcc6:	9400      	str	r4, [sp, #0]
 800fcc8:	f7ff fc3a 	bl	800f540 <rfalNfcaPollerStartSingleCollisionResolution>
 800fccc:	2800      	cmp	r0, #0
 800fcce:	d1ac      	bne.n	800fc2a <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
                    gNfca.CR.fState = RFAL_NFCA_CR_FULL_RESTART;
 800fcd0:	2302      	movs	r3, #2
 800fcd2:	702b      	strb	r3, [r5, #0]
                    return RFAL_ERR_BUSY;
 800fcd4:	e7d5      	b.n	800fc82 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x8e>
 800fcd6:	46c0      	nop			@ (mov r8, r8)
 800fcd8:	20002520 	.word	0x20002520
 800fcdc:	20002530 	.word	0x20002530

0800fce0 <rfalNfcaPollerFullCollisionResolution>:
{
 800fce0:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartFullCollisionResolution( compMode, devLimit, nfcaDevList, devCnt ) );
 800fce2:	f7ff fe21 	bl	800f928 <rfalNfcaPollerStartFullCollisionResolution>
 800fce6:	1e04      	subs	r4, r0, #0
 800fce8:	d106      	bne.n	800fcf8 <rfalNfcaPollerFullCollisionResolution+0x18>
    rfalRunBlocking( ret, rfalNfcaPollerGetFullCollisionResolutionStatus() );
 800fcea:	f7ff ff83 	bl	800fbf4 <rfalNfcaPollerGetFullCollisionResolutionStatus>
 800fcee:	0004      	movs	r4, r0
 800fcf0:	f7f5 f8e4 	bl	8004ebc <rfalWorker>
 800fcf4:	2c02      	cmp	r4, #2
 800fcf6:	d0f8      	beq.n	800fcea <rfalNfcaPollerFullCollisionResolution+0xa>
}
 800fcf8:	0020      	movs	r0, r4
 800fcfa:	bd10      	pop	{r4, pc}

0800fcfc <rfalNfcaListenerIsSleepReq>:


/*******************************************************************************/
bool rfalNfcaListenerIsSleepReq( const uint8_t *buf, uint16_t bufLen )
{
 800fcfc:	0003      	movs	r3, r0
    /* Check if length and payload match */
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
    {
        return false;
 800fcfe:	2000      	movs	r0, #0
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
 800fd00:	2902      	cmp	r1, #2
 800fd02:	d106      	bne.n	800fd12 <rfalNfcaListenerIsSleepReq+0x16>
 800fd04:	781a      	ldrb	r2, [r3, #0]
 800fd06:	2a50      	cmp	r2, #80	@ 0x50
 800fd08:	d103      	bne.n	800fd12 <rfalNfcaListenerIsSleepReq+0x16>
 800fd0a:	7858      	ldrb	r0, [r3, #1]
 800fd0c:	4243      	negs	r3, r0
 800fd0e:	4158      	adcs	r0, r3
 800fd10:	b2c0      	uxtb	r0, r0
    }
    
    return true;
}
 800fd12:	4770      	bx	lr

0800fd14 <rfalNfcbCheckSensbRes>:

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 800fd14:	390c      	subs	r1, #12
{
 800fd16:	0003      	movs	r3, r0
 800fd18:	b510      	push	{r4, lr}
    {
        return RFAL_ERR_PROTO;
 800fd1a:	200b      	movs	r0, #11
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 800fd1c:	2901      	cmp	r1, #1
 800fd1e:	d809      	bhi.n	800fd34 <rfalNfcbCheckSensbRes+0x20>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 800fd20:	7a99      	ldrb	r1, [r3, #10]
 800fd22:	2208      	movs	r2, #8
 800fd24:	000c      	movs	r4, r1
 800fd26:	4014      	ands	r4, r2
 800fd28:	4211      	tst	r1, r2
 800fd2a:	d103      	bne.n	800fd34 <rfalNfcbCheckSensbRes+0x20>
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	2b50      	cmp	r3, #80	@ 0x50
 800fd30:	d100      	bne.n	800fd34 <rfalNfcbCheckSensbRes+0x20>
    {
        return RFAL_ERR_PROTO;
    }
    return RFAL_ERR_NONE;
 800fd32:	0020      	movs	r0, r4
}
 800fd34:	bd10      	pop	{r4, pc}
	...

0800fd38 <rfalNfcbPollerSleepTx.isra.0>:

/*******************************************************************************/
/* This function is used internally during Collision Resolution.  Its          *
 * purpose is to block the state machine for minimmal time.                    *
 * Activity 2.1 does not enforce response checking or error handling.          */
static ReturnCode rfalNfcbPollerSleepTx( const uint8_t* nfcid0 )
 800fd38:	0001      	movs	r1, r0
        return RFAL_ERR_PARAM;
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800fd3a:	2011      	movs	r0, #17
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800fd3c:	2350      	movs	r3, #80	@ 0x50
static ReturnCode rfalNfcbPollerSleepTx( const uint8_t* nfcid0 )
 800fd3e:	b510      	push	{r4, lr}
 800fd40:	b086      	sub	sp, #24
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800fd42:	ac04      	add	r4, sp, #16
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800fd44:	2204      	movs	r2, #4
 800fd46:	4468      	add	r0, sp
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800fd48:	7023      	strb	r3, [r4, #0]
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800fd4a:	f003 fae7 	bl	801331c <memcpy>
    
    /* Send SLPB_REQ and ignore its response and FWT*/
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), NULL, 0, NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_NFCB_POLLER ));
 800fd4e:	2200      	movs	r2, #0
 800fd50:	4b05      	ldr	r3, [pc, #20]	@ (800fd68 <rfalNfcbPollerSleepTx.isra.0+0x30>)
 800fd52:	2105      	movs	r1, #5
 800fd54:	9302      	str	r3, [sp, #8]
 800fd56:	0020      	movs	r0, r4
 800fd58:	0013      	movs	r3, r2
 800fd5a:	9201      	str	r2, [sp, #4]
 800fd5c:	9200      	str	r2, [sp, #0]
 800fd5e:	f7f5 ff19 	bl	8005b94 <rfalTransceiveBlockingTx>
    
    return RFAL_ERR_NONE;
}
 800fd62:	b006      	add	sp, #24
 800fd64:	bd10      	pop	{r4, pc}
 800fd66:	46c0      	nop			@ (mov r8, r8)
 800fd68:	00001a7c 	.word	0x00001a7c

0800fd6c <rfalNfcbPollerInitialize>:
/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
    ReturnCode ret;
    
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 800fd6c:	2200      	movs	r2, #0
{
 800fd6e:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 800fd70:	0011      	movs	r1, r2
 800fd72:	2003      	movs	r0, #3
 800fd74:	f7f4 fa7a 	bl	800426c <rfalSetMode>
 800fd78:	1e04      	subs	r4, r0, #0
 800fd7a:	d10d      	bne.n	800fd98 <rfalNfcbPollerInitialize+0x2c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 800fd7c:	f7f4 fb80 	bl	8004480 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 800fd80:	4806      	ldr	r0, [pc, #24]	@ (800fd9c <rfalNfcbPollerInitialize+0x30>)
 800fd82:	f7f4 fbaf 	bl	80044e4 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 800fd86:	20fc      	movs	r0, #252	@ 0xfc
 800fd88:	0080      	lsls	r0, r0, #2
 800fd8a:	f7f4 fba1 	bl	80044d0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 800fd8e:	4804      	ldr	r0, [pc, #16]	@ (800fda0 <rfalNfcbPollerInitialize+0x34>)
 800fd90:	f7f4 fb8c 	bl	80044ac <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 800fd94:	4b03      	ldr	r3, [pc, #12]	@ (800fda4 <rfalNfcbPollerInitialize+0x38>)
 800fd96:	801c      	strh	r4, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
    
    return RFAL_ERR_NONE;
}
 800fd98:	0020      	movs	r0, r4
 800fd9a:	bd10      	pop	{r4, pc}
 800fd9c:	000108d8 	.word	0x000108d8
 800fda0:	00001a7c 	.word	0x00001a7c
 800fda4:	20002574 	.word	0x20002574

0800fda8 <rfalNfcbPollerStartCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerStartCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800fda8:	b5f0      	push	{r4, r5, r6, r7, lr}
    rfalNfcbSensbReq      sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 800fdaa:	0007      	movs	r7, r0
{
 800fdac:	001e      	movs	r6, r3
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 800fdae:	2308      	movs	r3, #8
{
 800fdb0:	b089      	sub	sp, #36	@ 0x24
 800fdb2:	9005      	str	r0, [sp, #20]
 800fdb4:	000d      	movs	r5, r1
 800fdb6:	0014      	movs	r4, r2
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
    {
        return RFAL_ERR_PARAM;
 800fdb8:	2007      	movs	r0, #7
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 800fdba:	439f      	bics	r7, r3
 800fdbc:	d125      	bne.n	800fe0a <rfalNfcbPollerStartCheckPresence+0x62>
 800fdbe:	2904      	cmp	r1, #4
 800fdc0:	d823      	bhi.n	800fe0a <rfalNfcbPollerStartCheckPresence+0x62>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 800fdc2:	2a00      	cmp	r2, #0
 800fdc4:	d021      	beq.n	800fe0a <rfalNfcbPollerStartCheckPresence+0x62>
 800fdc6:	2e00      	cmp	r6, #0
 800fdc8:	d01f      	beq.n	800fe0a <rfalNfcbPollerStartCheckPresence+0x62>
    }
    
    *sensbResLen = 0;
    RFAL_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 800fdca:	220d      	movs	r2, #13
 800fdcc:	0039      	movs	r1, r7
 800fdce:	0020      	movs	r0, r4
    *sensbResLen = 0;
 800fdd0:	7037      	strb	r7, [r6, #0]
    RFAL_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 800fdd2:	f003 fa6f 	bl	80132b4 <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 800fdd6:	2305      	movs	r3, #5
 800fdd8:	a807      	add	r0, sp, #28
 800fdda:	7003      	strb	r3, [r0, #0]
    sensbReq.AFI   = gRfalNfcb.AFI;
 800fddc:	4b0c      	ldr	r3, [pc, #48]	@ (800fe10 <rfalNfcbPollerStartCheckPresence+0x68>)
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800fdde:	2130      	movs	r1, #48	@ 0x30
    sensbReq.AFI   = gRfalNfcb.AFI;
 800fde0:	781a      	ldrb	r2, [r3, #0]
    
    gRfalNfcb.DT.sensbRes    = sensbRes;
 800fde2:	625c      	str	r4, [r3, #36]	@ 0x24
    sensbReq.AFI   = gRfalNfcb.AFI;
 800fde4:	7042      	strb	r2, [r0, #1]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800fde6:	785a      	ldrb	r2, [r3, #1]
    gRfalNfcb.DT.sensbResLen = sensbResLen;
 800fde8:	629e      	str	r6, [r3, #40]	@ 0x28
    
    /* Send SENSB_REQ */
    return rfalTransceiveBlockingTx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &gRfalNfcb.DT.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800fdea:	23f0      	movs	r3, #240	@ 0xf0
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800fdec:	400a      	ands	r2, r1
 800fdee:	4315      	orrs	r5, r2
 800fdf0:	9a05      	ldr	r2, [sp, #20]
    return rfalTransceiveBlockingTx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &gRfalNfcb.DT.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800fdf2:	015b      	lsls	r3, r3, #5
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800fdf4:	432a      	orrs	r2, r5
 800fdf6:	7082      	strb	r2, [r0, #2]
    return rfalTransceiveBlockingTx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &gRfalNfcb.DT.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800fdf8:	9302      	str	r3, [sp, #8]
 800fdfa:	4b06      	ldr	r3, [pc, #24]	@ (800fe14 <rfalNfcbPollerStartCheckPresence+0x6c>)
 800fdfc:	0022      	movs	r2, r4
 800fdfe:	9300      	str	r3, [sp, #0]
 800fe00:	9701      	str	r7, [sp, #4]
 800fe02:	230d      	movs	r3, #13
 800fe04:	392d      	subs	r1, #45	@ 0x2d
 800fe06:	f7f5 fec5 	bl	8005b94 <rfalTransceiveBlockingTx>
}
 800fe0a:	b009      	add	sp, #36	@ 0x24
 800fe0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe0e:	46c0      	nop			@ (mov r8, r8)
 800fe10:	20002574 	.word	0x20002574
 800fe14:	200025a0 	.word	0x200025a0

0800fe18 <rfalNfcbPollerGetCheckPresenceStatus>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerGetCheckPresenceStatus( void )
{
 800fe18:	b510      	push	{r4, lr}
    ReturnCode ret;

    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 800fe1a:	f7f4 fcc7 	bl	80047ac <rfalGetTransceiveStatus>
 800fe1e:	2802      	cmp	r0, #2
 800fe20:	d00c      	beq.n	800fe3c <rfalNfcbPollerGetCheckPresenceStatus+0x24>
    
    /* Covert bits to bytes (u8) */
    (*gRfalNfcb.DT.sensbResLen) = (uint8_t)rfalConvBitsToBytes(gRfalNfcb.DT.rxLen);
 800fe22:	4b0b      	ldr	r3, [pc, #44]	@ (800fe50 <rfalNfcbPollerGetCheckPresenceStatus+0x38>)
 800fe24:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800fe26:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800fe28:	3207      	adds	r2, #7
 800fe2a:	08d2      	lsrs	r2, r2, #3
 800fe2c:	700a      	strb	r2, [r1, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == RFAL_ERR_CRC) || (ret == RFAL_ERR_FRAMING) )
 800fe2e:	2815      	cmp	r0, #21
 800fe30:	d001      	beq.n	800fe36 <rfalNfcbPollerGetCheckPresenceStatus+0x1e>
 800fe32:	2809      	cmp	r0, #9
 800fe34:	d103      	bne.n	800fe3e <rfalNfcbPollerGetCheckPresenceStatus+0x26>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        (*gRfalNfcb.DT.sensbResLen) = 0;
 800fe36:	2000      	movs	r0, #0
 800fe38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe3a:	7018      	strb	r0, [r3, #0]
    {
        return rfalNfcbCheckSensbRes( gRfalNfcb.DT.sensbRes, *gRfalNfcb.DT.sensbResLen );
    }
    
    return ret;
}
 800fe3c:	bd10      	pop	{r4, pc}
    if( ret == RFAL_ERR_NONE )
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d1fc      	bne.n	800fe3c <rfalNfcbPollerGetCheckPresenceStatus+0x24>
        return rfalNfcbCheckSensbRes( gRfalNfcb.DT.sensbRes, *gRfalNfcb.DT.sensbResLen );
 800fe42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fe44:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800fe46:	7811      	ldrb	r1, [r2, #0]
 800fe48:	f7ff ff64 	bl	800fd14 <rfalNfcbCheckSensbRes>
 800fe4c:	e7f6      	b.n	800fe3c <rfalNfcbPollerGetCheckPresenceStatus+0x24>
 800fe4e:	46c0      	nop			@ (mov r8, r8)
 800fe50:	20002574 	.word	0x20002574

0800fe54 <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 800fe54:	b570      	push	{r4, r5, r6, lr}
 800fe56:	0001      	movs	r1, r0
 800fe58:	b088      	sub	sp, #32
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
    {
        return RFAL_ERR_PARAM;
 800fe5a:	2007      	movs	r0, #7
    if( nfcid0 == NULL )
 800fe5c:	2900      	cmp	r1, #0
 800fe5e:	d01e      	beq.n	800fe9e <rfalNfcbPollerSleep+0x4a>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800fe60:	2350      	movs	r3, #80	@ 0x50
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800fe62:	3012      	adds	r0, #18
 800fe64:	2204      	movs	r2, #4
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800fe66:	ae06      	add	r6, sp, #24
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800fe68:	4468      	add	r0, sp
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800fe6a:	7033      	strb	r3, [r6, #0]
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800fe6c:	f003 fa56 	bl	801331c <memcpy>
    
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 800fe70:	4b0c      	ldr	r3, [pc, #48]	@ (800fea4 <rfalNfcbPollerSleep+0x50>)
 800fe72:	2516      	movs	r5, #22
 800fe74:	9302      	str	r3, [sp, #8]
 800fe76:	2300      	movs	r3, #0
 800fe78:	ac05      	add	r4, sp, #20
 800fe7a:	446d      	add	r5, sp
 800fe7c:	9301      	str	r3, [sp, #4]
 800fe7e:	0022      	movs	r2, r4
 800fe80:	2105      	movs	r1, #5
 800fe82:	0030      	movs	r0, r6
 800fe84:	9500      	str	r5, [sp, #0]
 800fe86:	3301      	adds	r3, #1
 800fe88:	f7f5 ff5e 	bl	8005d48 <rfalTransceiveBlockingTxRx>
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	d106      	bne.n	800fe9e <rfalNfcbPollerSleep+0x4a>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 800fe90:	882b      	ldrh	r3, [r5, #0]
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	d102      	bne.n	800fe9c <rfalNfcbPollerSleep+0x48>
 800fe96:	7823      	ldrb	r3, [r4, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d000      	beq.n	800fe9e <rfalNfcbPollerSleep+0x4a>
    {
        return RFAL_ERR_PROTO;
 800fe9c:	200b      	movs	r0, #11
    }
    return RFAL_ERR_NONE;
}
 800fe9e:	b008      	add	sp, #32
 800fea0:	bd70      	pop	{r4, r5, r6, pc}
 800fea2:	46c0      	nop			@ (mov r8, r8)
 800fea4:	0003a278 	.word	0x0003a278

0800fea8 <rfalNfcbPollerStartSlotMarker>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerStartSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800fea8:	b510      	push	{r4, lr}
 800feaa:	0003      	movs	r3, r0
 800feac:	b086      	sub	sp, #24
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return RFAL_ERR_PARAM;
 800feae:	2007      	movs	r0, #7
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 800feb0:	2900      	cmp	r1, #0
 800feb2:	d018      	beq.n	800fee6 <rfalNfcbPollerStartSlotMarker+0x3e>
 800feb4:	2a00      	cmp	r2, #0
 800feb6:	d016      	beq.n	800fee6 <rfalNfcbPollerStartSlotMarker+0x3e>
 800feb8:	1e5c      	subs	r4, r3, #1
 800feba:	2c0f      	cmp	r4, #15
 800febc:	d813      	bhi.n	800fee6 <rfalNfcbPollerStartSlotMarker+0x3e>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 800febe:	2405      	movs	r4, #5
 800fec0:	011b      	lsls	r3, r3, #4
 800fec2:	4323      	orrs	r3, r4
 800fec4:	a805      	add	r0, sp, #20
 800fec6:	7003      	strb	r3, [r0, #0]
    
    gRfalNfcb.DT.sensbRes    = sensbRes;
 800fec8:	4b08      	ldr	r3, [pc, #32]	@ (800feec <rfalNfcbPollerStartSlotMarker+0x44>)
 800feca:	6259      	str	r1, [r3, #36]	@ 0x24
    gRfalNfcb.DT.sensbResLen = sensbResLen;
 800fecc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return rfalTransceiveBlockingTx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)gRfalNfcb.DT.sensbRes, sizeof(rfalNfcbSensbRes), &gRfalNfcb.DT.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800fece:	23f0      	movs	r3, #240	@ 0xf0
 800fed0:	015b      	lsls	r3, r3, #5
 800fed2:	9302      	str	r3, [sp, #8]
 800fed4:	2300      	movs	r3, #0
 800fed6:	9301      	str	r3, [sp, #4]
 800fed8:	4b05      	ldr	r3, [pc, #20]	@ (800fef0 <rfalNfcbPollerStartSlotMarker+0x48>)
 800feda:	000a      	movs	r2, r1
 800fedc:	9300      	str	r3, [sp, #0]
 800fede:	2101      	movs	r1, #1
 800fee0:	230d      	movs	r3, #13
 800fee2:	f7f5 fe57 	bl	8005b94 <rfalTransceiveBlockingTx>
}
 800fee6:	b006      	add	sp, #24
 800fee8:	bd10      	pop	{r4, pc}
 800feea:	46c0      	nop			@ (mov r8, r8)
 800feec:	20002574 	.word	0x20002574
 800fef0:	200025a0 	.word	0x200025a0

0800fef4 <rfalNfcbPollerGetSlotMarkerStatus>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerGetSlotMarkerStatus( void )
{
 800fef4:	b510      	push	{r4, lr}
    ReturnCode ret;

    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 800fef6:	f7f4 fc59 	bl	80047ac <rfalGetTransceiveStatus>
 800fefa:	2802      	cmp	r0, #2
 800fefc:	d010      	beq.n	800ff20 <rfalNfcbPollerGetSlotMarkerStatus+0x2c>
    
    /* Covert bits to bytes (u8) */
    (*gRfalNfcb.DT.sensbResLen) = (uint8_t)rfalConvBitsToBytes(gRfalNfcb.DT.rxLen);
 800fefe:	4a0a      	ldr	r2, [pc, #40]	@ (800ff28 <rfalNfcbPollerGetSlotMarkerStatus+0x34>)
 800ff00:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 800ff02:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ff04:	3307      	adds	r3, #7
 800ff06:	08db      	lsrs	r3, r3, #3
 800ff08:	700b      	strb	r3, [r1, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == RFAL_ERR_CRC) || (ret == RFAL_ERR_FRAMING) )
 800ff0a:	2815      	cmp	r0, #21
 800ff0c:	d009      	beq.n	800ff22 <rfalNfcbPollerGetSlotMarkerStatus+0x2e>
 800ff0e:	2809      	cmp	r0, #9
 800ff10:	d007      	beq.n	800ff22 <rfalNfcbPollerGetSlotMarkerStatus+0x2e>
    {
        return RFAL_ERR_RF_COLLISION;
    }
    
    if( ret == RFAL_ERR_NONE )
 800ff12:	2800      	cmp	r0, #0
 800ff14:	d104      	bne.n	800ff20 <rfalNfcbPollerGetSlotMarkerStatus+0x2c>
        return rfalNfcbCheckSensbRes( gRfalNfcb.DT.sensbRes, *gRfalNfcb.DT.sensbResLen );
 800ff16:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800ff18:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800ff1a:	7819      	ldrb	r1, [r3, #0]
 800ff1c:	f7ff fefa 	bl	800fd14 <rfalNfcbCheckSensbRes>
    {
        return rfalNfcbCheckSensbRes( gRfalNfcb.DT.sensbRes, *gRfalNfcb.DT.sensbResLen );
    }
    
    return ret;
}
 800ff20:	bd10      	pop	{r4, pc}
        return RFAL_ERR_RF_COLLISION;
 800ff22:	201d      	movs	r0, #29
 800ff24:	e7fc      	b.n	800ff20 <rfalNfcbPollerGetSlotMarkerStatus+0x2c>
 800ff26:	46c0      	nop			@ (mov r8, r8)
 800ff28:	20002574 	.word	0x20002574

0800ff2c <rfalNfcbPollerStartTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerStartTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
    return rfalNfcbPollerStartCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENS_CMD_ALLB_REQ : RFAL_NFCB_SENS_CMD_SENSB_REQ), RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 800ff2c:	3801      	subs	r0, #1
{
 800ff2e:	0013      	movs	r3, r2
    return rfalNfcbPollerStartCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENS_CMD_ALLB_REQ : RFAL_NFCB_SENS_CMD_SENSB_REQ), RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 800ff30:	4242      	negs	r2, r0
 800ff32:	4150      	adcs	r0, r2
{
 800ff34:	b510      	push	{r4, lr}
    return rfalNfcbPollerStartCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENS_CMD_ALLB_REQ : RFAL_NFCB_SENS_CMD_SENSB_REQ), RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 800ff36:	000a      	movs	r2, r1
 800ff38:	2100      	movs	r1, #0
 800ff3a:	00c0      	lsls	r0, r0, #3
 800ff3c:	f7ff ff34 	bl	800fda8 <rfalNfcbPollerStartCheckPresence>
}
 800ff40:	bd10      	pop	{r4, pc}

0800ff42 <rfalNfcbPollerGetTechnologyDetectionStatus>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerGetTechnologyDetectionStatus( void )
{
 800ff42:	b510      	push	{r4, lr}
    return rfalNfcbPollerGetCheckPresenceStatus();
 800ff44:	f7ff ff68 	bl	800fe18 <rfalNfcbPollerGetCheckPresenceStatus>
}
 800ff48:	bd10      	pop	{r4, pc}
	...

0800ff4c <rfalNfcbPollerStartSlottedCollisionResolution>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerStartSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 800ff4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
    if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 800ff4e:	9f05      	ldr	r7, [sp, #20]
{
 800ff50:	0004      	movs	r4, r0
 800ff52:	9d06      	ldr	r5, [sp, #24]
        (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
    {
        return RFAL_ERR_PARAM;
 800ff54:	2007      	movs	r0, #7
{
 800ff56:	9e07      	ldr	r6, [sp, #28]
    if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 800ff58:	2f00      	cmp	r7, #0
 800ff5a:	d01c      	beq.n	800ff96 <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
 800ff5c:	2d00      	cmp	r5, #0
 800ff5e:	d01a      	beq.n	800ff96 <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
 800ff60:	2e00      	cmp	r6, #0
 800ff62:	d018      	beq.n	800ff96 <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
 800ff64:	2a04      	cmp	r2, #4
 800ff66:	d816      	bhi.n	800ff96 <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
 800ff68:	2b04      	cmp	r3, #4
 800ff6a:	d814      	bhi.n	800ff96 <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
        (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 800ff6c:	2c02      	cmp	r4, #2
 800ff6e:	d101      	bne.n	800ff74 <rfalNfcbPollerStartSlottedCollisionResolution+0x28>
 800ff70:	2a00      	cmp	r2, #0
 800ff72:	d110      	bne.n	800ff96 <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
    }

    (*devCnt)     = 0;
    (*colPending) = false;
 800ff74:	2000      	movs	r0, #0
    platformTimerDestroy( gRfalNfcb.CR.tmr );
    
    /* Store parameters */
    gRfalNfcb.CR.compMode    = compMode;
 800ff76:	4f08      	ldr	r7, [pc, #32]	@ (800ff98 <rfalNfcbPollerStartSlottedCollisionResolution+0x4c>)
    (*colPending) = false;
 800ff78:	7030      	strb	r0, [r6, #0]
    gRfalNfcb.CR.devLimit    = devLimit;
    gRfalNfcb.CR.curSlots    = (uint8_t)initSlots;
    gRfalNfcb.CR.endSlots    = (uint8_t)endSlots;
 800ff7a:	75bb      	strb	r3, [r7, #22]
    gRfalNfcb.CR.nfcbDevList = nfcbDevList;
 800ff7c:	9b05      	ldr	r3, [sp, #20]
    gRfalNfcb.CR.compMode    = compMode;
 800ff7e:	713c      	strb	r4, [r7, #4]
    gRfalNfcb.CR.nfcbDevList = nfcbDevList;
 800ff80:	60bb      	str	r3, [r7, #8]
    (*gRfalNfcb.CR.devCnt)   = 0U;
    gRfalNfcb.CR.curDevCnt   = 0U;
    gRfalNfcb.CR.curSlotNum  = 0U;
    gRfalNfcb.CR.tmr         = RFAL_TIMING_NONE;
    
    gRfalNfcb.CR.state = RFAL_NFCB_CR_SLOTS_TX;
 800ff82:	1c7b      	adds	r3, r7, #1
    gRfalNfcb.CR.devLimit    = devLimit;
 800ff84:	7179      	strb	r1, [r7, #5]
    gRfalNfcb.CR.curSlots    = (uint8_t)initSlots;
 800ff86:	753a      	strb	r2, [r7, #20]
    gRfalNfcb.CR.colPending  = colPending;
 800ff88:	613e      	str	r6, [r7, #16]
    gRfalNfcb.CR.devCnt      = devCnt;
 800ff8a:	60fd      	str	r5, [r7, #12]
    (*gRfalNfcb.CR.devCnt)   = 0U;
 800ff8c:	7028      	strb	r0, [r5, #0]
    gRfalNfcb.CR.curDevCnt   = 0U;
 800ff8e:	75f8      	strb	r0, [r7, #23]
    gRfalNfcb.CR.curSlotNum  = 0U;
 800ff90:	7578      	strb	r0, [r7, #21]
    gRfalNfcb.CR.tmr         = RFAL_TIMING_NONE;
 800ff92:	61f8      	str	r0, [r7, #28]
    gRfalNfcb.CR.state = RFAL_NFCB_CR_SLOTS_TX;
 800ff94:	77d8      	strb	r0, [r3, #31]
    return RFAL_ERR_NONE;
}
 800ff96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff98:	20002574 	.word	0x20002574

0800ff9c <rfalNfcbPollerStartCollisionResolution>:
{
 800ff9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return rfalNfcbPollerStartSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &gRfalNfcb.CR.colPend );
 800ff9e:	4c05      	ldr	r4, [pc, #20]	@ (800ffb4 <rfalNfcbPollerStartCollisionResolution+0x18>)
 800ffa0:	9301      	str	r3, [sp, #4]
 800ffa2:	9200      	str	r2, [sp, #0]
 800ffa4:	2304      	movs	r3, #4
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	9402      	str	r4, [sp, #8]
 800ffaa:	f7ff ffcf 	bl	800ff4c <rfalNfcbPollerStartSlottedCollisionResolution>
}
 800ffae:	b004      	add	sp, #16
 800ffb0:	bd10      	pop	{r4, pc}
 800ffb2:	46c0      	nop			@ (mov r8, r8)
 800ffb4:	2000258c 	.word	0x2000258c

0800ffb8 <rfalNfcbPollerGetCollisionResolutionStatus>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerGetCollisionResolutionStatus( void )
{
 800ffb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ReturnCode      ret;
    rfalNfcbSensCmd cmd;
    
    /* Check if operation is still not complete */
    if( gRfalNfcb.CR.tmr != RFAL_TIMING_NONE )
 800ffba:	4c80      	ldr	r4, [pc, #512]	@ (80101bc <rfalNfcbPollerGetCollisionResolutionStatus+0x204>)
{
 800ffbc:	b085      	sub	sp, #20
    if( gRfalNfcb.CR.tmr != RFAL_TIMING_NONE )
 800ffbe:	69e0      	ldr	r0, [r4, #28]
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	d10a      	bne.n	800ffda <rfalNfcbPollerGetCollisionResolutionStatus+0x22>
        {
            return RFAL_ERR_BUSY;
        }
    }

    switch( gRfalNfcb.CR.state )
 800ffc4:	1c63      	adds	r3, r4, #1
 800ffc6:	7fdb      	ldrb	r3, [r3, #31]
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d02d      	beq.n	8010028 <rfalNfcbPollerGetCollisionResolutionStatus+0x70>
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d100      	bne.n	800ffd2 <rfalNfcbPollerGetCollisionResolutionStatus+0x1a>
 800ffd0:	e0d1      	b.n	8010176 <rfalNfcbPollerGetCollisionResolutionStatus+0x1be>
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d008      	beq.n	800ffe8 <rfalNfcbPollerGetCollisionResolutionStatus+0x30>
                    gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].isSleep = false;
                    
                    if( gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_EMV )
                    {
                        (*gRfalNfcb.CR.devCnt)++;
                        return ret;
 800ffd6:	2000      	movs	r0, #0
 800ffd8:	e004      	b.n	800ffe4 <rfalNfcbPollerGetCollisionResolutionStatus+0x2c>
        if( (!platformTimerIsExpired(gRfalNfcb.CR.tmr)) )
 800ffda:	f7f6 ff63 	bl	8006ea4 <timerIsExpired>
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d1f0      	bne.n	800ffc4 <rfalNfcbPollerGetCollisionResolutionStatus+0xc>
            return RFAL_ERR_BUSY;
 800ffe2:	2002      	movs	r0, #2
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
    }
    
    return RFAL_ERR_NONE;
}
 800ffe4:	b005      	add	sp, #20
 800ffe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( (gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_ISO) && (gRfalNfcb.CR.curSlots == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800ffe8:	7923      	ldrb	r3, [r4, #4]
 800ffea:	2b02      	cmp	r3, #2
 800ffec:	d102      	bne.n	800fff4 <rfalNfcbPollerGetCollisionResolutionStatus+0x3c>
 800ffee:	7d23      	ldrb	r3, [r4, #20]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d011      	beq.n	8010018 <rfalNfcbPollerGetCollisionResolutionStatus+0x60>
                rfalNfcbPollerStartCheckPresence( cmd, (rfalNfcbSlots)gRfalNfcb.CR.curSlots, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbRes, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbResLen );
 800fff4:	220f      	movs	r2, #15
 800fff6:	68e3      	ldr	r3, [r4, #12]
            else if( gRfalNfcb.CR.curSlotNum == 0U )
 800fff8:	7d60      	ldrb	r0, [r4, #21]
                rfalNfcbPollerStartCheckPresence( cmd, (rfalNfcbSlots)gRfalNfcb.CR.curSlots, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbRes, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbResLen );
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	435a      	muls	r2, r3
 800fffe:	68a3      	ldr	r3, [r4, #8]
 8010000:	189b      	adds	r3, r3, r2
 8010002:	1c59      	adds	r1, r3, #1
            else if( gRfalNfcb.CR.curSlotNum == 0U )
 8010004:	2800      	cmp	r0, #0
 8010006:	d10b      	bne.n	8010020 <rfalNfcbPollerGetCollisionResolutionStatus+0x68>
                cmd = ((gRfalNfcb.CR.curSlots == (uint8_t)RFAL_NFCB_SLOT_NUM_1) ? RFAL_NFCB_SENS_CMD_ALLB_REQ : RFAL_NFCB_SENS_CMD_SENSB_REQ );
 8010008:	7d25      	ldrb	r5, [r4, #20]
 801000a:	4268      	negs	r0, r5
 801000c:	4168      	adcs	r0, r5
                rfalNfcbPollerStartCheckPresence( cmd, (rfalNfcbSlots)gRfalNfcb.CR.curSlots, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbRes, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbResLen );
 801000e:	000a      	movs	r2, r1
 8010010:	00c0      	lsls	r0, r0, #3
 8010012:	0029      	movs	r1, r5
 8010014:	f7ff fec8 	bl	800fda8 <rfalNfcbPollerStartCheckPresence>
            gRfalNfcb.CR.state = RFAL_NFCB_CR_SLOTS;
 8010018:	2301      	movs	r3, #1
 801001a:	3401      	adds	r4, #1
 801001c:	77e3      	strb	r3, [r4, #31]
            return RFAL_ERR_BUSY;
 801001e:	e7e0      	b.n	800ffe2 <rfalNfcbPollerGetCollisionResolutionStatus+0x2a>
                rfalNfcbPollerStartSlotMarker( gRfalNfcb.CR.curSlotNum, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbRes, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbResLen );
 8010020:	001a      	movs	r2, r3
 8010022:	f7ff ff41 	bl	800fea8 <rfalNfcbPollerStartSlotMarker>
 8010026:	e7f7      	b.n	8010018 <rfalNfcbPollerGetCollisionResolutionStatus+0x60>
            RFAL_EXIT_ON_BUSY( ret, rfalNfcbPollerGetSlotMarkerStatus() );
 8010028:	f7ff ff64 	bl	800fef4 <rfalNfcbPollerGetSlotMarkerStatus>
 801002c:	9003      	str	r0, [sp, #12]
 801002e:	2802      	cmp	r0, #2
 8010030:	d0d7      	beq.n	800ffe2 <rfalNfcbPollerGetCollisionResolutionStatus+0x2a>
            if( gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_EMV )
 8010032:	7927      	ldrb	r7, [r4, #4]
 8010034:	2f01      	cmp	r7, #1
 8010036:	d122      	bne.n	801007e <rfalNfcbPollerGetCollisionResolutionStatus+0xc6>
                if( ret != RFAL_ERR_NONE )
 8010038:	2800      	cmp	r0, #0
 801003a:	d1d3      	bne.n	800ffe4 <rfalNfcbPollerGetCollisionResolutionStatus+0x2c>
                if( gRfalNfcb.CR.nfcbDevList->sensbResLen == 0U  )
 801003c:	68a3      	ldr	r3, [r4, #8]
                    return RFAL_ERR_FRAMING;
 801003e:	3009      	adds	r0, #9
                if( gRfalNfcb.CR.nfcbDevList->sensbResLen == 0U  )
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d0ce      	beq.n	800ffe4 <rfalNfcbPollerGetCollisionResolutionStatus+0x2c>
                if( (rfalNfcbCheckSensbRes( &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbRes, gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbResLen) == RFAL_ERR_NONE) && (ret == RFAL_ERR_NONE) )
 8010046:	250f      	movs	r5, #15
 8010048:	68a3      	ldr	r3, [r4, #8]
 801004a:	68e6      	ldr	r6, [r4, #12]
 801004c:	9301      	str	r3, [sp, #4]
 801004e:	7833      	ldrb	r3, [r6, #0]
 8010050:	9a01      	ldr	r2, [sp, #4]
 8010052:	436b      	muls	r3, r5
 8010054:	18d2      	adds	r2, r2, r3
 8010056:	9202      	str	r2, [sp, #8]
 8010058:	9a01      	ldr	r2, [sp, #4]
 801005a:	5cd1      	ldrb	r1, [r2, r3]
 801005c:	9b02      	ldr	r3, [sp, #8]
 801005e:	1c58      	adds	r0, r3, #1
 8010060:	f7ff fe58 	bl	800fd14 <rfalNfcbCheckSensbRes>
 8010064:	9b03      	ldr	r3, [sp, #12]
 8010066:	4318      	orrs	r0, r3
 8010068:	b280      	uxth	r0, r0
 801006a:	2800      	cmp	r0, #0
 801006c:	d166      	bne.n	801013c <rfalNfcbPollerGetCollisionResolutionStatus+0x184>
                    gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].isSleep = false;
 801006e:	9b02      	ldr	r3, [sp, #8]
 8010070:	7398      	strb	r0, [r3, #14]
                    if( gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_EMV )
 8010072:	2f01      	cmp	r7, #1
 8010074:	d115      	bne.n	80100a2 <rfalNfcbPollerGetCollisionResolutionStatus+0xea>
                        (*gRfalNfcb.CR.devCnt)++;
 8010076:	7833      	ldrb	r3, [r6, #0]
 8010078:	3301      	adds	r3, #1
 801007a:	7033      	strb	r3, [r6, #0]
                        return ret;
 801007c:	e7ab      	b.n	800ffd6 <rfalNfcbPollerGetCollisionResolutionStatus+0x1e>
            if( ret != RFAL_ERR_TIMEOUT )
 801007e:	9b03      	ldr	r3, [sp, #12]
 8010080:	2b04      	cmp	r3, #4
 8010082:	d1e0      	bne.n	8010046 <rfalNfcbPollerGetCollisionResolutionStatus+0x8e>
            if( (gRfalNfcb.CR.curSlotNum + 1U) < rfalNfcbNI2NumberOfSlots(gRfalNfcb.CR.curSlots)  )
 8010084:	2201      	movs	r2, #1
 8010086:	0014      	movs	r4, r2
 8010088:	4b4c      	ldr	r3, [pc, #304]	@ (80101bc <rfalNfcbPollerGetCollisionResolutionStatus+0x204>)
 801008a:	25ff      	movs	r5, #255	@ 0xff
 801008c:	7d18      	ldrb	r0, [r3, #20]
 801008e:	7d59      	ldrb	r1, [r3, #21]
 8010090:	4084      	lsls	r4, r0
 8010092:	3101      	adds	r1, #1
 8010094:	402c      	ands	r4, r5
 8010096:	42a1      	cmp	r1, r4
 8010098:	d25a      	bcs.n	8010150 <rfalNfcbPollerGetCollisionResolutionStatus+0x198>
                gRfalNfcb.CR.curSlotNum++;
 801009a:	7559      	strb	r1, [r3, #21]
                gRfalNfcb.CR.state = RFAL_NFCB_CR_SLOTS_TX;
 801009c:	189b      	adds	r3, r3, r2
 801009e:	2200      	movs	r2, #0
 80100a0:	e04a      	b.n	8010138 <rfalNfcbPollerGetCollisionResolutionStatus+0x180>
                    else if( gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_ISO )
 80100a2:	2f02      	cmp	r7, #2
 80100a4:	d11e      	bne.n	80100e4 <rfalNfcbPollerGetCollisionResolutionStatus+0x12c>
                        (*gRfalNfcb.CR.devCnt)++;
 80100a6:	7833      	ldrb	r3, [r6, #0]
 80100a8:	3301      	adds	r3, #1
 80100aa:	7033      	strb	r3, [r6, #0]
                        gRfalNfcb.CR.curDevCnt++;
 80100ac:	7de3      	ldrb	r3, [r4, #23]
                        if( (*gRfalNfcb.CR.devCnt >= gRfalNfcb.CR.devLimit) || (gRfalNfcb.CR.curSlotNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 80100ae:	7962      	ldrb	r2, [r4, #5]
                        gRfalNfcb.CR.curDevCnt++;
 80100b0:	3301      	adds	r3, #1
 80100b2:	75e3      	strb	r3, [r4, #23]
                        if( (*gRfalNfcb.CR.devCnt >= gRfalNfcb.CR.devLimit) || (gRfalNfcb.CR.curSlotNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 80100b4:	68e3      	ldr	r3, [r4, #12]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d800      	bhi.n	80100be <rfalNfcbPollerGetCollisionResolutionStatus+0x106>
 80100bc:	e78b      	b.n	800ffd6 <rfalNfcbPollerGetCollisionResolutionStatus+0x1e>
 80100be:	7d62      	ldrb	r2, [r4, #21]
 80100c0:	2a00      	cmp	r2, #0
 80100c2:	d100      	bne.n	80100c6 <rfalNfcbPollerGetCollisionResolutionStatus+0x10e>
 80100c4:	e787      	b.n	800ffd6 <rfalNfcbPollerGetCollisionResolutionStatus+0x1e>
                        rfalNfcbPollerSleep( gRfalNfcb.CR.nfcbDevList[(*gRfalNfcb.CR.devCnt)-1U].sensbRes.nfcid0 );
 80100c6:	436b      	muls	r3, r5
 80100c8:	68a0      	ldr	r0, [r4, #8]
 80100ca:	18c0      	adds	r0, r0, r3
 80100cc:	380d      	subs	r0, #13
 80100ce:	f7ff fec1 	bl	800fe54 <rfalNfcbPollerSleep>
                        gRfalNfcb.CR.nfcbDevList[(*gRfalNfcb.CR.devCnt)-1U].isSleep =  true;
 80100d2:	68e3      	ldr	r3, [r4, #12]
 80100d4:	781a      	ldrb	r2, [r3, #0]
 80100d6:	68a3      	ldr	r3, [r4, #8]
 80100d8:	436a      	muls	r2, r5
 80100da:	189b      	adds	r3, r3, r2
 80100dc:	2201      	movs	r2, #1
 80100de:	3b0f      	subs	r3, #15
 80100e0:	739a      	strb	r2, [r3, #14]
 80100e2:	e7cf      	b.n	8010084 <rfalNfcbPollerGetCollisionResolutionStatus+0xcc>
                    else if( gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_NFC )
 80100e4:	2f00      	cmp	r7, #0
 80100e6:	d1cd      	bne.n	8010084 <rfalNfcbPollerGetCollisionResolutionStatus+0xcc>
                        if( gRfalNfcb.CR.curDevCnt != 0U )
 80100e8:	7de3      	ldrb	r3, [r4, #23]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d012      	beq.n	8010114 <rfalNfcbPollerGetCollisionResolutionStatus+0x15c>
                            rfalNfcbPollerSleepTx( gRfalNfcb.CR.nfcbDevList[(*gRfalNfcb.CR.devCnt) - (uint8_t)1U].sensbRes.nfcid0 );
 80100ee:	7833      	ldrb	r3, [r6, #0]
 80100f0:	9a01      	ldr	r2, [sp, #4]
 80100f2:	436b      	muls	r3, r5
 80100f4:	18d0      	adds	r0, r2, r3
 80100f6:	380d      	subs	r0, #13
 80100f8:	f7ff fe1e 	bl	800fd38 <rfalNfcbPollerSleepTx.isra.0>
                            gRfalNfcb.CR.nfcbDevList[(*gRfalNfcb.CR.devCnt) - (uint8_t)1U].isSleep = true;
 80100fc:	68e3      	ldr	r3, [r4, #12]
                            gRfalNfcb.CR.tmr = platformTimerCreate( (uint16_t)rfalConv1fcToMs(RFAL_NFCB_ACTIVATION_FWT) );
 80100fe:	2011      	movs	r0, #17
                            gRfalNfcb.CR.nfcbDevList[(*gRfalNfcb.CR.devCnt) - (uint8_t)1U].isSleep = true;
 8010100:	781a      	ldrb	r2, [r3, #0]
 8010102:	68a3      	ldr	r3, [r4, #8]
 8010104:	4355      	muls	r5, r2
 8010106:	2201      	movs	r2, #1
 8010108:	195b      	adds	r3, r3, r5
 801010a:	3b0f      	subs	r3, #15
 801010c:	739a      	strb	r2, [r3, #14]
                            gRfalNfcb.CR.tmr = platformTimerCreate( (uint16_t)rfalConv1fcToMs(RFAL_NFCB_ACTIVATION_FWT) );
 801010e:	f7f6 fec3 	bl	8006e98 <timerCalculateTimer>
 8010112:	61e0      	str	r0, [r4, #28]
                        (*gRfalNfcb.CR.devCnt)++;
 8010114:	4b29      	ldr	r3, [pc, #164]	@ (80101bc <rfalNfcbPollerGetCollisionResolutionStatus+0x204>)
 8010116:	68d9      	ldr	r1, [r3, #12]
 8010118:	780a      	ldrb	r2, [r1, #0]
 801011a:	3201      	adds	r2, #1
 801011c:	700a      	strb	r2, [r1, #0]
                        gRfalNfcb.CR.curDevCnt++;
 801011e:	7dda      	ldrb	r2, [r3, #23]
 8010120:	3201      	adds	r2, #1
 8010122:	75da      	strb	r2, [r3, #23]
                        if( (*gRfalNfcb.CR.devCnt >= gRfalNfcb.CR.devLimit) || (gRfalNfcb.CR.curSlots == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8010124:	68da      	ldr	r2, [r3, #12]
 8010126:	7811      	ldrb	r1, [r2, #0]
 8010128:	795a      	ldrb	r2, [r3, #5]
 801012a:	4291      	cmp	r1, r2
 801012c:	d202      	bcs.n	8010134 <rfalNfcbPollerGetCollisionResolutionStatus+0x17c>
 801012e:	7d1a      	ldrb	r2, [r3, #20]
 8010130:	2a00      	cmp	r2, #0
 8010132:	d1a7      	bne.n	8010084 <rfalNfcbPollerGetCollisionResolutionStatus+0xcc>
                            gRfalNfcb.CR.state = RFAL_NFCB_CR_END;
 8010134:	2203      	movs	r2, #3
 8010136:	3301      	adds	r3, #1
                gRfalNfcb.CR.state = RFAL_NFCB_CR_SLEEP;
 8010138:	77da      	strb	r2, [r3, #31]
 801013a:	e752      	b.n	800ffe2 <rfalNfcbPollerGetCollisionResolutionStatus+0x2a>
                    if( (gRfalNfcb.CR.devLimit == 0U) && (gRfalNfcb.CR.curSlotNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 801013c:	7963      	ldrb	r3, [r4, #5]
 801013e:	7d62      	ldrb	r2, [r4, #21]
                        return RFAL_ERR_RF_COLLISION;
 8010140:	201d      	movs	r0, #29
                    if( (gRfalNfcb.CR.devLimit == 0U) && (gRfalNfcb.CR.curSlotNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 8010142:	4313      	orrs	r3, r2
 8010144:	d100      	bne.n	8010148 <rfalNfcbPollerGetCollisionResolutionStatus+0x190>
 8010146:	e74d      	b.n	800ffe4 <rfalNfcbPollerGetCollisionResolutionStatus+0x2c>
                    (*gRfalNfcb.CR.colPending) = true;
 8010148:	2201      	movs	r2, #1
 801014a:	6923      	ldr	r3, [r4, #16]
 801014c:	701a      	strb	r2, [r3, #0]
 801014e:	e799      	b.n	8010084 <rfalNfcbPollerGetCollisionResolutionStatus+0xcc>
                if( !(*gRfalNfcb.CR.colPending) )
 8010150:	691c      	ldr	r4, [r3, #16]
 8010152:	7824      	ldrb	r4, [r4, #0]
 8010154:	2c00      	cmp	r4, #0
 8010156:	d100      	bne.n	801015a <rfalNfcbPollerGetCollisionResolutionStatus+0x1a2>
 8010158:	e73d      	b.n	800ffd6 <rfalNfcbPollerGetCollisionResolutionStatus+0x1e>
                if( gRfalNfcb.CR.curDevCnt == 0U )
 801015a:	7ddc      	ldrb	r4, [r3, #23]
 801015c:	2c00      	cmp	r4, #0
 801015e:	d107      	bne.n	8010170 <rfalNfcbPollerGetCollisionResolutionStatus+0x1b8>
                    if( (gRfalNfcb.CR.curSlotNum + 1U) >= rfalNfcbNI2NumberOfSlots(gRfalNfcb.CR.endSlots) )
 8010160:	7d9c      	ldrb	r4, [r3, #22]
 8010162:	40a2      	lsls	r2, r4
 8010164:	402a      	ands	r2, r5
 8010166:	4291      	cmp	r1, r2
 8010168:	d300      	bcc.n	801016c <rfalNfcbPollerGetCollisionResolutionStatus+0x1b4>
 801016a:	e734      	b.n	800ffd6 <rfalNfcbPollerGetCollisionResolutionStatus+0x1e>
                    gRfalNfcb.CR.curSlots++;
 801016c:	3001      	adds	r0, #1
 801016e:	7518      	strb	r0, [r3, #20]
                gRfalNfcb.CR.state = RFAL_NFCB_CR_SLEEP;
 8010170:	2202      	movs	r2, #2
 8010172:	3301      	adds	r3, #1
 8010174:	e7e0      	b.n	8010138 <rfalNfcbPollerGetCollisionResolutionStatus+0x180>
            if( (gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_NFC) && (gRfalNfcb.CR.curDevCnt != 0U) )
 8010176:	7923      	ldrb	r3, [r4, #4]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d117      	bne.n	80101ac <rfalNfcbPollerGetCollisionResolutionStatus+0x1f4>
 801017c:	7de3      	ldrb	r3, [r4, #23]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d014      	beq.n	80101ac <rfalNfcbPollerGetCollisionResolutionStatus+0x1f4>
                rfalNfcbPollerSleepTx( gRfalNfcb.CR.nfcbDevList[((*gRfalNfcb.CR.devCnt) - (uint8_t)1U)].sensbRes.nfcid0 );
 8010182:	250f      	movs	r5, #15
 8010184:	68e3      	ldr	r3, [r4, #12]
 8010186:	68a0      	ldr	r0, [r4, #8]
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	436b      	muls	r3, r5
 801018c:	18c0      	adds	r0, r0, r3
 801018e:	380d      	subs	r0, #13
 8010190:	f7ff fdd2 	bl	800fd38 <rfalNfcbPollerSleepTx.isra.0>
                gRfalNfcb.CR.nfcbDevList[((*gRfalNfcb.CR.devCnt) - (uint8_t)1U)].isSleep = true;
 8010194:	68e3      	ldr	r3, [r4, #12]
                gRfalNfcb.CR.tmr = platformTimerCreate( (uint16_t) rfalConv1fcToMs(RFAL_NFCB_ACTIVATION_FWT) );
 8010196:	2011      	movs	r0, #17
                gRfalNfcb.CR.nfcbDevList[((*gRfalNfcb.CR.devCnt) - (uint8_t)1U)].isSleep = true;
 8010198:	781a      	ldrb	r2, [r3, #0]
 801019a:	68a3      	ldr	r3, [r4, #8]
 801019c:	4355      	muls	r5, r2
 801019e:	2201      	movs	r2, #1
 80101a0:	195b      	adds	r3, r3, r5
 80101a2:	3b0f      	subs	r3, #15
 80101a4:	739a      	strb	r2, [r3, #14]
                gRfalNfcb.CR.tmr = platformTimerCreate( (uint16_t) rfalConv1fcToMs(RFAL_NFCB_ACTIVATION_FWT) );
 80101a6:	f7f6 fe77 	bl	8006e98 <timerCalculateTimer>
 80101aa:	61e0      	str	r0, [r4, #28]
            gRfalNfcb.CR.curSlotNum    = 0U;
 80101ac:	2300      	movs	r3, #0
            (*gRfalNfcb.CR.colPending) = false;
 80101ae:	6922      	ldr	r2, [r4, #16]
            gRfalNfcb.CR.curSlotNum    = 0U;
 80101b0:	7563      	strb	r3, [r4, #21]
            gRfalNfcb.CR.curDevCnt     = 0U;
 80101b2:	75e3      	strb	r3, [r4, #23]
            (*gRfalNfcb.CR.colPending) = false;
 80101b4:	7013      	strb	r3, [r2, #0]
            gRfalNfcb.CR.state = RFAL_NFCB_CR_SLOTS_TX;
 80101b6:	3401      	adds	r4, #1
 80101b8:	e730      	b.n	801001c <rfalNfcbPollerGetCollisionResolutionStatus+0x64>
 80101ba:	46c0      	nop			@ (mov r8, r8)
 80101bc:	20002574 	.word	0x20002574

080101c0 <rfalNfcbTR2ToFDT>:
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[4] = { 1792, 3328, 5376, 9472 };
 80101c0:	4b05      	ldr	r3, [pc, #20]	@ (80101d8 <rfalNfcbTR2ToFDT+0x18>)
{
 80101c2:	b082      	sub	sp, #8
    const uint16_t rfalNfcbTr2Table[4] = { 1792, 3328, 5376, 9472 };
 80101c4:	9300      	str	r3, [sp, #0]
 80101c6:	4b05      	ldr	r3, [pc, #20]	@ (80101dc <rfalNfcbTR2ToFDT+0x1c>)
 80101c8:	9301      	str	r3, [sp, #4]
    /*******************************************************************************/

    return (uint32_t)rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 80101ca:	2303      	movs	r3, #3
 80101cc:	4018      	ands	r0, r3
 80101ce:	466b      	mov	r3, sp
 80101d0:	0040      	lsls	r0, r0, #1
 80101d2:	5ac0      	ldrh	r0, [r0, r3]
}
 80101d4:	b002      	add	sp, #8
 80101d6:	4770      	bx	lr
 80101d8:	0d000700 	.word	0x0d000700
 80101dc:	25001500 	.word	0x25001500

080101e0 <rfalNfcfComputeValidSENF.constprop.0>:
* LOCAL VARIABLES
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
 80101e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101e2:	0007      	movs	r7, r0
 80101e4:	000c      	movs	r4, r1
 80101e6:	b08b      	sub	sp, #44	@ 0x2c
 80101e8:	9203      	str	r2, [sp, #12]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gNfcf.CR.greedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 80101ea:	4e29      	ldr	r6, [pc, #164]	@ (8010290 <rfalNfcfComputeValidSENF.constprop.0+0xb0>)
 80101ec:	7831      	ldrb	r1, [r6, #0]
 80101ee:	2900      	cmp	r1, #0
 80101f0:	d003      	beq.n	80101fa <rfalNfcfComputeValidSENF.constprop.0+0x1a>
 80101f2:	7823      	ldrb	r3, [r4, #0]
 80101f4:	9a03      	ldr	r2, [sp, #12]
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d301      	bcc.n	80101fe <rfalNfcfComputeValidSENF.constprop.0+0x1e>
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
                
        (*curDevIdx)++;
    }
}
 80101fa:	b00b      	add	sp, #44	@ 0x2c
 80101fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        RFAL_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gNfcf.CR.greedyF.POLL_F[gNfcf.CR.greedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 80101fe:	2314      	movs	r3, #20
        gNfcf.CR.greedyF.pollFound--;
 8010200:	3901      	subs	r1, #1
 8010202:	b2c9      	uxtb	r1, r1
 8010204:	7031      	strb	r1, [r6, #0]
        RFAL_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gNfcf.CR.greedyF.POLL_F[gNfcf.CR.greedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 8010206:	4359      	muls	r1, r3
 8010208:	1871      	adds	r1, r6, r1
 801020a:	001a      	movs	r2, r3
 801020c:	3102      	adds	r1, #2
 801020e:	a805      	add	r0, sp, #20
 8010210:	f003 f884 	bl	801331c <memcpy>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 8010214:	2214      	movs	r2, #20
 8010216:	7823      	ldrb	r3, [r4, #0]
 8010218:	1cbd      	adds	r5, r7, #2
 801021a:	435a      	muls	r2, r3
 801021c:	18ab      	adds	r3, r5, r2
 801021e:	9201      	str	r2, [sp, #4]
 8010220:	9302      	str	r3, [sp, #8]
 8010222:	9b02      	ldr	r3, [sp, #8]
 8010224:	429d      	cmp	r5, r3
 8010226:	d128      	bne.n	801027a <rfalNfcfComputeValidSENF.constprop.0+0x9a>
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 8010228:	ab04      	add	r3, sp, #16
 801022a:	791b      	ldrb	r3, [r3, #4]
 801022c:	001a      	movs	r2, r3
 801022e:	3a12      	subs	r2, #18
 8010230:	2a02      	cmp	r2, #2
 8010232:	d8da      	bhi.n	80101ea <rfalNfcfComputeValidSENF.constprop.0+0xa>
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 8010234:	aa04      	add	r2, sp, #16
 8010236:	7952      	ldrb	r2, [r2, #5]
 8010238:	2a01      	cmp	r2, #1
 801023a:	d1d6      	bne.n	80101ea <rfalNfcfComputeValidSENF.constprop.0+0xa>
            RFAL_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 801023c:	2514      	movs	r5, #20
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 801023e:	9a01      	ldr	r2, [sp, #4]
 8010240:	3b01      	subs	r3, #1
 8010242:	54bb      	strb	r3, [r7, r2]
            RFAL_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 8010244:	7823      	ldrb	r3, [r4, #0]
 8010246:	436b      	muls	r3, r5
 8010248:	18fb      	adds	r3, r7, r3
 801024a:	781a      	ldrb	r2, [r3, #0]
 801024c:	1c58      	adds	r0, r3, #1
 801024e:	ab04      	add	r3, sp, #16
 8010250:	1d59      	adds	r1, r3, #5
 8010252:	f003 f863 	bl	801331c <memcpy>
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 8010256:	7822      	ldrb	r2, [r4, #0]
 8010258:	2300      	movs	r3, #0
 801025a:	436a      	muls	r2, r5
 801025c:	18ba      	adds	r2, r7, r2
 801025e:	7891      	ldrb	r1, [r2, #2]
 8010260:	2901      	cmp	r1, #1
 8010262:	d103      	bne.n	801026c <rfalNfcfComputeValidSENF.constprop.0+0x8c>
 8010264:	78d3      	ldrb	r3, [r2, #3]
 8010266:	3bfe      	subs	r3, #254	@ 0xfe
 8010268:	425a      	negs	r2, r3
 801026a:	4153      	adcs	r3, r2
 801026c:	224e      	movs	r2, #78	@ 0x4e
 801026e:	32ff      	adds	r2, #255	@ 0xff
 8010270:	54b3      	strb	r3, [r6, r2]
        (*curDevIdx)++;
 8010272:	7823      	ldrb	r3, [r4, #0]
 8010274:	3301      	adds	r3, #1
 8010276:	7023      	strb	r3, [r4, #0]
 8010278:	e7b7      	b.n	80101ea <rfalNfcfComputeValidSENF.constprop.0+0xa>
            if( RFAL_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 801027a:	ab04      	add	r3, sp, #16
 801027c:	0029      	movs	r1, r5
 801027e:	2208      	movs	r2, #8
 8010280:	1d98      	adds	r0, r3, #6
 8010282:	f002 fff7 	bl	8013274 <memcmp>
 8010286:	3514      	adds	r5, #20
 8010288:	2800      	cmp	r0, #0
 801028a:	d1ca      	bne.n	8010222 <rfalNfcfComputeValidSENF.constprop.0+0x42>
 801028c:	e7ad      	b.n	80101ea <rfalNfcfComputeValidSENF.constprop.0+0xa>
 801028e:	46c0      	nop			@ (mov r8, r8)
 8010290:	200025a4 	.word	0x200025a4

08010294 <rfalNfcfPollerInitialize>:
/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 8010294:	1e43      	subs	r3, r0, #1
{
 8010296:	b510      	push	{r4, lr}
 8010298:	0001      	movs	r1, r0
    {
        return RFAL_ERR_PARAM;
 801029a:	2407      	movs	r4, #7
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 801029c:	2b01      	cmp	r3, #1
 801029e:	d811      	bhi.n	80102c4 <rfalNfcfPollerInitialize+0x30>
    }
    
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 80102a0:	0002      	movs	r2, r0
 80102a2:	2006      	movs	r0, #6
 80102a4:	f7f3 ffe2 	bl	800426c <rfalSetMode>
 80102a8:	1e04      	subs	r4, r0, #0
 80102aa:	d10b      	bne.n	80102c4 <rfalNfcfPollerInitialize+0x30>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 80102ac:	f7f4 f8e8 	bl	8004480 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 80102b0:	4805      	ldr	r0, [pc, #20]	@ (80102c8 <rfalNfcfPollerInitialize+0x34>)
 80102b2:	f7f4 f917 	bl	80044e4 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 80102b6:	20a7      	movs	r0, #167	@ 0xa7
 80102b8:	0100      	lsls	r0, r0, #4
 80102ba:	f7f4 f909 	bl	80044d0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 80102be:	4803      	ldr	r0, [pc, #12]	@ (80102cc <rfalNfcfPollerInitialize+0x38>)
 80102c0:	f7f4 f8f4 	bl	80044ac <rfalSetFDTPoll>
    
    return RFAL_ERR_NONE;
}
 80102c4:	0020      	movs	r0, r4
 80102c6:	bd10      	pop	{r4, pc}
 80102c8:	00042360 	.word	0x00042360
 80102cc:	00001a90 	.word	0x00001a90

080102d0 <rfalNfcfPollerStartCheckPresence>:
    return ret;
}

/*******************************************************************************/
ReturnCode rfalNfcfPollerStartCheckPresence( void )
{
 80102d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    gNfcf.CR.greedyF.pollFound     = 0;
 80102d2:	2200      	movs	r2, #0
 80102d4:	4906      	ldr	r1, [pc, #24]	@ (80102f0 <rfalNfcfPollerStartCheckPresence+0x20>)
    gNfcf.CR.greedyF.pollCollision = 0;
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalStartFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gNfcf.CR.greedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gNfcf.CR.greedyF.pollFound, &gNfcf.CR.greedyF.pollCollision );
 80102d6:	4807      	ldr	r0, [pc, #28]	@ (80102f4 <rfalNfcfPollerStartCheckPresence+0x24>)
    gNfcf.CR.greedyF.pollFound     = 0;
 80102d8:	800a      	strh	r2, [r1, #0]
    return rfalStartFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gNfcf.CR.greedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gNfcf.CR.greedyF.pollFound, &gNfcf.CR.greedyF.pollCollision );
 80102da:	9101      	str	r1, [sp, #4]
 80102dc:	2104      	movs	r1, #4
 80102de:	9002      	str	r0, [sp, #8]
 80102e0:	9100      	str	r1, [sp, #0]
 80102e2:	4b05      	ldr	r3, [pc, #20]	@ (80102f8 <rfalNfcfPollerStartCheckPresence+0x28>)
 80102e4:	4905      	ldr	r1, [pc, #20]	@ (80102fc <rfalNfcfPollerStartCheckPresence+0x2c>)
 80102e6:	2003      	movs	r0, #3
 80102e8:	f7f5 fc6c 	bl	8005bc4 <rfalStartFeliCaPoll>
}
 80102ec:	b005      	add	sp, #20
 80102ee:	bd00      	pop	{pc}
 80102f0:	200025a4 	.word	0x200025a4
 80102f4:	200025a5 	.word	0x200025a5
 80102f8:	200025a6 	.word	0x200025a6
 80102fc:	0000ffff 	.word	0x0000ffff

08010300 <rfalNfcfPollerCheckPresence>:
{
 8010300:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( ret, rfalNfcfPollerStartCheckPresence() );
 8010302:	f7ff ffe5 	bl	80102d0 <rfalNfcfPollerStartCheckPresence>
 8010306:	1e04      	subs	r4, r0, #0
 8010308:	d106      	bne.n	8010318 <rfalNfcfPollerCheckPresence+0x18>

/*******************************************************************************/
ReturnCode rfalNfcfPollerGetCheckPresenceStatus( void )
{
   return rfalGetFeliCaPollStatus();
 801030a:	f7f4 fac3 	bl	8004894 <rfalGetFeliCaPollStatus>
 801030e:	0004      	movs	r4, r0
    rfalRunBlocking( ret, rfalNfcfPollerGetCheckPresenceStatus() );
 8010310:	f7f4 fdd4 	bl	8004ebc <rfalWorker>
 8010314:	2c02      	cmp	r4, #2
 8010316:	d0f8      	beq.n	801030a <rfalNfcfPollerCheckPresence+0xa>
}
 8010318:	0020      	movs	r0, r4
 801031a:	bd10      	pop	{r4, pc}

0801031c <rfalNfcfPollerGetCheckPresenceStatus>:
{
 801031c:	b510      	push	{r4, lr}
   return rfalGetFeliCaPollStatus();
 801031e:	f7f4 fab9 	bl	8004894 <rfalGetFeliCaPollStatus>
}
 8010322:	bd10      	pop	{r4, pc}

08010324 <rfalNfcfPollerStartCollisionResolution>:
}


/*******************************************************************************/
ReturnCode rfalNfcfPollerStartCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 8010324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010326:	0007      	movs	r7, r0
 8010328:	000d      	movs	r5, r1
 801032a:	0016      	movs	r6, r2
 801032c:	001c      	movs	r4, r3
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
    {
        return RFAL_ERR_PARAM;
 801032e:	2007      	movs	r0, #7
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 8010330:	2a00      	cmp	r2, #0
 8010332:	d018      	beq.n	8010366 <rfalNfcfPollerStartCollisionResolution+0x42>
 8010334:	2b00      	cmp	r3, #0
 8010336:	d016      	beq.n	8010366 <rfalNfcfPollerStartCollisionResolution+0x42>
    }
            
    *devCnt      = 0;
 8010338:	2300      	movs	r3, #0
    /* ACTIVITY 2.1 - 9.3.6.2 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &gNfcf.CR.nfcDepFound );
 801033a:	2204      	movs	r2, #4
    *devCnt      = 0;
 801033c:	7023      	strb	r3, [r4, #0]
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &gNfcf.CR.nfcDepFound );
 801033e:	4299      	cmp	r1, r3
 8010340:	d000      	beq.n	8010344 <rfalNfcfPollerStartCollisionResolution+0x20>
 8010342:	000a      	movs	r2, r1
 8010344:	0021      	movs	r1, r4
 8010346:	0030      	movs	r0, r6
 8010348:	f7ff ff4a 	bl	80101e0 <rfalNfcfComputeValidSENF.constprop.0>
    
    /* Store context */
    gNfcf.CR.nfcfDevList = nfcfDevList;
 801034c:	4a06      	ldr	r2, [pc, #24]	@ (8010368 <rfalNfcfPollerStartCollisionResolution+0x44>)
    gNfcf.CR.compMode    = compMode;
 801034e:	2144      	movs	r1, #68	@ 0x44
    gNfcf.CR.nfcfDevList = nfcfDevList;
 8010350:	6496      	str	r6, [r2, #72]	@ 0x48
    gNfcf.CR.devLimit    = devLimit;
    gNfcf.CR.devCnt      = devCnt;
 8010352:	64d4      	str	r4, [r2, #76]	@ 0x4c
    gNfcf.CR.state       = RFAL_NFCF_CR_POLL;
 8010354:	22a7      	movs	r2, #167	@ 0xa7
 8010356:	2000      	movs	r0, #0
    gNfcf.CR.nfcfDevList = nfcfDevList;
 8010358:	4b04      	ldr	r3, [pc, #16]	@ (801036c <rfalNfcfPollerStartCollisionResolution+0x48>)
    gNfcf.CR.compMode    = compMode;
 801035a:	31ff      	adds	r1, #255	@ 0xff
 801035c:	545f      	strb	r7, [r3, r1]
    gNfcf.CR.state       = RFAL_NFCF_CR_POLL;
 801035e:	0052      	lsls	r2, r2, #1
    gNfcf.CR.devLimit    = devLimit;
 8010360:	3901      	subs	r1, #1
 8010362:	545d      	strb	r5, [r3, r1]
    gNfcf.CR.state       = RFAL_NFCF_CR_POLL;
 8010364:	5498      	strb	r0, [r3, r2]
    
    return RFAL_ERR_NONE;
}
 8010366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010368:	200026a0 	.word	0x200026a0
 801036c:	200025a4 	.word	0x200025a4

08010370 <rfalNfcfPollerGetCollisionResolutionStatus>:
/*******************************************************************************/
ReturnCode rfalNfcfPollerGetCollisionResolutionStatus( void )
{
    ReturnCode  ret;
    
    switch( gNfcf.CR.state )
 8010370:	23a7      	movs	r3, #167	@ 0xa7
{
 8010372:	b530      	push	{r4, r5, lr}
    switch( gNfcf.CR.state )
 8010374:	4c28      	ldr	r4, [pc, #160]	@ (8010418 <rfalNfcfPollerGetCollisionResolutionStatus+0xa8>)
 8010376:	005b      	lsls	r3, r3, #1
 8010378:	5ce3      	ldrb	r3, [r4, r3]
{
 801037a:	b085      	sub	sp, #20
    switch( gNfcf.CR.state )
 801037c:	2b01      	cmp	r3, #1
 801037e:	d029      	beq.n	80103d4 <rfalNfcfPollerGetCollisionResolutionStatus+0x64>
 8010380:	2202      	movs	r2, #2
 8010382:	0019      	movs	r1, r3
 8010384:	4391      	bics	r1, r2
 8010386:	d10a      	bne.n	801039e <rfalNfcfPollerGetCollisionResolutionStatus+0x2e>
        /*******************************************************************************/
        case RFAL_NFCF_CR_POLL:
        case RFAL_NFCF_CR_POLL_SC:
        
            
            if( gNfcf.CR.state == RFAL_NFCF_CR_POLL  )
 8010388:	2b00      	cmp	r3, #0
 801038a:	d10c      	bne.n	80103a6 <rfalNfcfPollerGetCollisionResolutionStatus+0x36>
            {
                /*******************************************************************************/
                /* Activity 2.1  9.3.6.3  - Symbol 2 Check if devices found are lower than the limit */
                if( *gNfcf.CR.devCnt >= gNfcf.CR.devLimit )
 801038c:	0022      	movs	r2, r4
 801038e:	21a1      	movs	r1, #161	@ 0xa1
 8010390:	32fc      	adds	r2, #252	@ 0xfc
 8010392:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8010394:	0049      	lsls	r1, r1, #1
 8010396:	7810      	ldrb	r0, [r2, #0]
 8010398:	5c61      	ldrb	r1, [r4, r1]
 801039a:	4288      	cmp	r0, r1
 801039c:	d302      	bcc.n	80103a4 <rfalNfcfPollerGetCollisionResolutionStatus+0x34>
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
        
    }
    
    return RFAL_ERR_NONE;
 801039e:	2000      	movs	r0, #0
    
}
 80103a0:	b005      	add	sp, #20
 80103a2:	bd30      	pop	{r4, r5, pc}
                *gNfcf.CR.devCnt = 0;
 80103a4:	7013      	strb	r3, [r2, #0]
            RFAL_EXIT_ON_ERR( ret, rfalStartFeliCaPoll( RFAL_FELICA_16_SLOTS, 
 80103a6:	25a7      	movs	r5, #167	@ 0xa7
 80103a8:	006d      	lsls	r5, r5, #1
 80103aa:	5d62      	ldrb	r2, [r4, r5]
 80103ac:	200f      	movs	r0, #15
 80103ae:	3a02      	subs	r2, #2
 80103b0:	4251      	negs	r1, r2
 80103b2:	414a      	adcs	r2, r1
 80103b4:	4919      	ldr	r1, [pc, #100]	@ (801041c <rfalNfcfPollerGetCollisionResolutionStatus+0xac>)
 80103b6:	4b1a      	ldr	r3, [pc, #104]	@ (8010420 <rfalNfcfPollerGetCollisionResolutionStatus+0xb0>)
 80103b8:	9102      	str	r1, [sp, #8]
 80103ba:	2110      	movs	r1, #16
 80103bc:	b2d2      	uxtb	r2, r2
 80103be:	9100      	str	r1, [sp, #0]
 80103c0:	9401      	str	r4, [sp, #4]
 80103c2:	4918      	ldr	r1, [pc, #96]	@ (8010424 <rfalNfcfPollerGetCollisionResolutionStatus+0xb4>)
 80103c4:	f7f5 fbfe 	bl	8005bc4 <rfalStartFeliCaPoll>
 80103c8:	2800      	cmp	r0, #0
 80103ca:	d1e9      	bne.n	80103a0 <rfalNfcfPollerGetCollisionResolutionStatus+0x30>
            gNfcf.CR.state = RFAL_NFCF_CR_PARSE;
 80103cc:	2301      	movs	r3, #1
 80103ce:	5563      	strb	r3, [r4, r5]
            return RFAL_ERR_BUSY;
 80103d0:	2002      	movs	r0, #2
 80103d2:	e7e5      	b.n	80103a0 <rfalNfcfPollerGetCollisionResolutionStatus+0x30>
            RFAL_EXIT_ON_BUSY( ret, rfalGetFeliCaPollStatus() );
 80103d4:	f7f4 fa5e 	bl	8004894 <rfalGetFeliCaPollStatus>
 80103d8:	2802      	cmp	r0, #2
 80103da:	d0f9      	beq.n	80103d0 <rfalNfcfPollerGetCollisionResolutionStatus+0x60>
            if( ret == RFAL_ERR_NONE )
 80103dc:	2800      	cmp	r0, #0
 80103de:	d108      	bne.n	80103f2 <rfalNfcfPollerGetCollisionResolutionStatus+0x82>
                rfalNfcfComputeValidSENF( gNfcf.CR.nfcfDevList, gNfcf.CR.devCnt, gNfcf.CR.devLimit, false, &gNfcf.CR.nfcDepFound );
 80103e0:	23a1      	movs	r3, #161	@ 0xa1
 80103e2:	005b      	lsls	r3, r3, #1
 80103e4:	5ce2      	ldrb	r2, [r4, r3]
 80103e6:	0023      	movs	r3, r4
 80103e8:	33fc      	adds	r3, #252	@ 0xfc
 80103ea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80103ec:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80103ee:	f7ff fef7 	bl	80101e0 <rfalNfcfComputeValidSENF.constprop.0>
            if( (gNfcf.CR.nfcDepFound) && (gNfcf.CR.compMode == RFAL_COMPLIANCE_MODE_NFC) )
 80103f2:	234e      	movs	r3, #78	@ 0x4e
 80103f4:	33ff      	adds	r3, #255	@ 0xff
 80103f6:	5ce3      	ldrb	r3, [r4, r3]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d0d0      	beq.n	801039e <rfalNfcfPollerGetCollisionResolutionStatus+0x2e>
 80103fc:	2344      	movs	r3, #68	@ 0x44
 80103fe:	33ff      	adds	r3, #255	@ 0xff
 8010400:	5ce2      	ldrb	r2, [r4, r3]
 8010402:	2a00      	cmp	r2, #0
 8010404:	d1cb      	bne.n	801039e <rfalNfcfPollerGetCollisionResolutionStatus+0x2e>
                gNfcf.CR.state = RFAL_NFCF_CR_POLL_SC;
 8010406:	2102      	movs	r1, #2
 8010408:	324f      	adds	r2, #79	@ 0x4f
 801040a:	32ff      	adds	r2, #255	@ 0xff
 801040c:	54a1      	strb	r1, [r4, r2]
                gNfcf.CR.compMode = RFAL_COMPLIANCE_MODE_EMV; 
 801040e:	3a4e      	subs	r2, #78	@ 0x4e
 8010410:	3aff      	subs	r2, #255	@ 0xff
 8010412:	54e2      	strb	r2, [r4, r3]
                return RFAL_ERR_BUSY;
 8010414:	e7dc      	b.n	80103d0 <rfalNfcfPollerGetCollisionResolutionStatus+0x60>
 8010416:	46c0      	nop			@ (mov r8, r8)
 8010418:	200025a4 	.word	0x200025a4
 801041c:	200025a5 	.word	0x200025a5
 8010420:	200025a6 	.word	0x200025a6
 8010424:	0000ffff 	.word	0x0000ffff

08010428 <rfalNfcfPollerCollisionResolution>:
{
 8010428:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( ret, rfalNfcfPollerStartCollisionResolution( compMode, devLimit, nfcfDevList, devCnt ) );
 801042a:	f7ff ff7b 	bl	8010324 <rfalNfcfPollerStartCollisionResolution>
 801042e:	1e04      	subs	r4, r0, #0
 8010430:	d106      	bne.n	8010440 <rfalNfcfPollerCollisionResolution+0x18>
    rfalRunBlocking( ret, rfalNfcfPollerGetCollisionResolutionStatus() );
 8010432:	f7ff ff9d 	bl	8010370 <rfalNfcfPollerGetCollisionResolutionStatus>
 8010436:	0004      	movs	r4, r0
 8010438:	f7f4 fd40 	bl	8004ebc <rfalWorker>
 801043c:	2c02      	cmp	r4, #2
 801043e:	d0f8      	beq.n	8010432 <rfalNfcfPollerCollisionResolution+0xa>
}
 8010440:	0020      	movs	r0, r4
 8010442:	bd10      	pop	{r4, pc}

08010444 <rfalNfcfPollerCheck>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheck( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvdLen )
{
 8010444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010446:	b09f      	sub	sp, #124	@ 0x7c
 8010448:	000f      	movs	r7, r1
 801044a:	0016      	movs	r6, r2
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECK_RES_MIN_LEN))                      )
    {
        return RFAL_ERR_PARAM;
 801044c:	2407      	movs	r4, #7
{
 801044e:	9006      	str	r0, [sp, #24]
 8010450:	9307      	str	r3, [sp, #28]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 8010452:	2800      	cmp	r0, #0
 8010454:	d06f      	beq.n	8010536 <rfalNfcfPollerCheck+0xf2>
 8010456:	2a00      	cmp	r2, #0
 8010458:	d06d      	beq.n	8010536 <rfalNfcfPollerCheck+0xf2>
 801045a:	2900      	cmp	r1, #0
 801045c:	d06b      	beq.n	8010536 <rfalNfcfPollerCheck+0xf2>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 801045e:	7a0b      	ldrb	r3, [r1, #8]
 8010460:	9305      	str	r3, [sp, #20]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 8010462:	3b01      	subs	r3, #1
 8010464:	2b0e      	cmp	r3, #14
 8010466:	d866      	bhi.n	8010536 <rfalNfcfPollerCheck+0xf2>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 8010468:	780d      	ldrb	r5, [r1, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 801046a:	1e6b      	subs	r3, r5, #1
 801046c:	2b0e      	cmp	r3, #14
 801046e:	d862      	bhi.n	8010536 <rfalNfcfPollerCheck+0xf2>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 8010470:	9b07      	ldr	r3, [sp, #28]
 8010472:	2b0b      	cmp	r3, #11
 8010474:	d95f      	bls.n	8010536 <rfalNfcfPollerCheck+0xf2>
    msgIt = 0;
    
    /*******************************************************************************/
    /* Compose CHECK command/request                                               */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 8010476:	2306      	movs	r3, #6
    
    RFAL_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 8010478:	0001      	movs	r1, r0
 801047a:	2011      	movs	r0, #17
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 801047c:	ac08      	add	r4, sp, #32
 801047e:	7023      	strb	r3, [r4, #0]
    RFAL_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 8010480:	ab04      	add	r3, sp, #16
 8010482:	2208      	movs	r2, #8
 8010484:	18c0      	adds	r0, r0, r3
 8010486:	f002 ff49 	bl	801331c <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	006a      	lsls	r2, r5, #1
 801048e:	7265      	strb	r5, [r4, #9]
    for( i = 0; i < servBlock->numServ; i++)
 8010490:	18d2      	adds	r2, r2, r3
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8010492:	8819      	ldrh	r1, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 8010494:	3402      	adds	r4, #2
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 8010496:	7221      	strb	r1, [r4, #8]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 8010498:	8819      	ldrh	r1, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 801049a:	3302      	adds	r3, #2
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 801049c:	0a09      	lsrs	r1, r1, #8
 801049e:	7261      	strb	r1, [r4, #9]
    for( i = 0; i < servBlock->numServ; i++)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d1f6      	bne.n	8010492 <rfalNfcfPollerCheck+0x4e>
 80104a4:	3504      	adds	r5, #4
 80104a6:	006d      	lsls	r5, r5, #1
 80104a8:	b2ed      	uxtb	r5, r5
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 80104aa:	9b05      	ldr	r3, [sp, #20]
 80104ac:	1ce9      	adds	r1, r5, #3
 80104ae:	3502      	adds	r5, #2
 80104b0:	9a05      	ldr	r2, [sp, #20]
 80104b2:	a808      	add	r0, sp, #32
 80104b4:	b2ed      	uxtb	r5, r5
 80104b6:	5543      	strb	r3, [r0, r5]
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	0092      	lsls	r2, r2, #2
 80104bc:	18d2      	adds	r2, r2, r3
 80104be:	4694      	mov	ip, r2
 80104c0:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 80104c2:	781d      	ldrb	r5, [r3, #0]
 80104c4:	1c4c      	adds	r4, r1, #1
 80104c6:	5445      	strb	r5, [r0, r1]
        if( (servBlock->blockList[i].conf & RFAL_NFCF_BLOCKLISTELEM_LEN_BIT) != 0U )      /* Check if 2 or 3 byte block list element       */
 80104c8:	885f      	ldrh	r7, [r3, #2]
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80104ca:	b2e4      	uxtb	r4, r4
 80104cc:	1c8a      	adds	r2, r1, #2
        if( (servBlock->blockList[i].conf & RFAL_NFCF_BLOCKLISTELEM_LEN_BIT) != 0U )      /* Check if 2 or 3 byte block list element       */
 80104ce:	b26d      	sxtb	r5, r5
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80104d0:	b2d2      	uxtb	r2, r2
 80104d2:	5507      	strb	r7, [r0, r4]
        if( (servBlock->blockList[i].conf & RFAL_NFCF_BLOCKLISTELEM_LEN_BIT) != 0U )      /* Check if 2 or 3 byte block list element       */
 80104d4:	2d00      	cmp	r5, #0
 80104d6:	da31      	bge.n	801053c <rfalNfcfPollerCheck+0xf8>
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 80104d8:	0011      	movs	r1, r2
    for( i = 0; i < servBlock->numBlock; i++)
 80104da:	3304      	adds	r3, #4
 80104dc:	4563      	cmp	r3, ip
 80104de:	d1f0      	bne.n	80104c2 <rfalNfcfPollerCheck+0x7e>
        }
    }
    
    /*******************************************************************************/
    /* Transceive CHECK command/request                                            */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 80104e0:	4b1b      	ldr	r3, [pc, #108]	@ (8010550 <rfalNfcfPollerCheck+0x10c>)
 80104e2:	0032      	movs	r2, r6
 80104e4:	9302      	str	r3, [sp, #8]
 80104e6:	2300      	movs	r3, #0
 80104e8:	9301      	str	r3, [sp, #4]
 80104ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	9b07      	ldr	r3, [sp, #28]
 80104f0:	f7f5 fc2a 	bl	8005d48 <rfalTransceiveBlockingTxRx>
 80104f4:	1e04      	subs	r4, r0, #0
    
    if( ret == RFAL_ERR_NONE )
 80104f6:	d11e      	bne.n	8010536 <rfalNfcfPollerCheck+0xf2>
    {
        /* Skip LEN byte */
        checkRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
       
        /* Check NFCID and response length    T3T v1.0   5.4.2.3 */
        if( (RFAL_BYTECMP( nfcid2, &checkRes[RFAL_NFCF_CMD_LEN], RFAL_NFCF_NFCID2_LEN ) != 0) || 
 80104f8:	2208      	movs	r2, #8
 80104fa:	9806      	ldr	r0, [sp, #24]
 80104fc:	1cb1      	adds	r1, r6, #2
 80104fe:	f002 feb9 	bl	8013274 <memcmp>
 8010502:	2800      	cmp	r0, #0
 8010504:	d120      	bne.n	8010548 <rfalNfcfPollerCheck+0x104>
            (*rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS))            )
 8010506:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010508:	881a      	ldrh	r2, [r3, #0]
        if( (RFAL_BYTECMP( nfcid2, &checkRes[RFAL_NFCF_CMD_LEN], RFAL_NFCF_NFCID2_LEN ) != 0) || 
 801050a:	2a0a      	cmp	r2, #10
 801050c:	d91c      	bls.n	8010548 <rfalNfcfPollerCheck+0x104>
        {
            ret = RFAL_ERR_PROTO;
        }
        /* Check for a valid response */
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 801050e:	7873      	ldrb	r3, [r6, #1]
 8010510:	2b07      	cmp	r3, #7
 8010512:	d11b      	bne.n	801054c <rfalNfcfPollerCheck+0x108>
 8010514:	7ab3      	ldrb	r3, [r6, #10]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d118      	bne.n	801054c <rfalNfcfPollerCheck+0x108>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 801051a:	7af3      	ldrb	r3, [r6, #11]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d115      	bne.n	801054c <rfalNfcfPollerCheck+0x108>
            ret = RFAL_ERR_REQUEST;
        }
        /* CHECK succesfull, remove header */
        else
        {
            (*rcvdLen) -= (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_NOB_POS);
 8010520:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010522:	3a0c      	subs	r2, #12
 8010524:	b292      	uxth	r2, r2
 8010526:	801a      	strh	r2, [r3, #0]
            
            if( *rcvdLen > 0U )
 8010528:	2a00      	cmp	r2, #0
 801052a:	d004      	beq.n	8010536 <rfalNfcfPollerCheck+0xf2>
            {
                RFAL_MEMMOVE( rxBuf, &checkRes[RFAL_NFCF_CHECKUPDATE_RES_NOB_POS], (*rcvdLen) );
 801052c:	0031      	movs	r1, r6
 801052e:	0030      	movs	r0, r6
 8010530:	310c      	adds	r1, #12
 8010532:	f002 fead 	bl	8013290 <memmove>
            }
        }
    }
    
    return ret;
}
 8010536:	0020      	movs	r0, r4
 8010538:	b01f      	add	sp, #124	@ 0x7c
 801053a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 801053c:	885c      	ldrh	r4, [r3, #2]
 801053e:	3103      	adds	r1, #3
 8010540:	0a24      	lsrs	r4, r4, #8
 8010542:	b2c9      	uxtb	r1, r1
 8010544:	5484      	strb	r4, [r0, r2]
 8010546:	e7c8      	b.n	80104da <rfalNfcfPollerCheck+0x96>
            ret = RFAL_ERR_PROTO;
 8010548:	240b      	movs	r4, #11
 801054a:	e7f4      	b.n	8010536 <rfalNfcfPollerCheck+0xf2>
            ret = RFAL_ERR_REQUEST;
 801054c:	2405      	movs	r4, #5
 801054e:	e7f2      	b.n	8010536 <rfalNfcfPollerCheck+0xf2>
 8010550:	02000010 	.word	0x02000010

08010554 <rfalNfcvPollerInitialize>:
/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
    ReturnCode ret;
            
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 8010554:	22ec      	movs	r2, #236	@ 0xec
{
 8010556:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 8010558:	0011      	movs	r1, r2
 801055a:	2007      	movs	r0, #7
 801055c:	f7f3 fe86 	bl	800426c <rfalSetMode>
 8010560:	1e04      	subs	r4, r0, #0
 8010562:	d10b      	bne.n	801057c <rfalNfcvPollerInitialize+0x28>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 8010564:	f7f3 ff8c 	bl	8004480 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 8010568:	4805      	ldr	r0, [pc, #20]	@ (8010580 <rfalNfcvPollerInitialize+0x2c>)
 801056a:	f7f3 ffbb 	bl	80044e4 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 801056e:	4805      	ldr	r0, [pc, #20]	@ (8010584 <rfalNfcvPollerInitialize+0x30>)
 8010570:	f7f3 ffae 	bl	80044d0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 8010574:	2083      	movs	r0, #131	@ 0x83
 8010576:	0140      	lsls	r0, r0, #5
 8010578:	f7f3 ff98 	bl	80044ac <rfalSetFDTPoll>
    
    return RFAL_ERR_NONE;
}
 801057c:	0020      	movs	r0, r4
 801057e:	bd10      	pop	{r4, pc}
 8010580:	000108d8 	.word	0x000108d8
 8010584:	000010d6 	.word	0x000010d6

08010588 <rfalNfcvPollerInventory>:
    return ret;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 8010588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801058a:	b087      	sub	sp, #28
 801058c:	000c      	movs	r4, r1
 801058e:	001d      	movs	r5, r3
 8010590:	1e11      	subs	r1, r2, #0
 8010592:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 8010594:	d102      	bne.n	801059c <rfalNfcvPollerInventory+0x14>
    {
        return RFAL_ERR_PARAM;
 8010596:	2307      	movs	r3, #7
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 8010598:	2c00      	cmp	r4, #0
 801059a:	d135      	bne.n	8010608 <rfalNfcvPollerInventory+0x80>
        return RFAL_ERR_PARAM;
 801059c:	2307      	movs	r3, #7
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 801059e:	2d00      	cmp	r5, #0
 80105a0:	d032      	beq.n	8010608 <rfalNfcvPollerInventory+0x80>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 80105a2:	3b01      	subs	r3, #1
 80105a4:	ae03      	add	r6, sp, #12
 80105a6:	4303      	orrs	r3, r0
 80105a8:	7033      	strb	r3, [r6, #0]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 80105aa:	2301      	movs	r3, #1
 80105ac:	7073      	strb	r3, [r6, #1]
    invReq.MASK_LEN = (uint8_t)RFAL_MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 80105ae:	333b      	adds	r3, #59	@ 0x3b
 80105b0:	2820      	cmp	r0, #32
 80105b2:	d100      	bne.n	80105b6 <rfalNfcvPollerInventory+0x2e>
 80105b4:	3304      	adds	r3, #4
 80105b6:	429c      	cmp	r4, r3
 80105b8:	d303      	bcc.n	80105c2 <rfalNfcvPollerInventory+0x3a>
 80105ba:	243c      	movs	r4, #60	@ 0x3c
 80105bc:	2820      	cmp	r0, #32
 80105be:	d100      	bne.n	80105c2 <rfalNfcvPollerInventory+0x3a>
 80105c0:	3404      	adds	r4, #4
 80105c2:	70b4      	strb	r4, [r6, #2]
    
    if( (rfalConvBitsToBytes(invReq.MASK_LEN) > 0U) && (maskVal != NULL) )  /* MISRA 21.18 & 1.3 */
 80105c4:	3407      	adds	r4, #7
 80105c6:	b2e4      	uxtb	r4, r4
 80105c8:	08e4      	lsrs	r4, r4, #3
 80105ca:	d006      	beq.n	80105da <rfalNfcvPollerInventory+0x52>
 80105cc:	2900      	cmp	r1, #0
 80105ce:	d004      	beq.n	80105da <rfalNfcvPollerInventory+0x52>
    {
        RFAL_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 80105d0:	200f      	movs	r0, #15
 80105d2:	0022      	movs	r2, r4
 80105d4:	4468      	add	r0, sp
 80105d6:	f002 fea1 	bl	801331c <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 80105da:	1ce1      	adds	r1, r4, #3
 80105dc:	240a      	movs	r4, #10
 80105de:	446c      	add	r4, sp
 80105e0:	230c      	movs	r3, #12
 80105e2:	002a      	movs	r2, r5
 80105e4:	0030      	movs	r0, r6
 80105e6:	9400      	str	r4, [sp, #0]
 80105e8:	f7f5 fc96 	bl	8005f18 <rfalISO15693TransceiveAnticollisionFrame>
 80105ec:	0003      	movs	r3, r0
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 80105ee:	2f00      	cmp	r7, #0
 80105f0:	d001      	beq.n	80105f6 <rfalNfcvPollerInventory+0x6e>
    {
        *rcvdLen = rxLen;
 80105f2:	8822      	ldrh	r2, [r4, #0]
 80105f4:	803a      	strh	r2, [r7, #0]
    }
    
    if( ret == RFAL_ERR_NONE )
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d106      	bne.n	8010608 <rfalNfcvPollerInventory+0x80>
    {
        /* Check for valid INVENTORY_RES   Digital 2.2  9.6.2.1 & 9.6.2.3 */
        if( !rfalNfcvCheckInvRes( invRes->RES_FLAG, rxLen ) )
 80105fa:	8822      	ldrh	r2, [r4, #0]
 80105fc:	2a60      	cmp	r2, #96	@ 0x60
 80105fe:	d102      	bne.n	8010606 <rfalNfcvPollerInventory+0x7e>
 8010600:	782a      	ldrb	r2, [r5, #0]
 8010602:	2a00      	cmp	r2, #0
 8010604:	d000      	beq.n	8010608 <rfalNfcvPollerInventory+0x80>
        {
            return RFAL_ERR_PROTO;
 8010606:	230b      	movs	r3, #11
        }
    }
    
    return ret;
}
 8010608:	0018      	movs	r0, r3
 801060a:	b007      	add	sp, #28
 801060c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08010610 <rfalNfcvPollerCheckPresence>:
{
 8010610:	b507      	push	{r0, r1, r2, lr}
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 8010612:	2100      	movs	r1, #0
{
 8010614:	0003      	movs	r3, r0
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 8010616:	000a      	movs	r2, r1
 8010618:	2020      	movs	r0, #32
 801061a:	9100      	str	r1, [sp, #0]
 801061c:	f7ff ffb4 	bl	8010588 <rfalNfcvPollerInventory>
    if( (ret == RFAL_ERR_RF_COLLISION) || (ret == RFAL_ERR_CRC)  || 
 8010620:	281d      	cmp	r0, #29
 8010622:	d805      	bhi.n	8010630 <rfalNfcvPollerCheckPresence+0x20>
 8010624:	4b03      	ldr	r3, [pc, #12]	@ (8010634 <rfalNfcvPollerCheckPresence+0x24>)
 8010626:	2201      	movs	r2, #1
 8010628:	40c3      	lsrs	r3, r0
 801062a:	4013      	ands	r3, r2
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 801062c:	3b01      	subs	r3, #1
 801062e:	4018      	ands	r0, r3
}
 8010630:	bd0e      	pop	{r1, r2, r3, pc}
 8010632:	46c0      	nop			@ (mov r8, r8)
 8010634:	20200a00 	.word	0x20200a00

08010638 <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 8010638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801063a:	b0b1      	sub	sp, #196	@ 0xc4
 801063c:	0004      	movs	r4, r0
 801063e:	001f      	movs	r7, r3
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
    {
        return RFAL_ERR_PARAM;
 8010640:	2007      	movs	r0, #7
{
 8010642:	9104      	str	r1, [sp, #16]
 8010644:	9202      	str	r2, [sp, #8]
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 8010646:	2a00      	cmp	r2, #0
 8010648:	d01d      	beq.n	8010686 <rfalNfcvPollerCollisionResolution+0x4e>
 801064a:	2f00      	cmp	r7, #0
 801064c:	d01b      	beq.n	8010686 <rfalNfcvPollerCollisionResolution+0x4e>
    }

    /* Initialize parameters */
    *devCnt = 0;
 801064e:	2500      	movs	r5, #0
    colIt         = 0;
    colCnt        = 0;
    colPending    = false;
    RFAL_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 8010650:	2290      	movs	r2, #144	@ 0x90
 8010652:	0029      	movs	r1, r5
    *devCnt = 0;
 8010654:	703d      	strb	r5, [r7, #0]
    RFAL_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 8010656:	a80c      	add	r0, sp, #48	@ 0x30
 8010658:	f002 fe2c 	bl	80132b4 <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 801065c:	9b04      	ldr	r3, [sp, #16]
 801065e:	42ab      	cmp	r3, r5
 8010660:	d005      	beq.n	801066e <rfalNfcvPollerCollisionResolution+0x36>
    {
        RFAL_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 8010662:	220d      	movs	r2, #13
 8010664:	0029      	movs	r1, r5
 8010666:	435a      	muls	r2, r3
 8010668:	9802      	ldr	r0, [sp, #8]
 801066a:	f002 fe23 	bl	80132b4 <memset>
    }

    RFAL_NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 801066e:	2c00      	cmp	r4, #0
 8010670:	d11a      	bne.n	80106a8 <rfalNfcvPollerCollisionResolution+0x70>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.1  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 8010672:	0022      	movs	r2, r4
 8010674:	0021      	movs	r1, r4
 8010676:	2020      	movs	r0, #32
 8010678:	9b02      	ldr	r3, [sp, #8]
 801067a:	9400      	str	r4, [sp, #0]
 801067c:	f7ff ff84 	bl	8010588 <rfalNfcvPollerInventory>

        /* Exit if no device found                              Activity 2.1  9.3.7.2 (Symbol 1)  */
        /* Exit if no correct frame (no Transmission Error)     Activity 2.1  9.3.7.3 (Symbol 2)  */
        if( (ret == RFAL_ERR_TIMEOUT) || ((ret == RFAL_ERR_PROTO)) ) 
 8010680:	2804      	cmp	r0, #4
 8010682:	d102      	bne.n	801068a <rfalNfcvPollerCollisionResolution+0x52>
        {
            return RFAL_ERR_NONE;
 8010684:	2000      	movs	r0, #0
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
        colIt++;
    } while( colIt < colCnt );                     /* Collisions found loop */
    
    return RFAL_ERR_NONE;
}
 8010686:	b031      	add	sp, #196	@ 0xc4
 8010688:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( (ret == RFAL_ERR_TIMEOUT) || ((ret == RFAL_ERR_PROTO)) ) 
 801068a:	280b      	cmp	r0, #11
 801068c:	d0fa      	beq.n	8010684 <rfalNfcvPollerCollisionResolution+0x4c>
        if( ret == RFAL_ERR_NONE )
 801068e:	2800      	cmp	r0, #0
 8010690:	d103      	bne.n	801069a <rfalNfcvPollerCollisionResolution+0x62>
            (*devCnt)++;
 8010692:	783b      	ldrb	r3, [r7, #0]
 8010694:	3301      	adds	r3, #1
 8010696:	703b      	strb	r3, [r7, #0]
            return RFAL_ERR_NONE;
 8010698:	e7f4      	b.n	8010684 <rfalNfcvPollerCollisionResolution+0x4c>
        if( devLimit == 0U )
 801069a:	9b04      	ldr	r3, [sp, #16]
            return RFAL_ERR_RF_COLLISION;
 801069c:	201d      	movs	r0, #29
        if( devLimit == 0U )
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d0f1      	beq.n	8010686 <rfalNfcvPollerCollisionResolution+0x4e>
        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80106a2:	3819      	subs	r0, #25
 80106a4:	f7f6 fce6 	bl	8007074 <HAL_Delay>
{
 80106a8:	2301      	movs	r3, #1
 80106aa:	9303      	str	r3, [sp, #12]
 80106ac:	2300      	movs	r3, #0
 80106ae:	ad0c      	add	r5, sp, #48	@ 0x30
 80106b0:	9305      	str	r3, [sp, #20]
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 80106b2:	2600      	movs	r6, #0
 80106b4:	1c6b      	adds	r3, r5, #1
 80106b6:	9307      	str	r3, [sp, #28]
 80106b8:	220d      	movs	r2, #13
 80106ba:	783b      	ldrb	r3, [r7, #0]
 80106bc:	4353      	muls	r3, r2
 80106be:	9a02      	ldr	r2, [sp, #8]
            if( slotNum == 0U )
 80106c0:	2e00      	cmp	r6, #0
 80106c2:	d139      	bne.n	8010738 <rfalNfcvPollerCollisionResolution+0x100>
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 80106c4:	18d3      	adds	r3, r2, r3
 80106c6:	220e      	movs	r2, #14
 80106c8:	a808      	add	r0, sp, #32
 80106ca:	1812      	adds	r2, r2, r0
 80106cc:	7829      	ldrb	r1, [r5, #0]
 80106ce:	0030      	movs	r0, r6
 80106d0:	9200      	str	r2, [sp, #0]
 80106d2:	9a07      	ldr	r2, [sp, #28]
 80106d4:	f7ff ff58 	bl	8010588 <rfalNfcvPollerInventory>
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 80106d8:	0004      	movs	r4, r0
            if( ret != RFAL_ERR_TIMEOUT )
 80106da:	2804      	cmp	r0, #4
 80106dc:	d066      	beq.n	80107ac <rfalNfcvPollerCollisionResolution+0x174>
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 80106de:	230e      	movs	r3, #14
 80106e0:	aa08      	add	r2, sp, #32
 80106e2:	189b      	adds	r3, r3, r2
 80106e4:	881b      	ldrh	r3, [r3, #0]
 80106e6:	2b5f      	cmp	r3, #95	@ 0x5f
 80106e8:	d802      	bhi.n	80106f0 <rfalNfcvPollerCollisionResolution+0xb8>
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80106ea:	2004      	movs	r0, #4
 80106ec:	f7f6 fcc2 	bl	8007074 <HAL_Delay>
                if( (ret == RFAL_ERR_NONE) || (ret == RFAL_ERR_PROTO) )
 80106f0:	2c00      	cmp	r4, #0
 80106f2:	d001      	beq.n	80106f8 <rfalNfcvPollerCollisionResolution+0xc0>
 80106f4:	2c0b      	cmp	r4, #11
 80106f6:	d127      	bne.n	8010748 <rfalNfcvPollerCollisionResolution+0x110>
                    if( rfalNfcvCheckInvRes( nfcvDevList[(*devCnt)].InvRes.RES_FLAG, rcvdLen ) )
 80106f8:	230e      	movs	r3, #14
 80106fa:	aa08      	add	r2, sp, #32
 80106fc:	189b      	adds	r3, r3, r2
 80106fe:	881b      	ldrh	r3, [r3, #0]
 8010700:	2b60      	cmp	r3, #96	@ 0x60
 8010702:	d108      	bne.n	8010716 <rfalNfcvPollerCollisionResolution+0xde>
 8010704:	220d      	movs	r2, #13
 8010706:	783b      	ldrb	r3, [r7, #0]
 8010708:	9902      	ldr	r1, [sp, #8]
 801070a:	435a      	muls	r2, r3
 801070c:	5c52      	ldrb	r2, [r2, r1]
 801070e:	2a00      	cmp	r2, #0
 8010710:	d101      	bne.n	8010716 <rfalNfcvPollerCollisionResolution+0xde>
                        (*devCnt)++;
 8010712:	3301      	adds	r3, #1
 8010714:	703b      	strb	r3, [r7, #0]
            if( *devCnt >= devLimit )
 8010716:	783b      	ldrb	r3, [r7, #0]
 8010718:	9a04      	ldr	r2, [sp, #16]
 801071a:	4293      	cmp	r3, r2
 801071c:	d2b2      	bcs.n	8010684 <rfalNfcvPollerCollisionResolution+0x4c>
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 801071e:	3601      	adds	r6, #1
 8010720:	2e10      	cmp	r6, #16
 8010722:	d1c9      	bne.n	80106b8 <rfalNfcvPollerCollisionResolution+0x80>
        colIt++;
 8010724:	9e05      	ldr	r6, [sp, #20]
    } while( colIt < colCnt );                     /* Collisions found loop */
 8010726:	3509      	adds	r5, #9
        colIt++;
 8010728:	3601      	adds	r6, #1
 801072a:	b2f3      	uxtb	r3, r6
 801072c:	9305      	str	r3, [sp, #20]
    } while( colIt < colCnt );                     /* Collisions found loop */
 801072e:	9a05      	ldr	r2, [sp, #20]
 8010730:	9b03      	ldr	r3, [sp, #12]
 8010732:	4293      	cmp	r3, r2
 8010734:	d8bd      	bhi.n	80106b2 <rfalNfcvPollerCollisionResolution+0x7a>
 8010736:	e7a5      	b.n	8010684 <rfalNfcvPollerCollisionResolution+0x4c>
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 8010738:	18d0      	adds	r0, r2, r3
 801073a:	220e      	movs	r2, #14
 801073c:	ab08      	add	r3, sp, #32
 801073e:	210c      	movs	r1, #12
 8010740:	18d2      	adds	r2, r2, r3
 8010742:	f7f5 fc5d 	bl	8006000 <rfalISO15693TransceiveEOFAnticollision>
 8010746:	e7c7      	b.n	80106d8 <rfalNfcvPollerCollisionResolution+0xa0>
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 8010748:	9b03      	ldr	r3, [sp, #12]
 801074a:	2b0f      	cmp	r3, #15
 801074c:	d8e3      	bhi.n	8010716 <rfalNfcvPollerCollisionResolution+0xde>
                        RFAL_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 801074e:	2309      	movs	r3, #9
 8010750:	9a03      	ldr	r2, [sp, #12]
 8010752:	ac0c      	add	r4, sp, #48	@ 0x30
 8010754:	4353      	muls	r3, r2
 8010756:	1c58      	adds	r0, r3, #1
 8010758:	2208      	movs	r2, #8
 801075a:	9907      	ldr	r1, [sp, #28]
 801075c:	1820      	adds	r0, r4, r0
 801075e:	9306      	str	r3, [sp, #24]
 8010760:	f002 fddc 	bl	801331c <memcpy>
                        colPos = colFound[colIt].maskLen;
 8010764:	782a      	ldrb	r2, [r5, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 8010766:	9b06      	ldr	r3, [sp, #24]
 8010768:	08d0      	lsrs	r0, r2, #3
 801076a:	18e3      	adds	r3, r4, r3
 801076c:	9308      	str	r3, [sp, #32]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 801076e:	2107      	movs	r1, #7
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 8010770:	181b      	adds	r3, r3, r0
 8010772:	9309      	str	r3, [sp, #36]	@ 0x24
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 8010774:	2301      	movs	r3, #1
 8010776:	4011      	ands	r1, r2
 8010778:	408b      	lsls	r3, r1
 801077a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801077c:	3b01      	subs	r3, #1
 801077e:	7840      	ldrb	r0, [r0, #1]
 8010780:	4003      	ands	r3, r0
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 8010782:	0030      	movs	r0, r6
 8010784:	4088      	lsls	r0, r1
 8010786:	4303      	orrs	r3, r0
 8010788:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801078a:	7043      	strb	r3, [r0, #1]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 801078c:	9b08      	ldr	r3, [sp, #32]
 801078e:	08d0      	lsrs	r0, r2, #3
 8010790:	18c0      	adds	r0, r0, r3
 8010792:	2308      	movs	r3, #8
 8010794:	1a59      	subs	r1, r3, r1
 8010796:	0033      	movs	r3, r6
 8010798:	40cb      	lsrs	r3, r1
 801079a:	7083      	strb	r3, [r0, #2]
                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 801079c:	9b06      	ldr	r3, [sp, #24]
 801079e:	3204      	adds	r2, #4
 80107a0:	551a      	strb	r2, [r3, r4]
                        colCnt++;
 80107a2:	9b03      	ldr	r3, [sp, #12]
 80107a4:	3301      	adds	r3, #1
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	9303      	str	r3, [sp, #12]
 80107aa:	e7b4      	b.n	8010716 <rfalNfcvPollerCollisionResolution+0xde>
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 80107ac:	f7f6 fc62 	bl	8007074 <HAL_Delay>
 80107b0:	e7b1      	b.n	8010716 <rfalNfcvPollerCollisionResolution+0xde>
	...

080107b4 <rfalNfcvPollerTransceiveReq>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_GET_SYS_INFO, flags, requestField, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen ); 
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerTransceiveReq( uint8_t cmd, uint8_t flags, uint8_t param, const uint8_t* uid, const uint8_t *data, uint16_t dataLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 80107b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107b6:	b097      	sub	sp, #92	@ 0x5c
 80107b8:	9306      	str	r3, [sp, #24]
 80107ba:	ab1c      	add	r3, sp, #112	@ 0x70
 80107bc:	0014      	movs	r4, r2
 80107be:	cb04      	ldmia	r3!, {r2}
 80107c0:	0007      	movs	r7, r0
 80107c2:	881e      	ldrh	r6, [r3, #0]
 80107c4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80107c6:	881b      	ldrh	r3, [r3, #0]
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
    {
        return RFAL_ERR_PARAM;
 80107c8:	2507      	movs	r5, #7
{
 80107ca:	9309      	str	r3, [sp, #36]	@ 0x24
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 80107cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
{
 80107ce:	9105      	str	r1, [sp, #20]
 80107d0:	9208      	str	r2, [sp, #32]
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d100      	bne.n	80107d8 <rfalNfcvPollerTransceiveReq+0x24>
 80107d6:	e098      	b.n	801090a <rfalNfcvPollerTransceiveReq+0x156>
 80107d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d100      	bne.n	80107e0 <rfalNfcvPollerTransceiveReq+0x2c>
 80107de:	e094      	b.n	801090a <rfalNfcvPollerTransceiveReq+0x156>
 80107e0:	2e00      	cmp	r6, #0
 80107e2:	d002      	beq.n	80107ea <rfalNfcvPollerTransceiveReq+0x36>
 80107e4:	2a00      	cmp	r2, #0
 80107e6:	d100      	bne.n	80107ea <rfalNfcvPollerTransceiveReq+0x36>
 80107e8:	e08f      	b.n	801090a <rfalNfcvPollerTransceiveReq+0x156>
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
 80107ea:	9a06      	ldr	r2, [sp, #24]
 80107ec:	2321      	movs	r3, #33	@ 0x21
 80107ee:	2a00      	cmp	r2, #0
 80107f0:	d000      	beq.n	80107f4 <rfalNfcvPollerTransceiveReq+0x40>
 80107f2:	3308      	adds	r3, #8
        return RFAL_ERR_PARAM;
 80107f4:	2507      	movs	r5, #7
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 80107f6:	429e      	cmp	r6, r3
 80107f8:	d900      	bls.n	80107fc <rfalNfcvPollerTransceiveReq+0x48>
 80107fa:	e086      	b.n	801090a <rfalNfcvPollerTransceiveReq+0x156>
    }
    
    
    /* Check if the command is an ST's Fast command */
    if( (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_SINGLE_BLOCK)    || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK)    || 
 80107fc:	003a      	movs	r2, r7
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 80107fe:	2300      	movs	r3, #0
 8010800:	3240      	adds	r2, #64	@ 0x40
 8010802:	b2d2      	uxtb	r2, r2
 8010804:	9307      	str	r3, [sp, #28]
 8010806:	2a0e      	cmp	r2, #14
 8010808:	d811      	bhi.n	801082e <rfalNfcvPollerTransceiveReq+0x7a>
 801080a:	4b44      	ldr	r3, [pc, #272]	@ (801091c <rfalNfcvPollerTransceiveReq+0x168>)
 801080c:	40d3      	lsrs	r3, r2
 801080e:	2201      	movs	r2, #1
 8010810:	0019      	movs	r1, r3
 8010812:	4011      	ands	r1, r2
 8010814:	9107      	str	r1, [sp, #28]
 8010816:	4213      	tst	r3, r2
 8010818:	d009      	beq.n	801082e <rfalNfcvPollerTransceiveReq+0x7a>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_MESSAGE)        || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE_LENGTH)           ||
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE)         || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_DYN_CONFIGURATION)        ||               
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_DYN_CONFIGURATION) )
    {
        /* Store current Rx bit rate and move to fast mode */
        rfalGetBitRate( NULL, &rxBR );
 801081a:	2113      	movs	r1, #19
 801081c:	ab06      	add	r3, sp, #24
 801081e:	18c9      	adds	r1, r1, r3
 8010820:	2000      	movs	r0, #0
 8010822:	f7f3 fe17 	bl	8004454 <rfalGetBitRate>
        rfalSetBitRate( RFAL_BR_KEEP, RFAL_BR_52p97 );
 8010826:	21eb      	movs	r1, #235	@ 0xeb
 8010828:	20ff      	movs	r0, #255	@ 0xff
 801082a:	f7f3 fc07 	bl	800403c <rfalSetBitRate>
        fastMode = true;
    }
    
    
    /* Compute Request Command */
    req.REQ_FLAG  = (uint8_t)(flags & (~((uint32_t)RFAL_NFCV_REQ_FLAG_ADDRESS)));
 801082e:	2320      	movs	r3, #32
 8010830:	9a05      	ldr	r2, [sp, #20]
 8010832:	a80b      	add	r0, sp, #44	@ 0x2c
 8010834:	439a      	bics	r2, r3
 8010836:	7002      	strb	r2, [r0, #0]
    req.CMD       = cmd;
 8010838:	7047      	strb	r7, [r0, #1]
    
    /* Prepend parameter on ceratin proprietary requests: IC Manuf, Parameters */
    if( param != RFAL_NFCV_PARAM_SKIP )
 801083a:	2c00      	cmp	r4, #0
 801083c:	d001      	beq.n	8010842 <rfalNfcvPollerTransceiveReq+0x8e>
    {
        req.payload.data[msgIt++] = param;
 801083e:	7084      	strb	r4, [r0, #2]
 8010840:	2401      	movs	r4, #1
    }
    
    /* Check if Request is to be sent in Addressed mode. Select mode flag shall be set by user */
    if( uid != NULL )
 8010842:	9b06      	ldr	r3, [sp, #24]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00b      	beq.n	8010860 <rfalNfcvPollerTransceiveReq+0xac>
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
 8010848:	2320      	movs	r3, #32
 801084a:	4313      	orrs	r3, r2
 801084c:	7003      	strb	r3, [r0, #0]
        RFAL_MEMCPY( &req.payload.data[msgIt], uid, RFAL_NFCV_UID_LEN );
 801084e:	1ca3      	adds	r3, r4, #2
 8010850:	b2db      	uxtb	r3, r3
 8010852:	2208      	movs	r2, #8
 8010854:	9906      	ldr	r1, [sp, #24]
 8010856:	18c0      	adds	r0, r0, r3
 8010858:	f002 fd60 	bl	801331c <memcpy>
        msgIt += RFAL_NFCV_UID_LEN;
 801085c:	3408      	adds	r4, #8
 801085e:	b2e4      	uxtb	r4, r4
    }
    
    if( dataLen > 0U )
 8010860:	2e00      	cmp	r6, #0
 8010862:	d009      	beq.n	8010878 <rfalNfcvPollerTransceiveReq+0xc4>
    {
        RFAL_MEMCPY( &req.payload.data[msgIt], data, dataLen);
 8010864:	1ca3      	adds	r3, r4, #2
 8010866:	b2db      	uxtb	r3, r3
 8010868:	aa0b      	add	r2, sp, #44	@ 0x2c
 801086a:	18d0      	adds	r0, r2, r3
 801086c:	9908      	ldr	r1, [sp, #32]
 801086e:	0032      	movs	r2, r6
 8010870:	f002 fd54 	bl	801331c <memcpy>
        msgIt += (uint8_t)dataLen;
 8010874:	19a4      	adds	r4, r4, r6
 8010876:	b2e4      	uxtb	r4, r4
    }
    
    
    /* If the Option Flag | Special Frame is set in certain commands an EOF needs to be sent whithin  FDTV,EOF to retrieve the VICC response     Digital 2.3  9.7.4    ISO15693-3 2009  10.4.2 & 10.4.3 & 10.4.5 */
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 8010878:	2340      	movs	r3, #64	@ 0x40
 801087a:	9e05      	ldr	r6, [sp, #20]
 801087c:	9a05      	ldr	r2, [sp, #20]
        specialFrame = true;
    }
    
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_NFCV_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, (specialFrame ? RFAL_NFCV_FDT_EOF : RFAL_NFCV_FDT_MAX) );
 801087e:	3402      	adds	r4, #2
 8010880:	b2e1      	uxtb	r1, r4
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 8010882:	401e      	ands	r6, r3
 8010884:	421a      	tst	r2, r3
 8010886:	d044      	beq.n	8010912 <rfalNfcvPollerTransceiveReq+0x15e>
 8010888:	003b      	movs	r3, r7
 801088a:	3b21      	subs	r3, #33	@ 0x21
 801088c:	b2db      	uxtb	r3, r3
 801088e:	2b13      	cmp	r3, #19
 8010890:	d83e      	bhi.n	8010910 <rfalNfcvPollerTransceiveReq+0x15c>
 8010892:	4e23      	ldr	r6, [pc, #140]	@ (8010920 <rfalNfcvPollerTransceiveReq+0x16c>)
 8010894:	4a23      	ldr	r2, [pc, #140]	@ (8010924 <rfalNfcvPollerTransceiveReq+0x170>)
 8010896:	40de      	lsrs	r6, r3
 8010898:	2301      	movs	r3, #1
 801089a:	401e      	ands	r6, r3
 801089c:	1e73      	subs	r3, r6, #1
 801089e:	4013      	ands	r3, r2
 80108a0:	4a21      	ldr	r2, [pc, #132]	@ (8010928 <rfalNfcvPollerTransceiveReq+0x174>)
 80108a2:	189b      	adds	r3, r3, r2
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_NFCV_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, (specialFrame ? RFAL_NFCV_FDT_EOF : RFAL_NFCV_FDT_MAX) );
 80108a4:	9302      	str	r3, [sp, #8]
 80108a6:	2300      	movs	r3, #0
 80108a8:	9301      	str	r3, [sp, #4]
 80108aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80108ac:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80108ae:	9300      	str	r3, [sp, #0]
 80108b0:	a80b      	add	r0, sp, #44	@ 0x2c
 80108b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108b4:	f7f5 fa48 	bl	8005d48 <rfalTransceiveBlockingTxRx>
 80108b8:	0005      	movs	r5, r0
    
    /* If the Option Flag | Special Frame is set in certain commands an EOF needs to be sent whithin  FDTV,EOF to retrieve the VICC response     Digital 2.3  9.7.4    ISO15693-3 2009  10.4.2 & 10.4.3 & 10.4.5 */
    if( specialFrame )
 80108ba:	2e00      	cmp	r6, #0
 80108bc:	d008      	beq.n	80108d0 <rfalNfcvPollerTransceiveReq+0x11c>
    {
        ret = rfalISO15693TransceiveEOF( rxBuf, (uint8_t)rxBufLen, rcvLen );
 80108be:	2224      	movs	r2, #36	@ 0x24
 80108c0:	466b      	mov	r3, sp
 80108c2:	189b      	adds	r3, r3, r2
 80108c4:	7819      	ldrb	r1, [r3, #0]
 80108c6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80108c8:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80108ca:	f7f5 fa53 	bl	8005d74 <rfalISO15693TransceiveEOF>
 80108ce:	0005      	movs	r5, r0
    }

    /* Restore Rx BitRate */
    if( fastMode )
 80108d0:	9b07      	ldr	r3, [sp, #28]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d006      	beq.n	80108e4 <rfalNfcvPollerTransceiveReq+0x130>
    {
        rfalSetBitRate( RFAL_BR_KEEP, rxBR );
 80108d6:	2313      	movs	r3, #19
 80108d8:	aa06      	add	r2, sp, #24
 80108da:	189b      	adds	r3, r3, r2
 80108dc:	20ff      	movs	r0, #255	@ 0xff
 80108de:	7819      	ldrb	r1, [r3, #0]
 80108e0:	f7f3 fbac 	bl	800403c <rfalSetBitRate>
    }
    
    if( ret != RFAL_ERR_NONE )
 80108e4:	2d00      	cmp	r5, #0
 80108e6:	d110      	bne.n	801090a <rfalNfcvPollerTransceiveReq+0x156>
    {
        return ret;
    }
    
    /* Check if the response minimum length has been received */
    if( (*rcvLen) < (uint8_t)RFAL_NFCV_FLAG_LEN )
 80108e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80108ea:	881b      	ldrh	r3, [r3, #0]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d012      	beq.n	8010916 <rfalNfcvPollerTransceiveReq+0x162>
    {
        return RFAL_ERR_PROTO;
    }
    
    /* Check if an error has been signalled */
    if( (rxBuf[RFAL_NFCV_FLAG_POS] & (uint8_t)RFAL_NFCV_RES_FLAG_ERROR) != 0U )
 80108f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	07db      	lsls	r3, r3, #31
 80108f6:	d508      	bpl.n	801090a <rfalNfcvPollerTransceiveReq+0x156>
    switch(err)
 80108f8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
    {
        return rfalNfcvParseError( rxBuf[RFAL_NFCV_DATASTART_POS] );
 80108fa:	3505      	adds	r5, #5
 80108fc:	785b      	ldrb	r3, [r3, #1]
 80108fe:	3b01      	subs	r3, #1
 8010900:	b2db      	uxtb	r3, r3
 8010902:	2b12      	cmp	r3, #18
 8010904:	d801      	bhi.n	801090a <rfalNfcvPollerTransceiveReq+0x156>
 8010906:	4a09      	ldr	r2, [pc, #36]	@ (801092c <rfalNfcvPollerTransceiveReq+0x178>)
 8010908:	5cd5      	ldrb	r5, [r2, r3]
    }
    
    return RFAL_ERR_NONE;
}
 801090a:	0028      	movs	r0, r5
 801090c:	b017      	add	sp, #92	@ 0x5c
 801090e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 8010910:	2600      	movs	r6, #0
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_NFCV_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, (specialFrame ? RFAL_NFCV_FDT_EOF : RFAL_NFCV_FDT_MAX) );
 8010912:	4b07      	ldr	r3, [pc, #28]	@ (8010930 <rfalNfcvPollerTransceiveReq+0x17c>)
 8010914:	e7c6      	b.n	80108a4 <rfalNfcvPollerTransceiveReq+0xf0>
        return RFAL_ERR_PROTO;
 8010916:	250b      	movs	r5, #11
 8010918:	e7f7      	b.n	801090a <rfalNfcvPollerTransceiveReq+0x156>
 801091a:	46c0      	nop			@ (mov r8, r8)
 801091c:	00007c39 	.word	0x00007c39
 8010920:	000b000b 	.word	0x000b000b
 8010924:	0000d3b4 	.word	0x0000d3b4
 8010928:	00034f80 	.word	0x00034f80
 801092c:	080143e4 	.word	0x080143e4
 8010930:	00042334 	.word	0x00042334

08010934 <rfalNfcvPollerReadSingleBlock>:
{
 8010934:	b530      	push	{r4, r5, lr}
 8010936:	b089      	sub	sp, #36	@ 0x24
 8010938:	ac0c      	add	r4, sp, #48	@ 0x30
 801093a:	8825      	ldrh	r5, [r4, #0]
    bn = blockNum;
 801093c:	241f      	movs	r4, #31
 801093e:	446c      	add	r4, sp
 8010940:	7022      	strb	r2, [r4, #0]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), rxBuf, rxBufLen, rcvLen );
 8010942:	9302      	str	r3, [sp, #8]
 8010944:	2301      	movs	r3, #1
 8010946:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010948:	9301      	str	r3, [sp, #4]
 801094a:	9204      	str	r2, [sp, #16]
 801094c:	000b      	movs	r3, r1
 801094e:	2200      	movs	r2, #0
 8010950:	0001      	movs	r1, r0
 8010952:	9503      	str	r5, [sp, #12]
 8010954:	9400      	str	r4, [sp, #0]
 8010956:	2020      	movs	r0, #32
 8010958:	f7ff ff2c 	bl	80107b4 <rfalNfcvPollerTransceiveReq>
}
 801095c:	b009      	add	sp, #36	@ 0x24
 801095e:	bd30      	pop	{r4, r5, pc}

08010960 <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 8010960:	b510      	push	{r4, lr}
    return rfalNfcbPollerInitialize();
 8010962:	f7ff fa03 	bl	800fd6c <rfalNfcbPollerInitialize>
}
 8010966:	bd10      	pop	{r4, pc}

08010968 <rfalSt25tbPollerInitiate>:
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 8010968:	2306      	movs	r3, #6
{
 801096a:	b570      	push	{r4, r5, r6, lr}
 801096c:	b086      	sub	sp, #24
 801096e:	0004      	movs	r4, r0
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 8010970:	a804      	add	r0, sp, #16
 8010972:	8003      	strh	r3, [r0, #0]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010974:	4b0c      	ldr	r3, [pc, #48]	@ (80109a8 <rfalSt25tbPollerInitiate+0x40>)
 8010976:	2612      	movs	r6, #18
 8010978:	9302      	str	r3, [sp, #8]
 801097a:	2300      	movs	r3, #0
 801097c:	ad05      	add	r5, sp, #20
 801097e:	446e      	add	r6, sp
 8010980:	9301      	str	r3, [sp, #4]
 8010982:	002a      	movs	r2, r5
 8010984:	2102      	movs	r1, #2
 8010986:	9600      	str	r6, [sp, #0]
 8010988:	3303      	adds	r3, #3
 801098a:	f7f5 f9dd 	bl	8005d48 <rfalTransceiveBlockingTxRx>
    
    /* Check for valid Select Response   */
    if( (ret == RFAL_ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 801098e:	2800      	cmp	r0, #0
 8010990:	d102      	bne.n	8010998 <rfalSt25tbPollerInitiate+0x30>
 8010992:	8833      	ldrh	r3, [r6, #0]
 8010994:	2b01      	cmp	r3, #1
 8010996:	d105      	bne.n	80109a4 <rfalSt25tbPollerInitiate+0x3c>
    {
        return RFAL_ERR_PROTO;
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 8010998:	2c00      	cmp	r4, #0
 801099a:	d001      	beq.n	80109a0 <rfalSt25tbPollerInitiate+0x38>
    {
        *chipId = *rxBuf;
 801099c:	782b      	ldrb	r3, [r5, #0]
 801099e:	7023      	strb	r3, [r4, #0]
    }
    
    return ret;
}
 80109a0:	b006      	add	sp, #24
 80109a2:	bd70      	pop	{r4, r5, r6, pc}
        return RFAL_ERR_PROTO;
 80109a4:	200b      	movs	r0, #11
 80109a6:	e7fb      	b.n	80109a0 <rfalSt25tbPollerInitiate+0x38>
 80109a8:	0000106d 	.word	0x0000106d

080109ac <rfalSt25tbPollerCheckPresence>:
{
 80109ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    chipIdRes = 0x00;
 80109ae:	466b      	mov	r3, sp
 80109b0:	2500      	movs	r5, #0
{
 80109b2:	0004      	movs	r4, r0
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 80109b4:	1dd8      	adds	r0, r3, #7
    chipIdRes = 0x00;
 80109b6:	71dd      	strb	r5, [r3, #7]
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 80109b8:	f7ff ffd6 	bl	8010968 <rfalSt25tbPollerInitiate>
    if( (ret == RFAL_ERR_CRC) || (ret == RFAL_ERR_FRAMING) )
 80109bc:	2815      	cmp	r0, #21
 80109be:	d007      	beq.n	80109d0 <rfalSt25tbPollerCheckPresence+0x24>
 80109c0:	2809      	cmp	r0, #9
 80109c2:	d005      	beq.n	80109d0 <rfalSt25tbPollerCheckPresence+0x24>
    if( chipId != NULL )
 80109c4:	42ac      	cmp	r4, r5
 80109c6:	d002      	beq.n	80109ce <rfalSt25tbPollerCheckPresence+0x22>
        *chipId = chipIdRes;
 80109c8:	466b      	mov	r3, sp
 80109ca:	79db      	ldrb	r3, [r3, #7]
 80109cc:	7023      	strb	r3, [r4, #0]
}
 80109ce:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        return RFAL_ERR_NONE;
 80109d0:	0028      	movs	r0, r5
 80109d2:	e7fc      	b.n	80109ce <rfalSt25tbPollerCheckPresence+0x22>

080109d4 <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 80109d4:	b510      	push	{r4, lr}
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 80109d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010a08 <rfalSt25tbPollerPcall+0x34>)
{
 80109d8:	b086      	sub	sp, #24
 80109da:	0002      	movs	r2, r0
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 80109dc:	a805      	add	r0, sp, #20
 80109de:	8003      	strh	r3, [r0, #0]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 80109e0:	4b0a      	ldr	r3, [pc, #40]	@ (8010a0c <rfalSt25tbPollerPcall+0x38>)
 80109e2:	2416      	movs	r4, #22
 80109e4:	9302      	str	r3, [sp, #8]
 80109e6:	2300      	movs	r3, #0
 80109e8:	446c      	add	r4, sp
 80109ea:	9301      	str	r3, [sp, #4]
 80109ec:	2102      	movs	r1, #2
 80109ee:	9400      	str	r4, [sp, #0]
 80109f0:	3301      	adds	r3, #1
 80109f2:	f7f5 f9a9 	bl	8005d48 <rfalTransceiveBlockingTxRx>
    
    /* Check for valid Select Response   */
    if( (ret == RFAL_ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 80109f6:	2800      	cmp	r0, #0
 80109f8:	d103      	bne.n	8010a02 <rfalSt25tbPollerPcall+0x2e>
 80109fa:	8823      	ldrh	r3, [r4, #0]
 80109fc:	2b01      	cmp	r3, #1
 80109fe:	d000      	beq.n	8010a02 <rfalSt25tbPollerPcall+0x2e>
    {
        return RFAL_ERR_PROTO;
 8010a00:	300b      	adds	r0, #11
    }
    
    return ret;
}
 8010a02:	b006      	add	sp, #24
 8010a04:	bd10      	pop	{r4, pc}
 8010a06:	46c0      	nop			@ (mov r8, r8)
 8010a08:	00000406 	.word	0x00000406
 8010a0c:	0000106d 	.word	0x0000106d

08010a10 <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 8010a10:	b510      	push	{r4, lr}
 8010a12:	000a      	movs	r2, r1
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 8010a14:	1e41      	subs	r1, r0, #1
{
 8010a16:	0003      	movs	r3, r0
 8010a18:	b086      	sub	sp, #24
    {
        return RFAL_ERR_PARAM;
 8010a1a:	2007      	movs	r0, #7
    if( (slotNum == 0U) || (slotNum > 15U) )
 8010a1c:	290e      	cmp	r1, #14
 8010a1e:	d816      	bhi.n	8010a4e <rfalSt25tbPollerSlotMarker+0x3e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 8010a20:	2106      	movs	r1, #6
 8010a22:	300e      	adds	r0, #14
 8010a24:	011b      	lsls	r3, r3, #4
 8010a26:	430b      	orrs	r3, r1
 8010a28:	4468      	add	r0, sp
 8010a2a:	7003      	strb	r3, [r0, #0]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010a2c:	4b09      	ldr	r3, [pc, #36]	@ (8010a54 <rfalSt25tbPollerSlotMarker+0x44>)
 8010a2e:	2416      	movs	r4, #22
 8010a30:	9302      	str	r3, [sp, #8]
 8010a32:	2300      	movs	r3, #0
 8010a34:	446c      	add	r4, sp
 8010a36:	9301      	str	r3, [sp, #4]
 8010a38:	3301      	adds	r3, #1
 8010a3a:	0019      	movs	r1, r3
 8010a3c:	9400      	str	r4, [sp, #0]
 8010a3e:	f7f5 f983 	bl	8005d48 <rfalTransceiveBlockingTxRx>
    
    /* Check for valid ChipID Response   */
    if( (ret == RFAL_ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 8010a42:	2800      	cmp	r0, #0
 8010a44:	d103      	bne.n	8010a4e <rfalSt25tbPollerSlotMarker+0x3e>
 8010a46:	8823      	ldrh	r3, [r4, #0]
 8010a48:	2b01      	cmp	r3, #1
 8010a4a:	d000      	beq.n	8010a4e <rfalSt25tbPollerSlotMarker+0x3e>
    {
        return RFAL_ERR_PROTO;
 8010a4c:	300b      	adds	r0, #11
    }
    
    return ret;
}
 8010a4e:	b006      	add	sp, #24
 8010a50:	bd10      	pop	{r4, pc}
 8010a52:	46c0      	nop			@ (mov r8, r8)
 8010a54:	0000106d 	.word	0x0000106d

08010a58 <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 8010a58:	b570      	push	{r4, r5, r6, lr}
 8010a5a:	b086      	sub	sp, #24
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 8010a5c:	466a      	mov	r2, sp
 8010a5e:	230e      	movs	r3, #14
 8010a60:	7513      	strb	r3, [r2, #20]
    selectReq.chipId = chipId;
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010a62:	4b0e      	ldr	r3, [pc, #56]	@ (8010a9c <rfalSt25tbPollerSelect+0x44>)
 8010a64:	2513      	movs	r5, #19
 8010a66:	2616      	movs	r6, #22
    selectReq.chipId = chipId;
 8010a68:	7550      	strb	r0, [r2, #21]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010a6a:	9302      	str	r3, [sp, #8]
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	446d      	add	r5, sp
 8010a70:	446e      	add	r6, sp
{
 8010a72:	0004      	movs	r4, r0
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010a74:	9301      	str	r3, [sp, #4]
 8010a76:	002a      	movs	r2, r5
 8010a78:	2102      	movs	r1, #2
 8010a7a:	9600      	str	r6, [sp, #0]
 8010a7c:	3301      	adds	r3, #1
 8010a7e:	a805      	add	r0, sp, #20
 8010a80:	f7f5 f962 	bl	8005d48 <rfalTransceiveBlockingTxRx>
    
    /* Check for valid Select Response   */
    if( (ret == RFAL_ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 8010a84:	2800      	cmp	r0, #0
 8010a86:	d106      	bne.n	8010a96 <rfalSt25tbPollerSelect+0x3e>
 8010a88:	8833      	ldrh	r3, [r6, #0]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d102      	bne.n	8010a94 <rfalSt25tbPollerSelect+0x3c>
 8010a8e:	782b      	ldrb	r3, [r5, #0]
 8010a90:	42a3      	cmp	r3, r4
 8010a92:	d000      	beq.n	8010a96 <rfalSt25tbPollerSelect+0x3e>
    {
        return RFAL_ERR_PROTO;
 8010a94:	200b      	movs	r0, #11
    }
    
    return ret;
}
 8010a96:	b006      	add	sp, #24
 8010a98:	bd70      	pop	{r4, r5, r6, pc}
 8010a9a:	46c0      	nop			@ (mov r8, r8)
 8010a9c:	0000106d 	.word	0x0000106d

08010aa0 <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 8010aa0:	0002      	movs	r2, r0
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 8010aa2:	2015      	movs	r0, #21
{
 8010aa4:	b530      	push	{r4, r5, lr}
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 8010aa6:	240b      	movs	r4, #11
{
 8010aa8:	b087      	sub	sp, #28
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8010ad4 <rfalSt25tbPollerGetUID+0x34>)
 8010aac:	2516      	movs	r5, #22
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 8010aae:	4468      	add	r0, sp
 8010ab0:	7004      	strb	r4, [r0, #0]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010ab2:	9302      	str	r3, [sp, #8]
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	446d      	add	r5, sp
 8010ab8:	9301      	str	r3, [sp, #4]
 8010aba:	2101      	movs	r1, #1
 8010abc:	9500      	str	r5, [sp, #0]
 8010abe:	3308      	adds	r3, #8
 8010ac0:	f7f5 f942 	bl	8005d48 <rfalTransceiveBlockingTxRx>
    
    /* Check for valid UID Response */
    if( (ret == RFAL_ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	d103      	bne.n	8010ad0 <rfalSt25tbPollerGetUID+0x30>
 8010ac8:	882b      	ldrh	r3, [r5, #0]
 8010aca:	2b08      	cmp	r3, #8
 8010acc:	d000      	beq.n	8010ad0 <rfalSt25tbPollerGetUID+0x30>
    {
        return RFAL_ERR_PROTO;
 8010ace:	0020      	movs	r0, r4
    }
    
    return ret;
}
 8010ad0:	b007      	add	sp, #28
 8010ad2:	bd30      	pop	{r4, r5, pc}
 8010ad4:	0000106d 	.word	0x0000106d

08010ad8 <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8010ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ada:	b085      	sub	sp, #20
 8010adc:	9001      	str	r0, [sp, #4]
 8010ade:	000d      	movs	r5, r1
 8010ae0:	0014      	movs	r4, r2
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
    {
        return RFAL_ERR_PARAM;
 8010ae2:	2007      	movs	r0, #7
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 8010ae4:	2900      	cmp	r1, #0
 8010ae6:	d02b      	beq.n	8010b40 <rfalSt25tbPollerCollisionResolution+0x68>
 8010ae8:	2a00      	cmp	r2, #0
 8010aea:	d029      	beq.n	8010b40 <rfalSt25tbPollerCollisionResolution+0x68>
 8010aec:	9b01      	ldr	r3, [sp, #4]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d026      	beq.n	8010b40 <rfalSt25tbPollerCollisionResolution+0x68>
    }
    
    *devCnt = 0;
 8010af2:	2300      	movs	r3, #0
 8010af4:	7013      	strb	r3, [r2, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 8010af6:	ab02      	add	r3, sp, #8
 8010af8:	1d9e      	adds	r6, r3, #6
 8010afa:	0030      	movs	r0, r6
 8010afc:	f7ff ff34 	bl	8010968 <rfalSt25tbPollerInitiate>
 8010b00:	1e02      	subs	r2, r0, #0
    if( ret == RFAL_ERR_NONE )
 8010b02:	d117      	bne.n	8010b34 <rfalSt25tbPollerCollisionResolution+0x5c>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 8010b04:	7830      	ldrb	r0, [r6, #0]
 8010b06:	260a      	movs	r6, #10
 8010b08:	7823      	ldrb	r3, [r4, #0]
 8010b0a:	4373      	muls	r3, r6
 8010b0c:	5558      	strb	r0, [r3, r5]
        st25tbDevList[*devCnt].isDeselected = false;
 8010b0e:	7823      	ldrb	r3, [r4, #0]
 8010b10:	4373      	muls	r3, r6
 8010b12:	18eb      	adds	r3, r5, r3
 8010b14:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 8010b16:	f7ff ff9f 	bl	8010a58 <rfalSt25tbPollerSelect>
        
        if( RFAL_ERR_NONE == ret )
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	d10a      	bne.n	8010b34 <rfalSt25tbPollerCollisionResolution+0x5c>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 8010b1e:	7823      	ldrb	r3, [r4, #0]
 8010b20:	435e      	muls	r6, r3
 8010b22:	19a8      	adds	r0, r5, r6
 8010b24:	3001      	adds	r0, #1
 8010b26:	f7ff ffbb 	bl	8010aa0 <rfalSt25tbPollerGetUID>
        }
        
        if( RFAL_ERR_NONE == ret )
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	d102      	bne.n	8010b34 <rfalSt25tbPollerCollisionResolution+0x5c>
        {
            (*devCnt)++;
 8010b2e:	7823      	ldrb	r3, [r4, #0]
 8010b30:	3301      	adds	r3, #1
 8010b32:	7023      	strb	r3, [r4, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 8010b34:	7823      	ldrb	r3, [r4, #0]
 8010b36:	9a01      	ldr	r2, [sp, #4]
            st25tbDevList[*devCnt].chipID       = chipId;
 8010b38:	270a      	movs	r7, #10
    if( *devCnt < devLimit )
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d302      	bcc.n	8010b44 <rfalSt25tbPollerCollisionResolution+0x6c>
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
        }
        while( (detected == true) && (*devCnt < devLimit) );
    }

    return RFAL_ERR_NONE;
 8010b3e:	2000      	movs	r0, #0
}
 8010b40:	b005      	add	sp, #20
 8010b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    col = false;
 8010b44:	2300      	movs	r3, #0
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 8010b46:	001e      	movs	r6, r3
    col = false;
 8010b48:	9300      	str	r3, [sp, #0]
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 8010b4a:	2001      	movs	r0, #1
 8010b4c:	f7f6 fa92 	bl	8007074 <HAL_Delay>
            ret = rfalSt25tbPollerPcall( &chipId );
 8010b50:	ab02      	add	r3, sp, #8
        if( i==0U )
 8010b52:	2e00      	cmp	r6, #0
 8010b54:	d12e      	bne.n	8010bb4 <rfalSt25tbPollerCollisionResolution+0xdc>
            ret = rfalSt25tbPollerPcall( &chipId );
 8010b56:	1dd8      	adds	r0, r3, #7
 8010b58:	f7ff ff3c 	bl	80109d4 <rfalSt25tbPollerPcall>
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 8010b5c:	1e03      	subs	r3, r0, #0
        if( ret == RFAL_ERR_NONE )
 8010b5e:	d12e      	bne.n	8010bbe <rfalSt25tbPollerCollisionResolution+0xe6>
            st25tbDevList[*devCnt].chipID       = chipId;
 8010b60:	aa02      	add	r2, sp, #8
 8010b62:	79d0      	ldrb	r0, [r2, #7]
 8010b64:	7822      	ldrb	r2, [r4, #0]
 8010b66:	437a      	muls	r2, r7
 8010b68:	5550      	strb	r0, [r2, r5]
            st25tbDevList[*devCnt].isDeselected = false;
 8010b6a:	7822      	ldrb	r2, [r4, #0]
 8010b6c:	437a      	muls	r2, r7
 8010b6e:	18aa      	adds	r2, r5, r2
 8010b70:	7253      	strb	r3, [r2, #9]
            ret = rfalSt25tbPollerSelect( chipId );
 8010b72:	f7ff ff71 	bl	8010a58 <rfalSt25tbPollerSelect>
            if( (*devCnt) > 0U )
 8010b76:	7823      	ldrb	r3, [r4, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d004      	beq.n	8010b86 <rfalSt25tbPollerCollisionResolution+0xae>
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	437b      	muls	r3, r7
 8010b80:	18eb      	adds	r3, r5, r3
 8010b82:	3b0a      	subs	r3, #10
 8010b84:	725a      	strb	r2, [r3, #9]
            if( RFAL_ERR_NONE == ret )
 8010b86:	2800      	cmp	r0, #0
 8010b88:	d108      	bne.n	8010b9c <rfalSt25tbPollerCollisionResolution+0xc4>
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 8010b8a:	7820      	ldrb	r0, [r4, #0]
 8010b8c:	4378      	muls	r0, r7
 8010b8e:	1828      	adds	r0, r5, r0
 8010b90:	3001      	adds	r0, #1
 8010b92:	f7ff ff85 	bl	8010aa0 <rfalSt25tbPollerGetUID>
                (*devCnt)++;
 8010b96:	7823      	ldrb	r3, [r4, #0]
 8010b98:	3301      	adds	r3, #1
 8010b9a:	7023      	strb	r3, [r4, #0]
        if( *devCnt >= devLimit )
 8010b9c:	7823      	ldrb	r3, [r4, #0]
 8010b9e:	9a01      	ldr	r2, [sp, #4]
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	d2cc      	bcs.n	8010b3e <rfalSt25tbPollerCollisionResolution+0x66>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 8010ba4:	3601      	adds	r6, #1
 8010ba6:	b2f6      	uxtb	r6, r6
 8010ba8:	2e10      	cmp	r6, #16
 8010baa:	d1ce      	bne.n	8010b4a <rfalSt25tbPollerCollisionResolution+0x72>
        while( (detected == true) && (*devCnt < devLimit) );
 8010bac:	9b00      	ldr	r3, [sp, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d1c8      	bne.n	8010b44 <rfalSt25tbPollerCollisionResolution+0x6c>
 8010bb2:	e7c4      	b.n	8010b3e <rfalSt25tbPollerCollisionResolution+0x66>
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 8010bb4:	0030      	movs	r0, r6
 8010bb6:	1dd9      	adds	r1, r3, #7
 8010bb8:	f7ff ff2a 	bl	8010a10 <rfalSt25tbPollerSlotMarker>
 8010bbc:	e7ce      	b.n	8010b5c <rfalSt25tbPollerCollisionResolution+0x84>
        else if( (ret == RFAL_ERR_CRC) || (ret == RFAL_ERR_FRAMING) )
 8010bbe:	2815      	cmp	r0, #21
 8010bc0:	d001      	beq.n	8010bc6 <rfalSt25tbPollerCollisionResolution+0xee>
 8010bc2:	2809      	cmp	r0, #9
 8010bc4:	d1ea      	bne.n	8010b9c <rfalSt25tbPollerCollisionResolution+0xc4>
            col = true;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	e7e7      	b.n	8010b9c <rfalSt25tbPollerCollisionResolution+0xc4>

08010bcc <rfalT1TPollerInitialize>:

ReturnCode rfalT1TPollerInitialize( void )
{
    ReturnCode ret;
    
    RFAL_EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 8010bcc:	2200      	movs	r2, #0
{
 8010bce:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 8010bd0:	0011      	movs	r1, r2
 8010bd2:	2002      	movs	r0, #2
 8010bd4:	f7f3 fb4a 	bl	800426c <rfalSetMode>
 8010bd8:	1e04      	subs	r4, r0, #0
 8010bda:	d10b      	bne.n	8010bf4 <rfalT1TPollerInitialize+0x28>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 8010bdc:	f7f3 fc50 	bl	8004480 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 8010be0:	0020      	movs	r0, r4
 8010be2:	f7f3 fc7f 	bl	80044e4 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 8010be6:	4804      	ldr	r0, [pc, #16]	@ (8010bf8 <rfalT1TPollerInitialize+0x2c>)
 8010be8:	f7f3 fc72 	bl	80044d0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 8010bec:	20c0      	movs	r0, #192	@ 0xc0
 8010bee:	0040      	lsls	r0, r0, #1
 8010bf0:	f7f3 fc5c 	bl	80044ac <rfalSetFDTPoll>
    
    return RFAL_ERR_NONE;
}
 8010bf4:	0020      	movs	r0, r4
 8010bf6:	bd10      	pop	{r4, pc}
 8010bf8:	00000494 	.word	0x00000494

08010bfc <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 8010bfc:	b570      	push	{r4, r5, r6, lr}
 8010bfe:	0004      	movs	r4, r0
 8010c00:	b088      	sub	sp, #32
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
    {
        return RFAL_ERR_PARAM;
 8010c02:	2007      	movs	r0, #7
    if( ridRes == NULL )
 8010c04:	2c00      	cmp	r4, #0
 8010c06:	d020      	beq.n	8010c4a <rfalT1TPollerRid+0x4e>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    RFAL_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 8010c08:	3012      	adds	r0, #18
 8010c0a:	2206      	movs	r2, #6
 8010c0c:	2100      	movs	r1, #0
 8010c0e:	4468      	add	r0, sp
 8010c10:	f002 fb50 	bl	80132b4 <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 8010c14:	2378      	movs	r3, #120	@ 0x78
    RFAL_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 8010c16:	ae06      	add	r6, sp, #24
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 8010c18:	7033      	strb	r3, [r6, #0]
    
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 8010c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c50 <rfalT1TPollerRid+0x54>)
 8010c1c:	2516      	movs	r5, #22
 8010c1e:	9302      	str	r3, [sp, #8]
 8010c20:	2300      	movs	r3, #0
 8010c22:	446d      	add	r5, sp
 8010c24:	9301      	str	r3, [sp, #4]
 8010c26:	0022      	movs	r2, r4
 8010c28:	2107      	movs	r1, #7
 8010c2a:	0030      	movs	r0, r6
 8010c2c:	9500      	str	r5, [sp, #0]
 8010c2e:	3306      	adds	r3, #6
 8010c30:	f7f5 f88a 	bl	8005d48 <rfalTransceiveBlockingTxRx>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	d108      	bne.n	8010c4a <rfalT1TPollerRid+0x4e>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 8010c38:	882b      	ldrh	r3, [r5, #0]
 8010c3a:	2b06      	cmp	r3, #6
 8010c3c:	d104      	bne.n	8010c48 <rfalT1TPollerRid+0x4c>
 8010c3e:	220f      	movs	r2, #15
 8010c40:	7823      	ldrb	r3, [r4, #0]
 8010c42:	4393      	bics	r3, r2
 8010c44:	2b10      	cmp	r3, #16
 8010c46:	d000      	beq.n	8010c4a <rfalT1TPollerRid+0x4e>
    {
        return RFAL_ERR_PROTO;
 8010c48:	200b      	movs	r0, #11
    }
    
    return RFAL_ERR_NONE;
}
 8010c4a:	b008      	add	sp, #32
 8010c4c:	bd70      	pop	{r4, r5, r6, pc}
 8010c4e:	46c0      	nop			@ (mov r8, r8)
 8010c50:	000009a8 	.word	0x000009a8

08010c54 <rfalT2TPollerRead>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

 ReturnCode rfalT2TPollerRead( uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
 {
 8010c54:	b570      	push	{r4, r5, r6, lr}
 8010c56:	0006      	movs	r6, r0
 8010c58:	000c      	movs	r4, r1
 8010c5a:	001d      	movs	r5, r3
    ReturnCode      ret;
    rfalT2TReadReq  req;
     
    if( (rxBuf == NULL) || (rcvLen == NULL) )
    {
        return RFAL_ERR_PARAM;
 8010c5c:	2007      	movs	r0, #7
 {
 8010c5e:	b086      	sub	sp, #24
    if( (rxBuf == NULL) || (rcvLen == NULL) )
 8010c60:	2900      	cmp	r1, #0
 8010c62:	d01b      	beq.n	8010c9c <rfalT2TPollerRead+0x48>
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d019      	beq.n	8010c9c <rfalT2TPollerRead+0x48>
    }
    
    req.code = (uint8_t)RFAL_T2T_CMD_READ;
 8010c68:	4669      	mov	r1, sp
 8010c6a:	2330      	movs	r3, #48	@ 0x30
 8010c6c:	750b      	strb	r3, [r1, #20]
    req.blNo = blockNum;
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TReadReq), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 8010c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8010ca0 <rfalT2TPollerRead+0x4c>)
    req.blNo = blockNum;
 8010c70:	754e      	strb	r6, [r1, #21]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TReadReq), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 8010c72:	9302      	str	r3, [sp, #8]
 8010c74:	2300      	movs	r3, #0
 8010c76:	2102      	movs	r1, #2
 8010c78:	9301      	str	r3, [sp, #4]
 8010c7a:	9500      	str	r5, [sp, #0]
 8010c7c:	0013      	movs	r3, r2
 8010c7e:	a805      	add	r0, sp, #20
 8010c80:	0022      	movs	r2, r4
 8010c82:	f7f5 f861 	bl	8005d48 <rfalTransceiveBlockingTxRx>
    
    /* T2T 1.0 5.2.1.7 The Reader/Writer SHALL treat a NACK in response to a READ Command as a Protocol Error */
    if( (ret == RFAL_ERR_INCOMPLETE_BYTE) && (*rcvLen == RFAL_T2T_ACK_NACK_LEN) && ((*rxBuf & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 8010c86:	2828      	cmp	r0, #40	@ 0x28
 8010c88:	d108      	bne.n	8010c9c <rfalT2TPollerRead+0x48>
 8010c8a:	882b      	ldrh	r3, [r5, #0]
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d105      	bne.n	8010c9c <rfalT2TPollerRead+0x48>
 8010c90:	220f      	movs	r2, #15
 8010c92:	7823      	ldrb	r3, [r4, #0]
 8010c94:	4013      	ands	r3, r2
 8010c96:	2b0a      	cmp	r3, #10
 8010c98:	d000      	beq.n	8010c9c <rfalT2TPollerRead+0x48>
    {
        return RFAL_ERR_PROTO;
 8010c9a:	381d      	subs	r0, #29
    }
    return ret;
 }
 8010c9c:	b006      	add	sp, #24
 8010c9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ca0:	000108d8 	.word	0x000108d8

08010ca4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010ca4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8010ca6:	f000 fc73 	bl	8011590 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8010caa:	4c15      	ldr	r4, [pc, #84]	@ (8010d00 <MX_USB_DEVICE_Init+0x5c>)
 8010cac:	2200      	movs	r2, #0
 8010cae:	0020      	movs	r0, r4
 8010cb0:	4914      	ldr	r1, [pc, #80]	@ (8010d04 <MX_USB_DEVICE_Init+0x60>)
 8010cb2:	f000 fe7b 	bl	80119ac <USBD_Init>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d001      	beq.n	8010cbe <MX_USB_DEVICE_Init+0x1a>
  {
    Error_Handler();
 8010cba:	f7f1 f95f 	bl	8001f7c <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8010cbe:	0020      	movs	r0, r4
 8010cc0:	4911      	ldr	r1, [pc, #68]	@ (8010d08 <MX_USB_DEVICE_Init+0x64>)
 8010cc2:	f000 fe8c 	bl	80119de <USBD_RegisterClass>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d001      	beq.n	8010cce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010cca:	f7f1 f957 	bl	8001f7c <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8010cce:	0020      	movs	r0, r4
 8010cd0:	490e      	ldr	r1, [pc, #56]	@ (8010d0c <MX_USB_DEVICE_Init+0x68>)
 8010cd2:	f000 fadb 	bl	801128c <USBD_CDC_ACM_RegisterInterface>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d001      	beq.n	8010cde <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8010cda:	f7f1 f94f 	bl	8001f7c <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8010cde:	0020      	movs	r0, r4
 8010ce0:	490b      	ldr	r1, [pc, #44]	@ (8010d10 <MX_USB_DEVICE_Init+0x6c>)
 8010ce2:	f000 fe3f 	bl	8011964 <USBD_CUSTOM_HID_RegisterInterface>
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	d001      	beq.n	8010cee <MX_USB_DEVICE_Init+0x4a>
  {
    Error_Handler();
 8010cea:	f7f1 f947 	bl	8001f7c <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8010cee:	0020      	movs	r0, r4
 8010cf0:	f000 fe90 	bl	8011a14 <USBD_Start>
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	d001      	beq.n	8010cfc <MX_USB_DEVICE_Init+0x58>
  {
    Error_Handler();
 8010cf8:	f7f1 f940 	bl	8001f7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010cfc:	bd10      	pop	{r4, pc}
 8010cfe:	46c0      	nop			@ (mov r8, r8)
 8010d00:	200026f4 	.word	0x200026f4
 8010d04:	20000664 	.word	0x20000664
 8010d08:	20000808 	.word	0x20000808
 8010d0c:	2000061c 	.word	0x2000061c
 8010d10:	20000680 	.word	0x20000680

08010d14 <CDC_DeInit>:
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8010d14:	2000      	movs	r0, #0
 8010d16:	4770      	bx	lr

08010d18 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8010d18:	b510      	push	{r4, lr}
 8010d1a:	0004      	movs	r4, r0
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8010d1c:	2920      	cmp	r1, #32
 8010d1e:	d003      	beq.n	8010d28 <CDC_Control+0x10>
 8010d20:	2921      	cmp	r1, #33	@ 0x21
 8010d22:	d016      	beq.n	8010d52 <CDC_Control+0x3a>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8010d24:	2000      	movs	r0, #0
 8010d26:	bd10      	pop	{r4, pc}
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8010d28:	7853      	ldrb	r3, [r2, #1]
 8010d2a:	7811      	ldrb	r1, [r2, #0]
 8010d2c:	021b      	lsls	r3, r3, #8
 8010d2e:	430b      	orrs	r3, r1
 8010d30:	7891      	ldrb	r1, [r2, #2]
 8010d32:	4812      	ldr	r0, [pc, #72]	@ (8010d7c <CDC_Control+0x64>)
 8010d34:	0409      	lsls	r1, r1, #16
 8010d36:	4319      	orrs	r1, r3
 8010d38:	78d3      	ldrb	r3, [r2, #3]
 8010d3a:	00e4      	lsls	r4, r4, #3
 8010d3c:	061b      	lsls	r3, r3, #24
 8010d3e:	430b      	orrs	r3, r1
 8010d40:	5023      	str	r3, [r4, r0]
    Line_Coding[cdc_ch].format = pbuf[4];
 8010d42:	7913      	ldrb	r3, [r2, #4]
 8010d44:	1900      	adds	r0, r0, r4
 8010d46:	7103      	strb	r3, [r0, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8010d48:	7953      	ldrb	r3, [r2, #5]
 8010d4a:	7143      	strb	r3, [r0, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8010d4c:	7993      	ldrb	r3, [r2, #6]
 8010d4e:	7183      	strb	r3, [r0, #6]
    break;
 8010d50:	e7e8      	b.n	8010d24 <CDC_Control+0xc>
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8010d52:	4b0a      	ldr	r3, [pc, #40]	@ (8010d7c <CDC_Control+0x64>)
 8010d54:	00c4      	lsls	r4, r0, #3
 8010d56:	58e1      	ldr	r1, [r4, r3]
 8010d58:	7011      	strb	r1, [r2, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8010d5a:	58e1      	ldr	r1, [r4, r3]
 8010d5c:	0a09      	lsrs	r1, r1, #8
 8010d5e:	7051      	strb	r1, [r2, #1]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8010d60:	58e1      	ldr	r1, [r4, r3]
 8010d62:	0c09      	lsrs	r1, r1, #16
 8010d64:	7091      	strb	r1, [r2, #2]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8010d66:	58e1      	ldr	r1, [r4, r3]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8010d68:	191b      	adds	r3, r3, r4
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8010d6a:	0e09      	lsrs	r1, r1, #24
 8010d6c:	70d1      	strb	r1, [r2, #3]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8010d6e:	7919      	ldrb	r1, [r3, #4]
 8010d70:	7111      	strb	r1, [r2, #4]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8010d72:	7959      	ldrb	r1, [r3, #5]
 8010d74:	7151      	strb	r1, [r2, #5]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8010d76:	799b      	ldrb	r3, [r3, #6]
 8010d78:	7193      	strb	r3, [r2, #6]
    break;
 8010d7a:	e7d3      	b.n	8010d24 <CDC_Control+0xc>
 8010d7c:	20002a10 	.word	0x20002a10

08010d80 <CDC_TransmitCplt>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
  return (USBD_OK);
}
 8010d80:	2000      	movs	r0, #0
 8010d82:	4770      	bx	lr

08010d84 <CDC_Init>:
{
 8010d84:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8010d86:	4b04      	ldr	r3, [pc, #16]	@ (8010d98 <CDC_Init+0x14>)
 8010d88:	0202      	lsls	r2, r0, #8
 8010d8a:	4904      	ldr	r1, [pc, #16]	@ (8010d9c <CDC_Init+0x18>)
 8010d8c:	18d2      	adds	r2, r2, r3
 8010d8e:	f000 fa99 	bl	80112c4 <USBD_CDC_SetRxBuffer>
}
 8010d92:	2000      	movs	r0, #0
 8010d94:	bd10      	pop	{r4, pc}
 8010d96:	46c0      	nop			@ (mov r8, r8)
 8010d98:	20002a18 	.word	0x20002a18
 8010d9c:	200026f4 	.word	0x200026f4

08010da0 <CDC_Receive>:
{
 8010da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010da2:	0005      	movs	r5, r0
	if(Reader.CDC_Len_Receive == 64)
 8010da4:	4e1d      	ldr	r6, [pc, #116]	@ (8010e1c <CDC_Receive+0x7c>)
 8010da6:	481e      	ldr	r0, [pc, #120]	@ (8010e20 <CDC_Receive+0x80>)
{
 8010da8:	000c      	movs	r4, r1
	if(Reader.CDC_Len_Receive == 64)
 8010daa:	5c33      	ldrb	r3, [r6, r0]
		for( uint32_t i = 0; i < *Len; i ++ ){
 8010dac:	6812      	ldr	r2, [r2, #0]
	if(Reader.CDC_Len_Receive == 64)
 8010dae:	2b40      	cmp	r3, #64	@ 0x40
 8010db0:	d11d      	bne.n	8010dee <CDC_Receive+0x4e>
		for( uint32_t i = 0; i < *Len; i ++ ){
 8010db2:	2300      	movs	r3, #0
			Reader.CDC_Buffer_Receive[i + 64] = Buf[i];
 8010db4:	491b      	ldr	r1, [pc, #108]	@ (8010e24 <CDC_Receive+0x84>)
 8010db6:	e002      	b.n	8010dbe <CDC_Receive+0x1e>
 8010db8:	5ce7      	ldrb	r7, [r4, r3]
 8010dba:	54cf      	strb	r7, [r1, r3]
		for( uint32_t i = 0; i < *Len; i ++ ){
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d1fa      	bne.n	8010db8 <CDC_Receive+0x18>
		Reader.CDC_Len_Receive += *Len;
 8010dc2:	0011      	movs	r1, r2
 8010dc4:	3140      	adds	r1, #64	@ 0x40
		Reader.CDC_Len_Receive += *Len;
 8010dc6:	b2c9      	uxtb	r1, r1
		Reader.CDC_Len_Receive += *Len;
 8010dc8:	5431      	strb	r1, [r6, r0]
	if(*Len != 64){
 8010dca:	2a40      	cmp	r2, #64	@ 0x40
 8010dcc:	d002      	beq.n	8010dd4 <CDC_Receive+0x34>
		Reader_CDC_IRQHandler(Reader.CDC_Buffer_Receive, Reader.CDC_Len_Receive);
 8010dce:	4816      	ldr	r0, [pc, #88]	@ (8010e28 <CDC_Receive+0x88>)
 8010dd0:	f7f1 fe7c 	bl	8002acc <Reader_CDC_IRQHandler>
	USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8010dd4:	4b15      	ldr	r3, [pc, #84]	@ (8010e2c <CDC_Receive+0x8c>)
 8010dd6:	0022      	movs	r2, r4
 8010dd8:	001c      	movs	r4, r3
 8010dda:	0019      	movs	r1, r3
 8010ddc:	0028      	movs	r0, r5
 8010dde:	f000 fa71 	bl	80112c4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8010de2:	0028      	movs	r0, r5
 8010de4:	0021      	movs	r1, r4
 8010de6:	f000 faa1 	bl	801132c <USBD_CDC_ReceivePacket>
}
 8010dea:	2000      	movs	r0, #0
 8010dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(Reader.CDC_Len_Receive == 128){
 8010dee:	2b80      	cmp	r3, #128	@ 0x80
 8010df0:	d00d      	beq.n	8010e0e <CDC_Receive+0x6e>
		for( uint32_t i = 0; i < *Len; i ++ ){
 8010df2:	2300      	movs	r3, #0
			Reader.CDC_Buffer_Receive[i] = Buf[i];
 8010df4:	490c      	ldr	r1, [pc, #48]	@ (8010e28 <CDC_Receive+0x88>)
		for( uint32_t i = 0; i < *Len; i ++ ){
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d10c      	bne.n	8010e14 <CDC_Receive+0x74>
		Reader.CDC_Len_Receive = *Len;
 8010dfa:	b2d1      	uxtb	r1, r2
 8010dfc:	e7e4      	b.n	8010dc8 <CDC_Receive+0x28>
			Reader.CDC_Buffer_Receive[i + 128] = Buf[i];
 8010dfe:	5ce7      	ldrb	r7, [r4, r3]
 8010e00:	54cf      	strb	r7, [r1, r3]
		for( uint32_t i = 0; i < *Len; i ++ ){
 8010e02:	3301      	adds	r3, #1
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d1fa      	bne.n	8010dfe <CDC_Receive+0x5e>
		Reader.CDC_Len_Receive += *Len;
 8010e08:	0011      	movs	r1, r2
 8010e0a:	3980      	subs	r1, #128	@ 0x80
 8010e0c:	e7db      	b.n	8010dc6 <CDC_Receive+0x26>
		for( uint32_t i = 0; i < *Len; i ++ ){
 8010e0e:	2300      	movs	r3, #0
			Reader.CDC_Buffer_Receive[i + 128] = Buf[i];
 8010e10:	4907      	ldr	r1, [pc, #28]	@ (8010e30 <CDC_Receive+0x90>)
 8010e12:	e7f7      	b.n	8010e04 <CDC_Receive+0x64>
			Reader.CDC_Buffer_Receive[i] = Buf[i];
 8010e14:	5ce7      	ldrb	r7, [r4, r3]
 8010e16:	54cf      	strb	r7, [r1, r3]
		for( uint32_t i = 0; i < *Len; i ++ ){
 8010e18:	3301      	adds	r3, #1
 8010e1a:	e7ec      	b.n	8010df6 <CDC_Receive+0x56>
 8010e1c:	20000c4a 	.word	0x20000c4a
 8010e20:	00000202 	.word	0x00000202
 8010e24:	20000d8c 	.word	0x20000d8c
 8010e28:	20000d4c 	.word	0x20000d4c
 8010e2c:	200026f4 	.word	0x200026f4
 8010e30:	20000dcc 	.word	0x20000dcc

08010e34 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8010e34:	b570      	push	{r4, r5, r6, lr}
 8010e36:	0004      	movs	r4, r0
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
  hcdc = &CDC_ACM_Class_Data[ch];
  if (hcdc->TxState != 0)
 8010e38:	2087      	movs	r0, #135	@ 0x87
 8010e3a:	0080      	lsls	r0, r0, #2
 8010e3c:	4360      	muls	r0, r4
{
 8010e3e:	0013      	movs	r3, r2
  if (hcdc->TxState != 0)
 8010e40:	4a08      	ldr	r2, [pc, #32]	@ (8010e64 <CDC_Transmit+0x30>)
 8010e42:	1880      	adds	r0, r0, r2
 8010e44:	6802      	ldr	r2, [r0, #0]
  {
    return USBD_BUSY;
 8010e46:	2001      	movs	r0, #1
  if (hcdc->TxState != 0)
 8010e48:	2a00      	cmp	r2, #0
 8010e4a:	d109      	bne.n	8010e60 <CDC_Transmit+0x2c>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8010e4c:	4d06      	ldr	r5, [pc, #24]	@ (8010e68 <CDC_Transmit+0x34>)
 8010e4e:	000a      	movs	r2, r1
 8010e50:	0020      	movs	r0, r4
 8010e52:	0029      	movs	r1, r5
 8010e54:	f000 fa24 	bl	80112a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8010e58:	0029      	movs	r1, r5
 8010e5a:	0020      	movs	r0, r4
 8010e5c:	f000 fa3c 	bl	80112d8 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8010e60:	bd70      	pop	{r4, r5, r6, pc}
 8010e62:	46c0      	nop			@ (mov r8, r8)
 8010e64:	20002f2c 	.word	0x20002f2c
 8010e68:	200026f4 	.word	0x200026f4

08010e6c <USBD_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8010e6c:	2312      	movs	r3, #18
  return USBD_DeviceDesc;
 8010e6e:	4801      	ldr	r0, [pc, #4]	@ (8010e74 <USBD_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 8010e70:	800b      	strh	r3, [r1, #0]
}
 8010e72:	4770      	bx	lr
 8010e74:	20000650 	.word	0x20000650

08010e78 <USBD_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010e78:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 8010e7a:	4801      	ldr	r0, [pc, #4]	@ (8010e80 <USBD_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8010e7c:	800b      	strh	r3, [r1, #0]
}
 8010e7e:	4770      	bx	lr
 8010e80:	2000064c 	.word	0x2000064c

08010e84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010e84:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8010e86:	2600      	movs	r6, #0
 8010e88:	0052      	lsls	r2, r2, #1
 8010e8a:	188a      	adds	r2, r1, r2
    if (((value >> 28)) < 0xA)
 8010e8c:	0f05      	lsrs	r5, r0, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8010e8e:	b2ec      	uxtb	r4, r5
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010e90:	0023      	movs	r3, r4
 8010e92:	3337      	adds	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 8010e94:	2d09      	cmp	r5, #9
 8010e96:	d800      	bhi.n	8010e9a <IntToUnicode+0x16>
      pbuf[2 * idx] = (value >> 28) + '0';
 8010e98:	3b07      	subs	r3, #7
 8010e9a:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8010e9c:	704e      	strb	r6, [r1, #1]
  for (idx = 0; idx < len; idx++)
 8010e9e:	3102      	adds	r1, #2
    value = value << 4;
 8010ea0:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8010ea2:	428a      	cmp	r2, r1
 8010ea4:	d1f2      	bne.n	8010e8c <IntToUnicode+0x8>
  }
}
 8010ea6:	bd70      	pop	{r4, r5, r6, pc}

08010ea8 <USBD_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8010ea8:	231a      	movs	r3, #26
{
 8010eaa:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8010eac:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010eae:	4b0a      	ldr	r3, [pc, #40]	@ (8010ed8 <USBD_SerialStrDescriptor+0x30>)
 8010eb0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8010edc <USBD_SerialStrDescriptor+0x34>)
  deviceserial0 += deviceserial2;
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8010eb8:	2800      	cmp	r0, #0
 8010eba:	d00a      	beq.n	8010ed2 <USBD_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010ebc:	4b08      	ldr	r3, [pc, #32]	@ (8010ee0 <USBD_SerialStrDescriptor+0x38>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010ebe:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010ec0:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010ec2:	4908      	ldr	r1, [pc, #32]	@ (8010ee4 <USBD_SerialStrDescriptor+0x3c>)
 8010ec4:	f7ff ffde 	bl	8010e84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010ec8:	2204      	movs	r2, #4
 8010eca:	0020      	movs	r0, r4
 8010ecc:	4906      	ldr	r1, [pc, #24]	@ (8010ee8 <USBD_SerialStrDescriptor+0x40>)
 8010ece:	f7ff ffd9 	bl	8010e84 <IntToUnicode>
  return (uint8_t *) USBD_StringSerial;
 8010ed2:	4806      	ldr	r0, [pc, #24]	@ (8010eec <USBD_SerialStrDescriptor+0x44>)
}
 8010ed4:	bd10      	pop	{r4, pc}
 8010ed6:	46c0      	nop			@ (mov r8, r8)
 8010ed8:	1ffff7ac 	.word	0x1ffff7ac
 8010edc:	1ffff7b4 	.word	0x1ffff7b4
 8010ee0:	1ffff7b0 	.word	0x1ffff7b0
 8010ee4:	20000632 	.word	0x20000632
 8010ee8:	20000642 	.word	0x20000642
 8010eec:	20000630 	.word	0x20000630

08010ef0 <USBD_ManufacturerStrDescriptor>:
{
 8010ef0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ef2:	4c04      	ldr	r4, [pc, #16]	@ (8010f04 <USBD_ManufacturerStrDescriptor+0x14>)
{
 8010ef4:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ef6:	0021      	movs	r1, r4
 8010ef8:	4803      	ldr	r0, [pc, #12]	@ (8010f08 <USBD_ManufacturerStrDescriptor+0x18>)
 8010efa:	f001 f912 	bl	8012122 <USBD_GetString>
}
 8010efe:	0020      	movs	r0, r4
 8010f00:	bd10      	pop	{r4, pc}
 8010f02:	46c0      	nop			@ (mov r8, r8)
 8010f04:	20002b18 	.word	0x20002b18
 8010f08:	08013e02 	.word	0x08013e02

08010f0c <USBD_ProductStrDescriptor>:
{
 8010f0c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010f0e:	4c04      	ldr	r4, [pc, #16]	@ (8010f20 <USBD_ProductStrDescriptor+0x14>)
{
 8010f10:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010f12:	0021      	movs	r1, r4
 8010f14:	4803      	ldr	r0, [pc, #12]	@ (8010f24 <USBD_ProductStrDescriptor+0x18>)
 8010f16:	f001 f904 	bl	8012122 <USBD_GetString>
}
 8010f1a:	0020      	movs	r0, r4
 8010f1c:	bd10      	pop	{r4, pc}
 8010f1e:	46c0      	nop			@ (mov r8, r8)
 8010f20:	20002b18 	.word	0x20002b18
 8010f24:	08013e0c 	.word	0x08013e0c

08010f28 <USBD_ConfigStrDescriptor>:
{
 8010f28:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010f2a:	4c04      	ldr	r4, [pc, #16]	@ (8010f3c <USBD_ConfigStrDescriptor+0x14>)
{
 8010f2c:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010f2e:	0021      	movs	r1, r4
 8010f30:	4803      	ldr	r0, [pc, #12]	@ (8010f40 <USBD_ConfigStrDescriptor+0x18>)
 8010f32:	f001 f8f6 	bl	8012122 <USBD_GetString>
}
 8010f36:	0020      	movs	r0, r4
 8010f38:	bd10      	pop	{r4, pc}
 8010f3a:	46c0      	nop			@ (mov r8, r8)
 8010f3c:	20002b18 	.word	0x20002b18
 8010f40:	08013e13 	.word	0x08013e13

08010f44 <USBD_InterfaceStrDescriptor>:
{
 8010f44:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010f46:	4c04      	ldr	r4, [pc, #16]	@ (8010f58 <USBD_InterfaceStrDescriptor+0x14>)
{
 8010f48:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010f4a:	0021      	movs	r1, r4
 8010f4c:	4803      	ldr	r0, [pc, #12]	@ (8010f5c <USBD_InterfaceStrDescriptor+0x18>)
 8010f4e:	f001 f8e8 	bl	8012122 <USBD_GetString>
}
 8010f52:	0020      	movs	r0, r4
 8010f54:	bd10      	pop	{r4, pc}
 8010f56:	46c0      	nop			@ (mov r8, r8)
 8010f58:	20002b18 	.word	0x20002b18
 8010f5c:	08013e1c 	.word	0x08013e1c

08010f60 <CUSTOM_HID_Init>:
static int8_t CUSTOM_HID_Init(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8010f60:	2000      	movs	r0, #0
 8010f62:	4770      	bx	lr

08010f64 <CUSTOM_HID_OutEvent>:
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8010f64:	2000      	movs	r0, #0
 8010f66:	4770      	bx	lr

08010f68 <CUSTOM_HID_DeInit>:
static int8_t CUSTOM_HID_DeInit(void)
 8010f68:	2000      	movs	r0, #0
 8010f6a:	4770      	bx	lr

08010f6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (hcdc == NULL)
    {
      return (uint8_t)USBD_FAIL;
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010f6e:	2580      	movs	r5, #128	@ 0x80
 8010f70:	26af      	movs	r6, #175	@ 0xaf
{
 8010f72:	9001      	str	r0, [sp, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8010f74:	2000      	movs	r0, #0
    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010f76:	00ad      	lsls	r5, r5, #2
 8010f78:	00b6      	lsls	r6, r6, #2
 8010f7a:	4c0a      	ldr	r4, [pc, #40]	@ (8010fa4 <USBD_CDC_EP0_RxReady+0x38>)
 8010f7c:	5d61      	ldrb	r1, [r4, r5]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	d001      	beq.n	8010f86 <USBD_CDC_EP0_RxReady+0x1a>
      hcdc->CmdOpCode = 0xFFU;
    }
  }

  return (uint8_t)USBD_OK;
}
 8010f82:	2000      	movs	r0, #0
 8010f84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010f86:	9b01      	ldr	r3, [sp, #4]
 8010f88:	599a      	ldr	r2, [r3, r6]
 8010f8a:	2a00      	cmp	r2, #0
 8010f8c:	d0f9      	beq.n	8010f82 <USBD_CDC_EP0_RxReady+0x16>
 8010f8e:	29ff      	cmp	r1, #255	@ 0xff
 8010f90:	d0f7      	beq.n	8010f82 <USBD_CDC_EP0_RxReady+0x16>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8010f92:	4b05      	ldr	r3, [pc, #20]	@ (8010fa8 <USBD_CDC_EP0_RxReady+0x3c>)
 8010f94:	6897      	ldr	r7, [r2, #8]
 8010f96:	5ce3      	ldrb	r3, [r4, r3]
 8010f98:	0022      	movs	r2, r4
 8010f9a:	47b8      	blx	r7
      hcdc->CmdOpCode = 0xFFU;
 8010f9c:	23ff      	movs	r3, #255	@ 0xff
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8010f9e:	2001      	movs	r0, #1
      hcdc->CmdOpCode = 0xFFU;
 8010fa0:	5563      	strb	r3, [r4, r5]
 8010fa2:	e7ea      	b.n	8010f7a <USBD_CDC_EP0_RxReady+0xe>
 8010fa4:	20002d18 	.word	0x20002d18
 8010fa8:	00000201 	.word	0x00000201

08010fac <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010fac:	234b      	movs	r3, #75	@ 0x4b
 8010fae:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
 8010fb0:	4800      	ldr	r0, [pc, #0]	@ (8010fb4 <USBD_CDC_GetFSCfgDesc+0x8>)
}
 8010fb2:	4770      	bx	lr
 8010fb4:	200006b4 	.word	0x200006b4

08010fb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010fb8:	234b      	movs	r3, #75	@ 0x4b
 8010fba:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
 8010fbc:	4800      	ldr	r0, [pc, #0]	@ (8010fc0 <USBD_CDC_GetHSCfgDesc+0x8>)
}
 8010fbe:	4770      	bx	lr
 8010fc0:	20000700 	.word	0x20000700

08010fc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010fc4:	233f      	movs	r3, #63	@ 0x3f
 8010fc6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010fc8:	4800      	ldr	r0, [pc, #0]	@ (8010fcc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
}
 8010fca:	4770      	bx	lr
 8010fcc:	20000788 	.word	0x20000788

08010fd0 <USBD_CDC_DataOut>:
{
 8010fd0:	b510      	push	{r4, lr}
 8010fd2:	0004      	movs	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010fd4:	f001 f9af 	bl	8012336 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8010fd8:	21af      	movs	r1, #175	@ 0xaf
 8010fda:	0089      	lsls	r1, r1, #2
 8010fdc:	5861      	ldr	r1, [r4, r1]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010fde:	2283      	movs	r2, #131	@ 0x83
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8010fe0:	68cc      	ldr	r4, [r1, #12]
 8010fe2:	2181      	movs	r1, #129	@ 0x81
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010fe4:	4b04      	ldr	r3, [pc, #16]	@ (8010ff8 <USBD_CDC_DataOut+0x28>)
 8010fe6:	0092      	lsls	r2, r2, #2
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8010fe8:	0089      	lsls	r1, r1, #2
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010fea:	5098      	str	r0, [r3, r2]
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8010fec:	5859      	ldr	r1, [r3, r1]
 8010fee:	4a03      	ldr	r2, [pc, #12]	@ (8010ffc <USBD_CDC_DataOut+0x2c>)
 8010ff0:	2000      	movs	r0, #0
 8010ff2:	47a0      	blx	r4
}
 8010ff4:	2000      	movs	r0, #0
 8010ff6:	bd10      	pop	{r4, pc}
 8010ff8:	20002d18 	.word	0x20002d18
 8010ffc:	20002f24 	.word	0x20002f24

08011000 <USBD_CDC_DataIn>:
{
 8011000:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011002:	2614      	movs	r6, #20
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011004:	23c4      	movs	r3, #196	@ 0xc4
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011006:	434e      	muls	r6, r1
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011008:	009b      	lsls	r3, r3, #2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801100a:	1986      	adds	r6, r0, r6
{
 801100c:	0005      	movs	r5, r0
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801100e:	58c3      	ldr	r3, [r0, r3]
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011010:	69b0      	ldr	r0, [r6, #24]
{
 8011012:	000c      	movs	r4, r1
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011014:	2800      	cmp	r0, #0
 8011016:	d00f      	beq.n	8011038 <USBD_CDC_DataIn+0x38>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011018:	2228      	movs	r2, #40	@ 0x28
 801101a:	434a      	muls	r2, r1
 801101c:	189b      	adds	r3, r3, r2
 801101e:	6a19      	ldr	r1, [r3, #32]
 8011020:	f7ef f928 	bl	8000274 <__aeabi_uidivmod>
 8011024:	1e0a      	subs	r2, r1, #0
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011026:	d107      	bne.n	8011038 <USBD_CDC_DataIn+0x38>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011028:	000b      	movs	r3, r1
    pdev->ep_in[epnum].total_length = 0U;
 801102a:	61b1      	str	r1, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801102c:	0028      	movs	r0, r5
 801102e:	0021      	movs	r1, r4
 8011030:	f001 f9c9 	bl	80123c6 <USBD_LL_Transmit>
}
 8011034:	2000      	movs	r0, #0
 8011036:	bd70      	pop	{r4, r5, r6, pc}
    hcdc->TxState = 0U;
 8011038:	2385      	movs	r3, #133	@ 0x85
 801103a:	2000      	movs	r0, #0
 801103c:	4907      	ldr	r1, [pc, #28]	@ (801105c <USBD_CDC_DataIn+0x5c>)
 801103e:	009b      	lsls	r3, r3, #2
 8011040:	50c8      	str	r0, [r1, r3]
    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8011042:	33a8      	adds	r3, #168	@ 0xa8
 8011044:	58eb      	ldr	r3, [r5, r3]
 8011046:	691d      	ldr	r5, [r3, #16]
 8011048:	4285      	cmp	r5, r0
 801104a:	d0f3      	beq.n	8011034 <USBD_CDC_DataIn+0x34>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801104c:	0023      	movs	r3, r4
 801104e:	2482      	movs	r4, #130	@ 0x82
 8011050:	00a4      	lsls	r4, r4, #2
 8011052:	4a03      	ldr	r2, [pc, #12]	@ (8011060 <USBD_CDC_DataIn+0x60>)
 8011054:	5909      	ldr	r1, [r1, r4]
 8011056:	47a8      	blx	r5
 8011058:	e7ec      	b.n	8011034 <USBD_CDC_DataIn+0x34>
 801105a:	46c0      	nop			@ (mov r8, r8)
 801105c:	20002d18 	.word	0x20002d18
 8011060:	20002f28 	.word	0x20002f28

08011064 <USBD_CDC_Setup>:
{
 8011064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011066:	000d      	movs	r5, r1
  uint16_t status_info = 0U;
 8011068:	466a      	mov	r2, sp
 801106a:	1d91      	adds	r1, r2, #6
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801106c:	782a      	ldrb	r2, [r5, #0]
  uint8_t ifalt = 0U;
 801106e:	466b      	mov	r3, sp
{
 8011070:	0004      	movs	r4, r0
 8011072:	2660      	movs	r6, #96	@ 0x60
  uint8_t ifalt = 0U;
 8011074:	2000      	movs	r0, #0
 8011076:	0017      	movs	r7, r2
 8011078:	3305      	adds	r3, #5
  uint16_t status_info = 0U;
 801107a:	8008      	strh	r0, [r1, #0]
 801107c:	4037      	ands	r7, r6
  uint8_t ifalt = 0U;
 801107e:	7018      	strb	r0, [r3, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011080:	4232      	tst	r2, r6
 8011082:	d02e      	beq.n	80110e2 <USBD_CDC_Setup+0x7e>
 8011084:	2f20      	cmp	r7, #32
 8011086:	d13d      	bne.n	8011104 <USBD_CDC_Setup+0xa0>
    if (req->wLength != 0U)
 8011088:	88eb      	ldrh	r3, [r5, #6]
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 801108a:	7869      	ldrb	r1, [r5, #1]
    if (req->wLength != 0U)
 801108c:	4283      	cmp	r3, r0
 801108e:	d020      	beq.n	80110d2 <USBD_CDC_Setup+0x6e>
      if ((req->bmRequest & 0x80U) != 0U)
 8011090:	b252      	sxtb	r2, r2
 8011092:	4e26      	ldr	r6, [pc, #152]	@ (801112c <USBD_CDC_Setup+0xc8>)
 8011094:	4282      	cmp	r2, r0
 8011096:	da10      	bge.n	80110ba <USBD_CDC_Setup+0x56>
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8011098:	22af      	movs	r2, #175	@ 0xaf
 801109a:	0092      	lsls	r2, r2, #2
 801109c:	58a2      	ldr	r2, [r4, r2]
 801109e:	6897      	ldr	r7, [r2, #8]
 80110a0:	0032      	movs	r2, r6
 80110a2:	47b8      	blx	r7
        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80110a4:	88eb      	ldrh	r3, [r5, #6]
 80110a6:	1c1a      	adds	r2, r3, #0
 80110a8:	2b07      	cmp	r3, #7
 80110aa:	d900      	bls.n	80110ae <USBD_CDC_Setup+0x4a>
 80110ac:	2207      	movs	r2, #7
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 80110ae:	0031      	movs	r1, r6
 80110b0:	b292      	uxth	r2, r2
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80110b2:	0020      	movs	r0, r4
 80110b4:	f001 f852 	bl	801215c <USBD_CtlSendData>
 80110b8:	e009      	b.n	80110ce <USBD_CDC_Setup+0x6a>
        hcdc->CmdOpCode = req->bRequest;
 80110ba:	2280      	movs	r2, #128	@ 0x80
 80110bc:	0092      	lsls	r2, r2, #2
 80110be:	54b1      	strb	r1, [r6, r2]
        hcdc->CmdLength = (uint8_t)req->wLength;
 80110c0:	4a1b      	ldr	r2, [pc, #108]	@ (8011130 <USBD_CDC_Setup+0xcc>)
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80110c2:	0031      	movs	r1, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 80110c4:	54b3      	strb	r3, [r6, r2]
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80110c6:	0020      	movs	r0, r4
 80110c8:	001a      	movs	r2, r3
 80110ca:	f001 f85d 	bl	8012188 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80110ce:	2000      	movs	r0, #0
}
 80110d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 80110d2:	22af      	movs	r2, #175	@ 0xaf
 80110d4:	0092      	lsls	r2, r2, #2
 80110d6:	58a2      	ldr	r2, [r4, r2]
 80110d8:	0018      	movs	r0, r3
 80110da:	6894      	ldr	r4, [r2, #8]
 80110dc:	002a      	movs	r2, r5
 80110de:	47a0      	blx	r4
 80110e0:	e7f5      	b.n	80110ce <USBD_CDC_Setup+0x6a>
    switch (req->bRequest)
 80110e2:	7868      	ldrb	r0, [r5, #1]
 80110e4:	280b      	cmp	r0, #11
 80110e6:	d80d      	bhi.n	8011104 <USBD_CDC_Setup+0xa0>
 80110e8:	f7ef f816 	bl	8000118 <__gnu_thumb1_case_sqi>
 80110ec:	0c0cf106 	.word	0x0c0cf106
 80110f0:	0c0c0c0c 	.word	0x0c0c0c0c
 80110f4:	1a120c0c 	.word	0x1a120c0c
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110f8:	23a7      	movs	r3, #167	@ 0xa7
 80110fa:	009b      	lsls	r3, r3, #2
 80110fc:	5ce3      	ldrb	r3, [r4, r3]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80110fe:	2202      	movs	r2, #2
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011100:	2b03      	cmp	r3, #3
 8011102:	d0d6      	beq.n	80110b2 <USBD_CDC_Setup+0x4e>
      USBD_CtlError(pdev, req);
 8011104:	0020      	movs	r0, r4
 8011106:	0029      	movs	r1, r5
 8011108:	f001 f801 	bl	801210e <USBD_CtlError>
        ret = USBD_FAIL;
 801110c:	2003      	movs	r0, #3
 801110e:	e7df      	b.n	80110d0 <USBD_CDC_Setup+0x6c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011110:	22a7      	movs	r2, #167	@ 0xa7
 8011112:	0092      	lsls	r2, r2, #2
 8011114:	5ca2      	ldrb	r2, [r4, r2]
 8011116:	2a03      	cmp	r2, #3
 8011118:	d1f4      	bne.n	8011104 <USBD_CDC_Setup+0xa0>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801111a:	0019      	movs	r1, r3
 801111c:	3a02      	subs	r2, #2
 801111e:	e7c8      	b.n	80110b2 <USBD_CDC_Setup+0x4e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011120:	23a7      	movs	r3, #167	@ 0xa7
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	5ce3      	ldrb	r3, [r4, r3]
 8011126:	2b03      	cmp	r3, #3
 8011128:	d0d1      	beq.n	80110ce <USBD_CDC_Setup+0x6a>
 801112a:	e7eb      	b.n	8011104 <USBD_CDC_Setup+0xa0>
 801112c:	20002d18 	.word	0x20002d18
 8011130:	00000201 	.word	0x00000201

08011134 <USBD_CDC_DeInit>:
{
 8011134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8011136:	4d16      	ldr	r5, [pc, #88]	@ (8011190 <USBD_CDC_DeInit+0x5c>)
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8011138:	260f      	movs	r6, #15
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 801113a:	7829      	ldrb	r1, [r5, #0]
{
 801113c:	0004      	movs	r4, r0
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 801113e:	f001 f91e 	bl	801237e <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8011142:	2214      	movs	r2, #20
 8011144:	782b      	ldrb	r3, [r5, #0]
 8011146:	2500      	movs	r5, #0
 8011148:	4033      	ands	r3, r6
 801114a:	4353      	muls	r3, r2
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 801114c:	4f11      	ldr	r7, [pc, #68]	@ (8011194 <USBD_CDC_DeInit+0x60>)
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 801114e:	18e3      	adds	r3, r4, r3
 8011150:	849d      	strh	r5, [r3, #36]	@ 0x24
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8011152:	7839      	ldrb	r1, [r7, #0]
 8011154:	0020      	movs	r0, r4
 8011156:	f001 f912 	bl	801237e <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 801115a:	2214      	movs	r2, #20
 801115c:	783b      	ldrb	r3, [r7, #0]
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 801115e:	4f0e      	ldr	r7, [pc, #56]	@ (8011198 <USBD_CDC_DeInit+0x64>)
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8011160:	4033      	ands	r3, r6
 8011162:	4353      	muls	r3, r2
 8011164:	18e3      	adds	r3, r4, r3
 8011166:	3365      	adds	r3, #101	@ 0x65
 8011168:	33ff      	adds	r3, #255	@ 0xff
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 801116a:	7839      	ldrb	r1, [r7, #0]
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 801116c:	801d      	strh	r5, [r3, #0]
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 801116e:	0020      	movs	r0, r4
 8011170:	f001 f905 	bl	801237e <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8011174:	2214      	movs	r2, #20
 8011176:	783b      	ldrb	r3, [r7, #0]
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8011178:	0028      	movs	r0, r5
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 801117a:	4033      	ands	r3, r6
 801117c:	4353      	muls	r3, r2
 801117e:	18e3      	adds	r3, r4, r3
 8011180:	625d      	str	r5, [r3, #36]	@ 0x24
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8011182:	23af      	movs	r3, #175	@ 0xaf
 8011184:	009b      	lsls	r3, r3, #2
 8011186:	58e3      	ldr	r3, [r4, r3]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	4798      	blx	r3
}
 801118c:	0028      	movs	r0, r5
 801118e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011190:	20002f39 	.word	0x20002f39
 8011194:	20002f38 	.word	0x20002f38
 8011198:	20002f37 	.word	0x20002f37

0801119c <USBD_CDC_Init>:
{
 801119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 801119e:	4d34      	ldr	r5, [pc, #208]	@ (8011270 <USBD_CDC_Init+0xd4>)
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80111a0:	7c03      	ldrb	r3, [r0, #16]
{
 80111a2:	0004      	movs	r4, r0
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80111a4:	7829      	ldrb	r1, [r5, #0]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d14e      	bne.n	8011248 <USBD_CDC_Init+0xac>
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80111aa:	2380      	movs	r3, #128	@ 0x80
 80111ac:	2202      	movs	r2, #2
 80111ae:	009b      	lsls	r3, r3, #2
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80111b0:	260f      	movs	r6, #15
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80111b2:	f001 f8d8 	bl	8012366 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80111b6:	782b      	ldrb	r3, [r5, #0]
 80111b8:	2514      	movs	r5, #20
 80111ba:	2201      	movs	r2, #1
 80111bc:	4033      	ands	r3, r6
 80111be:	436b      	muls	r3, r5
 80111c0:	18e3      	adds	r3, r4, r3
 80111c2:	849a      	strh	r2, [r3, #36]	@ 0x24
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80111c4:	2380      	movs	r3, #128	@ 0x80
 80111c6:	4f2b      	ldr	r7, [pc, #172]	@ (8011274 <USBD_CDC_Init+0xd8>)
 80111c8:	009b      	lsls	r3, r3, #2
 80111ca:	7839      	ldrb	r1, [r7, #0]
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80111cc:	1892      	adds	r2, r2, r2
 80111ce:	0020      	movs	r0, r4
 80111d0:	f001 f8c9 	bl	8012366 <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80111d4:	2201      	movs	r2, #1
 80111d6:	783b      	ldrb	r3, [r7, #0]
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80111d8:	0020      	movs	r0, r4
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80111da:	4033      	ands	r3, r6
 80111dc:	436b      	muls	r3, r5
 80111de:	18e3      	adds	r3, r4, r3
 80111e0:	3365      	adds	r3, #101	@ 0x65
 80111e2:	33ff      	adds	r3, #255	@ 0xff
 80111e4:	801a      	strh	r2, [r3, #0]
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80111e6:	4b24      	ldr	r3, [pc, #144]	@ (8011278 <USBD_CDC_Init+0xdc>)
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80111e8:	2203      	movs	r2, #3
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	4033      	ands	r3, r6
 80111ee:	435d      	muls	r5, r3
 80111f0:	2310      	movs	r3, #16
 80111f2:	1965      	adds	r5, r4, r5
 80111f4:	84eb      	strh	r3, [r5, #38]	@ 0x26
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80111f6:	4d20      	ldr	r5, [pc, #128]	@ (8011278 <USBD_CDC_Init+0xdc>)
 80111f8:	2308      	movs	r3, #8
 80111fa:	7829      	ldrb	r1, [r5, #0]
 80111fc:	f001 f8b3 	bl	8012366 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8011200:	230f      	movs	r3, #15
 8011202:	782a      	ldrb	r2, [r5, #0]
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8011204:	2000      	movs	r0, #0
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8011206:	401a      	ands	r2, r3
 8011208:	3305      	adds	r3, #5
 801120a:	4353      	muls	r3, r2
 801120c:	2201      	movs	r2, #1
 801120e:	18e3      	adds	r3, r4, r3
 8011210:	849a      	strh	r2, [r3, #36]	@ 0x24
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8011212:	23af      	movs	r3, #175	@ 0xaf
 8011214:	009b      	lsls	r3, r3, #2
 8011216:	58e3      	ldr	r3, [r4, r3]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	4798      	blx	r3
    hcdc->TxState = 0U;
 801121c:	2185      	movs	r1, #133	@ 0x85
 801121e:	2300      	movs	r3, #0
 8011220:	2081      	movs	r0, #129	@ 0x81
 8011222:	4a16      	ldr	r2, [pc, #88]	@ (801127c <USBD_CDC_Init+0xe0>)
 8011224:	0089      	lsls	r1, r1, #2
 8011226:	5053      	str	r3, [r2, r1]
    hcdc->RxState = 0U;
 8011228:	3104      	adds	r1, #4
 801122a:	5053      	str	r3, [r2, r1]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801122c:	7c21      	ldrb	r1, [r4, #16]
 801122e:	4b11      	ldr	r3, [pc, #68]	@ (8011274 <USBD_CDC_Init+0xd8>)
 8011230:	0080      	lsls	r0, r0, #2
 8011232:	2900      	cmp	r1, #0
 8011234:	d118      	bne.n	8011268 <USBD_CDC_Init+0xcc>
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8011236:	7819      	ldrb	r1, [r3, #0]
 8011238:	2380      	movs	r3, #128	@ 0x80
 801123a:	009b      	lsls	r3, r3, #2
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 801123c:	5812      	ldr	r2, [r2, r0]
 801123e:	0020      	movs	r0, r4
 8011240:	f001 f8ca 	bl	80123d8 <USBD_LL_PrepareReceive>
}
 8011244:	2000      	movs	r0, #0
 8011246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8011248:	2340      	movs	r3, #64	@ 0x40
 801124a:	2202      	movs	r2, #2
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 801124c:	260f      	movs	r6, #15
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 801124e:	f001 f88a 	bl	8012366 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8011252:	782b      	ldrb	r3, [r5, #0]
 8011254:	2514      	movs	r5, #20
 8011256:	2201      	movs	r2, #1
 8011258:	4033      	ands	r3, r6
 801125a:	436b      	muls	r3, r5
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 801125c:	4f05      	ldr	r7, [pc, #20]	@ (8011274 <USBD_CDC_Init+0xd8>)
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 801125e:	18e3      	adds	r3, r4, r3
 8011260:	849a      	strh	r2, [r3, #36]	@ 0x24
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8011262:	7839      	ldrb	r1, [r7, #0]
 8011264:	2340      	movs	r3, #64	@ 0x40
 8011266:	e7b1      	b.n	80111cc <USBD_CDC_Init+0x30>
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8011268:	7819      	ldrb	r1, [r3, #0]
 801126a:	2340      	movs	r3, #64	@ 0x40
 801126c:	e7e6      	b.n	801123c <USBD_CDC_Init+0xa0>
 801126e:	46c0      	nop			@ (mov r8, r8)
 8011270:	20002f39 	.word	0x20002f39
 8011274:	20002f38 	.word	0x20002f38
 8011278:	20002f37 	.word	0x20002f37
 801127c:	20002d18 	.word	0x20002d18

08011280 <USBD_CDC_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
 8011280:	234b      	movs	r3, #75	@ 0x4b
 8011282:	8003      	strh	r3, [r0, #0]
 8011284:	4800      	ldr	r0, [pc, #0]	@ (8011288 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8011286:	4770      	bx	lr
 8011288:	200006b4 	.word	0x200006b4

0801128c <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 801128c:	0003      	movs	r3, r0
  if (fops == NULL)
  {
    return (uint8_t)USBD_FAIL;
 801128e:	2003      	movs	r0, #3
  if (fops == NULL)
 8011290:	2900      	cmp	r1, #0
 8011292:	d003      	beq.n	801129c <USBD_CDC_ACM_RegisterInterface+0x10>
  }

  pdev->pUserData_CDC_ACM = fops;
 8011294:	22af      	movs	r2, #175	@ 0xaf

  return (uint8_t)USBD_OK;
 8011296:	2000      	movs	r0, #0
  pdev->pUserData_CDC_ACM = fops;
 8011298:	0092      	lsls	r2, r2, #2
 801129a:	5099      	str	r1, [r3, r2]
}
 801129c:	4770      	bx	lr
	...

080112a0 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80112a0:	b510      	push	{r4, lr}
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;

  hcdc = &CDC_ACM_Class_Data[ch];

  hcdc->TxBuffer = pbuff;
 80112a2:	2487      	movs	r4, #135	@ 0x87
 80112a4:	00a4      	lsls	r4, r4, #2
 80112a6:	4360      	muls	r0, r4
 80112a8:	4905      	ldr	r1, [pc, #20]	@ (80112c0 <USBD_CDC_SetTxBuffer+0x20>)
 80112aa:	1808      	adds	r0, r1, r0
 80112ac:	2182      	movs	r1, #130	@ 0x82
 80112ae:	0089      	lsls	r1, r1, #2
 80112b0:	1841      	adds	r1, r0, r1
 80112b2:	600a      	str	r2, [r1, #0]
  hcdc->TxLength = length;
 80112b4:	2284      	movs	r2, #132	@ 0x84
 80112b6:	0092      	lsls	r2, r2, #2
 80112b8:	1880      	adds	r0, r0, r2
 80112ba:	6003      	str	r3, [r0, #0]

  return (uint8_t)USBD_OK;
}
 80112bc:	2000      	movs	r0, #0
 80112be:	bd10      	pop	{r4, pc}
 80112c0:	20002d18 	.word	0x20002d18

080112c4 <USBD_CDC_SetRxBuffer>:
{
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;

  hcdc = &CDC_ACM_Class_Data[ch];

  hcdc->RxBuffer = pbuff;
 80112c4:	2387      	movs	r3, #135	@ 0x87
 80112c6:	009b      	lsls	r3, r3, #2
 80112c8:	4343      	muls	r3, r0
 80112ca:	4902      	ldr	r1, [pc, #8]	@ (80112d4 <USBD_CDC_SetRxBuffer+0x10>)

  return (uint8_t)USBD_OK;
}
 80112cc:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80112ce:	505a      	str	r2, [r3, r1]
}
 80112d0:	4770      	bx	lr
 80112d2:	46c0      	nop			@ (mov r8, r8)
 80112d4:	20002f1c 	.word	0x20002f1c

080112d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80112d8:	b570      	push	{r4, r5, r6, lr}
 80112da:	000e      	movs	r6, r1
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
  USBD_StatusTypeDef ret = USBD_BUSY;

  hcdc = &CDC_ACM_Class_Data[ch];

  if (hcdc->TxState == 0U)
 80112dc:	2187      	movs	r1, #135	@ 0x87
 80112de:	0089      	lsls	r1, r1, #2
 80112e0:	4341      	muls	r1, r0
 80112e2:	4a10      	ldr	r2, [pc, #64]	@ (8011324 <USBD_CDC_TransmitPacket+0x4c>)
{
 80112e4:	0003      	movs	r3, r0
  if (hcdc->TxState == 0U)
 80112e6:	1852      	adds	r2, r2, r1
 80112e8:	2185      	movs	r1, #133	@ 0x85
 80112ea:	0089      	lsls	r1, r1, #2
 80112ec:	1851      	adds	r1, r2, r1
 80112ee:	680d      	ldr	r5, [r1, #0]
 80112f0:	2001      	movs	r0, #1
 80112f2:	2d00      	cmp	r5, #0
 80112f4:	d114      	bne.n	8011320 <USBD_CDC_TransmitPacket+0x48>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 80112f6:	2414      	movs	r4, #20
    hcdc->TxState = 1U;
 80112f8:	6008      	str	r0, [r1, #0]
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 80112fa:	490b      	ldr	r1, [pc, #44]	@ (8011328 <USBD_CDC_TransmitPacket+0x50>)
 80112fc:	300e      	adds	r0, #14
 80112fe:	5cc9      	ldrb	r1, [r1, r3]
 8011300:	2384      	movs	r3, #132	@ 0x84
 8011302:	4008      	ands	r0, r1
 8011304:	4344      	muls	r4, r0

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8011306:	2082      	movs	r0, #130	@ 0x82
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8011308:	009b      	lsls	r3, r3, #2
 801130a:	18d3      	adds	r3, r2, r3
 801130c:	681b      	ldr	r3, [r3, #0]
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 801130e:	0080      	lsls	r0, r0, #2
 8011310:	1812      	adds	r2, r2, r0
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8011312:	1934      	adds	r4, r6, r4
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8011314:	0030      	movs	r0, r6
 8011316:	6812      	ldr	r2, [r2, #0]
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8011318:	61a3      	str	r3, [r4, #24]
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 801131a:	f001 f854 	bl	80123c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 801131e:	0028      	movs	r0, r5
  }

  return (uint8_t)ret;
}
 8011320:	bd70      	pop	{r4, r5, r6, pc}
 8011322:	46c0      	nop			@ (mov r8, r8)
 8011324:	20002d18 	.word	0x20002d18
 8011328:	20002f39 	.word	0x20002f39

0801132c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 801132c:	0003      	movs	r3, r0
 801132e:	b510      	push	{r4, lr}
  hcdc = &CDC_ACM_Class_Data[ch];

  if (pdev->dev_speed == USBD_SPEED_HIGH)
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8011330:	4a09      	ldr	r2, [pc, #36]	@ (8011358 <USBD_CDC_ReceivePacket+0x2c>)
{
 8011332:	0008      	movs	r0, r1
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8011334:	5cd1      	ldrb	r1, [r2, r3]
 8011336:	2287      	movs	r2, #135	@ 0x87
 8011338:	0092      	lsls	r2, r2, #2
 801133a:	4353      	muls	r3, r2
 801133c:	4a07      	ldr	r2, [pc, #28]	@ (801135c <USBD_CDC_ReceivePacket+0x30>)
 801133e:	589a      	ldr	r2, [r3, r2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011340:	7c03      	ldrb	r3, [r0, #16]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d105      	bne.n	8011352 <USBD_CDC_ReceivePacket+0x26>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8011346:	2380      	movs	r3, #128	@ 0x80
 8011348:	009b      	lsls	r3, r3, #2
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 801134a:	f001 f845 	bl	80123d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 801134e:	2000      	movs	r0, #0
 8011350:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8011352:	2340      	movs	r3, #64	@ 0x40
 8011354:	e7f9      	b.n	801134a <USBD_CDC_ReceivePacket+0x1e>
 8011356:	46c0      	nop			@ (mov r8, r8)
 8011358:	20002f38 	.word	0x20002f38
 801135c:	20002f1c 	.word	0x20002f1c

08011360 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8011360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011362:	ac05      	add	r4, sp, #20
 8011364:	7825      	ldrb	r5, [r4, #0]
 8011366:	ac06      	add	r4, sp, #24
 8011368:	7826      	ldrb	r6, [r4, #0]
 801136a:	ac07      	add	r4, sp, #28
 801136c:	7824      	ldrb	r4, [r4, #0]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
  {
    desc[2] = cmd_itf;
    desc[16] = str_idx;
    desc[10] = cmd_itf;
    desc[26] = com_itf;
 801136e:	1d07      	adds	r7, r0, #4
    desc[2] = cmd_itf;
 8011370:	72c1      	strb	r1, [r0, #11]
    desc[16] = str_idx;
 8011372:	7644      	strb	r4, [r0, #25]
    desc[10] = cmd_itf;
 8011374:	74c1      	strb	r1, [r0, #19]
    desc[26] = com_itf;
 8011376:	77fa      	strb	r2, [r7, #31]
    desc[34] = cmd_itf;
    desc[35] = com_itf;
    desc[38] = cmd_ep;
    desc[45] = com_itf;
    desc[54] = out_ep;
    desc[61] = in_ep;
 8011378:	3046      	adds	r0, #70	@ 0x46
    desc[34] = cmd_itf;
 801137a:	3727      	adds	r7, #39	@ 0x27
    desc[38] = cmd_ep;
 801137c:	713d      	strb	r5, [r7, #4]
    desc[54] = out_ep;
 801137e:	753e      	strb	r6, [r7, #20]
    desc[34] = cmd_itf;
 8011380:	7039      	strb	r1, [r7, #0]
    desc[35] = com_itf;
 8011382:	707a      	strb	r2, [r7, #1]
    desc[45] = com_itf;
 8011384:	72fa      	strb	r2, [r7, #11]
    desc[61] = in_ep;
 8011386:	7003      	strb	r3, [r0, #0]

    desc += 66;
    CDC_IN_EP[i] = in_ep;
 8011388:	4806      	ldr	r0, [pc, #24]	@ (80113a4 <USBD_Update_CDC_ACM_DESC+0x44>)
 801138a:	7003      	strb	r3, [r0, #0]
    CDC_OUT_EP[i] = out_ep;
 801138c:	4b06      	ldr	r3, [pc, #24]	@ (80113a8 <USBD_Update_CDC_ACM_DESC+0x48>)
 801138e:	701e      	strb	r6, [r3, #0]
    CDC_CMD_EP[i] = cmd_ep;
 8011390:	4b06      	ldr	r3, [pc, #24]	@ (80113ac <USBD_Update_CDC_ACM_DESC+0x4c>)
 8011392:	701d      	strb	r5, [r3, #0]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8011394:	4b06      	ldr	r3, [pc, #24]	@ (80113b0 <USBD_Update_CDC_ACM_DESC+0x50>)
 8011396:	7019      	strb	r1, [r3, #0]
    CDC_COM_ITF_NBR[i] = com_itf;
 8011398:	4b06      	ldr	r3, [pc, #24]	@ (80113b4 <USBD_Update_CDC_ACM_DESC+0x54>)
 801139a:	701a      	strb	r2, [r3, #0]
    CDC_STR_DESC_IDX[i] = str_idx;
 801139c:	4b06      	ldr	r3, [pc, #24]	@ (80113b8 <USBD_Update_CDC_ACM_DESC+0x58>)
 801139e:	701c      	strb	r4, [r3, #0]
    str_idx++;

    cmd_itf += 2;
    com_itf = cmd_itf + 1;
  }
}
 80113a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113a2:	46c0      	nop			@ (mov r8, r8)
 80113a4:	20002f39 	.word	0x20002f39
 80113a8:	20002f38 	.word	0x20002f38
 80113ac:	20002f37 	.word	0x20002f37
 80113b0:	20002f36 	.word	0x20002f36
 80113b4:	20002f35 	.word	0x20002f35
 80113b8:	20002f34 	.word	0x20002f34

080113bc <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113bc:	b570      	push	{r4, r5, r6, lr}
 80113be:	000d      	movs	r5, r1
 80113c0:	0004      	movs	r4, r0
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 80113c2:	4b05      	ldr	r3, [pc, #20]	@ (80113d8 <USBD_COMPOSITE_Init+0x1c>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 80113c8:	4b04      	ldr	r3, [pc, #16]	@ (80113dc <USBD_COMPOSITE_Init+0x20>)
 80113ca:	0029      	movs	r1, r5
 80113cc:	0020      	movs	r0, r4
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	4798      	blx	r3
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
}
 80113d2:	2000      	movs	r0, #0
 80113d4:	bd70      	pop	{r4, r5, r6, pc}
 80113d6:	46c0      	nop			@ (mov r8, r8)
 80113d8:	2000074c 	.word	0x2000074c
 80113dc:	20000920 	.word	0x20000920

080113e0 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113e0:	b570      	push	{r4, r5, r6, lr}
 80113e2:	000d      	movs	r5, r1
 80113e4:	0004      	movs	r4, r0
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 80113e6:	4b05      	ldr	r3, [pc, #20]	@ (80113fc <USBD_COMPOSITE_DeInit+0x1c>)
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 80113ec:	4b04      	ldr	r3, [pc, #16]	@ (8011400 <USBD_COMPOSITE_DeInit+0x20>)
 80113ee:	0029      	movs	r1, r5
 80113f0:	0020      	movs	r0, r4
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	4798      	blx	r3
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
}
 80113f6:	2000      	movs	r0, #0
 80113f8:	bd70      	pop	{r4, r5, r6, pc}
 80113fa:	46c0      	nop			@ (mov r8, r8)
 80113fc:	2000074c 	.word	0x2000074c
 8011400:	20000920 	.word	0x20000920

08011404 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011404:	b510      	push	{r4, lr}
 8011406:	0004      	movs	r4, r0
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8011408:	4b04      	ldr	r3, [pc, #16]	@ (801141c <USBD_COMPOSITE_EP0_RxReady+0x18>)
 801140a:	691b      	ldr	r3, [r3, #16]
 801140c:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 801140e:	4b04      	ldr	r3, [pc, #16]	@ (8011420 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 8011410:	0020      	movs	r0, r4
 8011412:	691b      	ldr	r3, [r3, #16]
 8011414:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 8011416:	2000      	movs	r0, #0
 8011418:	bd10      	pop	{r4, pc}
 801141a:	46c0      	nop			@ (mov r8, r8)
 801141c:	2000074c 	.word	0x2000074c
 8011420:	20000920 	.word	0x20000920

08011424 <USBD_COMPOSITE_EP0_TxReady>:
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 8011424:	2000      	movs	r0, #0
 8011426:	4770      	bx	lr

08011428 <USBD_COMPOSITE_IsoINIncomplete>:
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 8011428:	2000      	movs	r0, #0
 801142a:	4770      	bx	lr

0801142c <USBD_COMPOSITE_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 801142c:	236b      	movs	r3, #107	@ 0x6b
 801142e:	8003      	strh	r3, [r0, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8011430:	4800      	ldr	r0, [pc, #0]	@ (8011434 <USBD_COMPOSITE_GetHSCfgDesc+0x8>)
}
 8011432:	4770      	bx	lr
 8011434:	20002f7c 	.word	0x20002f7c

08011438 <USBD_COMPOSITE_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8011438:	236b      	movs	r3, #107	@ 0x6b
 801143a:	8003      	strh	r3, [r0, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 801143c:	4800      	ldr	r0, [pc, #0]	@ (8011440 <USBD_COMPOSITE_GetFSCfgDesc+0x8>)
}
 801143e:	4770      	bx	lr
 8011440:	20002fe7 	.word	0x20002fe7

08011444 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8011444:	233f      	movs	r3, #63	@ 0x3f
 8011446:	8003      	strh	r3, [r0, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8011448:	4800      	ldr	r0, [pc, #0]	@ (801144c <USBD_COMPOSITE_GetDeviceQualifierDesc+0x8>)
}
 801144a:	4770      	bx	lr
 801144c:	200007c8 	.word	0x200007c8

08011450 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8011450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8011452:	4b14      	ldr	r3, [pc, #80]	@ (80114a4 <USBD_COMPOSITE_GetUsrStringDesc+0x54>)
{
 8011454:	000d      	movs	r5, r1
  if (index <= USBD_Track_String_Index)
 8011456:	781b      	ldrb	r3, [r3, #0]
{
 8011458:	0016      	movs	r6, r2
    return USBD_StrDesc;
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 801145a:	2000      	movs	r0, #0
  if (index <= USBD_Track_String_Index)
 801145c:	428b      	cmp	r3, r1
 801145e:	d31e      	bcc.n	801149e <USBD_COMPOSITE_GetUsrStringDesc+0x4e>
    char str_buffer[16] = "";
 8011460:	0001      	movs	r1, r0
 8011462:	2210      	movs	r2, #16
 8011464:	4668      	mov	r0, sp
 8011466:	f001 ff25 	bl	80132b4 <memset>
      if (index == CDC_STR_DESC_IDX[i])
 801146a:	4b0f      	ldr	r3, [pc, #60]	@ (80114a8 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 801146c:	4c0f      	ldr	r4, [pc, #60]	@ (80114ac <USBD_COMPOSITE_GetUsrStringDesc+0x5c>)
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	42ab      	cmp	r3, r5
 8011472:	d10a      	bne.n	801148a <USBD_COMPOSITE_GetUsrStringDesc+0x3a>
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8011474:	2110      	movs	r1, #16
 8011476:	4a0e      	ldr	r2, [pc, #56]	@ (80114b0 <USBD_COMPOSITE_GetUsrStringDesc+0x60>)
 8011478:	2300      	movs	r3, #0
 801147a:	4668      	mov	r0, sp
 801147c:	f001 fe8a 	bl	8013194 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8011480:	0032      	movs	r2, r6
 8011482:	0021      	movs	r1, r4
 8011484:	4668      	mov	r0, sp
 8011486:	f000 fe4c 	bl	8012122 <USBD_GetString>
    if (index == CUSTOM_HID_STR_DESC_IDX)
 801148a:	4b0a      	ldr	r3, [pc, #40]	@ (80114b4 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	42ab      	cmp	r3, r5
 8011490:	d104      	bne.n	801149c <USBD_COMPOSITE_GetUsrStringDesc+0x4c>
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 8011492:	0032      	movs	r2, r6
 8011494:	0021      	movs	r1, r4
 8011496:	4808      	ldr	r0, [pc, #32]	@ (80114b8 <USBD_COMPOSITE_GetUsrStringDesc+0x68>)
 8011498:	f000 fe43 	bl	8012122 <USBD_GetString>
    return USBD_StrDesc;
 801149c:	0020      	movs	r0, r4
  }
}
 801149e:	b004      	add	sp, #16
 80114a0:	bd70      	pop	{r4, r5, r6, pc}
 80114a2:	46c0      	nop			@ (mov r8, r8)
 80114a4:	20000807 	.word	0x20000807
 80114a8:	20002f34 	.word	0x20002f34
 80114ac:	20002f3a 	.word	0x20002f3a
 80114b0:	08013e25 	.word	0x08013e25
 80114b4:	2000306c 	.word	0x2000306c
 80114b8:	08013e35 	.word	0x08013e35

080114bc <USBD_COMPOSITE_Setup>:
{
 80114bc:	b510      	push	{r4, lr}
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 80114be:	4b0b      	ldr	r3, [pc, #44]	@ (80114ec <USBD_COMPOSITE_Setup+0x30>)
 80114c0:	790a      	ldrb	r2, [r1, #4]
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	4293      	cmp	r3, r2
 80114c6:	d003      	beq.n	80114d0 <USBD_COMPOSITE_Setup+0x14>
 80114c8:	4b09      	ldr	r3, [pc, #36]	@ (80114f0 <USBD_COMPOSITE_Setup+0x34>)
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	4293      	cmp	r3, r2
 80114ce:	d105      	bne.n	80114dc <USBD_COMPOSITE_Setup+0x20>
      return USBD_CDC_ACM.Setup(pdev, req);
 80114d0:	4b08      	ldr	r3, [pc, #32]	@ (80114f4 <USBD_COMPOSITE_Setup+0x38>)
    return USBD_HID_CUSTOM.Setup(pdev, req);
 80114d2:	689b      	ldr	r3, [r3, #8]
 80114d4:	4798      	blx	r3
 80114d6:	0003      	movs	r3, r0
}
 80114d8:	0018      	movs	r0, r3
 80114da:	bd10      	pop	{r4, pc}
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 80114dc:	4b06      	ldr	r3, [pc, #24]	@ (80114f8 <USBD_COMPOSITE_Setup+0x3c>)
 80114de:	781c      	ldrb	r4, [r3, #0]
  return USBD_FAIL;
 80114e0:	2303      	movs	r3, #3
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 80114e2:	4294      	cmp	r4, r2
 80114e4:	d1f8      	bne.n	80114d8 <USBD_COMPOSITE_Setup+0x1c>
    return USBD_HID_CUSTOM.Setup(pdev, req);
 80114e6:	4b05      	ldr	r3, [pc, #20]	@ (80114fc <USBD_COMPOSITE_Setup+0x40>)
 80114e8:	e7f3      	b.n	80114d2 <USBD_COMPOSITE_Setup+0x16>
 80114ea:	46c0      	nop			@ (mov r8, r8)
 80114ec:	20002f36 	.word	0x20002f36
 80114f0:	20002f35 	.word	0x20002f35
 80114f4:	2000074c 	.word	0x2000074c
 80114f8:	2000306d 	.word	0x2000306d
 80114fc:	20000920 	.word	0x20000920

08011500 <USBD_COMPOSITE_DataIn>:
{
 8011500:	b510      	push	{r4, lr}
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8011502:	4b0c      	ldr	r3, [pc, #48]	@ (8011534 <USBD_COMPOSITE_DataIn+0x34>)
 8011504:	781a      	ldrb	r2, [r3, #0]
 8011506:	237f      	movs	r3, #127	@ 0x7f
 8011508:	401a      	ands	r2, r3
 801150a:	4291      	cmp	r1, r2
 801150c:	d004      	beq.n	8011518 <USBD_COMPOSITE_DataIn+0x18>
 801150e:	4a0a      	ldr	r2, [pc, #40]	@ (8011538 <USBD_COMPOSITE_DataIn+0x38>)
 8011510:	7812      	ldrb	r2, [r2, #0]
 8011512:	401a      	ands	r2, r3
 8011514:	4291      	cmp	r1, r2
 8011516:	d105      	bne.n	8011524 <USBD_COMPOSITE_DataIn+0x24>
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8011518:	4b08      	ldr	r3, [pc, #32]	@ (801153c <USBD_COMPOSITE_DataIn+0x3c>)
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 801151a:	695b      	ldr	r3, [r3, #20]
 801151c:	4798      	blx	r3
 801151e:	0003      	movs	r3, r0
}
 8011520:	0018      	movs	r0, r3
 8011522:	bd10      	pop	{r4, pc}
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 8011524:	4a06      	ldr	r2, [pc, #24]	@ (8011540 <USBD_COMPOSITE_DataIn+0x40>)
 8011526:	7812      	ldrb	r2, [r2, #0]
 8011528:	401a      	ands	r2, r3
  return USBD_FAIL;
 801152a:	2303      	movs	r3, #3
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 801152c:	4291      	cmp	r1, r2
 801152e:	d1f7      	bne.n	8011520 <USBD_COMPOSITE_DataIn+0x20>
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8011530:	4b04      	ldr	r3, [pc, #16]	@ (8011544 <USBD_COMPOSITE_DataIn+0x44>)
 8011532:	e7f2      	b.n	801151a <USBD_COMPOSITE_DataIn+0x1a>
 8011534:	20002f39 	.word	0x20002f39
 8011538:	20002f37 	.word	0x20002f37
 801153c:	2000074c 	.word	0x2000074c
 8011540:	2000095d 	.word	0x2000095d
 8011544:	20000920 	.word	0x20000920

08011548 <USBD_COMPOSITE_DataOut>:
{
 8011548:	b510      	push	{r4, lr}
    if (epnum == CDC_OUT_EP[i])
 801154a:	4b08      	ldr	r3, [pc, #32]	@ (801156c <USBD_COMPOSITE_DataOut+0x24>)
{
 801154c:	000a      	movs	r2, r1
    if (epnum == CDC_OUT_EP[i])
 801154e:	7819      	ldrb	r1, [r3, #0]
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8011550:	4b07      	ldr	r3, [pc, #28]	@ (8011570 <USBD_COMPOSITE_DataOut+0x28>)
    if (epnum == CDC_OUT_EP[i])
 8011552:	4291      	cmp	r1, r2
 8011554:	d005      	beq.n	8011562 <USBD_COMPOSITE_DataOut+0x1a>
  if (epnum == CUSTOM_HID_OUT_EP)
 8011556:	4b07      	ldr	r3, [pc, #28]	@ (8011574 <USBD_COMPOSITE_DataOut+0x2c>)
 8011558:	7819      	ldrb	r1, [r3, #0]
  return USBD_FAIL;
 801155a:	2303      	movs	r3, #3
  if (epnum == CUSTOM_HID_OUT_EP)
 801155c:	4291      	cmp	r1, r2
 801155e:	d103      	bne.n	8011568 <USBD_COMPOSITE_DataOut+0x20>
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 8011560:	4b05      	ldr	r3, [pc, #20]	@ (8011578 <USBD_COMPOSITE_DataOut+0x30>)
 8011562:	699b      	ldr	r3, [r3, #24]
 8011564:	4798      	blx	r3
 8011566:	0003      	movs	r3, r0
}
 8011568:	0018      	movs	r0, r3
 801156a:	bd10      	pop	{r4, pc}
 801156c:	20002f38 	.word	0x20002f38
 8011570:	2000074c 	.word	0x2000074c
 8011574:	2000095c 	.word	0x2000095c
 8011578:	20000920 	.word	0x20000920

0801157c <USBD_COMPOSITE_IsoOutIncomplete>:
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 801157c:	2000      	movs	r0, #0
 801157e:	4770      	bx	lr

08011580 <USBD_COMPOSITE_SOF>:
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
 8011580:	2000      	movs	r0, #0
 8011582:	4770      	bx	lr

08011584 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
 8011584:	236b      	movs	r3, #107	@ 0x6b
 8011586:	8003      	strh	r3, [r0, #0]
 8011588:	4800      	ldr	r0, [pc, #0]	@ (801158c <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x8>)
 801158a:	4770      	bx	lr
 801158c:	20002f7c 	.word	0x20002f7c

08011590 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8011590:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t len = 0;
 8011592:	2416      	movs	r4, #22
 8011594:	2000      	movs	r0, #0
{
 8011596:	b089      	sub	sp, #36	@ 0x24
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 8011598:	4f39      	ldr	r7, [pc, #228]	@ (8011680 <USBD_COMPOSITE_Mount_Class+0xf0>)
  uint16_t len = 0;
 801159a:	ab02      	add	r3, sp, #8
 801159c:	18e4      	adds	r4, r4, r3
 801159e:	8020      	strh	r0, [r4, #0]
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 80115a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a2:	0020      	movs	r0, r4
 80115a4:	4798      	blx	r3
 80115a6:	0006      	movs	r6, r0
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 80115a8:	4d36      	ldr	r5, [pc, #216]	@ (8011684 <USBD_COMPOSITE_Mount_Class+0xf4>)
 80115aa:	2281      	movs	r2, #129	@ 0x81
 80115ac:	782b      	ldrb	r3, [r5, #0]
 80115ae:	2100      	movs	r1, #0
 80115b0:	9300      	str	r3, [sp, #0]
 80115b2:	2301      	movs	r3, #1
 80115b4:	f000 f9e0 	bl	8011978 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 80115b8:	0031      	movs	r1, r6
 80115ba:	8822      	ldrh	r2, [r4, #0]
 80115bc:	3109      	adds	r1, #9
 80115be:	3a09      	subs	r2, #9
 80115c0:	4831      	ldr	r0, [pc, #196]	@ (8011688 <USBD_COMPOSITE_Mount_Class+0xf8>)
 80115c2:	f001 feab 	bl	801331c <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 80115c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115c8:	0020      	movs	r0, r4
 80115ca:	4798      	blx	r3
 80115cc:	0006      	movs	r6, r0
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 80115ce:	782b      	ldrb	r3, [r5, #0]
 80115d0:	2281      	movs	r2, #129	@ 0x81
 80115d2:	9300      	str	r3, [sp, #0]
 80115d4:	2100      	movs	r1, #0
 80115d6:	2301      	movs	r3, #1
 80115d8:	f000 f9ce 	bl	8011978 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 80115dc:	0031      	movs	r1, r6
 80115de:	8822      	ldrh	r2, [r4, #0]
 80115e0:	3109      	adds	r1, #9
 80115e2:	3a09      	subs	r2, #9
 80115e4:	4829      	ldr	r0, [pc, #164]	@ (801168c <USBD_COMPOSITE_Mount_Class+0xfc>)
 80115e6:	f001 fe99 	bl	801331c <memcpy>

  in_ep_track += 1;
  out_ep_track += 1;
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
 80115ea:	782b      	ldrb	r3, [r5, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 80115ec:	4e28      	ldr	r6, [pc, #160]	@ (8011690 <USBD_COMPOSITE_Mount_Class+0x100>)
  USBD_Track_String_Index += 1;
 80115ee:	3301      	adds	r3, #1
 80115f0:	702b      	strb	r3, [r5, #0]
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 80115f2:	0020      	movs	r0, r4
 80115f4:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80115f6:	4798      	blx	r3
  USBD_Update_CDC_ACM_DESC(ptr,
 80115f8:	782b      	ldrb	r3, [r5, #0]
 80115fa:	2702      	movs	r7, #2
 80115fc:	9302      	str	r3, [sp, #8]
 80115fe:	2383      	movs	r3, #131	@ 0x83
 8011600:	003a      	movs	r2, r7
 8011602:	9300      	str	r3, [sp, #0]
 8011604:	2101      	movs	r1, #1
 8011606:	3b01      	subs	r3, #1
 8011608:	9701      	str	r7, [sp, #4]
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 801160a:	9005      	str	r0, [sp, #20]
  USBD_Update_CDC_ACM_DESC(ptr,
 801160c:	f7ff fea8 	bl	8011360 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8011610:	8822      	ldrh	r2, [r4, #0]
 8011612:	9905      	ldr	r1, [sp, #20]
 8011614:	3a09      	subs	r2, #9
 8011616:	3109      	adds	r1, #9
 8011618:	481e      	ldr	r0, [pc, #120]	@ (8011694 <USBD_COMPOSITE_Mount_Class+0x104>)
 801161a:	f001 fe7f 	bl	801331c <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 801161e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8011620:	0020      	movs	r0, r4
 8011622:	4798      	blx	r3
  USBD_Update_CDC_ACM_DESC(ptr,
 8011624:	782b      	ldrb	r3, [r5, #0]
  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8011626:	0006      	movs	r6, r0
  USBD_Update_CDC_ACM_DESC(ptr,
 8011628:	9302      	str	r3, [sp, #8]
 801162a:	2383      	movs	r3, #131	@ 0x83
 801162c:	003a      	movs	r2, r7
 801162e:	9300      	str	r3, [sp, #0]
 8011630:	2101      	movs	r1, #1
 8011632:	3b01      	subs	r3, #1
 8011634:	9701      	str	r7, [sp, #4]
 8011636:	f7ff fe93 	bl	8011360 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 801163a:	0031      	movs	r1, r6
 801163c:	8822      	ldrh	r2, [r4, #0]
 801163e:	3109      	adds	r1, #9
 8011640:	3a09      	subs	r2, #9
 8011642:	4815      	ldr	r0, [pc, #84]	@ (8011698 <USBD_COMPOSITE_Mount_Class+0x108>)
 8011644:	f001 fe6a 	bl	801331c <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8011648:	782b      	ldrb	r3, [r5, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 801164a:	4a14      	ldr	r2, [pc, #80]	@ (801169c <USBD_COMPOSITE_Mount_Class+0x10c>)
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 801164c:	3301      	adds	r3, #1
 801164e:	702b      	strb	r3, [r5, #0]
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8011650:	4b13      	ldr	r3, [pc, #76]	@ (80116a0 <USBD_COMPOSITE_Mount_Class+0x110>)
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8011652:	2109      	movs	r1, #9
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8011654:	601a      	str	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8011656:	4a13      	ldr	r2, [pc, #76]	@ (80116a4 <USBD_COMPOSITE_Mount_Class+0x114>)
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
  ptr[3] = HIBYTE(CFG_SIZE);
 8011658:	2000      	movs	r0, #0
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 801165a:	605a      	str	r2, [r3, #4]
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 801165c:	2232      	movs	r2, #50	@ 0x32
 801165e:	721a      	strb	r2, [r3, #8]
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8011660:	4b11      	ldr	r3, [pc, #68]	@ (80116a8 <USBD_COMPOSITE_Mount_Class+0x118>)
 8011662:	7019      	strb	r1, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8011664:	3162      	adds	r1, #98	@ 0x62
 8011666:	7099      	strb	r1, [r3, #2]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8011668:	2103      	movs	r1, #3
 801166a:	7119      	strb	r1, [r3, #4]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 801166c:	3902      	subs	r1, #2
 801166e:	7159      	strb	r1, [r3, #5]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8011670:	21c0      	movs	r1, #192	@ 0xc0
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8011672:	705f      	strb	r7, [r3, #1]
  ptr[3] = HIBYTE(CFG_SIZE);
 8011674:	70d8      	strb	r0, [r3, #3]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8011676:	7198      	strb	r0, [r3, #6]
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8011678:	71d9      	strb	r1, [r3, #7]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 801167a:	721a      	strb	r2, [r3, #8]

  (void)out_ep_track;
  (void)in_ep_track;
}
 801167c:	b009      	add	sp, #36	@ 0x24
 801167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011680:	20000920 	.word	0x20000920
 8011684:	20000807 	.word	0x20000807
 8011688:	20002ff0 	.word	0x20002ff0
 801168c:	20002f85 	.word	0x20002f85
 8011690:	2000074c 	.word	0x2000074c
 8011694:	20003010 	.word	0x20003010
 8011698:	20002fa5 	.word	0x20002fa5
 801169c:	006b0209 	.word	0x006b0209
 80116a0:	20002f7c 	.word	0x20002f7c
 80116a4:	c0000103 	.word	0xc0000103
 80116a8:	20002fe7 	.word	0x20002fe7

080116ac <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80116ac:	2329      	movs	r3, #41	@ 0x29
 80116ae:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80116b0:	4800      	ldr	r0, [pc, #0]	@ (80116b4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
}
 80116b2:	4770      	bx	lr
 80116b4:	200008f4 	.word	0x200008f4

080116b8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80116b8:	2329      	movs	r3, #41	@ 0x29
 80116ba:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 80116bc:	4800      	ldr	r0, [pc, #0]	@ (80116c0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
}
 80116be:	4770      	bx	lr
 80116c0:	200008c8 	.word	0x200008c8

080116c4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80116c4:	2329      	movs	r3, #41	@ 0x29
 80116c6:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80116c8:	4800      	ldr	r0, [pc, #0]	@ (80116cc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
}
 80116ca:	4770      	bx	lr
 80116cc:	2000089c 	.word	0x2000089c

080116d0 <USBD_CUSTOM_HID_DataIn>:
{
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 80116d0:	23b6      	movs	r3, #182	@ 0xb6
 80116d2:	009b      	lsls	r3, r3, #2
 80116d4:	58c3      	ldr	r3, [r0, r3]
 80116d6:	2000      	movs	r0, #0
 80116d8:	7518      	strb	r0, [r3, #20]

  return (uint8_t)USBD_OK;
}
 80116da:	4770      	bx	lr

080116dc <USBD_CUSTOM_HID_DataOut>:
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 80116dc:	22b6      	movs	r2, #182	@ 0xb6
 80116de:	0092      	lsls	r2, r2, #2
 80116e0:	5882      	ldr	r2, [r0, r2]
{
 80116e2:	0003      	movs	r3, r0
 80116e4:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
 80116e6:	2003      	movs	r0, #3
  if (pdev->pClassData_HID_Custom == NULL)
 80116e8:	2a00      	cmp	r2, #0
 80116ea:	d007      	beq.n	80116fc <USBD_CUSTOM_HID_DataOut+0x20>

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 80116ec:	7851      	ldrb	r1, [r2, #1]
 80116ee:	7810      	ldrb	r0, [r2, #0]
 80116f0:	22b7      	movs	r2, #183	@ 0xb7
 80116f2:	0092      	lsls	r2, r2, #2
 80116f4:	589b      	ldr	r3, [r3, r2]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80116fa:	2000      	movs	r0, #0
}
 80116fc:	bd10      	pop	{r4, pc}

080116fe <USBD_CUSTOM_HID_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 80116fe:	22b6      	movs	r2, #182	@ 0xb6
 8011700:	0092      	lsls	r2, r2, #2
{
 8011702:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8011704:	5884      	ldr	r4, [r0, r2]
{
 8011706:	0003      	movs	r3, r0

  if (hhid == NULL)
  {
    return (uint8_t)USBD_FAIL;
 8011708:	2003      	movs	r0, #3
  if (hhid == NULL)
 801170a:	2c00      	cmp	r4, #0
 801170c:	d003      	beq.n	8011716 <USBD_CUSTOM_HID_EP0_RxReady+0x18>
  }

  if (hhid->IsReportAvailable == 1U)
 801170e:	6922      	ldr	r2, [r4, #16]
 8011710:	2a01      	cmp	r2, #1
 8011712:	d001      	beq.n	8011718 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
  }

  return (uint8_t)USBD_OK;
 8011714:	2000      	movs	r0, #0
}
 8011716:	bd10      	pop	{r4, pc}
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8011718:	22b7      	movs	r2, #183	@ 0xb7
 801171a:	0092      	lsls	r2, r2, #2
 801171c:	589b      	ldr	r3, [r3, r2]
 801171e:	7861      	ldrb	r1, [r4, #1]
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	7820      	ldrb	r0, [r4, #0]
 8011724:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8011726:	2300      	movs	r3, #0
 8011728:	6123      	str	r3, [r4, #16]
 801172a:	e7f3      	b.n	8011714 <USBD_CUSTOM_HID_EP0_RxReady+0x16>

0801172c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 801172c:	233f      	movs	r3, #63	@ 0x3f
 801172e:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8011730:	4800      	ldr	r0, [pc, #0]	@ (8011734 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
}
 8011732:	4770      	bx	lr
 8011734:	20000844 	.word	0x20000844

08011738 <USBD_CUSTOM_HID_Setup>:
{
 8011738:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint16_t status_info = 0U;
 801173a:	466a      	mov	r2, sp
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 801173c:	23b6      	movs	r3, #182	@ 0xb6
  uint16_t status_info = 0U;
 801173e:	1d95      	adds	r5, r2, #6
 8011740:	2200      	movs	r2, #0
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	58c3      	ldr	r3, [r0, r3]
{
 8011746:	0004      	movs	r4, r0
  uint16_t status_info = 0U;
 8011748:	802a      	strh	r2, [r5, #0]
  if (hhid == NULL)
 801174a:	4293      	cmp	r3, r2
 801174c:	d041      	beq.n	80117d2 <USBD_CUSTOM_HID_Setup+0x9a>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801174e:	7808      	ldrb	r0, [r1, #0]
 8011750:	3260      	adds	r2, #96	@ 0x60
 8011752:	0006      	movs	r6, r0
 8011754:	4016      	ands	r6, r2
 8011756:	4210      	tst	r0, r2
 8011758:	d025      	beq.n	80117a6 <USBD_CUSTOM_HID_Setup+0x6e>
 801175a:	2e20      	cmp	r6, #32
 801175c:	d136      	bne.n	80117cc <USBD_CUSTOM_HID_Setup+0x94>
    switch (req->bRequest)
 801175e:	7848      	ldrb	r0, [r1, #1]
 8011760:	3802      	subs	r0, #2
 8011762:	2809      	cmp	r0, #9
 8011764:	d832      	bhi.n	80117cc <USBD_CUSTOM_HID_Setup+0x94>
 8011766:	f7ee fce1 	bl	800012c <__gnu_thumb1_case_uqi>
 801176a:	0913      	.short	0x0913
 801176c:	31313131 	.word	0x31313131
 8011770:	050f1631 	.word	0x050f1631
      hhid->Protocol = (uint8_t)(req->wValue);
 8011774:	788a      	ldrb	r2, [r1, #2]
 8011776:	605a      	str	r2, [r3, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011778:	2000      	movs	r0, #0
}
 801177a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 801177c:	1d19      	adds	r1, r3, #4
 801177e:	2201      	movs	r2, #1
 8011780:	0020      	movs	r0, r4
 8011782:	f000 fceb 	bl	801215c <USBD_CtlSendData>
      break;
 8011786:	e7f7      	b.n	8011778 <USBD_CUSTOM_HID_Setup+0x40>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8011788:	884a      	ldrh	r2, [r1, #2]
 801178a:	0a12      	lsrs	r2, r2, #8
 801178c:	609a      	str	r2, [r3, #8]
      break;
 801178e:	e7f3      	b.n	8011778 <USBD_CUSTOM_HID_Setup+0x40>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8011790:	3308      	adds	r3, #8
 8011792:	0019      	movs	r1, r3
 8011794:	e7f3      	b.n	801177e <USBD_CUSTOM_HID_Setup+0x46>
      hhid->IsReportAvailable = 1U;
 8011796:	2201      	movs	r2, #1
 8011798:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 801179a:	88ca      	ldrh	r2, [r1, #6]
 801179c:	0020      	movs	r0, r4
 801179e:	0019      	movs	r1, r3
 80117a0:	f000 fcf2 	bl	8012188 <USBD_CtlPrepareRx>
      break;
 80117a4:	e7e8      	b.n	8011778 <USBD_CUSTOM_HID_Setup+0x40>
    switch (req->bRequest)
 80117a6:	7848      	ldrb	r0, [r1, #1]
 80117a8:	280b      	cmp	r0, #11
 80117aa:	d80f      	bhi.n	80117cc <USBD_CUSTOM_HID_Setup+0x94>
 80117ac:	f7ee fcb4 	bl	8000118 <__gnu_thumb1_case_sqi>
 80117b0:	0e0ee406 	.word	0x0e0ee406
 80117b4:	0e130e0e 	.word	0x0e130e0e
 80117b8:	382f0e0e 	.word	0x382f0e0e
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117bc:	23a7      	movs	r3, #167	@ 0xa7
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	5ce3      	ldrb	r3, [r4, r3]
 80117c2:	2b03      	cmp	r3, #3
 80117c4:	d102      	bne.n	80117cc <USBD_CUSTOM_HID_Setup+0x94>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80117c6:	2202      	movs	r2, #2
 80117c8:	0029      	movs	r1, r5
 80117ca:	e7d9      	b.n	8011780 <USBD_CUSTOM_HID_Setup+0x48>
        USBD_CtlError(pdev, req);
 80117cc:	0020      	movs	r0, r4
 80117ce:	f000 fc9e 	bl	801210e <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 80117d2:	2003      	movs	r0, #3
 80117d4:	e7d1      	b.n	801177a <USBD_CUSTOM_HID_Setup+0x42>
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80117d6:	8848      	ldrh	r0, [r1, #2]
 80117d8:	0a00      	lsrs	r0, r0, #8
 80117da:	2822      	cmp	r0, #34	@ 0x22
 80117dc:	d10b      	bne.n	80117f6 <USBD_CUSTOM_HID_Setup+0xbe>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80117de:	88cb      	ldrh	r3, [r1, #6]
 80117e0:	1c1a      	adds	r2, r3, #0
 80117e2:	2b21      	cmp	r3, #33	@ 0x21
 80117e4:	d900      	bls.n	80117e8 <USBD_CUSTOM_HID_Setup+0xb0>
 80117e6:	2221      	movs	r2, #33	@ 0x21
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 80117e8:	23b7      	movs	r3, #183	@ 0xb7
 80117ea:	009b      	lsls	r3, r3, #2
 80117ec:	58e3      	ldr	r3, [r4, r3]
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80117ee:	b292      	uxth	r2, r2
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 80117f0:	681b      	ldr	r3, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80117f2:	0019      	movs	r1, r3
 80117f4:	e7c4      	b.n	8011780 <USBD_CUSTOM_HID_Setup+0x48>
  uint8_t *pbuf = NULL;
 80117f6:	2300      	movs	r3, #0
  uint16_t len = 0U;
 80117f8:	001a      	movs	r2, r3
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80117fa:	2821      	cmp	r0, #33	@ 0x21
 80117fc:	d1f9      	bne.n	80117f2 <USBD_CUSTOM_HID_Setup+0xba>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80117fe:	88cb      	ldrh	r3, [r1, #6]
 8011800:	1c1a      	adds	r2, r3, #0
 8011802:	2b17      	cmp	r3, #23
 8011804:	d900      	bls.n	8011808 <USBD_CUSTOM_HID_Setup+0xd0>
 8011806:	2217      	movs	r2, #23
          pbuf = USBD_CUSTOM_HID_Desc;
 8011808:	4b09      	ldr	r3, [pc, #36]	@ (8011830 <USBD_CUSTOM_HID_Setup+0xf8>)
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 801180a:	b292      	uxth	r2, r2
 801180c:	e7f1      	b.n	80117f2 <USBD_CUSTOM_HID_Setup+0xba>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801180e:	22a7      	movs	r2, #167	@ 0xa7
 8011810:	0092      	lsls	r2, r2, #2
 8011812:	5ca2      	ldrb	r2, [r4, r2]
 8011814:	2a03      	cmp	r2, #3
 8011816:	d1d9      	bne.n	80117cc <USBD_CUSTOM_HID_Setup+0x94>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8011818:	330c      	adds	r3, #12
 801181a:	0019      	movs	r1, r3
 801181c:	3a02      	subs	r2, #2
 801181e:	e7af      	b.n	8011780 <USBD_CUSTOM_HID_Setup+0x48>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011820:	22a7      	movs	r2, #167	@ 0xa7
 8011822:	0092      	lsls	r2, r2, #2
 8011824:	5ca2      	ldrb	r2, [r4, r2]
 8011826:	2a03      	cmp	r2, #3
 8011828:	d1d0      	bne.n	80117cc <USBD_CUSTOM_HID_Setup+0x94>
        hhid->AltSetting = (uint8_t)(req->wValue);
 801182a:	788a      	ldrb	r2, [r1, #2]
 801182c:	60da      	str	r2, [r3, #12]
 801182e:	e7a3      	b.n	8011778 <USBD_CUSTOM_HID_Setup+0x40>
 8011830:	20000884 	.word	0x20000884

08011834 <USBD_CUSTOM_HID_DeInit>:
{
 8011834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 8011836:	4d13      	ldr	r5, [pc, #76]	@ (8011884 <USBD_CUSTOM_HID_DeInit+0x50>)
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 8011838:	260f      	movs	r6, #15
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 801183a:	7829      	ldrb	r1, [r5, #0]
{
 801183c:	0004      	movs	r4, r0
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 801183e:	f000 fd9e 	bl	801237e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 8011842:	2214      	movs	r2, #20
 8011844:	782b      	ldrb	r3, [r5, #0]
 8011846:	2500      	movs	r5, #0
 8011848:	4033      	ands	r3, r6
 801184a:	4353      	muls	r3, r2
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 801184c:	4f0e      	ldr	r7, [pc, #56]	@ (8011888 <USBD_CUSTOM_HID_DeInit+0x54>)
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 801184e:	18e3      	adds	r3, r4, r3
 8011850:	625d      	str	r5, [r3, #36]	@ 0x24
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 8011852:	0020      	movs	r0, r4
 8011854:	7839      	ldrb	r1, [r7, #0]
 8011856:	f000 fd92 	bl	801237e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 801185a:	2214      	movs	r2, #20
 801185c:	783b      	ldrb	r3, [r7, #0]
 801185e:	4033      	ands	r3, r6
  if (pdev->pClassData_HID_Custom != NULL)
 8011860:	26b6      	movs	r6, #182	@ 0xb6
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 8011862:	4353      	muls	r3, r2
 8011864:	18e3      	adds	r3, r4, r3
 8011866:	33fc      	adds	r3, #252	@ 0xfc
  if (pdev->pClassData_HID_Custom != NULL)
 8011868:	00b6      	lsls	r6, r6, #2
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 801186a:	669d      	str	r5, [r3, #104]	@ 0x68
  if (pdev->pClassData_HID_Custom != NULL)
 801186c:	59a3      	ldr	r3, [r4, r6]
 801186e:	42ab      	cmp	r3, r5
 8011870:	d005      	beq.n	801187e <USBD_CUSTOM_HID_DeInit+0x4a>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 8011872:	23b7      	movs	r3, #183	@ 0xb7
 8011874:	009b      	lsls	r3, r3, #2
 8011876:	58e3      	ldr	r3, [r4, r3]
 8011878:	689b      	ldr	r3, [r3, #8]
 801187a:	4798      	blx	r3
    pdev->pClassData_HID_Custom = NULL;
 801187c:	51a5      	str	r5, [r4, r6]
}
 801187e:	2000      	movs	r0, #0
 8011880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011882:	46c0      	nop			@ (mov r8, r8)
 8011884:	2000095d 	.word	0x2000095d
 8011888:	2000095c 	.word	0x2000095c

0801188c <USBD_CUSTOM_HID_Init>:
  pdev->pClassData_HID_Custom = (void *)hhid;
 801188c:	23b6      	movs	r3, #182	@ 0xb6
{
 801188e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8011890:	4f21      	ldr	r7, [pc, #132]	@ (8011918 <USBD_CUSTOM_HID_Init+0x8c>)
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8011892:	260f      	movs	r6, #15
  pdev->pClassData_HID_Custom = (void *)hhid;
 8011894:	4a21      	ldr	r2, [pc, #132]	@ (801191c <USBD_CUSTOM_HID_Init+0x90>)
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8011896:	7839      	ldrb	r1, [r7, #0]
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8011898:	2514      	movs	r5, #20
  pdev->pClassData_HID_Custom = (void *)hhid;
 801189a:	009b      	lsls	r3, r3, #2
{
 801189c:	0004      	movs	r4, r0
  pdev->pClassData_HID_Custom = (void *)hhid;
 801189e:	50c2      	str	r2, [r0, r3]
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80118a0:	0008      	movs	r0, r1
  pdev->pClassData_HID_Custom = (void *)hhid;
 80118a2:	9201      	str	r2, [sp, #4]
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80118a4:	2205      	movs	r2, #5
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80118a6:	4b1e      	ldr	r3, [pc, #120]	@ (8011920 <USBD_CUSTOM_HID_Init+0x94>)
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80118a8:	4030      	ands	r0, r6
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80118aa:	9300      	str	r3, [sp, #0]
 80118ac:	781b      	ldrb	r3, [r3, #0]
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80118ae:	4368      	muls	r0, r5
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80118b0:	4033      	ands	r3, r6
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80118b2:	436b      	muls	r3, r5
 80118b4:	18e3      	adds	r3, r4, r3
 80118b6:	3367      	adds	r3, #103	@ 0x67
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80118b8:	1820      	adds	r0, r4, r0
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80118ba:	33ff      	adds	r3, #255	@ 0xff
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80118bc:	84c2      	strh	r2, [r0, #38]	@ 0x26
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80118be:	801a      	strh	r2, [r3, #0]
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 80118c0:	0020      	movs	r0, r4
 80118c2:	2302      	movs	r3, #2
 80118c4:	3a02      	subs	r2, #2
 80118c6:	f000 fd4e 	bl	8012366 <USBD_LL_OpenEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 80118ca:	783b      	ldrb	r3, [r7, #0]
 80118cc:	2701      	movs	r7, #1
 80118ce:	4033      	ands	r3, r6
 80118d0:	436b      	muls	r3, r5
 80118d2:	18e3      	adds	r3, r4, r3
 80118d4:	849f      	strh	r7, [r3, #36]	@ 0x24
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 80118d6:	9b00      	ldr	r3, [sp, #0]
 80118d8:	2203      	movs	r2, #3
 80118da:	7819      	ldrb	r1, [r3, #0]
 80118dc:	0020      	movs	r0, r4
 80118de:	2302      	movs	r3, #2
 80118e0:	f000 fd41 	bl	8012366 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 80118e4:	9b00      	ldr	r3, [sp, #0]
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	4033      	ands	r3, r6
 80118ea:	435d      	muls	r5, r3
 80118ec:	1965      	adds	r5, r4, r5
 80118ee:	3565      	adds	r5, #101	@ 0x65
 80118f0:	35ff      	adds	r5, #255	@ 0xff
 80118f2:	802f      	strh	r7, [r5, #0]
  hhid->state = CUSTOM_HID_IDLE;
 80118f4:	2500      	movs	r5, #0
 80118f6:	9b01      	ldr	r3, [sp, #4]
 80118f8:	751d      	strb	r5, [r3, #20]
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 80118fa:	23b7      	movs	r3, #183	@ 0xb7
 80118fc:	009b      	lsls	r3, r3, #2
 80118fe:	58e3      	ldr	r3, [r4, r3]
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	4798      	blx	r3
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 8011904:	9b00      	ldr	r3, [sp, #0]
 8011906:	0020      	movs	r0, r4
 8011908:	7819      	ldrb	r1, [r3, #0]
 801190a:	9a01      	ldr	r2, [sp, #4]
 801190c:	2302      	movs	r3, #2
 801190e:	f000 fd63 	bl	80123d8 <USBD_LL_PrepareReceive>
}
 8011912:	0028      	movs	r0, r5
 8011914:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011916:	46c0      	nop			@ (mov r8, r8)
 8011918:	2000095d 	.word	0x2000095d
 801191c:	20003054 	.word	0x20003054
 8011920:	2000095c 	.word	0x2000095c

08011924 <USBD_CUSTOM_HID_SendReport>:
{
 8011924:	0013      	movs	r3, r2
  if (pdev->pClassData_HID_Custom == NULL)
 8011926:	22b6      	movs	r2, #182	@ 0xb6
 8011928:	0092      	lsls	r2, r2, #2
 801192a:	5882      	ldr	r2, [r0, r2]
{
 801192c:	b570      	push	{r4, r5, r6, lr}
 801192e:	000d      	movs	r5, r1
    return (uint8_t)USBD_FAIL;
 8011930:	2403      	movs	r4, #3
  if (pdev->pClassData_HID_Custom == NULL)
 8011932:	2a00      	cmp	r2, #0
 8011934:	d005      	beq.n	8011942 <USBD_CUSTOM_HID_SendReport+0x1e>
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011936:	21a7      	movs	r1, #167	@ 0xa7
 8011938:	0089      	lsls	r1, r1, #2
 801193a:	5c41      	ldrb	r1, [r0, r1]
 801193c:	42a1      	cmp	r1, r4
 801193e:	d002      	beq.n	8011946 <USBD_CUSTOM_HID_SendReport+0x22>
  return (uint8_t)USBD_OK;
 8011940:	2400      	movs	r4, #0
}
 8011942:	0020      	movs	r0, r4
 8011944:	bd70      	pop	{r4, r5, r6, pc}
    if (hhid->state == CUSTOM_HID_IDLE)
 8011946:	2101      	movs	r1, #1
 8011948:	7d16      	ldrb	r6, [r2, #20]
      return (uint8_t)USBD_BUSY;
 801194a:	000c      	movs	r4, r1
    if (hhid->state == CUSTOM_HID_IDLE)
 801194c:	2e00      	cmp	r6, #0
 801194e:	d1f8      	bne.n	8011942 <USBD_CUSTOM_HID_SendReport+0x1e>
      hhid->state = CUSTOM_HID_BUSY;
 8011950:	7511      	strb	r1, [r2, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 8011952:	4a03      	ldr	r2, [pc, #12]	@ (8011960 <USBD_CUSTOM_HID_SendReport+0x3c>)
 8011954:	7811      	ldrb	r1, [r2, #0]
 8011956:	002a      	movs	r2, r5
 8011958:	f000 fd35 	bl	80123c6 <USBD_LL_Transmit>
 801195c:	e7f0      	b.n	8011940 <USBD_CUSTOM_HID_SendReport+0x1c>
 801195e:	46c0      	nop			@ (mov r8, r8)
 8011960:	2000095d 	.word	0x2000095d

08011964 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8011964:	0003      	movs	r3, r0
  if (fops == NULL)
  {
    return (uint8_t)USBD_FAIL;
 8011966:	2003      	movs	r0, #3
  if (fops == NULL)
 8011968:	2900      	cmp	r1, #0
 801196a:	d003      	beq.n	8011974 <USBD_CUSTOM_HID_RegisterInterface+0x10>
  }

  pdev->pUserData_HID_Custom = fops;
 801196c:	22b7      	movs	r2, #183	@ 0xb7

  return (uint8_t)USBD_OK;
 801196e:	2000      	movs	r0, #0
  pdev->pUserData_HID_Custom = fops;
 8011970:	0092      	lsls	r2, r2, #2
 8011972:	5099      	str	r1, [r3, r2]
}
 8011974:	4770      	bx	lr
	...

08011978 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 8011978:	b510      	push	{r4, lr}
 801197a:	ac02      	add	r4, sp, #8
 801197c:	7824      	ldrb	r4, [r4, #0]
  desc[11] = itf_no;
  desc[17] = str_idx;
  desc[29] = in_ep;
 801197e:	7742      	strb	r2, [r0, #29]
  desc[11] = itf_no;
 8011980:	72c1      	strb	r1, [r0, #11]
  desc[17] = str_idx;
 8011982:	7444      	strb	r4, [r0, #17]
  desc[36] = out_ep;
 8011984:	3005      	adds	r0, #5
 8011986:	77c3      	strb	r3, [r0, #31]

  CUSTOM_HID_IN_EP = in_ep;
 8011988:	4804      	ldr	r0, [pc, #16]	@ (801199c <USBD_Update_HID_Custom_DESC+0x24>)
 801198a:	7002      	strb	r2, [r0, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 801198c:	4a04      	ldr	r2, [pc, #16]	@ (80119a0 <USBD_Update_HID_Custom_DESC+0x28>)
 801198e:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 8011990:	4b04      	ldr	r3, [pc, #16]	@ (80119a4 <USBD_Update_HID_Custom_DESC+0x2c>)
 8011992:	7019      	strb	r1, [r3, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 8011994:	4b04      	ldr	r3, [pc, #16]	@ (80119a8 <USBD_Update_HID_Custom_DESC+0x30>)
 8011996:	701c      	strb	r4, [r3, #0]
}
 8011998:	bd10      	pop	{r4, pc}
 801199a:	46c0      	nop			@ (mov r8, r8)
 801199c:	2000095d 	.word	0x2000095d
 80119a0:	2000095c 	.word	0x2000095c
 80119a4:	2000306d 	.word	0x2000306d
 80119a8:	2000306c 	.word	0x2000306c

080119ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80119ac:	0003      	movs	r3, r0
 80119ae:	b510      	push	{r4, lr}
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80119b0:	2003      	movs	r0, #3
  if (pdev == NULL)
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d012      	beq.n	80119dc <USBD_Init+0x30>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80119b6:	24ae      	movs	r4, #174	@ 0xae
 80119b8:	2000      	movs	r0, #0
 80119ba:	00a4      	lsls	r4, r4, #2
 80119bc:	5118      	str	r0, [r3, r4]
  pdev->pConfDesc = NULL;
 80119be:	3460      	adds	r4, #96	@ 0x60
 80119c0:	5118      	str	r0, [r3, r4]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80119c2:	4281      	cmp	r1, r0
 80119c4:	d002      	beq.n	80119cc <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 80119c6:	20ad      	movs	r0, #173	@ 0xad
 80119c8:	0080      	lsls	r0, r0, #2
 80119ca:	5019      	str	r1, [r3, r0]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80119cc:	21a7      	movs	r1, #167	@ 0xa7
 80119ce:	2001      	movs	r0, #1
 80119d0:	0089      	lsls	r1, r1, #2
 80119d2:	5458      	strb	r0, [r3, r1]
  pdev->id = id;

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80119d4:	0018      	movs	r0, r3
  pdev->id = id;
 80119d6:	701a      	strb	r2, [r3, #0]
  ret = USBD_LL_Init(pdev);
 80119d8:	f000 fc4c 	bl	8012274 <USBD_LL_Init>

  return ret;
}
 80119dc:	bd10      	pop	{r4, pc}

080119de <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80119de:	b513      	push	{r0, r1, r4, lr}
  uint16_t len = 0U;
 80119e0:	466b      	mov	r3, sp
{
 80119e2:	0004      	movs	r4, r0
  uint16_t len = 0U;
 80119e4:	1d98      	adds	r0, r3, #6
 80119e6:	2300      	movs	r3, #0
 80119e8:	8003      	strh	r3, [r0, #0]
  if (pclass == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80119ea:	3303      	adds	r3, #3
  if (pclass == NULL)
 80119ec:	2900      	cmp	r1, #0
 80119ee:	d00d      	beq.n	8011a0c <USBD_RegisterClass+0x2e>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80119f0:	23ae      	movs	r3, #174	@ 0xae
 80119f2:	009b      	lsls	r3, r3, #2
 80119f4:	50e1      	str	r1, [r4, r3]

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80119f6:	7c23      	ldrb	r3, [r4, #16]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d109      	bne.n	8011a10 <USBD_RegisterClass+0x32>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 80119fc:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d003      	beq.n	8011a0a <USBD_RegisterClass+0x2c>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011a02:	4798      	blx	r3
 8011a04:	23c6      	movs	r3, #198	@ 0xc6
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	50e0      	str	r0, [r4, r3]
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
  }

  return USBD_OK;
 8011a0a:	2300      	movs	r3, #0
}
 8011a0c:	0018      	movs	r0, r3
 8011a0e:	bd16      	pop	{r1, r2, r4, pc}
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011a10:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8011a12:	e7f4      	b.n	80119fe <USBD_RegisterClass+0x20>

08011a14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011a14:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011a16:	f000 fc9d 	bl	8012354 <USBD_LL_Start>
}
 8011a1a:	bd10      	pop	{r4, pc}

08011a1c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8011a1c:	23ae      	movs	r3, #174	@ 0xae
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	58c2      	ldr	r2, [r0, r3]
{
 8011a22:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011a24:	2303      	movs	r3, #3
  if (pdev->pClass != NULL)
 8011a26:	2a00      	cmp	r2, #0
 8011a28:	d002      	beq.n	8011a30 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011a2a:	6813      	ldr	r3, [r2, #0]
 8011a2c:	4798      	blx	r3
 8011a2e:	0003      	movs	r3, r0
  }

  return ret;
}
 8011a30:	0018      	movs	r0, r3
 8011a32:	bd10      	pop	{r4, pc}

08011a34 <USBD_ClrClassConfig>:
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011a34:	23ae      	movs	r3, #174	@ 0xae
 8011a36:	009b      	lsls	r3, r3, #2
 8011a38:	58c3      	ldr	r3, [r0, r3]
{
 8011a3a:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d001      	beq.n	8011a44 <USBD_ClrClassConfig+0x10>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	4798      	blx	r3
  }

  return USBD_OK;
}
 8011a44:	2000      	movs	r0, #0
 8011a46:	bd10      	pop	{r4, pc}

08011a48 <USBD_LL_SetupStage>:
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011a48:	4b16      	ldr	r3, [pc, #88]	@ (8011aa4 <USBD_LL_SetupStage+0x5c>)
{
 8011a4a:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011a4c:	18c5      	adds	r5, r0, r3
{
 8011a4e:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011a50:	0028      	movs	r0, r5
 8011a52:	f000 fb48 	bl	80120e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011a56:	23a5      	movs	r3, #165	@ 0xa5
 8011a58:	2201      	movs	r2, #1
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8011a5e:	331c      	adds	r3, #28
 8011a60:	5ae2      	ldrh	r2, [r4, r3]
 8011a62:	3b18      	subs	r3, #24
 8011a64:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8011a66:	4b0f      	ldr	r3, [pc, #60]	@ (8011aa4 <USBD_LL_SetupStage+0x5c>)
 8011a68:	5ce1      	ldrb	r1, [r4, r3]
 8011a6a:	231f      	movs	r3, #31
 8011a6c:	400b      	ands	r3, r1
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d008      	beq.n	8011a84 <USBD_LL_SetupStage+0x3c>
 8011a72:	2b02      	cmp	r3, #2
 8011a74:	d00b      	beq.n	8011a8e <USBD_LL_SetupStage+0x46>
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d10e      	bne.n	8011a98 <USBD_LL_SetupStage+0x50>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011a7a:	0029      	movs	r1, r5
 8011a7c:	0020      	movs	r0, r4
 8011a7e:	f000 f90d 	bl	8011c9c <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8011a82:	bd70      	pop	{r4, r5, r6, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011a84:	0029      	movs	r1, r5
 8011a86:	0020      	movs	r0, r4
 8011a88:	f000 fa68 	bl	8011f5c <USBD_StdItfReq>
      break;
 8011a8c:	e7f9      	b.n	8011a82 <USBD_LL_SetupStage+0x3a>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011a8e:	0029      	movs	r1, r5
 8011a90:	0020      	movs	r0, r4
 8011a92:	f000 fa8d 	bl	8011fb0 <USBD_StdEPReq>
      break;
 8011a96:	e7f4      	b.n	8011a82 <USBD_LL_SetupStage+0x3a>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011a98:	237f      	movs	r3, #127	@ 0x7f
 8011a9a:	0020      	movs	r0, r4
 8011a9c:	4399      	bics	r1, r3
 8011a9e:	f000 fc77 	bl	8012390 <USBD_LL_StallEP>
      break;
 8011aa2:	e7ee      	b.n	8011a82 <USBD_LL_SetupStage+0x3a>
 8011aa4:	000002aa 	.word	0x000002aa

08011aa8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011aa8:	b510      	push	{r4, lr}
 8011aaa:	0004      	movs	r4, r0
 8011aac:	0010      	movs	r0, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011aae:	2900      	cmp	r1, #0
 8011ab0:	d127      	bne.n	8011b02 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011ab2:	23a5      	movs	r3, #165	@ 0xa5
 8011ab4:	009b      	lsls	r3, r3, #2
 8011ab6:	58e3      	ldr	r3, [r4, r3]
 8011ab8:	2b03      	cmp	r3, #3
 8011aba:	d10f      	bne.n	8011adc <USBD_LL_DataOutStage+0x34>
    {
      if (pep->rem_length > pep->maxpacket)
 8011abc:	0021      	movs	r1, r4
 8011abe:	3155      	adds	r1, #85	@ 0x55
 8011ac0:	31ff      	adds	r1, #255	@ 0xff
 8011ac2:	688b      	ldr	r3, [r1, #8]
 8011ac4:	68ca      	ldr	r2, [r1, #12]
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d90a      	bls.n	8011ae0 <USBD_LL_DataOutStage+0x38>
      {
        pep->rem_length -= pep->maxpacket;
 8011aca:	1a9b      	subs	r3, r3, r2
 8011acc:	608b      	str	r3, [r1, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d900      	bls.n	8011ad4 <USBD_LL_DataOutStage+0x2c>
 8011ad2:	001a      	movs	r2, r3
 8011ad4:	0001      	movs	r1, r0
 8011ad6:	0020      	movs	r0, r4
 8011ad8:	f000 fb66 	bl	80121a8 <USBD_CtlContinueRx>
        }
      }
    }
  }

  return USBD_OK;
 8011adc:	2000      	movs	r0, #0
}
 8011ade:	bd10      	pop	{r4, pc}
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ae0:	23a7      	movs	r3, #167	@ 0xa7
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	5ce3      	ldrb	r3, [r4, r3]
 8011ae6:	2b03      	cmp	r3, #3
 8011ae8:	d107      	bne.n	8011afa <USBD_LL_DataOutStage+0x52>
          if (pdev->pClass->EP0_RxReady != NULL)
 8011aea:	23ae      	movs	r3, #174	@ 0xae
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	58e3      	ldr	r3, [r4, r3]
 8011af0:	691b      	ldr	r3, [r3, #16]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d001      	beq.n	8011afa <USBD_LL_DataOutStage+0x52>
            pdev->pClass->EP0_RxReady(pdev);
 8011af6:	0020      	movs	r0, r4
 8011af8:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8011afa:	0020      	movs	r0, r4
 8011afc:	f000 fb5c 	bl	80121b8 <USBD_CtlSendStatus>
 8011b00:	e7ec      	b.n	8011adc <USBD_LL_DataOutStage+0x34>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b02:	23a7      	movs	r3, #167	@ 0xa7
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	5ce3      	ldrb	r3, [r4, r3]
 8011b08:	2b03      	cmp	r3, #3
 8011b0a:	d1e7      	bne.n	8011adc <USBD_LL_DataOutStage+0x34>
      if (pdev->pClass->DataOut != NULL)
 8011b0c:	23ae      	movs	r3, #174	@ 0xae
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	58e3      	ldr	r3, [r4, r3]
 8011b12:	699b      	ldr	r3, [r3, #24]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d0e1      	beq.n	8011adc <USBD_LL_DataOutStage+0x34>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011b18:	0020      	movs	r0, r4
 8011b1a:	4798      	blx	r3
        if (ret != USBD_OK)
 8011b1c:	e7df      	b.n	8011ade <USBD_LL_DataOutStage+0x36>

08011b1e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011b1e:	b570      	push	{r4, r5, r6, lr}
 8011b20:	000d      	movs	r5, r1
 8011b22:	0004      	movs	r4, r0
 8011b24:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011b26:	2d00      	cmp	r5, #0
 8011b28:	d140      	bne.n	8011bac <USBD_LL_DataInStage+0x8e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011b2a:	23a5      	movs	r3, #165	@ 0xa5
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	58c3      	ldr	r3, [r0, r3]
 8011b30:	2b02      	cmp	r3, #2
 8011b32:	d10d      	bne.n	8011b50 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 8011b34:	69c3      	ldr	r3, [r0, #28]
 8011b36:	6a02      	ldr	r2, [r0, #32]
 8011b38:	4293      	cmp	r3, r2
 8011b3a:	d912      	bls.n	8011b62 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8011b3c:	1a9a      	subs	r2, r3, r2
 8011b3e:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011b40:	f000 fb1a 	bl	8012178 <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011b44:	002b      	movs	r3, r5
 8011b46:	002a      	movs	r2, r5
 8011b48:	0029      	movs	r1, r5
 8011b4a:	0020      	movs	r0, r4
 8011b4c:	f000 fc44 	bl	80123d8 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011b50:	23a8      	movs	r3, #168	@ 0xa8
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	5ce2      	ldrb	r2, [r4, r3]
 8011b56:	2a01      	cmp	r2, #1
 8011b58:	d101      	bne.n	8011b5e <USBD_LL_DataInStage+0x40>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	54e2      	strb	r2, [r4, r3]
        }
      }
    }
  }

  return USBD_OK;
 8011b5e:	2000      	movs	r0, #0
}
 8011b60:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8011b62:	4293      	cmp	r3, r2
 8011b64:	d10d      	bne.n	8011b82 <USBD_LL_DataInStage+0x64>
            (pep->total_length >= pep->maxpacket) &&
 8011b66:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d80a      	bhi.n	8011b82 <USBD_LL_DataInStage+0x64>
            (pep->total_length < pdev->ep0_data_len))
 8011b6c:	26a6      	movs	r6, #166	@ 0xa6
 8011b6e:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 8011b70:	5983      	ldr	r3, [r0, r6]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d205      	bcs.n	8011b82 <USBD_LL_DataInStage+0x64>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011b76:	002a      	movs	r2, r5
 8011b78:	0029      	movs	r1, r5
 8011b7a:	f000 fafd 	bl	8012178 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011b7e:	51a5      	str	r5, [r4, r6]
 8011b80:	e7e0      	b.n	8011b44 <USBD_LL_DataInStage+0x26>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b82:	23a7      	movs	r3, #167	@ 0xa7
 8011b84:	009b      	lsls	r3, r3, #2
 8011b86:	5ce3      	ldrb	r3, [r4, r3]
 8011b88:	2b03      	cmp	r3, #3
 8011b8a:	d107      	bne.n	8011b9c <USBD_LL_DataInStage+0x7e>
            if (pdev->pClass->EP0_TxSent != NULL)
 8011b8c:	23ae      	movs	r3, #174	@ 0xae
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	58e3      	ldr	r3, [r4, r3]
 8011b92:	68db      	ldr	r3, [r3, #12]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d001      	beq.n	8011b9c <USBD_LL_DataInStage+0x7e>
              pdev->pClass->EP0_TxSent(pdev);
 8011b98:	0020      	movs	r0, r4
 8011b9a:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011b9c:	2180      	movs	r1, #128	@ 0x80
 8011b9e:	0020      	movs	r0, r4
 8011ba0:	f000 fbf6 	bl	8012390 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011ba4:	0020      	movs	r0, r4
 8011ba6:	f000 fb13 	bl	80121d0 <USBD_CtlReceiveStatus>
 8011baa:	e7d1      	b.n	8011b50 <USBD_LL_DataInStage+0x32>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bac:	23a7      	movs	r3, #167	@ 0xa7
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	5cc3      	ldrb	r3, [r0, r3]
 8011bb2:	2b03      	cmp	r3, #3
 8011bb4:	d1d3      	bne.n	8011b5e <USBD_LL_DataInStage+0x40>
      if (pdev->pClass->DataIn != NULL)
 8011bb6:	23ae      	movs	r3, #174	@ 0xae
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	58c3      	ldr	r3, [r0, r3]
 8011bbc:	695b      	ldr	r3, [r3, #20]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d0cd      	beq.n	8011b5e <USBD_LL_DataInStage+0x40>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011bc2:	0029      	movs	r1, r5
 8011bc4:	4798      	blx	r3
        if (ret != USBD_OK)
 8011bc6:	e7cb      	b.n	8011b60 <USBD_LL_DataInStage+0x42>

08011bc8 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011bc8:	23a7      	movs	r3, #167	@ 0xa7
 8011bca:	2201      	movs	r2, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 8011bcc:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011bce:	009b      	lsls	r3, r3, #2
{
 8011bd0:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011bd2:	54c2      	strb	r2, [r0, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8011bd4:	3b08      	subs	r3, #8
 8011bd6:	50c1      	str	r1, [r0, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 8011bd8:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 8011bda:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8011bdc:	50c1      	str	r1, [r0, r3]

  if (pdev->pClass == NULL)
 8011bde:	3314      	adds	r3, #20
 8011be0:	58c3      	ldr	r3, [r0, r3]
{
 8011be2:	0004      	movs	r4, r0
  {
    return USBD_FAIL;
 8011be4:	2003      	movs	r0, #3
  if (pdev->pClass == NULL)
 8011be6:	428b      	cmp	r3, r1
 8011be8:	d01b      	beq.n	8011c22 <USBD_LL_Reset+0x5a>
  }

	if (pdev->pClass->DeInit != NULL)
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	428b      	cmp	r3, r1
 8011bee:	d001      	beq.n	8011bf4 <USBD_LL_Reset+0x2c>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011bf0:	0020      	movs	r0, r4
 8011bf2:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	2340      	movs	r3, #64	@ 0x40
 8011bf8:	0011      	movs	r1, r2
 8011bfa:	0020      	movs	r0, r4
 8011bfc:	f000 fbb3 	bl	8012366 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011c00:	23b2      	movs	r3, #178	@ 0xb2
 8011c02:	2601      	movs	r6, #1
 8011c04:	005b      	lsls	r3, r3, #1
 8011c06:	52e6      	strh	r6, [r4, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011c08:	0023      	movs	r3, r4
 8011c0a:	2540      	movs	r5, #64	@ 0x40
 8011c0c:	33fc      	adds	r3, #252	@ 0xfc
 8011c0e:	665d      	str	r5, [r3, #100]	@ 0x64

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011c10:	2200      	movs	r2, #0
 8011c12:	002b      	movs	r3, r5
 8011c14:	2180      	movs	r1, #128	@ 0x80
 8011c16:	0020      	movs	r0, r4
 8011c18:	f000 fba5 	bl	8012366 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 8011c1c:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011c1e:	84a6      	strh	r6, [r4, #36]	@ 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011c20:	6225      	str	r5, [r4, #32]
}
 8011c22:	bd70      	pop	{r4, r5, r6, pc}

08011c24 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8011c24:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8011c26:	2000      	movs	r0, #0
 8011c28:	4770      	bx	lr
	...

08011c2c <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8011c2c:	22a7      	movs	r2, #167	@ 0xa7
 8011c2e:	0092      	lsls	r2, r2, #2
 8011c30:	5c83      	ldrb	r3, [r0, r2]
 8011c32:	4903      	ldr	r1, [pc, #12]	@ (8011c40 <USBD_LL_Suspend+0x14>)
 8011c34:	b2db      	uxtb	r3, r3
 8011c36:	5443      	strb	r3, [r0, r1]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011c38:	2304      	movs	r3, #4
 8011c3a:	5483      	strb	r3, [r0, r2]

  return USBD_OK;
}
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	4770      	bx	lr
 8011c40:	0000029d 	.word	0x0000029d

08011c44 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011c44:	22a7      	movs	r2, #167	@ 0xa7
 8011c46:	0092      	lsls	r2, r2, #2
 8011c48:	5c83      	ldrb	r3, [r0, r2]
 8011c4a:	2b04      	cmp	r3, #4
 8011c4c:	d103      	bne.n	8011c56 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011c4e:	4b03      	ldr	r3, [pc, #12]	@ (8011c5c <USBD_LL_Resume+0x18>)
 8011c50:	5cc3      	ldrb	r3, [r0, r3]
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	5483      	strb	r3, [r0, r2]
  }

  return USBD_OK;
}
 8011c56:	2000      	movs	r0, #0
 8011c58:	4770      	bx	lr
 8011c5a:	46c0      	nop			@ (mov r8, r8)
 8011c5c:	0000029d 	.word	0x0000029d

08011c60 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8011c60:	23ae      	movs	r3, #174	@ 0xae
 8011c62:	009b      	lsls	r3, r3, #2
 8011c64:	58c2      	ldr	r2, [r0, r3]
{
 8011c66:	b510      	push	{r4, lr}
  {
    return USBD_FAIL;
 8011c68:	2303      	movs	r3, #3
  if (pdev->pClass == NULL)
 8011c6a:	2a00      	cmp	r2, #0
 8011c6c:	d008      	beq.n	8011c80 <USBD_LL_SOF+0x20>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c6e:	23a7      	movs	r3, #167	@ 0xa7
 8011c70:	009b      	lsls	r3, r3, #2
 8011c72:	5cc3      	ldrb	r3, [r0, r3]
 8011c74:	2b03      	cmp	r3, #3
 8011c76:	d102      	bne.n	8011c7e <USBD_LL_SOF+0x1e>
  {
    if (pdev->pClass->SOF != NULL)
 8011c78:	69d3      	ldr	r3, [r2, #28]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d102      	bne.n	8011c84 <USBD_LL_SOF+0x24>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8011c7e:	2300      	movs	r3, #0
}
 8011c80:	0018      	movs	r0, r3
 8011c82:	bd10      	pop	{r4, pc}
      (void)pdev->pClass->SOF(pdev);
 8011c84:	4798      	blx	r3
 8011c86:	e7fa      	b.n	8011c7e <USBD_LL_SOF+0x1e>

08011c88 <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8011c88:	b510      	push	{r4, lr}
 8011c8a:	0004      	movs	r4, r0
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c8c:	2180      	movs	r1, #128	@ 0x80
 8011c8e:	f000 fb7f 	bl	8012390 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011c92:	2100      	movs	r1, #0
 8011c94:	0020      	movs	r0, r4
 8011c96:	f000 fb7b 	bl	8012390 <USBD_LL_StallEP>
}
 8011c9a:	bd10      	pop	{r4, pc}

08011c9c <USBD_StdDevReq>:
{
 8011c9c:	2260      	movs	r2, #96	@ 0x60
 8011c9e:	780b      	ldrb	r3, [r1, #0]
 8011ca0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ca2:	4013      	ands	r3, r2
 8011ca4:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ca6:	0019      	movs	r1, r3
 8011ca8:	1892      	adds	r2, r2, r2
 8011caa:	3920      	subs	r1, #32
{
 8011cac:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011cae:	4211      	tst	r1, r2
 8011cb0:	d006      	beq.n	8011cc0 <USBD_StdDevReq+0x24>
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d00d      	beq.n	8011cd2 <USBD_StdDevReq+0x36>
      USBD_CtlError(pdev, req);
 8011cb6:	0020      	movs	r0, r4
 8011cb8:	f7ff ffe6 	bl	8011c88 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8011cbc:	2500      	movs	r5, #0
 8011cbe:	e006      	b.n	8011cce <USBD_StdDevReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011cc0:	23ae      	movs	r3, #174	@ 0xae
 8011cc2:	009b      	lsls	r3, r3, #2
 8011cc4:	58c3      	ldr	r3, [r0, r3]
 8011cc6:	0029      	movs	r1, r5
 8011cc8:	689b      	ldr	r3, [r3, #8]
 8011cca:	4798      	blx	r3
 8011ccc:	0005      	movs	r5, r0
}
 8011cce:	0028      	movs	r0, r5
 8011cd0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      switch (req->bRequest)
 8011cd2:	7868      	ldrb	r0, [r5, #1]
 8011cd4:	2809      	cmp	r0, #9
 8011cd6:	d8ee      	bhi.n	8011cb6 <USBD_StdDevReq+0x1a>
 8011cd8:	f7ee fa32 	bl	8000140 <__gnu_thumb1_case_shi>
 8011cdc:	012c010d 	.word	0x012c010d
 8011ce0:	0124ffed 	.word	0x0124ffed
 8011ce4:	0083ffed 	.word	0x0083ffed
 8011ce8:	ffed000a 	.word	0xffed000a
 8011cec:	00a500f6 	.word	0x00a500f6
  uint16_t len = 0U;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	466a      	mov	r2, sp
 8011cf4:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 8011cf6:	8869      	ldrh	r1, [r5, #2]
 8011cf8:	0a08      	lsrs	r0, r1, #8
 8011cfa:	3801      	subs	r0, #1
 8011cfc:	2806      	cmp	r0, #6
 8011cfe:	d8da      	bhi.n	8011cb6 <USBD_StdDevReq+0x1a>
 8011d00:	f7ee fa0a 	bl	8000118 <__gnu_thumb1_case_sqi>
 8011d04:	d92f2004 	.word	0xd92f2004
 8011d08:	56d9      	.short	0x56d9
 8011d0a:	62          	.byte	0x62
 8011d0b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011d0c:	23ad      	movs	r3, #173	@ 0xad
 8011d0e:	009b      	lsls	r3, r3, #2
 8011d10:	58e3      	ldr	r3, [r4, r3]
 8011d12:	7c20      	ldrb	r0, [r4, #16]
 8011d14:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011d16:	466a      	mov	r2, sp
 8011d18:	1d91      	adds	r1, r2, #6
 8011d1a:	4798      	blx	r3
  if (req->wLength != 0U)
 8011d1c:	88e9      	ldrh	r1, [r5, #6]
 8011d1e:	2900      	cmp	r1, #0
 8011d20:	d100      	bne.n	8011d24 <USBD_StdDevReq+0x88>
 8011d22:	e0b4      	b.n	8011e8e <USBD_StdDevReq+0x1f2>
    if (len != 0U)
 8011d24:	466b      	mov	r3, sp
 8011d26:	88da      	ldrh	r2, [r3, #6]
 8011d28:	2a00      	cmp	r2, #0
 8011d2a:	d0c4      	beq.n	8011cb6 <USBD_StdDevReq+0x1a>
      len = MIN(len, req->wLength);
 8011d2c:	1c0b      	adds	r3, r1, #0
 8011d2e:	4291      	cmp	r1, r2
 8011d30:	d900      	bls.n	8011d34 <USBD_StdDevReq+0x98>
 8011d32:	1c13      	adds	r3, r2, #0
 8011d34:	4669      	mov	r1, sp
 8011d36:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011d38:	0001      	movs	r1, r0
      len = MIN(len, req->wLength);
 8011d3a:	b29a      	uxth	r2, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011d3c:	0020      	movs	r0, r4
 8011d3e:	f000 fa0d 	bl	801215c <USBD_CtlSendData>
        break;
 8011d42:	e7bb      	b.n	8011cbc <USBD_StdDevReq+0x20>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011d44:	23ae      	movs	r3, #174	@ 0xae
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d46:	7c22      	ldrb	r2, [r4, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	58e3      	ldr	r3, [r4, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d4c:	2a00      	cmp	r2, #0
 8011d4e:	d106      	bne.n	8011d5e <USBD_StdDevReq+0xc2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011d52:	466a      	mov	r2, sp
 8011d54:	1d90      	adds	r0, r2, #6
 8011d56:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d58:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011d5a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8011d5c:	e7de      	b.n	8011d1c <USBD_StdDevReq+0x80>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d60:	e7f7      	b.n	8011d52 <USBD_StdDevReq+0xb6>
      switch ((uint8_t)(req->wValue))
 8011d62:	b2c9      	uxtb	r1, r1
 8011d64:	2905      	cmp	r1, #5
 8011d66:	d817      	bhi.n	8011d98 <USBD_StdDevReq+0xfc>
 8011d68:	23ad      	movs	r3, #173	@ 0xad
 8011d6a:	0008      	movs	r0, r1
 8011d6c:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011d6e:	58e3      	ldr	r3, [r4, r3]
      switch ((uint8_t)(req->wValue))
 8011d70:	f7ee f9dc 	bl	800012c <__gnu_thumb1_case_uqi>
 8011d74:	0c0a0803 	.word	0x0c0a0803
 8011d78:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011d7a:	685b      	ldr	r3, [r3, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d09a      	beq.n	8011cb6 <USBD_StdDevReq+0x1a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011d80:	7c20      	ldrb	r0, [r4, #16]
 8011d82:	e7c8      	b.n	8011d16 <USBD_StdDevReq+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	e7f9      	b.n	8011d7c <USBD_StdDevReq+0xe0>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	e7f7      	b.n	8011d7c <USBD_StdDevReq+0xe0>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011d8c:	691b      	ldr	r3, [r3, #16]
 8011d8e:	e7f5      	b.n	8011d7c <USBD_StdDevReq+0xe0>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011d90:	695b      	ldr	r3, [r3, #20]
 8011d92:	e7f3      	b.n	8011d7c <USBD_StdDevReq+0xe0>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011d94:	699b      	ldr	r3, [r3, #24]
 8011d96:	e7f1      	b.n	8011d7c <USBD_StdDevReq+0xe0>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8011d98:	23ae      	movs	r3, #174	@ 0xae
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	58e3      	ldr	r3, [r4, r3]
 8011d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d100      	bne.n	8011da6 <USBD_StdDevReq+0x10a>
 8011da4:	e787      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8011da6:	466a      	mov	r2, sp
 8011da8:	0020      	movs	r0, r4
 8011daa:	3206      	adds	r2, #6
 8011dac:	4798      	blx	r3
  if (err != 0U)
 8011dae:	e7b5      	b.n	8011d1c <USBD_StdDevReq+0x80>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011db0:	7c23      	ldrb	r3, [r4, #16]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d000      	beq.n	8011db8 <USBD_StdDevReq+0x11c>
 8011db6:	e77e      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011db8:	23ae      	movs	r3, #174	@ 0xae
 8011dba:	466a      	mov	r2, sp
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	58e3      	ldr	r3, [r4, r3]
 8011dc0:	1d90      	adds	r0, r2, #6
 8011dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dc4:	4798      	blx	r3
  if (err != 0U)
 8011dc6:	e7a9      	b.n	8011d1c <USBD_StdDevReq+0x80>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011dc8:	7c23      	ldrb	r3, [r4, #16]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d000      	beq.n	8011dd0 <USBD_StdDevReq+0x134>
 8011dce:	e772      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011dd0:	23ae      	movs	r3, #174	@ 0xae
 8011dd2:	466a      	mov	r2, sp
 8011dd4:	009b      	lsls	r3, r3, #2
 8011dd6:	58e3      	ldr	r3, [r4, r3]
 8011dd8:	1d90      	adds	r0, r2, #6
 8011dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ddc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011dde:	2307      	movs	r3, #7
 8011de0:	e7bb      	b.n	8011d5a <USBD_StdDevReq+0xbe>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011de2:	88ab      	ldrh	r3, [r5, #4]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d000      	beq.n	8011dea <USBD_StdDevReq+0x14e>
 8011de8:	e765      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
 8011dea:	88eb      	ldrh	r3, [r5, #6]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d000      	beq.n	8011df2 <USBD_StdDevReq+0x156>
 8011df0:	e761      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
 8011df2:	886d      	ldrh	r5, [r5, #2]
 8011df4:	2d7f      	cmp	r5, #127	@ 0x7f
 8011df6:	d900      	bls.n	8011dfa <USBD_StdDevReq+0x15e>
 8011df8:	e75d      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dfa:	26a7      	movs	r6, #167	@ 0xa7
 8011dfc:	00b6      	lsls	r6, r6, #2
 8011dfe:	5da3      	ldrb	r3, [r4, r6]
 8011e00:	2b03      	cmp	r3, #3
 8011e02:	d100      	bne.n	8011e06 <USBD_StdDevReq+0x16a>
 8011e04:	e757      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
      pdev->dev_address = dev_addr;
 8011e06:	4b53      	ldr	r3, [pc, #332]	@ (8011f54 <USBD_StdDevReq+0x2b8>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011e08:	b2ed      	uxtb	r5, r5
      pdev->dev_address = dev_addr;
 8011e0a:	54e5      	strb	r5, [r4, r3]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011e0c:	0029      	movs	r1, r5
 8011e0e:	0020      	movs	r0, r4
 8011e10:	f000 fad0 	bl	80123b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011e14:	0020      	movs	r0, r4
 8011e16:	f000 f9cf 	bl	80121b8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e1a:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 8011e1c:	2d00      	cmp	r5, #0
 8011e1e:	d100      	bne.n	8011e22 <USBD_StdDevReq+0x186>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011e20:	2301      	movs	r3, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011e22:	55a3      	strb	r3, [r4, r6]
 8011e24:	e74a      	b.n	8011cbc <USBD_StdDevReq+0x20>
  cfgidx = (uint8_t)(req->wValue);
 8011e26:	78a9      	ldrb	r1, [r5, #2]
 8011e28:	4d4b      	ldr	r5, [pc, #300]	@ (8011f58 <USBD_StdDevReq+0x2bc>)
 8011e2a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011e2c:	2901      	cmp	r1, #1
 8011e2e:	d904      	bls.n	8011e3a <USBD_StdDevReq+0x19e>
    USBD_CtlError(pdev, req);
 8011e30:	0020      	movs	r0, r4
 8011e32:	f7ff ff29 	bl	8011c88 <USBD_CtlError.constprop.0>
    return USBD_FAIL;
 8011e36:	2503      	movs	r5, #3
 8011e38:	e749      	b.n	8011cce <USBD_StdDevReq+0x32>
  switch (pdev->dev_state)
 8011e3a:	26a7      	movs	r6, #167	@ 0xa7
 8011e3c:	00b6      	lsls	r6, r6, #2
 8011e3e:	5da3      	ldrb	r3, [r4, r6]
 8011e40:	b2da      	uxtb	r2, r3
 8011e42:	2b02      	cmp	r3, #2
 8011e44:	d009      	beq.n	8011e5a <USBD_StdDevReq+0x1be>
 8011e46:	2a03      	cmp	r2, #3
 8011e48:	d019      	beq.n	8011e7e <USBD_StdDevReq+0x1e2>
      USBD_CtlError(pdev, req);
 8011e4a:	0020      	movs	r0, r4
 8011e4c:	f7ff ff1c 	bl	8011c88 <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011e50:	0020      	movs	r0, r4
 8011e52:	7829      	ldrb	r1, [r5, #0]
 8011e54:	f7ff fdee 	bl	8011a34 <USBD_ClrClassConfig>
      break;
 8011e58:	e7ed      	b.n	8011e36 <USBD_StdDevReq+0x19a>
      if (cfgidx != 0U)
 8011e5a:	2900      	cmp	r1, #0
 8011e5c:	d017      	beq.n	8011e8e <USBD_StdDevReq+0x1f2>
        pdev->dev_config = cfgidx;
 8011e5e:	2101      	movs	r1, #1
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e60:	0020      	movs	r0, r4
        pdev->dev_config = cfgidx;
 8011e62:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e64:	f7ff fdda 	bl	8011a1c <USBD_SetClassConfig>
 8011e68:	0005      	movs	r5, r0
          USBD_CtlError(pdev, req);
 8011e6a:	0020      	movs	r0, r4
        if (ret != USBD_OK)
 8011e6c:	2d00      	cmp	r5, #0
 8011e6e:	d002      	beq.n	8011e76 <USBD_StdDevReq+0x1da>
          USBD_CtlError(pdev, req);
 8011e70:	f7ff ff0a 	bl	8011c88 <USBD_CtlError.constprop.0>
 8011e74:	e72b      	b.n	8011cce <USBD_StdDevReq+0x32>
          (void)USBD_CtlSendStatus(pdev);
 8011e76:	f000 f99f 	bl	80121b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011e7a:	2303      	movs	r3, #3
 8011e7c:	e7d1      	b.n	8011e22 <USBD_StdDevReq+0x186>
      if (cfgidx == 0U)
 8011e7e:	2900      	cmp	r1, #0
 8011e80:	d109      	bne.n	8011e96 <USBD_StdDevReq+0x1fa>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e82:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011e84:	0020      	movs	r0, r4
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e86:	55a3      	strb	r3, [r4, r6]
        pdev->dev_config = cfgidx;
 8011e88:	6061      	str	r1, [r4, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011e8a:	f7ff fdd3 	bl	8011a34 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011e8e:	0020      	movs	r0, r4
 8011e90:	f000 f992 	bl	80121b8 <USBD_CtlSendStatus>
 8011e94:	e712      	b.n	8011cbc <USBD_StdDevReq+0x20>
      else if (cfgidx != pdev->dev_config)
 8011e96:	6861      	ldr	r1, [r4, #4]
 8011e98:	2901      	cmp	r1, #1
 8011e9a:	d0f8      	beq.n	8011e8e <USBD_StdDevReq+0x1f2>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011e9c:	b2c9      	uxtb	r1, r1
 8011e9e:	0020      	movs	r0, r4
 8011ea0:	f7ff fdc8 	bl	8011a34 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011ea4:	7829      	ldrb	r1, [r5, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011ea6:	0020      	movs	r0, r4
        pdev->dev_config = cfgidx;
 8011ea8:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011eaa:	f7ff fdb7 	bl	8011a1c <USBD_SetClassConfig>
 8011eae:	1e05      	subs	r5, r0, #0
        if (ret != USBD_OK)
 8011eb0:	d0ed      	beq.n	8011e8e <USBD_StdDevReq+0x1f2>
          USBD_CtlError(pdev, req);
 8011eb2:	0020      	movs	r0, r4
 8011eb4:	f7ff fee8 	bl	8011c88 <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011eb8:	6861      	ldr	r1, [r4, #4]
 8011eba:	0020      	movs	r0, r4
 8011ebc:	b2c9      	uxtb	r1, r1
 8011ebe:	f7ff fdb9 	bl	8011a34 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ec2:	2302      	movs	r3, #2
 8011ec4:	55a3      	strb	r3, [r4, r6]
 8011ec6:	e702      	b.n	8011cce <USBD_StdDevReq+0x32>
  if (req->wLength != 1U)
 8011ec8:	88ea      	ldrh	r2, [r5, #6]
 8011eca:	2a01      	cmp	r2, #1
 8011ecc:	d000      	beq.n	8011ed0 <USBD_StdDevReq+0x234>
 8011ece:	e6f2      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
    switch (pdev->dev_state)
 8011ed0:	23a7      	movs	r3, #167	@ 0xa7
 8011ed2:	009b      	lsls	r3, r3, #2
 8011ed4:	5ce1      	ldrb	r1, [r4, r3]
 8011ed6:	b2cb      	uxtb	r3, r1
 8011ed8:	2902      	cmp	r1, #2
 8011eda:	d807      	bhi.n	8011eec <USBD_StdDevReq+0x250>
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d100      	bne.n	8011ee2 <USBD_StdDevReq+0x246>
 8011ee0:	e6e9      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
        pdev->dev_default_config = 0U;
 8011ee2:	2300      	movs	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011ee4:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 8011ee6:	60a3      	str	r3, [r4, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011ee8:	3108      	adds	r1, #8
 8011eea:	e727      	b.n	8011d3c <USBD_StdDevReq+0xa0>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011eec:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8011eee:	2b03      	cmp	r3, #3
 8011ef0:	d100      	bne.n	8011ef4 <USBD_StdDevReq+0x258>
 8011ef2:	e723      	b.n	8011d3c <USBD_StdDevReq+0xa0>
 8011ef4:	e6df      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
  switch (pdev->dev_state)
 8011ef6:	23a7      	movs	r3, #167	@ 0xa7
 8011ef8:	009b      	lsls	r3, r3, #2
 8011efa:	5ce3      	ldrb	r3, [r4, r3]
 8011efc:	3b01      	subs	r3, #1
 8011efe:	2b02      	cmp	r3, #2
 8011f00:	d900      	bls.n	8011f04 <USBD_StdDevReq+0x268>
 8011f02:	e6d8      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
      if (req->wLength != 0x2U)
 8011f04:	88eb      	ldrh	r3, [r5, #6]
 8011f06:	2b02      	cmp	r3, #2
 8011f08:	d000      	beq.n	8011f0c <USBD_StdDevReq+0x270>
 8011f0a:	e6d4      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
      if (pdev->dev_remote_wakeup != 0U)
 8011f0c:	23a9      	movs	r3, #169	@ 0xa9
 8011f0e:	009b      	lsls	r3, r3, #2
 8011f10:	58e2      	ldr	r2, [r4, r3]
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011f12:	2301      	movs	r3, #1
      if (pdev->dev_remote_wakeup != 0U)
 8011f14:	2a00      	cmp	r2, #0
 8011f16:	d000      	beq.n	8011f1a <USBD_StdDevReq+0x27e>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011f18:	3302      	adds	r3, #2
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011f1a:	0021      	movs	r1, r4
 8011f1c:	2202      	movs	r2, #2
 8011f1e:	60e3      	str	r3, [r4, #12]
 8011f20:	310c      	adds	r1, #12
 8011f22:	e70b      	b.n	8011d3c <USBD_StdDevReq+0xa0>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011f24:	886b      	ldrh	r3, [r5, #2]
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d000      	beq.n	8011f2c <USBD_StdDevReq+0x290>
 8011f2a:	e6c7      	b.n	8011cbc <USBD_StdDevReq+0x20>
    pdev->dev_remote_wakeup = 1U;
 8011f2c:	22a9      	movs	r2, #169	@ 0xa9
 8011f2e:	0092      	lsls	r2, r2, #2
 8011f30:	50a3      	str	r3, [r4, r2]
    (void)USBD_CtlSendStatus(pdev);
 8011f32:	e7ac      	b.n	8011e8e <USBD_StdDevReq+0x1f2>
  switch (pdev->dev_state)
 8011f34:	23a7      	movs	r3, #167	@ 0xa7
 8011f36:	009b      	lsls	r3, r3, #2
 8011f38:	5ce3      	ldrb	r3, [r4, r3]
 8011f3a:	3b01      	subs	r3, #1
 8011f3c:	2b02      	cmp	r3, #2
 8011f3e:	d900      	bls.n	8011f42 <USBD_StdDevReq+0x2a6>
 8011f40:	e6b9      	b.n	8011cb6 <USBD_StdDevReq+0x1a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011f42:	886b      	ldrh	r3, [r5, #2]
 8011f44:	2b01      	cmp	r3, #1
 8011f46:	d000      	beq.n	8011f4a <USBD_StdDevReq+0x2ae>
 8011f48:	e6b8      	b.n	8011cbc <USBD_StdDevReq+0x20>
        pdev->dev_remote_wakeup = 0U;
 8011f4a:	23a9      	movs	r3, #169	@ 0xa9
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	009b      	lsls	r3, r3, #2
 8011f50:	50e2      	str	r2, [r4, r3]
 8011f52:	e79c      	b.n	8011e8e <USBD_StdDevReq+0x1f2>
 8011f54:	0000029e 	.word	0x0000029e
 8011f58:	2000306e 	.word	0x2000306e

08011f5c <USBD_StdItfReq>:
{
 8011f5c:	2360      	movs	r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011f5e:	780a      	ldrb	r2, [r1, #0]
{
 8011f60:	b570      	push	{r4, r5, r6, lr}
 8011f62:	4013      	ands	r3, r2
 8011f64:	0004      	movs	r4, r0
 8011f66:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011f68:	0652      	lsls	r2, r2, #25
 8011f6a:	d501      	bpl.n	8011f70 <USBD_StdItfReq+0x14>
 8011f6c:	2b40      	cmp	r3, #64	@ 0x40
 8011f6e:	d11a      	bne.n	8011fa6 <USBD_StdItfReq+0x4a>
      switch (pdev->dev_state)
 8011f70:	23a7      	movs	r3, #167	@ 0xa7
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	5ce3      	ldrb	r3, [r4, r3]
 8011f76:	3b01      	subs	r3, #1
 8011f78:	2b02      	cmp	r3, #2
 8011f7a:	d814      	bhi.n	8011fa6 <USBD_StdItfReq+0x4a>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011f7c:	792b      	ldrb	r3, [r5, #4]
 8011f7e:	2b0f      	cmp	r3, #15
 8011f80:	d811      	bhi.n	8011fa6 <USBD_StdItfReq+0x4a>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011f82:	23ae      	movs	r3, #174	@ 0xae
 8011f84:	009b      	lsls	r3, r3, #2
 8011f86:	58e3      	ldr	r3, [r4, r3]
 8011f88:	0029      	movs	r1, r5
 8011f8a:	689b      	ldr	r3, [r3, #8]
 8011f8c:	0020      	movs	r0, r4
 8011f8e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011f90:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011f92:	0006      	movs	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d104      	bne.n	8011fa2 <USBD_StdItfReq+0x46>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d102      	bne.n	8011fa2 <USBD_StdItfReq+0x46>
              (void)USBD_CtlSendStatus(pdev);
 8011f9c:	0020      	movs	r0, r4
 8011f9e:	f000 f90b 	bl	80121b8 <USBD_CtlSendStatus>
}
 8011fa2:	0030      	movs	r0, r6
 8011fa4:	bd70      	pop	{r4, r5, r6, pc}
            USBD_CtlError(pdev, req);
 8011fa6:	0020      	movs	r0, r4
 8011fa8:	f7ff fe6e 	bl	8011c88 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8011fac:	2600      	movs	r6, #0
 8011fae:	e7f8      	b.n	8011fa2 <USBD_StdItfReq+0x46>

08011fb0 <USBD_StdEPReq>:
{
 8011fb0:	b570      	push	{r4, r5, r6, lr}
 8011fb2:	780b      	ldrb	r3, [r1, #0]
 8011fb4:	000d      	movs	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8011fb6:	888a      	ldrh	r2, [r1, #4]
 8011fb8:	2160      	movs	r1, #96	@ 0x60
 8011fba:	400b      	ands	r3, r1
{
 8011fbc:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011fbe:	0018      	movs	r0, r3
 8011fc0:	1849      	adds	r1, r1, r1
 8011fc2:	3820      	subs	r0, #32
 8011fc4:	4208      	tst	r0, r1
 8011fc6:	d058      	beq.n	801207a <USBD_StdEPReq+0xca>
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d003      	beq.n	8011fd4 <USBD_StdEPReq+0x24>
              USBD_CtlError(pdev, req);
 8011fcc:	0020      	movs	r0, r4
 8011fce:	f7ff fe5b 	bl	8011c88 <USBD_CtlError.constprop.0>
              break;
 8011fd2:	e03d      	b.n	8012050 <USBD_StdEPReq+0xa0>
      switch (req->bRequest)
 8011fd4:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8011fd6:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d03b      	beq.n	8012054 <USBD_StdEPReq+0xa4>
 8011fdc:	2b03      	cmp	r3, #3
 8011fde:	d021      	beq.n	8012024 <USBD_StdEPReq+0x74>
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d1f3      	bne.n	8011fcc <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 8011fe4:	23a7      	movs	r3, #167	@ 0xa7
 8011fe6:	009b      	lsls	r3, r3, #2
 8011fe8:	5ce3      	ldrb	r3, [r4, r3]
 8011fea:	b2d8      	uxtb	r0, r3
 8011fec:	2b02      	cmp	r3, #2
 8011fee:	d056      	beq.n	801209e <USBD_StdEPReq+0xee>
 8011ff0:	2803      	cmp	r0, #3
 8011ff2:	d1eb      	bne.n	8011fcc <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011ff4:	230f      	movs	r3, #15
 8011ff6:	2514      	movs	r5, #20
 8011ff8:	400b      	ands	r3, r1
 8011ffa:	436b      	muls	r3, r5
 8011ffc:	18e3      	adds	r3, r4, r3
              if ((ep_addr & 0x80U) == 0x80U)
 8011ffe:	0612      	lsls	r2, r2, #24
 8012000:	d55e      	bpl.n	80120c0 <USBD_StdEPReq+0x110>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012002:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012004:	2b00      	cmp	r3, #0
 8012006:	d0e1      	beq.n	8011fcc <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012008:	237f      	movs	r3, #127	@ 0x7f
 801200a:	400b      	ands	r3, r1
 801200c:	3301      	adds	r3, #1
 801200e:	435d      	muls	r5, r3
 8012010:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012012:	2980      	cmp	r1, #128	@ 0x80
 8012014:	d060      	beq.n	80120d8 <USBD_StdEPReq+0x128>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012016:	0020      	movs	r0, r4
 8012018:	f000 f97a 	bl	8012310 <USBD_LL_IsStallEP>
 801201c:	2800      	cmp	r0, #0
 801201e:	d060      	beq.n	80120e2 <USBD_StdEPReq+0x132>
                pep->status = 0x0001U;
 8012020:	2301      	movs	r3, #1
 8012022:	e05a      	b.n	80120da <USBD_StdEPReq+0x12a>
          switch (pdev->dev_state)
 8012024:	23a7      	movs	r3, #167	@ 0xa7
 8012026:	009b      	lsls	r3, r3, #2
 8012028:	5ce3      	ldrb	r3, [r4, r3]
 801202a:	b2da      	uxtb	r2, r3
 801202c:	2b02      	cmp	r3, #2
 801202e:	d02c      	beq.n	801208a <USBD_StdEPReq+0xda>
 8012030:	2a03      	cmp	r2, #3
 8012032:	d1cb      	bne.n	8011fcc <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012034:	886b      	ldrh	r3, [r5, #2]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d107      	bne.n	801204a <USBD_StdEPReq+0x9a>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801203a:	064b      	lsls	r3, r1, #25
 801203c:	d005      	beq.n	801204a <USBD_StdEPReq+0x9a>
 801203e:	88eb      	ldrh	r3, [r5, #6]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d102      	bne.n	801204a <USBD_StdEPReq+0x9a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012044:	0020      	movs	r0, r4
 8012046:	f000 f9a3 	bl	8012390 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 801204a:	0020      	movs	r0, r4
 801204c:	f000 f8b4 	bl	80121b8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8012050:	2000      	movs	r0, #0
}
 8012052:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8012054:	23a7      	movs	r3, #167	@ 0xa7
 8012056:	009b      	lsls	r3, r3, #2
 8012058:	5ce3      	ldrb	r3, [r4, r3]
 801205a:	b2da      	uxtb	r2, r3
 801205c:	2b02      	cmp	r3, #2
 801205e:	d014      	beq.n	801208a <USBD_StdEPReq+0xda>
 8012060:	2a03      	cmp	r2, #3
 8012062:	d1b3      	bne.n	8011fcc <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012064:	886b      	ldrh	r3, [r5, #2]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d1f2      	bne.n	8012050 <USBD_StdEPReq+0xa0>
                if ((ep_addr & 0x7FU) != 0x00U)
 801206a:	064b      	lsls	r3, r1, #25
 801206c:	d002      	beq.n	8012074 <USBD_StdEPReq+0xc4>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801206e:	0020      	movs	r0, r4
 8012070:	f000 f997 	bl	80123a2 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8012074:	0020      	movs	r0, r4
 8012076:	f000 f89f 	bl	80121b8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801207a:	23ae      	movs	r3, #174	@ 0xae
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	58e3      	ldr	r3, [r4, r3]
 8012080:	0029      	movs	r1, r5
 8012082:	0020      	movs	r0, r4
 8012084:	689b      	ldr	r3, [r3, #8]
 8012086:	4798      	blx	r3
 8012088:	e7e3      	b.n	8012052 <USBD_StdEPReq+0xa2>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801208a:	064b      	lsls	r3, r1, #25
 801208c:	d09e      	beq.n	8011fcc <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801208e:	0020      	movs	r0, r4
 8012090:	f000 f97e 	bl	8012390 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012094:	2180      	movs	r1, #128	@ 0x80
 8012096:	0020      	movs	r0, r4
 8012098:	f000 f97a 	bl	8012390 <USBD_LL_StallEP>
 801209c:	e7d8      	b.n	8012050 <USBD_StdEPReq+0xa0>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801209e:	0649      	lsls	r1, r1, #25
 80120a0:	d000      	beq.n	80120a4 <USBD_StdEPReq+0xf4>
 80120a2:	e793      	b.n	8011fcc <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80120a4:	0021      	movs	r1, r4
 80120a6:	3155      	adds	r1, #85	@ 0x55
 80120a8:	31ff      	adds	r1, #255	@ 0xff
 80120aa:	0612      	lsls	r2, r2, #24
 80120ac:	d501      	bpl.n	80120b2 <USBD_StdEPReq+0x102>
 80120ae:	3941      	subs	r1, #65	@ 0x41
 80120b0:	39ff      	subs	r1, #255	@ 0xff
              pep->status = 0x0000U;
 80120b2:	2300      	movs	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80120b4:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 80120b6:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80120b8:	0020      	movs	r0, r4
 80120ba:	f000 f84f 	bl	801215c <USBD_CtlSendData>
              break;
 80120be:	e7c7      	b.n	8012050 <USBD_StdEPReq+0xa0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80120c0:	3365      	adds	r3, #101	@ 0x65
 80120c2:	33ff      	adds	r3, #255	@ 0xff
 80120c4:	881b      	ldrh	r3, [r3, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d100      	bne.n	80120cc <USBD_StdEPReq+0x11c>
 80120ca:	e77f      	b.n	8011fcc <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80120cc:	434d      	muls	r5, r1
 80120ce:	3555      	adds	r5, #85	@ 0x55
 80120d0:	35ff      	adds	r5, #255	@ 0xff
 80120d2:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80120d4:	2900      	cmp	r1, #0
 80120d6:	d19e      	bne.n	8012016 <USBD_StdEPReq+0x66>
                pep->status = 0x0000U;
 80120d8:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 80120da:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80120dc:	2202      	movs	r2, #2
 80120de:	0029      	movs	r1, r5
 80120e0:	e7ea      	b.n	80120b8 <USBD_StdEPReq+0x108>
                pep->status = 0x0000U;
 80120e2:	6028      	str	r0, [r5, #0]
 80120e4:	e7fa      	b.n	80120dc <USBD_StdEPReq+0x12c>

080120e6 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80120e6:	780b      	ldrb	r3, [r1, #0]
 80120e8:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80120ea:	784b      	ldrb	r3, [r1, #1]
 80120ec:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 80120ee:	78cb      	ldrb	r3, [r1, #3]
 80120f0:	788a      	ldrb	r2, [r1, #2]
 80120f2:	021b      	lsls	r3, r3, #8
 80120f4:	4313      	orrs	r3, r2
 80120f6:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 80120f8:	794b      	ldrb	r3, [r1, #5]
 80120fa:	790a      	ldrb	r2, [r1, #4]
 80120fc:	021b      	lsls	r3, r3, #8
 80120fe:	4313      	orrs	r3, r2
 8012100:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8012102:	79cb      	ldrb	r3, [r1, #7]
 8012104:	798a      	ldrb	r2, [r1, #6]
 8012106:	021b      	lsls	r3, r3, #8
 8012108:	4313      	orrs	r3, r2
 801210a:	80c3      	strh	r3, [r0, #6]
}
 801210c:	4770      	bx	lr

0801210e <USBD_CtlError>:
{
 801210e:	b510      	push	{r4, lr}
 8012110:	0004      	movs	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012112:	2180      	movs	r1, #128	@ 0x80
 8012114:	f000 f93c 	bl	8012390 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012118:	2100      	movs	r1, #0
 801211a:	0020      	movs	r0, r4
 801211c:	f000 f938 	bl	8012390 <USBD_LL_StallEP>
}
 8012120:	bd10      	pop	{r4, pc}

08012122 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012122:	b570      	push	{r4, r5, r6, lr}
 8012124:	0004      	movs	r4, r0
 8012126:	000d      	movs	r5, r1
 8012128:	0016      	movs	r6, r2
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 801212a:	2800      	cmp	r0, #0
 801212c:	d00d      	beq.n	801214a <USBD_GetString+0x28>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 801212e:	f7ed ffeb 	bl	8000108 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012132:	b2c3      	uxtb	r3, r0
 8012134:	3301      	adds	r3, #1
 8012136:	005b      	lsls	r3, r3, #1
 8012138:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 801213a:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801213c:	2303      	movs	r3, #3
    unicode[idx] = 0U;
 801213e:	2100      	movs	r1, #0
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012140:	706b      	strb	r3, [r5, #1]
  idx++;
 8012142:	3b01      	subs	r3, #1
  while (*pdesc != (uint8_t)'\0')
 8012144:	7822      	ldrb	r2, [r4, #0]
 8012146:	2a00      	cmp	r2, #0
 8012148:	d100      	bne.n	801214c <USBD_GetString+0x2a>
}
 801214a:	bd70      	pop	{r4, r5, r6, pc}
    unicode[idx] = *pdesc;
 801214c:	54ea      	strb	r2, [r5, r3]
    idx++;
 801214e:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8012150:	b2d2      	uxtb	r2, r2
    idx++;
 8012152:	3302      	adds	r3, #2
    pdesc++;
 8012154:	3401      	adds	r4, #1
    unicode[idx] = 0U;
 8012156:	54a9      	strb	r1, [r5, r2]
    idx++;
 8012158:	b2db      	uxtb	r3, r3
 801215a:	e7f3      	b.n	8012144 <USBD_GetString+0x22>

0801215c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801215c:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801215e:	22a5      	movs	r2, #165	@ 0xa5
{
 8012160:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012162:	2402      	movs	r4, #2
 8012164:	0092      	lsls	r2, r2, #2
 8012166:	5084      	str	r4, [r0, r2]
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012168:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 801216a:	6183      	str	r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801216c:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length = len;
 801216e:	61c3      	str	r3, [r0, #28]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012170:	f000 f929 	bl	80123c6 <USBD_LL_Transmit>

  return USBD_OK;
}
 8012174:	2000      	movs	r0, #0
 8012176:	bd10      	pop	{r4, pc}

08012178 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012178:	b510      	push	{r4, lr}
 801217a:	0013      	movs	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801217c:	000a      	movs	r2, r1
 801217e:	2100      	movs	r1, #0
 8012180:	f000 f921 	bl	80123c6 <USBD_LL_Transmit>

  return USBD_OK;
}
 8012184:	2000      	movs	r0, #0
 8012186:	bd10      	pop	{r4, pc}

08012188 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012188:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801218a:	22a5      	movs	r2, #165	@ 0xa5
{
 801218c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801218e:	2403      	movs	r4, #3
 8012190:	0092      	lsls	r2, r2, #2
 8012192:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8012194:	0002      	movs	r2, r0
 8012196:	32fc      	adds	r2, #252	@ 0xfc
 8012198:	65d3      	str	r3, [r2, #92]	@ 0x5c

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801219a:	6613      	str	r3, [r2, #96]	@ 0x60
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801219c:	000a      	movs	r2, r1
 801219e:	2100      	movs	r1, #0
 80121a0:	f000 f91a 	bl	80123d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80121a4:	2000      	movs	r0, #0
 80121a6:	bd10      	pop	{r4, pc}

080121a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80121a8:	b510      	push	{r4, lr}
 80121aa:	0013      	movs	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80121ac:	000a      	movs	r2, r1
 80121ae:	2100      	movs	r1, #0
 80121b0:	f000 f912 	bl	80123d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80121b4:	2000      	movs	r0, #0
 80121b6:	bd10      	pop	{r4, pc}

080121b8 <USBD_CtlSendStatus>:
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80121b8:	23a5      	movs	r3, #165	@ 0xa5
 80121ba:	2204      	movs	r2, #4
 80121bc:	009b      	lsls	r3, r3, #2
{
 80121be:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80121c0:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80121c2:	2300      	movs	r3, #0
 80121c4:	001a      	movs	r2, r3
 80121c6:	0019      	movs	r1, r3
 80121c8:	f000 f8fd 	bl	80123c6 <USBD_LL_Transmit>

  return USBD_OK;
}
 80121cc:	2000      	movs	r0, #0
 80121ce:	bd10      	pop	{r4, pc}

080121d0 <USBD_CtlReceiveStatus>:
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80121d0:	23a5      	movs	r3, #165	@ 0xa5
 80121d2:	2205      	movs	r2, #5
 80121d4:	009b      	lsls	r3, r3, #2
{
 80121d6:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80121d8:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80121da:	2300      	movs	r3, #0
 80121dc:	001a      	movs	r2, r3
 80121de:	0019      	movs	r1, r3
 80121e0:	f000 f8fa 	bl	80123d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80121e4:	2000      	movs	r0, #0
 80121e6:	bd10      	pop	{r4, pc}

080121e8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 80121e8:	23a6      	movs	r3, #166	@ 0xa6
{
 80121ea:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 80121ec:	009b      	lsls	r3, r3, #2
 80121ee:	18c1      	adds	r1, r0, r3
 80121f0:	3340      	adds	r3, #64	@ 0x40
 80121f2:	58c0      	ldr	r0, [r0, r3]
 80121f4:	f7ff fc28 	bl	8011a48 <USBD_LL_SetupStage>
}
 80121f8:	bd10      	pop	{r4, pc}

080121fa <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80121fa:	2328      	movs	r3, #40	@ 0x28
 80121fc:	434b      	muls	r3, r1
 80121fe:	18c3      	adds	r3, r0, r3
 8012200:	33fc      	adds	r3, #252	@ 0xfc
 8012202:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8012204:	23b6      	movs	r3, #182	@ 0xb6
{
 8012206:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012208:	009b      	lsls	r3, r3, #2
 801220a:	58c0      	ldr	r0, [r0, r3]
 801220c:	f7ff fc4c 	bl	8011aa8 <USBD_LL_DataOutStage>
}
 8012210:	bd10      	pop	{r4, pc}

08012212 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012212:	2328      	movs	r3, #40	@ 0x28
 8012214:	434b      	muls	r3, r1
 8012216:	18c3      	adds	r3, r0, r3
 8012218:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801221a:	23b6      	movs	r3, #182	@ 0xb6
{
 801221c:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801221e:	009b      	lsls	r3, r3, #2
 8012220:	58c0      	ldr	r0, [r0, r3]
 8012222:	f7ff fc7c 	bl	8011b1e <USBD_LL_DataInStage>
}
 8012226:	bd10      	pop	{r4, pc}

08012228 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 8012228:	23b6      	movs	r3, #182	@ 0xb6
{
 801222a:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 801222c:	009b      	lsls	r3, r3, #2
 801222e:	58c0      	ldr	r0, [r0, r3]
 8012230:	f7ff fd16 	bl	8011c60 <USBD_LL_SOF>
}
 8012234:	bd10      	pop	{r4, pc}

08012236 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012236:	b570      	push	{r4, r5, r6, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 8012238:	7943      	ldrb	r3, [r0, #5]
{
 801223a:	0004      	movs	r4, r0
  if (hpcd->Init.speed == PCD_SPEED_FULL)
 801223c:	2b02      	cmp	r3, #2
 801223e:	d001      	beq.n	8012244 <HAL_PCD_ResetCallback+0xe>
    speed = USBD_SPEED_HIGH;
  }
  #endif
  else
  {
    Error_Handler();
 8012240:	f7ef fe9c 	bl	8001f7c <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 8012244:	25b6      	movs	r5, #182	@ 0xb6
 8012246:	00ad      	lsls	r5, r5, #2
 8012248:	2101      	movs	r1, #1
 801224a:	5960      	ldr	r0, [r4, r5]
 801224c:	f7ff fcea 	bl	8011c24 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 8012250:	5960      	ldr	r0, [r4, r5]
 8012252:	f7ff fcb9 	bl	8011bc8 <USBD_LL_Reset>
}
 8012256:	bd70      	pop	{r4, r5, r6, pc}

08012258 <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 8012258:	23b6      	movs	r3, #182	@ 0xb6
{
 801225a:	b510      	push	{r4, lr}
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 801225c:	009b      	lsls	r3, r3, #2
 801225e:	58c0      	ldr	r0, [r0, r3]
 8012260:	f7ff fce4 	bl	8011c2c <USBD_LL_Suspend>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
  }
#endif
  /* USER CODE END 2 */
}
 8012264:	bd10      	pop	{r4, pc}

08012266 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8012266:	23b6      	movs	r3, #182	@ 0xb6
{
 8012268:	b510      	push	{r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 801226a:	009b      	lsls	r3, r3, #2
 801226c:	58c0      	ldr	r0, [r0, r3]
 801226e:	f7ff fce9 	bl	8011c44 <USBD_LL_Resume>
}
 8012272:	bd10      	pop	{r4, pc}

08012274 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012274:	b570      	push	{r4, r5, r6, lr}
 8012276:	0004      	movs	r4, r0
#endif
  }
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8012278:	4b1e      	ldr	r3, [pc, #120]	@ (80122f4 <USBD_LL_Init+0x80>)
 801227a:	481f      	ldr	r0, [pc, #124]	@ (80122f8 <USBD_LL_Init+0x84>)
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#endif

  if (pdev->id == DEVICE_FS)
 801227c:	7825      	ldrb	r5, [r4, #0]
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 801227e:	6018      	str	r0, [r3, #0]
  if (pdev->id == DEVICE_FS)
 8012280:	2d00      	cmp	r5, #0
 8012282:	d135      	bne.n	80122f0 <USBD_LL_Init+0x7c>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 8012284:	23b6      	movs	r3, #182	@ 0xb6
    pdev->pData = hpcd_USB_OTG_PTR;
 8012286:	26c4      	movs	r6, #196	@ 0xc4
    hpcd_USB_OTG_PTR->pData = pdev;
 8012288:	009b      	lsls	r3, r3, #2
    pdev->pData = hpcd_USB_OTG_PTR;
 801228a:	00b6      	lsls	r6, r6, #2

#if (STM32F1_DEVICE)
    /** Device is F1 or similar or if HAL_PCDEx_PMAConfig() is used by HAL driver */
    uint16_t pma_track = 0x40; /** PMA offset*/

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x00, PCD_SNG_BUF, pma_track);
 801228c:	002a      	movs	r2, r5
 801228e:	0029      	movs	r1, r5
    hpcd_USB_OTG_PTR->pData = pdev;
 8012290:	50c4      	str	r4, [r0, r3]
    pdev->pData = hpcd_USB_OTG_PTR;
 8012292:	51a0      	str	r0, [r4, r6]
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x00, PCD_SNG_BUF, pma_track);
 8012294:	2340      	movs	r3, #64	@ 0x40
 8012296:	f7f5 ff78 	bl	800818a <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x80, PCD_SNG_BUF, pma_track);
 801229a:	2380      	movs	r3, #128	@ 0x80
 801229c:	002a      	movs	r2, r5
 801229e:	0019      	movs	r1, r3
 80122a0:	59a0      	ldr	r0, [r4, r6]
 80122a2:	f7f5 ff72 	bl	800818a <HAL_PCDEx_PMAConfig>
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_KEYBOARD_IN_EP, PCD_SNG_BUF, pma_track);
    pma_track += 8;
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CUSTOM_HID_IN_EP, PCD_SNG_BUF, pma_track);
 80122a6:	4b15      	ldr	r3, [pc, #84]	@ (80122fc <USBD_LL_Init+0x88>)
 80122a8:	002a      	movs	r2, r5
 80122aa:	7819      	ldrb	r1, [r3, #0]
 80122ac:	59a0      	ldr	r0, [r4, r6]
 80122ae:	23c0      	movs	r3, #192	@ 0xc0
 80122b0:	f7f5 ff6b 	bl	800818a <HAL_PCDEx_PMAConfig>
    pma_track += 8;
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CUSTOM_HID_OUT_EP, PCD_SNG_BUF, pma_track);
 80122b4:	4b12      	ldr	r3, [pc, #72]	@ (8012300 <USBD_LL_Init+0x8c>)
 80122b6:	002a      	movs	r2, r5
 80122b8:	7819      	ldrb	r1, [r3, #0]
 80122ba:	59a0      	ldr	r0, [r4, r6]
 80122bc:	23c8      	movs	r3, #200	@ 0xc8
 80122be:	f7f5 ff64 	bl	800818a <HAL_PCDEx_PMAConfig>
    pma_track += 128;
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
    {
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_IN_EP[i], PCD_SNG_BUF, pma_track);
 80122c2:	4b10      	ldr	r3, [pc, #64]	@ (8012304 <USBD_LL_Init+0x90>)
 80122c4:	002a      	movs	r2, r5
 80122c6:	7819      	ldrb	r1, [r3, #0]
 80122c8:	59a0      	ldr	r0, [r4, r6]
 80122ca:	23d0      	movs	r3, #208	@ 0xd0
 80122cc:	f7f5 ff5d 	bl	800818a <HAL_PCDEx_PMAConfig>
      pma_track += 48;

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_OUT_EP[i], PCD_SNG_BUF, pma_track);
 80122d0:	4b0d      	ldr	r3, [pc, #52]	@ (8012308 <USBD_LL_Init+0x94>)
 80122d2:	002a      	movs	r2, r5
 80122d4:	7819      	ldrb	r1, [r3, #0]
 80122d6:	2380      	movs	r3, #128	@ 0x80
 80122d8:	59a0      	ldr	r0, [r4, r6]
 80122da:	005b      	lsls	r3, r3, #1
 80122dc:	f7f5 ff55 	bl	800818a <HAL_PCDEx_PMAConfig>
      pma_track += 48;

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_CMD_EP[i], PCD_SNG_BUF, pma_track);
 80122e0:	4b0a      	ldr	r3, [pc, #40]	@ (801230c <USBD_LL_Init+0x98>)
 80122e2:	002a      	movs	r2, r5
 80122e4:	7819      	ldrb	r1, [r3, #0]
 80122e6:	2398      	movs	r3, #152	@ 0x98
 80122e8:	59a0      	ldr	r0, [r4, r6]
 80122ea:	005b      	lsls	r3, r3, #1
 80122ec:	f7f5 ff4d 	bl	800818a <HAL_PCDEx_PMAConfig>
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
}
 80122f0:	2000      	movs	r0, #0
 80122f2:	bd70      	pop	{r4, r5, r6, pc}
 80122f4:	20003070 	.word	0x20003070
 80122f8:	20001278 	.word	0x20001278
 80122fc:	2000095d 	.word	0x2000095d
 8012300:	2000095c 	.word	0x2000095c
 8012304:	20002f39 	.word	0x20002f39
 8012308:	20002f38 	.word	0x20002f38
 801230c:	20002f37 	.word	0x20002f37

08012310 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012310:	23c4      	movs	r3, #196	@ 0xc4
 8012312:	009b      	lsls	r3, r3, #2
 8012314:	58c3      	ldr	r3, [r0, r3]

  if ((ep_addr & 0x80) == 0x80)
 8012316:	b248      	sxtb	r0, r1
 8012318:	2228      	movs	r2, #40	@ 0x28
 801231a:	2800      	cmp	r0, #0
 801231c:	da05      	bge.n	801232a <USBD_LL_IsStallEP+0x1a>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801231e:	207f      	movs	r0, #127	@ 0x7f
 8012320:	4001      	ands	r1, r0
 8012322:	434a      	muls	r2, r1
 8012324:	189b      	adds	r3, r3, r2
 8012326:	7c98      	ldrb	r0, [r3, #18]
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
  }
}
 8012328:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801232a:	434a      	muls	r2, r1
 801232c:	189b      	adds	r3, r3, r2
 801232e:	3353      	adds	r3, #83	@ 0x53
 8012330:	33ff      	adds	r3, #255	@ 0xff
 8012332:	7818      	ldrb	r0, [r3, #0]
 8012334:	e7f8      	b.n	8012328 <USBD_LL_IsStallEP+0x18>

08012336 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 8012336:	23c4      	movs	r3, #196	@ 0xc4
{
 8012338:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 801233a:	009b      	lsls	r3, r3, #2
 801233c:	58c0      	ldr	r0, [r0, r3]
 801233e:	f7f5 fea8 	bl	8008092 <HAL_PCD_EP_GetRxCount>
}
 8012342:	bd10      	pop	{r4, pc}

08012344 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8012344:	2800      	cmp	r0, #0
 8012346:	d002      	beq.n	801234e <USBD_Get_USB_Status+0xa>
 8012348:	2802      	cmp	r0, #2
 801234a:	d001      	beq.n	8012350 <USBD_Get_USB_Status+0xc>
 801234c:	2003      	movs	r0, #3
  default:
    usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 801234e:	4770      	bx	lr
    usb_status = USBD_BUSY;
 8012350:	2001      	movs	r0, #1
 8012352:	e7fc      	b.n	801234e <USBD_Get_USB_Status+0xa>

08012354 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8012354:	23c4      	movs	r3, #196	@ 0xc4
{
 8012356:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8012358:	009b      	lsls	r3, r3, #2
 801235a:	58c0      	ldr	r0, [r0, r3]
 801235c:	f7f5 f922 	bl	80075a4 <HAL_PCD_Start>
  usb_status = USBD_Get_USB_Status(hal_status);
 8012360:	f7ff fff0 	bl	8012344 <USBD_Get_USB_Status>
}
 8012364:	bd10      	pop	{r4, pc}

08012366 <USBD_LL_OpenEP>:
{
 8012366:	b510      	push	{r4, lr}
 8012368:	0014      	movs	r4, r2
 801236a:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801236c:	0023      	movs	r3, r4
 801236e:	24c4      	movs	r4, #196	@ 0xc4
 8012370:	00a4      	lsls	r4, r4, #2
 8012372:	5900      	ldr	r0, [r0, r4]
 8012374:	f7f5 fe20 	bl	8007fb8 <HAL_PCD_EP_Open>
  usb_status = USBD_Get_USB_Status(hal_status);
 8012378:	f7ff ffe4 	bl	8012344 <USBD_Get_USB_Status>
}
 801237c:	bd10      	pop	{r4, pc}

0801237e <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801237e:	23c4      	movs	r3, #196	@ 0xc4
{
 8012380:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012382:	009b      	lsls	r3, r3, #2
 8012384:	58c0      	ldr	r0, [r0, r3]
 8012386:	f7f5 fe43 	bl	8008010 <HAL_PCD_EP_Close>
  usb_status = USBD_Get_USB_Status(hal_status);
 801238a:	f7ff ffdb 	bl	8012344 <USBD_Get_USB_Status>
}
 801238e:	bd10      	pop	{r4, pc}

08012390 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012390:	23c4      	movs	r3, #196	@ 0xc4
{
 8012392:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012394:	009b      	lsls	r3, r3, #2
 8012396:	58c0      	ldr	r0, [r0, r3]
 8012398:	f7f5 fe9b 	bl	80080d2 <HAL_PCD_EP_SetStall>
  usb_status = USBD_Get_USB_Status(hal_status);
 801239c:	f7ff ffd2 	bl	8012344 <USBD_Get_USB_Status>
}
 80123a0:	bd10      	pop	{r4, pc}

080123a2 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80123a2:	23c4      	movs	r3, #196	@ 0xc4
{
 80123a4:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80123a6:	009b      	lsls	r3, r3, #2
 80123a8:	58c0      	ldr	r0, [r0, r3]
 80123aa:	f7f5 fec0 	bl	800812e <HAL_PCD_EP_ClrStall>
  usb_status = USBD_Get_USB_Status(hal_status);
 80123ae:	f7ff ffc9 	bl	8012344 <USBD_Get_USB_Status>
}
 80123b2:	bd10      	pop	{r4, pc}

080123b4 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80123b4:	23c4      	movs	r3, #196	@ 0xc4
{
 80123b6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80123b8:	009b      	lsls	r3, r3, #2
 80123ba:	58c0      	ldr	r0, [r0, r3]
 80123bc:	f7f5 f905 	bl	80075ca <HAL_PCD_SetAddress>
  usb_status = USBD_Get_USB_Status(hal_status);
 80123c0:	f7ff ffc0 	bl	8012344 <USBD_Get_USB_Status>
}
 80123c4:	bd10      	pop	{r4, pc}

080123c6 <USBD_LL_Transmit>:
{
 80123c6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80123c8:	24c4      	movs	r4, #196	@ 0xc4
 80123ca:	00a4      	lsls	r4, r4, #2
 80123cc:	5900      	ldr	r0, [r0, r4]
 80123ce:	f7f5 fe68 	bl	80080a2 <HAL_PCD_EP_Transmit>
  usb_status = USBD_Get_USB_Status(hal_status);
 80123d2:	f7ff ffb7 	bl	8012344 <USBD_Get_USB_Status>
}
 80123d6:	bd10      	pop	{r4, pc}

080123d8 <USBD_LL_PrepareReceive>:
{
 80123d8:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80123da:	24c4      	movs	r4, #196	@ 0xc4
 80123dc:	00a4      	lsls	r4, r4, #2
 80123de:	5900      	ldr	r0, [r0, r4]
 80123e0:	f7f5 fe3c 	bl	800805c <HAL_PCD_EP_Receive>
  usb_status = USBD_Get_USB_Status(hal_status);
 80123e4:	f7ff ffae 	bl	8012344 <USBD_Get_USB_Status>
}
 80123e8:	bd10      	pop	{r4, pc}

080123ea <BSP_SPI1_IRQ_Callback>:
  * @brief  BSP SPI1 callback
  * @param  None
  * @return None
  */
__weak void BSP_NFC0XCOMM_IRQ_Callback(void)
{
 80123ea:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */

  /* This function should be implemented by the user application.
   * It is called into this driver when an event from ST25R3916 is triggered.
   */
  st25r3916Isr();
 80123ec:	f7f4 fc34 	bl	8006c58 <st25r3916Isr>
}
 80123f0:	bd10      	pop	{r4, pc}

080123f2 <MX_X_CUBE_NFC6_Process>:
{
 80123f2:	b510      	push	{r4, lr}
    demoCycle();
 80123f4:	f000 fc80 	bl	8012cf8 <demoCycle>
}
 80123f8:	bd10      	pop	{r4, pc}
	...

080123fc <MX_NFC6_PollingDemo_Init>:
{
 80123fc:	b510      	push	{r4, lr}
   BSP_NFC0XCOMM_Init();
 80123fe:	f7ef fc59 	bl	8001cb4 <BSP_SPI1_Init>
   BSP_COM_Init(COM1);
 8012402:	2000      	movs	r0, #0
 8012404:	f7f4 fd98 	bl	8006f38 <BSP_COM_Init>
   BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8012408:	2100      	movs	r1, #0
   USR_INT_LINE.Line = USR_INT_LINE_NUM;
 801240a:	4c41      	ldr	r4, [pc, #260]	@ (8012510 <MX_NFC6_PollingDemo_Init+0x114>)
 801240c:	4b41      	ldr	r3, [pc, #260]	@ (8012514 <MX_NFC6_PollingDemo_Init+0x118>)
   BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 801240e:	0008      	movs	r0, r1
   USR_INT_LINE.Line = USR_INT_LINE_NUM;
 8012410:	6023      	str	r3, [r4, #0]
   USR_INT_LINE.PendingCallback = st25r3916Isr;
 8012412:	4b41      	ldr	r3, [pc, #260]	@ (8012518 <MX_NFC6_PollingDemo_Init+0x11c>)
 8012414:	6063      	str	r3, [r4, #4]
   BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8012416:	f7f4 fd4d 	bl	8006eb4 <BSP_PB_Init>
  (void)HAL_EXTI_GetHandle(&USR_INT_LINE, USR_INT_LINE.Line);
 801241a:	6821      	ldr	r1, [r4, #0]
 801241c:	0020      	movs	r0, r4
 801241e:	f7f4 ff8a 	bl	8007336 <HAL_EXTI_GetHandle>
  (void)HAL_EXTI_RegisterCallback(&USR_INT_LINE, HAL_EXTI_COMMON_CB_ID, BSP_NFC0XCOMM_IRQ_Callback);
 8012422:	2100      	movs	r1, #0
 8012424:	4a3d      	ldr	r2, [pc, #244]	@ (801251c <MX_NFC6_PollingDemo_Init+0x120>)
 8012426:	0020      	movs	r0, r4
 8012428:	f7f4 ff7e 	bl	8007328 <HAL_EXTI_RegisterCallback>
  platformLog("Welcome to X-NUCLEO-NFC06A1\r\n");
 801242c:	483c      	ldr	r0, [pc, #240]	@ (8012520 <MX_NFC6_PollingDemo_Init+0x124>)
 801242e:	f000 fe5b 	bl	80130e8 <logUsart>
  if( !demoIni() )
 8012432:	f000 fb1b 	bl	8012a6c <demoIni>
 8012436:	2800      	cmp	r0, #0
 8012438:	d122      	bne.n	8012480 <MX_NFC6_PollingDemo_Init+0x84>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 801243a:	2480      	movs	r4, #128	@ 0x80
    platformLog("Initialization failed..\r\n");
 801243c:	4839      	ldr	r0, [pc, #228]	@ (8012524 <MX_NFC6_PollingDemo_Init+0x128>)
 801243e:	f000 fe53 	bl	80130e8 <logUsart>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8012442:	00e4      	lsls	r4, r4, #3
      platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8012444:	2104      	movs	r1, #4
 8012446:	4838      	ldr	r0, [pc, #224]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 8012448:	f7f5 f858 	bl	80074fc <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 801244c:	2102      	movs	r1, #2
 801244e:	4836      	ldr	r0, [pc, #216]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 8012450:	f7f5 f854 	bl	80074fc <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8012454:	2101      	movs	r1, #1
 8012456:	4834      	ldr	r0, [pc, #208]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 8012458:	f7f5 f850 	bl	80074fc <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 801245c:	0021      	movs	r1, r4
 801245e:	4832      	ldr	r0, [pc, #200]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 8012460:	f7f5 f84c 	bl	80074fc <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8012464:	2180      	movs	r1, #128	@ 0x80
 8012466:	4830      	ldr	r0, [pc, #192]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 8012468:	0109      	lsls	r1, r1, #4
 801246a:	f7f5 f847 	bl	80074fc <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 801246e:	2180      	movs	r1, #128	@ 0x80
 8012470:	482d      	ldr	r0, [pc, #180]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 8012472:	0149      	lsls	r1, r1, #5
 8012474:	f7f5 f842 	bl	80074fc <HAL_GPIO_TogglePin>
      platformDelay(100);
 8012478:	2064      	movs	r0, #100	@ 0x64
 801247a:	f7f4 fdfb 	bl	8007074 <HAL_Delay>
    while(1)
 801247e:	e7e1      	b.n	8012444 <MX_NFC6_PollingDemo_Init+0x48>
    platformLog("Initialization succeeded..\r\n");
 8012480:	482a      	ldr	r0, [pc, #168]	@ (801252c <MX_NFC6_PollingDemo_Init+0x130>)
 8012482:	f000 fe31 	bl	80130e8 <logUsart>
 8012486:	2406      	movs	r4, #6
      platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8012488:	2104      	movs	r1, #4
 801248a:	4827      	ldr	r0, [pc, #156]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 801248c:	f7f5 f836 	bl	80074fc <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8012490:	2102      	movs	r1, #2
 8012492:	4825      	ldr	r0, [pc, #148]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 8012494:	f7f5 f832 	bl	80074fc <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8012498:	2101      	movs	r1, #1
 801249a:	4823      	ldr	r0, [pc, #140]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 801249c:	f7f5 f82e 	bl	80074fc <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80124a0:	2180      	movs	r1, #128	@ 0x80
 80124a2:	4821      	ldr	r0, [pc, #132]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 80124a4:	00c9      	lsls	r1, r1, #3
 80124a6:	f7f5 f829 	bl	80074fc <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80124aa:	2180      	movs	r1, #128	@ 0x80
 80124ac:	481e      	ldr	r0, [pc, #120]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 80124ae:	0109      	lsls	r1, r1, #4
 80124b0:	f7f5 f824 	bl	80074fc <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80124b4:	2180      	movs	r1, #128	@ 0x80
 80124b6:	481c      	ldr	r0, [pc, #112]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 80124b8:	0149      	lsls	r1, r1, #5
 80124ba:	f7f5 f81f 	bl	80074fc <HAL_GPIO_TogglePin>
    for (int i = 0; i < 6; i++)
 80124be:	3c01      	subs	r4, #1
      platformDelay(200);
 80124c0:	20c8      	movs	r0, #200	@ 0xc8
 80124c2:	f7f4 fdd7 	bl	8007074 <HAL_Delay>
    for (int i = 0; i < 6; i++)
 80124c6:	2c00      	cmp	r4, #0
 80124c8:	d1de      	bne.n	8012488 <MX_NFC6_PollingDemo_Init+0x8c>
    platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80124ca:	0022      	movs	r2, r4
 80124cc:	2104      	movs	r1, #4
 80124ce:	4816      	ldr	r0, [pc, #88]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 80124d0:	f7f5 f80e 	bl	80074f0 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80124d4:	0022      	movs	r2, r4
 80124d6:	2102      	movs	r1, #2
 80124d8:	4813      	ldr	r0, [pc, #76]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 80124da:	f7f5 f809 	bl	80074f0 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 80124de:	0022      	movs	r2, r4
 80124e0:	2101      	movs	r1, #1
 80124e2:	4811      	ldr	r0, [pc, #68]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 80124e4:	f7f5 f804 	bl	80074f0 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80124e8:	2180      	movs	r1, #128	@ 0x80
 80124ea:	0022      	movs	r2, r4
 80124ec:	480e      	ldr	r0, [pc, #56]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 80124ee:	00c9      	lsls	r1, r1, #3
 80124f0:	f7f4 fffe 	bl	80074f0 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80124f4:	2180      	movs	r1, #128	@ 0x80
 80124f6:	0022      	movs	r2, r4
 80124f8:	480b      	ldr	r0, [pc, #44]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 80124fa:	0109      	lsls	r1, r1, #4
 80124fc:	f7f4 fff8 	bl	80074f0 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8012500:	2180      	movs	r1, #128	@ 0x80
 8012502:	0022      	movs	r2, r4
 8012504:	4808      	ldr	r0, [pc, #32]	@ (8012528 <MX_NFC6_PollingDemo_Init+0x12c>)
 8012506:	0149      	lsls	r1, r1, #5
 8012508:	f7f4 fff2 	bl	80074f0 <HAL_GPIO_WritePin>
}
 801250c:	bd10      	pop	{r4, pc}
 801250e:	46c0      	nop			@ (mov r8, r8)
 8012510:	2000343c 	.word	0x2000343c
 8012514:	06000001 	.word	0x06000001
 8012518:	08006c59 	.word	0x08006c59
 801251c:	080123eb 	.word	0x080123eb
 8012520:	08013e44 	.word	0x08013e44
 8012524:	08013e62 	.word	0x08013e62
 8012528:	48000400 	.word	0x48000400
 801252c:	08013e7c 	.word	0x08013e7c

08012530 <MX_X_CUBE_NFC6_Init>:
{
 8012530:	b510      	push	{r4, lr}
  MX_NFC6_PollingDemo_Init();
 8012532:	f7ff ff63 	bl	80123fc <MX_NFC6_PollingDemo_Init>
}
 8012536:	bd10      	pop	{r4, pc}

08012538 <BSP_NFC0XCOMM_SendRecv>:
{
 8012538:	b513      	push	{r0, r1, r4, lr}
 801253a:	1e04      	subs	r4, r0, #0
  if((pTxData != NULL) && (pRxData != NULL))
 801253c:	d011      	beq.n	8012562 <BSP_NFC0XCOMM_SendRecv+0x2a>
    status = HAL_SPI_TransmitReceive(&COMM_HANDLE, (uint8_t *)pTxData, (uint8_t *)pRxData, Length, 2000);
 801253e:	23fa      	movs	r3, #250	@ 0xfa
 8012540:	480d      	ldr	r0, [pc, #52]	@ (8012578 <BSP_NFC0XCOMM_SendRecv+0x40>)
 8012542:	00db      	lsls	r3, r3, #3
  if((pTxData != NULL) && (pRxData != NULL))
 8012544:	2900      	cmp	r1, #0
 8012546:	d008      	beq.n	801255a <BSP_NFC0XCOMM_SendRecv+0x22>
    status = HAL_SPI_TransmitReceive(&COMM_HANDLE, (uint8_t *)pTxData, (uint8_t *)pRxData, Length, 2000);
 8012548:	9300      	str	r3, [sp, #0]
 801254a:	0013      	movs	r3, r2
 801254c:	000a      	movs	r2, r1
 801254e:	0021      	movs	r1, r4
 8012550:	f7f6 fc70 	bl	8008e34 <HAL_SPI_TransmitReceive>
  if (status != HAL_OK)
 8012554:	2800      	cmp	r0, #0
 8012556:	d106      	bne.n	8012566 <BSP_NFC0XCOMM_SendRecv+0x2e>
 8012558:	e007      	b.n	801256a <BSP_NFC0XCOMM_SendRecv+0x32>
    status = HAL_SPI_Transmit(&COMM_HANDLE, (uint8_t *)pTxData, Length, 2000);
 801255a:	0021      	movs	r1, r4
 801255c:	f7f6 fba8 	bl	8008cb0 <HAL_SPI_Transmit>
 8012560:	e7f8      	b.n	8012554 <BSP_NFC0XCOMM_SendRecv+0x1c>
  else if ((pTxData == NULL) && (pRxData != NULL))
 8012562:	2900      	cmp	r1, #0
 8012564:	d102      	bne.n	801256c <BSP_NFC0XCOMM_SendRecv+0x34>
    ret = BSP_NFC0XCOMM_Init();
 8012566:	f7ef fba5 	bl	8001cb4 <BSP_SPI1_Init>
}
 801256a:	bd16      	pop	{r1, r2, r4, pc}
    status = HAL_SPI_Receive(&COMM_HANDLE, (uint8_t *)pRxData, Length, 2000);
 801256c:	23fa      	movs	r3, #250	@ 0xfa
 801256e:	4802      	ldr	r0, [pc, #8]	@ (8012578 <BSP_NFC0XCOMM_SendRecv+0x40>)
 8012570:	00db      	lsls	r3, r3, #3
 8012572:	f7f6 fd69 	bl	8009048 <HAL_SPI_Receive>
 8012576:	e7ed      	b.n	8012554 <BSP_NFC0XCOMM_SendRecv+0x1c>
 8012578:	20000b00 	.word	0x20000b00

0801257c <cmdCompare>:
  * @retval True : Same command.
  * @retval False : Different command.
  *****************************************************************************
  */
static bool cmdCompare(uint8_t *cmd, uint8_t *find, uint16_t len)
{
 801257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801257e:	0007      	movs	r7, r0
 8012580:	000d      	movs	r5, r1
 8012582:	0016      	movs	r6, r2
 8012584:	0004      	movs	r4, r0
 8012586:	3714      	adds	r7, #20
  for(int i = 0; i < 20; i++)
  {
    if(!memcmp(&cmd[i],find, len))
 8012588:	0032      	movs	r2, r6
 801258a:	0029      	movs	r1, r5
 801258c:	0020      	movs	r0, r4
 801258e:	f000 fe71 	bl	8013274 <memcmp>
 8012592:	2800      	cmp	r0, #0
 8012594:	d004      	beq.n	80125a0 <cmdCompare+0x24>
  for(int i = 0; i < 20; i++)
 8012596:	3401      	adds	r4, #1
 8012598:	42bc      	cmp	r4, r7
 801259a:	d1f5      	bne.n	8012588 <cmdCompare+0xc>
    {
      return true;
    }
  }
  return false;
 801259c:	2000      	movs	r0, #0
}
 801259e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return true;
 80125a0:	2001      	movs	r0, #1
 80125a2:	e7fc      	b.n	801259e <cmdCompare+0x22>

080125a4 <demoCeT3TCheck>:
  *
  * @return Answer size.
  *****************************************************************************
  */
static uint16_t demoCeT3TCheck(uint8_t *cmdData, uint8_t *rspData, uint16_t rspDataLen)
{
 80125a4:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
  uint32_t idx = 0;
  uint32_t cnt = 0;
  uint32_t nbmax = 0;

  /* Command response */
  rspData[idx++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION + 1;
 80125a6:	2307      	movs	r3, #7

  /* NFCID 2 bytes */
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 80125a8:	4f40      	ldr	r7, [pc, #256]	@ (80126ac <demoCeT3TCheck+0x108>)
{
 80125aa:	b0ff      	sub	sp, #508	@ 0x1fc
 80125ac:	9201      	str	r2, [sp, #4]
  rspData[idx++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION + 1;
 80125ae:	700b      	strb	r3, [r1, #0]
{
 80125b0:	0005      	movs	r5, r0
 80125b2:	000c      	movs	r4, r1
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 80125b4:	2208      	movs	r2, #8
 80125b6:	1c81      	adds	r1, r0, #2
 80125b8:	0038      	movs	r0, r7
 80125ba:	f000 fe5b 	bl	8013274 <memcmp>
 80125be:	0006      	movs	r6, r0
    idx += RFAL_NFCF_NFCID2_LEN;
  }
  else
  {
    /* If NFCID2 in command is different, no answer */
    return 0;
 80125c0:	2000      	movs	r0, #0
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 80125c2:	4286      	cmp	r6, r0
 80125c4:	d145      	bne.n	8012652 <demoCeT3TCheck+0xae>
    ST_MEMCPY( &rspData[idx], &gNfcfNfcid, RFAL_NFCF_NFCID2_LEN );
 80125c6:	2208      	movs	r2, #8
 80125c8:	0039      	movs	r1, r7
 80125ca:	1c60      	adds	r0, r4, #1
 80125cc:	f000 fea6 	bl	801331c <memcpy>
  }

  /* Check for command errors */
  if( (cmdData[10] != 1) || ((cmdData[11] != 0x09) && (cmdData[11] != 0x0B))
 80125d0:	7aab      	ldrb	r3, [r5, #10]
 80125d2:	2b01      	cmp	r3, #1
 80125d4:	d141      	bne.n	801265a <demoCeT3TCheck+0xb6>
 80125d6:	7aea      	ldrb	r2, [r5, #11]
 80125d8:	3301      	adds	r3, #1
 80125da:	439a      	bics	r2, r3
 80125dc:	33fd      	adds	r3, #253	@ 0xfd
 80125de:	2a09      	cmp	r2, #9
 80125e0:	d133      	bne.n	801264a <demoCeT3TCheck+0xa6>
            || (cmdData[13] == 0) || (cmdData[13] > InformationBlock[1]) )
 80125e2:	7b6a      	ldrb	r2, [r5, #13]
 80125e4:	2a00      	cmp	r2, #0
 80125e6:	d030      	beq.n	801264a <demoCeT3TCheck+0xa6>
 80125e8:	4f31      	ldr	r7, [pc, #196]	@ (80126b0 <demoCeT3TCheck+0x10c>)
 80125ea:	7879      	ldrb	r1, [r7, #1]
 80125ec:	4291      	cmp	r1, r2
 80125ee:	d32c      	bcc.n	801264a <demoCeT3TCheck+0xa6>
    rspData[idx++] = 0xFF;
    return idx;
  }
  else
  {
    rspData[idx++] = 0x00;
 80125f0:	7266      	strb	r6, [r4, #9]
    rspData[idx++] = 0x00;
 80125f2:	72a6      	strb	r6, [r4, #10]
  }

  /* Verify CHECK response length */
  if( rspDataLen < (11 + (cmdData[13] * T3T_BLOCK_SIZE)) )
 80125f4:	7b6b      	ldrb	r3, [r5, #13]
 80125f6:	9a01      	ldr	r2, [sp, #4]
 80125f8:	011b      	lsls	r3, r3, #4
 80125fa:	330a      	adds	r3, #10
 80125fc:	4293      	cmp	r3, r2
 80125fe:	db04      	blt.n	801260a <demoCeT3TCheck+0x66>
  {
    platformErrorHandle();  /* Must ensure appropriate buffer */
 8012600:	21c2      	movs	r1, #194	@ 0xc2
 8012602:	482c      	ldr	r0, [pc, #176]	@ (80126b4 <demoCeT3TCheck+0x110>)
 8012604:	0049      	lsls	r1, r1, #1
 8012606:	f000 fdc3 	bl	8013190 <_Error_Handler>
  }

  /* Nob */
  rspData[idx++] = cmdData[13];
 801260a:	793a      	ldrb	r2, [r7, #4]
 801260c:	78f9      	ldrb	r1, [r7, #3]
 801260e:	0212      	lsls	r2, r2, #8
 8012610:	430a      	orrs	r2, r1
 8012612:	ba52      	rev16	r2, r2
 8012614:	b292      	uxth	r2, r2

  /* Retrieving block to read */
  block = &cmdData[14];
 8012616:	002b      	movs	r3, r5
 8012618:	9201      	str	r2, [sp, #4]
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 801261a:	2200      	movs	r2, #0
  rspData[idx++] = cmdData[13];
 801261c:	7b68      	ldrb	r0, [r5, #13]
  block = &cmdData[14];
 801261e:	330e      	adds	r3, #14
  rspData[idx++] = cmdData[13];
 8012620:	72e0      	strb	r0, [r4, #11]
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 8012622:	4290      	cmp	r0, r2
 8012624:	d808      	bhi.n	8012638 <demoCeT3TCheck+0x94>
      rspData[idx - 2] = 0x70;
      return (idx - 1);
    }
  }

  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 8012626:	2600      	movs	r6, #0
 8012628:	340c      	adds	r4, #12
 801262a:	7b6b      	ldrb	r3, [r5, #13]
 801262c:	42b3      	cmp	r3, r6
 801262e:	d82c      	bhi.n	801268a <demoCeT3TCheck+0xe6>
      ST_MEMCPY( &rspData[idx], &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], T3T_BLOCK_SIZE);
      idx += T3T_BLOCK_SIZE;
    }
  }

  return idx;
 8012630:	0130      	lsls	r0, r6, #4
 8012632:	300c      	adds	r0, #12
 8012634:	b280      	uxth	r0, r0
 8012636:	e00c      	b.n	8012652 <demoCeT3TCheck+0xae>
	if( ((*block) & 0x0F) >=  cmdData[10] )
 8012638:	7aaf      	ldrb	r7, [r5, #10]
 801263a:	7819      	ldrb	r1, [r3, #0]
 801263c:	46bc      	mov	ip, r7
 801263e:	260f      	movs	r6, #15
 8012640:	000f      	movs	r7, r1
 8012642:	4037      	ands	r7, r6
 8012644:	45bc      	cmp	ip, r7
 8012646:	d80c      	bhi.n	8012662 <demoCeT3TCheck+0xbe>
 8012648:	2380      	movs	r3, #128	@ 0x80
	      rspData[idx - 3] = 0xFF;
 801264a:	22ff      	movs	r2, #255	@ 0xff
    return idx;
 801264c:	200b      	movs	r0, #11
	      rspData[idx - 3] = 0xFF;
 801264e:	7262      	strb	r2, [r4, #9]
	      rspData[idx - 2] = 0x80; /* TS T3T table 13 - proprietary value to indicate specific error conditions.*/
 8012650:	72a3      	strb	r3, [r4, #10]
}
 8012652:	2383      	movs	r3, #131	@ 0x83
 8012654:	009b      	lsls	r3, r3, #2
 8012656:	449d      	add	sp, r3
 8012658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801265a:	23ff      	movs	r3, #255	@ 0xff
 801265c:	e7f5      	b.n	801264a <demoCeT3TCheck+0xa6>
 801265e:	2370      	movs	r3, #112	@ 0x70
 8012660:	e7f3      	b.n	801264a <demoCeT3TCheck+0xa6>
    if( *block & 0x80 )
 8012662:	b249      	sxtb	r1, r1
      blocknb[cnt] = *(block + 1);
 8012664:	785f      	ldrb	r7, [r3, #1]
    if( *block & 0x80 )
 8012666:	2900      	cmp	r1, #0
 8012668:	da09      	bge.n	801267e <demoCeT3TCheck+0xda>
      blocknb[cnt] = *(block + 1);
 801266a:	0039      	movs	r1, r7
      block += 2;
 801266c:	3302      	adds	r3, #2
 801266e:	ae02      	add	r6, sp, #8
 8012670:	0057      	lsls	r7, r2, #1
 8012672:	53b9      	strh	r1, [r7, r6]
    if( blocknb[cnt] > nbmax )
 8012674:	9e01      	ldr	r6, [sp, #4]
 8012676:	42b1      	cmp	r1, r6
 8012678:	d8f1      	bhi.n	801265e <demoCeT3TCheck+0xba>
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 801267a:	3201      	adds	r2, #1
 801267c:	e7d1      	b.n	8012622 <demoCeT3TCheck+0x7e>
      blocknb[cnt] |= *(block + 1);
 801267e:	7899      	ldrb	r1, [r3, #2]
 8012680:	785f      	ldrb	r7, [r3, #1]
 8012682:	0209      	lsls	r1, r1, #8
 8012684:	4339      	orrs	r1, r7
      block += 3;
 8012686:	3303      	adds	r3, #3
 8012688:	e7f1      	b.n	801266e <demoCeT3TCheck+0xca>
    if( blocknb[cnt] == 0x0000 )
 801268a:	0073      	lsls	r3, r6, #1
 801268c:	aa02      	add	r2, sp, #8
 801268e:	5a99      	ldrh	r1, [r3, r2]
 8012690:	2900      	cmp	r1, #0
 8012692:	d107      	bne.n	80126a4 <demoCeT3TCheck+0x100>
      ST_MEMCPY( &rspData[idx], InformationBlock, sizeof(InformationBlock));
 8012694:	4906      	ldr	r1, [pc, #24]	@ (80126b0 <demoCeT3TCheck+0x10c>)
      ST_MEMCPY( &rspData[idx], &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], T3T_BLOCK_SIZE);
 8012696:	0020      	movs	r0, r4
 8012698:	2210      	movs	r2, #16
 801269a:	f000 fe3f 	bl	801331c <memcpy>
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 801269e:	3601      	adds	r6, #1
 80126a0:	3410      	adds	r4, #16
 80126a2:	e7c2      	b.n	801262a <demoCeT3TCheck+0x86>
      ST_MEMCPY( &rspData[idx], &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], T3T_BLOCK_SIZE);
 80126a4:	4b04      	ldr	r3, [pc, #16]	@ (80126b8 <demoCeT3TCheck+0x114>)
 80126a6:	0109      	lsls	r1, r1, #4
 80126a8:	18c9      	adds	r1, r1, r3
 80126aa:	e7f4      	b.n	8012696 <demoCeT3TCheck+0xf2>
 80126ac:	20003176 	.word	0x20003176
 80126b0:	2000095e 	.word	0x2000095e
 80126b4:	08013e99 	.word	0x08013e99
 80126b8:	20003068 	.word	0x20003068

080126bc <demoCeT3TUpdate>:
  *
  * @return Answer size.
  *****************************************************************************
  */
static uint16_t demoCeT3TUpdate(uint8_t *cmdData, uint8_t *rspData)
{
 80126bc:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
  uint32_t idx = 0;
  uint32_t cnt = 0;
  uint32_t nbmax = 0;

  /* Command response */
  rspData[idx++] = RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION + 1;
 80126be:	2309      	movs	r3, #9

  /* NFCID 2 bytes */
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 80126c0:	4f37      	ldr	r7, [pc, #220]	@ (80127a0 <demoCeT3TUpdate+0xe4>)
{
 80126c2:	b0ff      	sub	sp, #508	@ 0x1fc
 80126c4:	0005      	movs	r5, r0
  rspData[idx++] = RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION + 1;
 80126c6:	700b      	strb	r3, [r1, #0]
{
 80126c8:	000c      	movs	r4, r1
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 80126ca:	2208      	movs	r2, #8
 80126cc:	1c81      	adds	r1, r0, #2
 80126ce:	0038      	movs	r0, r7
 80126d0:	f000 fdd0 	bl	8013274 <memcmp>
 80126d4:	0006      	movs	r6, r0
    idx += RFAL_NFCF_NFCID2_LEN;
  }
  else
  {
    /* If NFCID2 in command is different, no answer */
    return 0;
 80126d6:	2000      	movs	r0, #0
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 80126d8:	4286      	cmp	r6, r0
 80126da:	d13d      	bne.n	8012758 <demoCeT3TUpdate+0x9c>
    ST_MEMCPY( &rspData[idx], gNfcfNfcid, RFAL_NFCF_NFCID2_LEN );
 80126dc:	2208      	movs	r2, #8
 80126de:	0039      	movs	r1, r7
 80126e0:	1c60      	adds	r0, r4, #1
 80126e2:	f000 fe1b 	bl	801331c <memcpy>
  }

  /* Check for command errors */
  if( (cmdData[10] != 1) || (cmdData[11] != 0x09)
 80126e6:	7aab      	ldrb	r3, [r5, #10]
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	d13f      	bne.n	801276c <demoCeT3TUpdate+0xb0>
 80126ec:	7aeb      	ldrb	r3, [r5, #11]
 80126ee:	2b09      	cmp	r3, #9
 80126f0:	d13c      	bne.n	801276c <demoCeT3TUpdate+0xb0>
            || (cmdData[13] == 0) || (cmdData[13] > InformationBlock[2]) )
 80126f2:	7b6b      	ldrb	r3, [r5, #13]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d039      	beq.n	801276c <demoCeT3TUpdate+0xb0>
 80126f8:	4f2a      	ldr	r7, [pc, #168]	@ (80127a4 <demoCeT3TUpdate+0xe8>)
 80126fa:	78ba      	ldrb	r2, [r7, #2]
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d335      	bcc.n	801276c <demoCeT3TUpdate+0xb0>
    rspData[idx++] = 0x00;
    rspData[idx++] = 0x00;
  }

  /* Retrieving block to read */
  block = &cmdData[14];
 8012700:	002b      	movs	r3, r5
    rspData[idx++] = 0x00;
 8012702:	7266      	strb	r6, [r4, #9]
    rspData[idx++] = 0x00;
 8012704:	72a6      	strb	r6, [r4, #10]
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 8012706:	7b6a      	ldrb	r2, [r5, #13]
 8012708:	78f9      	ldrb	r1, [r7, #3]
 801270a:	9200      	str	r2, [sp, #0]
 801270c:	793a      	ldrb	r2, [r7, #4]
  block = &cmdData[14];
 801270e:	330e      	adds	r3, #14
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 8012710:	0212      	lsls	r2, r2, #8
 8012712:	430a      	orrs	r2, r1
 8012714:	ba52      	rev16	r2, r2
 8012716:	b292      	uxth	r2, r2
 8012718:	9201      	str	r2, [sp, #4]
 801271a:	9a00      	ldr	r2, [sp, #0]
 801271c:	42b2      	cmp	r2, r6
 801271e:	d809      	bhi.n	8012734 <demoCeT3TUpdate+0x78>
      rspData[idx - 1] = 0x70;
      return idx;
    }
  }

  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 8012720:	2600      	movs	r6, #0
 8012722:	9300      	str	r3, [sp, #0]
 8012724:	7b6b      	ldrb	r3, [r5, #13]
 8012726:	42b3      	cmp	r3, r6
 8012728:	d824      	bhi.n	8012774 <demoCeT3TUpdate+0xb8>
      block += T3T_BLOCK_SIZE;
    }
  }

    /* Status flag answer */
  rspData[idx++] = 0x00;
 801272a:	2300      	movs	r3, #0
  rspData[idx++] = 0x00;

  return idx;
 801272c:	200d      	movs	r0, #13
  rspData[idx++] = 0x00;
 801272e:	72e3      	strb	r3, [r4, #11]
  rspData[idx++] = 0x00;
 8012730:	7323      	strb	r3, [r4, #12]
  return idx;
 8012732:	e011      	b.n	8012758 <demoCeT3TUpdate+0x9c>
    if( *block & 0x80 )
 8012734:	781a      	ldrb	r2, [r3, #0]
      blocknb[cnt] = *(block + 1);
 8012736:	7859      	ldrb	r1, [r3, #1]
    if( *block & 0x80 )
 8012738:	2a7f      	cmp	r2, #127	@ 0x7f
 801273a:	d911      	bls.n	8012760 <demoCeT3TUpdate+0xa4>
      block += 2;
 801273c:	3302      	adds	r3, #2
 801273e:	0072      	lsls	r2, r6, #1
 8012740:	4694      	mov	ip, r2
 8012742:	4660      	mov	r0, ip
 8012744:	aa02      	add	r2, sp, #8
 8012746:	5281      	strh	r1, [r0, r2]
    if( blocknb[cnt] > nbmax )
 8012748:	9a01      	ldr	r2, [sp, #4]
 801274a:	428a      	cmp	r2, r1
 801274c:	d210      	bcs.n	8012770 <demoCeT3TUpdate+0xb4>
 801274e:	2370      	movs	r3, #112	@ 0x70
      rspData[idx - 2] = 0xFF;
 8012750:	22ff      	movs	r2, #255	@ 0xff
    return idx;
 8012752:	200b      	movs	r0, #11
      rspData[idx - 2] = 0xFF;
 8012754:	7262      	strb	r2, [r4, #9]
      rspData[idx - 1] = 0x70;
 8012756:	72a3      	strb	r3, [r4, #10]
}
 8012758:	2383      	movs	r3, #131	@ 0x83
 801275a:	009b      	lsls	r3, r3, #2
 801275c:	449d      	add	sp, r3
 801275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      blocknb[cnt] |= *(block + 1);
 8012760:	7899      	ldrb	r1, [r3, #2]
 8012762:	785a      	ldrb	r2, [r3, #1]
 8012764:	0209      	lsls	r1, r1, #8
 8012766:	4311      	orrs	r1, r2
      block += 3;
 8012768:	3303      	adds	r3, #3
 801276a:	e7e8      	b.n	801273e <demoCeT3TUpdate+0x82>
 801276c:	23ff      	movs	r3, #255	@ 0xff
 801276e:	e7ef      	b.n	8012750 <demoCeT3TUpdate+0x94>
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 8012770:	3601      	adds	r6, #1
 8012772:	e7d2      	b.n	801271a <demoCeT3TUpdate+0x5e>
    if( blocknb[cnt] == 0x0000 )
 8012774:	0073      	lsls	r3, r6, #1
 8012776:	aa02      	add	r2, sp, #8
 8012778:	5a98      	ldrh	r0, [r3, r2]
 801277a:	2800      	cmp	r0, #0
 801277c:	d109      	bne.n	8012792 <demoCeT3TUpdate+0xd6>
      ST_MEMCPY( InformationBlock, block, T3T_BLOCK_SIZE);
 801277e:	2210      	movs	r2, #16
 8012780:	0038      	movs	r0, r7
 8012782:	9900      	ldr	r1, [sp, #0]
      ST_MEMCPY( &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], block, T3T_BLOCK_SIZE);
 8012784:	f000 fdca 	bl	801331c <memcpy>
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 8012788:	9b00      	ldr	r3, [sp, #0]
 801278a:	3601      	adds	r6, #1
 801278c:	3310      	adds	r3, #16
 801278e:	9300      	str	r3, [sp, #0]
 8012790:	e7c8      	b.n	8012724 <demoCeT3TUpdate+0x68>
      ST_MEMCPY( &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], block, T3T_BLOCK_SIZE);
 8012792:	4b05      	ldr	r3, [pc, #20]	@ (80127a8 <demoCeT3TUpdate+0xec>)
 8012794:	0100      	lsls	r0, r0, #4
 8012796:	2210      	movs	r2, #16
 8012798:	9900      	ldr	r1, [sp, #0]
 801279a:	18c0      	adds	r0, r0, r3
 801279c:	e7f2      	b.n	8012784 <demoCeT3TUpdate+0xc8>
 801279e:	46c0      	nop			@ (mov r8, r8)
 80127a0:	20003176 	.word	0x20003176
 80127a4:	2000095e 	.word	0x2000095e
 80127a8:	20003068 	.word	0x20003068

080127ac <demoCeInit>:
  *
  * @return None
  *****************************************************************************
  */
void demoCeInit( uint8_t* nfcfNfcid )
{
 80127ac:	0001      	movs	r1, r0
 80127ae:	b510      	push	{r4, lr}
    if( nfcfNfcid != NULL )
 80127b0:	2800      	cmp	r0, #0
 80127b2:	d003      	beq.n	80127bc <demoCeInit+0x10>
    {
        ST_MEMCPY( gNfcfNfcid, nfcfNfcid, RFAL_NFCF_NFCID2_LEN );
 80127b4:	2208      	movs	r2, #8
 80127b6:	480e      	ldr	r0, [pc, #56]	@ (80127f0 <demoCeInit+0x44>)
 80127b8:	f000 fdb0 	bl	801331c <memcpy>
    }

    ST_MEMCPY( ndefFile, (uint8_t *)demoNdefFile, demoNdefFileLen );
 80127bc:	4b0d      	ldr	r3, [pc, #52]	@ (80127f4 <demoCeInit+0x48>)
 80127be:	480e      	ldr	r0, [pc, #56]	@ (80127f8 <demoCeInit+0x4c>)
 80127c0:	681c      	ldr	r4, [r3, #0]
 80127c2:	4b0e      	ldr	r3, [pc, #56]	@ (80127fc <demoCeInit+0x50>)
 80127c4:	0021      	movs	r1, r4
 80127c6:	681a      	ldr	r2, [r3, #0]
 80127c8:	f000 fda8 	bl	801331c <memcpy>
    /* Update AIB Ln with actual NDEF length */
    InformationBlock[12] = demoNdefFile[0];
    InformationBlock[13] = demoNdefFile[1];
    uint16_t checksum = 0;
    for (int i = 0; i < 14; i++)
 80127cc:	2100      	movs	r1, #0
    InformationBlock[12] = demoNdefFile[0];
 80127ce:	7823      	ldrb	r3, [r4, #0]
 80127d0:	4a0b      	ldr	r2, [pc, #44]	@ (8012800 <demoCeInit+0x54>)
 80127d2:	7313      	strb	r3, [r2, #12]
    InformationBlock[13] = demoNdefFile[1];
 80127d4:	7863      	ldrb	r3, [r4, #1]
 80127d6:	7353      	strb	r3, [r2, #13]
    uint16_t checksum = 0;
 80127d8:	000b      	movs	r3, r1
    {
        checksum += InformationBlock[i];
 80127da:	5c50      	ldrb	r0, [r2, r1]
    for (int i = 0; i < 14; i++)
 80127dc:	3101      	adds	r1, #1
        checksum += InformationBlock[i];
 80127de:	181b      	adds	r3, r3, r0
 80127e0:	b29b      	uxth	r3, r3
    for (int i = 0; i < 14; i++)
 80127e2:	290e      	cmp	r1, #14
 80127e4:	d1f9      	bne.n	80127da <demoCeInit+0x2e>
    }
    InformationBlock[14] = checksum >> 8;
 80127e6:	0a19      	lsrs	r1, r3, #8
 80127e8:	7391      	strb	r1, [r2, #14]
    InformationBlock[15] = checksum & 0xFF;
 80127ea:	73d3      	strb	r3, [r2, #15]
}
 80127ec:	bd10      	pop	{r4, pc}
 80127ee:	46c0      	nop			@ (mov r8, r8)
 80127f0:	20003176 	.word	0x20003176
 80127f4:	20000974 	.word	0x20000974
 80127f8:	20003076 	.word	0x20003076
 80127fc:	20000970 	.word	0x20000970
 8012800:	2000095e 	.word	0x2000095e

08012804 <demoCeT4T>:
  *
  * @return Response size.
  *****************************************************************************
  */
uint16_t demoCeT4T(uint8_t *rxData, uint16_t rxDataLen, uint8_t *txBuf, uint16_t txBufLen )
{
 8012804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012806:	0005      	movs	r5, r0
 8012808:	000e      	movs	r6, r1
 801280a:	0014      	movs	r4, r2
 801280c:	001f      	movs	r7, r3
 801280e:	b087      	sub	sp, #28
  if( (txBuf == NULL) || (txBufLen < 2) )
 8012810:	2a00      	cmp	r2, #0
 8012812:	d001      	beq.n	8012818 <demoCeT4T+0x14>
 8012814:	2b01      	cmp	r3, #1
 8012816:	d803      	bhi.n	8012820 <demoCeT4T+0x1c>
  {
    platformErrorHandle();  /* Must ensure appropriate buffer */
 8012818:	4858      	ldr	r0, [pc, #352]	@ (801297c <demoCeT4T+0x178>)
 801281a:	4959      	ldr	r1, [pc, #356]	@ (8012980 <demoCeT4T+0x17c>)
 801281c:	f000 fcb8 	bl	8013190 <_Error_Handler>
  }

  if( (rxData != NULL) && (rxDataLen >= 4) )
 8012820:	2d00      	cmp	r5, #0
 8012822:	d100      	bne.n	8012826 <demoCeT4T+0x22>
 8012824:	e0a7      	b.n	8012976 <demoCeT4T+0x172>
 8012826:	2e03      	cmp	r6, #3
 8012828:	d800      	bhi.n	801282c <demoCeT4T+0x28>
 801282a:	e0a4      	b.n	8012976 <demoCeT4T+0x172>
  {
      if(rxData[0] == T4T_CLA_00)
 801282c:	782e      	ldrb	r6, [r5, #0]
 801282e:	2e00      	cmp	r6, #0
 8012830:	d000      	beq.n	8012834 <demoCeT4T+0x30>
 8012832:	e0a0      	b.n	8012976 <demoCeT4T+0x172>
      {
          switch(rxData[1])
 8012834:	786b      	ldrb	r3, [r5, #1]
 8012836:	2bb0      	cmp	r3, #176	@ 0xb0
 8012838:	d04d      	beq.n	80128d6 <demoCeT4T+0xd2>
 801283a:	2bd6      	cmp	r3, #214	@ 0xd6
 801283c:	d100      	bne.n	8012840 <demoCeT4T+0x3c>
 801283e:	e081      	b.n	8012944 <demoCeT4T+0x140>
 8012840:	2ba4      	cmp	r3, #164	@ 0xa4
 8012842:	d000      	beq.n	8012846 <demoCeT4T+0x42>
 8012844:	e097      	b.n	8012976 <demoCeT4T+0x172>
  uint8_t aid[] = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x01};
 8012846:	4b4f      	ldr	r3, [pc, #316]	@ (8012984 <demoCeT4T+0x180>)
 8012848:	2207      	movs	r2, #7
 801284a:	0019      	movs	r1, r3
 801284c:	a804      	add	r0, sp, #16
 801284e:	001f      	movs	r7, r3
 8012850:	f000 fd64 	bl	801331c <memcpy>
  uint8_t fidCC[] = {FID_CC >> 8 , FID_CC & 0xFF};
 8012854:	466a      	mov	r2, sp
 8012856:	4b4c      	ldr	r3, [pc, #304]	@ (8012988 <demoCeT4T+0x184>)
  uint8_t selectFileId[] = {0xA4, 0x00, 0x0C, 0x02, 0x00, 0x01 };
 8012858:	1df9      	adds	r1, r7, #7
  uint8_t fidCC[] = {FID_CC >> 8 , FID_CC & 0xFF};
 801285a:	8013      	strh	r3, [r2, #0]
  uint8_t fidNDEF[] = {FID_NDEF >> 8, FID_NDEF & 0xFF};
 801285c:	2380      	movs	r3, #128	@ 0x80
 801285e:	005b      	lsls	r3, r3, #1
 8012860:	8093      	strh	r3, [r2, #4]
  uint8_t selectFileId[] = {0xA4, 0x00, 0x0C, 0x02, 0x00, 0x01 };
 8012862:	a802      	add	r0, sp, #8
 8012864:	2206      	movs	r2, #6
 8012866:	f000 fd59 	bl	801331c <memcpy>
  if(cmdCompare( cmdData, aid, sizeof(aid)))
 801286a:	2207      	movs	r2, #7
 801286c:	0028      	movs	r0, r5
 801286e:	a904      	add	r1, sp, #16
 8012870:	f7ff fe84 	bl	801257c <cmdCompare>
 8012874:	4f45      	ldr	r7, [pc, #276]	@ (801298c <demoCeT4T+0x188>)
 8012876:	2800      	cmp	r0, #0
 8012878:	d003      	beq.n	8012882 <demoCeT4T+0x7e>
      nState = STATE_APP_SELECTED;
 801287a:	2301      	movs	r3, #1
 801287c:	703b      	strb	r3, [r7, #0]
  rspData[1] = (success ? (char)0x00 : 0x82);
 801287e:	2390      	movs	r3, #144	@ 0x90
 8012880:	e01c      	b.n	80128bc <demoCeT4T+0xb8>
  else if((nState >= STATE_APP_SELECTED) && cmdCompare(cmdData, fidCC, sizeof(fidCC)))
 8012882:	2300      	movs	r3, #0
 8012884:	56fb      	ldrsb	r3, [r7, r3]
 8012886:	2b00      	cmp	r3, #0
 8012888:	dd14      	ble.n	80128b4 <demoCeT4T+0xb0>
 801288a:	2202      	movs	r2, #2
 801288c:	4669      	mov	r1, sp
 801288e:	0028      	movs	r0, r5
 8012890:	f7ff fe74 	bl	801257c <cmdCompare>
 8012894:	2202      	movs	r2, #2
 8012896:	2800      	cmp	r0, #0
 8012898:	d115      	bne.n	80128c6 <demoCeT4T+0xc2>
  else if((nState >= STATE_APP_SELECTED) && (cmdCompare(cmdData,fidNDEF,sizeof(fidNDEF)) || cmdCompare(cmdData,selectFileId,sizeof(selectFileId))))
 801289a:	0028      	movs	r0, r5
 801289c:	a901      	add	r1, sp, #4
 801289e:	f7ff fe6d 	bl	801257c <cmdCompare>
 80128a2:	2800      	cmp	r0, #0
 80128a4:	d114      	bne.n	80128d0 <demoCeT4T+0xcc>
 80128a6:	2206      	movs	r2, #6
 80128a8:	0028      	movs	r0, r5
 80128aa:	a902      	add	r1, sp, #8
 80128ac:	f7ff fe66 	bl	801257c <cmdCompare>
 80128b0:	2800      	cmp	r0, #0
 80128b2:	d10d      	bne.n	80128d0 <demoCeT4T+0xcc>
      nState = STATE_IDLE;
 80128b4:	2300      	movs	r3, #0
  rspData[1] = (success ? (char)0x00 : 0x82);
 80128b6:	2682      	movs	r6, #130	@ 0x82
      nState = STATE_IDLE;
 80128b8:	703b      	strb	r3, [r7, #0]
 80128ba:	336a      	adds	r3, #106	@ 0x6a
  rspData[0] = (success ? (char)0x90 : 0x6A);
 80128bc:	7023      	strb	r3, [r4, #0]
  rspData[1] = (success ? (char)0x00 : 0x82);
 80128be:	7066      	strb	r6, [r4, #1]
          {
              case T4T_INS_SELECT:
                  return demoCeT4TSelect(rxData, txBuf);
 80128c0:	2002      	movs	r0, #2

  /* Function not supported ...  */
  txBuf[0] = ((char)0x68);
  txBuf[1] = ((char)0x00);
  return 2;
}
 80128c2:	b007      	add	sp, #28
 80128c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128c6:	0033      	movs	r3, r6
      nState = STATE_CC_SELECTED;
 80128c8:	703a      	strb	r2, [r7, #0]
      nSelectedIdx = 0;
 80128ca:	4a31      	ldr	r2, [pc, #196]	@ (8012990 <demoCeT4T+0x18c>)
 80128cc:	6013      	str	r3, [r2, #0]
  rspData[1] = (success ? (char)0x00 : 0x82);
 80128ce:	e7d6      	b.n	801287e <demoCeT4T+0x7a>
 80128d0:	2203      	movs	r2, #3
 80128d2:	2301      	movs	r3, #1
 80128d4:	e7f8      	b.n	80128c8 <demoCeT4T+0xc4>
  unsigned short offset = (cmdData[2] << 8) | cmdData[3];
 80128d6:	78ee      	ldrb	r6, [r5, #3]
 80128d8:	78ab      	ldrb	r3, [r5, #2]
 80128da:	0236      	lsls	r6, r6, #8
  unsigned short toRead = cmdData[4];
 80128dc:	792d      	ldrb	r5, [r5, #4]
 80128de:	431e      	orrs	r6, r3
  if( rspDataLen < 2 )
 80128e0:	2f01      	cmp	r7, #1
 80128e2:	d804      	bhi.n	80128ee <demoCeT4T+0xea>
      platformErrorHandle();  /* Must ensure appropriate buffer */
 80128e4:	2184      	movs	r1, #132	@ 0x84
 80128e6:	4825      	ldr	r0, [pc, #148]	@ (801297c <demoCeT4T+0x178>)
 80128e8:	0049      	lsls	r1, r1, #1
 80128ea:	f000 fc51 	bl	8013190 <_Error_Handler>
  if(nSelectedIdx < 0 || nSelectedIdx >= nFiles)
 80128ee:	4b28      	ldr	r3, [pc, #160]	@ (8012990 <demoCeT4T+0x18c>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	d904      	bls.n	8012900 <demoCeT4T+0xfc>
      rspData[0] = ((char)0x6A);
 80128f6:	236a      	movs	r3, #106	@ 0x6a
 80128f8:	7023      	strb	r3, [r4, #0]
      rspData[1] = ((char)0x82);
 80128fa:	3318      	adds	r3, #24
    rspData[1] = ((char)0x82);
 80128fc:	7063      	strb	r3, [r4, #1]
    return 2;
 80128fe:	e7df      	b.n	80128c0 <demoCeT4T+0xbc>
  if((unsigned long)(offset + toRead) > pdwFileSize[nSelectedIdx])
 8012900:	4a24      	ldr	r2, [pc, #144]	@ (8012994 <demoCeT4T+0x190>)
 8012902:	ba76      	rev16	r6, r6
 8012904:	0099      	lsls	r1, r3, #2
 8012906:	5888      	ldr	r0, [r1, r2]
 8012908:	b2b6      	uxth	r6, r6
 801290a:	1972      	adds	r2, r6, r5
 801290c:	4282      	cmp	r2, r0
 801290e:	d901      	bls.n	8012914 <demoCeT4T+0x110>
      toRead = pdwFileSize[nSelectedIdx] - offset;
 8012910:	1b85      	subs	r5, r0, r6
 8012912:	b2ad      	uxth	r5, r5
  if( rspDataLen < (toRead+2) )
 8012914:	1c6a      	adds	r2, r5, #1
 8012916:	42ba      	cmp	r2, r7
 8012918:	db03      	blt.n	8012922 <demoCeT4T+0x11e>
      rspData[0] = ((char)0x6F);
 801291a:	236f      	movs	r3, #111	@ 0x6f
  txBuf[0] = ((char)0x68);
 801291c:	7023      	strb	r3, [r4, #0]
  txBuf[1] = ((char)0x00);
 801291e:	2300      	movs	r3, #0
 8012920:	e7ec      	b.n	80128fc <demoCeT4T+0xf8>
  ppbMemory = (nSelectedIdx == 0 ? ccfile : ndefFile);
 8012922:	491d      	ldr	r1, [pc, #116]	@ (8012998 <demoCeT4T+0x194>)
 8012924:	2b00      	cmp	r3, #0
 8012926:	d100      	bne.n	801292a <demoCeT4T+0x126>
 8012928:	491c      	ldr	r1, [pc, #112]	@ (801299c <demoCeT4T+0x198>)
  memcpy(rspData, &ppbMemory[offset], toRead);
 801292a:	002a      	movs	r2, r5
 801292c:	0020      	movs	r0, r4
 801292e:	1989      	adds	r1, r1, r6
 8012930:	f000 fcf4 	bl	801331c <memcpy>
  rspData[toRead] = ((char)0x90);
 8012934:	2390      	movs	r3, #144	@ 0x90
 8012936:	5563      	strb	r3, [r4, r5]
  rspData[toRead+1] = ((char)0x00);
 8012938:	2300      	movs	r3, #0
 801293a:	1964      	adds	r4, r4, r5
  return toRead + 2;
 801293c:	3502      	adds	r5, #2
  rspData[toRead+1] = ((char)0x00);
 801293e:	7063      	strb	r3, [r4, #1]
  return toRead + 2;
 8012940:	b2a8      	uxth	r0, r5
 8012942:	e7be      	b.n	80128c2 <demoCeT4T+0xbe>
  uint32_t offset = (cmdData[2] << 8) | cmdData[3];
 8012944:	78e8      	ldrb	r0, [r5, #3]
 8012946:	78ab      	ldrb	r3, [r5, #2]
 8012948:	0200      	lsls	r0, r0, #8
 801294a:	4318      	orrs	r0, r3
  if(nSelectedIdx != 1)
 801294c:	4b10      	ldr	r3, [pc, #64]	@ (8012990 <demoCeT4T+0x18c>)
  uint32_t length = cmdData[4];
 801294e:	792a      	ldrb	r2, [r5, #4]
  if(nSelectedIdx != 1)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	2b01      	cmp	r3, #1
 8012954:	d1cf      	bne.n	80128f6 <demoCeT4T+0xf2>
  uint32_t offset = (cmdData[2] << 8) | cmdData[3];
 8012956:	ba40      	rev16	r0, r0
 8012958:	b280      	uxth	r0, r0
  if((unsigned long)(offset + length) > pdwFileSize[nSelectedIdx])
 801295a:	1881      	adds	r1, r0, r2
 801295c:	33ff      	adds	r3, #255	@ 0xff
 801295e:	4299      	cmp	r1, r3
 8012960:	d903      	bls.n	801296a <demoCeT4T+0x166>
    rspData[0] = ((char)0x62);
 8012962:	3b9e      	subs	r3, #158	@ 0x9e
 8012964:	7023      	strb	r3, [r4, #0]
    rspData[1] = ((char)0x82);
 8012966:	3320      	adds	r3, #32
 8012968:	e7c8      	b.n	80128fc <demoCeT4T+0xf8>
  memcpy((ndefFile + offset), &cmdData[5], length);
 801296a:	4b0b      	ldr	r3, [pc, #44]	@ (8012998 <demoCeT4T+0x194>)
 801296c:	1d69      	adds	r1, r5, #5
 801296e:	18c0      	adds	r0, r0, r3
 8012970:	f000 fcd4 	bl	801331c <memcpy>
  rspData[0] = ((char)0x90);
 8012974:	e783      	b.n	801287e <demoCeT4T+0x7a>
  txBuf[0] = ((char)0x68);
 8012976:	2368      	movs	r3, #104	@ 0x68
 8012978:	e7d0      	b.n	801291c <demoCeT4T+0x118>
 801297a:	46c0      	nop			@ (mov r8, r8)
 801297c:	08013e99 	.word	0x08013e99
 8012980:	0000025d 	.word	0x0000025d
 8012984:	08013d35 	.word	0x08013d35
 8012988:	000003e1 	.word	0x000003e1
 801298c:	20003075 	.word	0x20003075
 8012990:	20000988 	.word	0x20000988
 8012994:	080146ac 	.word	0x080146ac
 8012998:	20003076 	.word	0x20003076
 801299c:	20000978 	.word	0x20000978

080129a0 <demoCeT3T>:
  *
  * @return Response size.
  *****************************************************************************
  */
uint16_t demoCeT3T(uint8_t *rxData, uint16_t rxDataLen, uint8_t *txBuf, uint16_t txBufLen )
{
 80129a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129a2:	0005      	movs	r5, r0
 80129a4:	000f      	movs	r7, r1
 80129a6:	0014      	movs	r4, r2
 80129a8:	001e      	movs	r6, r3
    if( (txBuf == NULL) || (txBufLen < 11) )
 80129aa:	2a00      	cmp	r2, #0
 80129ac:	d001      	beq.n	80129b2 <demoCeT3T+0x12>
 80129ae:	2b0a      	cmp	r3, #10
 80129b0:	d803      	bhi.n	80129ba <demoCeT3T+0x1a>
    {
        platformErrorHandle();  /* Must ensure appropriate buffer */
 80129b2:	480e      	ldr	r0, [pc, #56]	@ (80129ec <demoCeT3T+0x4c>)
 80129b4:	490e      	ldr	r1, [pc, #56]	@ (80129f0 <demoCeT3T+0x50>)
 80129b6:	f000 fbeb 	bl	8013190 <_Error_Handler>
    }

    if( (rxData != NULL) && (rxDataLen >= 4) )
 80129ba:	2d00      	cmp	r5, #0
 80129bc:	d006      	beq.n	80129cc <demoCeT3T+0x2c>
 80129be:	2f03      	cmp	r7, #3
 80129c0:	d904      	bls.n	80129cc <demoCeT3T+0x2c>
    {
        switch(rxData[1])
 80129c2:	786b      	ldrb	r3, [r5, #1]
 80129c4:	2b06      	cmp	r3, #6
 80129c6:	d006      	beq.n	80129d6 <demoCeT3T+0x36>
 80129c8:	2b08      	cmp	r3, #8
 80129ca:	d00a      	beq.n	80129e2 <demoCeT3T+0x42>
                break;
        }
    }

  /* Function not supported ...  */
  txBuf[0] = ((char)0xFF);
 80129cc:	23ff      	movs	r3, #255	@ 0xff
  txBuf[1] = ((char)0xFF);
  return 2;
 80129ce:	2002      	movs	r0, #2
  txBuf[0] = ((char)0xFF);
 80129d0:	7023      	strb	r3, [r4, #0]
  txBuf[1] = ((char)0xFF);
 80129d2:	7063      	strb	r3, [r4, #1]
  return 2;
 80129d4:	e004      	b.n	80129e0 <demoCeT3T+0x40>
                return demoCeT3TCheck(rxData, txBuf, txBufLen);
 80129d6:	0032      	movs	r2, r6
 80129d8:	0021      	movs	r1, r4
 80129da:	0028      	movs	r0, r5
 80129dc:	f7ff fde2 	bl	80125a4 <demoCeT3TCheck>
}
 80129e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return demoCeT3TUpdate(rxData, txBuf);
 80129e2:	0021      	movs	r1, r4
 80129e4:	0028      	movs	r0, r5
 80129e6:	f7ff fe69 	bl	80126bc <demoCeT3TUpdate>
 80129ea:	e7f9      	b.n	80129e0 <demoCeT3T+0x40>
 80129ec:	08013e99 	.word	0x08013e99
 80129f0:	0000028e 	.word	0x0000028e

080129f4 <demoNotif>:
 *
 *  This function receives the event notifications from RFAL
 *****************************************************************************
 */
static void demoNotif( rfalNfcState st )
{
 80129f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129f6:	3802      	subs	r0, #2
 80129f8:	280a      	cmp	r0, #10
 80129fa:	d80a      	bhi.n	8012a12 <demoNotif+0x1e>
 80129fc:	f7ed fb96 	bl	800012c <__gnu_thumb1_case_uqi>
 8012a00:	09090628 	.word	0x09090628
 8012a04:	09090909 	.word	0x09090909
 8012a08:	090a      	.short	0x090a
 8012a0a:	10          	.byte	0x10
 8012a0b:	00          	.byte	0x00
    uint8_t       devCnt;
    rfalNfcDevice *dev;

    if( st == RFAL_NFC_STATE_WAKEUP_MODE )
    {
        platformLog("Wake Up mode started \r\n");
 8012a0c:	4812      	ldr	r0, [pc, #72]	@ (8012a58 <demoNotif+0x64>)
    }
    else if( st == RFAL_NFC_STATE_POLL_TECHDETECT )
    {
        if( discParam.wakeupEnabled )
        {
            platformLog("Wake Up mode terminated. Polling for devices \r\n");
 8012a0e:	f000 fb6b 	bl	80130e8 <logUsart>
    else if( st == RFAL_NFC_STATE_START_DISCOVERY )
    {
        /* Clear mutiple device selection flag */
        multiSel = false;
    }
}
 8012a12:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        if( discParam.wakeupEnabled )
 8012a14:	4b11      	ldr	r3, [pc, #68]	@ (8012a5c <demoNotif+0x68>)
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d0fa      	beq.n	8012a12 <demoNotif+0x1e>
            platformLog("Wake Up mode terminated. Polling for devices \r\n");
 8012a1c:	4810      	ldr	r0, [pc, #64]	@ (8012a60 <demoNotif+0x6c>)
 8012a1e:	e7f6      	b.n	8012a0e <demoNotif+0x1a>
        if( (!multiSel) )
 8012a20:	4b10      	ldr	r3, [pc, #64]	@ (8012a64 <demoNotif+0x70>)
 8012a22:	781d      	ldrb	r5, [r3, #0]
 8012a24:	2d00      	cmp	r5, #0
 8012a26:	d10f      	bne.n	8012a48 <demoNotif+0x54>
            multiSel = true;
 8012a28:	2201      	movs	r2, #1
 8012a2a:	701a      	strb	r2, [r3, #0]
            rfalNfcGetDevicesFound( &dev, &devCnt );
 8012a2c:	466b      	mov	r3, sp
 8012a2e:	1cdc      	adds	r4, r3, #3
 8012a30:	0021      	movs	r1, r4
 8012a32:	a801      	add	r0, sp, #4
 8012a34:	f7fa fa62 	bl	800cefc <rfalNfcGetDevicesFound>
            rfalNfcSelect( 0 );
 8012a38:	0028      	movs	r0, r5
 8012a3a:	f7fa fa47 	bl	800cecc <rfalNfcSelect>
            platformLog("Multiple Tags detected: %d \r\n", devCnt);
 8012a3e:	7821      	ldrb	r1, [r4, #0]
 8012a40:	4809      	ldr	r0, [pc, #36]	@ (8012a68 <demoNotif+0x74>)
 8012a42:	f000 fb51 	bl	80130e8 <logUsart>
 8012a46:	e7e4      	b.n	8012a12 <demoNotif+0x1e>
            rfalNfcDeactivate( RFAL_NFC_DEACTIVATE_DISCOVERY );
 8012a48:	2002      	movs	r0, #2
 8012a4a:	f7fa fa0f 	bl	800ce6c <rfalNfcDeactivate>
}
 8012a4e:	e7e0      	b.n	8012a12 <demoNotif+0x1e>
        multiSel = false;
 8012a50:	2200      	movs	r2, #0
 8012a52:	4b04      	ldr	r3, [pc, #16]	@ (8012a64 <demoNotif+0x70>)
 8012a54:	701a      	strb	r2, [r3, #0]
}
 8012a56:	e7dc      	b.n	8012a12 <demoNotif+0x1e>
 8012a58:	08013eb9 	.word	0x08013eb9
 8012a5c:	20003214 	.word	0x20003214
 8012a60:	08013ed1 	.word	0x08013ed1
 8012a64:	20003184 	.word	0x20003184
 8012a68:	08013f01 	.word	0x08013f01

08012a6c <demoIni>:
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni( void )
{
 8012a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ReturnCode err;

    err = rfalNfcInitialize();
 8012a6e:	f7fa f98d 	bl	800cd8c <rfalNfcInitialize>
 8012a72:	1e06      	subs	r6, r0, #0
    if( err == RFAL_ERR_NONE )
 8012a74:	d001      	beq.n	8012a7a <demoIni+0xe>
        err = rfalNfcDiscover( &discParam );
        rfalNfcDeactivate( RFAL_NFC_DEACTIVATE_IDLE );

        if( err != RFAL_ERR_NONE )
        {
            return false;
 8012a76:	2000      	movs	r0, #0

        state = DEMO_ST_START_DISCOVERY;
        return true;
    }
    return false;
}
 8012a78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        rfalNfcDefaultDiscParams( &discParam );
 8012a7a:	4c30      	ldr	r4, [pc, #192]	@ (8012b3c <demoIni+0xd0>)
 8012a7c:	0001      	movs	r1, r0
 8012a7e:	22ae      	movs	r2, #174	@ 0xae
 8012a80:	0020      	movs	r0, r4
 8012a82:	f000 fc17 	bl	80132b4 <memset>
 8012a86:	0023      	movs	r3, r4
 8012a88:	22c2      	movs	r2, #194	@ 0xc2
 8012a8a:	3360      	adds	r3, #96	@ 0x60
 8012a8c:	0092      	lsls	r2, r2, #2
 8012a8e:	801a      	strh	r2, [r3, #0]
 8012a90:	0023      	movs	r3, r4
 8012a92:	2501      	movs	r5, #1
 8012a94:	338d      	adds	r3, #141	@ 0x8d
 8012a96:	701d      	strb	r5, [r3, #0]
 8012a98:	0023      	movs	r3, r4
 8012a9a:	33ae      	adds	r3, #174	@ 0xae
 8012a9c:	801d      	strh	r5, [r3, #0]
 8012a9e:	23fa      	movs	r3, #250	@ 0xfa
 8012aa0:	009b      	lsls	r3, r3, #2
 8012aa2:	80e3      	strh	r3, [r4, #6]
 8012aa4:	23ff      	movs	r3, #255	@ 0xff
        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8012aa6:	0020      	movs	r0, r4
        rfalNfcDefaultDiscParams( &discParam );
 8012aa8:	425b      	negs	r3, r3
 8012aaa:	8123      	strh	r3, [r4, #8]
        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8012aac:	4b24      	ldr	r3, [pc, #144]	@ (8012b40 <demoIni+0xd4>)
 8012aae:	221e      	movs	r2, #30
 8012ab0:	0019      	movs	r1, r3
 8012ab2:	300b      	adds	r0, #11
 8012ab4:	001f      	movs	r7, r3
        rfalNfcDefaultDiscParams( &discParam );
 8012ab6:	72a5      	strb	r5, [r4, #10]
        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8012ab8:	f000 fc30 	bl	801331c <memcpy>
        discParam.GBLen         = sizeof(GB);
 8012abc:	0023      	movs	r3, r4
 8012abe:	2214      	movs	r2, #20
 8012ac0:	3345      	adds	r3, #69	@ 0x45
 8012ac2:	701a      	strb	r2, [r3, #0]
        rfalNfcDefaultDiscParams( &discParam );
 8012ac4:	0023      	movs	r3, r4
 8012ac6:	32ee      	adds	r2, #238	@ 0xee
 8012ac8:	3308      	adds	r3, #8
 8012aca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        discParam.notifyCb             = demoNotif;
 8012acc:	0023      	movs	r3, r4
 8012ace:	4a1d      	ldr	r2, [pc, #116]	@ (8012b44 <demoIni+0xd8>)
 8012ad0:	3388      	adds	r3, #136	@ 0x88
 8012ad2:	601a      	str	r2, [r3, #0]
        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_AP2P;
 8012ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8012b48 <demoIni+0xdc>)
 8012ad6:	8063      	strh	r3, [r4, #2]
        demoCeInit( ceNFCF_nfcid2 );
 8012ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8012b4c <demoIni+0xe0>)
 8012ada:	0018      	movs	r0, r3
 8012adc:	9300      	str	r3, [sp, #0]
 8012ade:	f7ff fe65 	bl	80127ac <demoCeInit>
        discParam.lmConfigPA.nfcidLen = RFAL_LM_NFCID_LEN_04;                                  /* Set NFCID length to 7 bytes */
 8012ae2:	0020      	movs	r0, r4
 8012ae4:	2205      	movs	r2, #5
 8012ae6:	491a      	ldr	r1, [pc, #104]	@ (8012b50 <demoIni+0xe4>)
 8012ae8:	3062      	adds	r0, #98	@ 0x62
 8012aea:	f000 fc17 	bl	801331c <memcpy>
        ST_MEMCPY( discParam.lmConfigPA.SENS_RES, ceNFCA_SENS_RES, RFAL_LM_SENS_RES_LEN );     /* Set SENS_RES / ATQA */
 8012aee:	0020      	movs	r0, r4
 8012af0:	0039      	movs	r1, r7
        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_A;
 8012af2:	8863      	ldrh	r3, [r4, #2]
        ST_MEMCPY( discParam.lmConfigPA.SENS_RES, ceNFCA_SENS_RES, RFAL_LM_SENS_RES_LEN );     /* Set SENS_RES / ATQA */
 8012af4:	2205      	movs	r2, #5
 8012af6:	311e      	adds	r1, #30
 8012af8:	306d      	adds	r0, #109	@ 0x6d
        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_A;
 8012afa:	9301      	str	r3, [sp, #4]
        ST_MEMCPY( discParam.lmConfigPA.SENS_RES, ceNFCA_SENS_RES, RFAL_LM_SENS_RES_LEN );     /* Set SENS_RES / ATQA */
 8012afc:	f000 fc0e 	bl	801331c <memcpy>
        ST_MEMCPY( &ceNFCF_SENSF_RES[RFAL_NFCF_CMD_LEN], ceNFCF_nfcid2, RFAL_NFCID2_LEN );     /* Load NFCID2 on SENSF_RES */
 8012b00:	2208      	movs	r2, #8
 8012b02:	9900      	ldr	r1, [sp, #0]
 8012b04:	4813      	ldr	r0, [pc, #76]	@ (8012b54 <demoIni+0xe8>)
 8012b06:	f000 fc09 	bl	801331c <memcpy>
        ST_MEMCPY( discParam.lmConfigPF.SENSF_RES, ceNFCF_SENSF_RES, RFAL_LM_SENSF_RES_LEN );  /* Set SENSF_RES / Poll Response */
 8012b0a:	0020      	movs	r0, r4
 8012b0c:	2213      	movs	r2, #19
 8012b0e:	4912      	ldr	r1, [pc, #72]	@ (8012b58 <demoIni+0xec>)
 8012b10:	3072      	adds	r0, #114	@ 0x72
 8012b12:	f000 fc03 	bl	801331c <memcpy>
        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_F;
 8012b16:	23a0      	movs	r3, #160	@ 0xa0
 8012b18:	9a01      	ldr	r2, [sp, #4]
 8012b1a:	01db      	lsls	r3, r3, #7
        err = rfalNfcDiscover( &discParam );
 8012b1c:	0020      	movs	r0, r4
        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_F;
 8012b1e:	4313      	orrs	r3, r2
 8012b20:	8063      	strh	r3, [r4, #2]
        err = rfalNfcDiscover( &discParam );
 8012b22:	f7fa f94b 	bl	800cdbc <rfalNfcDiscover>
 8012b26:	0004      	movs	r4, r0
        rfalNfcDeactivate( RFAL_NFC_DEACTIVATE_IDLE );
 8012b28:	0030      	movs	r0, r6
 8012b2a:	f7fa f99f 	bl	800ce6c <rfalNfcDeactivate>
        if( err != RFAL_ERR_NONE )
 8012b2e:	2c00      	cmp	r4, #0
 8012b30:	d1a1      	bne.n	8012a76 <demoIni+0xa>
        state = DEMO_ST_START_DISCOVERY;
 8012b32:	4b0a      	ldr	r3, [pc, #40]	@ (8012b5c <demoIni+0xf0>)
        return true;
 8012b34:	0028      	movs	r0, r5
        state = DEMO_ST_START_DISCOVERY;
 8012b36:	701d      	strb	r5, [r3, #0]
        return true;
 8012b38:	e79e      	b.n	8012a78 <demoIni+0xc>
 8012b3a:	46c0      	nop			@ (mov r8, r8)
 8012b3c:	20003188 	.word	0x20003188
 8012b40:	08013d42 	.word	0x08013d42
 8012b44:	080129f5 	.word	0x080129f5
 8012b48:	ffff803f 	.word	0xffff803f
 8012b4c:	2000099f 	.word	0x2000099f
 8012b50:	08013f1f 	.word	0x08013f1f
 8012b54:	2000098d 	.word	0x2000098d
 8012b58:	2000098c 	.word	0x2000098c
 8012b5c:	20003185 	.word	0x20003185

08012b60 <demoTransceiveBlocking>:
 *  \return RFAL_ERR_NONE      : No error, activation successful
 *
 *****************************************************************************
 */
ReturnCode demoTransceiveBlocking( uint8_t *txBuf, uint16_t txBufSize, uint8_t **rxData, uint16_t **rcvLen, uint32_t fwt )
{
 8012b60:	b513      	push	{r0, r1, r4, lr}
    ReturnCode err;

    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 8012b62:	9c04      	ldr	r4, [sp, #16]
 8012b64:	9400      	str	r4, [sp, #0]
 8012b66:	f7fa f9f9 	bl	800cf5c <rfalNfcDataExchangeStart>
    if( err == RFAL_ERR_NONE )
 8012b6a:	2800      	cmp	r0, #0
 8012b6c:	d105      	bne.n	8012b7a <demoTransceiveBlocking+0x1a>
    {
        do{
            rfalNfcWorker();
 8012b6e:	f7fa fb1b 	bl	800d1a8 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 8012b72:	f7fa fac9 	bl	800d108 <rfalNfcDataExchangeGetStatus>
        }
        while( err == RFAL_ERR_BUSY );
 8012b76:	2802      	cmp	r0, #2
 8012b78:	d0f9      	beq.n	8012b6e <demoTransceiveBlocking+0xe>
    }
    return err;
}
 8012b7a:	bd16      	pop	{r1, r2, r4, pc}

08012b7c <demoAPDU>:
{
 8012b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    err = demoTransceiveBlocking( ndefSelectApp, sizeof(ndefSelectApp), &rxData, &rxLen, RFAL_FWT_NONE );
 8012b7e:	2301      	movs	r3, #1
 8012b80:	425b      	negs	r3, r3
 8012b82:	9300      	str	r3, [sp, #0]
 8012b84:	210d      	movs	r1, #13
 8012b86:	4826      	ldr	r0, [pc, #152]	@ (8012c20 <demoAPDU+0xa4>)
 8012b88:	ab02      	add	r3, sp, #8
 8012b8a:	aa03      	add	r2, sp, #12
 8012b8c:	f7ff ffe8 	bl	8012b60 <demoTransceiveBlocking>
 8012b90:	1e04      	subs	r4, r0, #0
    platformLog(" Select NDEF Application: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 8012b92:	d13c      	bne.n	8012c0e <demoAPDU+0x92>
 8012b94:	9b02      	ldr	r3, [sp, #8]
 8012b96:	9803      	ldr	r0, [sp, #12]
 8012b98:	8819      	ldrh	r1, [r3, #0]
 8012b9a:	f000 fabf 	bl	801311c <hex2Str>
 8012b9e:	0002      	movs	r2, r0
 8012ba0:	4920      	ldr	r1, [pc, #128]	@ (8012c24 <demoAPDU+0xa8>)
 8012ba2:	4821      	ldr	r0, [pc, #132]	@ (8012c28 <demoAPDU+0xac>)
 8012ba4:	f000 faa0 	bl	80130e8 <logUsart>
    if( (err == RFAL_ERR_NONE) && rxData[0] == 0x90 && rxData[1] == 0x00)
 8012ba8:	2c00      	cmp	r4, #0
 8012baa:	d12f      	bne.n	8012c0c <demoAPDU+0x90>
 8012bac:	9b03      	ldr	r3, [sp, #12]
 8012bae:	781a      	ldrb	r2, [r3, #0]
 8012bb0:	2a90      	cmp	r2, #144	@ 0x90
 8012bb2:	d12b      	bne.n	8012c0c <demoAPDU+0x90>
 8012bb4:	785b      	ldrb	r3, [r3, #1]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d128      	bne.n	8012c0c <demoAPDU+0x90>
        err = demoTransceiveBlocking( ccSelectFile, sizeof(ccSelectFile), &rxData, &rxLen, RFAL_FWT_NONE );
 8012bba:	3b01      	subs	r3, #1
 8012bbc:	9300      	str	r3, [sp, #0]
 8012bbe:	2107      	movs	r1, #7
 8012bc0:	481a      	ldr	r0, [pc, #104]	@ (8012c2c <demoAPDU+0xb0>)
 8012bc2:	ab02      	add	r3, sp, #8
 8012bc4:	aa03      	add	r2, sp, #12
 8012bc6:	f7ff ffcb 	bl	8012b60 <demoTransceiveBlocking>
        platformLog(" Select CC: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d122      	bne.n	8012c14 <demoAPDU+0x98>
 8012bce:	9b02      	ldr	r3, [sp, #8]
 8012bd0:	9803      	ldr	r0, [sp, #12]
 8012bd2:	8819      	ldrh	r1, [r3, #0]
 8012bd4:	f000 faa2 	bl	801311c <hex2Str>
 8012bd8:	0002      	movs	r2, r0
 8012bda:	4912      	ldr	r1, [pc, #72]	@ (8012c24 <demoAPDU+0xa8>)
 8012bdc:	4814      	ldr	r0, [pc, #80]	@ (8012c30 <demoAPDU+0xb4>)
 8012bde:	f000 fa83 	bl	80130e8 <logUsart>
        err = demoTransceiveBlocking( readBinary, sizeof(readBinary), &rxData, &rxLen, RFAL_FWT_NONE );
 8012be2:	2301      	movs	r3, #1
 8012be4:	425b      	negs	r3, r3
 8012be6:	9300      	str	r3, [sp, #0]
 8012be8:	2105      	movs	r1, #5
 8012bea:	4812      	ldr	r0, [pc, #72]	@ (8012c34 <demoAPDU+0xb8>)
 8012bec:	ab02      	add	r3, sp, #8
 8012bee:	aa03      	add	r2, sp, #12
 8012bf0:	f7ff ffb6 	bl	8012b60 <demoTransceiveBlocking>
        platformLog(" Read CC: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	d110      	bne.n	8012c1a <demoAPDU+0x9e>
 8012bf8:	9b02      	ldr	r3, [sp, #8]
 8012bfa:	9803      	ldr	r0, [sp, #12]
 8012bfc:	8819      	ldrh	r1, [r3, #0]
 8012bfe:	f000 fa8d 	bl	801311c <hex2Str>
 8012c02:	0002      	movs	r2, r0
 8012c04:	4907      	ldr	r1, [pc, #28]	@ (8012c24 <demoAPDU+0xa8>)
 8012c06:	480c      	ldr	r0, [pc, #48]	@ (8012c38 <demoAPDU+0xbc>)
 8012c08:	f000 fa6e 	bl	80130e8 <logUsart>
}
 8012c0c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    platformLog(" Select NDEF Application: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 8012c0e:	490b      	ldr	r1, [pc, #44]	@ (8012c3c <demoAPDU+0xc0>)
 8012c10:	4a0b      	ldr	r2, [pc, #44]	@ (8012c40 <demoAPDU+0xc4>)
 8012c12:	e7c6      	b.n	8012ba2 <demoAPDU+0x26>
        platformLog(" Select CC: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 8012c14:	4909      	ldr	r1, [pc, #36]	@ (8012c3c <demoAPDU+0xc0>)
 8012c16:	4a0a      	ldr	r2, [pc, #40]	@ (8012c40 <demoAPDU+0xc4>)
 8012c18:	e7e0      	b.n	8012bdc <demoAPDU+0x60>
        platformLog(" Read CC: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 8012c1a:	4908      	ldr	r1, [pc, #32]	@ (8012c3c <demoAPDU+0xc0>)
 8012c1c:	4a08      	ldr	r2, [pc, #32]	@ (8012c40 <demoAPDU+0xc4>)
 8012c1e:	e7f2      	b.n	8012c06 <demoAPDU+0x8a>
 8012c20:	200009f9 	.word	0x200009f9
 8012c24:	08013f25 	.word	0x08013f25
 8012c28:	08013f2d 	.word	0x08013f2d
 8012c2c:	200009f2 	.word	0x200009f2
 8012c30:	08013f55 	.word	0x08013f55
 8012c34:	200009ed 	.word	0x200009ed
 8012c38:	08013f6f 	.word	0x08013f6f
 8012c3c:	08013f28 	.word	0x08013f28
 8012c40:	08013f1e 	.word	0x08013f1e

08012c44 <demoP2P.isra.0>:
void demoP2P( rfalNfcDevice *nfcDev )
 8012c44:	b530      	push	{r4, r5, lr}
 8012c46:	b085      	sub	sp, #20
    if( nfcDev->type == RFAL_NFC_POLL_TYPE_AP2P )
 8012c48:	280f      	cmp	r0, #15
 8012c4a:	d106      	bne.n	8012c5a <demoP2P.isra.0+0x16>
        demoTransceiveBlocking( NULL, 0, &rxData, &rxLen, 0);
 8012c4c:	2000      	movs	r0, #0
 8012c4e:	ab02      	add	r3, sp, #8
 8012c50:	0001      	movs	r1, r0
 8012c52:	9000      	str	r0, [sp, #0]
 8012c54:	aa03      	add	r2, sp, #12
 8012c56:	f7ff ff83 	bl	8012b60 <demoTransceiveBlocking>
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 8012c5a:	2501      	movs	r5, #1
    platformLog(" Initialize device .. ");
 8012c5c:	481c      	ldr	r0, [pc, #112]	@ (8012cd0 <demoP2P.isra.0+0x8c>)
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 8012c5e:	426d      	negs	r5, r5
    platformLog(" Initialize device .. ");
 8012c60:	f000 fa42 	bl	80130e8 <logUsart>
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 8012c64:	211a      	movs	r1, #26
 8012c66:	481b      	ldr	r0, [pc, #108]	@ (8012cd4 <demoP2P.isra.0+0x90>)
 8012c68:	9500      	str	r5, [sp, #0]
 8012c6a:	ab02      	add	r3, sp, #8
 8012c6c:	aa03      	add	r2, sp, #12
 8012c6e:	f7ff ff77 	bl	8012b60 <demoTransceiveBlocking>
    if( err != RFAL_ERR_NONE )
 8012c72:	2800      	cmp	r0, #0
 8012c74:	d004      	beq.n	8012c80 <demoP2P.isra.0+0x3c>
        platformLog("failed.\r\n");
 8012c76:	4818      	ldr	r0, [pc, #96]	@ (8012cd8 <demoP2P.isra.0+0x94>)
    platformLog("\r\n Device removed.\r\n");
 8012c78:	f000 fa36 	bl	80130e8 <logUsart>
}
 8012c7c:	b005      	add	sp, #20
 8012c7e:	bd30      	pop	{r4, r5, pc}
    platformLog("succeeded.\r\n");
 8012c80:	4c16      	ldr	r4, [pc, #88]	@ (8012cdc <demoP2P.isra.0+0x98>)
 8012c82:	0020      	movs	r0, r4
 8012c84:	f000 fa30 	bl	80130e8 <logUsart>
    platformLog(" Push NDEF Uri: www.st.com/st25-demo ... ");
 8012c88:	4815      	ldr	r0, [pc, #84]	@ (8012ce0 <demoP2P.isra.0+0x9c>)
 8012c8a:	f000 fa2d 	bl	80130e8 <logUsart>
    err = demoTransceiveBlocking( ndefUriSTcom, sizeof(ndefUriSTcom), &rxData, &rxLen, RFAL_FWT_NONE);
 8012c8e:	212c      	movs	r1, #44	@ 0x2c
 8012c90:	4814      	ldr	r0, [pc, #80]	@ (8012ce4 <demoP2P.isra.0+0xa0>)
 8012c92:	9500      	str	r5, [sp, #0]
 8012c94:	ab02      	add	r3, sp, #8
 8012c96:	aa03      	add	r2, sp, #12
 8012c98:	f7ff ff62 	bl	8012b60 <demoTransceiveBlocking>
    if( err != RFAL_ERR_NONE )
 8012c9c:	2800      	cmp	r0, #0
 8012c9e:	d1ea      	bne.n	8012c76 <demoP2P.isra.0+0x32>
    platformLog("succeeded.\r\n");
 8012ca0:	0020      	movs	r0, r4
 8012ca2:	f000 fa21 	bl	80130e8 <logUsart>
    platformLog(" Device present, maintaining connection ");
 8012ca6:	4810      	ldr	r0, [pc, #64]	@ (8012ce8 <demoP2P.isra.0+0xa4>)
 8012ca8:	f000 fa1e 	bl	80130e8 <logUsart>
        err = demoTransceiveBlocking( ndefLLCPSYMM, sizeof(ndefLLCPSYMM), &rxData, &rxLen, RFAL_FWT_NONE);
 8012cac:	2102      	movs	r1, #2
 8012cae:	ab02      	add	r3, sp, #8
 8012cb0:	aa03      	add	r2, sp, #12
 8012cb2:	480e      	ldr	r0, [pc, #56]	@ (8012cec <demoP2P.isra.0+0xa8>)
 8012cb4:	9500      	str	r5, [sp, #0]
 8012cb6:	f7ff ff53 	bl	8012b60 <demoTransceiveBlocking>
 8012cba:	0004      	movs	r4, r0
        platformLog(".");
 8012cbc:	480c      	ldr	r0, [pc, #48]	@ (8012cf0 <demoP2P.isra.0+0xac>)
 8012cbe:	f000 fa13 	bl	80130e8 <logUsart>
        platformDelay(50);
 8012cc2:	2032      	movs	r0, #50	@ 0x32
 8012cc4:	f7f4 f9d6 	bl	8007074 <HAL_Delay>
    while(err == RFAL_ERR_NONE)
 8012cc8:	2c00      	cmp	r4, #0
 8012cca:	d0ef      	beq.n	8012cac <demoP2P.isra.0+0x68>
    platformLog("\r\n Device removed.\r\n");
 8012ccc:	4809      	ldr	r0, [pc, #36]	@ (8012cf4 <demoP2P.isra.0+0xb0>)
 8012cce:	e7d3      	b.n	8012c78 <demoP2P.isra.0+0x34>
 8012cd0:	08013f87 	.word	0x08013f87
 8012cd4:	200009d3 	.word	0x200009d3
 8012cd8:	08013f9e 	.word	0x08013f9e
 8012cdc:	08013fa8 	.word	0x08013fa8
 8012ce0:	08013fb5 	.word	0x08013fb5
 8012ce4:	200009a7 	.word	0x200009a7
 8012ce8:	08013fdf 	.word	0x08013fdf
 8012cec:	20003238 	.word	0x20003238
 8012cf0:	08014008 	.word	0x08014008
 8012cf4:	0801400a 	.word	0x0801400a

08012cf8 <demoCycle>:
{
 8012cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cfa:	b0b3      	sub	sp, #204	@ 0xcc
    rfalNfcWorker();                                    /* Run RFAL worker periodically */
 8012cfc:	f7fa fa54 	bl	800d1a8 <rfalNfcWorker>
    switch( state )
 8012d00:	4ec3      	ldr	r6, [pc, #780]	@ (8013010 <demoCycle+0x318>)
 8012d02:	7834      	ldrb	r4, [r6, #0]
 8012d04:	2c01      	cmp	r4, #1
 8012d06:	d003      	beq.n	8012d10 <demoCycle+0x18>
 8012d08:	2c02      	cmp	r4, #2
 8012d0a:	d02e      	beq.n	8012d6a <demoCycle+0x72>
}
 8012d0c:	b033      	add	sp, #204	@ 0xcc
 8012d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8012d10:	2200      	movs	r2, #0
 8012d12:	2104      	movs	r1, #4
 8012d14:	48bf      	ldr	r0, [pc, #764]	@ (8013014 <demoCycle+0x31c>)
 8012d16:	f7f4 fbeb 	bl	80074f0 <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	2102      	movs	r1, #2
 8012d1e:	48bd      	ldr	r0, [pc, #756]	@ (8013014 <demoCycle+0x31c>)
 8012d20:	f7f4 fbe6 	bl	80074f0 <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8012d24:	2200      	movs	r2, #0
 8012d26:	0021      	movs	r1, r4
 8012d28:	48ba      	ldr	r0, [pc, #744]	@ (8013014 <demoCycle+0x31c>)
 8012d2a:	f7f4 fbe1 	bl	80074f0 <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8012d2e:	2180      	movs	r1, #128	@ 0x80
 8012d30:	2200      	movs	r2, #0
 8012d32:	48b8      	ldr	r0, [pc, #736]	@ (8013014 <demoCycle+0x31c>)
 8012d34:	00c9      	lsls	r1, r1, #3
 8012d36:	f7f4 fbdb 	bl	80074f0 <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8012d3a:	2180      	movs	r1, #128	@ 0x80
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	48b5      	ldr	r0, [pc, #724]	@ (8013014 <demoCycle+0x31c>)
 8012d40:	0109      	lsls	r1, r1, #4
 8012d42:	f7f4 fbd5 	bl	80074f0 <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8012d46:	2180      	movs	r1, #128	@ 0x80
 8012d48:	2200      	movs	r2, #0
 8012d4a:	0149      	lsls	r1, r1, #5
 8012d4c:	48b1      	ldr	r0, [pc, #708]	@ (8013014 <demoCycle+0x31c>)
 8012d4e:	f7f4 fbcf 	bl	80074f0 <HAL_GPIO_WritePin>
          rfalNfcDeactivate( RFAL_NFC_DEACTIVATE_IDLE );
 8012d52:	2000      	movs	r0, #0
 8012d54:	f7fa f88a 	bl	800ce6c <rfalNfcDeactivate>
          rfalNfcDiscover( &discParam );
 8012d58:	48af      	ldr	r0, [pc, #700]	@ (8013018 <demoCycle+0x320>)
 8012d5a:	f7fa f82f 	bl	800cdbc <rfalNfcDiscover>
          multiSel = false;
 8012d5e:	2200      	movs	r2, #0
 8012d60:	4bae      	ldr	r3, [pc, #696]	@ (801301c <demoCycle+0x324>)
 8012d62:	701a      	strb	r2, [r3, #0]
          state    = DEMO_ST_DISCOVERY;
 8012d64:	2302      	movs	r3, #2
                state = DEMO_ST_START_DISCOVERY;
 8012d66:	7033      	strb	r3, [r6, #0]
}
 8012d68:	e7d0      	b.n	8012d0c <demoCycle+0x14>
            if( rfalNfcIsDevActivated( rfalNfcGetState() ) )
 8012d6a:	f7fa f8c1 	bl	800cef0 <rfalNfcGetState>
 8012d6e:	281d      	cmp	r0, #29
 8012d70:	d9cc      	bls.n	8012d0c <demoCycle+0x14>
 8012d72:	f7fa f8bd 	bl	800cef0 <rfalNfcGetState>
 8012d76:	2821      	cmp	r0, #33	@ 0x21
 8012d78:	d8c8      	bhi.n	8012d0c <demoCycle+0x14>
                rfalNfcGetActiveDevice( &nfcDevice );
 8012d7a:	4ca9      	ldr	r4, [pc, #676]	@ (8013020 <demoCycle+0x328>)
 8012d7c:	0020      	movs	r0, r4
 8012d7e:	f7fa f8d5 	bl	800cf2c <rfalNfcGetActiveDevice>
                switch( nfcDevice->type )
 8012d82:	6823      	ldr	r3, [r4, #0]
 8012d84:	7818      	ldrb	r0, [r3, #0]
 8012d86:	280f      	cmp	r0, #15
 8012d88:	d852      	bhi.n	8012e30 <demoCycle+0x138>
 8012d8a:	f7ed f9e3 	bl	8000154 <__gnu_thumb1_case_uhi>
 8012d8e:	0010      	.short	0x0010
 8012d90:	007e006b 	.word	0x007e006b
 8012d94:	010000ca 	.word	0x010000ca
 8012d98:	0051010c 	.word	0x0051010c
 8012d9c:	00510051 	.word	0x00510051
 8012da0:	011c0051 	.word	0x011c0051
 8012da4:	011c0051 	.word	0x011c0051
 8012da8:	00510051 	.word	0x00510051
 8012dac:	010c      	.short	0x010c
                        platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8012dae:	2201      	movs	r2, #1
 8012db0:	2104      	movs	r1, #4
 8012db2:	4898      	ldr	r0, [pc, #608]	@ (8013014 <demoCycle+0x31c>)
 8012db4:	f7f4 fb9c 	bl	80074f0 <HAL_GPIO_WritePin>
                        switch( nfcDevice->dev.nfca.type )
 8012db8:	6823      	ldr	r3, [r4, #0]
 8012dba:	785a      	ldrb	r2, [r3, #1]
 8012dbc:	7f19      	ldrb	r1, [r3, #28]
 8012dbe:	2a20      	cmp	r2, #32
 8012dc0:	d045      	beq.n	8012e4e <demoCycle+0x156>
 8012dc2:	d81c      	bhi.n	8012dfe <demoCycle+0x106>
 8012dc4:	2a01      	cmp	r2, #1
 8012dc6:	d02b      	beq.n	8012e20 <demoCycle+0x128>
                                platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8012dc8:	6998      	ldr	r0, [r3, #24]
 8012dca:	f000 f9a7 	bl	801311c <hex2Str>
 8012dce:	4b95      	ldr	r3, [pc, #596]	@ (8013024 <demoCycle+0x32c>)
 8012dd0:	0001      	movs	r1, r0
 8012dd2:	0018      	movs	r0, r3
 8012dd4:	f000 f988 	bl	80130e8 <logUsart>
    err = rfalT2TPollerRead(blockNum, rxBuf, sizeof(rxBuf), &rcvLen);
 8012dd8:	2210      	movs	r2, #16
 8012dda:	2000      	movs	r0, #0
 8012ddc:	ab08      	add	r3, sp, #32
 8012dde:	a90c      	add	r1, sp, #48	@ 0x30
 8012de0:	f7fd ff38 	bl	8010c54 <rfalT2TPollerRead>
    platformLog(" Read Block: %s %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK Data:", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxBuf, RFAL_T2T_READ_DATA_LEN));
 8012de4:	2800      	cmp	r0, #0
 8012de6:	d000      	beq.n	8012dea <demoCycle+0xf2>
 8012de8:	e0ce      	b.n	8012f88 <demoCycle+0x290>
 8012dea:	2110      	movs	r1, #16
 8012dec:	a80c      	add	r0, sp, #48	@ 0x30
    platformLog(" Read Block: %s %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK Data:", (err != RFAL_ERR_NONE) ? "" : hex2Str( &rxBuf[1], DEMO_NFCV_BLOCK_LEN));
 8012dee:	f000 f995 	bl	801311c <hex2Str>
 8012df2:	0002      	movs	r2, r0
 8012df4:	498c      	ldr	r1, [pc, #560]	@ (8013028 <demoCycle+0x330>)
 8012df6:	488d      	ldr	r0, [pc, #564]	@ (801302c <demoCycle+0x334>)
 8012df8:	f000 f976 	bl	80130e8 <logUsart>
                        break;
 8012dfc:	e018      	b.n	8012e30 <demoCycle+0x138>
                        switch( nfcDevice->dev.nfca.type )
 8012dfe:	2020      	movs	r0, #32
 8012e00:	4382      	bics	r2, r0
 8012e02:	2a40      	cmp	r2, #64	@ 0x40
 8012e04:	d1e0      	bne.n	8012dc8 <demoCycle+0xd0>
                                platformLog("NFCA Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8012e06:	6998      	ldr	r0, [r3, #24]
 8012e08:	f000 f988 	bl	801311c <hex2Str>
 8012e0c:	4b88      	ldr	r3, [pc, #544]	@ (8013030 <demoCycle+0x338>)
 8012e0e:	0001      	movs	r1, r0
 8012e10:	0018      	movs	r0, r3
 8012e12:	f000 f969 	bl	80130e8 <logUsart>
                        demoP2P( nfcDevice );
 8012e16:	6823      	ldr	r3, [r4, #0]
 8012e18:	7818      	ldrb	r0, [r3, #0]
 8012e1a:	f7ff ff13 	bl	8012c44 <demoP2P.isra.0>
                        break;
 8012e1e:	e007      	b.n	8012e30 <demoCycle+0x138>
                                platformLog("ISO14443A/Topaz (NFC-A T1T) TAG found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8012e20:	6998      	ldr	r0, [r3, #24]
 8012e22:	f000 f97b 	bl	801311c <hex2Str>
 8012e26:	4b83      	ldr	r3, [pc, #524]	@ (8013034 <demoCycle+0x33c>)
 8012e28:	0001      	movs	r1, r0
 8012e2a:	0018      	movs	r0, r3
 8012e2c:	f000 f95c 	bl	80130e8 <logUsart>
                rfalNfcDeactivate( RFAL_NFC_DEACTIVATE_IDLE );
 8012e30:	2000      	movs	r0, #0
 8012e32:	f7fa f81b 	bl	800ce6c <rfalNfcDeactivate>
                switch( nfcDevice->type )
 8012e36:	22fd      	movs	r2, #253	@ 0xfd
 8012e38:	6823      	ldr	r3, [r4, #0]
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	3b0a      	subs	r3, #10
 8012e3e:	4213      	tst	r3, r2
 8012e40:	d003      	beq.n	8012e4a <demoCycle+0x152>
                        platformDelay(500); /* Delay before re-starting polling loop to not flood the UART log with re-discovered tags */
 8012e42:	20fa      	movs	r0, #250	@ 0xfa
 8012e44:	0040      	lsls	r0, r0, #1
 8012e46:	f7f4 f915 	bl	8007074 <HAL_Delay>
                state = DEMO_ST_START_DISCOVERY;
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	e78b      	b.n	8012d66 <demoCycle+0x6e>
                                platformLog("NFCA Passive ISO-DEP device found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8012e4e:	6998      	ldr	r0, [r3, #24]
 8012e50:	f000 f964 	bl	801311c <hex2Str>
 8012e54:	4b78      	ldr	r3, [pc, #480]	@ (8013038 <demoCycle+0x340>)
 8012e56:	0001      	movs	r1, r0
 8012e58:	0018      	movs	r0, r3
 8012e5a:	f000 f945 	bl	80130e8 <logUsart>
                            demoAPDU();
 8012e5e:	f7ff fe8d 	bl	8012b7c <demoAPDU>
 8012e62:	e7e5      	b.n	8012e30 <demoCycle+0x138>
                        platformLog("ISO14443B/NFC-B card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8012e64:	7f19      	ldrb	r1, [r3, #28]
 8012e66:	6998      	ldr	r0, [r3, #24]
 8012e68:	f000 f958 	bl	801311c <hex2Str>
 8012e6c:	4b73      	ldr	r3, [pc, #460]	@ (801303c <demoCycle+0x344>)
 8012e6e:	0001      	movs	r1, r0
 8012e70:	0018      	movs	r0, r3
 8012e72:	f000 f939 	bl	80130e8 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8012e76:	2201      	movs	r2, #1
 8012e78:	2102      	movs	r1, #2
 8012e7a:	4866      	ldr	r0, [pc, #408]	@ (8013014 <demoCycle+0x31c>)
 8012e7c:	f7f4 fb38 	bl	80074f0 <HAL_GPIO_WritePin>
                        if( rfalNfcbIsIsoDepSupported( &nfcDevice->dev.nfcb ) )
 8012e80:	6823      	ldr	r3, [r4, #0]
 8012e82:	7b1b      	ldrb	r3, [r3, #12]
 8012e84:	07db      	lsls	r3, r3, #31
 8012e86:	d5d3      	bpl.n	8012e30 <demoCycle+0x138>
 8012e88:	e7e9      	b.n	8012e5e <demoCycle+0x166>
                        if( rfalNfcfIsNfcDepSupported( &nfcDevice->dev.nfcf ) )
 8012e8a:	78da      	ldrb	r2, [r3, #3]
                        platformLog("ISO14443B/NFC-B card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8012e8c:	6998      	ldr	r0, [r3, #24]
                            platformLog("NFCF Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8012e8e:	7f19      	ldrb	r1, [r3, #28]
                        if( rfalNfcfIsNfcDepSupported( &nfcDevice->dev.nfcf ) )
 8012e90:	2a01      	cmp	r2, #1
 8012e92:	d113      	bne.n	8012ebc <demoCycle+0x1c4>
 8012e94:	791b      	ldrb	r3, [r3, #4]
 8012e96:	2bfe      	cmp	r3, #254	@ 0xfe
 8012e98:	d110      	bne.n	8012ebc <demoCycle+0x1c4>
                            platformLog("NFCF Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 8012e9a:	f000 f93f 	bl	801311c <hex2Str>
 8012e9e:	4b68      	ldr	r3, [pc, #416]	@ (8013040 <demoCycle+0x348>)
 8012ea0:	0001      	movs	r1, r0
 8012ea2:	0018      	movs	r0, r3
 8012ea4:	f000 f920 	bl	80130e8 <logUsart>
                            demoP2P( nfcDevice );
 8012ea8:	6823      	ldr	r3, [r4, #0]
 8012eaa:	7818      	ldrb	r0, [r3, #0]
 8012eac:	f7ff feca 	bl	8012c44 <demoP2P.isra.0>
                        platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8012eb0:	2201      	movs	r2, #1
 8012eb2:	0011      	movs	r1, r2
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8012eb4:	4857      	ldr	r0, [pc, #348]	@ (8013014 <demoCycle+0x31c>)
 8012eb6:	f7f4 fb1b 	bl	80074f0 <HAL_GPIO_WritePin>
                        break;
 8012eba:	e7b9      	b.n	8012e30 <demoCycle+0x138>
                            platformLog("Felica/NFC-F card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 8012ebc:	f000 f92e 	bl	801311c <hex2Str>
 8012ec0:	4b60      	ldr	r3, [pc, #384]	@ (8013044 <demoCycle+0x34c>)
 8012ec2:	0001      	movs	r1, r0
 8012ec4:	0018      	movs	r0, r3
 8012ec6:	f000 f90f 	bl	80130e8 <logUsart>
    rfalNfcfServ               srv = RFAL_NFCF_SERVICECODE_RDWR;
 8012eca:	230a      	movs	r3, #10
 8012ecc:	aa02      	add	r2, sp, #8
 8012ece:	189b      	adds	r3, r3, r2
 8012ed0:	2209      	movs	r2, #9
    servBlock.numServ   = 1;                            /* Only one Service to be used           */
 8012ed2:	a902      	add	r1, sp, #8
    rfalNfcfServ               srv = RFAL_NFCF_SERVICECODE_RDWR;
 8012ed4:	801a      	strh	r2, [r3, #0]
    servBlock.numServ   = 1;                            /* Only one Service to be used           */
 8012ed6:	3a08      	subs	r2, #8
 8012ed8:	760a      	strb	r2, [r1, #24]
    servBlock.servList  = &srv;                         /* Service Code: NDEF is Read/Writeable  */
 8012eda:	9309      	str	r3, [sp, #36]	@ 0x24
    servBlock.numBlock  = 1;                            /* Only one block to be used             */
 8012edc:	000b      	movs	r3, r1
 8012ede:	2120      	movs	r1, #32
 8012ee0:	185b      	adds	r3, r3, r1
 8012ee2:	701a      	strb	r2, [r3, #0]
                            demoNfcf( &nfcDevice->dev.nfcf );
 8012ee4:	6820      	ldr	r0, [r4, #0]
    servBlock.blockList = bl;
 8012ee6:	ab05      	add	r3, sp, #20
    bl[0].conf     = RFAL_NFCF_BLOCKLISTELEM_LEN_BIT;   /* Two-byte Block List Element           */
 8012ee8:	3160      	adds	r1, #96	@ 0x60
 8012eea:	7019      	strb	r1, [r3, #0]
    bl[0].blockNum = 0x0001;                            /* Block: NDEF Data                      */
 8012eec:	805a      	strh	r2, [r3, #2]
    servBlock.blockList = bl;
 8012eee:	930b      	str	r3, [sp, #44]	@ 0x2c
    err = rfalNfcfPollerCheck( nfcfDev->sensfRes.NFCID2, &servBlock, buf, sizeof(buf), &rcvLen);
 8012ef0:	ab04      	add	r3, sp, #16
 8012ef2:	9300      	str	r3, [sp, #0]
 8012ef4:	3003      	adds	r0, #3
 8012ef6:	2339      	movs	r3, #57	@ 0x39
 8012ef8:	aa0c      	add	r2, sp, #48	@ 0x30
 8012efa:	a908      	add	r1, sp, #32
 8012efc:	f7fd faa2 	bl	8010444 <rfalNfcfPollerCheck>
    platformLog(" Check Block: %s Data:  %s \r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( &buf[1], RFAL_NFCF_BLOCK_LEN) );
 8012f00:	2800      	cmp	r0, #0
 8012f02:	d10b      	bne.n	8012f1c <demoCycle+0x224>
 8012f04:	ab02      	add	r3, sp, #8
 8012f06:	3029      	adds	r0, #41	@ 0x29
 8012f08:	2110      	movs	r1, #16
 8012f0a:	18c0      	adds	r0, r0, r3
 8012f0c:	f000 f906 	bl	801311c <hex2Str>
 8012f10:	0002      	movs	r2, r0
 8012f12:	494d      	ldr	r1, [pc, #308]	@ (8013048 <demoCycle+0x350>)
 8012f14:	484d      	ldr	r0, [pc, #308]	@ (801304c <demoCycle+0x354>)
 8012f16:	f000 f8e7 	bl	80130e8 <logUsart>
}
 8012f1a:	e7c9      	b.n	8012eb0 <demoCycle+0x1b8>
    platformLog(" Check Block: %s Data:  %s \r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( &buf[1], RFAL_NFCF_BLOCK_LEN) );
 8012f1c:	494c      	ldr	r1, [pc, #304]	@ (8013050 <demoCycle+0x358>)
 8012f1e:	4a4d      	ldr	r2, [pc, #308]	@ (8013054 <demoCycle+0x35c>)
 8012f20:	e7f8      	b.n	8012f14 <demoCycle+0x21c>
                            ST_MEMCPY( devUID, nfcDevice->nfcid, nfcDevice->nfcidLen );   /* Copy the UID into local var */
 8012f22:	7f1a      	ldrb	r2, [r3, #28]
 8012f24:	6999      	ldr	r1, [r3, #24]
 8012f26:	a80c      	add	r0, sp, #48	@ 0x30
 8012f28:	f000 f9f8 	bl	801331c <memcpy>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 8012f2c:	ab0c      	add	r3, sp, #48	@ 0x30
 8012f2e:	001a      	movs	r2, r3
 8012f30:	2105      	movs	r1, #5
 8012f32:	3901      	subs	r1, #1
 8012f34:	3b01      	subs	r3, #1
 8012f36:	2900      	cmp	r1, #0
 8012f38:	d120      	bne.n	8012f7c <demoCycle+0x284>
                            platformLog("ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 8012f3a:	3108      	adds	r1, #8
 8012f3c:	a80c      	add	r0, sp, #48	@ 0x30
 8012f3e:	f000 f8ed 	bl	801311c <hex2Str>
 8012f42:	4b45      	ldr	r3, [pc, #276]	@ (8013058 <demoCycle+0x360>)
 8012f44:	0001      	movs	r1, r0
 8012f46:	0018      	movs	r0, r3
 8012f48:	f000 f8ce 	bl	80130e8 <logUsart>
                            platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8012f4c:	2180      	movs	r1, #128	@ 0x80
 8012f4e:	2201      	movs	r2, #1
 8012f50:	4830      	ldr	r0, [pc, #192]	@ (8013014 <demoCycle+0x31c>)
 8012f52:	00c9      	lsls	r1, r1, #3
 8012f54:	f7f4 facc 	bl	80074f0 <HAL_GPIO_WritePin>
    err = rfalNfcvPollerReadSingleBlock(reqFlag, uid, blockNum, rxBuf, sizeof(rxBuf), &rcvLen);
 8012f58:	ab05      	add	r3, sp, #20
    uid     = nfcvDev->InvRes.UID;
 8012f5a:	6821      	ldr	r1, [r4, #0]
    err = rfalNfcvPollerReadSingleBlock(reqFlag, uid, blockNum, rxBuf, sizeof(rxBuf), &rcvLen);
 8012f5c:	9301      	str	r3, [sp, #4]
 8012f5e:	2307      	movs	r3, #7
 8012f60:	2201      	movs	r2, #1
 8012f62:	9300      	str	r3, [sp, #0]
 8012f64:	2002      	movs	r0, #2
    uid     = nfcvDev->InvRes.UID;
 8012f66:	3103      	adds	r1, #3
    err = rfalNfcvPollerReadSingleBlock(reqFlag, uid, blockNum, rxBuf, sizeof(rxBuf), &rcvLen);
 8012f68:	ab08      	add	r3, sp, #32
 8012f6a:	f7fd fce3 	bl	8010934 <rfalNfcvPollerReadSingleBlock>
    platformLog(" Read Block: %s %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK Data:", (err != RFAL_ERR_NONE) ? "" : hex2Str( &rxBuf[1], DEMO_NFCV_BLOCK_LEN));
 8012f6e:	2800      	cmp	r0, #0
 8012f70:	d10a      	bne.n	8012f88 <demoCycle+0x290>
 8012f72:	3019      	adds	r0, #25
 8012f74:	ab02      	add	r3, sp, #8
 8012f76:	2104      	movs	r1, #4
 8012f78:	18c0      	adds	r0, r0, r3
 8012f7a:	e738      	b.n	8012dee <demoCycle+0xf6>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 8012f7c:	7810      	ldrb	r0, [r2, #0]
 8012f7e:	7a1d      	ldrb	r5, [r3, #8]
 8012f80:	7015      	strb	r5, [r2, #0]
 8012f82:	7218      	strb	r0, [r3, #8]
 8012f84:	3201      	adds	r2, #1
 8012f86:	e7d4      	b.n	8012f32 <demoCycle+0x23a>
    platformLog(" Read Block: %s %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK Data:", (err != RFAL_ERR_NONE) ? "" : hex2Str( &rxBuf[1], DEMO_NFCV_BLOCK_LEN));
 8012f88:	4931      	ldr	r1, [pc, #196]	@ (8013050 <demoCycle+0x358>)
 8012f8a:	4a32      	ldr	r2, [pc, #200]	@ (8013054 <demoCycle+0x35c>)
 8012f8c:	e733      	b.n	8012df6 <demoCycle+0xfe>
                        platformLog("ST25TB card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 8012f8e:	7f19      	ldrb	r1, [r3, #28]
 8012f90:	6998      	ldr	r0, [r3, #24]
 8012f92:	f000 f8c3 	bl	801311c <hex2Str>
 8012f96:	4b31      	ldr	r3, [pc, #196]	@ (801305c <demoCycle+0x364>)
 8012f98:	0001      	movs	r1, r0
 8012f9a:	0018      	movs	r0, r3
 8012f9c:	f000 f8a4 	bl	80130e8 <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	2102      	movs	r1, #2
 8012fa4:	e786      	b.n	8012eb4 <demoCycle+0x1bc>
                        platformLog("NFC Active P2P device found. NFCID3: %s\r\n", hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 8012fa6:	7f19      	ldrb	r1, [r3, #28]
 8012fa8:	6998      	ldr	r0, [r3, #24]
 8012faa:	f000 f8b7 	bl	801311c <hex2Str>
 8012fae:	4b2c      	ldr	r3, [pc, #176]	@ (8013060 <demoCycle+0x368>)
 8012fb0:	0001      	movs	r1, r0
 8012fb2:	0018      	movs	r0, r3
 8012fb4:	f000 f898 	bl	80130e8 <logUsart>
                        platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8012fb8:	2180      	movs	r1, #128	@ 0x80
 8012fba:	2201      	movs	r2, #1
 8012fbc:	4815      	ldr	r0, [pc, #84]	@ (8013014 <demoCycle+0x31c>)
 8012fbe:	0109      	lsls	r1, r1, #4
 8012fc0:	f7f4 fa96 	bl	80074f0 <HAL_GPIO_WritePin>
 8012fc4:	e727      	b.n	8012e16 <demoCycle+0x11e>
                        platformLog("Activated in CE %s mode.\r\n", (nfcDevice->type == RFAL_NFC_POLL_TYPE_NFCA) ? "NFC-A" : "NFC-F");
 8012fc6:	4927      	ldr	r1, [pc, #156]	@ (8013064 <demoCycle+0x36c>)
 8012fc8:	280a      	cmp	r0, #10
 8012fca:	d100      	bne.n	8012fce <demoCycle+0x2d6>
 8012fcc:	4926      	ldr	r1, [pc, #152]	@ (8013068 <demoCycle+0x370>)
 8012fce:	4827      	ldr	r0, [pc, #156]	@ (801306c <demoCycle+0x374>)
 8012fd0:	f000 f88a 	bl	80130e8 <logUsart>
                        platformLedOn( ((nfcDevice->type == RFAL_NFC_POLL_TYPE_NFCA) ? PLATFORM_LED_A_PORT : PLATFORM_LED_F_PORT),
 8012fd4:	6823      	ldr	r3, [r4, #0]
 8012fd6:	2101      	movs	r1, #1
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	2b0a      	cmp	r3, #10
 8012fdc:	d100      	bne.n	8012fe0 <demoCycle+0x2e8>
 8012fde:	3103      	adds	r1, #3
    ReturnCode err = RFAL_ERR_NONE;
 8012fe0:	2500      	movs	r5, #0
        switch( rfalNfcGetState() )
 8012fe2:	2702      	movs	r7, #2
                        platformLedOn( ((nfcDevice->type == RFAL_NFC_POLL_TYPE_NFCA) ? PLATFORM_LED_A_PORT : PLATFORM_LED_F_PORT),
 8012fe4:	2201      	movs	r2, #1
 8012fe6:	480b      	ldr	r0, [pc, #44]	@ (8013014 <demoCycle+0x31c>)
 8012fe8:	f7f4 fa82 	bl	80074f0 <HAL_GPIO_WritePin>
                        demoCE( nfcDevice );
 8012fec:	6823      	ldr	r3, [r4, #0]
 8012fee:	9303      	str	r3, [sp, #12]
        rfalNfcWorker();
 8012ff0:	f7fa f8da 	bl	800d1a8 <rfalNfcWorker>
        switch( rfalNfcGetState() )
 8012ff4:	f7f9 ff7c 	bl	800cef0 <rfalNfcGetState>
 8012ff8:	281e      	cmp	r0, #30
 8012ffa:	d051      	beq.n	80130a0 <demoCycle+0x3a8>
 8012ffc:	d838      	bhi.n	8013070 <demoCycle+0x378>
 8012ffe:	2802      	cmp	r0, #2
 8013000:	d100      	bne.n	8013004 <demoCycle+0x30c>
 8013002:	e715      	b.n	8012e30 <demoCycle+0x138>
    while( (err == RFAL_ERR_NONE) || (err == RFAL_ERR_SLEEP_REQ) );
 8013004:	2d00      	cmp	r5, #0
 8013006:	d0f3      	beq.n	8012ff0 <demoCycle+0x2f8>
 8013008:	2d20      	cmp	r5, #32
 801300a:	d0f1      	beq.n	8012ff0 <demoCycle+0x2f8>
 801300c:	e710      	b.n	8012e30 <demoCycle+0x138>
 801300e:	46c0      	nop			@ (mov r8, r8)
 8013010:	20003185 	.word	0x20003185
 8013014:	48000400 	.word	0x48000400
 8013018:	20003188 	.word	0x20003188
 801301c:	20003184 	.word	0x20003184
 8013020:	20003180 	.word	0x20003180
 8013024:	08013d65 	.word	0x08013d65
 8013028:	0801401f 	.word	0x0801401f
 801302c:	080140bd 	.word	0x080140bd
 8013030:	08014092 	.word	0x08014092
 8013034:	08014034 	.word	0x08014034
 8013038:	08014065 	.word	0x08014065
 801303c:	080140d2 	.word	0x080140d2
 8013040:	080140f8 	.word	0x080140f8
 8013044:	08014123 	.word	0x08014123
 8013048:	08013f25 	.word	0x08013f25
 801304c:	08014146 	.word	0x08014146
 8013050:	08013f28 	.word	0x08013f28
 8013054:	08013f1e 	.word	0x08013f1e
 8013058:	08014164 	.word	0x08014164
 801305c:	08014189 	.word	0x08014189
 8013060:	080141a6 	.word	0x080141a6
 8013064:	0801402e 	.word	0x0801402e
 8013068:	08014028 	.word	0x08014028
 801306c:	080141d0 	.word	0x080141d0
        switch( rfalNfcGetState() )
 8013070:	381f      	subs	r0, #31
 8013072:	43b8      	bics	r0, r7
 8013074:	b2c0      	uxtb	r0, r0
 8013076:	2800      	cmp	r0, #0
 8013078:	d1c4      	bne.n	8013004 <demoCycle+0x30c>
                txLen = ( (nfcDev->type == RFAL_NFC_POLL_TYPE_NFCA) ? demoCeT4T( rxData, *rcvLen, txBuf, sizeof(txBuf) ) : rfalConvBytesToBits( demoCeT3T( rxData, rfalConvBitsToBytes(*rcvLen), txBuf, sizeof(txBuf) ) ) );
 801307a:	9b08      	ldr	r3, [sp, #32]
 801307c:	9805      	ldr	r0, [sp, #20]
 801307e:	8819      	ldrh	r1, [r3, #0]
 8013080:	9b03      	ldr	r3, [sp, #12]
 8013082:	781b      	ldrb	r3, [r3, #0]
 8013084:	2b0a      	cmp	r3, #10
 8013086:	d114      	bne.n	80130b2 <demoCycle+0x3ba>
 8013088:	338c      	adds	r3, #140	@ 0x8c
 801308a:	aa0c      	add	r2, sp, #48	@ 0x30
 801308c:	f7ff fbba 	bl	8012804 <demoCeT4T>
 8013090:	0001      	movs	r1, r0
                err   = demoTransceiveBlocking( txBuf, txLen, &rxData, &rcvLen, RFAL_FWT_NONE );
 8013092:	2301      	movs	r3, #1
 8013094:	425b      	negs	r3, r3
 8013096:	9300      	str	r3, [sp, #0]
 8013098:	aa05      	add	r2, sp, #20
 801309a:	ab08      	add	r3, sp, #32
 801309c:	a80c      	add	r0, sp, #48	@ 0x30
 801309e:	e004      	b.n	80130aa <demoCycle+0x3b2>
                err = demoTransceiveBlocking( NULL, 0, &rxData, &rcvLen, 0);
 80130a0:	2000      	movs	r0, #0
 80130a2:	0001      	movs	r1, r0
 80130a4:	9000      	str	r0, [sp, #0]
 80130a6:	ab08      	add	r3, sp, #32
 80130a8:	aa05      	add	r2, sp, #20
                err   = demoTransceiveBlocking( txBuf, txLen, &rxData, &rcvLen, RFAL_FWT_NONE );
 80130aa:	f7ff fd59 	bl	8012b60 <demoTransceiveBlocking>
 80130ae:	0005      	movs	r5, r0
                break;
 80130b0:	e7a8      	b.n	8013004 <demoCycle+0x30c>
                txLen = ( (nfcDev->type == RFAL_NFC_POLL_TYPE_NFCA) ? demoCeT4T( rxData, *rcvLen, txBuf, sizeof(txBuf) ) : rfalConvBytesToBits( demoCeT3T( rxData, rfalConvBitsToBytes(*rcvLen), txBuf, sizeof(txBuf) ) ) );
 80130b2:	3107      	adds	r1, #7
 80130b4:	08c9      	lsrs	r1, r1, #3
 80130b6:	2396      	movs	r3, #150	@ 0x96
 80130b8:	aa0c      	add	r2, sp, #48	@ 0x30
 80130ba:	f7ff fc71 	bl	80129a0 <demoCeT3T>
 80130be:	00c1      	lsls	r1, r0, #3
 80130c0:	b289      	uxth	r1, r1
 80130c2:	e7e6      	b.n	8013092 <demoCycle+0x39a>

080130c4 <logUsartTx>:
  * @retval others             : HAL status
  *****************************************************************************
  */
uint8_t logUsartTx(uint8_t *data, uint16_t dataLen)
{
  if(pLogUsart == 0)
 80130c4:	4b07      	ldr	r3, [pc, #28]	@ (80130e4 <logUsartTx+0x20>)
{
 80130c6:	b570      	push	{r4, r5, r6, lr}
  if(pLogUsart == 0)
 80130c8:	681d      	ldr	r5, [r3, #0]
{
 80130ca:	0004      	movs	r4, r0
 80130cc:	000a      	movs	r2, r1
    return ERR_INVALID_HANDLE;
 80130ce:	2026      	movs	r0, #38	@ 0x26
  if(pLogUsart == 0)
 80130d0:	2d00      	cmp	r5, #0
 80130d2:	d005      	beq.n	80130e0 <logUsartTx+0x1c>
 #if (USE_LOGGER == LOGGER_ON)
  {
    return HAL_UART_Transmit(pLogUsart, data, dataLen, USART_TIMEOUT);
 80130d4:	23fa      	movs	r3, #250	@ 0xfa
 80130d6:	0021      	movs	r1, r4
 80130d8:	0028      	movs	r0, r5
 80130da:	009b      	lsls	r3, r3, #2
 80130dc:	f7f7 fa16 	bl	800a50c <HAL_UART_Transmit>
  #else
  {
    return 0;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 80130e0:	bd70      	pop	{r4, r5, r6, pc}
 80130e2:	46c0      	nop			@ (mov r8, r8)
 80130e4:	20000a08 	.word	0x20000a08

080130e8 <logUsart>:
  *
  * @return Number of data sent
  *****************************************************************************
  */
int logUsart(const char* format, ...)
{
 80130e8:	b40f      	push	{r0, r1, r2, r3}
  {
    #define LOG_BUFFER_SIZE 256
    char buf[LOG_BUFFER_SIZE];
    va_list argptr;
    va_start(argptr, format);
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 80130ea:	2180      	movs	r1, #128	@ 0x80
{
 80130ec:	b510      	push	{r4, lr}
 80130ee:	b0c2      	sub	sp, #264	@ 0x108
 80130f0:	ab44      	add	r3, sp, #272	@ 0x110
 80130f2:	cb04      	ldmia	r3!, {r2}
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 80130f4:	0049      	lsls	r1, r1, #1
 80130f6:	a802      	add	r0, sp, #8
    va_start(argptr, format);
 80130f8:	9301      	str	r3, [sp, #4]
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 80130fa:	f000 f8af 	bl	801325c <vsniprintf>
 80130fe:	0004      	movs	r4, r0
    va_end(argptr);

    /* */
    logUsartTx((uint8_t*)buf, strlen(buf));
 8013100:	a802      	add	r0, sp, #8
 8013102:	f7ed f801 	bl	8000108 <strlen>
 8013106:	b281      	uxth	r1, r0
 8013108:	a802      	add	r0, sp, #8
 801310a:	f7ff ffdb 	bl	80130c4 <logUsartTx>
  #else
  {
    return 0;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 801310e:	0020      	movs	r0, r4
 8013110:	b042      	add	sp, #264	@ 0x108
 8013112:	bc10      	pop	{r4}
 8013114:	bc08      	pop	{r3}
 8013116:	b004      	add	sp, #16
 8013118:	4718      	bx	r3
	...

0801311c <hex2Str>:
  *
  * @return pointer to converted data
  *****************************************************************************
  */
char* hex2Str(unsigned char * data, size_t dataLen)
{
 801311c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  #if (USE_LOGGER == LOGGER_ON)
  {
    unsigned char * pin = data;
    const char * hex = "0123456789ABCDEF";
    char * pout = hexStr[hexStrIdx];
 801311e:	4b19      	ldr	r3, [pc, #100]	@ (8013184 <hex2Str+0x68>)
 8013120:	4a19      	ldr	r2, [pc, #100]	@ (8013188 <hex2Str+0x6c>)
 8013122:	781b      	ldrb	r3, [r3, #0]
{
 8013124:	0004      	movs	r4, r0
    char * pout = hexStr[hexStrIdx];
 8013126:	01d8      	lsls	r0, r3, #7
 8013128:	9301      	str	r3, [sp, #4]
 801312a:	1880      	adds	r0, r0, r2
    if( dataLen > (MAX_HEX_STR_LENGTH/2) )
    {
      dataLen = (MAX_HEX_STR_LENGTH/2);
    }

    if(dataLen == 0)
 801312c:	2900      	cmp	r1, #0
 801312e:	d018      	beq.n	8013162 <hex2Str+0x46>
    if( dataLen > (MAX_HEX_STR_LENGTH/2) )
 8013130:	2940      	cmp	r1, #64	@ 0x40
 8013132:	d900      	bls.n	8013136 <hex2Str+0x1a>
 8013134:	2140      	movs	r1, #64	@ 0x40
    else
    {
      for(; i < dataLen - 1; ++i)
      {
          *pout++ = hex[(*pin>>4)&0xF];
          *pout++ = hex[(*pin++)&0xF];
 8013136:	270f      	movs	r7, #15
 8013138:	0005      	movs	r5, r0
    if( dataLen > (MAX_HEX_STR_LENGTH/2) )
 801313a:	2200      	movs	r2, #0
          *pout++ = hex[(*pin++)&0xF];
 801313c:	46bc      	mov	ip, r7
          *pout++ = hex[(*pin>>4)&0xF];
 801313e:	4e13      	ldr	r6, [pc, #76]	@ (801318c <hex2Str+0x70>)
      for(; i < dataLen - 1; ++i)
 8013140:	3901      	subs	r1, #1
          *pout++ = hex[(*pin>>4)&0xF];
 8013142:	5ca7      	ldrb	r7, [r4, r2]
 8013144:	093f      	lsrs	r7, r7, #4
 8013146:	5df7      	ldrb	r7, [r6, r7]
      for(; i < dataLen - 1; ++i)
 8013148:	4291      	cmp	r1, r2
 801314a:	d812      	bhi.n	8013172 <hex2Str+0x56>
 801314c:	004a      	lsls	r2, r1, #1
 801314e:	1882      	adds	r2, r0, r2
      }
      *pout++ = hex[(*pin>>4)&0xF];
 8013150:	7017      	strb	r7, [r2, #0]
      *pout++ = hex[(*pin)&0xF];
 8013152:	5c61      	ldrb	r1, [r4, r1]
 8013154:	240f      	movs	r4, #15
 8013156:	4021      	ands	r1, r4
 8013158:	5c71      	ldrb	r1, [r6, r1]
 801315a:	7051      	strb	r1, [r2, #1]
      *pout = 0;
 801315c:	2100      	movs	r1, #0
 801315e:	7091      	strb	r1, [r2, #2]
 8013160:	e000      	b.n	8013164 <hex2Str+0x48>
      pout[0] = 0;
 8013162:	7001      	strb	r1, [r0, #0]
    }

    hexStrIdx++;
    hexStrIdx %= MAX_HEX_STR;
 8013164:	2103      	movs	r1, #3
    hexStrIdx++;
 8013166:	9b01      	ldr	r3, [sp, #4]
    hexStrIdx %= MAX_HEX_STR;
 8013168:	4a06      	ldr	r2, [pc, #24]	@ (8013184 <hex2Str+0x68>)
    hexStrIdx++;
 801316a:	3301      	adds	r3, #1
    hexStrIdx %= MAX_HEX_STR;
 801316c:	400b      	ands	r3, r1
 801316e:	7013      	strb	r3, [r2, #0]
  #else
  {
    return NULL;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8013170:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
          *pout++ = hex[(*pin++)&0xF];
 8013172:	4663      	mov	r3, ip
          *pout++ = hex[(*pin>>4)&0xF];
 8013174:	702f      	strb	r7, [r5, #0]
          *pout++ = hex[(*pin++)&0xF];
 8013176:	5ca7      	ldrb	r7, [r4, r2]
 8013178:	3201      	adds	r2, #1
 801317a:	401f      	ands	r7, r3
 801317c:	5df7      	ldrb	r7, [r6, r7]
 801317e:	706f      	strb	r7, [r5, #1]
      for(; i < dataLen - 1; ++i)
 8013180:	3502      	adds	r5, #2
 8013182:	e7de      	b.n	8013142 <hex2Str+0x26>
 8013184:	2000323a 	.word	0x2000323a
 8013188:	2000323b 	.word	0x2000323b
 801318c:	080141eb 	.word	0x080141eb

08013190 <_Error_Handler>:
  */
void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8013190:	e7fe      	b.n	8013190 <_Error_Handler>
	...

08013194 <sniprintf>:
 8013194:	b40c      	push	{r2, r3}
 8013196:	b530      	push	{r4, r5, lr}
 8013198:	4b18      	ldr	r3, [pc, #96]	@ (80131fc <sniprintf+0x68>)
 801319a:	000c      	movs	r4, r1
 801319c:	681d      	ldr	r5, [r3, #0]
 801319e:	b09d      	sub	sp, #116	@ 0x74
 80131a0:	2900      	cmp	r1, #0
 80131a2:	da08      	bge.n	80131b6 <sniprintf+0x22>
 80131a4:	238b      	movs	r3, #139	@ 0x8b
 80131a6:	2001      	movs	r0, #1
 80131a8:	602b      	str	r3, [r5, #0]
 80131aa:	4240      	negs	r0, r0
 80131ac:	b01d      	add	sp, #116	@ 0x74
 80131ae:	bc30      	pop	{r4, r5}
 80131b0:	bc08      	pop	{r3}
 80131b2:	b002      	add	sp, #8
 80131b4:	4718      	bx	r3
 80131b6:	2382      	movs	r3, #130	@ 0x82
 80131b8:	466a      	mov	r2, sp
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	8293      	strh	r3, [r2, #20]
 80131be:	2300      	movs	r3, #0
 80131c0:	9002      	str	r0, [sp, #8]
 80131c2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80131c4:	9006      	str	r0, [sp, #24]
 80131c6:	4299      	cmp	r1, r3
 80131c8:	d000      	beq.n	80131cc <sniprintf+0x38>
 80131ca:	1e4b      	subs	r3, r1, #1
 80131cc:	9304      	str	r3, [sp, #16]
 80131ce:	9307      	str	r3, [sp, #28]
 80131d0:	2301      	movs	r3, #1
 80131d2:	466a      	mov	r2, sp
 80131d4:	425b      	negs	r3, r3
 80131d6:	82d3      	strh	r3, [r2, #22]
 80131d8:	0028      	movs	r0, r5
 80131da:	ab21      	add	r3, sp, #132	@ 0x84
 80131dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80131de:	a902      	add	r1, sp, #8
 80131e0:	9301      	str	r3, [sp, #4]
 80131e2:	f000 fa01 	bl	80135e8 <_svfiprintf_r>
 80131e6:	1c43      	adds	r3, r0, #1
 80131e8:	da01      	bge.n	80131ee <sniprintf+0x5a>
 80131ea:	238b      	movs	r3, #139	@ 0x8b
 80131ec:	602b      	str	r3, [r5, #0]
 80131ee:	2c00      	cmp	r4, #0
 80131f0:	d0dc      	beq.n	80131ac <sniprintf+0x18>
 80131f2:	2200      	movs	r2, #0
 80131f4:	9b02      	ldr	r3, [sp, #8]
 80131f6:	701a      	strb	r2, [r3, #0]
 80131f8:	e7d8      	b.n	80131ac <sniprintf+0x18>
 80131fa:	46c0      	nop			@ (mov r8, r8)
 80131fc:	20000a0c 	.word	0x20000a0c

08013200 <_vsniprintf_r>:
 8013200:	b530      	push	{r4, r5, lr}
 8013202:	0005      	movs	r5, r0
 8013204:	0014      	movs	r4, r2
 8013206:	0008      	movs	r0, r1
 8013208:	001a      	movs	r2, r3
 801320a:	b09b      	sub	sp, #108	@ 0x6c
 801320c:	2c00      	cmp	r4, #0
 801320e:	da05      	bge.n	801321c <_vsniprintf_r+0x1c>
 8013210:	238b      	movs	r3, #139	@ 0x8b
 8013212:	2001      	movs	r0, #1
 8013214:	602b      	str	r3, [r5, #0]
 8013216:	4240      	negs	r0, r0
 8013218:	b01b      	add	sp, #108	@ 0x6c
 801321a:	bd30      	pop	{r4, r5, pc}
 801321c:	2382      	movs	r3, #130	@ 0x82
 801321e:	4669      	mov	r1, sp
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	818b      	strh	r3, [r1, #12]
 8013224:	2100      	movs	r1, #0
 8013226:	9000      	str	r0, [sp, #0]
 8013228:	9119      	str	r1, [sp, #100]	@ 0x64
 801322a:	9004      	str	r0, [sp, #16]
 801322c:	428c      	cmp	r4, r1
 801322e:	d000      	beq.n	8013232 <_vsniprintf_r+0x32>
 8013230:	1e61      	subs	r1, r4, #1
 8013232:	2301      	movs	r3, #1
 8013234:	9102      	str	r1, [sp, #8]
 8013236:	9105      	str	r1, [sp, #20]
 8013238:	4669      	mov	r1, sp
 801323a:	425b      	negs	r3, r3
 801323c:	81cb      	strh	r3, [r1, #14]
 801323e:	0028      	movs	r0, r5
 8013240:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8013242:	f000 f9d1 	bl	80135e8 <_svfiprintf_r>
 8013246:	1c43      	adds	r3, r0, #1
 8013248:	da01      	bge.n	801324e <_vsniprintf_r+0x4e>
 801324a:	238b      	movs	r3, #139	@ 0x8b
 801324c:	602b      	str	r3, [r5, #0]
 801324e:	2c00      	cmp	r4, #0
 8013250:	d0e2      	beq.n	8013218 <_vsniprintf_r+0x18>
 8013252:	2200      	movs	r2, #0
 8013254:	9b00      	ldr	r3, [sp, #0]
 8013256:	701a      	strb	r2, [r3, #0]
 8013258:	e7de      	b.n	8013218 <_vsniprintf_r+0x18>
	...

0801325c <vsniprintf>:
 801325c:	b513      	push	{r0, r1, r4, lr}
 801325e:	4c04      	ldr	r4, [pc, #16]	@ (8013270 <vsniprintf+0x14>)
 8013260:	9300      	str	r3, [sp, #0]
 8013262:	0013      	movs	r3, r2
 8013264:	000a      	movs	r2, r1
 8013266:	0001      	movs	r1, r0
 8013268:	6820      	ldr	r0, [r4, #0]
 801326a:	f7ff ffc9 	bl	8013200 <_vsniprintf_r>
 801326e:	bd16      	pop	{r1, r2, r4, pc}
 8013270:	20000a0c 	.word	0x20000a0c

08013274 <memcmp>:
 8013274:	b530      	push	{r4, r5, lr}
 8013276:	2400      	movs	r4, #0
 8013278:	3901      	subs	r1, #1
 801327a:	42a2      	cmp	r2, r4
 801327c:	d101      	bne.n	8013282 <memcmp+0xe>
 801327e:	2000      	movs	r0, #0
 8013280:	e005      	b.n	801328e <memcmp+0x1a>
 8013282:	5d03      	ldrb	r3, [r0, r4]
 8013284:	3401      	adds	r4, #1
 8013286:	5d0d      	ldrb	r5, [r1, r4]
 8013288:	42ab      	cmp	r3, r5
 801328a:	d0f6      	beq.n	801327a <memcmp+0x6>
 801328c:	1b58      	subs	r0, r3, r5
 801328e:	bd30      	pop	{r4, r5, pc}

08013290 <memmove>:
 8013290:	b510      	push	{r4, lr}
 8013292:	4288      	cmp	r0, r1
 8013294:	d902      	bls.n	801329c <memmove+0xc>
 8013296:	188b      	adds	r3, r1, r2
 8013298:	4298      	cmp	r0, r3
 801329a:	d308      	bcc.n	80132ae <memmove+0x1e>
 801329c:	2300      	movs	r3, #0
 801329e:	429a      	cmp	r2, r3
 80132a0:	d007      	beq.n	80132b2 <memmove+0x22>
 80132a2:	5ccc      	ldrb	r4, [r1, r3]
 80132a4:	54c4      	strb	r4, [r0, r3]
 80132a6:	3301      	adds	r3, #1
 80132a8:	e7f9      	b.n	801329e <memmove+0xe>
 80132aa:	5c8b      	ldrb	r3, [r1, r2]
 80132ac:	5483      	strb	r3, [r0, r2]
 80132ae:	3a01      	subs	r2, #1
 80132b0:	d2fb      	bcs.n	80132aa <memmove+0x1a>
 80132b2:	bd10      	pop	{r4, pc}

080132b4 <memset>:
 80132b4:	0003      	movs	r3, r0
 80132b6:	1882      	adds	r2, r0, r2
 80132b8:	4293      	cmp	r3, r2
 80132ba:	d100      	bne.n	80132be <memset+0xa>
 80132bc:	4770      	bx	lr
 80132be:	7019      	strb	r1, [r3, #0]
 80132c0:	3301      	adds	r3, #1
 80132c2:	e7f9      	b.n	80132b8 <memset+0x4>

080132c4 <__errno>:
 80132c4:	4b01      	ldr	r3, [pc, #4]	@ (80132cc <__errno+0x8>)
 80132c6:	6818      	ldr	r0, [r3, #0]
 80132c8:	4770      	bx	lr
 80132ca:	46c0      	nop			@ (mov r8, r8)
 80132cc:	20000a0c 	.word	0x20000a0c

080132d0 <__libc_init_array>:
 80132d0:	b570      	push	{r4, r5, r6, lr}
 80132d2:	2600      	movs	r6, #0
 80132d4:	4c0c      	ldr	r4, [pc, #48]	@ (8013308 <__libc_init_array+0x38>)
 80132d6:	4d0d      	ldr	r5, [pc, #52]	@ (801330c <__libc_init_array+0x3c>)
 80132d8:	1b64      	subs	r4, r4, r5
 80132da:	10a4      	asrs	r4, r4, #2
 80132dc:	42a6      	cmp	r6, r4
 80132de:	d109      	bne.n	80132f4 <__libc_init_array+0x24>
 80132e0:	2600      	movs	r6, #0
 80132e2:	f000 fc51 	bl	8013b88 <_init>
 80132e6:	4c0a      	ldr	r4, [pc, #40]	@ (8013310 <__libc_init_array+0x40>)
 80132e8:	4d0a      	ldr	r5, [pc, #40]	@ (8013314 <__libc_init_array+0x44>)
 80132ea:	1b64      	subs	r4, r4, r5
 80132ec:	10a4      	asrs	r4, r4, #2
 80132ee:	42a6      	cmp	r6, r4
 80132f0:	d105      	bne.n	80132fe <__libc_init_array+0x2e>
 80132f2:	bd70      	pop	{r4, r5, r6, pc}
 80132f4:	00b3      	lsls	r3, r6, #2
 80132f6:	58eb      	ldr	r3, [r5, r3]
 80132f8:	4798      	blx	r3
 80132fa:	3601      	adds	r6, #1
 80132fc:	e7ee      	b.n	80132dc <__libc_init_array+0xc>
 80132fe:	00b3      	lsls	r3, r6, #2
 8013300:	58eb      	ldr	r3, [r5, r3]
 8013302:	4798      	blx	r3
 8013304:	3601      	adds	r6, #1
 8013306:	e7f2      	b.n	80132ee <__libc_init_array+0x1e>
 8013308:	080146b4 	.word	0x080146b4
 801330c:	080146b4 	.word	0x080146b4
 8013310:	080146b8 	.word	0x080146b8
 8013314:	080146b4 	.word	0x080146b4

08013318 <__retarget_lock_acquire_recursive>:
 8013318:	4770      	bx	lr

0801331a <__retarget_lock_release_recursive>:
 801331a:	4770      	bx	lr

0801331c <memcpy>:
 801331c:	2300      	movs	r3, #0
 801331e:	b510      	push	{r4, lr}
 8013320:	429a      	cmp	r2, r3
 8013322:	d100      	bne.n	8013326 <memcpy+0xa>
 8013324:	bd10      	pop	{r4, pc}
 8013326:	5ccc      	ldrb	r4, [r1, r3]
 8013328:	54c4      	strb	r4, [r0, r3]
 801332a:	3301      	adds	r3, #1
 801332c:	e7f8      	b.n	8013320 <memcpy+0x4>
	...

08013330 <_free_r>:
 8013330:	b570      	push	{r4, r5, r6, lr}
 8013332:	0005      	movs	r5, r0
 8013334:	1e0c      	subs	r4, r1, #0
 8013336:	d010      	beq.n	801335a <_free_r+0x2a>
 8013338:	3c04      	subs	r4, #4
 801333a:	6823      	ldr	r3, [r4, #0]
 801333c:	2b00      	cmp	r3, #0
 801333e:	da00      	bge.n	8013342 <_free_r+0x12>
 8013340:	18e4      	adds	r4, r4, r3
 8013342:	0028      	movs	r0, r5
 8013344:	f000 f8e0 	bl	8013508 <__malloc_lock>
 8013348:	4a1d      	ldr	r2, [pc, #116]	@ (80133c0 <_free_r+0x90>)
 801334a:	6813      	ldr	r3, [r2, #0]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d105      	bne.n	801335c <_free_r+0x2c>
 8013350:	6063      	str	r3, [r4, #4]
 8013352:	6014      	str	r4, [r2, #0]
 8013354:	0028      	movs	r0, r5
 8013356:	f000 f8df 	bl	8013518 <__malloc_unlock>
 801335a:	bd70      	pop	{r4, r5, r6, pc}
 801335c:	42a3      	cmp	r3, r4
 801335e:	d908      	bls.n	8013372 <_free_r+0x42>
 8013360:	6820      	ldr	r0, [r4, #0]
 8013362:	1821      	adds	r1, r4, r0
 8013364:	428b      	cmp	r3, r1
 8013366:	d1f3      	bne.n	8013350 <_free_r+0x20>
 8013368:	6819      	ldr	r1, [r3, #0]
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	1809      	adds	r1, r1, r0
 801336e:	6021      	str	r1, [r4, #0]
 8013370:	e7ee      	b.n	8013350 <_free_r+0x20>
 8013372:	001a      	movs	r2, r3
 8013374:	685b      	ldr	r3, [r3, #4]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d001      	beq.n	801337e <_free_r+0x4e>
 801337a:	42a3      	cmp	r3, r4
 801337c:	d9f9      	bls.n	8013372 <_free_r+0x42>
 801337e:	6811      	ldr	r1, [r2, #0]
 8013380:	1850      	adds	r0, r2, r1
 8013382:	42a0      	cmp	r0, r4
 8013384:	d10b      	bne.n	801339e <_free_r+0x6e>
 8013386:	6820      	ldr	r0, [r4, #0]
 8013388:	1809      	adds	r1, r1, r0
 801338a:	1850      	adds	r0, r2, r1
 801338c:	6011      	str	r1, [r2, #0]
 801338e:	4283      	cmp	r3, r0
 8013390:	d1e0      	bne.n	8013354 <_free_r+0x24>
 8013392:	6818      	ldr	r0, [r3, #0]
 8013394:	685b      	ldr	r3, [r3, #4]
 8013396:	1841      	adds	r1, r0, r1
 8013398:	6011      	str	r1, [r2, #0]
 801339a:	6053      	str	r3, [r2, #4]
 801339c:	e7da      	b.n	8013354 <_free_r+0x24>
 801339e:	42a0      	cmp	r0, r4
 80133a0:	d902      	bls.n	80133a8 <_free_r+0x78>
 80133a2:	230c      	movs	r3, #12
 80133a4:	602b      	str	r3, [r5, #0]
 80133a6:	e7d5      	b.n	8013354 <_free_r+0x24>
 80133a8:	6820      	ldr	r0, [r4, #0]
 80133aa:	1821      	adds	r1, r4, r0
 80133ac:	428b      	cmp	r3, r1
 80133ae:	d103      	bne.n	80133b8 <_free_r+0x88>
 80133b0:	6819      	ldr	r1, [r3, #0]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	1809      	adds	r1, r1, r0
 80133b6:	6021      	str	r1, [r4, #0]
 80133b8:	6063      	str	r3, [r4, #4]
 80133ba:	6054      	str	r4, [r2, #4]
 80133bc:	e7ca      	b.n	8013354 <_free_r+0x24>
 80133be:	46c0      	nop			@ (mov r8, r8)
 80133c0:	20003588 	.word	0x20003588

080133c4 <sbrk_aligned>:
 80133c4:	b570      	push	{r4, r5, r6, lr}
 80133c6:	4e0f      	ldr	r6, [pc, #60]	@ (8013404 <sbrk_aligned+0x40>)
 80133c8:	000d      	movs	r5, r1
 80133ca:	6831      	ldr	r1, [r6, #0]
 80133cc:	0004      	movs	r4, r0
 80133ce:	2900      	cmp	r1, #0
 80133d0:	d102      	bne.n	80133d8 <sbrk_aligned+0x14>
 80133d2:	f000 fb83 	bl	8013adc <_sbrk_r>
 80133d6:	6030      	str	r0, [r6, #0]
 80133d8:	0029      	movs	r1, r5
 80133da:	0020      	movs	r0, r4
 80133dc:	f000 fb7e 	bl	8013adc <_sbrk_r>
 80133e0:	1c43      	adds	r3, r0, #1
 80133e2:	d103      	bne.n	80133ec <sbrk_aligned+0x28>
 80133e4:	2501      	movs	r5, #1
 80133e6:	426d      	negs	r5, r5
 80133e8:	0028      	movs	r0, r5
 80133ea:	bd70      	pop	{r4, r5, r6, pc}
 80133ec:	2303      	movs	r3, #3
 80133ee:	1cc5      	adds	r5, r0, #3
 80133f0:	439d      	bics	r5, r3
 80133f2:	42a8      	cmp	r0, r5
 80133f4:	d0f8      	beq.n	80133e8 <sbrk_aligned+0x24>
 80133f6:	1a29      	subs	r1, r5, r0
 80133f8:	0020      	movs	r0, r4
 80133fa:	f000 fb6f 	bl	8013adc <_sbrk_r>
 80133fe:	3001      	adds	r0, #1
 8013400:	d1f2      	bne.n	80133e8 <sbrk_aligned+0x24>
 8013402:	e7ef      	b.n	80133e4 <sbrk_aligned+0x20>
 8013404:	20003584 	.word	0x20003584

08013408 <_malloc_r>:
 8013408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801340a:	2203      	movs	r2, #3
 801340c:	1ccb      	adds	r3, r1, #3
 801340e:	4393      	bics	r3, r2
 8013410:	3308      	adds	r3, #8
 8013412:	0005      	movs	r5, r0
 8013414:	001f      	movs	r7, r3
 8013416:	2b0c      	cmp	r3, #12
 8013418:	d234      	bcs.n	8013484 <_malloc_r+0x7c>
 801341a:	270c      	movs	r7, #12
 801341c:	42b9      	cmp	r1, r7
 801341e:	d833      	bhi.n	8013488 <_malloc_r+0x80>
 8013420:	0028      	movs	r0, r5
 8013422:	f000 f871 	bl	8013508 <__malloc_lock>
 8013426:	4e37      	ldr	r6, [pc, #220]	@ (8013504 <_malloc_r+0xfc>)
 8013428:	6833      	ldr	r3, [r6, #0]
 801342a:	001c      	movs	r4, r3
 801342c:	2c00      	cmp	r4, #0
 801342e:	d12f      	bne.n	8013490 <_malloc_r+0x88>
 8013430:	0039      	movs	r1, r7
 8013432:	0028      	movs	r0, r5
 8013434:	f7ff ffc6 	bl	80133c4 <sbrk_aligned>
 8013438:	0004      	movs	r4, r0
 801343a:	1c43      	adds	r3, r0, #1
 801343c:	d15f      	bne.n	80134fe <_malloc_r+0xf6>
 801343e:	6834      	ldr	r4, [r6, #0]
 8013440:	9400      	str	r4, [sp, #0]
 8013442:	9b00      	ldr	r3, [sp, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d14a      	bne.n	80134de <_malloc_r+0xd6>
 8013448:	2c00      	cmp	r4, #0
 801344a:	d052      	beq.n	80134f2 <_malloc_r+0xea>
 801344c:	6823      	ldr	r3, [r4, #0]
 801344e:	0028      	movs	r0, r5
 8013450:	18e3      	adds	r3, r4, r3
 8013452:	9900      	ldr	r1, [sp, #0]
 8013454:	9301      	str	r3, [sp, #4]
 8013456:	f000 fb41 	bl	8013adc <_sbrk_r>
 801345a:	9b01      	ldr	r3, [sp, #4]
 801345c:	4283      	cmp	r3, r0
 801345e:	d148      	bne.n	80134f2 <_malloc_r+0xea>
 8013460:	6823      	ldr	r3, [r4, #0]
 8013462:	0028      	movs	r0, r5
 8013464:	1aff      	subs	r7, r7, r3
 8013466:	0039      	movs	r1, r7
 8013468:	f7ff ffac 	bl	80133c4 <sbrk_aligned>
 801346c:	3001      	adds	r0, #1
 801346e:	d040      	beq.n	80134f2 <_malloc_r+0xea>
 8013470:	6823      	ldr	r3, [r4, #0]
 8013472:	19db      	adds	r3, r3, r7
 8013474:	6023      	str	r3, [r4, #0]
 8013476:	6833      	ldr	r3, [r6, #0]
 8013478:	685a      	ldr	r2, [r3, #4]
 801347a:	2a00      	cmp	r2, #0
 801347c:	d133      	bne.n	80134e6 <_malloc_r+0xde>
 801347e:	9b00      	ldr	r3, [sp, #0]
 8013480:	6033      	str	r3, [r6, #0]
 8013482:	e019      	b.n	80134b8 <_malloc_r+0xb0>
 8013484:	2b00      	cmp	r3, #0
 8013486:	dac9      	bge.n	801341c <_malloc_r+0x14>
 8013488:	230c      	movs	r3, #12
 801348a:	602b      	str	r3, [r5, #0]
 801348c:	2000      	movs	r0, #0
 801348e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013490:	6821      	ldr	r1, [r4, #0]
 8013492:	1bc9      	subs	r1, r1, r7
 8013494:	d420      	bmi.n	80134d8 <_malloc_r+0xd0>
 8013496:	290b      	cmp	r1, #11
 8013498:	d90a      	bls.n	80134b0 <_malloc_r+0xa8>
 801349a:	19e2      	adds	r2, r4, r7
 801349c:	6027      	str	r7, [r4, #0]
 801349e:	42a3      	cmp	r3, r4
 80134a0:	d104      	bne.n	80134ac <_malloc_r+0xa4>
 80134a2:	6032      	str	r2, [r6, #0]
 80134a4:	6863      	ldr	r3, [r4, #4]
 80134a6:	6011      	str	r1, [r2, #0]
 80134a8:	6053      	str	r3, [r2, #4]
 80134aa:	e005      	b.n	80134b8 <_malloc_r+0xb0>
 80134ac:	605a      	str	r2, [r3, #4]
 80134ae:	e7f9      	b.n	80134a4 <_malloc_r+0x9c>
 80134b0:	6862      	ldr	r2, [r4, #4]
 80134b2:	42a3      	cmp	r3, r4
 80134b4:	d10e      	bne.n	80134d4 <_malloc_r+0xcc>
 80134b6:	6032      	str	r2, [r6, #0]
 80134b8:	0028      	movs	r0, r5
 80134ba:	f000 f82d 	bl	8013518 <__malloc_unlock>
 80134be:	0020      	movs	r0, r4
 80134c0:	2207      	movs	r2, #7
 80134c2:	300b      	adds	r0, #11
 80134c4:	1d23      	adds	r3, r4, #4
 80134c6:	4390      	bics	r0, r2
 80134c8:	1ac2      	subs	r2, r0, r3
 80134ca:	4298      	cmp	r0, r3
 80134cc:	d0df      	beq.n	801348e <_malloc_r+0x86>
 80134ce:	1a1b      	subs	r3, r3, r0
 80134d0:	50a3      	str	r3, [r4, r2]
 80134d2:	e7dc      	b.n	801348e <_malloc_r+0x86>
 80134d4:	605a      	str	r2, [r3, #4]
 80134d6:	e7ef      	b.n	80134b8 <_malloc_r+0xb0>
 80134d8:	0023      	movs	r3, r4
 80134da:	6864      	ldr	r4, [r4, #4]
 80134dc:	e7a6      	b.n	801342c <_malloc_r+0x24>
 80134de:	9c00      	ldr	r4, [sp, #0]
 80134e0:	6863      	ldr	r3, [r4, #4]
 80134e2:	9300      	str	r3, [sp, #0]
 80134e4:	e7ad      	b.n	8013442 <_malloc_r+0x3a>
 80134e6:	001a      	movs	r2, r3
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	42a3      	cmp	r3, r4
 80134ec:	d1fb      	bne.n	80134e6 <_malloc_r+0xde>
 80134ee:	2300      	movs	r3, #0
 80134f0:	e7da      	b.n	80134a8 <_malloc_r+0xa0>
 80134f2:	230c      	movs	r3, #12
 80134f4:	0028      	movs	r0, r5
 80134f6:	602b      	str	r3, [r5, #0]
 80134f8:	f000 f80e 	bl	8013518 <__malloc_unlock>
 80134fc:	e7c6      	b.n	801348c <_malloc_r+0x84>
 80134fe:	6007      	str	r7, [r0, #0]
 8013500:	e7da      	b.n	80134b8 <_malloc_r+0xb0>
 8013502:	46c0      	nop			@ (mov r8, r8)
 8013504:	20003588 	.word	0x20003588

08013508 <__malloc_lock>:
 8013508:	b510      	push	{r4, lr}
 801350a:	4802      	ldr	r0, [pc, #8]	@ (8013514 <__malloc_lock+0xc>)
 801350c:	f7ff ff04 	bl	8013318 <__retarget_lock_acquire_recursive>
 8013510:	bd10      	pop	{r4, pc}
 8013512:	46c0      	nop			@ (mov r8, r8)
 8013514:	20003580 	.word	0x20003580

08013518 <__malloc_unlock>:
 8013518:	b510      	push	{r4, lr}
 801351a:	4802      	ldr	r0, [pc, #8]	@ (8013524 <__malloc_unlock+0xc>)
 801351c:	f7ff fefd 	bl	801331a <__retarget_lock_release_recursive>
 8013520:	bd10      	pop	{r4, pc}
 8013522:	46c0      	nop			@ (mov r8, r8)
 8013524:	20003580 	.word	0x20003580

08013528 <__ssputs_r>:
 8013528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801352a:	688e      	ldr	r6, [r1, #8]
 801352c:	b085      	sub	sp, #20
 801352e:	001f      	movs	r7, r3
 8013530:	000c      	movs	r4, r1
 8013532:	680b      	ldr	r3, [r1, #0]
 8013534:	9002      	str	r0, [sp, #8]
 8013536:	9203      	str	r2, [sp, #12]
 8013538:	42be      	cmp	r6, r7
 801353a:	d830      	bhi.n	801359e <__ssputs_r+0x76>
 801353c:	210c      	movs	r1, #12
 801353e:	5e62      	ldrsh	r2, [r4, r1]
 8013540:	2190      	movs	r1, #144	@ 0x90
 8013542:	00c9      	lsls	r1, r1, #3
 8013544:	420a      	tst	r2, r1
 8013546:	d028      	beq.n	801359a <__ssputs_r+0x72>
 8013548:	2003      	movs	r0, #3
 801354a:	6921      	ldr	r1, [r4, #16]
 801354c:	1a5b      	subs	r3, r3, r1
 801354e:	9301      	str	r3, [sp, #4]
 8013550:	6963      	ldr	r3, [r4, #20]
 8013552:	4343      	muls	r3, r0
 8013554:	9801      	ldr	r0, [sp, #4]
 8013556:	0fdd      	lsrs	r5, r3, #31
 8013558:	18ed      	adds	r5, r5, r3
 801355a:	1c7b      	adds	r3, r7, #1
 801355c:	181b      	adds	r3, r3, r0
 801355e:	106d      	asrs	r5, r5, #1
 8013560:	42ab      	cmp	r3, r5
 8013562:	d900      	bls.n	8013566 <__ssputs_r+0x3e>
 8013564:	001d      	movs	r5, r3
 8013566:	0552      	lsls	r2, r2, #21
 8013568:	d528      	bpl.n	80135bc <__ssputs_r+0x94>
 801356a:	0029      	movs	r1, r5
 801356c:	9802      	ldr	r0, [sp, #8]
 801356e:	f7ff ff4b 	bl	8013408 <_malloc_r>
 8013572:	1e06      	subs	r6, r0, #0
 8013574:	d02c      	beq.n	80135d0 <__ssputs_r+0xa8>
 8013576:	9a01      	ldr	r2, [sp, #4]
 8013578:	6921      	ldr	r1, [r4, #16]
 801357a:	f7ff fecf 	bl	801331c <memcpy>
 801357e:	89a2      	ldrh	r2, [r4, #12]
 8013580:	4b18      	ldr	r3, [pc, #96]	@ (80135e4 <__ssputs_r+0xbc>)
 8013582:	401a      	ands	r2, r3
 8013584:	2380      	movs	r3, #128	@ 0x80
 8013586:	4313      	orrs	r3, r2
 8013588:	81a3      	strh	r3, [r4, #12]
 801358a:	9b01      	ldr	r3, [sp, #4]
 801358c:	6126      	str	r6, [r4, #16]
 801358e:	18f6      	adds	r6, r6, r3
 8013590:	6026      	str	r6, [r4, #0]
 8013592:	003e      	movs	r6, r7
 8013594:	6165      	str	r5, [r4, #20]
 8013596:	1aed      	subs	r5, r5, r3
 8013598:	60a5      	str	r5, [r4, #8]
 801359a:	42be      	cmp	r6, r7
 801359c:	d900      	bls.n	80135a0 <__ssputs_r+0x78>
 801359e:	003e      	movs	r6, r7
 80135a0:	0032      	movs	r2, r6
 80135a2:	9903      	ldr	r1, [sp, #12]
 80135a4:	6820      	ldr	r0, [r4, #0]
 80135a6:	f7ff fe73 	bl	8013290 <memmove>
 80135aa:	2000      	movs	r0, #0
 80135ac:	68a3      	ldr	r3, [r4, #8]
 80135ae:	1b9b      	subs	r3, r3, r6
 80135b0:	60a3      	str	r3, [r4, #8]
 80135b2:	6823      	ldr	r3, [r4, #0]
 80135b4:	199b      	adds	r3, r3, r6
 80135b6:	6023      	str	r3, [r4, #0]
 80135b8:	b005      	add	sp, #20
 80135ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135bc:	002a      	movs	r2, r5
 80135be:	9802      	ldr	r0, [sp, #8]
 80135c0:	f000 faa9 	bl	8013b16 <_realloc_r>
 80135c4:	1e06      	subs	r6, r0, #0
 80135c6:	d1e0      	bne.n	801358a <__ssputs_r+0x62>
 80135c8:	6921      	ldr	r1, [r4, #16]
 80135ca:	9802      	ldr	r0, [sp, #8]
 80135cc:	f7ff feb0 	bl	8013330 <_free_r>
 80135d0:	230c      	movs	r3, #12
 80135d2:	2001      	movs	r0, #1
 80135d4:	9a02      	ldr	r2, [sp, #8]
 80135d6:	4240      	negs	r0, r0
 80135d8:	6013      	str	r3, [r2, #0]
 80135da:	89a2      	ldrh	r2, [r4, #12]
 80135dc:	3334      	adds	r3, #52	@ 0x34
 80135de:	4313      	orrs	r3, r2
 80135e0:	81a3      	strh	r3, [r4, #12]
 80135e2:	e7e9      	b.n	80135b8 <__ssputs_r+0x90>
 80135e4:	fffffb7f 	.word	0xfffffb7f

080135e8 <_svfiprintf_r>:
 80135e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135ea:	b0a1      	sub	sp, #132	@ 0x84
 80135ec:	9003      	str	r0, [sp, #12]
 80135ee:	001d      	movs	r5, r3
 80135f0:	898b      	ldrh	r3, [r1, #12]
 80135f2:	000f      	movs	r7, r1
 80135f4:	0016      	movs	r6, r2
 80135f6:	061b      	lsls	r3, r3, #24
 80135f8:	d511      	bpl.n	801361e <_svfiprintf_r+0x36>
 80135fa:	690b      	ldr	r3, [r1, #16]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d10e      	bne.n	801361e <_svfiprintf_r+0x36>
 8013600:	2140      	movs	r1, #64	@ 0x40
 8013602:	f7ff ff01 	bl	8013408 <_malloc_r>
 8013606:	6038      	str	r0, [r7, #0]
 8013608:	6138      	str	r0, [r7, #16]
 801360a:	2800      	cmp	r0, #0
 801360c:	d105      	bne.n	801361a <_svfiprintf_r+0x32>
 801360e:	230c      	movs	r3, #12
 8013610:	9a03      	ldr	r2, [sp, #12]
 8013612:	6013      	str	r3, [r2, #0]
 8013614:	2001      	movs	r0, #1
 8013616:	4240      	negs	r0, r0
 8013618:	e0cf      	b.n	80137ba <_svfiprintf_r+0x1d2>
 801361a:	2340      	movs	r3, #64	@ 0x40
 801361c:	617b      	str	r3, [r7, #20]
 801361e:	2300      	movs	r3, #0
 8013620:	ac08      	add	r4, sp, #32
 8013622:	6163      	str	r3, [r4, #20]
 8013624:	3320      	adds	r3, #32
 8013626:	7663      	strb	r3, [r4, #25]
 8013628:	3310      	adds	r3, #16
 801362a:	76a3      	strb	r3, [r4, #26]
 801362c:	9507      	str	r5, [sp, #28]
 801362e:	0035      	movs	r5, r6
 8013630:	782b      	ldrb	r3, [r5, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d001      	beq.n	801363a <_svfiprintf_r+0x52>
 8013636:	2b25      	cmp	r3, #37	@ 0x25
 8013638:	d148      	bne.n	80136cc <_svfiprintf_r+0xe4>
 801363a:	1bab      	subs	r3, r5, r6
 801363c:	9305      	str	r3, [sp, #20]
 801363e:	42b5      	cmp	r5, r6
 8013640:	d00b      	beq.n	801365a <_svfiprintf_r+0x72>
 8013642:	0032      	movs	r2, r6
 8013644:	0039      	movs	r1, r7
 8013646:	9803      	ldr	r0, [sp, #12]
 8013648:	f7ff ff6e 	bl	8013528 <__ssputs_r>
 801364c:	3001      	adds	r0, #1
 801364e:	d100      	bne.n	8013652 <_svfiprintf_r+0x6a>
 8013650:	e0ae      	b.n	80137b0 <_svfiprintf_r+0x1c8>
 8013652:	6963      	ldr	r3, [r4, #20]
 8013654:	9a05      	ldr	r2, [sp, #20]
 8013656:	189b      	adds	r3, r3, r2
 8013658:	6163      	str	r3, [r4, #20]
 801365a:	782b      	ldrb	r3, [r5, #0]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d100      	bne.n	8013662 <_svfiprintf_r+0x7a>
 8013660:	e0a6      	b.n	80137b0 <_svfiprintf_r+0x1c8>
 8013662:	2201      	movs	r2, #1
 8013664:	2300      	movs	r3, #0
 8013666:	4252      	negs	r2, r2
 8013668:	6062      	str	r2, [r4, #4]
 801366a:	a904      	add	r1, sp, #16
 801366c:	3254      	adds	r2, #84	@ 0x54
 801366e:	1852      	adds	r2, r2, r1
 8013670:	1c6e      	adds	r6, r5, #1
 8013672:	6023      	str	r3, [r4, #0]
 8013674:	60e3      	str	r3, [r4, #12]
 8013676:	60a3      	str	r3, [r4, #8]
 8013678:	7013      	strb	r3, [r2, #0]
 801367a:	65a3      	str	r3, [r4, #88]	@ 0x58
 801367c:	4b54      	ldr	r3, [pc, #336]	@ (80137d0 <_svfiprintf_r+0x1e8>)
 801367e:	2205      	movs	r2, #5
 8013680:	0018      	movs	r0, r3
 8013682:	7831      	ldrb	r1, [r6, #0]
 8013684:	9305      	str	r3, [sp, #20]
 8013686:	f000 fa3b 	bl	8013b00 <memchr>
 801368a:	1c75      	adds	r5, r6, #1
 801368c:	2800      	cmp	r0, #0
 801368e:	d11f      	bne.n	80136d0 <_svfiprintf_r+0xe8>
 8013690:	6822      	ldr	r2, [r4, #0]
 8013692:	06d3      	lsls	r3, r2, #27
 8013694:	d504      	bpl.n	80136a0 <_svfiprintf_r+0xb8>
 8013696:	2353      	movs	r3, #83	@ 0x53
 8013698:	a904      	add	r1, sp, #16
 801369a:	185b      	adds	r3, r3, r1
 801369c:	2120      	movs	r1, #32
 801369e:	7019      	strb	r1, [r3, #0]
 80136a0:	0713      	lsls	r3, r2, #28
 80136a2:	d504      	bpl.n	80136ae <_svfiprintf_r+0xc6>
 80136a4:	2353      	movs	r3, #83	@ 0x53
 80136a6:	a904      	add	r1, sp, #16
 80136a8:	185b      	adds	r3, r3, r1
 80136aa:	212b      	movs	r1, #43	@ 0x2b
 80136ac:	7019      	strb	r1, [r3, #0]
 80136ae:	7833      	ldrb	r3, [r6, #0]
 80136b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80136b2:	d016      	beq.n	80136e2 <_svfiprintf_r+0xfa>
 80136b4:	0035      	movs	r5, r6
 80136b6:	2100      	movs	r1, #0
 80136b8:	200a      	movs	r0, #10
 80136ba:	68e3      	ldr	r3, [r4, #12]
 80136bc:	782a      	ldrb	r2, [r5, #0]
 80136be:	1c6e      	adds	r6, r5, #1
 80136c0:	3a30      	subs	r2, #48	@ 0x30
 80136c2:	2a09      	cmp	r2, #9
 80136c4:	d950      	bls.n	8013768 <_svfiprintf_r+0x180>
 80136c6:	2900      	cmp	r1, #0
 80136c8:	d111      	bne.n	80136ee <_svfiprintf_r+0x106>
 80136ca:	e017      	b.n	80136fc <_svfiprintf_r+0x114>
 80136cc:	3501      	adds	r5, #1
 80136ce:	e7af      	b.n	8013630 <_svfiprintf_r+0x48>
 80136d0:	9b05      	ldr	r3, [sp, #20]
 80136d2:	6822      	ldr	r2, [r4, #0]
 80136d4:	1ac0      	subs	r0, r0, r3
 80136d6:	2301      	movs	r3, #1
 80136d8:	4083      	lsls	r3, r0
 80136da:	4313      	orrs	r3, r2
 80136dc:	002e      	movs	r6, r5
 80136de:	6023      	str	r3, [r4, #0]
 80136e0:	e7cc      	b.n	801367c <_svfiprintf_r+0x94>
 80136e2:	9b07      	ldr	r3, [sp, #28]
 80136e4:	1d19      	adds	r1, r3, #4
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	9107      	str	r1, [sp, #28]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	db01      	blt.n	80136f2 <_svfiprintf_r+0x10a>
 80136ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136f0:	e004      	b.n	80136fc <_svfiprintf_r+0x114>
 80136f2:	425b      	negs	r3, r3
 80136f4:	60e3      	str	r3, [r4, #12]
 80136f6:	2302      	movs	r3, #2
 80136f8:	4313      	orrs	r3, r2
 80136fa:	6023      	str	r3, [r4, #0]
 80136fc:	782b      	ldrb	r3, [r5, #0]
 80136fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8013700:	d10c      	bne.n	801371c <_svfiprintf_r+0x134>
 8013702:	786b      	ldrb	r3, [r5, #1]
 8013704:	2b2a      	cmp	r3, #42	@ 0x2a
 8013706:	d134      	bne.n	8013772 <_svfiprintf_r+0x18a>
 8013708:	9b07      	ldr	r3, [sp, #28]
 801370a:	3502      	adds	r5, #2
 801370c:	1d1a      	adds	r2, r3, #4
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	9207      	str	r2, [sp, #28]
 8013712:	2b00      	cmp	r3, #0
 8013714:	da01      	bge.n	801371a <_svfiprintf_r+0x132>
 8013716:	2301      	movs	r3, #1
 8013718:	425b      	negs	r3, r3
 801371a:	9309      	str	r3, [sp, #36]	@ 0x24
 801371c:	4e2d      	ldr	r6, [pc, #180]	@ (80137d4 <_svfiprintf_r+0x1ec>)
 801371e:	2203      	movs	r2, #3
 8013720:	0030      	movs	r0, r6
 8013722:	7829      	ldrb	r1, [r5, #0]
 8013724:	f000 f9ec 	bl	8013b00 <memchr>
 8013728:	2800      	cmp	r0, #0
 801372a:	d006      	beq.n	801373a <_svfiprintf_r+0x152>
 801372c:	2340      	movs	r3, #64	@ 0x40
 801372e:	1b80      	subs	r0, r0, r6
 8013730:	4083      	lsls	r3, r0
 8013732:	6822      	ldr	r2, [r4, #0]
 8013734:	3501      	adds	r5, #1
 8013736:	4313      	orrs	r3, r2
 8013738:	6023      	str	r3, [r4, #0]
 801373a:	7829      	ldrb	r1, [r5, #0]
 801373c:	2206      	movs	r2, #6
 801373e:	4826      	ldr	r0, [pc, #152]	@ (80137d8 <_svfiprintf_r+0x1f0>)
 8013740:	1c6e      	adds	r6, r5, #1
 8013742:	7621      	strb	r1, [r4, #24]
 8013744:	f000 f9dc 	bl	8013b00 <memchr>
 8013748:	2800      	cmp	r0, #0
 801374a:	d038      	beq.n	80137be <_svfiprintf_r+0x1d6>
 801374c:	4b23      	ldr	r3, [pc, #140]	@ (80137dc <_svfiprintf_r+0x1f4>)
 801374e:	2b00      	cmp	r3, #0
 8013750:	d122      	bne.n	8013798 <_svfiprintf_r+0x1b0>
 8013752:	2207      	movs	r2, #7
 8013754:	9b07      	ldr	r3, [sp, #28]
 8013756:	3307      	adds	r3, #7
 8013758:	4393      	bics	r3, r2
 801375a:	3308      	adds	r3, #8
 801375c:	9307      	str	r3, [sp, #28]
 801375e:	6963      	ldr	r3, [r4, #20]
 8013760:	9a04      	ldr	r2, [sp, #16]
 8013762:	189b      	adds	r3, r3, r2
 8013764:	6163      	str	r3, [r4, #20]
 8013766:	e762      	b.n	801362e <_svfiprintf_r+0x46>
 8013768:	4343      	muls	r3, r0
 801376a:	0035      	movs	r5, r6
 801376c:	2101      	movs	r1, #1
 801376e:	189b      	adds	r3, r3, r2
 8013770:	e7a4      	b.n	80136bc <_svfiprintf_r+0xd4>
 8013772:	2300      	movs	r3, #0
 8013774:	200a      	movs	r0, #10
 8013776:	0019      	movs	r1, r3
 8013778:	3501      	adds	r5, #1
 801377a:	6063      	str	r3, [r4, #4]
 801377c:	782a      	ldrb	r2, [r5, #0]
 801377e:	1c6e      	adds	r6, r5, #1
 8013780:	3a30      	subs	r2, #48	@ 0x30
 8013782:	2a09      	cmp	r2, #9
 8013784:	d903      	bls.n	801378e <_svfiprintf_r+0x1a6>
 8013786:	2b00      	cmp	r3, #0
 8013788:	d0c8      	beq.n	801371c <_svfiprintf_r+0x134>
 801378a:	9109      	str	r1, [sp, #36]	@ 0x24
 801378c:	e7c6      	b.n	801371c <_svfiprintf_r+0x134>
 801378e:	4341      	muls	r1, r0
 8013790:	0035      	movs	r5, r6
 8013792:	2301      	movs	r3, #1
 8013794:	1889      	adds	r1, r1, r2
 8013796:	e7f1      	b.n	801377c <_svfiprintf_r+0x194>
 8013798:	aa07      	add	r2, sp, #28
 801379a:	9200      	str	r2, [sp, #0]
 801379c:	0021      	movs	r1, r4
 801379e:	003a      	movs	r2, r7
 80137a0:	4b0f      	ldr	r3, [pc, #60]	@ (80137e0 <_svfiprintf_r+0x1f8>)
 80137a2:	9803      	ldr	r0, [sp, #12]
 80137a4:	e000      	b.n	80137a8 <_svfiprintf_r+0x1c0>
 80137a6:	bf00      	nop
 80137a8:	9004      	str	r0, [sp, #16]
 80137aa:	9b04      	ldr	r3, [sp, #16]
 80137ac:	3301      	adds	r3, #1
 80137ae:	d1d6      	bne.n	801375e <_svfiprintf_r+0x176>
 80137b0:	89bb      	ldrh	r3, [r7, #12]
 80137b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80137b4:	065b      	lsls	r3, r3, #25
 80137b6:	d500      	bpl.n	80137ba <_svfiprintf_r+0x1d2>
 80137b8:	e72c      	b.n	8013614 <_svfiprintf_r+0x2c>
 80137ba:	b021      	add	sp, #132	@ 0x84
 80137bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137be:	aa07      	add	r2, sp, #28
 80137c0:	9200      	str	r2, [sp, #0]
 80137c2:	0021      	movs	r1, r4
 80137c4:	003a      	movs	r2, r7
 80137c6:	4b06      	ldr	r3, [pc, #24]	@ (80137e0 <_svfiprintf_r+0x1f8>)
 80137c8:	9803      	ldr	r0, [sp, #12]
 80137ca:	f000 f87b 	bl	80138c4 <_printf_i>
 80137ce:	e7eb      	b.n	80137a8 <_svfiprintf_r+0x1c0>
 80137d0:	080141fc 	.word	0x080141fc
 80137d4:	08014202 	.word	0x08014202
 80137d8:	08014206 	.word	0x08014206
 80137dc:	00000000 	.word	0x00000000
 80137e0:	08013529 	.word	0x08013529

080137e4 <_printf_common>:
 80137e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80137e6:	0016      	movs	r6, r2
 80137e8:	9301      	str	r3, [sp, #4]
 80137ea:	688a      	ldr	r2, [r1, #8]
 80137ec:	690b      	ldr	r3, [r1, #16]
 80137ee:	000c      	movs	r4, r1
 80137f0:	9000      	str	r0, [sp, #0]
 80137f2:	4293      	cmp	r3, r2
 80137f4:	da00      	bge.n	80137f8 <_printf_common+0x14>
 80137f6:	0013      	movs	r3, r2
 80137f8:	0022      	movs	r2, r4
 80137fa:	6033      	str	r3, [r6, #0]
 80137fc:	3243      	adds	r2, #67	@ 0x43
 80137fe:	7812      	ldrb	r2, [r2, #0]
 8013800:	2a00      	cmp	r2, #0
 8013802:	d001      	beq.n	8013808 <_printf_common+0x24>
 8013804:	3301      	adds	r3, #1
 8013806:	6033      	str	r3, [r6, #0]
 8013808:	6823      	ldr	r3, [r4, #0]
 801380a:	069b      	lsls	r3, r3, #26
 801380c:	d502      	bpl.n	8013814 <_printf_common+0x30>
 801380e:	6833      	ldr	r3, [r6, #0]
 8013810:	3302      	adds	r3, #2
 8013812:	6033      	str	r3, [r6, #0]
 8013814:	6822      	ldr	r2, [r4, #0]
 8013816:	2306      	movs	r3, #6
 8013818:	0015      	movs	r5, r2
 801381a:	401d      	ands	r5, r3
 801381c:	421a      	tst	r2, r3
 801381e:	d027      	beq.n	8013870 <_printf_common+0x8c>
 8013820:	0023      	movs	r3, r4
 8013822:	3343      	adds	r3, #67	@ 0x43
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	1e5a      	subs	r2, r3, #1
 8013828:	4193      	sbcs	r3, r2
 801382a:	6822      	ldr	r2, [r4, #0]
 801382c:	0692      	lsls	r2, r2, #26
 801382e:	d430      	bmi.n	8013892 <_printf_common+0xae>
 8013830:	0022      	movs	r2, r4
 8013832:	9901      	ldr	r1, [sp, #4]
 8013834:	9800      	ldr	r0, [sp, #0]
 8013836:	9d08      	ldr	r5, [sp, #32]
 8013838:	3243      	adds	r2, #67	@ 0x43
 801383a:	47a8      	blx	r5
 801383c:	3001      	adds	r0, #1
 801383e:	d025      	beq.n	801388c <_printf_common+0xa8>
 8013840:	2206      	movs	r2, #6
 8013842:	6823      	ldr	r3, [r4, #0]
 8013844:	2500      	movs	r5, #0
 8013846:	4013      	ands	r3, r2
 8013848:	2b04      	cmp	r3, #4
 801384a:	d105      	bne.n	8013858 <_printf_common+0x74>
 801384c:	6833      	ldr	r3, [r6, #0]
 801384e:	68e5      	ldr	r5, [r4, #12]
 8013850:	1aed      	subs	r5, r5, r3
 8013852:	43eb      	mvns	r3, r5
 8013854:	17db      	asrs	r3, r3, #31
 8013856:	401d      	ands	r5, r3
 8013858:	68a3      	ldr	r3, [r4, #8]
 801385a:	6922      	ldr	r2, [r4, #16]
 801385c:	4293      	cmp	r3, r2
 801385e:	dd01      	ble.n	8013864 <_printf_common+0x80>
 8013860:	1a9b      	subs	r3, r3, r2
 8013862:	18ed      	adds	r5, r5, r3
 8013864:	2600      	movs	r6, #0
 8013866:	42b5      	cmp	r5, r6
 8013868:	d120      	bne.n	80138ac <_printf_common+0xc8>
 801386a:	2000      	movs	r0, #0
 801386c:	e010      	b.n	8013890 <_printf_common+0xac>
 801386e:	3501      	adds	r5, #1
 8013870:	68e3      	ldr	r3, [r4, #12]
 8013872:	6832      	ldr	r2, [r6, #0]
 8013874:	1a9b      	subs	r3, r3, r2
 8013876:	42ab      	cmp	r3, r5
 8013878:	ddd2      	ble.n	8013820 <_printf_common+0x3c>
 801387a:	0022      	movs	r2, r4
 801387c:	2301      	movs	r3, #1
 801387e:	9901      	ldr	r1, [sp, #4]
 8013880:	9800      	ldr	r0, [sp, #0]
 8013882:	9f08      	ldr	r7, [sp, #32]
 8013884:	3219      	adds	r2, #25
 8013886:	47b8      	blx	r7
 8013888:	3001      	adds	r0, #1
 801388a:	d1f0      	bne.n	801386e <_printf_common+0x8a>
 801388c:	2001      	movs	r0, #1
 801388e:	4240      	negs	r0, r0
 8013890:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013892:	2030      	movs	r0, #48	@ 0x30
 8013894:	18e1      	adds	r1, r4, r3
 8013896:	3143      	adds	r1, #67	@ 0x43
 8013898:	7008      	strb	r0, [r1, #0]
 801389a:	0021      	movs	r1, r4
 801389c:	1c5a      	adds	r2, r3, #1
 801389e:	3145      	adds	r1, #69	@ 0x45
 80138a0:	7809      	ldrb	r1, [r1, #0]
 80138a2:	18a2      	adds	r2, r4, r2
 80138a4:	3243      	adds	r2, #67	@ 0x43
 80138a6:	3302      	adds	r3, #2
 80138a8:	7011      	strb	r1, [r2, #0]
 80138aa:	e7c1      	b.n	8013830 <_printf_common+0x4c>
 80138ac:	0022      	movs	r2, r4
 80138ae:	2301      	movs	r3, #1
 80138b0:	9901      	ldr	r1, [sp, #4]
 80138b2:	9800      	ldr	r0, [sp, #0]
 80138b4:	9f08      	ldr	r7, [sp, #32]
 80138b6:	321a      	adds	r2, #26
 80138b8:	47b8      	blx	r7
 80138ba:	3001      	adds	r0, #1
 80138bc:	d0e6      	beq.n	801388c <_printf_common+0xa8>
 80138be:	3601      	adds	r6, #1
 80138c0:	e7d1      	b.n	8013866 <_printf_common+0x82>
	...

080138c4 <_printf_i>:
 80138c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138c6:	b08b      	sub	sp, #44	@ 0x2c
 80138c8:	9206      	str	r2, [sp, #24]
 80138ca:	000a      	movs	r2, r1
 80138cc:	3243      	adds	r2, #67	@ 0x43
 80138ce:	9307      	str	r3, [sp, #28]
 80138d0:	9005      	str	r0, [sp, #20]
 80138d2:	9203      	str	r2, [sp, #12]
 80138d4:	7e0a      	ldrb	r2, [r1, #24]
 80138d6:	000c      	movs	r4, r1
 80138d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80138da:	2a78      	cmp	r2, #120	@ 0x78
 80138dc:	d809      	bhi.n	80138f2 <_printf_i+0x2e>
 80138de:	2a62      	cmp	r2, #98	@ 0x62
 80138e0:	d80b      	bhi.n	80138fa <_printf_i+0x36>
 80138e2:	2a00      	cmp	r2, #0
 80138e4:	d100      	bne.n	80138e8 <_printf_i+0x24>
 80138e6:	e0ba      	b.n	8013a5e <_printf_i+0x19a>
 80138e8:	497a      	ldr	r1, [pc, #488]	@ (8013ad4 <_printf_i+0x210>)
 80138ea:	9104      	str	r1, [sp, #16]
 80138ec:	2a58      	cmp	r2, #88	@ 0x58
 80138ee:	d100      	bne.n	80138f2 <_printf_i+0x2e>
 80138f0:	e08e      	b.n	8013a10 <_printf_i+0x14c>
 80138f2:	0025      	movs	r5, r4
 80138f4:	3542      	adds	r5, #66	@ 0x42
 80138f6:	702a      	strb	r2, [r5, #0]
 80138f8:	e022      	b.n	8013940 <_printf_i+0x7c>
 80138fa:	0010      	movs	r0, r2
 80138fc:	3863      	subs	r0, #99	@ 0x63
 80138fe:	2815      	cmp	r0, #21
 8013900:	d8f7      	bhi.n	80138f2 <_printf_i+0x2e>
 8013902:	f7ec fc1d 	bl	8000140 <__gnu_thumb1_case_shi>
 8013906:	0016      	.short	0x0016
 8013908:	fff6001f 	.word	0xfff6001f
 801390c:	fff6fff6 	.word	0xfff6fff6
 8013910:	001ffff6 	.word	0x001ffff6
 8013914:	fff6fff6 	.word	0xfff6fff6
 8013918:	fff6fff6 	.word	0xfff6fff6
 801391c:	0036009f 	.word	0x0036009f
 8013920:	fff6007e 	.word	0xfff6007e
 8013924:	00b0fff6 	.word	0x00b0fff6
 8013928:	0036fff6 	.word	0x0036fff6
 801392c:	fff6fff6 	.word	0xfff6fff6
 8013930:	0082      	.short	0x0082
 8013932:	0025      	movs	r5, r4
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	3542      	adds	r5, #66	@ 0x42
 8013938:	1d11      	adds	r1, r2, #4
 801393a:	6019      	str	r1, [r3, #0]
 801393c:	6813      	ldr	r3, [r2, #0]
 801393e:	702b      	strb	r3, [r5, #0]
 8013940:	2301      	movs	r3, #1
 8013942:	e09e      	b.n	8013a82 <_printf_i+0x1be>
 8013944:	6818      	ldr	r0, [r3, #0]
 8013946:	6809      	ldr	r1, [r1, #0]
 8013948:	1d02      	adds	r2, r0, #4
 801394a:	060d      	lsls	r5, r1, #24
 801394c:	d50b      	bpl.n	8013966 <_printf_i+0xa2>
 801394e:	6806      	ldr	r6, [r0, #0]
 8013950:	601a      	str	r2, [r3, #0]
 8013952:	2e00      	cmp	r6, #0
 8013954:	da03      	bge.n	801395e <_printf_i+0x9a>
 8013956:	232d      	movs	r3, #45	@ 0x2d
 8013958:	9a03      	ldr	r2, [sp, #12]
 801395a:	4276      	negs	r6, r6
 801395c:	7013      	strb	r3, [r2, #0]
 801395e:	4b5d      	ldr	r3, [pc, #372]	@ (8013ad4 <_printf_i+0x210>)
 8013960:	270a      	movs	r7, #10
 8013962:	9304      	str	r3, [sp, #16]
 8013964:	e018      	b.n	8013998 <_printf_i+0xd4>
 8013966:	6806      	ldr	r6, [r0, #0]
 8013968:	601a      	str	r2, [r3, #0]
 801396a:	0649      	lsls	r1, r1, #25
 801396c:	d5f1      	bpl.n	8013952 <_printf_i+0x8e>
 801396e:	b236      	sxth	r6, r6
 8013970:	e7ef      	b.n	8013952 <_printf_i+0x8e>
 8013972:	6808      	ldr	r0, [r1, #0]
 8013974:	6819      	ldr	r1, [r3, #0]
 8013976:	c940      	ldmia	r1!, {r6}
 8013978:	0605      	lsls	r5, r0, #24
 801397a:	d402      	bmi.n	8013982 <_printf_i+0xbe>
 801397c:	0640      	lsls	r0, r0, #25
 801397e:	d500      	bpl.n	8013982 <_printf_i+0xbe>
 8013980:	b2b6      	uxth	r6, r6
 8013982:	6019      	str	r1, [r3, #0]
 8013984:	4b53      	ldr	r3, [pc, #332]	@ (8013ad4 <_printf_i+0x210>)
 8013986:	270a      	movs	r7, #10
 8013988:	9304      	str	r3, [sp, #16]
 801398a:	2a6f      	cmp	r2, #111	@ 0x6f
 801398c:	d100      	bne.n	8013990 <_printf_i+0xcc>
 801398e:	3f02      	subs	r7, #2
 8013990:	0023      	movs	r3, r4
 8013992:	2200      	movs	r2, #0
 8013994:	3343      	adds	r3, #67	@ 0x43
 8013996:	701a      	strb	r2, [r3, #0]
 8013998:	6863      	ldr	r3, [r4, #4]
 801399a:	60a3      	str	r3, [r4, #8]
 801399c:	2b00      	cmp	r3, #0
 801399e:	db06      	blt.n	80139ae <_printf_i+0xea>
 80139a0:	2104      	movs	r1, #4
 80139a2:	6822      	ldr	r2, [r4, #0]
 80139a4:	9d03      	ldr	r5, [sp, #12]
 80139a6:	438a      	bics	r2, r1
 80139a8:	6022      	str	r2, [r4, #0]
 80139aa:	4333      	orrs	r3, r6
 80139ac:	d00c      	beq.n	80139c8 <_printf_i+0x104>
 80139ae:	9d03      	ldr	r5, [sp, #12]
 80139b0:	0030      	movs	r0, r6
 80139b2:	0039      	movs	r1, r7
 80139b4:	f7ec fc5e 	bl	8000274 <__aeabi_uidivmod>
 80139b8:	9b04      	ldr	r3, [sp, #16]
 80139ba:	3d01      	subs	r5, #1
 80139bc:	5c5b      	ldrb	r3, [r3, r1]
 80139be:	702b      	strb	r3, [r5, #0]
 80139c0:	0033      	movs	r3, r6
 80139c2:	0006      	movs	r6, r0
 80139c4:	429f      	cmp	r7, r3
 80139c6:	d9f3      	bls.n	80139b0 <_printf_i+0xec>
 80139c8:	2f08      	cmp	r7, #8
 80139ca:	d109      	bne.n	80139e0 <_printf_i+0x11c>
 80139cc:	6823      	ldr	r3, [r4, #0]
 80139ce:	07db      	lsls	r3, r3, #31
 80139d0:	d506      	bpl.n	80139e0 <_printf_i+0x11c>
 80139d2:	6862      	ldr	r2, [r4, #4]
 80139d4:	6923      	ldr	r3, [r4, #16]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	dc02      	bgt.n	80139e0 <_printf_i+0x11c>
 80139da:	2330      	movs	r3, #48	@ 0x30
 80139dc:	3d01      	subs	r5, #1
 80139de:	702b      	strb	r3, [r5, #0]
 80139e0:	9b03      	ldr	r3, [sp, #12]
 80139e2:	1b5b      	subs	r3, r3, r5
 80139e4:	6123      	str	r3, [r4, #16]
 80139e6:	9b07      	ldr	r3, [sp, #28]
 80139e8:	0021      	movs	r1, r4
 80139ea:	9300      	str	r3, [sp, #0]
 80139ec:	9805      	ldr	r0, [sp, #20]
 80139ee:	9b06      	ldr	r3, [sp, #24]
 80139f0:	aa09      	add	r2, sp, #36	@ 0x24
 80139f2:	f7ff fef7 	bl	80137e4 <_printf_common>
 80139f6:	3001      	adds	r0, #1
 80139f8:	d148      	bne.n	8013a8c <_printf_i+0x1c8>
 80139fa:	2001      	movs	r0, #1
 80139fc:	4240      	negs	r0, r0
 80139fe:	b00b      	add	sp, #44	@ 0x2c
 8013a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a02:	2220      	movs	r2, #32
 8013a04:	6809      	ldr	r1, [r1, #0]
 8013a06:	430a      	orrs	r2, r1
 8013a08:	6022      	str	r2, [r4, #0]
 8013a0a:	2278      	movs	r2, #120	@ 0x78
 8013a0c:	4932      	ldr	r1, [pc, #200]	@ (8013ad8 <_printf_i+0x214>)
 8013a0e:	9104      	str	r1, [sp, #16]
 8013a10:	0021      	movs	r1, r4
 8013a12:	3145      	adds	r1, #69	@ 0x45
 8013a14:	700a      	strb	r2, [r1, #0]
 8013a16:	6819      	ldr	r1, [r3, #0]
 8013a18:	6822      	ldr	r2, [r4, #0]
 8013a1a:	c940      	ldmia	r1!, {r6}
 8013a1c:	0610      	lsls	r0, r2, #24
 8013a1e:	d402      	bmi.n	8013a26 <_printf_i+0x162>
 8013a20:	0650      	lsls	r0, r2, #25
 8013a22:	d500      	bpl.n	8013a26 <_printf_i+0x162>
 8013a24:	b2b6      	uxth	r6, r6
 8013a26:	6019      	str	r1, [r3, #0]
 8013a28:	07d3      	lsls	r3, r2, #31
 8013a2a:	d502      	bpl.n	8013a32 <_printf_i+0x16e>
 8013a2c:	2320      	movs	r3, #32
 8013a2e:	4313      	orrs	r3, r2
 8013a30:	6023      	str	r3, [r4, #0]
 8013a32:	2e00      	cmp	r6, #0
 8013a34:	d001      	beq.n	8013a3a <_printf_i+0x176>
 8013a36:	2710      	movs	r7, #16
 8013a38:	e7aa      	b.n	8013990 <_printf_i+0xcc>
 8013a3a:	2220      	movs	r2, #32
 8013a3c:	6823      	ldr	r3, [r4, #0]
 8013a3e:	4393      	bics	r3, r2
 8013a40:	6023      	str	r3, [r4, #0]
 8013a42:	e7f8      	b.n	8013a36 <_printf_i+0x172>
 8013a44:	681a      	ldr	r2, [r3, #0]
 8013a46:	680d      	ldr	r5, [r1, #0]
 8013a48:	1d10      	adds	r0, r2, #4
 8013a4a:	6949      	ldr	r1, [r1, #20]
 8013a4c:	6018      	str	r0, [r3, #0]
 8013a4e:	6813      	ldr	r3, [r2, #0]
 8013a50:	062e      	lsls	r6, r5, #24
 8013a52:	d501      	bpl.n	8013a58 <_printf_i+0x194>
 8013a54:	6019      	str	r1, [r3, #0]
 8013a56:	e002      	b.n	8013a5e <_printf_i+0x19a>
 8013a58:	066d      	lsls	r5, r5, #25
 8013a5a:	d5fb      	bpl.n	8013a54 <_printf_i+0x190>
 8013a5c:	8019      	strh	r1, [r3, #0]
 8013a5e:	2300      	movs	r3, #0
 8013a60:	9d03      	ldr	r5, [sp, #12]
 8013a62:	6123      	str	r3, [r4, #16]
 8013a64:	e7bf      	b.n	80139e6 <_printf_i+0x122>
 8013a66:	681a      	ldr	r2, [r3, #0]
 8013a68:	1d11      	adds	r1, r2, #4
 8013a6a:	6019      	str	r1, [r3, #0]
 8013a6c:	6815      	ldr	r5, [r2, #0]
 8013a6e:	2100      	movs	r1, #0
 8013a70:	0028      	movs	r0, r5
 8013a72:	6862      	ldr	r2, [r4, #4]
 8013a74:	f000 f844 	bl	8013b00 <memchr>
 8013a78:	2800      	cmp	r0, #0
 8013a7a:	d001      	beq.n	8013a80 <_printf_i+0x1bc>
 8013a7c:	1b40      	subs	r0, r0, r5
 8013a7e:	6060      	str	r0, [r4, #4]
 8013a80:	6863      	ldr	r3, [r4, #4]
 8013a82:	6123      	str	r3, [r4, #16]
 8013a84:	2300      	movs	r3, #0
 8013a86:	9a03      	ldr	r2, [sp, #12]
 8013a88:	7013      	strb	r3, [r2, #0]
 8013a8a:	e7ac      	b.n	80139e6 <_printf_i+0x122>
 8013a8c:	002a      	movs	r2, r5
 8013a8e:	6923      	ldr	r3, [r4, #16]
 8013a90:	9906      	ldr	r1, [sp, #24]
 8013a92:	9805      	ldr	r0, [sp, #20]
 8013a94:	9d07      	ldr	r5, [sp, #28]
 8013a96:	47a8      	blx	r5
 8013a98:	3001      	adds	r0, #1
 8013a9a:	d0ae      	beq.n	80139fa <_printf_i+0x136>
 8013a9c:	6823      	ldr	r3, [r4, #0]
 8013a9e:	079b      	lsls	r3, r3, #30
 8013aa0:	d415      	bmi.n	8013ace <_printf_i+0x20a>
 8013aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013aa4:	68e0      	ldr	r0, [r4, #12]
 8013aa6:	4298      	cmp	r0, r3
 8013aa8:	daa9      	bge.n	80139fe <_printf_i+0x13a>
 8013aaa:	0018      	movs	r0, r3
 8013aac:	e7a7      	b.n	80139fe <_printf_i+0x13a>
 8013aae:	0022      	movs	r2, r4
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	9906      	ldr	r1, [sp, #24]
 8013ab4:	9805      	ldr	r0, [sp, #20]
 8013ab6:	9e07      	ldr	r6, [sp, #28]
 8013ab8:	3219      	adds	r2, #25
 8013aba:	47b0      	blx	r6
 8013abc:	3001      	adds	r0, #1
 8013abe:	d09c      	beq.n	80139fa <_printf_i+0x136>
 8013ac0:	3501      	adds	r5, #1
 8013ac2:	68e3      	ldr	r3, [r4, #12]
 8013ac4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ac6:	1a9b      	subs	r3, r3, r2
 8013ac8:	42ab      	cmp	r3, r5
 8013aca:	dcf0      	bgt.n	8013aae <_printf_i+0x1ea>
 8013acc:	e7e9      	b.n	8013aa2 <_printf_i+0x1de>
 8013ace:	2500      	movs	r5, #0
 8013ad0:	e7f7      	b.n	8013ac2 <_printf_i+0x1fe>
 8013ad2:	46c0      	nop			@ (mov r8, r8)
 8013ad4:	080141eb 	.word	0x080141eb
 8013ad8:	0801420d 	.word	0x0801420d

08013adc <_sbrk_r>:
 8013adc:	2300      	movs	r3, #0
 8013ade:	b570      	push	{r4, r5, r6, lr}
 8013ae0:	4d06      	ldr	r5, [pc, #24]	@ (8013afc <_sbrk_r+0x20>)
 8013ae2:	0004      	movs	r4, r0
 8013ae4:	0008      	movs	r0, r1
 8013ae6:	602b      	str	r3, [r5, #0]
 8013ae8:	f7ef ff30 	bl	800394c <_sbrk>
 8013aec:	1c43      	adds	r3, r0, #1
 8013aee:	d103      	bne.n	8013af8 <_sbrk_r+0x1c>
 8013af0:	682b      	ldr	r3, [r5, #0]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d000      	beq.n	8013af8 <_sbrk_r+0x1c>
 8013af6:	6023      	str	r3, [r4, #0]
 8013af8:	bd70      	pop	{r4, r5, r6, pc}
 8013afa:	46c0      	nop			@ (mov r8, r8)
 8013afc:	2000357c 	.word	0x2000357c

08013b00 <memchr>:
 8013b00:	b2c9      	uxtb	r1, r1
 8013b02:	1882      	adds	r2, r0, r2
 8013b04:	4290      	cmp	r0, r2
 8013b06:	d101      	bne.n	8013b0c <memchr+0xc>
 8013b08:	2000      	movs	r0, #0
 8013b0a:	4770      	bx	lr
 8013b0c:	7803      	ldrb	r3, [r0, #0]
 8013b0e:	428b      	cmp	r3, r1
 8013b10:	d0fb      	beq.n	8013b0a <memchr+0xa>
 8013b12:	3001      	adds	r0, #1
 8013b14:	e7f6      	b.n	8013b04 <memchr+0x4>

08013b16 <_realloc_r>:
 8013b16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b18:	0006      	movs	r6, r0
 8013b1a:	000c      	movs	r4, r1
 8013b1c:	0015      	movs	r5, r2
 8013b1e:	2900      	cmp	r1, #0
 8013b20:	d105      	bne.n	8013b2e <_realloc_r+0x18>
 8013b22:	0011      	movs	r1, r2
 8013b24:	f7ff fc70 	bl	8013408 <_malloc_r>
 8013b28:	0004      	movs	r4, r0
 8013b2a:	0020      	movs	r0, r4
 8013b2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013b2e:	2a00      	cmp	r2, #0
 8013b30:	d103      	bne.n	8013b3a <_realloc_r+0x24>
 8013b32:	f7ff fbfd 	bl	8013330 <_free_r>
 8013b36:	002c      	movs	r4, r5
 8013b38:	e7f7      	b.n	8013b2a <_realloc_r+0x14>
 8013b3a:	f000 f81c 	bl	8013b76 <_malloc_usable_size_r>
 8013b3e:	0007      	movs	r7, r0
 8013b40:	4285      	cmp	r5, r0
 8013b42:	d802      	bhi.n	8013b4a <_realloc_r+0x34>
 8013b44:	0843      	lsrs	r3, r0, #1
 8013b46:	42ab      	cmp	r3, r5
 8013b48:	d3ef      	bcc.n	8013b2a <_realloc_r+0x14>
 8013b4a:	0029      	movs	r1, r5
 8013b4c:	0030      	movs	r0, r6
 8013b4e:	f7ff fc5b 	bl	8013408 <_malloc_r>
 8013b52:	9001      	str	r0, [sp, #4]
 8013b54:	2800      	cmp	r0, #0
 8013b56:	d101      	bne.n	8013b5c <_realloc_r+0x46>
 8013b58:	9c01      	ldr	r4, [sp, #4]
 8013b5a:	e7e6      	b.n	8013b2a <_realloc_r+0x14>
 8013b5c:	002a      	movs	r2, r5
 8013b5e:	42bd      	cmp	r5, r7
 8013b60:	d900      	bls.n	8013b64 <_realloc_r+0x4e>
 8013b62:	003a      	movs	r2, r7
 8013b64:	0021      	movs	r1, r4
 8013b66:	9801      	ldr	r0, [sp, #4]
 8013b68:	f7ff fbd8 	bl	801331c <memcpy>
 8013b6c:	0021      	movs	r1, r4
 8013b6e:	0030      	movs	r0, r6
 8013b70:	f7ff fbde 	bl	8013330 <_free_r>
 8013b74:	e7f0      	b.n	8013b58 <_realloc_r+0x42>

08013b76 <_malloc_usable_size_r>:
 8013b76:	1f0b      	subs	r3, r1, #4
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	1f18      	subs	r0, r3, #4
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	da01      	bge.n	8013b84 <_malloc_usable_size_r+0xe>
 8013b80:	580b      	ldr	r3, [r1, r0]
 8013b82:	18c0      	adds	r0, r0, r3
 8013b84:	4770      	bx	lr
	...

08013b88 <_init>:
 8013b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b8a:	46c0      	nop			@ (mov r8, r8)
 8013b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b8e:	bc08      	pop	{r3}
 8013b90:	469e      	mov	lr, r3
 8013b92:	4770      	bx	lr

08013b94 <_fini>:
 8013b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b96:	46c0      	nop			@ (mov r8, r8)
 8013b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b9a:	bc08      	pop	{r3}
 8013b9c:	469e      	mov	lr, r3
 8013b9e:	4770      	bx	lr
