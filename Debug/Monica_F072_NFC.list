
Monica_F072_NFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010af4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  08010bb4  08010bb4  00011bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011758  08011758  000133b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08011758  08011758  000133b8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08011758  08011758  000133b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011758  08011758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801175c  0801175c  0001275c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003b8  20000000  08011760  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002504  200003b8  08011b18  000133b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028bc  08011b18  000138bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000133b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046b4c  00000000  00000000  000133e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b5a6  00000000  00000000  00059f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001bd45  00000000  00000000  000654d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025b0  00000000  00000000  00081218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000029ea  00000000  00000000  000837c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d0b  00000000  00000000  000861b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00051390  00000000  00000000  0009aebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c492a  00000000  00000000  000ec24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b0b77  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b20  00000000  00000000  001b0bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001b76dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003b8 	.word	0x200003b8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08010b9c 	.word	0x08010b9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003bc 	.word	0x200003bc
 8000104:	08010b9c 	.word	0x08010b9c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	@ 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	@ 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	@ 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_llsr>:
 8000454:	40d0      	lsrs	r0, r2
 8000456:	000b      	movs	r3, r1
 8000458:	40d1      	lsrs	r1, r2
 800045a:	469c      	mov	ip, r3
 800045c:	3a20      	subs	r2, #32
 800045e:	40d3      	lsrs	r3, r2
 8000460:	4318      	orrs	r0, r3
 8000462:	4252      	negs	r2, r2
 8000464:	4663      	mov	r3, ip
 8000466:	4093      	lsls	r3, r2
 8000468:	4318      	orrs	r0, r3
 800046a:	4770      	bx	lr

0800046c <__aeabi_llsl>:
 800046c:	4091      	lsls	r1, r2
 800046e:	0003      	movs	r3, r0
 8000470:	4090      	lsls	r0, r2
 8000472:	469c      	mov	ip, r3
 8000474:	3a20      	subs	r2, #32
 8000476:	4093      	lsls	r3, r2
 8000478:	4319      	orrs	r1, r3
 800047a:	4252      	negs	r2, r2
 800047c:	4663      	mov	r3, ip
 800047e:	40d3      	lsrs	r3, r2
 8000480:	4319      	orrs	r1, r3
 8000482:	4770      	bx	lr

08000484 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000484:	b510      	push	{r4, lr}
  return HAL_GetTick();
 8000486:	f004 faf9 	bl	8004a7c <HAL_GetTick>
}
 800048a:	bd10      	pop	{r4, pc}

0800048c <MX_SPI1_Init>:
  HAL_StatusTypeDef ret = HAL_OK;

  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800048c:	22e0      	movs	r2, #224	@ 0xe0
 800048e:	00d2      	lsls	r2, r2, #3
{
 8000490:	b510      	push	{r4, lr}
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000492:	60c2      	str	r2, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000494:	2201      	movs	r2, #1
  hspi->Instance = SPI1;
 8000496:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <MX_SPI1_Init+0x44>)
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000498:	6142      	str	r2, [r0, #20]
  hspi->Instance = SPI1;
 800049a:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800049c:	2382      	movs	r3, #130	@ 0x82
  hspi->Init.NSS = SPI_NSS_SOFT;
 800049e:	2280      	movs	r2, #128	@ 0x80
  hspi->Init.Mode = SPI_MODE_MASTER;
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80004a4:	2300      	movs	r3, #0
  hspi->Init.NSS = SPI_NSS_SOFT;
 80004a6:	0092      	lsls	r2, r2, #2
 80004a8:	6182      	str	r2, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80004aa:	3ad9      	subs	r2, #217	@ 0xd9
 80004ac:	3aff      	subs	r2, #255	@ 0xff
 80004ae:	61c2      	str	r2, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 7;
 80004b0:	3a21      	subs	r2, #33	@ 0x21
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80004b2:	6083      	str	r3, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b4:	6103      	str	r3, [r0, #16]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b6:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80004b8:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ba:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004bc:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004be:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->Init.CRCPolynomial = 7;
 80004c0:	62c2      	str	r2, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80004c2:	f006 f849 	bl	8006558 <HAL_SPI_Init>
 80004c6:	1e43      	subs	r3, r0, #1
 80004c8:	4198      	sbcs	r0, r3
  {
    ret = HAL_ERROR;
  }

  return ret;
 80004ca:	b2c0      	uxtb	r0, r0
}
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	40013000 	.word	0x40013000

080004d4 <BSP_SPI1_Init>:
{
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  hspi1.Instance  = SPI1;
 80004d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000588 <BSP_SPI1_Init+0xb4>)
  if(SPI1InitCounter++ == 0)
 80004d8:	4a2c      	ldr	r2, [pc, #176]	@ (800058c <BSP_SPI1_Init+0xb8>)
  hspi1.Instance  = SPI1;
 80004da:	4d2d      	ldr	r5, [pc, #180]	@ (8000590 <BSP_SPI1_Init+0xbc>)
{
 80004dc:	b089      	sub	sp, #36	@ 0x24
  hspi1.Instance  = SPI1;
 80004de:	602b      	str	r3, [r5, #0]
  if(SPI1InitCounter++ == 0)
 80004e0:	6813      	ldr	r3, [r2, #0]
 80004e2:	1c59      	adds	r1, r3, #1
 80004e4:	6011      	str	r1, [r2, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d002      	beq.n	80004f0 <BSP_SPI1_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
 80004ea:	2000      	movs	r0, #0
}
 80004ec:	b009      	add	sp, #36	@ 0x24
 80004ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80004f0:	0028      	movs	r0, r5
 80004f2:	f006 fbcd 	bl	8006c90 <HAL_SPI_GetState>
 80004f6:	1e04      	subs	r4, r0, #0
 80004f8:	d1f7      	bne.n	80004ea <BSP_SPI1_Init+0x16>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004fa:	2180      	movs	r1, #128	@ 0x80
 80004fc:	4b25      	ldr	r3, [pc, #148]	@ (8000594 <BSP_SPI1_Init+0xc0>)
 80004fe:	0149      	lsls	r1, r1, #5
 8000500:	699a      	ldr	r2, [r3, #24]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000502:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000504:	430a      	orrs	r2, r1
 8000506:	619a      	str	r2, [r3, #24]
 8000508:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050a:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800050c:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000510:	9201      	str	r2, [sp, #4]
 8000512:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	695a      	ldr	r2, [r3, #20]
 8000516:	0289      	lsls	r1, r1, #10
 8000518:	430a      	orrs	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	400b      	ands	r3, r1
 8000522:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000524:	9007      	str	r0, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000526:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800052a:	2320      	movs	r3, #32
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800052c:	a903      	add	r1, sp, #12
 800052e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000530:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000534:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000536:	f004 fbe3 	bl	8004d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800053a:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800053c:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800053e:	a903      	add	r1, sp, #12
 8000540:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000542:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000544:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800054a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800054c:	f004 fbd8 	bl	8004d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000550:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000552:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000554:	a903      	add	r1, sp, #12
 8000556:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000558:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000560:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000562:	f004 fbcd 	bl	8004d00 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000566:	0022      	movs	r2, r4
 8000568:	0021      	movs	r1, r4
 800056a:	2019      	movs	r0, #25
 800056c:	f004 fa9e 	bl	8004aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000570:	2019      	movs	r0, #25
 8000572:	f004 fac5 	bl	8004b00 <HAL_NVIC_EnableIRQ>
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000576:	0028      	movs	r0, r5
 8000578:	f7ff ff88 	bl	800048c <MX_SPI1_Init>
 800057c:	2800      	cmp	r0, #0
 800057e:	d0b4      	beq.n	80004ea <BSP_SPI1_Init+0x16>
                ret = BSP_ERROR_BUS_FAILURE;
 8000580:	2008      	movs	r0, #8
 8000582:	4240      	negs	r0, r0
  return ret;
 8000584:	e7b2      	b.n	80004ec <BSP_SPI1_Init+0x18>
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	40013000 	.word	0x40013000
 800058c:	200003d4 	.word	0x200003d4
 8000590:	200003d8 	.word	0x200003d8
 8000594:	40021000 	.word	0x40021000

08000598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000598:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	2101      	movs	r1, #1
 800059c:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <MX_DMA_Init+0x28>)

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800059e:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a0:	695a      	ldr	r2, [r3, #20]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	400b      	ands	r3, r1
 80005ac:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80005ae:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80005b2:	f004 fa7b 	bl	8004aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80005b6:	200a      	movs	r0, #10
 80005b8:	f004 faa2 	bl	8004b00 <HAL_NVIC_EnableIRQ>

}
 80005bc:	bd07      	pop	{r0, r1, r2, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	40021000 	.word	0x40021000

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	2214      	movs	r2, #20
 80005ca:	2100      	movs	r1, #0
 80005cc:	a803      	add	r0, sp, #12
 80005ce:	f00f fe7b 	bl	80102c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2180      	movs	r1, #128	@ 0x80
 80005d4:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <MX_GPIO_Init+0x9c>)
 80005d6:	0289      	lsls	r1, r1, #10
 80005d8:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005da:	2590      	movs	r5, #144	@ 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	430a      	orrs	r2, r1
 80005de:	615a      	str	r2, [r3, #20]
 80005e0:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005e2:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	02c9      	lsls	r1, r1, #11
 80005f0:	430a      	orrs	r2, r1
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	695b      	ldr	r3, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80005f6:	4e1b      	ldr	r6, [pc, #108]	@ (8000664 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005fa:	0028      	movs	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fc:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000604:	f004 fc40 	bl	8004e88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000608:	2200      	movs	r2, #0
 800060a:	0031      	movs	r1, r6
 800060c:	4816      	ldr	r0, [pc, #88]	@ (8000668 <MX_GPIO_Init+0xa4>)
 800060e:	f004 fc3b 	bl	8004e88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000612:	2302      	movs	r3, #2
 8000614:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000616:	2388      	movs	r3, #136	@ 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800061c:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	a903      	add	r1, sp, #12

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000622:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f004 fb6b 	bl	8004d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800062a:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	0028      	movs	r0, r5
 800062e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000630:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f004 fb62 	bl	8004d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	a903      	add	r1, sp, #12
 800063e:	480a      	ldr	r0, [pc, #40]	@ (8000668 <MX_GPIO_Init+0xa4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000640:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000648:	f004 fb5a 	bl	8004d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800064c:	0022      	movs	r2, r4
 800064e:	0021      	movs	r1, r4
 8000650:	2005      	movs	r0, #5
 8000652:	f004 fa2b 	bl	8004aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000656:	2005      	movs	r0, #5
 8000658:	f004 fa52 	bl	8004b00 <HAL_NVIC_EnableIRQ>

}
 800065c:	b009      	add	sp, #36	@ 0x24
 800065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	00001c07 	.word	0x00001c07
 8000668:	48000400 	.word	0x48000400

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b510      	push	{r4, lr}
 800066e:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000670:	2230      	movs	r2, #48	@ 0x30
 8000672:	2100      	movs	r1, #0
 8000674:	a80c      	add	r0, sp, #48	@ 0x30
 8000676:	f00f fe27 	bl	80102c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	2210      	movs	r2, #16
 800067c:	2100      	movs	r1, #0
 800067e:	4668      	mov	r0, sp
 8000680:	f00f fe22 	bl	80102c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000684:	221c      	movs	r2, #28
 8000686:	2100      	movs	r1, #0
 8000688:	a804      	add	r0, sp, #16
 800068a:	f00f fe1d 	bl	80102c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800068e:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000690:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000694:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000696:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f005 fa70 	bl	8005b7c <HAL_RCC_OscConfig>
 800069c:	2800      	cmp	r0, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80006ac:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ae:	0021      	movs	r1, r4
 80006b0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80006b2:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b4:	f005 fce8 	bl	8006088 <HAL_RCC_ClockConfig>
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x54>
 80006bc:	b672      	cpsid	i
  while (1)
 80006be:	e7fe      	b.n	80006be <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <SystemClock_Config+0x70>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006c2:	9006      	str	r0, [sp, #24]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006c4:	9007      	str	r0, [sp, #28]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006c6:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c8:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80006ca:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006cc:	f005 fd76 	bl	80061bc <HAL_RCCEx_PeriphCLKConfig>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x6c>
 80006d4:	b672      	cpsid	i
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <SystemClock_Config+0x6a>
}
 80006d8:	b018      	add	sp, #96	@ 0x60
 80006da:	bd10      	pop	{r4, pc}
 80006dc:	00020003 	.word	0x00020003

080006e0 <main>:
{
 80006e0:	b510      	push	{r4, lr}
  HAL_Init();
 80006e2:	f004 f9af 	bl	8004a44 <HAL_Init>
  SystemClock_Config();
 80006e6:	f7ff ffc1 	bl	800066c <SystemClock_Config>
  MX_GPIO_Init();
 80006ea:	f7ff ff6b 	bl	80005c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ee:	f7ff ff53 	bl	8000598 <MX_DMA_Init>
  MX_TIM1_Init();
 80006f2:	f000 ff2b 	bl	800154c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006f6:	f000 ff83 	bl	8001600 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80006fa:	f000 ffd9 	bl	80016b0 <MX_USB_PCD_Init>
  MX_X_CUBE_NFC6_Init();
 80006fe:	f00e ff0b 	bl	800f518 <MX_X_CUBE_NFC6_Init>
  MX_USB_DEVICE_Init();
 8000702:	f00d fb17 	bl	800dd34 <MX_USB_DEVICE_Init>
  MX_X_CUBE_NFC6_Process();
 8000706:	f00e fe68 	bl	800f3da <MX_X_CUBE_NFC6_Process>
	  if( !demoIni() )
 800070a:	f00f f9a3 	bl	800fa54 <demoIni>
 800070e:	2800      	cmp	r0, #0
 8000710:	d106      	bne.n	8000720 <main+0x40>
	      platformLog("Read RFID failed..\r\n");
 8000712:	480a      	ldr	r0, [pc, #40]	@ (800073c <main+0x5c>)
 8000714:	f00f fcf2 	bl	80100fc <logUsart>
	        platformDelay(100);
 8000718:	2064      	movs	r0, #100	@ 0x64
 800071a:	f004 f9b5 	bl	8004a88 <HAL_Delay>
	      while(1)
 800071e:	e7fb      	b.n	8000718 <main+0x38>
	      platformLog("Read RFID succeeded..\r\n");
 8000720:	4807      	ldr	r0, [pc, #28]	@ (8000740 <main+0x60>)
 8000722:	f00f fceb 	bl	80100fc <logUsart>
 8000726:	2406      	movs	r4, #6
	        platformDelay(200);
 8000728:	20c8      	movs	r0, #200	@ 0xc8
	      for (int i = 0; i < 6; i++)
 800072a:	3c01      	subs	r4, #1
	        platformDelay(200);
 800072c:	f004 f9ac 	bl	8004a88 <HAL_Delay>
	      for (int i = 0; i < 6; i++)
 8000730:	2c00      	cmp	r4, #0
 8000732:	d1f9      	bne.n	8000728 <main+0x48>
		  demoCycle();
 8000734:	f00f fad4 	bl	800fce0 <demoCycle>
	  while(1){
 8000738:	e7fc      	b.n	8000734 <main+0x54>
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	08010be4 	.word	0x08010be4
 8000740:	08010bf9 	.word	0x08010bf9

08000744 <Error_Handler>:
 8000744:	b672      	cpsid	i
  while (1)
 8000746:	e7fe      	b.n	8000746 <Error_Handler+0x2>

08000748 <attachParityInformation.constprop.0>:
    cmd[3] = HIGH_BYTE( crc );

    return ERR_NONE;
}

static int8_t attachParityInformation ( uint16_t *cmd, size_t length )
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i = 0;
    for ( i = 0; i < length; i++ )
    {
        if ( mccParityOdd( cmd[i] ) == 1 )
        {
            cmd[i] |= 0x0100;
 800074a:	2780      	movs	r7, #128	@ 0x80
static int8_t attachParityInformation ( uint16_t *cmd, size_t length )
 800074c:	0005      	movs	r5, r0
    for ( i = 0; i < length; i++ )
 800074e:	2600      	movs	r6, #0
 8000750:	4c09      	ldr	r4, [pc, #36]	@ (8000778 <attachParityInformation.constprop.0+0x30>)
            cmd[i] |= 0x0100;
 8000752:	007f      	lsls	r7, r7, #1
        if ( mccParityOdd( cmd[i] ) == 1 )
 8000754:	8820      	ldrh	r0, [r4, #0]
 8000756:	f000 fd7e 	bl	8001256 <mccParityOdd>
 800075a:	8823      	ldrh	r3, [r4, #0]
 800075c:	2801      	cmp	r0, #1
 800075e:	d107      	bne.n	8000770 <attachParityInformation.constprop.0+0x28>
            cmd[i] |= 0x0100;
 8000760:	433b      	orrs	r3, r7
    for ( i = 0; i < length; i++ )
 8000762:	3601      	adds	r6, #1
 8000764:	8023      	strh	r3, [r4, #0]
 8000766:	3402      	adds	r4, #2
 8000768:	42ae      	cmp	r6, r5
 800076a:	d1f3      	bne.n	8000754 <attachParityInformation.constprop.0+0xc>
            cmd[i] &= ~0x0100;
        }
    }

    return ERR_NONE;
}
 800076c:	2000      	movs	r0, #0
 800076e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cmd[i] &= ~0x0100;
 8000770:	4a02      	ldr	r2, [pc, #8]	@ (800077c <attachParityInformation.constprop.0+0x34>)
 8000772:	4013      	ands	r3, r2
 8000774:	e7f5      	b.n	8000762 <attachParityInformation.constprop.0+0x1a>
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	20000448 	.word	0x20000448
 800077c:	fffffeff 	.word	0xfffffeff

08000780 <mccSetKey>:
{
 8000780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint64_t bigKey = 0;
 8000782:	2400      	movs	r4, #0
{
 8000784:	0007      	movs	r7, r0
    MCC_DBG( "mcc set key\n" );
 8000786:	4816      	ldr	r0, [pc, #88]	@ (80007e0 <mccSetKey+0x60>)
 8000788:	f00f fcb8 	bl	80100fc <logUsart>
    uint64_t bigKey = 0;
 800078c:	0026      	movs	r6, r4
    for ( i = 0; i < 6; i++ )
 800078e:	0025      	movs	r5, r4
    if ( key == 0 )
 8000790:	42a7      	cmp	r7, r4
 8000792:	d103      	bne.n	800079c <mccSetKey+0x1c>
        MCC_DBG( "no key passed!\n" );
 8000794:	4813      	ldr	r0, [pc, #76]	@ (80007e4 <mccSetKey+0x64>)
 8000796:	f00f fcb1 	bl	80100fc <logUsart>
}
 800079a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        bigKey |= ((uint64_t)key[i] << ((5-i)*8));
 800079c:	00ea      	lsls	r2, r5, #3
 800079e:	4252      	negs	r2, r2
 80007a0:	5d78      	ldrb	r0, [r7, r5]
 80007a2:	2100      	movs	r1, #0
 80007a4:	3228      	adds	r2, #40	@ 0x28
 80007a6:	f7ff fe61 	bl	800046c <__aeabi_llsl>
    for ( i = 0; i < 6; i++ )
 80007aa:	3501      	adds	r5, #1
        bigKey |= ((uint64_t)key[i] << ((5-i)*8));
 80007ac:	4304      	orrs	r4, r0
 80007ae:	430e      	orrs	r6, r1
    for ( i = 0; i < 6; i++ )
 80007b0:	2d06      	cmp	r5, #6
 80007b2:	d1f3      	bne.n	800079c <mccSetKey+0x1c>
    MCC_DBG( "  orig key:" );
 80007b4:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <mccSetKey+0x68>)
 80007b6:	f00f fca1 	bl	80100fc <logUsart>
    MCC_DBG( "  trans key: " );
 80007ba:	480c      	ldr	r0, [pc, #48]	@ (80007ec <mccSetKey+0x6c>)
 80007bc:	f00f fc9e 	bl	80100fc <logUsart>
    MCC_DBG( " %x %x %x %x\n", (uint16_t)(bigKey >> 48),
 80007c0:	b2a1      	uxth	r1, r4
 80007c2:	0c23      	lsrs	r3, r4, #16
 80007c4:	b2b2      	uxth	r2, r6
 80007c6:	9100      	str	r1, [sp, #0]
 80007c8:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <mccSetKey+0x70>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	f00f fc96 	bl	80100fc <logUsart>
    mccCryptoInit( handle, bigKey );
 80007d0:	4908      	ldr	r1, [pc, #32]	@ (80007f4 <mccSetKey+0x74>)
 80007d2:	0022      	movs	r2, r4
 80007d4:	0033      	movs	r3, r6
 80007d6:	6808      	ldr	r0, [r1, #0]
 80007d8:	f000 fb4b 	bl	8000e72 <mccCryptoInit>
 80007dc:	e7dd      	b.n	800079a <mccSetKey+0x1a>
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	08010c1d 	.word	0x08010c1d
 80007e4:	08010c2a 	.word	0x08010c2a
 80007e8:	08010c3a 	.word	0x08010c3a
 80007ec:	08010c46 	.word	0x08010c46
 80007f0:	08010c54 	.word	0x08010c54
 80007f4:	20000000 	.word	0x20000000

080007f8 <mccResetCipher>:
{
 80007f8:	b510      	push	{r4, lr}
    MCC_DBG( "mcc reset\n" );
 80007fa:	4804      	ldr	r0, [pc, #16]	@ (800080c <mccResetCipher+0x14>)
 80007fc:	f00f fc7e 	bl	80100fc <logUsart>
    mccCryptoReset( handle, 0 );
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <mccResetCipher+0x18>)
 8000802:	2100      	movs	r1, #0
 8000804:	6818      	ldr	r0, [r3, #0]
 8000806:	f000 fb57 	bl	8000eb8 <mccCryptoReset>
}
 800080a:	bd10      	pop	{r4, pc}
 800080c:	08010c62 	.word	0x08010c62
 8000810:	20000000 	.word	0x20000000

08000814 <mccInitialize>:
{
 8000814:	b510      	push	{r4, lr}
    MCC_DBG( "mcc init\n" );
 8000816:	4803      	ldr	r0, [pc, #12]	@ (8000824 <mccInitialize+0x10>)
 8000818:	f00f fc70 	bl	80100fc <logUsart>
    mccResetCipher();
 800081c:	f7ff ffec 	bl	80007f8 <mccResetCipher>
}
 8000820:	2000      	movs	r0, #0
 8000822:	bd10      	pop	{r4, pc}
 8000824:	08010c6d 	.word	0x08010c6d

08000828 <mccAuthenticateStep1>:
{
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
    MCC_DBG( "A: mcc auth step 1\n" );
 800082a:	4d57      	ldr	r5, [pc, #348]	@ (8000988 <mccAuthenticateStep1+0x160>)
{
 800082c:	b08b      	sub	sp, #44	@ 0x2c
 800082e:	0006      	movs	r6, r0
    MCC_DBG( "A: mcc auth step 1\n" );
 8000830:	0028      	movs	r0, r5
{
 8000832:	001f      	movs	r7, r3
 8000834:	0014      	movs	r4, r2
 8000836:	9105      	str	r1, [sp, #20]
    MCC_DBG( "A: mcc auth step 1\n" );
 8000838:	f00f fc60 	bl	80100fc <logUsart>
    if ( uidLength != UID_LEN || uid == 0 )
 800083c:	2f04      	cmp	r7, #4
 800083e:	d101      	bne.n	8000844 <mccAuthenticateStep1+0x1c>
 8000840:	2c00      	cmp	r4, #0
 8000842:	d10a      	bne.n	800085a <mccAuthenticateStep1+0x32>
        MCC_DBG( "E: uid incorrect! Expected %d bytes, got %d -> abort!\n", UID_LEN, uidLength );
 8000844:	003a      	movs	r2, r7
 8000846:	2104      	movs	r1, #4
 8000848:	4850      	ldr	r0, [pc, #320]	@ (800098c <mccAuthenticateStep1+0x164>)
 800084a:	f00f fc57 	bl	80100fc <logUsart>
        MCC_DBG( "I; Failed authentication step 1\n" );
 800084e:	4850      	ldr	r0, [pc, #320]	@ (8000990 <mccAuthenticateStep1+0x168>)
 8000850:	f00f fc54 	bl	80100fc <logUsart>
        rv = ERR_PARAM;
 8000854:	2607      	movs	r6, #7
    return rv;
 8000856:	b270      	sxtb	r0, r6
 8000858:	e04e      	b.n	80008f8 <mccAuthenticateStep1+0xd0>
    if ( key == 0 )
 800085a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800085c:	2b00      	cmp	r3, #0
 800085e:	d103      	bne.n	8000868 <mccAuthenticateStep1+0x40>
        MCC_DBG( "E: no key given!\n" );
 8000860:	484c      	ldr	r0, [pc, #304]	@ (8000994 <mccAuthenticateStep1+0x16c>)
 8000862:	f00f fc4b 	bl	80100fc <logUsart>
 8000866:	e7f2      	b.n	800084e <mccAuthenticateStep1+0x26>
    MCC_DBG( "A: mcc auth step 1\n" );
 8000868:	0028      	movs	r0, r5
 800086a:	f00f fc47 	bl	80100fc <logUsart>
    cmd[0] = keySelect;
 800086e:	ad07      	add	r5, sp, #28
    cmd[1] = block;
 8000870:	9b05      	ldr	r3, [sp, #20]
    crc = rfalCrcCalculateCcitt( CRC_PRELOAD_VALUE, cmd, CRC_LEN );
 8000872:	2202      	movs	r2, #2
 8000874:	0029      	movs	r1, r5
 8000876:	4848      	ldr	r0, [pc, #288]	@ (8000998 <mccAuthenticateStep1+0x170>)
    cmd[0] = keySelect;
 8000878:	702e      	strb	r6, [r5, #0]
    cmd[1] = block;
 800087a:	706b      	strb	r3, [r5, #1]
    crc = rfalCrcCalculateCcitt( CRC_PRELOAD_VALUE, cmd, CRC_LEN );
 800087c:	f007 fd36 	bl	80082ec <rfalCrcCalculateCcitt>
        MifareBuffer[i] = cmd[i];
 8000880:	4b46      	ldr	r3, [pc, #280]	@ (800099c <mccAuthenticateStep1+0x174>)
    cmd[2] = LOW_BYTE( crc );
 8000882:	8068      	strh	r0, [r5, #2]
        MifareBuffer[i] = cmd[i];
 8000884:	9305      	str	r3, [sp, #20]
 8000886:	9a05      	ldr	r2, [sp, #20]
 8000888:	782b      	ldrb	r3, [r5, #0]
 800088a:	8013      	strh	r3, [r2, #0]
 800088c:	786b      	ldrb	r3, [r5, #1]
 800088e:	8053      	strh	r3, [r2, #2]
 8000890:	b2c3      	uxtb	r3, r0
    cmd[3] = HIGH_BYTE( crc );
 8000892:	0a00      	lsrs	r0, r0, #8
        MifareBuffer[i] = cmd[i];
 8000894:	80d0      	strh	r0, [r2, #6]
    rv = attachParityInformation( MifareBuffer, AUTH_CMD_LEN );
 8000896:	0038      	movs	r0, r7
        MifareBuffer[i] = cmd[i];
 8000898:	8093      	strh	r3, [r2, #4]
    rv = attachParityInformation( MifareBuffer, AUTH_CMD_LEN );
 800089a:	f7ff ff55 	bl	8000748 <attachParityInformation.constprop.0>
 800089e:	b2c6      	uxtb	r6, r0
    EVAL_ERR_NE_GOTO( ERR_NONE, rv, out );
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d1d8      	bne.n	8000856 <mccAuthenticateStep1+0x2e>
    if( mccCryptoIsActive( handle ) == 1 ) 
 80008a4:	4d3e      	ldr	r5, [pc, #248]	@ (80009a0 <mccAuthenticateStep1+0x178>)
 80008a6:	6828      	ldr	r0, [r5, #0]
 80008a8:	f000 fb8c 	bl	8000fc4 <mccCryptoIsActive>
 80008ac:	2801      	cmp	r0, #1
 80008ae:	d105      	bne.n	80008bc <mccAuthenticateStep1+0x94>
        mccCryptoTranscode( handle, MifareBuffer, AUTH_CMD_LEN, 0 );
 80008b0:	0033      	movs	r3, r6
 80008b2:	003a      	movs	r2, r7
 80008b4:	9905      	ldr	r1, [sp, #20]
 80008b6:	6828      	ldr	r0, [r5, #0]
 80008b8:	f000 fb18 	bl	8000eec <mccCryptoTranscode>
    rv = mccSendRawRequest( MifareBuffer, AUTH_CMD_LEN,
 80008bc:	2300      	movs	r3, #0
 80008be:	2712      	movs	r7, #18
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	330a      	adds	r3, #10
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	ab02      	add	r3, sp, #8
 80008c8:	18ff      	adds	r7, r7, r3
 80008ca:	2104      	movs	r1, #4
 80008cc:	2305      	movs	r3, #5
 80008ce:	9805      	ldr	r0, [sp, #20]
 80008d0:	9700      	str	r7, [sp, #0]
 80008d2:	aa08      	add	r2, sp, #32
 80008d4:	f000 fccc 	bl	8001270 <mccSendRawRequest>
 80008d8:	b2c6      	uxtb	r6, r0
    EVAL_ERR_NE_GOTO( ERR_NONE, rv, out );
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d1bb      	bne.n	8000856 <mccAuthenticateStep1+0x2e>
    if ( bytesReceived != AUTH_RSP_LEN - 1 )
 80008de:	8839      	ldrh	r1, [r7, #0]
 80008e0:	2904      	cmp	r1, #4
 80008e2:	d00b      	beq.n	80008fc <mccAuthenticateStep1+0xd4>
        MCC_DBG( "E: received 0x%x bytes, expected %d bytes -> abort!\n", bytesReceived, AUTH_RSP_LEN - 1 );
 80008e4:	2204      	movs	r2, #4
 80008e6:	482f      	ldr	r0, [pc, #188]	@ (80009a4 <mccAuthenticateStep1+0x17c>)
 80008e8:	f00f fc08 	bl	80100fc <logUsart>
        MCC_DBG( "I: Failed: Auth Step 1\n" );
 80008ec:	482e      	ldr	r0, [pc, #184]	@ (80009a8 <mccAuthenticateStep1+0x180>)
 80008ee:	f00f fc05 	bl	80100fc <logUsart>
        mccResetCipher( );
 80008f2:	f7ff ff81 	bl	80007f8 <mccResetCipher>
        return ERR_NOTFOUND;
 80008f6:	2016      	movs	r0, #22
}
 80008f8:	b00b      	add	sp, #44	@ 0x2c
 80008fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mccCryptoReset( handle, 1 );
 80008fc:	2101      	movs	r1, #1
 80008fe:	6828      	ldr	r0, [r5, #0]
 8000900:	f000 fada 	bl	8000eb8 <mccCryptoReset>
    mccSetKey( key );
 8000904:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8000906:	f7ff ff3b 	bl	8000780 <mccSetKey>
    mccCryptoAuthReaderStep1( handle, TO_uint32_t( uid ), TO_uint32_t( rsp ) );
 800090a:	7862      	ldrb	r2, [r4, #1]
 800090c:	7823      	ldrb	r3, [r4, #0]
 800090e:	0212      	lsls	r2, r2, #8
 8000910:	431a      	orrs	r2, r3
 8000912:	78a3      	ldrb	r3, [r4, #2]
 8000914:	78e1      	ldrb	r1, [r4, #3]
 8000916:	041b      	lsls	r3, r3, #16
 8000918:	4313      	orrs	r3, r2
 800091a:	0609      	lsls	r1, r1, #24
 800091c:	9a08      	ldr	r2, [sp, #32]
 800091e:	4319      	orrs	r1, r3
 8000920:	6828      	ldr	r0, [r5, #0]
 8000922:	ba09      	rev	r1, r1
 8000924:	ba12      	rev	r2, r2
 8000926:	f000 fb51 	bl	8000fcc <mccCryptoAuthReaderStep1>
    MCC_DBG( "I: uid: %X%X\n", (uint16_t)( TO_uint32_t( uid )>> 16 ), (uint16_t)TO_uint32_t( uid ));
 800092a:	7863      	ldrb	r3, [r4, #1]
 800092c:	78a0      	ldrb	r0, [r4, #2]
 800092e:	7822      	ldrb	r2, [r4, #0]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	4313      	orrs	r3, r2
 8000934:	0402      	lsls	r2, r0, #16
 8000936:	431a      	orrs	r2, r3
 8000938:	78e3      	ldrb	r3, [r4, #3]
 800093a:	0619      	lsls	r1, r3, #24
 800093c:	4311      	orrs	r1, r2
 800093e:	021a      	lsls	r2, r3, #8
 8000940:	4302      	orrs	r2, r0
 8000942:	ba09      	rev	r1, r1
 8000944:	ba52      	rev16	r2, r2
 8000946:	b292      	uxth	r2, r2
 8000948:	0c09      	lsrs	r1, r1, #16
 800094a:	4818      	ldr	r0, [pc, #96]	@ (80009ac <mccAuthenticateStep1+0x184>)
 800094c:	f00f fbd6 	bl	80100fc <logUsart>
    MCC_DBG( "I: N_c: 0x%X%X\n", (uint16_t)( TO_uint32_t(rsp) >> 16 ), (uint16_t) TO_uint32_t(rsp) );
 8000950:	ab02      	add	r3, sp, #8
 8000952:	9908      	ldr	r1, [sp, #32]
 8000954:	8b5a      	ldrh	r2, [r3, #26]
 8000956:	ba09      	rev	r1, r1
 8000958:	ba52      	rev16	r2, r2
 800095a:	b292      	uxth	r2, r2
 800095c:	0c09      	lsrs	r1, r1, #16
 800095e:	4814      	ldr	r0, [pc, #80]	@ (80009b0 <mccAuthenticateStep1+0x188>)
 8000960:	f00f fbcc 	bl	80100fc <logUsart>
    MCC_DBG( "D: odd = 0x%x%x\n", (uint16_t)(handle->lfsr_odd >> 16), (uint16_t)handle->lfsr_odd );
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	4813      	ldr	r0, [pc, #76]	@ (80009b4 <mccAuthenticateStep1+0x18c>)
 8000968:	6859      	ldr	r1, [r3, #4]
 800096a:	b28a      	uxth	r2, r1
 800096c:	0c09      	lsrs	r1, r1, #16
 800096e:	f00f fbc5 	bl	80100fc <logUsart>
    MCC_DBG( "D: evn = 0x%x%x\n", (uint16_t)(handle->lfsr_even >> 16), (uint16_t)handle->lfsr_even );
 8000972:	682b      	ldr	r3, [r5, #0]
 8000974:	4810      	ldr	r0, [pc, #64]	@ (80009b8 <mccAuthenticateStep1+0x190>)
 8000976:	6899      	ldr	r1, [r3, #8]
 8000978:	b28a      	uxth	r2, r1
 800097a:	0c09      	lsrs	r1, r1, #16
 800097c:	f00f fbbe 	bl	80100fc <logUsart>
    MCC_DBG( "I: Success: Auth Step 1\n" );
 8000980:	480e      	ldr	r0, [pc, #56]	@ (80009bc <mccAuthenticateStep1+0x194>)
 8000982:	f00f fbbb 	bl	80100fc <logUsart>
 8000986:	e766      	b.n	8000856 <mccAuthenticateStep1+0x2e>
 8000988:	08010c77 	.word	0x08010c77
 800098c:	08010c8b 	.word	0x08010c8b
 8000990:	08010cc2 	.word	0x08010cc2
 8000994:	08010ce3 	.word	0x08010ce3
 8000998:	00006363 	.word	0x00006363
 800099c:	20000448 	.word	0x20000448
 80009a0:	20000000 	.word	0x20000000
 80009a4:	08010cf5 	.word	0x08010cf5
 80009a8:	08010d2a 	.word	0x08010d2a
 80009ac:	08010d42 	.word	0x08010d42
 80009b0:	08010d50 	.word	0x08010d50
 80009b4:	08010d60 	.word	0x08010d60
 80009b8:	08010d71 	.word	0x08010d71
 80009bc:	08010d82 	.word	0x08010d82

080009c0 <mccAuthenticateStep2>:
{
 80009c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c2:	0004      	movs	r4, r0
    uint32_t_TO_ARRAY_PARITY( nonce, cmd );
 80009c4:	25ff      	movs	r5, #255	@ 0xff
 80009c6:	0027      	movs	r7, r4
{
 80009c8:	b08d      	sub	sp, #52	@ 0x34
    MCC_DBG( "A: mcc auth step 2\n" );
 80009ca:	4841      	ldr	r0, [pc, #260]	@ (8000ad0 <mccAuthenticateStep2+0x110>)
 80009cc:	f00f fb96 	bl	80100fc <logUsart>
    uint32_t_TO_ARRAY_PARITY( nonce, cmd );
 80009d0:	402f      	ands	r7, r5
    MCC_DBG( "I: N_r: 0x%x%x\n", (uint16_t)(nonce >> 16), (uint16_t)(nonce) );
 80009d2:	b2a2      	uxth	r2, r4
 80009d4:	0c21      	lsrs	r1, r4, #16
 80009d6:	483f      	ldr	r0, [pc, #252]	@ (8000ad4 <mccAuthenticateStep2+0x114>)
 80009d8:	f00f fb90 	bl	80100fc <logUsart>
    uint32_t_TO_ARRAY_PARITY( nonce, cmd );
 80009dc:	0038      	movs	r0, r7
 80009de:	f000 fc3a 	bl	8001256 <mccParityOdd>
 80009e2:	0200      	lsls	r0, r0, #8
 80009e4:	ae08      	add	r6, sp, #32
 80009e6:	4307      	orrs	r7, r0
 80009e8:	80f7      	strh	r7, [r6, #6]
 80009ea:	0a27      	lsrs	r7, r4, #8
 80009ec:	402f      	ands	r7, r5
 80009ee:	0038      	movs	r0, r7
 80009f0:	f000 fc31 	bl	8001256 <mccParityOdd>
 80009f4:	0c23      	lsrs	r3, r4, #16
 80009f6:	401d      	ands	r5, r3
 80009f8:	0200      	lsls	r0, r0, #8
 80009fa:	4307      	orrs	r7, r0
 80009fc:	0028      	movs	r0, r5
 80009fe:	80b7      	strh	r7, [r6, #4]
 8000a00:	f000 fc29 	bl	8001256 <mccParityOdd>
 8000a04:	0e24      	lsrs	r4, r4, #24
 8000a06:	0200      	lsls	r0, r0, #8
 8000a08:	4305      	orrs	r5, r0
 8000a0a:	0020      	movs	r0, r4
 8000a0c:	8075      	strh	r5, [r6, #2]
 8000a0e:	f000 fc22 	bl	8001256 <mccParityOdd>
 8000a12:	0200      	lsls	r0, r0, #8
 8000a14:	4320      	orrs	r0, r4
    mccCryptoAuthReaderStep2( handle, cmd, cmd+4 );
 8000a16:	4c30      	ldr	r4, [pc, #192]	@ (8000ad8 <mccAuthenticateStep2+0x118>)
 8000a18:	0031      	movs	r1, r6
    uint32_t_TO_ARRAY_PARITY( nonce, cmd );
 8000a1a:	8030      	strh	r0, [r6, #0]
    mccCryptoAuthReaderStep2( handle, cmd, cmd+4 );
 8000a1c:	aa0a      	add	r2, sp, #40	@ 0x28
 8000a1e:	6820      	ldr	r0, [r4, #0]
 8000a20:	f000 fade 	bl	8000fe0 <mccCryptoAuthReaderStep2>
    MCC_DBG( "D: odd = 0x%x%x\n", (uint16_t)(handle->lfsr_odd >> 16), (uint16_t)handle->lfsr_odd );
 8000a24:	6823      	ldr	r3, [r4, #0]
 8000a26:	482d      	ldr	r0, [pc, #180]	@ (8000adc <mccAuthenticateStep2+0x11c>)
 8000a28:	6859      	ldr	r1, [r3, #4]
    rv = mccSendRawRequest( cmd, AUTH2_CMD_LEN,
 8000a2a:	2716      	movs	r7, #22
    MCC_DBG( "D: odd = 0x%x%x\n", (uint16_t)(handle->lfsr_odd >> 16), (uint16_t)handle->lfsr_odd );
 8000a2c:	b28a      	uxth	r2, r1
 8000a2e:	0c09      	lsrs	r1, r1, #16
 8000a30:	f00f fb64 	bl	80100fc <logUsart>
    MCC_DBG( "D: evn = 0x%x%x\n", (uint16_t)(handle->lfsr_even >> 16), (uint16_t)handle->lfsr_even );
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	482a      	ldr	r0, [pc, #168]	@ (8000ae0 <mccAuthenticateStep2+0x120>)
 8000a38:	6899      	ldr	r1, [r3, #8]
    rv = mccSendRawRequest( cmd, AUTH2_CMD_LEN,
 8000a3a:	ad06      	add	r5, sp, #24
    MCC_DBG( "D: evn = 0x%x%x\n", (uint16_t)(handle->lfsr_even >> 16), (uint16_t)handle->lfsr_even );
 8000a3c:	b28a      	uxth	r2, r1
 8000a3e:	0c09      	lsrs	r1, r1, #16
 8000a40:	f00f fb5c 	bl	80100fc <logUsart>
    rv = mccSendRawRequest( cmd, AUTH2_CMD_LEN,
 8000a44:	2300      	movs	r3, #0
 8000a46:	446f      	add	r7, sp
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	3314      	adds	r3, #20
 8000a4c:	0030      	movs	r0, r6
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	002a      	movs	r2, r5
 8000a52:	2108      	movs	r1, #8
 8000a54:	9700      	str	r7, [sp, #0]
 8000a56:	3b0f      	subs	r3, #15
 8000a58:	f000 fc0a 	bl	8001270 <mccSendRawRequest>
 8000a5c:	1e06      	subs	r6, r0, #0
    EVAL_ERR_NE_GOTO( ERR_NONE, rv, out );
 8000a5e:	d10b      	bne.n	8000a78 <mccAuthenticateStep2+0xb8>
    if ( bytesReceived != 4 )
 8000a60:	8839      	ldrh	r1, [r7, #0]
 8000a62:	2904      	cmp	r1, #4
 8000a64:	d00b      	beq.n	8000a7e <mccAuthenticateStep2+0xbe>
        MCC_DBG( "E: received 0x%x bytes, expected 4 bytes -> abort!\n", bytesReceived );
 8000a66:	481f      	ldr	r0, [pc, #124]	@ (8000ae4 <mccAuthenticateStep2+0x124>)
 8000a68:	f00f fb48 	bl	80100fc <logUsart>
        MCC_DBG( "I: Failed: Auth Step 2\n" );
 8000a6c:	481e      	ldr	r0, [pc, #120]	@ (8000ae8 <mccAuthenticateStep2+0x128>)
        MCC_DBG( "E: failed authentication step 3!\n" );
 8000a6e:	f00f fb45 	bl	80100fc <logUsart>
        return ERR_NOTFOUND;
 8000a72:	2616      	movs	r6, #22
        mccResetCipher();
 8000a74:	f7ff fec0 	bl	80007f8 <mccResetCipher>
}
 8000a78:	0030      	movs	r0, r6
 8000a7a:	b00d      	add	sp, #52	@ 0x34
 8000a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MifareBuffer[i] = rsp[i];
 8000a7e:	491b      	ldr	r1, [pc, #108]	@ (8000aec <mccAuthenticateStep2+0x12c>)
 8000a80:	782b      	ldrb	r3, [r5, #0]
    rv = mccCryptoAuthReaderStep3( handle, MifareBuffer );
 8000a82:	6820      	ldr	r0, [r4, #0]
        MifareBuffer[i] = rsp[i];
 8000a84:	800b      	strh	r3, [r1, #0]
 8000a86:	786b      	ldrb	r3, [r5, #1]
 8000a88:	804b      	strh	r3, [r1, #2]
 8000a8a:	78ab      	ldrb	r3, [r5, #2]
 8000a8c:	808b      	strh	r3, [r1, #4]
 8000a8e:	78eb      	ldrb	r3, [r5, #3]
 8000a90:	80cb      	strh	r3, [r1, #6]
 8000a92:	792b      	ldrb	r3, [r5, #4]
 8000a94:	810b      	strh	r3, [r1, #8]
    rv = mccCryptoAuthReaderStep3( handle, MifareBuffer );
 8000a96:	f000 fb69 	bl	800116c <mccCryptoAuthReaderStep3>
    if ( rv != 1 )
 8000a9a:	b245      	sxtb	r5, r0
 8000a9c:	2d01      	cmp	r5, #1
 8000a9e:	d001      	beq.n	8000aa4 <mccAuthenticateStep2+0xe4>
        MCC_DBG( "E: failed authentication step 3!\n" );
 8000aa0:	4813      	ldr	r0, [pc, #76]	@ (8000af0 <mccAuthenticateStep2+0x130>)
 8000aa2:	e7e4      	b.n	8000a6e <mccAuthenticateStep2+0xae>
    MCC_DBG( "I: prng = 0x%x\n", (uint16_t)(handle->prng) );
 8000aa4:	6823      	ldr	r3, [r4, #0]
 8000aa6:	4813      	ldr	r0, [pc, #76]	@ (8000af4 <mccAuthenticateStep2+0x134>)
 8000aa8:	8819      	ldrh	r1, [r3, #0]
 8000aaa:	f00f fb27 	bl	80100fc <logUsart>
    mccCryptoSetActive( handle, 1 );
 8000aae:	0029      	movs	r1, r5
 8000ab0:	6820      	ldr	r0, [r4, #0]
 8000ab2:	f000 fa89 	bl	8000fc8 <mccCryptoSetActive>
    MCC_DBG( "I: state: %d\n", mccCryptoIsActive( handle ) );
 8000ab6:	6820      	ldr	r0, [r4, #0]
 8000ab8:	f000 fa84 	bl	8000fc4 <mccCryptoIsActive>
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <mccAuthenticateStep2+0x138>)
 8000abe:	0001      	movs	r1, r0
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f00f fb1b 	bl	80100fc <logUsart>
    MCC_DBG( "I: Success: Auth Step 2\n" );
 8000ac6:	480d      	ldr	r0, [pc, #52]	@ (8000afc <mccAuthenticateStep2+0x13c>)
 8000ac8:	f00f fb18 	bl	80100fc <logUsart>
 8000acc:	e7d4      	b.n	8000a78 <mccAuthenticateStep2+0xb8>
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	08010d9b 	.word	0x08010d9b
 8000ad4:	08010daf 	.word	0x08010daf
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	08010d60 	.word	0x08010d60
 8000ae0:	08010d71 	.word	0x08010d71
 8000ae4:	08010dbf 	.word	0x08010dbf
 8000ae8:	08010df3 	.word	0x08010df3
 8000aec:	20000448 	.word	0x20000448
 8000af0:	08010e0b 	.word	0x08010e0b
 8000af4:	08010e2d 	.word	0x08010e2d
 8000af8:	08010e3d 	.word	0x08010e3d
 8000afc:	08010e4b 	.word	0x08010e4b

08000b00 <mccAuthenticate>:
{
 8000b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b02:	0007      	movs	r7, r0
    MCC_DBG( "mcc auth\n" );
 8000b04:	4818      	ldr	r0, [pc, #96]	@ (8000b68 <mccAuthenticate+0x68>)
{
 8000b06:	0014      	movs	r4, r2
 8000b08:	000e      	movs	r6, r1
 8000b0a:	001d      	movs	r5, r3
    MCC_DBG( "mcc auth\n" );
 8000b0c:	f00f faf6 	bl	80100fc <logUsart>
    if ( uid == 0  || uidLength != UID_LEN )
 8000b10:	2c00      	cmp	r4, #0
 8000b12:	d001      	beq.n	8000b18 <mccAuthenticate+0x18>
 8000b14:	2d04      	cmp	r5, #4
 8000b16:	d009      	beq.n	8000b2c <mccAuthenticate+0x2c>
        MCC_DBG( "E: uid incorrect! Expected %d bytes, got %d -> abort!\n", UID_LEN, uidLength );
 8000b18:	002a      	movs	r2, r5
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4813      	ldr	r0, [pc, #76]	@ (8000b6c <mccAuthenticate+0x6c>)
 8000b1e:	f00f faed 	bl	80100fc <logUsart>
        MCC_DBG( "I; Failed authentication step 1\n" );
 8000b22:	4813      	ldr	r0, [pc, #76]	@ (8000b70 <mccAuthenticate+0x70>)
 8000b24:	f00f faea 	bl	80100fc <logUsart>
        rv = ERR_PARAM;
 8000b28:	2007      	movs	r0, #7
}
 8000b2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ( key == 0 )
 8000b2c:	9b08      	ldr	r3, [sp, #32]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d103      	bne.n	8000b3a <mccAuthenticate+0x3a>
        MCC_DBG( "E: no key given!\n" );
 8000b32:	4810      	ldr	r0, [pc, #64]	@ (8000b74 <mccAuthenticate+0x74>)
 8000b34:	f00f fae2 	bl	80100fc <logUsart>
 8000b38:	e7f3      	b.n	8000b22 <mccAuthenticate+0x22>
    MCC_DBG( "  uid  : %x\n", *uid );
 8000b3a:	7821      	ldrb	r1, [r4, #0]
 8000b3c:	480e      	ldr	r0, [pc, #56]	@ (8000b78 <mccAuthenticate+0x78>)
 8000b3e:	f00f fadd 	bl	80100fc <logUsart>
    MCC_DBG( "  block: %x\n", block );
 8000b42:	0031      	movs	r1, r6
 8000b44:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <mccAuthenticate+0x7c>)
 8000b46:	f00f fad9 	bl	80100fc <logUsart>
    rv = mccAuthenticateStep1( keySelect, block, uid, uidLength, key );
 8000b4a:	9b08      	ldr	r3, [sp, #32]
 8000b4c:	0022      	movs	r2, r4
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	0031      	movs	r1, r6
 8000b52:	002b      	movs	r3, r5
 8000b54:	0038      	movs	r0, r7
 8000b56:	f7ff fe67 	bl	8000828 <mccAuthenticateStep1>
    EVAL_ERR_NE_GOTO( ERR_NONE, rv, out );
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	d1e5      	bne.n	8000b2a <mccAuthenticate+0x2a>
    rv = mccAuthenticateStep2( nonce );
 8000b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b60:	f7ff ff2e 	bl	80009c0 <mccAuthenticateStep2>
 8000b64:	e7e1      	b.n	8000b2a <mccAuthenticate+0x2a>
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	08010e64 	.word	0x08010e64
 8000b6c:	08010c8b 	.word	0x08010c8b
 8000b70:	08010cc2 	.word	0x08010cc2
 8000b74:	08010ce3 	.word	0x08010ce3
 8000b78:	08010e6e 	.word	0x08010e6e
 8000b7c:	08010e7b 	.word	0x08010e7b

08000b80 <mccSendRequest>:
{
 8000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b82:	000d      	movs	r5, r1
 8000b84:	b08b      	sub	sp, #44	@ 0x2c
 8000b86:	9307      	str	r3, [sp, #28]
 8000b88:	ab10      	add	r3, sp, #64	@ 0x40
 8000b8a:	9206      	str	r2, [sp, #24]
 8000b8c:	cb04      	ldmia	r3!, {r2}
 8000b8e:	0006      	movs	r6, r0
 8000b90:	881b      	ldrh	r3, [r3, #0]
    MCC_DBG( "mcc send request\n" );
 8000b92:	4840      	ldr	r0, [pc, #256]	@ (8000c94 <mccSendRequest+0x114>)
{
 8000b94:	9308      	str	r3, [sp, #32]
 8000b96:	ab12      	add	r3, sp, #72	@ 0x48
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	9205      	str	r2, [sp, #20]
 8000b9c:	9309      	str	r3, [sp, #36]	@ 0x24
    MCC_DBG( "mcc send request\n" );
 8000b9e:	f00f faad 	bl	80100fc <logUsart>
    MCC_DBG( "  request (%d): ", requestLength );
 8000ba2:	0029      	movs	r1, r5
 8000ba4:	483c      	ldr	r0, [pc, #240]	@ (8000c98 <mccSendRequest+0x118>)
 8000ba6:	f00f faa9 	bl	80100fc <logUsart>
    for ( i = 0; i < requestLength; i++ )
 8000baa:	2400      	movs	r4, #0
 8000bac:	42a5      	cmp	r5, r4
 8000bae:	d834      	bhi.n	8000c1a <mccSendRequest+0x9a>
    MCC_DBG( "\n" );
 8000bb0:	483a      	ldr	r0, [pc, #232]	@ (8000c9c <mccSendRequest+0x11c>)
 8000bb2:	f00f faa3 	bl	80100fc <logUsart>
    crc = rfalCrcCalculateCcitt( CRC_PRELOAD_VALUE, request, requestLength );
 8000bb6:	002a      	movs	r2, r5
 8000bb8:	0031      	movs	r1, r6
 8000bba:	4839      	ldr	r0, [pc, #228]	@ (8000ca0 <mccSendRequest+0x120>)
 8000bbc:	f007 fb96 	bl	80082ec <rfalCrcCalculateCcitt>
    MifareBuffer[requestLength] = LOW_BYTE( crc );
 8000bc0:	4f38      	ldr	r7, [pc, #224]	@ (8000ca4 <mccSendRequest+0x124>)
 8000bc2:	006b      	lsls	r3, r5, #1
 8000bc4:	b2c2      	uxtb	r2, r0
 8000bc6:	53da      	strh	r2, [r3, r7]
    MifareBuffer[requestLength+1] = HIGH_BYTE( crc );
 8000bc8:	1c6b      	adds	r3, r5, #1
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	0a00      	lsrs	r0, r0, #8
    rv = attachParityInformation( MifareBuffer, requestLength + CRC_LEN );
 8000bce:	3502      	adds	r5, #2
    MifareBuffer[requestLength+1] = HIGH_BYTE( crc );
 8000bd0:	53d8      	strh	r0, [r3, r7]
    rv = attachParityInformation( MifareBuffer, requestLength + CRC_LEN );
 8000bd2:	0028      	movs	r0, r5
 8000bd4:	f7ff fdb8 	bl	8000748 <attachParityInformation.constprop.0>
 8000bd8:	1e04      	subs	r4, r0, #0
    EVAL_ERR_NE_GOTO( ERR_NONE, rv, out );
 8000bda:	d11b      	bne.n	8000c14 <mccSendRequest+0x94>
    if ( mccCryptoIsActive( handle ) != 0 )
 8000bdc:	4e32      	ldr	r6, [pc, #200]	@ (8000ca8 <mccSendRequest+0x128>)
        mccCryptoTranscode( handle, MifareBuffer, requestLength + CRC_LEN, 0 );
 8000bde:	b2ad      	uxth	r5, r5
    if ( mccCryptoIsActive( handle ) != 0 )
 8000be0:	6830      	ldr	r0, [r6, #0]
 8000be2:	f000 f9ef 	bl	8000fc4 <mccCryptoIsActive>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d005      	beq.n	8000bf6 <mccSendRequest+0x76>
        mccCryptoTranscode( handle, MifareBuffer, requestLength + CRC_LEN, 0 );
 8000bea:	0023      	movs	r3, r4
 8000bec:	002a      	movs	r2, r5
 8000bee:	0039      	movs	r1, r7
 8000bf0:	6830      	ldr	r0, [r6, #0]
 8000bf2:	f000 f97b 	bl	8000eec <mccCryptoTranscode>
    rv = mccSendRawRequest( MifareBuffer, requestLength + CRC_LEN,
 8000bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000bf8:	0029      	movs	r1, r5
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	9b08      	ldr	r3, [sp, #32]
 8000bfe:	0038      	movs	r0, r7
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	9b05      	ldr	r3, [sp, #20]
 8000c04:	9a06      	ldr	r2, [sp, #24]
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	9b07      	ldr	r3, [sp, #28]
 8000c0a:	f000 fb31 	bl	8001270 <mccSendRawRequest>
 8000c0e:	0004      	movs	r4, r0
    for ( i = 0; i < *responseLength; i++ )
 8000c10:	1e03      	subs	r3, r0, #0
    EVAL_ERR_NE_GOTO( ERR_NONE, rv, out );
 8000c12:	d011      	beq.n	8000c38 <mccSendRequest+0xb8>
}
 8000c14:	0020      	movs	r0, r4
 8000c16:	b00b      	add	sp, #44	@ 0x2c
 8000c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MCC_DBG("%hx, ", request[i]);
 8000c1a:	5d31      	ldrb	r1, [r6, r4]
 8000c1c:	4823      	ldr	r0, [pc, #140]	@ (8000cac <mccSendRequest+0x12c>)
 8000c1e:	f00f fa6d 	bl	80100fc <logUsart>
        MifareBuffer[i] = request[i];
 8000c22:	5d31      	ldrb	r1, [r6, r4]
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <mccSendRequest+0x124>)
 8000c26:	0062      	lsls	r2, r4, #1
 8000c28:	5299      	strh	r1, [r3, r2]
    for ( i = 0; i < requestLength; i++ )
 8000c2a:	3401      	adds	r4, #1
 8000c2c:	e7be      	b.n	8000bac <mccSendRequest+0x2c>
        MifareBuffer[i] = response[i];
 8000c2e:	9906      	ldr	r1, [sp, #24]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	5cc9      	ldrb	r1, [r1, r3]
    for ( i = 0; i < *responseLength; i++ )
 8000c34:	3301      	adds	r3, #1
        MifareBuffer[i] = response[i];
 8000c36:	52b9      	strh	r1, [r7, r2]
    for ( i = 0; i < *responseLength; i++ )
 8000c38:	9a05      	ldr	r2, [sp, #20]
 8000c3a:	8812      	ldrh	r2, [r2, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f6      	bhi.n	8000c2e <mccSendRequest+0xae>
    if ( mccCryptoIsActive( handle ) != 0 )
 8000c40:	6830      	ldr	r0, [r6, #0]
 8000c42:	f000 f9bf 	bl	8000fc4 <mccCryptoIsActive>
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d019      	beq.n	8000c7e <mccSendRequest+0xfe>
        bytes = *responseLength;
 8000c4a:	9b05      	ldr	r3, [sp, #20]
        bits = 0;
 8000c4c:	2500      	movs	r5, #0
        bytes = *responseLength;
 8000c4e:	881e      	ldrh	r6, [r3, #0]
        if ( *responseLength == 0 || *responseLength == 1 )
 8000c50:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <mccSendRequest+0x130>)
 8000c52:	9307      	str	r3, [sp, #28]
 8000c54:	2e01      	cmp	r6, #1
 8000c56:	d806      	bhi.n	8000c66 <mccSendRequest+0xe6>
            MCC_DBG("D: %d bytes %d bits\n", bytes, bits);
 8000c58:	0029      	movs	r1, r5
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f00f fa4d 	bl	80100fc <logUsart>
            bytes = 0;
 8000c62:	002e      	movs	r6, r5
            bits = 4;
 8000c64:	3504      	adds	r5, #4
        MCC_DBG("D: %d bytes %d bits\n", bytes, bits);
 8000c66:	002a      	movs	r2, r5
 8000c68:	0031      	movs	r1, r6
 8000c6a:	9807      	ldr	r0, [sp, #28]
 8000c6c:	f00f fa46 	bl	80100fc <logUsart>
        mccCryptoTranscode( handle, MifareBuffer, bytes, bits );
 8000c70:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <mccSendRequest+0x128>)
 8000c72:	0032      	movs	r2, r6
 8000c74:	0039      	movs	r1, r7
 8000c76:	6800      	ldr	r0, [r0, #0]
 8000c78:	b2eb      	uxtb	r3, r5
 8000c7a:	f000 f937 	bl	8000eec <mccCryptoTranscode>
            bits = 4;
 8000c7e:	2300      	movs	r3, #0
    for ( i = 0; i < *responseLength; i++ )
 8000c80:	9a05      	ldr	r2, [sp, #20]
 8000c82:	8812      	ldrh	r2, [r2, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d9c5      	bls.n	8000c14 <mccSendRequest+0x94>
        response[i] = MifareBuffer[i];
 8000c88:	005a      	lsls	r2, r3, #1
 8000c8a:	5aba      	ldrh	r2, [r7, r2]
 8000c8c:	9906      	ldr	r1, [sp, #24]
 8000c8e:	54ca      	strb	r2, [r1, r3]
    for ( i = 0; i < *responseLength; i++ )
 8000c90:	3301      	adds	r3, #1
 8000c92:	e7f5      	b.n	8000c80 <mccSendRequest+0x100>
 8000c94:	08010e88 	.word	0x08010e88
 8000c98:	08010e9a 	.word	0x08010e9a
 8000c9c:	080110f7 	.word	0x080110f7
 8000ca0:	00006363 	.word	0x00006363
 8000ca4:	20000448 	.word	0x20000448
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	08010eab 	.word	0x08010eab
 8000cb0:	08010eb1 	.word	0x08010eb1

08000cb4 <demoMifareClassic>:
{
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	000c      	movs	r4, r1
 8000cb8:	0005      	movs	r5, r0
 8000cba:	b08c      	sub	sp, #48	@ 0x30
    uint8_t mifareKey[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8000cbc:	ae05      	add	r6, sp, #20
 8000cbe:	2206      	movs	r2, #6
 8000cc0:	491b      	ldr	r1, [pc, #108]	@ (8000d30 <demoMifareClassic+0x7c>)
 8000cc2:	0030      	movs	r0, r6
 8000cc4:	f00f fb34 	bl	8010330 <memcpy>
    mccInitialize();
 8000cc8:	f7ff fda4 	bl	8000814 <mccInitialize>
    err = mccAuthenticate(key, sector, uid, uidLen, mifareKey, nonce);
 8000ccc:	4a19      	ldr	r2, [pc, #100]	@ (8000d34 <demoMifareClassic+0x80>)
 8000cce:	b2e3      	uxtb	r3, r4
 8000cd0:	9201      	str	r2, [sp, #4]
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	002a      	movs	r2, r5
 8000cd6:	2060      	movs	r0, #96	@ 0x60
 8000cd8:	9600      	str	r6, [sp, #0]
 8000cda:	f7ff ff11 	bl	8000b00 <mccAuthenticate>
 8000cde:	1e04      	subs	r4, r0, #0
    if (err == ERR_NONE)
 8000ce0:	d121      	bne.n	8000d26 <demoMifareClassic+0x72>
        platformLog("Authentication succeeded...\r\n");
 8000ce2:	4815      	ldr	r0, [pc, #84]	@ (8000d38 <demoMifareClassic+0x84>)
 8000ce4:	f00f fa0a 	bl	80100fc <logUsart>
        request[0] = MCC_READ_BLOCK;
 8000ce8:	2330      	movs	r3, #48	@ 0x30
 8000cea:	a804      	add	r0, sp, #16
 8000cec:	8003      	strh	r3, [r0, #0]
        err = mccSendRequest(request, sizeof(request),
 8000cee:	3b2f      	subs	r3, #47	@ 0x2f
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	3311      	adds	r3, #17
 8000cf4:	446b      	add	r3, sp
 8000cf6:	9402      	str	r4, [sp, #8]
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	2312      	movs	r3, #18
 8000cfe:	aa07      	add	r2, sp, #28
 8000d00:	f7ff ff3e 	bl	8000b80 <mccSendRequest>
 8000d04:	1e04      	subs	r4, r0, #0
        if (err == ERR_NONE)
 8000d06:	d109      	bne.n	8000d1c <demoMifareClassic+0x68>
            platformLog(" Read block %d: %s\r\n", block, hex2Str( buffer, sizeof(buffer) - MIFARE_CRC_LEN));
 8000d08:	2110      	movs	r1, #16
 8000d0a:	a807      	add	r0, sp, #28
 8000d0c:	f00f fa10 	bl	8010130 <hex2Str>
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <demoMifareClassic+0x88>)
 8000d12:	0002      	movs	r2, r0
 8000d14:	0021      	movs	r1, r4
 8000d16:	0018      	movs	r0, r3
 8000d18:	f00f f9f0 	bl	80100fc <logUsart>
    MCC_DBG( "mcc deinit\n" );
 8000d1c:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <demoMifareClassic+0x8c>)
 8000d1e:	f00f f9ed 	bl	80100fc <logUsart>
}
 8000d22:	b00c      	add	sp, #48	@ 0x30
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
        platformLog("Authentication failed\r\n");
 8000d26:	4807      	ldr	r0, [pc, #28]	@ (8000d44 <demoMifareClassic+0x90>)
 8000d28:	f00f f9e8 	bl	80100fc <logUsart>
 8000d2c:	e7f6      	b.n	8000d1c <demoMifareClassic+0x68>
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	08010f11 	.word	0x08010f11
 8000d34:	11223344 	.word	0x11223344
 8000d38:	08010ec6 	.word	0x08010ec6
 8000d3c:	08010ee4 	.word	0x08010ee4
 8000d40:	08010c11 	.word	0x08010c11
 8000d44:	08010ef9 	.word	0x08010ef9

08000d48 <mccLfsrUpdateBit>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

uint8_t mccLfsrUpdateBit ( CryptoHandle_t * const handle, uint8_t dataBit, uint8_t useKeyStream )
{
 8000d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4a:	0005      	movs	r5, r0
    uint32_t u = 0;
    uint32_t k = FILTER( handle->lfsr_odd );
 8000d4c:	6846      	ldr	r6, [r0, #4]
 8000d4e:	200f      	movs	r0, #15
 8000d50:	0933      	lsrs	r3, r6, #4
 8000d52:	4c1c      	ldr	r4, [pc, #112]	@ (8000dc4 <mccLfsrUpdateBit+0x7c>)
 8000d54:	4003      	ands	r3, r0
 8000d56:	411c      	asrs	r4, r3
 8000d58:	2308      	movs	r3, #8
 8000d5a:	0a37      	lsrs	r7, r6, #8
 8000d5c:	401c      	ands	r4, r3
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <mccLfsrUpdateBit+0x80>)
 8000d60:	4007      	ands	r7, r0
 8000d62:	413b      	asrs	r3, r7
 8000d64:	2704      	movs	r7, #4
 8000d66:	403b      	ands	r3, r7
 8000d68:	0037      	movs	r7, r6
 8000d6a:	4323      	orrs	r3, r4
 8000d6c:	4c17      	ldr	r4, [pc, #92]	@ (8000dcc <mccLfsrUpdateBit+0x84>)
 8000d6e:	4007      	ands	r7, r0
 8000d70:	413c      	asrs	r4, r7
 8000d72:	2710      	movs	r7, #16
 8000d74:	403c      	ands	r4, r7
 8000d76:	4323      	orrs	r3, r4
 8000d78:	0b37      	lsrs	r7, r6, #12
 8000d7a:	4c15      	ldr	r4, [pc, #84]	@ (8000dd0 <mccLfsrUpdateBit+0x88>)
 8000d7c:	4007      	ands	r7, r0
 8000d7e:	413c      	asrs	r4, r7
 8000d80:	2702      	movs	r7, #2
 8000d82:	403c      	ands	r4, r7
 8000d84:	4323      	orrs	r3, r4
 8000d86:	0c34      	lsrs	r4, r6, #16
 8000d88:	4004      	ands	r4, r0
 8000d8a:	4812      	ldr	r0, [pc, #72]	@ (8000dd4 <mccLfsrUpdateBit+0x8c>)
 8000d8c:	3f01      	subs	r7, #1
 8000d8e:	4120      	asrs	r0, r4
 8000d90:	4c11      	ldr	r4, [pc, #68]	@ (8000dd8 <mccLfsrUpdateBit+0x90>)
 8000d92:	4038      	ands	r0, r7
 8000d94:	4303      	orrs	r3, r0
 8000d96:	40dc      	lsrs	r4, r3
#endif // DEBUG_LFSR
    MCC_DBG( "D: odd = 0x%x%x\n", (uint16_t)(handle->lfsr_odd >> 16), (uint16_t)handle->lfsr_odd );
    MCC_DBG( "D: evn = 0x%x%x\n", (uint16_t)(handle->lfsr_even >> 16), (uint16_t)handle->lfsr_even );

    u  = handle->lfsr_odd & FEEDBACK_ODD;
    u ^=  handle->lfsr_even & FEEDBACK_EVEN;
 8000d98:	4810      	ldr	r0, [pc, #64]	@ (8000ddc <mccLfsrUpdateBit+0x94>)
 8000d9a:	68ab      	ldr	r3, [r5, #8]
    uint32_t k = FILTER( handle->lfsr_odd );
 8000d9c:	403c      	ands	r4, r7
    u ^=  handle->lfsr_even & FEEDBACK_EVEN;
 8000d9e:	4003      	ands	r3, r0
    u  = handle->lfsr_odd & FEEDBACK_ODD;
 8000da0:	480f      	ldr	r0, [pc, #60]	@ (8000de0 <mccLfsrUpdateBit+0x98>)
    u ^= (k & useKeyStream) ^ dataBit;
 8000da2:	4022      	ands	r2, r4
    u  = handle->lfsr_odd & FEEDBACK_ODD;
 8000da4:	4006      	ands	r6, r0
    u ^= (k & useKeyStream) ^ dataBit;
 8000da6:	0010      	movs	r0, r2
 8000da8:	4073      	eors	r3, r6
 8000daa:	404b      	eors	r3, r1
 8000dac:	4058      	eors	r0, r3

    p = mccParityEven(u);
 8000dae:	f000 fa45 	bl	800123c <mccParityEven>
}
#endif // DEBUG_LFSR

static void correctLfsrValues ( CryptoHandle_t * handle, uint32_t parityBit )
{
    handle->lfsr_even = handle->lfsr_even << 1 | parityBit;
 8000db2:	68ab      	ldr	r3, [r5, #8]
    handle->lfsr_odd ^= handle->lfsr_even;
    handle->lfsr_even ^= handle->lfsr_odd;
 8000db4:	686a      	ldr	r2, [r5, #4]
    handle->lfsr_even = handle->lfsr_even << 1 | parityBit;
 8000db6:	40bb      	lsls	r3, r7
 8000db8:	4303      	orrs	r3, r0
    handle->lfsr_even ^= handle->lfsr_odd;
 8000dba:	60aa      	str	r2, [r5, #8]
    handle->lfsr_odd ^= handle->lfsr_even;
 8000dbc:	606b      	str	r3, [r5, #4]
    return k;
 8000dbe:	b2e0      	uxtb	r0, r4
}
 8000dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	0006c9c0 	.word	0x0006c9c0
 8000dc8:	0003c8b0 	.word	0x0003c8b0
 8000dcc:	000f22c0 	.word	0x000f22c0
 8000dd0:	0001e458 	.word	0x0001e458
 8000dd4:	0000d938 	.word	0x0000d938
 8000dd8:	ec57e80a 	.word	0xec57e80a
 8000ddc:	00870804 	.word	0x00870804
 8000de0:	0029ce5c 	.word	0x0029ce5c

08000de4 <mccLfsrUpdateByte>:
{
 8000de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t rv = 0;
 8000de6:	2500      	movs	r5, #0
{
 8000de8:	000e      	movs	r6, r1
    for ( i = 0; i < 8; i++ )
 8000dea:	002c      	movs	r4, r5
        rv |= mccLfsrUpdateBit( handle, BIT(data, i), useKeyStream ) << i;
 8000dec:	2701      	movs	r7, #1
{
 8000dee:	9000      	str	r0, [sp, #0]
 8000df0:	9201      	str	r2, [sp, #4]
        rv |= mccLfsrUpdateBit( handle, BIT(data, i), useKeyStream ) << i;
 8000df2:	0031      	movs	r1, r6
 8000df4:	4121      	asrs	r1, r4
 8000df6:	9a01      	ldr	r2, [sp, #4]
 8000df8:	9800      	ldr	r0, [sp, #0]
 8000dfa:	4039      	ands	r1, r7
 8000dfc:	f7ff ffa4 	bl	8000d48 <mccLfsrUpdateBit>
 8000e00:	40a0      	lsls	r0, r4
    for ( i = 0; i < 8; i++ )
 8000e02:	3401      	adds	r4, #1
        rv |= mccLfsrUpdateBit( handle, BIT(data, i), useKeyStream ) << i;
 8000e04:	4305      	orrs	r5, r0
 8000e06:	b2ed      	uxtb	r5, r5
    for ( i = 0; i < 8; i++ )
 8000e08:	2c08      	cmp	r4, #8
 8000e0a:	d1f2      	bne.n	8000df2 <mccLfsrUpdateByte+0xe>
}
 8000e0c:	0028      	movs	r0, r5
 8000e0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000e10 <mccLfsrUpdate>:
{
 8000e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e12:	000f      	movs	r7, r1
 8000e14:	0016      	movs	r6, r2
 8000e16:	2418      	movs	r4, #24
    uint32_t rv = 0;
 8000e18:	2500      	movs	r5, #0
{
 8000e1a:	9001      	str	r0, [sp, #4]
        rv |= (uint32_t)mccLfsrUpdateByte(handle, ((data >> offset) & 0xFF), useKeyStream) << offset;
 8000e1c:	0039      	movs	r1, r7
 8000e1e:	40e1      	lsrs	r1, r4
 8000e20:	0032      	movs	r2, r6
 8000e22:	9801      	ldr	r0, [sp, #4]
 8000e24:	b2c9      	uxtb	r1, r1
 8000e26:	f7ff ffdd 	bl	8000de4 <mccLfsrUpdateByte>
 8000e2a:	40a0      	lsls	r0, r4
    for ( i = 3; i >= 0; i-- )
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <mccLfsrUpdate+0x2c>)
 8000e2e:	3c08      	subs	r4, #8
 8000e30:	b2a4      	uxth	r4, r4
        rv |= (uint32_t)mccLfsrUpdateByte(handle, ((data >> offset) & 0xFF), useKeyStream) << offset;
 8000e32:	4305      	orrs	r5, r0
    for ( i = 3; i >= 0; i-- )
 8000e34:	429c      	cmp	r4, r3
 8000e36:	d1f1      	bne.n	8000e1c <mccLfsrUpdate+0xc>
}
 8000e38:	0028      	movs	r0, r5
 8000e3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000e3c:	0000fff8 	.word	0x0000fff8

08000e40 <mccPrng>:
{
 8000e40:	b570      	push	{r4, r5, r6, lr}
    uint32_t prngNew = handle->prng;
 8000e42:	8800      	ldrh	r0, [r0, #0]
{
 8000e44:	000c      	movs	r4, r1
    prngNew = mccReverse( prngNew );
 8000e46:	f000 f9d5 	bl	80011f4 <mccReverse>
    for ( i = 0; i < steps; i++ )
 8000e4a:	2200      	movs	r2, #0
                         & 0x01 // make sure we take only one bit
 8000e4c:	2101      	movs	r1, #1
    for ( i = 0; i < steps; i++ )
 8000e4e:	42a2      	cmp	r2, r4
 8000e50:	d102      	bne.n	8000e58 <mccPrng+0x18>
    return mccReverse(prngNew);
 8000e52:	f000 f9cf 	bl	80011f4 <mccReverse>
}
 8000e56:	bd70      	pop	{r4, r5, r6, pc}
                           ^ (prngNew >> 13)
 8000e58:	0b46      	lsrs	r6, r0, #13
                             (prngNew >> 15) 
 8000e5a:	0bc3      	lsrs	r3, r0, #15
                           ^ (prngNew >> 13)
 8000e5c:	4073      	eors	r3, r6
                           ^ (prngNew >> 12)
 8000e5e:	0b06      	lsrs	r6, r0, #12
        prngNew = (prngNew << 0x01)
 8000e60:	0045      	lsls	r5, r0, #1
                           ^ (prngNew >> 12)
 8000e62:	4073      	eors	r3, r6
                           ^ (prngNew >> 10)
 8000e64:	0a80      	lsrs	r0, r0, #10
 8000e66:	4043      	eors	r3, r0
        prngNew = (prngNew << 0x01)
 8000e68:	0028      	movs	r0, r5
                         & 0x01 // make sure we take only one bit
 8000e6a:	400b      	ands	r3, r1
        prngNew = (prngNew << 0x01)
 8000e6c:	4318      	orrs	r0, r3
    for ( i = 0; i < steps; i++ )
 8000e6e:	3201      	adds	r2, #1
 8000e70:	e7ed      	b.n	8000e4e <mccPrng+0xe>

08000e72 <mccCryptoInit>:
{
 8000e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    handle->prng = 0;
 8000e74:	2400      	movs	r4, #0
{
 8000e76:	0005      	movs	r5, r0
    handle->prng = 0;
 8000e78:	0026      	movs	r6, r4
    for( i = 47; i > 0; i -= 2 )
 8000e7a:	272f      	movs	r7, #47	@ 0x2f
{
 8000e7c:	9200      	str	r2, [sp, #0]
 8000e7e:	9301      	str	r3, [sp, #4]
    handle->prng = 0;
 8000e80:	8004      	strh	r4, [r0, #0]
        handle->lfsr_odd  = (handle->lfsr_odd << 1)  | BIT( key, (i - 1) ^ 7 );
 8000e82:	2307      	movs	r3, #7
 8000e84:	1e7a      	subs	r2, r7, #1
 8000e86:	405a      	eors	r2, r3
 8000e88:	9800      	ldr	r0, [sp, #0]
 8000e8a:	9901      	ldr	r1, [sp, #4]
 8000e8c:	f7ff fae2 	bl	8000454 <__aeabi_llsr>
 8000e90:	2301      	movs	r3, #1
        handle->lfsr_even = (handle->lfsr_even << 1) | BIT( key, i ^ 7 );
 8000e92:	2207      	movs	r2, #7
        handle->lfsr_odd  = (handle->lfsr_odd << 1)  | BIT( key, (i - 1) ^ 7 );
 8000e94:	409e      	lsls	r6, r3
 8000e96:	4018      	ands	r0, r3
        handle->lfsr_even = (handle->lfsr_even << 1) | BIT( key, i ^ 7 );
 8000e98:	407a      	eors	r2, r7
 8000e9a:	9901      	ldr	r1, [sp, #4]
        handle->lfsr_odd  = (handle->lfsr_odd << 1)  | BIT( key, (i - 1) ^ 7 );
 8000e9c:	4306      	orrs	r6, r0
        handle->lfsr_even = (handle->lfsr_even << 1) | BIT( key, i ^ 7 );
 8000e9e:	9800      	ldr	r0, [sp, #0]
 8000ea0:	f7ff fad8 	bl	8000454 <__aeabi_llsr>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	409c      	lsls	r4, r3
 8000ea8:	4018      	ands	r0, r3
    for( i = 47; i > 0; i -= 2 )
 8000eaa:	3f02      	subs	r7, #2
        handle->lfsr_even = (handle->lfsr_even << 1) | BIT( key, i ^ 7 );
 8000eac:	4304      	orrs	r4, r0
    for( i = 47; i > 0; i -= 2 )
 8000eae:	1c7b      	adds	r3, r7, #1
 8000eb0:	d1e7      	bne.n	8000e82 <mccCryptoInit+0x10>
 8000eb2:	606e      	str	r6, [r5, #4]
 8000eb4:	60ac      	str	r4, [r5, #8]
}
 8000eb6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08000eb8 <mccCryptoReset>:
    handle->prng = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	8003      	strh	r3, [r0, #0]
    handle->lfsr_odd = 0;
 8000ebc:	6043      	str	r3, [r0, #4]
    handle->lfsr_even = 0;
 8000ebe:	6083      	str	r3, [r0, #8]
    if ( keepActive != 1 )
 8000ec0:	2901      	cmp	r1, #1
 8000ec2:	d000      	beq.n	8000ec6 <mccCryptoReset+0xe>
        handle->is_active = 0;
 8000ec4:	7083      	strb	r3, [r0, #2]
}
 8000ec6:	4770      	bx	lr

08000ec8 <mccCryptoAuthInit>:
{
 8000ec8:	b510      	push	{r4, lr}
    mccLfsrUpdate( handle, uid ^ nonce, 0 );
 8000eca:	4051      	eors	r1, r2
    handle->prng = nonce;
 8000ecc:	8002      	strh	r2, [r0, #0]
    mccLfsrUpdate( handle, uid ^ nonce, 0 );
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f7ff ff9e 	bl	8000e10 <mccLfsrUpdate>
}
 8000ed4:	bd10      	pop	{r4, pc}

08000ed6 <mccCryptoAuthReinit>:
{
 8000ed6:	b570      	push	{r4, r5, r6, lr}
    uint32_t ks = mccLfsrUpdate( handle, nonce ^ uid, 1 );
 8000ed8:	4051      	eors	r1, r2
{
 8000eda:	0014      	movs	r4, r2
    uint32_t ks = mccLfsrUpdate( handle, nonce ^ uid, 1 );
 8000edc:	2201      	movs	r2, #1
{
 8000ede:	0005      	movs	r5, r0
    uint32_t ks = mccLfsrUpdate( handle, nonce ^ uid, 1 );
 8000ee0:	f7ff ff96 	bl	8000e10 <mccLfsrUpdate>
    uint32_t nonce_decrypted = nonce ^ ks;
 8000ee4:	4044      	eors	r4, r0
    handle->prng = nonce_decrypted;
 8000ee6:	802c      	strh	r4, [r5, #0]
}
 8000ee8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000eec <mccCryptoTranscode>:
{
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	0005      	movs	r5, r0
 8000ef0:	000c      	movs	r4, r1
 8000ef2:	000e      	movs	r6, r1
        data_w_parity[i] ^= (FILTER(handle->lfsr_odd) << 0x08);
 8000ef4:	270f      	movs	r7, #15
{
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	0053      	lsls	r3, r2, #1
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	18cb      	adds	r3, r1, r3
 8000f00:	9301      	str	r3, [sp, #4]
    for ( i=0; i < bytes; i++ )
 8000f02:	9b01      	ldr	r3, [sp, #4]
 8000f04:	429e      	cmp	r6, r3
 8000f06:	d107      	bne.n	8000f18 <mccCryptoTranscode+0x2c>
    for ( i = 0; i < bits; i++ )
 8000f08:	2600      	movs	r6, #0
        data_w_parity[bytes] ^= mccLfsrUpdateBit( handle, 0, 0 ) << i;
 8000f0a:	9b00      	ldr	r3, [sp, #0]
 8000f0c:	18e4      	adds	r4, r4, r3
    for ( i = 0; i < bits; i++ )
 8000f0e:	9b02      	ldr	r3, [sp, #8]
 8000f10:	42b3      	cmp	r3, r6
 8000f12:	dc3f      	bgt.n	8000f94 <mccCryptoTranscode+0xa8>
}
 8000f14:	b005      	add	sp, #20
 8000f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        data_w_parity[i] ^= mccLfsrUpdateByte( handle, 0, 0 );
 8000f18:	2200      	movs	r2, #0
 8000f1a:	0028      	movs	r0, r5
 8000f1c:	0011      	movs	r1, r2
 8000f1e:	f7ff ff61 	bl	8000de4 <mccLfsrUpdateByte>
        data_w_parity[i] ^= (FILTER(handle->lfsr_odd) << 0x08);
 8000f22:	686a      	ldr	r2, [r5, #4]
 8000f24:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <mccCryptoTranscode+0xc0>)
 8000f26:	0911      	lsrs	r1, r2, #4
 8000f28:	4039      	ands	r1, r7
 8000f2a:	410b      	asrs	r3, r1
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	400b      	ands	r3, r1
 8000f30:	0a11      	lsrs	r1, r2, #8
 8000f32:	4039      	ands	r1, r7
 8000f34:	468c      	mov	ip, r1
        data_w_parity[i] ^= mccLfsrUpdateByte( handle, 0, 0 );
 8000f36:	9003      	str	r0, [sp, #12]
        data_w_parity[i] ^= (FILTER(handle->lfsr_odd) << 0x08);
 8000f38:	4660      	mov	r0, ip
 8000f3a:	491d      	ldr	r1, [pc, #116]	@ (8000fb0 <mccCryptoTranscode+0xc4>)
 8000f3c:	4101      	asrs	r1, r0
 8000f3e:	2004      	movs	r0, #4
 8000f40:	4001      	ands	r1, r0
 8000f42:	430b      	orrs	r3, r1
 8000f44:	0011      	movs	r1, r2
 8000f46:	4039      	ands	r1, r7
 8000f48:	468c      	mov	ip, r1
 8000f4a:	4660      	mov	r0, ip
 8000f4c:	4919      	ldr	r1, [pc, #100]	@ (8000fb4 <mccCryptoTranscode+0xc8>)
 8000f4e:	4101      	asrs	r1, r0
 8000f50:	2010      	movs	r0, #16
 8000f52:	4001      	ands	r1, r0
 8000f54:	430b      	orrs	r3, r1
 8000f56:	0b11      	lsrs	r1, r2, #12
 8000f58:	4039      	ands	r1, r7
 8000f5a:	468c      	mov	ip, r1
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	4916      	ldr	r1, [pc, #88]	@ (8000fb8 <mccCryptoTranscode+0xcc>)
 8000f60:	0c12      	lsrs	r2, r2, #16
 8000f62:	4101      	asrs	r1, r0
 8000f64:	2002      	movs	r0, #2
 8000f66:	4001      	ands	r1, r0
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	4914      	ldr	r1, [pc, #80]	@ (8000fbc <mccCryptoTranscode+0xd0>)
 8000f6c:	403a      	ands	r2, r7
 8000f6e:	4111      	asrs	r1, r2
 8000f70:	000a      	movs	r2, r1
 8000f72:	2101      	movs	r1, #1
 8000f74:	400a      	ands	r2, r1
 8000f76:	431a      	orrs	r2, r3
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <mccCryptoTranscode+0xd4>)
 8000f7a:	4684      	mov	ip, r0
 8000f7c:	40d3      	lsrs	r3, r2
 8000f7e:	2280      	movs	r2, #128	@ 0x80
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	0052      	lsls	r2, r2, #1
 8000f84:	4013      	ands	r3, r2
 8000f86:	8832      	ldrh	r2, [r6, #0]
 8000f88:	9803      	ldr	r0, [sp, #12]
 8000f8a:	4053      	eors	r3, r2
 8000f8c:	4058      	eors	r0, r3
 8000f8e:	8030      	strh	r0, [r6, #0]
    for ( i=0; i < bytes; i++ )
 8000f90:	4466      	add	r6, ip
 8000f92:	e7b6      	b.n	8000f02 <mccCryptoTranscode+0x16>
        data_w_parity[bytes] ^= mccLfsrUpdateBit( handle, 0, 0 ) << i;
 8000f94:	2200      	movs	r2, #0
 8000f96:	0028      	movs	r0, r5
 8000f98:	0011      	movs	r1, r2
 8000f9a:	f7ff fed5 	bl	8000d48 <mccLfsrUpdateBit>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	40b3      	lsls	r3, r6
 8000fa2:	8820      	ldrh	r0, [r4, #0]
    for ( i = 0; i < bits; i++ )
 8000fa4:	3601      	adds	r6, #1
        data_w_parity[bytes] ^= mccLfsrUpdateBit( handle, 0, 0 ) << i;
 8000fa6:	4058      	eors	r0, r3
 8000fa8:	8020      	strh	r0, [r4, #0]
    for ( i = 0; i < bits; i++ )
 8000faa:	e7b0      	b.n	8000f0e <mccCryptoTranscode+0x22>
 8000fac:	0006c9c0 	.word	0x0006c9c0
 8000fb0:	0003c8b0 	.word	0x0003c8b0
 8000fb4:	000f22c0 	.word	0x000f22c0
 8000fb8:	0001e458 	.word	0x0001e458
 8000fbc:	0000d938 	.word	0x0000d938
 8000fc0:	ec57e80a 	.word	0xec57e80a

08000fc4 <mccCryptoIsActive>:
    return handle->is_active;
 8000fc4:	7880      	ldrb	r0, [r0, #2]
}
 8000fc6:	4770      	bx	lr

08000fc8 <mccCryptoSetActive>:
    handle->is_active = value;
 8000fc8:	7081      	strb	r1, [r0, #2]
}
 8000fca:	4770      	bx	lr

08000fcc <mccCryptoAuthReaderStep1>:
 ******************************************************************************
 */

void mccCryptoAuthReaderStep1 ( CryptoHandle_t *handle, uint32_t uid, uint32_t nonce )
{
    if ( handle->is_active != 0 )
 8000fcc:	7883      	ldrb	r3, [r0, #2]
{
 8000fce:	b510      	push	{r4, lr}
    if ( handle->is_active != 0 )
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <mccCryptoAuthReaderStep1+0xe>
    {
        mccCryptoAuthReinit( handle, uid, nonce );
 8000fd4:	f7ff ff7f 	bl	8000ed6 <mccCryptoAuthReinit>
    }
    else
    {
        mccCryptoAuthInit( handle, uid, nonce );
    }
}
 8000fd8:	bd10      	pop	{r4, pc}
        mccCryptoAuthInit( handle, uid, nonce );
 8000fda:	f7ff ff75 	bl	8000ec8 <mccCryptoAuthInit>
}
 8000fde:	e7fb      	b.n	8000fd8 <mccCryptoAuthReaderStep1+0xc>

08000fe0 <mccCryptoAuthReaderStep2>:

int mccCryptoAuthReaderStep2 ( CryptoHandle_t *handle, uint16_t challenge[4], uint16_t response[4] )
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t nonce = TO_uint32_t( challenge );
 8000fe2:	880b      	ldrh	r3, [r1, #0]
{
 8000fe4:	b087      	sub	sp, #28
 8000fe6:	9201      	str	r2, [sp, #4]
    uint32_t nonce = TO_uint32_t( challenge );
 8000fe8:	798a      	ldrb	r2, [r1, #6]
 8000fea:	061b      	lsls	r3, r3, #24
 8000fec:	431a      	orrs	r2, r3
 8000fee:	888b      	ldrh	r3, [r1, #4]
{
 8000ff0:	000e      	movs	r6, r1
    uint32_t nonce = TO_uint32_t( challenge );
 8000ff2:	061b      	lsls	r3, r3, #24
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	884b      	ldrh	r3, [r1, #2]
 8000ffa:	21ff      	movs	r1, #255	@ 0xff
 8000ffc:	041b      	lsls	r3, r3, #16
 8000ffe:	0409      	lsls	r1, r1, #16
 8001000:	400b      	ands	r3, r1
 8001002:	431a      	orrs	r2, r3
{
 8001004:	0004      	movs	r4, r0
    uint32_t readerResponse;
    int i;

    MCC_DBG( "I: PRNG = 0x%x\n", handle->prng );
 8001006:	8801      	ldrh	r1, [r0, #0]
 8001008:	484e      	ldr	r0, [pc, #312]	@ (8001144 <mccCryptoAuthReaderStep2+0x164>)
    uint32_t nonce = TO_uint32_t( challenge );
 800100a:	9202      	str	r2, [sp, #8]
    MCC_DBG( "I: PRNG = 0x%x\n", handle->prng );
 800100c:	f00f f876 	bl	80100fc <logUsart>
    MCC_DBG( "I: nonce: 0x%x%x\n", (uint16_t)(nonce >> 16), (uint16_t)(nonce) );
 8001010:	466b      	mov	r3, sp
 8001012:	891a      	ldrh	r2, [r3, #8]
 8001014:	9b02      	ldr	r3, [sp, #8]
 8001016:	484c      	ldr	r0, [pc, #304]	@ (8001148 <mccCryptoAuthReaderStep2+0x168>)
 8001018:	0c19      	lsrs	r1, r3, #16
 800101a:	f00f f86f 	bl	80100fc <logUsart>
    MCC_DBG( "D: odd = 0x%x%x\n", (uint16_t)(handle->lfsr_odd >> 16), (uint16_t)handle->lfsr_odd );
 800101e:	4b4b      	ldr	r3, [pc, #300]	@ (800114c <mccCryptoAuthReaderStep2+0x16c>)
 8001020:	6861      	ldr	r1, [r4, #4]
 8001022:	0018      	movs	r0, r3
 8001024:	b28a      	uxth	r2, r1
 8001026:	0c09      	lsrs	r1, r1, #16
 8001028:	9303      	str	r3, [sp, #12]
 800102a:	f00f f867 	bl	80100fc <logUsart>
    MCC_DBG( "D: evn = 0x%x%x\n", (uint16_t)(handle->lfsr_even >> 16), (uint16_t)handle->lfsr_even );
 800102e:	68a1      	ldr	r1, [r4, #8]
 8001030:	4847      	ldr	r0, [pc, #284]	@ (8001150 <mccCryptoAuthReaderStep2+0x170>)
 8001032:	b28a      	uxth	r2, r1
 8001034:	0c09      	lsrs	r1, r1, #16
 8001036:	f00f f861 	bl	80100fc <logUsart>
 800103a:	2718      	movs	r7, #24
#endif // DEBUG_LFSR

    for ( i = 3; i >= 0; i-- )
    {
        challenge[3-i] ^= mccLfsrUpdateByte( handle, (nonce >> (i*8)) & 0xFF, 0 );
        challenge[3-i] ^= FILTER( handle->lfsr_odd) << 0x08;
 800103c:	250f      	movs	r5, #15
        challenge[3-i] ^= mccLfsrUpdateByte( handle, (nonce >> (i*8)) & 0xFF, 0 );
 800103e:	9902      	ldr	r1, [sp, #8]
 8001040:	2200      	movs	r2, #0
 8001042:	40f9      	lsrs	r1, r7
 8001044:	0020      	movs	r0, r4
 8001046:	b2c9      	uxtb	r1, r1
 8001048:	f7ff fecc 	bl	8000de4 <mccLfsrUpdateByte>
        challenge[3-i] ^= FILTER( handle->lfsr_odd) << 0x08;
 800104c:	6862      	ldr	r2, [r4, #4]
        challenge[3-i] ^= mccLfsrUpdateByte( handle, (nonce >> (i*8)) & 0xFF, 0 );
 800104e:	9005      	str	r0, [sp, #20]
        challenge[3-i] ^= FILTER( handle->lfsr_odd) << 0x08;
 8001050:	0c13      	lsrs	r3, r2, #16
 8001052:	4840      	ldr	r0, [pc, #256]	@ (8001154 <mccCryptoAuthReaderStep2+0x174>)
 8001054:	9304      	str	r3, [sp, #16]
 8001056:	0913      	lsrs	r3, r2, #4
 8001058:	402b      	ands	r3, r5
 800105a:	4118      	asrs	r0, r3
 800105c:	2308      	movs	r3, #8
 800105e:	4018      	ands	r0, r3
 8001060:	0a13      	lsrs	r3, r2, #8
 8001062:	402b      	ands	r3, r5
 8001064:	469c      	mov	ip, r3
 8001066:	4661      	mov	r1, ip
 8001068:	4b3b      	ldr	r3, [pc, #236]	@ (8001158 <mccCryptoAuthReaderStep2+0x178>)
    for ( i = 3; i >= 0; i-- )
 800106a:	3f08      	subs	r7, #8
        challenge[3-i] ^= FILTER( handle->lfsr_odd) << 0x08;
 800106c:	410b      	asrs	r3, r1
 800106e:	2104      	movs	r1, #4
 8001070:	400b      	ands	r3, r1
 8001072:	4318      	orrs	r0, r3
 8001074:	0013      	movs	r3, r2
 8001076:	402b      	ands	r3, r5
 8001078:	469c      	mov	ip, r3
 800107a:	4661      	mov	r1, ip
 800107c:	4b37      	ldr	r3, [pc, #220]	@ (800115c <mccCryptoAuthReaderStep2+0x17c>)
 800107e:	410b      	asrs	r3, r1
 8001080:	2110      	movs	r1, #16
 8001082:	400b      	ands	r3, r1
 8001084:	4318      	orrs	r0, r3
 8001086:	0b13      	lsrs	r3, r2, #12
 8001088:	402b      	ands	r3, r5
 800108a:	469c      	mov	ip, r3
 800108c:	4661      	mov	r1, ip
 800108e:	4b34      	ldr	r3, [pc, #208]	@ (8001160 <mccCryptoAuthReaderStep2+0x180>)
 8001090:	410b      	asrs	r3, r1
 8001092:	2102      	movs	r1, #2
 8001094:	400b      	ands	r3, r1
 8001096:	4303      	orrs	r3, r0
 8001098:	0c10      	lsrs	r0, r2, #16
 800109a:	4028      	ands	r0, r5
 800109c:	4684      	mov	ip, r0
 800109e:	4661      	mov	r1, ip
 80010a0:	4830      	ldr	r0, [pc, #192]	@ (8001164 <mccCryptoAuthReaderStep2+0x184>)
 80010a2:	4108      	asrs	r0, r1
 80010a4:	2101      	movs	r1, #1
 80010a6:	4008      	ands	r0, r1
 80010a8:	4318      	orrs	r0, r3
 80010aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001168 <mccCryptoAuthReaderStep2+0x188>)
 80010ac:	40c3      	lsrs	r3, r0
 80010ae:	2080      	movs	r0, #128	@ 0x80
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	0040      	lsls	r0, r0, #1
 80010b4:	4003      	ands	r3, r0
 80010b6:	9805      	ldr	r0, [sp, #20]
 80010b8:	4058      	eors	r0, r3
 80010ba:	0003      	movs	r3, r0
 80010bc:	8830      	ldrh	r0, [r6, #0]
 80010be:	4043      	eors	r3, r0
 80010c0:	8033      	strh	r3, [r6, #0]
    for ( i = 3; i >= 0; i-- )
 80010c2:	003b      	movs	r3, r7
 80010c4:	3602      	adds	r6, #2
 80010c6:	3308      	adds	r3, #8
 80010c8:	d1b9      	bne.n	800103e <mccCryptoAuthReaderStep2+0x5e>
    }

    MCC_DBG( "D: odd = 0x%x%x\n", (uint16_t)(handle->lfsr_odd >> 16), (uint16_t)handle->lfsr_odd );
 80010ca:	9904      	ldr	r1, [sp, #16]
 80010cc:	9803      	ldr	r0, [sp, #12]
 80010ce:	b292      	uxth	r2, r2
 80010d0:	f00f f814 	bl	80100fc <logUsart>
    MCC_DBG( "D: evn = 0x%x%x\n", (uint16_t)(handle->lfsr_even >> 16), (uint16_t)handle->lfsr_even );
 80010d4:	68a1      	ldr	r1, [r4, #8]
 80010d6:	481e      	ldr	r0, [pc, #120]	@ (8001150 <mccCryptoAuthReaderStep2+0x170>)
 80010d8:	b28a      	uxth	r2, r1
 80010da:	0c09      	lsrs	r1, r1, #16
 80010dc:	f00f f80e 	bl	80100fc <logUsart>
                                  (uint16_t)(handle->lfsr_lfsr >> 16),
                                  (uint16_t)(handle->lfsr_lfsr >> 0)
                                );
#endif // DEBUG_LFSR

    readerResponse = mccPrng( handle, 64 );
 80010e0:	2140      	movs	r1, #64	@ 0x40
 80010e2:	0020      	movs	r0, r4
 80010e4:	f7ff feac 	bl	8000e40 <mccPrng>

    // Reuse response to send data, add it after the response from the tag
    uint32_t_TO_ARRAY_PARITY( readerResponse, response );
 80010e8:	27ff      	movs	r7, #255	@ 0xff
 80010ea:	0006      	movs	r6, r0
 80010ec:	403e      	ands	r6, r7
    readerResponse = mccPrng( handle, 64 );
 80010ee:	0005      	movs	r5, r0
    uint32_t_TO_ARRAY_PARITY( readerResponse, response );
 80010f0:	0030      	movs	r0, r6
 80010f2:	f000 f8b0 	bl	8001256 <mccParityOdd>
 80010f6:	9b01      	ldr	r3, [sp, #4]
 80010f8:	0200      	lsls	r0, r0, #8
 80010fa:	4306      	orrs	r6, r0
 80010fc:	80de      	strh	r6, [r3, #6]
 80010fe:	0a2e      	lsrs	r6, r5, #8
 8001100:	403e      	ands	r6, r7
 8001102:	0030      	movs	r0, r6
 8001104:	f000 f8a7 	bl	8001256 <mccParityOdd>
 8001108:	9b01      	ldr	r3, [sp, #4]
 800110a:	0200      	lsls	r0, r0, #8
 800110c:	4306      	orrs	r6, r0
 800110e:	809e      	strh	r6, [r3, #4]
 8001110:	0c2e      	lsrs	r6, r5, #16
 8001112:	403e      	ands	r6, r7
 8001114:	0030      	movs	r0, r6
 8001116:	f000 f89e 	bl	8001256 <mccParityOdd>
 800111a:	9b01      	ldr	r3, [sp, #4]
 800111c:	0200      	lsls	r0, r0, #8
 800111e:	4306      	orrs	r6, r0
 8001120:	0e2d      	lsrs	r5, r5, #24
 8001122:	805e      	strh	r6, [r3, #2]
 8001124:	0028      	movs	r0, r5
 8001126:	f000 f896 	bl	8001256 <mccParityOdd>
 800112a:	9b01      	ldr	r3, [sp, #4]
 800112c:	0200      	lsls	r0, r0, #8
 800112e:	4328      	orrs	r0, r5
 8001130:	8018      	strh	r0, [r3, #0]

    mccCryptoTranscode( handle, response, 4, 0 );
 8001132:	2204      	movs	r2, #4
 8001134:	0020      	movs	r0, r4
 8001136:	2300      	movs	r3, #0
 8001138:	9901      	ldr	r1, [sp, #4]
 800113a:	f7ff fed7 	bl	8000eec <mccCryptoTranscode>

    return 1;
}
 800113e:	2001      	movs	r0, #1
 8001140:	b007      	add	sp, #28
 8001142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001144:	08010f18 	.word	0x08010f18
 8001148:	08010f28 	.word	0x08010f28
 800114c:	08010d60 	.word	0x08010d60
 8001150:	08010d71 	.word	0x08010d71
 8001154:	0006c9c0 	.word	0x0006c9c0
 8001158:	0003c8b0 	.word	0x0003c8b0
 800115c:	000f22c0 	.word	0x000f22c0
 8001160:	0001e458 	.word	0x0001e458
 8001164:	0000d938 	.word	0x0000d938
 8001168:	ec57e80a 	.word	0xec57e80a

0800116c <mccCryptoAuthReaderStep3>:

int mccCryptoAuthReaderStep3 ( CryptoHandle_t *handle, uint16_t response[4] )
{
    uint32_t tag_response = TO_uint32_t( response );
 800116c:	22ff      	movs	r2, #255	@ 0xff
{
 800116e:	b570      	push	{r4, r5, r6, lr}
 8001170:	0006      	movs	r6, r0
    uint32_t tag_response = TO_uint32_t( response );
 8001172:	880b      	ldrh	r3, [r1, #0]
 8001174:	798c      	ldrb	r4, [r1, #6]
 8001176:	061b      	lsls	r3, r3, #24
 8001178:	431c      	orrs	r4, r3
 800117a:	888b      	ldrh	r3, [r1, #4]
 800117c:	0412      	lsls	r2, r2, #16
 800117e:	061b      	lsls	r3, r3, #24
 8001180:	0c1b      	lsrs	r3, r3, #16
 8001182:	431c      	orrs	r4, r3
 8001184:	884b      	ldrh	r3, [r1, #2]
    uint32_t expected_response;
    int rv = 0;

    MCC_DBG("D: PRNG: 0x%x\n", handle->prng);
 8001186:	8801      	ldrh	r1, [r0, #0]
    uint32_t tag_response = TO_uint32_t( response );
 8001188:	041b      	lsls	r3, r3, #16
 800118a:	4013      	ands	r3, r2
    MCC_DBG("D: PRNG: 0x%x\n", handle->prng);
 800118c:	4814      	ldr	r0, [pc, #80]	@ (80011e0 <mccCryptoAuthReaderStep3+0x74>)
    uint32_t tag_response = TO_uint32_t( response );
 800118e:	431c      	orrs	r4, r3
    MCC_DBG("D: PRNG: 0x%x\n", handle->prng);
 8001190:	f00e ffb4 	bl	80100fc <logUsart>

    expected_response = mccPrng( handle, 96 ) ^ mccLfsrUpdate( handle, 0, 0 );
 8001194:	0030      	movs	r0, r6
 8001196:	2160      	movs	r1, #96	@ 0x60
 8001198:	f7ff fe52 	bl	8000e40 <mccPrng>
 800119c:	2200      	movs	r2, #0
 800119e:	0005      	movs	r5, r0
 80011a0:	0011      	movs	r1, r2
 80011a2:	0030      	movs	r0, r6
 80011a4:	f7ff fe34 	bl	8000e10 <mccLfsrUpdate>

    MCC_DBG( "D: odd = 0x%x%x\n", (uint16_t)(handle->lfsr_odd >> 16), (uint16_t)handle->lfsr_odd );
 80011a8:	6871      	ldr	r1, [r6, #4]
    expected_response = mccPrng( handle, 96 ) ^ mccLfsrUpdate( handle, 0, 0 );
 80011aa:	4045      	eors	r5, r0
    MCC_DBG( "D: odd = 0x%x%x\n", (uint16_t)(handle->lfsr_odd >> 16), (uint16_t)handle->lfsr_odd );
 80011ac:	b28a      	uxth	r2, r1
 80011ae:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <mccCryptoAuthReaderStep3+0x78>)
 80011b0:	0c09      	lsrs	r1, r1, #16
 80011b2:	f00e ffa3 	bl	80100fc <logUsart>
    MCC_DBG( "D: evn = 0x%x%x\n", (uint16_t)(handle->lfsr_even >> 16), (uint16_t)handle->lfsr_even );
 80011b6:	68b1      	ldr	r1, [r6, #8]
 80011b8:	480b      	ldr	r0, [pc, #44]	@ (80011e8 <mccCryptoAuthReaderStep3+0x7c>)
 80011ba:	b28a      	uxth	r2, r1
 80011bc:	0c09      	lsrs	r1, r1, #16
 80011be:	f00e ff9d 	bl	80100fc <logUsart>
                                  (uint16_t)(handle->lfsr_lfsr >> 16),
                                  (uint16_t)(handle->lfsr_lfsr >> 0)
                                );
#endif // DEBUG_LFSR

    MCC_DBG("D: response: tag = 0x%x%x\n", (uint16_t)(tag_response >> 16), (uint16_t)tag_response);
 80011c2:	b2a2      	uxth	r2, r4
 80011c4:	0c21      	lsrs	r1, r4, #16
 80011c6:	4809      	ldr	r0, [pc, #36]	@ (80011ec <mccCryptoAuthReaderStep3+0x80>)
 80011c8:	f00e ff98 	bl	80100fc <logUsart>
    MCC_DBG("D: response: exp = 0x%x%x\n", (uint16_t)(expected_response >> 16), (uint16_t)expected_response);
 80011cc:	b2aa      	uxth	r2, r5
 80011ce:	0c29      	lsrs	r1, r5, #16
 80011d0:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <mccCryptoAuthReaderStep3+0x84>)
 80011d2:	f00e ff93 	bl	80100fc <logUsart>

    if ( tag_response == expected_response )
 80011d6:	1b60      	subs	r0, r4, r5
 80011d8:	4243      	negs	r3, r0
 80011da:	4158      	adcs	r0, r3
    {
        rv = 1;
    }
    
    return rv;
}
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	08010f3a 	.word	0x08010f3a
 80011e4:	08010d60 	.word	0x08010d60
 80011e8:	08010d71 	.word	0x08010d71
 80011ec:	08010f49 	.word	0x08010f49
 80011f0:	08010f64 	.word	0x08010f64

080011f4 <mccReverse>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

uint32_t mccReverse ( register uint32_t x )
{
 80011f4:	0003      	movs	r3, r0
    x = (((x & 0xaaaaaaaa) >> 1) | ((x & 0x55555555) << 1)); // Swap odd, even
 80011f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <mccReverse+0x30>)
 80011f8:	0840      	lsrs	r0, r0, #1
 80011fa:	4010      	ands	r0, r2
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <mccReverse+0x34>)
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4013      	ands	r3, r2
 8001202:	4318      	orrs	r0, r3
    x = (((x & 0xcccccccc) >> 2) | ((x & 0x33333333) << 2)); // 2 bits change, nibble is reversed
 8001204:	4a09      	ldr	r2, [pc, #36]	@ (800122c <mccReverse+0x38>)
 8001206:	0883      	lsrs	r3, r0, #2
 8001208:	4013      	ands	r3, r2
 800120a:	4a09      	ldr	r2, [pc, #36]	@ (8001230 <mccReverse+0x3c>)
 800120c:	0080      	lsls	r0, r0, #2
 800120e:	4010      	ands	r0, r2
 8001210:	4303      	orrs	r3, r0
    x = (((x & 0xf0f0f0f0) >> 4) | ((x & 0x0f0f0f0f) << 4)); // swap 4 bits and get desired result
 8001212:	4a08      	ldr	r2, [pc, #32]	@ (8001234 <mccReverse+0x40>)
 8001214:	0918      	lsrs	r0, r3, #4
 8001216:	4010      	ands	r0, r2
 8001218:	4a07      	ldr	r2, [pc, #28]	@ (8001238 <mccReverse+0x44>)
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	4013      	ands	r3, r2
 800121e:	4318      	orrs	r0, r3
    return x;
}
 8001220:	4770      	bx	lr
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	55555555 	.word	0x55555555
 8001228:	aaaaaaaa 	.word	0xaaaaaaaa
 800122c:	33333333 	.word	0x33333333
 8001230:	cccccccc 	.word	0xcccccccc
 8001234:	0f0f0f0f 	.word	0x0f0f0f0f
 8001238:	f0f0f0f0 	.word	0xf0f0f0f0

0800123c <mccParityEven>:

uint32_t mccParityEven ( uint32_t val )
{
    val ^= val >> 16;
 800123c:	0c03      	lsrs	r3, r0, #16
 800123e:	4058      	eors	r0, r3
    val ^= val >>  8;
 8001240:	0a03      	lsrs	r3, r0, #8
 8001242:	4043      	eors	r3, r0
    val ^= val >>  4;
 8001244:	0918      	lsrs	r0, r3, #4
 8001246:	4058      	eors	r0, r3
    val ^= val >>  2;
 8001248:	0883      	lsrs	r3, r0, #2
 800124a:	4043      	eors	r3, r0
    return (val ^ (val>>1)) & 1;
 800124c:	0858      	lsrs	r0, r3, #1
 800124e:	4058      	eors	r0, r3
 8001250:	2301      	movs	r3, #1
 8001252:	4018      	ands	r0, r3
}
 8001254:	4770      	bx	lr

08001256 <mccParityOdd>:

uint32_t mccParityOdd ( uint32_t val )
{
    val ^= val >> 16;
 8001256:	0c03      	lsrs	r3, r0, #16
 8001258:	4043      	eors	r3, r0
    val ^= val >>  8;
 800125a:	0a18      	lsrs	r0, r3, #8
 800125c:	4058      	eors	r0, r3
    val ^= val >>  4;
 800125e:	0903      	lsrs	r3, r0, #4
 8001260:	4043      	eors	r3, r0
    val ^= val >>  2;
 8001262:	0898      	lsrs	r0, r3, #2
 8001264:	4058      	eors	r0, r3
    return (~(val ^ (val>>1))&1);
 8001266:	0843      	lsrs	r3, r0, #1
 8001268:	4043      	eors	r3, r0
 800126a:	2001      	movs	r0, #1
 800126c:	4398      	bics	r0, r3
}
 800126e:	4770      	bx	lr

08001270 <mccSendRawRequest>:
                           uint8_t *response,
                           uint16_t maxResponseLength,
                           uint16_t *responseLength,
                           uint16_t timeout,
                           uint8_t fourBitResponse )
{
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	b08f      	sub	sp, #60	@ 0x3c
 8001274:	9303      	str	r3, [sp, #12]
 8001276:	ab14      	add	r3, sp, #80	@ 0x50
 8001278:	9202      	str	r2, [sp, #8]
 800127a:	cb04      	ldmia	r3!, {r2}
*/
static uint16_t mccCopyToRawBuffer ( uint16_t *message, uint16_t length )
{
    int i, bytepos = 0;
    int bitpos = 0;
    memset(mccRawBuffer,0,sizeof(mccRawBuffer));
 800127c:	4c48      	ldr	r4, [pc, #288]	@ (80013a0 <mccSendRawRequest+0x130>)
{
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	9004      	str	r0, [sp, #16]
 8001282:	9101      	str	r1, [sp, #4]
 8001284:	9200      	str	r2, [sp, #0]
    memset(mccRawBuffer,0,sizeof(mccRawBuffer));
 8001286:	2100      	movs	r1, #0
 8001288:	2248      	movs	r2, #72	@ 0x48
 800128a:	0020      	movs	r0, r4
{
 800128c:	9305      	str	r3, [sp, #20]
    memset(mccRawBuffer,0,sizeof(mccRawBuffer));
 800128e:	f00f f81b 	bl	80102c8 <memset>
    int bitpos = 0;
 8001292:	2200      	movs	r2, #0


    for (i = 0; i < length; i++)
    {
        uint16_t m = message[i];
        mccRawBuffer[bytepos] |= (m & ((1<<(8 - bitpos))-1)) << bitpos;
 8001294:	2301      	movs	r3, #1
    int i, bytepos = 0;
 8001296:	0011      	movs	r1, r2
    for (i = 0; i < length; i++)
 8001298:	0010      	movs	r0, r2
        mccRawBuffer[bytepos] |= (m & ((1<<(8 - bitpos))-1)) << bitpos;
 800129a:	469c      	mov	ip, r3
    for (i = 0; i < length; i++)
 800129c:	9b01      	ldr	r3, [sp, #4]
 800129e:	4298      	cmp	r0, r3
 80012a0:	db40      	blt.n	8001324 <mccSendRawRequest+0xb4>
    for ( i= 0; i< ((length*9)+7)/8;i++)
    {
        MCC_DBG("%hhx,",mccRawBuffer[i]);
    }
    MCC_DBG("\n");
    return length*9;
 80012a2:	2309      	movs	r3, #9
 80012a4:	9a01      	ldr	r2, [sp, #4]
    ctx.txBuf = mccRawBuffer;
 80012a6:	4d3e      	ldr	r5, [pc, #248]	@ (80013a0 <mccSendRawRequest+0x130>)
    return length*9;
 80012a8:	4353      	muls	r3, r2
    ctx.txBufLen = len_bits;
 80012aa:	aa06      	add	r2, sp, #24
 80012ac:	8113      	strh	r3, [r2, #8]
    ctx.rxBufLen = sizeof(mccRawBuffer) * 8;
 80012ae:	2390      	movs	r3, #144	@ 0x90
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	8213      	strh	r3, [r2, #16]
    ctx.rxRcvdLen = responseLength;
 80012b4:	9b00      	ldr	r3, [sp, #0]
    ctx.fwt = rfalConvMsTo1fc(timeout);
 80012b6:	9a05      	ldr	r2, [sp, #20]
    ctx.rxRcvdLen = responseLength;
 80012b8:	930b      	str	r3, [sp, #44]	@ 0x2c
    ctx.flags = RFAL_TXRX_FLAGS_CRC_TX_MANUAL | RFAL_TXRX_FLAGS_CRC_RX_KEEP | RFAL_TXRX_FLAGS_NFCIP1_OFF | RFAL_TXRX_FLAGS_AGC_ON | RFAL_TXRX_FLAGS_PAR_RX_KEEP | RFAL_TXRX_FLAGS_PAR_TX_NONE;
 80012ba:	2333      	movs	r3, #51	@ 0x33
 80012bc:	930c      	str	r3, [sp, #48]	@ 0x30
    ctx.fwt = rfalConvMsTo1fc(timeout);
 80012be:	4b39      	ldr	r3, [pc, #228]	@ (80013a4 <mccSendRawRequest+0x134>)
    err = rfalStartTransceive( &ctx );
 80012c0:	a807      	add	r0, sp, #28
    ctx.fwt = rfalConvMsTo1fc(timeout);
 80012c2:	4353      	muls	r3, r2
    ctx.txBuf = mccRawBuffer;
 80012c4:	9507      	str	r5, [sp, #28]
    ctx.rxBuf = mccRawBuffer;
 80012c6:	9509      	str	r5, [sp, #36]	@ 0x24
    ctx.fwt = rfalConvMsTo1fc(timeout);
 80012c8:	930d      	str	r3, [sp, #52]	@ 0x34
    err = rfalStartTransceive( &ctx );
 80012ca:	f000 fe93 	bl	8001ff4 <rfalStartTransceive>
        rfalWorker();
 80012ce:	f001 faff 	bl	80028d0 <rfalWorker>
    while((ret = rfalGetTransceiveStatus() ) == ERR_BUSY);
 80012d2:	f000 ff75 	bl	80021c0 <rfalGetTransceiveStatus>
 80012d6:	2802      	cmp	r0, #2
 80012d8:	d0f9      	beq.n	80012ce <mccSendRawRequest+0x5e>
    if (ret >= ERR_INCOMPLETE_BYTE && ret <= ERR_INCOMPLETE_BYTE_07)
 80012da:	0003      	movs	r3, r0
 80012dc:	3b28      	subs	r3, #40	@ 0x28
 80012de:	b29b      	uxth	r3, r3
 80012e0:	2b07      	cmp	r3, #7
 80012e2:	d800      	bhi.n	80012e6 <mccSendRawRequest+0x76>
 80012e4:	2000      	movs	r0, #0
 80012e6:	b243      	sxtb	r3, r0
 80012e8:	9301      	str	r3, [sp, #4]
    if ((*responseLength / 9) > maxResponseLength)
 80012ea:	9b00      	ldr	r3, [sp, #0]
 80012ec:	2109      	movs	r1, #9
 80012ee:	8818      	ldrh	r0, [r3, #0]
 80012f0:	f7fe ff3a 	bl	8000168 <__udivsi3>
 80012f4:	9b03      	ldr	r3, [sp, #12]
 80012f6:	b280      	uxth	r0, r0
 80012f8:	4298      	cmp	r0, r3
 80012fa:	d906      	bls.n	800130a <mccSendRawRequest+0x9a>
        *responseLength = maxResponseLength * 9;
 80012fc:	2309      	movs	r3, #9
 80012fe:	9a03      	ldr	r2, [sp, #12]
 8001300:	4353      	muls	r3, r2
 8001302:	9a00      	ldr	r2, [sp, #0]
 8001304:	8013      	strh	r3, [r2, #0]
        err = ERR_NOMEM; /* This will drop an existing CRC */
 8001306:	2301      	movs	r3, #1
 8001308:	9301      	str	r3, [sp, #4]
    *responseLength = mccExtractMessage(response, *responseLength);
 800130a:	9b00      	ldr	r3, [sp, #0]
 800130c:	8818      	ldrh	r0, [r3, #0]
    int bitpos = 0;
	  MCC_DBG("extracting (%d bytes)", bytes);
    MCC_DUMP(mccRawBuffer,bytes);
    if (responseLength_bits<=8)
    {
        response[0] = mccRawBuffer[0];
 800130e:	782b      	ldrb	r3, [r5, #0]
    if (responseLength_bits<=8)
 8001310:	2808      	cmp	r0, #8
 8001312:	d822      	bhi.n	800135a <mccSendRawRequest+0xea>
        return 1;
 8001314:	2001      	movs	r0, #1
        response[0] = mccRawBuffer[0];
 8001316:	9a02      	ldr	r2, [sp, #8]
 8001318:	7013      	strb	r3, [r2, #0]
    *responseLength = mccExtractMessage(response, *responseLength);
 800131a:	9b00      	ldr	r3, [sp, #0]
 800131c:	8018      	strh	r0, [r3, #0]
}
 800131e:	9801      	ldr	r0, [sp, #4]
 8001320:	b00f      	add	sp, #60	@ 0x3c
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mccRawBuffer[bytepos] |= (m & ((1<<(8 - bitpos))-1)) << bitpos;
 8001324:	9d04      	ldr	r5, [sp, #16]
        uint16_t m = message[i];
 8001326:	0043      	lsls	r3, r0, #1
        mccRawBuffer[bytepos] |= (m & ((1<<(8 - bitpos))-1)) << bitpos;
 8001328:	5aed      	ldrh	r5, [r5, r3]
 800132a:	2308      	movs	r3, #8
 800132c:	1a9e      	subs	r6, r3, r2
 800132e:	4663      	mov	r3, ip
 8001330:	40b3      	lsls	r3, r6
 8001332:	3b01      	subs	r3, #1
 8001334:	402b      	ands	r3, r5
 8001336:	4093      	lsls	r3, r2
        mccRawBuffer[bytepos] |= (m >> (8-bitpos));
 8001338:	4135      	asrs	r5, r6
        mccRawBuffer[bytepos] |= (m & ((1<<(8 - bitpos))-1)) << bitpos;
 800133a:	5c67      	ldrb	r7, [r4, r1]
 800133c:	433b      	orrs	r3, r7
 800133e:	5463      	strb	r3, [r4, r1]
        bytepos++;
 8001340:	1c4b      	adds	r3, r1, #1
        mccRawBuffer[bytepos] |= (m >> (8-bitpos));
 8001342:	5ce6      	ldrb	r6, [r4, r3]
 8001344:	432e      	orrs	r6, r5
        bitpos += 1;
 8001346:	1c55      	adds	r5, r2, #1
        mccRawBuffer[bytepos] |= (m >> (8-bitpos));
 8001348:	54e6      	strb	r6, [r4, r3]
        if (bitpos >=8 )
 800134a:	2d07      	cmp	r5, #7
 800134c:	dd01      	ble.n	8001352 <mccSendRawRequest+0xe2>
            bitpos -= 8;
 800134e:	1fd5      	subs	r5, r2, #7
            bytepos++;
 8001350:	1c8b      	adds	r3, r1, #2
    for (i = 0; i < length; i++)
 8001352:	002a      	movs	r2, r5
 8001354:	0019      	movs	r1, r3
 8001356:	3001      	adds	r0, #1
 8001358:	e7a0      	b.n	800129c <mccSendRawRequest+0x2c>
    int bytes = responseLength_bits / 9;
 800135a:	2109      	movs	r1, #9
 800135c:	f7fe ff04 	bl	8000168 <__udivsi3>
    }
    for (i = 0; i < bytes; i++)
 8001360:	2200      	movs	r2, #0
    int bitpos = 0;
 8001362:	0011      	movs	r1, r2
    int i, bytepos = 0;
 8001364:	0015      	movs	r5, r2
    {
        uint8_t m;
        m = (mccRawBuffer[bytepos] >> bitpos);
        bytepos++;
        m |= (mccRawBuffer[bytepos] << (8-bitpos));
 8001366:	4e0e      	ldr	r6, [pc, #56]	@ (80013a0 <mccSendRawRequest+0x130>)
    int bytes = responseLength_bits / 9;
 8001368:	b280      	uxth	r0, r0
        bytepos++;
 800136a:	1c6c      	adds	r4, r5, #1
        m |= (mccRawBuffer[bytepos] << (8-bitpos));
 800136c:	5d33      	ldrb	r3, [r6, r4]
 800136e:	469c      	mov	ip, r3
 8001370:	2308      	movs	r3, #8
 8001372:	4667      	mov	r7, ip
 8001374:	1a5b      	subs	r3, r3, r1
 8001376:	409f      	lsls	r7, r3
 8001378:	003b      	movs	r3, r7
        m = (mccRawBuffer[bytepos] >> bitpos);
 800137a:	5d77      	ldrb	r7, [r6, r5]
 800137c:	410f      	asrs	r7, r1
        m |= (mccRawBuffer[bytepos] << (8-bitpos));
 800137e:	433b      	orrs	r3, r7

        bitpos += 1;
 8001380:	1c4f      	adds	r7, r1, #1
        m |= (mccRawBuffer[bytepos] << (8-bitpos));
 8001382:	b2db      	uxtb	r3, r3
        if (bitpos >=8 )
 8001384:	2f07      	cmp	r7, #7
 8001386:	dd07      	ble.n	8001398 <mccSendRawRequest+0x128>
        {
            bitpos -= 8;
 8001388:	3907      	subs	r1, #7
            bytepos++;
 800138a:	3502      	adds	r5, #2
        }

        response[i] = m;
 800138c:	9c02      	ldr	r4, [sp, #8]
 800138e:	54a3      	strb	r3, [r4, r2]
    for (i = 0; i < bytes; i++)
 8001390:	3201      	adds	r2, #1
 8001392:	4290      	cmp	r0, r2
 8001394:	dce9      	bgt.n	800136a <mccSendRawRequest+0xfa>
 8001396:	e7c0      	b.n	800131a <mccSendRawRequest+0xaa>
        bitpos += 1;
 8001398:	0039      	movs	r1, r7
        bytepos++;
 800139a:	0025      	movs	r5, r4
 800139c:	e7f6      	b.n	800138c <mccSendRawRequest+0x11c>
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	200004c8 	.word	0x200004c8
 80013a4:	000034f8 	.word	0x000034f8

080013a8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	2101      	movs	r1, #1
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_MspInit+0x2c>)
{
 80013ac:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	619a      	str	r2, [r3, #24]
 80013b4:	699a      	ldr	r2, [r3, #24]
 80013b6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	9200      	str	r2, [sp, #0]
 80013bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	69da      	ldr	r2, [r3, #28]
 80013c0:	0549      	lsls	r1, r1, #21
 80013c2:	430a      	orrs	r2, r1
 80013c4:	61da      	str	r2, [r3, #28]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	400b      	ands	r3, r1
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	b002      	add	sp, #8
 80013d0:	4770      	bx	lr
 80013d2:	46c0      	nop			@ (mov r8, r8)
 80013d4:	40021000 	.word	0x40021000

080013d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler>

080013da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler>

080013dc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80013de:	4770      	bx	lr

080013e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e2:	f003 fb3f 	bl	8004a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e6:	bd10      	pop	{r4, pc}

080013e8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80013e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80013ea:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <EXTI0_1_IRQHandler+0x10>)
 80013ec:	f003 fc76 	bl	8004cdc <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 80013f0:	4802      	ldr	r0, [pc, #8]	@ (80013fc <EXTI0_1_IRQHandler+0x14>)
 80013f2:	f003 fc73 	bl	8004cdc <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80013f6:	bd10      	pop	{r4, pc}
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	2000276c 	.word	0x2000276c

08001400 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001400:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001402:	4802      	ldr	r0, [pc, #8]	@ (800140c <DMA1_Channel2_3_IRQHandler+0xc>)
 8001404:	f003 fc13 	bl	8004c2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001408:	bd10      	pop	{r4, pc}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	20000514 	.word	0x20000514

08001410 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001410:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001412:	4802      	ldr	r0, [pc, #8]	@ (800141c <SPI1_IRQHandler+0xc>)
 8001414:	f005 fba6 	bl	8006b64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001418:	bd10      	pop	{r4, pc}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	200003d8 	.word	0x200003d8

08001420 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001420:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001422:	4802      	ldr	r0, [pc, #8]	@ (800142c <USART1_IRQHandler+0xc>)
 8001424:	f005 fea4 	bl	8007170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001428:	bd10      	pop	{r4, pc}
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	200005a0 	.word	0x200005a0

08001430 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001430:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001432:	4802      	ldr	r0, [pc, #8]	@ (800143c <USART2_IRQHandler+0xc>)
 8001434:	f005 fe9c 	bl	8007170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001438:	bd10      	pop	{r4, pc}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	20000d5c 	.word	0x20000d5c

08001440 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001440:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001442:	4802      	ldr	r0, [pc, #8]	@ (800144c <USB_IRQHandler+0xc>)
 8001444:	f003 fd9e 	bl	8004f84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001448:	bd10      	pop	{r4, pc}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	20000628 	.word	0x20000628

08001450 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001450:	490b      	ldr	r1, [pc, #44]	@ (8001480 <_sbrk+0x30>)
 8001452:	4a0c      	ldr	r2, [pc, #48]	@ (8001484 <_sbrk+0x34>)
{
 8001454:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001456:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	490b      	ldr	r1, [pc, #44]	@ (8001488 <_sbrk+0x38>)
{
 800145a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800145c:	6808      	ldr	r0, [r1, #0]
 800145e:	2800      	cmp	r0, #0
 8001460:	d101      	bne.n	8001466 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001462:	480a      	ldr	r0, [pc, #40]	@ (800148c <_sbrk+0x3c>)
 8001464:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	6808      	ldr	r0, [r1, #0]
 8001468:	18c3      	adds	r3, r0, r3
 800146a:	4293      	cmp	r3, r2
 800146c:	d906      	bls.n	800147c <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800146e:	f00e ff33 	bl	80102d8 <__errno>
 8001472:	230c      	movs	r3, #12
 8001474:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001476:	2001      	movs	r0, #1
 8001478:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800147a:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800147c:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 800147e:	e7fc      	b.n	800147a <_sbrk+0x2a>
 8001480:	00000400 	.word	0x00000400
 8001484:	20004000 	.word	0x20004000
 8001488:	20000510 	.word	0x20000510
 800148c:	200028c0 	.word	0x200028c0

08001490 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001490:	4770      	bx	lr
	...

08001494 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim1);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001494:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(tim_pwmHandle->Instance==TIM1)
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_TIM_PWM_MspInit+0x58>)
 8001498:	6802      	ldr	r2, [r0, #0]
{
 800149a:	0005      	movs	r5, r0
  if(tim_pwmHandle->Instance==TIM1)
 800149c:	429a      	cmp	r2, r3
 800149e:	d123      	bne.n	80014e8 <HAL_TIM_PWM_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014a0:	2180      	movs	r1, #128	@ 0x80
 80014a2:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <HAL_TIM_PWM_MspInit+0x5c>)
 80014a4:	0109      	lsls	r1, r1, #4
 80014a6:	699a      	ldr	r2, [r3, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80014a8:	4c12      	ldr	r4, [pc, #72]	@ (80014f4 <HAL_TIM_PWM_MspInit+0x60>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014aa:	430a      	orrs	r2, r1
 80014ac:	619a      	str	r2, [r3, #24]
 80014ae:	699b      	ldr	r3, [r3, #24]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014b0:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b2:	400b      	ands	r3, r1
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	9b01      	ldr	r3, [sp, #4]
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <HAL_TIM_PWM_MspInit+0x64>)
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014ba:	60e2      	str	r2, [r4, #12]
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80014bc:	6023      	str	r3, [r4, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014be:	2310      	movs	r3, #16
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014c0:	3281      	adds	r2, #129	@ 0x81
 80014c2:	32ff      	adds	r2, #255	@ 0xff
 80014c4:	6122      	str	r2, [r4, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014c6:	2280      	movs	r2, #128	@ 0x80
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c8:	6063      	str	r3, [r4, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ca:	2300      	movs	r3, #0
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014cc:	00d2      	lsls	r2, r2, #3
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80014ce:	0020      	movs	r0, r4
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d0:	60a3      	str	r3, [r4, #8]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014d2:	6162      	str	r2, [r4, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80014d4:	61a3      	str	r3, [r4, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80014d6:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80014d8:	f003 fb38 	bl	8004b4c <HAL_DMA_Init>
 80014dc:	2800      	cmp	r0, #0
 80014de:	d001      	beq.n	80014e4 <HAL_TIM_PWM_MspInit+0x50>
    {
      Error_Handler();
 80014e0:	f7ff f930 	bl	8000744 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80014e4:	626c      	str	r4, [r5, #36]	@ 0x24
 80014e6:	6265      	str	r5, [r4, #36]	@ 0x24

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014e8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	40012c00 	.word	0x40012c00
 80014f0:	40021000 	.word	0x40021000
 80014f4:	20000514 	.word	0x20000514
 80014f8:	4002001c 	.word	0x4002001c

080014fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014fc:	b510      	push	{r4, lr}
 80014fe:	0004      	movs	r4, r0
 8001500:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	2214      	movs	r2, #20
 8001504:	2100      	movs	r1, #0
 8001506:	a801      	add	r0, sp, #4
 8001508:	f00e fede 	bl	80102c8 <memset>
  if(timHandle->Instance==TIM1)
 800150c:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <HAL_TIM_MspPostInit+0x48>)
 800150e:	6822      	ldr	r2, [r4, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d114      	bne.n	800153e <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	2180      	movs	r1, #128	@ 0x80
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <HAL_TIM_MspPostInit+0x4c>)
 8001518:	0289      	lsls	r1, r1, #10
 800151a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	430a      	orrs	r2, r1
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	400b      	ands	r3, r1
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	3bfe      	subs	r3, #254	@ 0xfe
 8001536:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001538:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f003 fbe1 	bl	8004d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800153e:	b006      	add	sp, #24
 8001540:	bd10      	pop	{r4, pc}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	40012c00 	.word	0x40012c00
 8001548:	40021000 	.word	0x40021000

0800154c <MX_TIM1_Init>:
{
 800154c:	b530      	push	{r4, r5, lr}
 800154e:	b093      	sub	sp, #76	@ 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	2208      	movs	r2, #8
 8001552:	2100      	movs	r1, #0
 8001554:	a801      	add	r0, sp, #4
 8001556:	f00e feb7 	bl	80102c8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155a:	221c      	movs	r2, #28
 800155c:	2100      	movs	r1, #0
 800155e:	a803      	add	r0, sp, #12
 8001560:	f00e feb2 	bl	80102c8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001564:	2220      	movs	r2, #32
 8001566:	2100      	movs	r1, #0
 8001568:	a80a      	add	r0, sp, #40	@ 0x28
 800156a:	f00e fead 	bl	80102c8 <memset>
  htim1.Instance = TIM1;
 800156e:	4d22      	ldr	r5, [pc, #136]	@ (80015f8 <MX_TIM1_Init+0xac>)
 8001570:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <MX_TIM1_Init+0xb0>)
  htim1.Init.Prescaler = 0;
 8001572:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 8001574:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = 59;
 8001576:	233b      	movs	r3, #59	@ 0x3b
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001578:	0028      	movs	r0, r5
  htim1.Init.Prescaler = 0;
 800157a:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 59;
 800157e:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8001582:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001586:	f005 fc8b 	bl	8006ea0 <HAL_TIM_PWM_Init>
 800158a:	42a0      	cmp	r0, r4
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0x46>
    Error_Handler();
 800158e:	f7ff f8d9 	bl	8000744 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001592:	0028      	movs	r0, r5
 8001594:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800159a:	f005 fd49 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	2800      	cmp	r0, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM1_Init+0x5a>
    Error_Handler();
 80015a2:	f7ff f8cf 	bl	8000744 <Error_Handler>
  sConfigOC.Pulse = 0;
 80015a6:	2400      	movs	r4, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a8:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015aa:	0022      	movs	r2, r4
 80015ac:	0028      	movs	r0, r5
 80015ae:	a903      	add	r1, sp, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b0:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 80015b2:	9404      	str	r4, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	9405      	str	r4, [sp, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b6:	9406      	str	r4, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	9407      	str	r4, [sp, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ba:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015bc:	9409      	str	r4, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015be:	f005 fcd7 	bl	8006f70 <HAL_TIM_PWM_ConfigChannel>
 80015c2:	42a0      	cmp	r0, r4
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0x7e>
    Error_Handler();
 80015c6:	f7ff f8bd 	bl	8000744 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ca:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015cc:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ce:	019b      	lsls	r3, r3, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015d0:	a90a      	add	r1, sp, #40	@ 0x28
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d2:	940a      	str	r4, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d4:	940b      	str	r4, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d6:	940c      	str	r4, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d8:	940d      	str	r4, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015da:	940e      	str	r4, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015dc:	930f      	str	r3, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015de:	9411      	str	r4, [sp, #68]	@ 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e0:	f005 fd58 	bl	8007094 <HAL_TIMEx_ConfigBreakDeadTime>
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM1_Init+0xa0>
    Error_Handler();
 80015e8:	f7ff f8ac 	bl	8000744 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80015ec:	0028      	movs	r0, r5
 80015ee:	f7ff ff85 	bl	80014fc <HAL_TIM_MspPostInit>
}
 80015f2:	b013      	add	sp, #76	@ 0x4c
 80015f4:	bd30      	pop	{r4, r5, pc}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	20000558 	.word	0x20000558
 80015fc:	40012c00 	.word	0x40012c00

08001600 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001600:	480b      	ldr	r0, [pc, #44]	@ (8001630 <MX_USART1_UART_Init+0x30>)
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_USART1_UART_Init+0x34>)
{
 8001604:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8001606:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8001608:	2396      	movs	r3, #150	@ 0x96
 800160a:	021b      	lsls	r3, r3, #8
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800160c:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 38400;
 800160e:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001610:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001612:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001614:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001616:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001618:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001620:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001622:	f006 f93b 	bl	800789c <HAL_UART_Init>
 8001626:	2800      	cmp	r0, #0
 8001628:	d001      	beq.n	800162e <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 800162a:	f7ff f88b 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800162e:	bd10      	pop	{r4, pc}
 8001630:	200005a0 	.word	0x200005a0
 8001634:	40013800 	.word	0x40013800

08001638 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001638:	b510      	push	{r4, lr}
 800163a:	0004      	movs	r4, r0
 800163c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	2214      	movs	r2, #20
 8001640:	2100      	movs	r1, #0
 8001642:	a803      	add	r0, sp, #12
 8001644:	f00e fe40 	bl	80102c8 <memset>
  if(uartHandle->Instance==USART1)
 8001648:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <HAL_UART_MspInit+0x70>)
 800164a:	6822      	ldr	r2, [r4, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d128      	bne.n	80016a2 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001650:	2180      	movs	r1, #128	@ 0x80
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <HAL_UART_MspInit+0x74>)
 8001654:	01c9      	lsls	r1, r1, #7
 8001656:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 800165a:	430a      	orrs	r2, r1
 800165c:	619a      	str	r2, [r3, #24]
 800165e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 8001662:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001666:	9201      	str	r2, [sp, #4]
 8001668:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	0289      	lsls	r1, r1, #10
 800166e:	430a      	orrs	r2, r1
 8001670:	615a      	str	r2, [r3, #20]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	400b      	ands	r3, r1
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167a:	23c0      	movs	r3, #192	@ 0xc0
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001684:	3301      	adds	r3, #1
 8001686:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800168a:	3b02      	subs	r3, #2
 800168c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f003 fb37 	bl	8004d00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	201b      	movs	r0, #27
 8001696:	0011      	movs	r1, r2
 8001698:	f003 fa08 	bl	8004aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800169c:	201b      	movs	r0, #27
 800169e:	f003 fa2f 	bl	8004b00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016a2:	b008      	add	sp, #32
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40021000 	.word	0x40021000

080016b0 <MX_USB_PCD_Init>:
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80016b0:	4809      	ldr	r0, [pc, #36]	@ (80016d8 <MX_USB_PCD_Init+0x28>)
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <MX_USB_PCD_Init+0x2c>)
{
 80016b4:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 80016b6:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80016b8:	2382      	movs	r3, #130	@ 0x82
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016be:	2302      	movs	r3, #2
 80016c0:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80016c6:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80016c8:	f003 fbec 	bl	8004ea4 <HAL_PCD_Init>
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USB_PCD_Init+0x24>
  {
    Error_Handler();
 80016d0:	f7ff f838 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80016d4:	bd10      	pop	{r4, pc}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	20000628 	.word	0x20000628
 80016dc:	40005c00 	.word	0x40005c00

080016e0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80016e0:	b507      	push	{r0, r1, r2, lr}

  if(pcdHandle->Instance==USB)
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <HAL_PCD_MspInit+0x30>)
 80016e4:	6802      	ldr	r2, [r0, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d111      	bne.n	800170e <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80016ea:	2180      	movs	r1, #128	@ 0x80
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_PCD_MspInit+0x34>)
 80016ee:	0409      	lsls	r1, r1, #16
 80016f0:	69da      	ldr	r2, [r3, #28]

    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80016f2:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 80016f4:	430a      	orrs	r2, r1
 80016f6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80016f8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	400b      	ands	r3, r1
 80016fe:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8001700:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8001702:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8001704:	f003 f9d2 	bl	8004aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8001708:	201f      	movs	r0, #31
 800170a:	f003 f9f9 	bl	8004b00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800170e:	bd07      	pop	{r0, r1, r2, pc}
 8001710:	40005c00 	.word	0x40005c00
 8001714:	40021000 	.word	0x40021000

08001718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001718:	480d      	ldr	r0, [pc, #52]	@ (8001750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800171a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800171c:	f7ff feb8 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <LoopForever+0x6>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	@ (8001758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <LoopForever+0xe>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	@ (8001764 <LoopForever+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001746:	f00e fdcd 	bl	80102e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800174a:	f7fe ffc9 	bl	80006e0 <main>

0800174e <LoopForever>:

LoopForever:
    b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
  ldr   r0, =_estack
 8001750:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	200003b8 	.word	0x200003b8
  ldr r2, =_sidata
 800175c:	08011760 	.word	0x08011760
  ldr r2, =_sbss
 8001760:	200003b8 	.word	0x200003b8
  ldr r4, =_ebss
 8001764:	200028bc 	.word	0x200028bc

08001768 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_COMP_IRQHandler>
	...

0800176c <rfalCleanupTransceive>:
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 800176c:	21e0      	movs	r1, #224	@ 0xe0
{
 800176e:	b510      	push	{r4, lr}
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 8001770:	2005      	movs	r0, #5
 8001772:	f002 fec8 	bl	8004506 <st25r3916ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 8001776:	2108      	movs	r1, #8
 8001778:	200c      	movs	r0, #12
 800177a:	f002 fed6 	bl	800452a <st25r3916SetRegisterBits>
    /* Transceive timers                                                           */
    /*******************************************************************************/
    rfalTimerDestroy( gRFAL.tmr.txRx );
    rfalTimerDestroy( gRFAL.tmr.RXE );
    rfalTimerDestroy( gRFAL.tmr.PPON2 );
    gRFAL.tmr.txRx   = RFAL_TIMING_NONE;
 800177e:	2200      	movs	r2, #0
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <rfalCleanupTransceive+0x28>)
 8001782:	64da      	str	r2, [r3, #76]	@ 0x4c
    gRFAL.tmr.RXE    = RFAL_TIMING_NONE;
 8001784:	645a      	str	r2, [r3, #68]	@ 0x44
    gRFAL.tmr.PPON2  = RFAL_TIMING_NONE;
 8001786:	649a      	str	r2, [r3, #72]	@ 0x48
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 8001788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178a:	4293      	cmp	r3, r2
 800178c:	d000      	beq.n	8001790 <rfalCleanupTransceive+0x24>
    {
        gRFAL.callbacks.postTxRx();
 800178e:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 8001790:	bd10      	pop	{r4, pc}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	20000904 	.word	0x20000904

08001798 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 8001798:	b570      	push	{r4, r5, r6, lr}
    uint32_t maskInterrupts;
    uint8_t  reg;
    
    /* If we are in RW or AP2P mode */
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 800179a:	4c43      	ldr	r4, [pc, #268]	@ (80018a8 <rfalPrepareTransceive+0x110>)
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
    }
    else
    {
        /* In Passive Listen Mode do not use STOP as it stops FDT timer */
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800179c:	20db      	movs	r0, #219	@ 0xdb
    if( !rfalIsModePassiveListen( gRFAL.mode ) )
 800179e:	7863      	ldrb	r3, [r4, #1]
 80017a0:	3b0a      	subs	r3, #10
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d903      	bls.n	80017ae <rfalPrepareTransceive+0x16>
        st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 80017a6:	20c2      	movs	r0, #194	@ 0xc2
 80017a8:	f002 fe61 	bl	800446e <st25r3916ExecuteCommand>
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 80017ac:	20d5      	movs	r0, #213	@ 0xd5
        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 80017ae:	f002 fe5e 	bl	800446e <st25r3916ExecuteCommand>
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    
    
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 80017b2:	6921      	ldr	r1, [r4, #16]
 80017b4:	2900      	cmp	r1, #0
 80017b6:	d00c      	beq.n	80017d2 <rfalPrepareTransceive+0x3a>
    {
        /* In Passive communications General Purpose Timer is used to measure FDT Poll */
        if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 80017b8:	7863      	ldrb	r3, [r4, #1]
 80017ba:	2b09      	cmp	r3, #9
 80017bc:	d057      	beq.n	800186e <rfalPrepareTransceive+0xd6>
 80017be:	2b0d      	cmp	r3, #13
 80017c0:	d007      	beq.n	80017d2 <rfalPrepareTransceive+0x3a>
        {
            /* Configure GPT to start at RX end */
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( ((gRFAL.timings.FDTPoll < RFAL_FDT_POLL_ADJUSTMENT) ? gRFAL.timings.FDTPoll : (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT)) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 80017c2:	4b3a      	ldr	r3, [pc, #232]	@ (80018ac <rfalPrepareTransceive+0x114>)
 80017c4:	4299      	cmp	r1, r3
 80017c6:	d84d      	bhi.n	8001864 <rfalPrepareTransceive+0xcc>
 80017c8:	08c9      	lsrs	r1, r1, #3
 80017ca:	b288      	uxth	r0, r1
 80017cc:	2120      	movs	r1, #32
 80017ce:	f002 fc80 	bl	80040d2 <st25r3916SetStartGPTimer>
    }
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 80017d2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d000      	beq.n	80017da <rfalPrepareTransceive+0x42>
    {
        gRFAL.callbacks.preTxRx();
 80017d8:	4798      	blx	r3
    /*******************************************************************************/
    
    reg = (ST25R3916_REG_ISO14443A_NFC_no_tx_par_off | ST25R3916_REG_ISO14443A_NFC_no_rx_par_off | ST25R3916_REG_ISO14443A_NFC_nfc_f0_off);
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 80017da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80017dc:	075a      	lsls	r2, r3, #29
 80017de:	0fd2      	lsrs	r2, r2, #31
 80017e0:	0152      	lsls	r2, r2, #5
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_nfc_f0;
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 80017e2:	06d9      	lsls	r1, r3, #27
 80017e4:	d501      	bpl.n	80017ea <rfalPrepareTransceive+0x52>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_rx_par;
 80017e6:	2140      	movs	r1, #64	@ 0x40
 80017e8:	430a      	orrs	r2, r1
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 80017ea:	069b      	lsls	r3, r3, #26
 80017ec:	d501      	bpl.n	80017f2 <rfalPrepareTransceive+0x5a>
    {
        reg |= ST25R3916_REG_ISO14443A_NFC_no_tx_par;
 80017ee:	2380      	movs	r3, #128	@ 0x80
 80017f0:	431a      	orrs	r2, r3
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0), reg );
 80017f2:	21e0      	movs	r1, #224	@ 0xe0
 80017f4:	2005      	movs	r0, #5
 80017f6:	f002 fec0 	bl	800457a <st25r3916ChangeRegisterBits>
    
    
    
    /* Check if CRC is to be checked automatically upon reception */
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_MANUAL) != 0U )
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    {
        st25r3916SetRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 80017fe:	200a      	movs	r0, #10
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_MANUAL) != 0U )
 8001800:	420b      	tst	r3, r1
 8001802:	d03a      	beq.n	800187a <rfalPrepareTransceive+0xe2>
        st25r3916SetRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 8001804:	f002 fe91 	bl	800452a <st25r3916SetRegisterBits>
        st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
    }
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 8001808:	2108      	movs	r1, #8
 800180a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    {
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 800180c:	200c      	movs	r0, #12
    if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 800180e:	420b      	tst	r3, r1
 8001810:	d036      	beq.n	8001880 <rfalPrepareTransceive+0xe8>
        st25r3916ClrRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 8001812:	f002 fe78 	bl	8004506 <st25r3916ClrRegisterBits>
    
    
    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMD )
 8001816:	79e3      	ldrb	r3, [r4, #7]
    {
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 8001818:	2102      	movs	r1, #2
 800181a:	2012      	movs	r0, #18
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMD )
 800181c:	2b01      	cmp	r3, #1
 800181e:	d132      	bne.n	8001886 <rfalPrepareTransceive+0xee>
        st25r3916SetRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 8001820:	f002 fe83 	bl	800452a <st25r3916SetRegisterBits>
        maskInterrupts |= ST25R3916_IRQ_MASK_RX_REST;
 8001824:	4d22      	ldr	r5, [pc, #136]	@ (80018b0 <rfalPrepareTransceive+0x118>)
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
    }
    /*******************************************************************************/
    
    /* In Passive Listen mode additionally enable External Field interrupts  */    
    if( rfalIsModePassiveListen( gRFAL.mode ) )
 8001826:	7863      	ldrb	r3, [r4, #1]
 8001828:	001a      	movs	r2, r3
 800182a:	3a0a      	subs	r2, #10
 800182c:	2a02      	cmp	r2, #2
 800182e:	d82e      	bhi.n	800188e <rfalPrepareTransceive+0xf6>
    {
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_F );      /* Enable external Field interrupts to detect Link Loss and SENF_REQ auto responses */
 8001830:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <rfalPrepareTransceive+0x11c>)
 8001832:	431d      	orrs	r5, r3
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, 0);
    }
    
    /*******************************************************************************/
    /* Start transceive Sanity Timer if a FWT is used */
    if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 8001834:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001836:	1e43      	subs	r3, r0, #1
 8001838:	3303      	adds	r3, #3
 800183a:	d809      	bhi.n	8001850 <rfalPrepareTransceive+0xb8>
    {
        rfalTimerStart( gRFAL.tmr.txRx, rfalCalcSanityTmr( gRFAL.TxRx.ctx.fwt ) );
 800183c:	491e      	ldr	r1, [pc, #120]	@ (80018b8 <rfalPrepareTransceive+0x120>)
 800183e:	f7fe fc93 	bl	8000168 <__udivsi3>
 8001842:	23fa      	movs	r3, #250	@ 0xfa
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	18c0      	adds	r0, r0, r3
 8001848:	b280      	uxth	r0, r0
 800184a:	f003 f82f 	bl	80048ac <timerCalculateTimer>
 800184e:	64e0      	str	r0, [r4, #76]	@ 0x4c
    /*******************************************************************************/
    
    
    /*******************************************************************************/
    /* Clear and enable these interrupts */
    st25r3916GetInterrupt( maskInterrupts );
 8001850:	0028      	movs	r0, r5
 8001852:	f002 ff73 	bl	800473c <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( maskInterrupts );
 8001856:	0028      	movs	r0, r5
 8001858:	f002 ff9c 	bl	8004794 <st25r3916EnableInterrupts>


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800185c:	23ff      	movs	r3, #255	@ 0xff
 800185e:	343f      	adds	r4, #63	@ 0x3f
 8001860:	7023      	strb	r3, [r4, #0]
}
 8001862:	bd70      	pop	{r4, r5, r6, pc}
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( ((gRFAL.timings.FDTPoll < RFAL_FDT_POLL_ADJUSTMENT) ? gRFAL.timings.FDTPoll : (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT)) ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 8001864:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <rfalPrepareTransceive+0x124>)
 8001866:	18c8      	adds	r0, r1, r3
 8001868:	08c0      	lsrs	r0, r0, #3
 800186a:	b280      	uxth	r0, r0
 800186c:	e7ae      	b.n	80017cc <rfalPrepareTransceive+0x34>
            st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, (uint8_t)rfalConv1fcTo2018fc(gRFAL.timings.FDTPoll) );
 800186e:	0ac9      	lsrs	r1, r1, #11
 8001870:	b2c9      	uxtb	r1, r1
 8001872:	2055      	movs	r0, #85	@ 0x55
 8001874:	f002 fd72 	bl	800435c <st25r3916WriteRegister>
 8001878:	e7ab      	b.n	80017d2 <rfalPrepareTransceive+0x3a>
        st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 800187a:	f002 fe44 	bl	8004506 <st25r3916ClrRegisterBits>
 800187e:	e7c3      	b.n	8001808 <rfalPrepareTransceive+0x70>
        st25r3916SetRegisterBits( ST25R3916_REG_RX_CONF2, ST25R3916_REG_RX_CONF2_agc_en );
 8001880:	f002 fe53 	bl	800452a <st25r3916SetRegisterBits>
 8001884:	e7c7      	b.n	8001816 <rfalPrepareTransceive+0x7e>
        st25r3916ClrRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_emv );
 8001886:	f002 fe3e 	bl	8004506 <st25r3916ClrRegisterBits>
    maskInterrupts = ( ST25R3916_IRQ_MASK_FWL  | ST25R3916_IRQ_MASK_TXE  |
 800188a:	4d0d      	ldr	r5, [pc, #52]	@ (80018c0 <rfalPrepareTransceive+0x128>)
 800188c:	e7cb      	b.n	8001826 <rfalPrepareTransceive+0x8e>
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 800188e:	2204      	movs	r2, #4
 8001890:	4393      	bics	r3, r2
 8001892:	2b09      	cmp	r3, #9
 8001894:	d1ce      	bne.n	8001834 <rfalPrepareTransceive+0x9c>
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <rfalPrepareTransceive+0x12c>)
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2103      	movs	r1, #3
 800189c:	200a      	movs	r0, #10
        maskInterrupts |= ( ST25R3916_IRQ_MASK_EOF  | ST25R3916_IRQ_MASK_EON  | ST25R3916_IRQ_MASK_PPON2 | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC );
 800189e:	431d      	orrs	r5, r3
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, 0);
 80018a0:	f002 fe6b 	bl	800457a <st25r3916ChangeRegisterBits>
 80018a4:	e7c6      	b.n	8001834 <rfalPrepareTransceive+0x9c>
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	20000904 	.word	0x20000904
 80018ac:	0000043b 	.word	0x0000043b
 80018b0:	00f0407a 	.word	0x00f0407a
 80018b4:	08000800 	.word	0x08000800
 80018b8:	000034f8 	.word	0x000034f8
 80018bc:	fffffbc4 	.word	0xfffffbc4
 80018c0:	00f04078 	.word	0x00f04078
 80018c4:	80001e00 	.word	0x80001e00

080018c8 <rfalWakeUpModeFilter>:
}


/*******************************************************************************/
static uint16_t rfalWakeUpModeFilter( uint16_t curRef, uint16_t curVal, uint8_t weight )
{
 80018c8:	b570      	push	{r4, r5, r6, lr}
 80018ca:	000d      	movs	r5, r1
 80018cc:	0004      	movs	r4, r0
 80018ce:	0011      	movs	r1, r2
    uint16_t newRef;    
    
    /* Perform the averaging|filter as describded in ST25R3916 DS */
    
    /* Avoid signed arithmetics by spliting in two cases */
    if( curVal > curRef )
 80018d0:	4285      	cmp	r5, r0
 80018d2:	d90c      	bls.n	80018ee <rfalWakeUpModeFilter+0x26>
    {
        newRef = curRef + (( curVal - curRef ) / weight );
 80018d4:	1a28      	subs	r0, r5, r0
 80018d6:	f7fe fcd1 	bl	800027c <__divsi3>
 80018da:	1820      	adds	r0, r4, r0
 80018dc:	b280      	uxth	r0, r0
        
        /* In order for the reference to converge to final value   *
         * increment once the diff is smaller that the weight      */
        if( (curVal != curRef) && (curRef == newRef) )
 80018de:	4284      	cmp	r4, r0
 80018e0:	d104      	bne.n	80018ec <rfalWakeUpModeFilter+0x24>
        {
            newRef &= 0xFF00U;
 80018e2:	23ff      	movs	r3, #255	@ 0xff
 80018e4:	4398      	bics	r0, r3
            newRef += 0x0100U;
 80018e6:	3001      	adds	r0, #1
 80018e8:	30ff      	adds	r0, #255	@ 0xff
 80018ea:	b280      	uxth	r0, r0
            newRef &= 0xFF00U;
        }
    }
    
    return newRef;
}
 80018ec:	bd70      	pop	{r4, r5, r6, pc}
        newRef = curRef - (( curRef - curVal ) / weight );
 80018ee:	1b40      	subs	r0, r0, r5
 80018f0:	f7fe fcc4 	bl	800027c <__divsi3>
 80018f4:	1a20      	subs	r0, r4, r0
 80018f6:	b280      	uxth	r0, r0
        if( (curVal != curRef) && (curRef == newRef) )
 80018f8:	42a5      	cmp	r5, r4
 80018fa:	d0f7      	beq.n	80018ec <rfalWakeUpModeFilter+0x24>
 80018fc:	4284      	cmp	r4, r0
 80018fe:	d1f5      	bne.n	80018ec <rfalWakeUpModeFilter+0x24>
            newRef &= 0xFF00U;
 8001900:	23ff      	movs	r3, #255	@ 0xff
 8001902:	4398      	bics	r0, r3
 8001904:	e7f2      	b.n	80018ec <rfalWakeUpModeFilter+0x24>
	...

08001908 <rfalFIFOStatusUpdate>:
{
 8001908:	b510      	push	{r4, lr}
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800190a:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <rfalFIFOStatusUpdate+0x18>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2bff      	cmp	r3, #255	@ 0xff
 8001910:	d104      	bne.n	800191c <rfalFIFOStatusUpdate+0x14>
        st25r3916ReadMultipleRegisters( ST25R3916_REG_FIFO_STATUS1, gRFAL.fifo.status, ST25R3916_FIFO_STATUS_LEN );
 8001912:	2202      	movs	r2, #2
 8001914:	201e      	movs	r0, #30
 8001916:	4903      	ldr	r1, [pc, #12]	@ (8001924 <rfalFIFOStatusUpdate+0x1c>)
 8001918:	f002 fd19 	bl	800434e <st25r3916ReadMultipleRegisters>
}
 800191c:	bd10      	pop	{r4, pc}
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	20000943 	.word	0x20000943
 8001924:	20000942 	.word	0x20000942

08001928 <rfalFIFOStatusGetNumBytes>:
{
 8001928:	b510      	push	{r4, lr}
    rfalFIFOStatusUpdate();
 800192a:	f7ff ffed 	bl	8001908 <rfalFIFOStatusUpdate>
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 800192e:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <rfalFIFOStatusGetNumBytes+0x18>)
 8001930:	7818      	ldrb	r0, [r3, #0]
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <rfalFIFOStatusGetNumBytes+0x1c>)
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 8001934:	0980      	lsrs	r0, r0, #6
    result |= (((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]) & 0x00FFU);
 8001936:	781b      	ldrb	r3, [r3, #0]
    result  = ((((uint16_t)gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift) << RFAL_BITS_IN_BYTE);
 8001938:	0200      	lsls	r0, r0, #8
    return result;
 800193a:	4318      	orrs	r0, r3
}
 800193c:	bd10      	pop	{r4, pc}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	20000943 	.word	0x20000943
 8001944:	20000942 	.word	0x20000942

08001948 <rfalErrorHandling>:
{
 8001948:	b570      	push	{r4, r5, r6, lr}
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 800194a:	f7ff ffed 	bl	8001928 <rfalFIFOStatusGetNumBytes>
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800194e:	4c13      	ldr	r4, [pc, #76]	@ (800199c <rfalErrorHandling+0x54>)
    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 8001950:	0005      	movs	r5, r0
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 8001952:	7863      	ldrb	r3, [r4, #1]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d120      	bne.n	800199a <rfalErrorHandling+0x52>
        if( (gRFAL.TxRx.status == RFAL_ERR_PAR) || (gRFAL.TxRx.status == RFAL_ERR_CRC) )
 8001958:	8b63      	ldrh	r3, [r4, #26]
 800195a:	2b1b      	cmp	r3, #27
 800195c:	d001      	beq.n	8001962 <rfalErrorHandling+0x1a>
 800195e:	2b15      	cmp	r3, #21
 8001960:	d11b      	bne.n	800199a <rfalErrorHandling+0x52>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 8001962:	0026      	movs	r6, r4
    rfalFIFOStatusUpdate();
 8001964:	f7ff ffd0 	bl	8001908 <rfalFIFOStatusUpdate>
            if( (rfalFIFOStatusIsIncompleteByte()) && (fifoBytesToRead == RFAL_RX_INC_BYTE_LEN) )
 8001968:	230e      	movs	r3, #14
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 800196a:	363f      	adds	r6, #63	@ 0x3f
            if( (rfalFIFOStatusIsIncompleteByte()) && (fifoBytesToRead == RFAL_RX_INC_BYTE_LEN) )
 800196c:	7832      	ldrb	r2, [r6, #0]
 800196e:	421a      	tst	r2, r3
 8001970:	d013      	beq.n	800199a <rfalErrorHandling+0x52>
 8001972:	2d01      	cmp	r5, #1
 8001974:	d111      	bne.n	800199a <rfalErrorHandling+0x52>
                st25r3916ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 8001976:	0029      	movs	r1, r5
 8001978:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800197a:	f002 fd15 	bl	80043a8 <st25r3916ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 800197e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <rfalErrorHandling+0x4a>
    rfalFIFOStatusUpdate();
 8001984:	f7ff ffc0 	bl	8001908 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 8001988:	7833      	ldrb	r3, [r6, #0]
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800198a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 800198c:	071b      	lsls	r3, r3, #28
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800198e:	0f5b      	lsrs	r3, r3, #29
 8001990:	8013      	strh	r3, [r2, #0]
                gRFAL.TxRx.status = RFAL_ERR_INCOMPLETE_BYTE;
 8001992:	2328      	movs	r3, #40	@ 0x28
 8001994:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8001996:	3332      	adds	r3, #50	@ 0x32
 8001998:	7623      	strb	r3, [r4, #24]
}
 800199a:	bd70      	pop	{r4, r5, r6, pc}
 800199c:	20000904 	.word	0x20000904

080019a0 <rfalCalibrate>:
    if( gRFAL.state == RFAL_STATE_IDLE )
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <rfalCalibrate+0x28>)
{
 80019a2:	b507      	push	{r0, r1, r2, lr}
    if( gRFAL.state == RFAL_STATE_IDLE )
 80019a4:	781b      	ldrb	r3, [r3, #0]
        return RFAL_ERR_WRONG_STATE;
 80019a6:	2021      	movs	r0, #33	@ 0x21
    if( gRFAL.state == RFAL_STATE_IDLE )
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00b      	beq.n	80019c4 <rfalCalibrate+0x24>
    if( st25r3916CheckReg( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 80019ac:	2200      	movs	r2, #0
 80019ae:	2180      	movs	r1, #128	@ 0x80
 80019b0:	300b      	adds	r0, #11
 80019b2:	f002 fdfd 	bl	80045b0 <st25r3916CheckReg>
 80019b6:	2800      	cmp	r0, #0
 80019b8:	d003      	beq.n	80019c2 <rfalCalibrate+0x22>
        st25r3916AdjustRegulators( &resValue );
 80019ba:	466b      	mov	r3, sp
 80019bc:	1d98      	adds	r0, r3, #6
 80019be:	f002 fa5a 	bl	8003e76 <st25r3916AdjustRegulators>
 80019c2:	2000      	movs	r0, #0
}
 80019c4:	bd0e      	pop	{r1, r2, r3, pc}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	20000904 	.word	0x20000904

080019cc <rfalInitialize>:
{
 80019cc:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( err, st25r3916Initialize() );
 80019ce:	f002 fba9 	bl	8004124 <st25r3916Initialize>
 80019d2:	1e04      	subs	r4, r0, #0
 80019d4:	d130      	bne.n	8001a38 <rfalInitialize+0x6c>
    st25r3916ClearInterrupts();
 80019d6:	f002 fef1 	bl	80047bc <st25r3916ClearInterrupts>
    rfalST25R3916ObsModeDisable();
 80019da:	2140      	movs	r1, #64	@ 0x40
 80019dc:	2001      	movs	r0, #1
 80019de:	f002 fd76 	bl	80044ce <st25r3916WriteTestRegister>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 80019e2:	0020      	movs	r0, r4
 80019e4:	f006 fc1c 	bl	8008220 <rfalSetAnalogConfig>
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 80019e8:	2203      	movs	r2, #3
 80019ea:	2002      	movs	r0, #2
 80019ec:	0011      	movs	r1, r2
 80019ee:	f002 fdc4 	bl	800457a <st25r3916ChangeRegisterBits>
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 80019f2:	21ff      	movs	r1, #255	@ 0xff
 80019f4:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <rfalInitialize+0x70>)
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <rfalInitialize+0x74>)
 80019f8:	7011      	strb	r1, [r2, #0]
    gRFAL.state              = RFAL_STATE_INIT;
 80019fa:	2201      	movs	r2, #1
 80019fc:	801a      	strh	r2, [r3, #0]
    gRFAL.nfcvData.ignoreBits = 0;
 80019fe:	2288      	movs	r2, #136	@ 0x88
 8001a00:	00d2      	lsls	r2, r2, #3
 8001a02:	529c      	strh	r4, [r3, r2]
    gRFAL.Lm.state           = RFAL_LM_STATE_NOT_INIT;
 8001a04:	001a      	movs	r2, r3
 8001a06:	325c      	adds	r2, #92	@ 0x5c
 8001a08:	7014      	strb	r4, [r2, #0]
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	326c      	adds	r2, #108	@ 0x6c
 8001a0e:	7011      	strb	r1, [r2, #0]
    gRFAL.Lm.iniFlag         = false;
 8001a10:	001a      	movs	r2, r3
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 8001a12:	831c      	strh	r4, [r3, #24]
    gRFAL.field              = false;
 8001a14:	605c      	str	r4, [r3, #4]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 8001a16:	609c      	str	r4, [r3, #8]
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 8001a18:	60dc      	str	r4, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 8001a1a:	611c      	str	r4, [r3, #16]
    gRFAL.timings.nTRFW      = 0U;
 8001a1c:	751c      	strb	r4, [r3, #20]
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 8001a1e:	641c      	str	r4, [r3, #64]	@ 0x40
    gRFAL.tmr.txRx           = RFAL_TIMING_NONE;
 8001a20:	64dc      	str	r4, [r3, #76]	@ 0x4c
    gRFAL.tmr.RXE            = RFAL_TIMING_NONE;
 8001a22:	645c      	str	r4, [r3, #68]	@ 0x44
    gRFAL.tmr.PPON2          = RFAL_TIMING_NONE;
 8001a24:	649c      	str	r4, [r3, #72]	@ 0x48
    gRFAL.callbacks.preTxRx  = NULL;
 8001a26:	651c      	str	r4, [r3, #80]	@ 0x50
    gRFAL.callbacks.postTxRx = NULL;
 8001a28:	655c      	str	r4, [r3, #84]	@ 0x54
    gRFAL.callbacks.syncTxRx = NULL;
 8001a2a:	659c      	str	r4, [r3, #88]	@ 0x58
    gRFAL.Lm.iniFlag         = false;
 8001a2c:	327d      	adds	r2, #125	@ 0x7d
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8001a2e:	3380      	adds	r3, #128	@ 0x80
    gRFAL.Lm.iniFlag         = false;
 8001a30:	7014      	strb	r4, [r2, #0]
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8001a32:	701c      	strb	r4, [r3, #0]
    rfalCalibrate();
 8001a34:	f7ff ffb4 	bl	80019a0 <rfalCalibrate>
}
 8001a38:	0020      	movs	r0, r4
 8001a3a:	bd10      	pop	{r4, pc}
 8001a3c:	20000943 	.word	0x20000943
 8001a40:	20000904 	.word	0x20000904

08001a44 <rfalSetBitRate>:
{
 8001a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( gRFAL.state == RFAL_STATE_IDLE )
 8001a46:	4c7c      	ldr	r4, [pc, #496]	@ (8001c38 <rfalSetBitRate+0x1f4>)
 8001a48:	7823      	ldrb	r3, [r4, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d019      	beq.n	8001a82 <rfalSetBitRate+0x3e>
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 8001a4e:	28ff      	cmp	r0, #255	@ 0xff
 8001a50:	d100      	bne.n	8001a54 <rfalSetBitRate+0x10>
 8001a52:	78a0      	ldrb	r0, [r4, #2]
 8001a54:	70a0      	strb	r0, [r4, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 8001a56:	29ff      	cmp	r1, #255	@ 0xff
 8001a58:	d100      	bne.n	8001a5c <rfalSetBitRate+0x18>
 8001a5a:	78e1      	ldrb	r1, [r4, #3]
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 8001a5c:	7863      	ldrb	r3, [r4, #1]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 8001a5e:	70e1      	strb	r1, [r4, #3]
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 8001a60:	3b07      	subs	r3, #7
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d810      	bhi.n	8001a88 <rfalSetBitRate+0x44>
    switch( gRFAL.mode )
 8001a66:	7863      	ldrb	r3, [r4, #1]
            return RFAL_ERR_NOT_IMPLEMENTED;
 8001a68:	200f      	movs	r0, #15
    switch( gRFAL.mode )
 8001a6a:	2b0d      	cmp	r3, #13
 8001a6c:	d80a      	bhi.n	8001a84 <rfalSetBitRate+0x40>
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7fe fb5c 	bl	800012c <__gnu_thumb1_case_uqi>
 8001a74:	2d0f0f07 	.word	0x2d0f0f07
 8001a78:	53402d2d 	.word	0x53402d2d
 8001a7c:	07b88b53 	.word	0x07b88b53
 8001a80:	9ecc      	.short	0x9ecc
{
 8001a82:	2021      	movs	r0, #33	@ 0x21
}
 8001a84:	b004      	add	sp, #16
 8001a86:	bd10      	pop	{r4, pc}
        RFAL_EXIT_ON_ERR( ret, st25r3916SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 8001a88:	f002 fa58 	bl	8003f3c <st25r3916SetBitrate>
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d0ea      	beq.n	8001a66 <rfalSetBitRate+0x22>
 8001a90:	e7f8      	b.n	8001a84 <rfalSetBitRate+0x40>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8001a92:	2008      	movs	r0, #8
 8001a94:	f006 fbc4 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001a98:	2002      	movs	r0, #2
 8001a9a:	78a3      	ldrb	r3, [r4, #2]
 8001a9c:	22ff      	movs	r2, #255	@ 0xff
 8001a9e:	30ff      	adds	r0, #255	@ 0xff
 8001aa0:	2bea      	cmp	r3, #234	@ 0xea
 8001aa2:	d912      	bls.n	8001aca <rfalSetBitRate+0x86>
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	4318      	orrs	r0, r3
 8001aaa:	f006 fbb9 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001aae:	2081      	movs	r0, #129	@ 0x81
 8001ab0:	22ff      	movs	r2, #255	@ 0xff
 8001ab2:	78e3      	ldrb	r3, [r4, #3]
 8001ab4:	0040      	lsls	r0, r0, #1
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001ab6:	2bea      	cmp	r3, #234	@ 0xea
 8001ab8:	d800      	bhi.n	8001abc <rfalSetBitRate+0x78>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001aba:	3301      	adds	r3, #1
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	4013      	ands	r3, r2
 8001ac0:	4318      	orrs	r0, r3
 8001ac2:	f006 fbad 	bl	8008220 <rfalSetAnalogConfig>
    return RFAL_ERR_NONE;
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	e7dc      	b.n	8001a84 <rfalSetBitRate+0x40>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001aca:	3301      	adds	r3, #1
 8001acc:	e7ea      	b.n	8001aa4 <rfalSetBitRate+0x60>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8001ace:	2008      	movs	r0, #8
 8001ad0:	f006 fba6 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001ad4:	78a3      	ldrb	r3, [r4, #2]
 8001ad6:	22ff      	movs	r2, #255	@ 0xff
 8001ad8:	4858      	ldr	r0, [pc, #352]	@ (8001c3c <rfalSetBitRate+0x1f8>)
 8001ada:	2bea      	cmp	r3, #234	@ 0xea
 8001adc:	d908      	bls.n	8001af0 <rfalSetBitRate+0xac>
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	4318      	orrs	r0, r3
 8001ae4:	f006 fb9c 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001ae8:	22ff      	movs	r2, #255	@ 0xff
 8001aea:	78e3      	ldrb	r3, [r4, #3]
 8001aec:	4854      	ldr	r0, [pc, #336]	@ (8001c40 <rfalSetBitRate+0x1fc>)
 8001aee:	e7e2      	b.n	8001ab6 <rfalSetBitRate+0x72>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001af0:	3301      	adds	r3, #1
 8001af2:	e7f4      	b.n	8001ade <rfalSetBitRate+0x9a>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8001af4:	2008      	movs	r0, #8
 8001af6:	f006 fb93 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001afa:	78a3      	ldrb	r3, [r4, #2]
 8001afc:	22ff      	movs	r2, #255	@ 0xff
 8001afe:	4851      	ldr	r0, [pc, #324]	@ (8001c44 <rfalSetBitRate+0x200>)
 8001b00:	2bea      	cmp	r3, #234	@ 0xea
 8001b02:	d908      	bls.n	8001b16 <rfalSetBitRate+0xd2>
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4013      	ands	r3, r2
 8001b08:	4318      	orrs	r0, r3
 8001b0a:	f006 fb89 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001b0e:	22ff      	movs	r2, #255	@ 0xff
 8001b10:	78e3      	ldrb	r3, [r4, #3]
 8001b12:	484d      	ldr	r0, [pc, #308]	@ (8001c48 <rfalSetBitRate+0x204>)
 8001b14:	e7cf      	b.n	8001ab6 <rfalSetBitRate+0x72>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001b16:	3301      	adds	r3, #1
 8001b18:	e7f4      	b.n	8001b04 <rfalSetBitRate+0xc0>
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97))
 8001b1a:	78e3      	ldrb	r3, [r4, #3]
                    return RFAL_ERR_PARAM;
 8001b1c:	2007      	movs	r0, #7
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97))
 8001b1e:	001a      	movs	r2, r3
 8001b20:	3215      	adds	r2, #21
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	2a01      	cmp	r2, #1
 8001b26:	d8ad      	bhi.n	8001a84 <rfalSetBitRate+0x40>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 8001b28:	78a2      	ldrb	r2, [r4, #2]
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	3114      	adds	r1, #20
 8001b2e:	b2c9      	uxtb	r1, r1
 8001b30:	2901      	cmp	r1, #1
 8001b32:	d8a7      	bhi.n	8001a84 <rfalSetBitRate+0x40>
                    config.coding = ( (gRFAL.txBR == RFAL_BR_1p66) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4 );
 8001b34:	3aed      	subs	r2, #237	@ 0xed
 8001b36:	4251      	negs	r1, r2
 8001b38:	414a      	adcs	r2, r1
 8001b3a:	a802      	add	r0, sp, #8
                    switch( gRFAL.rxBR )
 8001b3c:	3beb      	subs	r3, #235	@ 0xeb
                    config.coding = ( (gRFAL.txBR == RFAL_BR_1p66) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4 );
 8001b3e:	7002      	strb	r2, [r0, #0]
                    switch( gRFAL.rxBR )
 8001b40:	425a      	negs	r2, r3
 8001b42:	4153      	adcs	r3, r2
                    rfalIso15693PhyConfigure(&config, &rfalIso15693StreamConfig);
 8001b44:	4669      	mov	r1, sp
 8001b46:	6043      	str	r3, [r0, #4]
 8001b48:	f006 fc32 	bl	80083b0 <rfalIso15693PhyConfigure>
                    st25rStreamConf.din                  = rfalIso15693StreamConfig->din;
 8001b4c:	9b00      	ldr	r3, [sp, #0]
 8001b4e:	a801      	add	r0, sp, #4
 8001b50:	785a      	ldrb	r2, [r3, #1]
 8001b52:	7042      	strb	r2, [r0, #1]
                    st25rStreamConf.dout                 = rfalIso15693StreamConfig->dout;
 8001b54:	789a      	ldrb	r2, [r3, #2]
 8001b56:	7082      	strb	r2, [r0, #2]
                    st25rStreamConf.report_period_length = rfalIso15693StreamConfig->report_period_length;
 8001b58:	78da      	ldrb	r2, [r3, #3]
 8001b5a:	70c2      	strb	r2, [r0, #3]
                    st25rStreamConf.useBPSK              = rfalIso15693StreamConfig->useBPSK;
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	7003      	strb	r3, [r0, #0]
                    st25r3916StreamConfigure(&st25rStreamConf);
 8001b60:	f002 fb2e 	bl	80041c0 <st25r3916StreamConfigure>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8001b64:	2008      	movs	r0, #8
 8001b66:	f006 fb5b 	bl	8008220 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001b6a:	78a3      	ldrb	r3, [r4, #2]
 8001b6c:	22ff      	movs	r2, #255	@ 0xff
 8001b6e:	4837      	ldr	r0, [pc, #220]	@ (8001c4c <rfalSetBitRate+0x208>)
 8001b70:	2bea      	cmp	r3, #234	@ 0xea
 8001b72:	d908      	bls.n	8001b86 <rfalSetBitRate+0x142>
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	4013      	ands	r3, r2
 8001b78:	4318      	orrs	r0, r3
 8001b7a:	f006 fb51 	bl	8008220 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001b7e:	22ff      	movs	r2, #255	@ 0xff
 8001b80:	78e3      	ldrb	r3, [r4, #3]
 8001b82:	4833      	ldr	r0, [pc, #204]	@ (8001c50 <rfalSetBitRate+0x20c>)
 8001b84:	e797      	b.n	8001ab6 <rfalSetBitRate+0x72>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001b86:	3301      	adds	r3, #1
 8001b88:	e7f4      	b.n	8001b74 <rfalSetBitRate+0x130>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 8001b8a:	2008      	movs	r0, #8
 8001b8c:	f006 fb48 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001b90:	78a3      	ldrb	r3, [r4, #2]
 8001b92:	22ff      	movs	r2, #255	@ 0xff
 8001b94:	482f      	ldr	r0, [pc, #188]	@ (8001c54 <rfalSetBitRate+0x210>)
 8001b96:	2bea      	cmp	r3, #234	@ 0xea
 8001b98:	d908      	bls.n	8001bac <rfalSetBitRate+0x168>
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	4318      	orrs	r0, r3
 8001ba0:	f006 fb3e 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001ba4:	22ff      	movs	r2, #255	@ 0xff
 8001ba6:	78e3      	ldrb	r3, [r4, #3]
 8001ba8:	482b      	ldr	r0, [pc, #172]	@ (8001c58 <rfalSetBitRate+0x214>)
 8001baa:	e784      	b.n	8001ab6 <rfalSetBitRate+0x72>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001bac:	3301      	adds	r3, #1
 8001bae:	e7f4      	b.n	8001b9a <rfalSetBitRate+0x156>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 8001bb0:	2009      	movs	r0, #9
 8001bb2:	f006 fb35 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001bb6:	78a3      	ldrb	r3, [r4, #2]
 8001bb8:	22ff      	movs	r2, #255	@ 0xff
 8001bba:	4828      	ldr	r0, [pc, #160]	@ (8001c5c <rfalSetBitRate+0x218>)
 8001bbc:	2bea      	cmp	r3, #234	@ 0xea
 8001bbe:	d90f      	bls.n	8001be0 <rfalSetBitRate+0x19c>
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	4318      	orrs	r0, r3
 8001bc6:	b280      	uxth	r0, r0
 8001bc8:	f006 fb2a 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001bcc:	22ff      	movs	r2, #255	@ 0xff
 8001bce:	78e3      	ldrb	r3, [r4, #3]
 8001bd0:	4823      	ldr	r0, [pc, #140]	@ (8001c60 <rfalSetBitRate+0x21c>)
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001bd2:	2bea      	cmp	r3, #234	@ 0xea
 8001bd4:	d92e      	bls.n	8001c34 <rfalSetBitRate+0x1f0>
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	4013      	ands	r3, r2
 8001bda:	4318      	orrs	r0, r3
 8001bdc:	b280      	uxth	r0, r0
 8001bde:	e770      	b.n	8001ac2 <rfalSetBitRate+0x7e>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001be0:	3301      	adds	r3, #1
 8001be2:	e7ed      	b.n	8001bc0 <rfalSetBitRate+0x17c>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 8001be4:	2009      	movs	r0, #9
 8001be6:	f006 fb1b 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001bea:	78a3      	ldrb	r3, [r4, #2]
 8001bec:	22ff      	movs	r2, #255	@ 0xff
 8001bee:	481d      	ldr	r0, [pc, #116]	@ (8001c64 <rfalSetBitRate+0x220>)
 8001bf0:	2bea      	cmp	r3, #234	@ 0xea
 8001bf2:	d909      	bls.n	8001c08 <rfalSetBitRate+0x1c4>
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	4318      	orrs	r0, r3
 8001bfa:	b280      	uxth	r0, r0
 8001bfc:	f006 fb10 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001c00:	22ff      	movs	r2, #255	@ 0xff
 8001c02:	78e3      	ldrb	r3, [r4, #3]
 8001c04:	4818      	ldr	r0, [pc, #96]	@ (8001c68 <rfalSetBitRate+0x224>)
 8001c06:	e7e4      	b.n	8001bd2 <rfalSetBitRate+0x18e>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001c08:	3301      	adds	r3, #1
 8001c0a:	e7f3      	b.n	8001bf4 <rfalSetBitRate+0x1b0>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 8001c0c:	2009      	movs	r0, #9
 8001c0e:	f006 fb07 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001c12:	78a3      	ldrb	r3, [r4, #2]
 8001c14:	22ff      	movs	r2, #255	@ 0xff
 8001c16:	4815      	ldr	r0, [pc, #84]	@ (8001c6c <rfalSetBitRate+0x228>)
 8001c18:	2bea      	cmp	r3, #234	@ 0xea
 8001c1a:	d909      	bls.n	8001c30 <rfalSetBitRate+0x1ec>
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4013      	ands	r3, r2
 8001c20:	4318      	orrs	r0, r3
 8001c22:	b280      	uxth	r0, r0
 8001c24:	f006 fafc 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001c28:	22ff      	movs	r2, #255	@ 0xff
 8001c2a:	78e3      	ldrb	r3, [r4, #3]
 8001c2c:	4810      	ldr	r0, [pc, #64]	@ (8001c70 <rfalSetBitRate+0x22c>)
 8001c2e:	e7d0      	b.n	8001bd2 <rfalSetBitRate+0x18e>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 8001c30:	3301      	adds	r3, #1
 8001c32:	e7f3      	b.n	8001c1c <rfalSetBitRate+0x1d8>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 8001c34:	3301      	adds	r3, #1
 8001c36:	e7ce      	b.n	8001bd6 <rfalSetBitRate+0x192>
 8001c38:	20000904 	.word	0x20000904
 8001c3c:	00000201 	.word	0x00000201
 8001c40:	00000202 	.word	0x00000202
 8001c44:	00000401 	.word	0x00000401
 8001c48:	00000402 	.word	0x00000402
 8001c4c:	00001001 	.word	0x00001001
 8001c50:	00001002 	.word	0x00001002
 8001c54:	00000801 	.word	0x00000801
 8001c58:	00000802 	.word	0x00000802
 8001c5c:	ffff8801 	.word	0xffff8801
 8001c60:	ffff8802 	.word	0xffff8802
 8001c64:	ffff8101 	.word	0xffff8101
 8001c68:	ffff8102 	.word	0xffff8102
 8001c6c:	ffff8401 	.word	0xffff8401
 8001c70:	ffff8402 	.word	0xffff8402

08001c74 <rfalSetMode>:
{
 8001c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( gRFAL.state == RFAL_STATE_IDLE )
 8001c76:	4e6a      	ldr	r6, [pc, #424]	@ (8001e20 <rfalSetMode+0x1ac>)
{
 8001c78:	0007      	movs	r7, r0
    if( gRFAL.state == RFAL_STATE_IDLE )
 8001c7a:	7833      	ldrb	r3, [r6, #0]
{
 8001c7c:	000c      	movs	r4, r1
 8001c7e:	0015      	movs	r5, r2
        return RFAL_ERR_WRONG_STATE;
 8001c80:	2021      	movs	r0, #33	@ 0x21
    if( gRFAL.state == RFAL_STATE_IDLE )
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d013      	beq.n	8001cae <rfalSetMode+0x3a>
        return RFAL_ERR_PARAM;
 8001c86:	381a      	subs	r0, #26
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 8001c88:	29ff      	cmp	r1, #255	@ 0xff
 8001c8a:	d010      	beq.n	8001cae <rfalSetMode+0x3a>
 8001c8c:	2aff      	cmp	r2, #255	@ 0xff
 8001c8e:	d00e      	beq.n	8001cae <rfalSetMode+0x3a>
    switch( mode )
 8001c90:	1e7b      	subs	r3, r7, #1
 8001c92:	3008      	adds	r0, #8
 8001c94:	2b0c      	cmp	r3, #12
 8001c96:	d80a      	bhi.n	8001cae <rfalSetMode+0x3a>
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7fe fa47 	bl	800012c <__gnu_thumb1_case_uqi>
 8001c9e:	2509      	.short	0x2509
 8001ca0:	6051422b 	.word	0x6051422b
 8001ca4:	a6766d6d 	.word	0xa6766d6d
 8001ca8:	b307      	.short	0xb307
 8001caa:	8c          	.byte	0x8c
 8001cab:	00          	.byte	0x00
            return RFAL_ERR_NOTSUPP;
 8001cac:	2018      	movs	r0, #24
}
 8001cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f002 fc27 	bl	8004506 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443a );
 8001cb8:	2108      	movs	r1, #8
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 8001cba:	2003      	movs	r0, #3
 8001cbc:	f002 fb4e 	bl	800435c <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8001cc0:	2002      	movs	r0, #2
 8001cc2:	30ff      	adds	r0, #255	@ 0xff
 8001cc4:	f006 faac 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8001cc8:	2081      	movs	r0, #129	@ 0x81
 8001cca:	0040      	lsls	r0, r0, #1
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8001ccc:	f006 faa8 	bl	8008220 <rfalSetAnalogConfig>
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 8001cd0:	7832      	ldrb	r2, [r6, #0]
 8001cd2:	1c13      	adds	r3, r2, #0
 8001cd4:	2a01      	cmp	r2, #1
 8001cd6:	d800      	bhi.n	8001cda <rfalSetMode+0x66>
 8001cd8:	2302      	movs	r3, #2
    return rfalSetBitRate(txBR, rxBR);
 8001cda:	0029      	movs	r1, r5
 8001cdc:	0020      	movs	r0, r4
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 8001cde:	7033      	strb	r3, [r6, #0]
    gRFAL.mode  = mode;
 8001ce0:	7077      	strb	r7, [r6, #1]
    return rfalSetBitRate(txBR, rxBR);
 8001ce2:	f7ff feaf 	bl	8001a44 <rfalSetBitRate>
 8001ce6:	e7e2      	b.n	8001cae <rfalSetMode+0x3a>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8001ce8:	2104      	movs	r1, #4
 8001cea:	2002      	movs	r0, #2
 8001cec:	f002 fc0b 	bl	8004506 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_topaz );
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	e7e2      	b.n	8001cba <rfalSetMode+0x46>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f002 fc05 	bl	8004506 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 8001cfc:	2110      	movs	r1, #16
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f002 fb2c 	bl	800435c <st25r3916WriteRegister>
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 8001d04:	2200      	movs	r2, #0
 8001d06:	21fc      	movs	r1, #252	@ 0xfc
 8001d08:	2006      	movs	r0, #6
 8001d0a:	f002 fc36 	bl	800457a <st25r3916ChangeRegisterBits>
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 8001d0e:	2200      	movs	r2, #0
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 8001d10:	21f0      	movs	r1, #240	@ 0xf0
 8001d12:	2007      	movs	r0, #7
 8001d14:	f002 fc31 	bl	800457a <st25r3916ChangeRegisterBits>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8001d18:	4842      	ldr	r0, [pc, #264]	@ (8001e24 <rfalSetMode+0x1b0>)
 8001d1a:	f006 fa81 	bl	8008220 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8001d1e:	4842      	ldr	r0, [pc, #264]	@ (8001e28 <rfalSetMode+0x1b4>)
 8001d20:	e7d4      	b.n	8001ccc <rfalSetMode+0x58>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8001d22:	2104      	movs	r1, #4
 8001d24:	2002      	movs	r0, #2
 8001d26:	f002 fbee 	bl	8004506 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 8001d2a:	2110      	movs	r1, #16
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f002 fb15 	bl	800435c <st25r3916WriteRegister>
            st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 8001d32:	2200      	movs	r2, #0
 8001d34:	21fc      	movs	r1, #252	@ 0xfc
 8001d36:	2006      	movs	r0, #6
 8001d38:	f002 fc1f 	bl	800457a <st25r3916ChangeRegisterBits>
            st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	e7e7      	b.n	8001d10 <rfalSetMode+0x9c>
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8001d40:	2104      	movs	r1, #4
 8001d42:	2002      	movs	r0, #2
 8001d44:	f002 fbdf 	bl	8004506 <st25r3916ClrRegisterBits>
                st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_iso14443b );
 8001d48:	2110      	movs	r1, #16
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	f002 fb06 	bl	800435c <st25r3916WriteRegister>
                st25r3916ChangeRegisterBits(  ST25R3916_REG_ISO14443B_1,
 8001d50:	2200      	movs	r2, #0
 8001d52:	21fc      	movs	r1, #252	@ 0xfc
 8001d54:	2006      	movs	r0, #6
 8001d56:	f002 fc10 	bl	800457a <st25r3916ChangeRegisterBits>
                st25r3916ChangeRegisterBits( ST25R3916_REG_ISO14443B_2, 
 8001d5a:	2230      	movs	r2, #48	@ 0x30
 8001d5c:	e7d8      	b.n	8001d10 <rfalSetMode+0x9c>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8001d5e:	2104      	movs	r1, #4
 8001d60:	2002      	movs	r0, #2
 8001d62:	f002 fbd0 	bl	8004506 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_felica );
 8001d66:	2118      	movs	r1, #24
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f002 faf7 	bl	800435c <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8001d6e:	482f      	ldr	r0, [pc, #188]	@ (8001e2c <rfalSetMode+0x1b8>)
 8001d70:	f006 fa56 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8001d74:	482e      	ldr	r0, [pc, #184]	@ (8001e30 <rfalSetMode+0x1bc>)
 8001d76:	e7a9      	b.n	8001ccc <rfalSetMode+0x58>
                st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8001d78:	2104      	movs	r1, #4
 8001d7a:	2002      	movs	r0, #2
 8001d7c:	f002 fbc3 	bl	8004506 <st25r3916ClrRegisterBits>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8001d80:	482c      	ldr	r0, [pc, #176]	@ (8001e34 <rfalSetMode+0x1c0>)
 8001d82:	f006 fa4d 	bl	8008220 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8001d86:	482c      	ldr	r0, [pc, #176]	@ (8001e38 <rfalSetMode+0x1c4>)
 8001d88:	e7a0      	b.n	8001ccc <rfalSetMode+0x58>
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_eof) );
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f002 fae5 	bl	800435c <st25r3916WriteRegister>
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 8001d92:	2200      	movs	r2, #0
 8001d94:	2104      	movs	r1, #4
 8001d96:	2012      	movs	r0, #18
 8001d98:	f002 fbef 	bl	800457a <st25r3916ChangeRegisterBits>
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TCMDOFF ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 8001d9c:	2160      	movs	r1, #96	@ 0x60
 8001d9e:	20a9      	movs	r0, #169	@ 0xa9
 8001da0:	f002 f997 	bl	80040d2 <st25r3916SetStartGPTimer>
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 8001da4:	2180      	movs	r1, #128	@ 0x80
 8001da6:	2015      	movs	r0, #21
 8001da8:	f002 fad8 	bl	800435c <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8001dac:	4823      	ldr	r0, [pc, #140]	@ (8001e3c <rfalSetMode+0x1c8>)
 8001dae:	f006 fa37 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8001db2:	4823      	ldr	r0, [pc, #140]	@ (8001e40 <rfalSetMode+0x1cc>)
 8001db4:	e78a      	b.n	8001ccc <rfalSetMode+0x58>
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 8001db6:	21ba      	movs	r1, #186	@ 0xba
 8001db8:	2003      	movs	r0, #3
 8001dba:	f002 facf 	bl	800435c <st25r3916WriteRegister>
            st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2055      	movs	r0, #85	@ 0x55
 8001dc2:	f002 facb 	bl	800435c <st25r3916WriteRegister>
            st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_nfc_off );
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2104      	movs	r1, #4
 8001dca:	2012      	movs	r0, #18
 8001dcc:	f002 fbd5 	bl	800457a <st25r3916ChangeRegisterBits>
            st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TCMDOFF ), ST25R3916_REG_TIMER_EMV_CONTROL_gptc_etx_nfc );
 8001dd0:	2160      	movs	r1, #96	@ 0x60
 8001dd2:	20a9      	movs	r0, #169	@ 0xa9
 8001dd4:	f002 f97d 	bl	80040d2 <st25r3916SetStartGPTimer>
            st25r3916WriteRegister( ST25R3916_REG_PPON2, (uint8_t)rfalConv1fcTo64fc( RFAL_AP2P_FIELDON_TADTTRFW ) );
 8001dd8:	2180      	movs	r1, #128	@ 0x80
 8001dda:	2015      	movs	r0, #21
 8001ddc:	f002 fabe 	bl	800435c <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8001de0:	4818      	ldr	r0, [pc, #96]	@ (8001e44 <rfalSetMode+0x1d0>)
 8001de2:	f006 fa1d 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8001de6:	4818      	ldr	r0, [pc, #96]	@ (8001e48 <rfalSetMode+0x1d4>)
 8001de8:	e770      	b.n	8001ccc <rfalSetMode+0x58>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8001dea:	2104      	movs	r1, #4
 8001dec:	2002      	movs	r0, #2
 8001dee:	f002 fb8a 	bl	8004506 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfca | ST25R3916_REG_MODE_nfc_ar_off) );
 8001df2:	2188      	movs	r1, #136	@ 0x88
 8001df4:	2003      	movs	r0, #3
 8001df6:	f002 fab1 	bl	800435c <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8001dfa:	4814      	ldr	r0, [pc, #80]	@ (8001e4c <rfalSetMode+0x1d8>)
 8001dfc:	f006 fa10 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8001e00:	4813      	ldr	r0, [pc, #76]	@ (8001e50 <rfalSetMode+0x1dc>)
 8001e02:	e763      	b.n	8001ccc <rfalSetMode+0x58>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8001e04:	2104      	movs	r1, #4
 8001e06:	2002      	movs	r0, #2
 8001e08:	f002 fb7d 	bl	8004506 <st25r3916ClrRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_targ_nfcf | ST25R3916_REG_MODE_nfc_ar_off) );
 8001e0c:	21a0      	movs	r1, #160	@ 0xa0
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f002 faa4 	bl	800435c <st25r3916WriteRegister>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 8001e14:	480f      	ldr	r0, [pc, #60]	@ (8001e54 <rfalSetMode+0x1e0>)
 8001e16:	f006 fa03 	bl	8008220 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 8001e1a:	480f      	ldr	r0, [pc, #60]	@ (8001e58 <rfalSetMode+0x1e4>)
 8001e1c:	e756      	b.n	8001ccc <rfalSetMode+0x58>
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	20000904 	.word	0x20000904
 8001e24:	00000201 	.word	0x00000201
 8001e28:	00000202 	.word	0x00000202
 8001e2c:	00000401 	.word	0x00000401
 8001e30:	00000402 	.word	0x00000402
 8001e34:	00001001 	.word	0x00001001
 8001e38:	00001002 	.word	0x00001002
 8001e3c:	00000801 	.word	0x00000801
 8001e40:	00000802 	.word	0x00000802
 8001e44:	00008801 	.word	0x00008801
 8001e48:	00008802 	.word	0x00008802
 8001e4c:	00008101 	.word	0x00008101
 8001e50:	00008102 	.word	0x00008102
 8001e54:	00008401 	.word	0x00008401
 8001e58:	00008402 	.word	0x00008402

08001e5c <rfalGetBitRate>:
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 8001e5c:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <rfalGetBitRate+0x28>)
{
 8001e5e:	b510      	push	{r4, lr}
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 8001e60:	781c      	ldrb	r4, [r3, #0]
{
 8001e62:	0002      	movs	r2, r0
        return RFAL_ERR_WRONG_STATE;
 8001e64:	2021      	movs	r0, #33	@ 0x21
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 8001e66:	2c00      	cmp	r4, #0
 8001e68:	d00b      	beq.n	8001e82 <rfalGetBitRate+0x26>
 8001e6a:	785c      	ldrb	r4, [r3, #1]
 8001e6c:	2c00      	cmp	r4, #0
 8001e6e:	d008      	beq.n	8001e82 <rfalGetBitRate+0x26>
    if( txBR != NULL )
 8001e70:	2a00      	cmp	r2, #0
 8001e72:	d001      	beq.n	8001e78 <rfalGetBitRate+0x1c>
        *txBR = gRFAL.txBR;
 8001e74:	7898      	ldrb	r0, [r3, #2]
 8001e76:	7010      	strb	r0, [r2, #0]
    if( rxBR != NULL )
 8001e78:	2900      	cmp	r1, #0
 8001e7a:	d001      	beq.n	8001e80 <rfalGetBitRate+0x24>
        *rxBR = gRFAL.rxBR;
 8001e7c:	78db      	ldrb	r3, [r3, #3]
 8001e7e:	700b      	strb	r3, [r1, #0]
    return RFAL_ERR_NONE;
 8001e80:	2000      	movs	r0, #0
}
 8001e82:	bd10      	pop	{r4, pc}
 8001e84:	20000904 	.word	0x20000904

08001e88 <rfalSetErrorHandling>:
{
 8001e88:	b510      	push	{r4, lr}
 8001e8a:	1e04      	subs	r4, r0, #0
    switch(eHandling)
 8001e8c:	d004      	beq.n	8001e98 <rfalSetErrorHandling+0x10>
 8001e8e:	2801      	cmp	r0, #1
 8001e90:	d007      	beq.n	8001ea2 <rfalSetErrorHandling+0x1a>
    gRFAL.conf.eHandling = eHandling;
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <rfalSetErrorHandling+0x28>)
 8001e94:	71dc      	strb	r4, [r3, #7]
}
 8001e96:	bd10      	pop	{r4, pc}
            st25r3916ClrRegisterBits( ST25R3916_REG_EMD_SUP_CONF, ST25R3916_REG_EMD_SUP_CONF_emd_emv );
 8001e98:	2180      	movs	r1, #128	@ 0x80
 8001e9a:	2045      	movs	r0, #69	@ 0x45
 8001e9c:	f002 fb33 	bl	8004506 <st25r3916ClrRegisterBits>
            break;
 8001ea0:	e7f7      	b.n	8001e92 <rfalSetErrorHandling+0xa>
            st25r3916ModifyRegister( ST25R3916_REG_EMD_SUP_CONF, 
 8001ea2:	2284      	movs	r2, #132	@ 0x84
 8001ea4:	218f      	movs	r1, #143	@ 0x8f
 8001ea6:	2045      	movs	r0, #69	@ 0x45
 8001ea8:	f002 fb52 	bl	8004550 <st25r3916ModifyRegister>
            break;
 8001eac:	e7f1      	b.n	8001e92 <rfalSetErrorHandling+0xa>
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	20000904 	.word	0x20000904

08001eb4 <rfalSetFDTPoll>:
    gRFAL.timings.FDTPoll = RFAL_MIN( FDTPoll, RFAL_ST25R3916_GPT_MAX_1FC );
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <rfalSetFDTPoll+0x10>)
 8001eb6:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <rfalSetFDTPoll+0x14>)
 8001eb8:	4298      	cmp	r0, r3
 8001eba:	d900      	bls.n	8001ebe <rfalSetFDTPoll+0xa>
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	6110      	str	r0, [r2, #16]
}
 8001ec0:	4770      	bx	lr
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	0007fff8 	.word	0x0007fff8
 8001ec8:	20000904 	.word	0x20000904

08001ecc <rfalGetFDTPoll>:
    return gRFAL.timings.FDTPoll;
 8001ecc:	4b01      	ldr	r3, [pc, #4]	@ (8001ed4 <rfalGetFDTPoll+0x8>)
 8001ece:	6918      	ldr	r0, [r3, #16]
}
 8001ed0:	4770      	bx	lr
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	20000904 	.word	0x20000904

08001ed8 <rfalSetFDTListen>:
    gRFAL.timings.FDTListen = RFAL_MIN( FDTListen, RFAL_ST25R3916_MRT_MAX_1FC );
 8001ed8:	23ff      	movs	r3, #255	@ 0xff
 8001eda:	4a03      	ldr	r2, [pc, #12]	@ (8001ee8 <rfalSetFDTListen+0x10>)
 8001edc:	019b      	lsls	r3, r3, #6
 8001ede:	4298      	cmp	r0, r3
 8001ee0:	d900      	bls.n	8001ee4 <rfalSetFDTListen+0xc>
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	60d0      	str	r0, [r2, #12]
}
 8001ee6:	4770      	bx	lr
 8001ee8:	20000904 	.word	0x20000904

08001eec <rfalSetGT>:
    gRFAL.timings.GT = RFAL_MIN( GT, RFAL_ST25R3916_GT_MAX_1FC );
 8001eec:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <rfalSetGT+0x10>)
 8001eee:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <rfalSetGT+0x14>)
 8001ef0:	4298      	cmp	r0, r3
 8001ef2:	d900      	bls.n	8001ef6 <rfalSetGT+0xa>
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	6090      	str	r0, [r2, #8]
}
 8001ef8:	4770      	bx	lr
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	04d97480 	.word	0x04d97480
 8001f00:	20000904 	.word	0x20000904

08001f04 <rfalIsGTExpired>:
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 8001f04:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <rfalIsGTExpired+0x14>)
    return true;
 8001f06:	2001      	movs	r0, #1
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
{
 8001f0a:	b510      	push	{r4, lr}
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <rfalIsGTExpired+0x12>
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 8001f10:	0018      	movs	r0, r3
 8001f12:	f002 fcd1 	bl	80048b8 <timerIsExpired>
}
 8001f16:	bd10      	pop	{r4, pc}
 8001f18:	20000904 	.word	0x20000904

08001f1c <rfalFieldOnAndStartGT>:
    if( (!st25r3916IsOscOn()) || (gRFAL.state < RFAL_STATE_INIT) )
 8001f1c:	2280      	movs	r2, #128	@ 0x80
{
 8001f1e:	b570      	push	{r4, r5, r6, lr}
    if( (!st25r3916IsOscOn()) || (gRFAL.state < RFAL_STATE_INIT) )
 8001f20:	0011      	movs	r1, r2
 8001f22:	2002      	movs	r0, #2
 8001f24:	f002 fb44 	bl	80045b0 <st25r3916CheckReg>
        return RFAL_ERR_WRONG_STATE;
 8001f28:	2521      	movs	r5, #33	@ 0x21
    if( (!st25r3916IsOscOn()) || (gRFAL.state < RFAL_STATE_INIT) )
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d048      	beq.n	8001fc0 <rfalFieldOnAndStartGT+0xa4>
 8001f2e:	4c25      	ldr	r4, [pc, #148]	@ (8001fc4 <rfalFieldOnAndStartGT+0xa8>)
 8001f30:	7823      	ldrb	r3, [r4, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d044      	beq.n	8001fc0 <rfalFieldOnAndStartGT+0xa4>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 8001f36:	2002      	movs	r0, #2
 8001f38:	f006 f972 	bl	8008220 <rfalSetAnalogConfig>
    if( (!st25r3916IsTxEnabled()) || (!gRFAL.field) )
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	2002      	movs	r0, #2
 8001f40:	0011      	movs	r1, r2
 8001f42:	f002 fb35 	bl	80045b0 <st25r3916CheckReg>
 8001f46:	2800      	cmp	r0, #0
 8001f48:	d003      	beq.n	8001f52 <rfalFieldOnAndStartGT+0x36>
    ret = RFAL_ERR_NONE;
 8001f4a:	2500      	movs	r5, #0
    if( (!st25r3916IsTxEnabled()) || (!gRFAL.field) )
 8001f4c:	7923      	ldrb	r3, [r4, #4]
 8001f4e:	42ab      	cmp	r3, r5
 8001f50:	d128      	bne.n	8001fa4 <rfalFieldOnAndStartGT+0x88>
        st25r3916WriteRegister( ST25R3916_REG_FIELD_ON_GT, 0U );
 8001f52:	2100      	movs	r1, #0
 8001f54:	2055      	movs	r0, #85	@ 0x55
 8001f56:	f002 fa01 	bl	800435c <st25r3916WriteRegister>
        st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_manual_efd_ca );
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2103      	movs	r1, #3
 8001f5e:	2002      	movs	r0, #2
 8001f60:	f002 fb0b 	bl	800457a <st25r3916ChangeRegisterBits>
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, (ST25R3916_REG_AUX_nfc_n_mask & gRFAL.timings.nTRFW) );
 8001f64:	2603      	movs	r6, #3
 8001f66:	22ff      	movs	r2, #255	@ 0xff
 8001f68:	7d23      	ldrb	r3, [r4, #20]
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	4033      	ands	r3, r6
 8001f6e:	20c8      	movs	r0, #200	@ 0xc8
 8001f70:	f002 f808 	bl	8003f84 <st25r3916PerformCollisionAvoidance>
        st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 8001f74:	0032      	movs	r2, r6
 8001f76:	0031      	movs	r1, r6
        ret = st25r3916PerformCollisionAvoidance( ST25R3916_CMD_INITIAL_RF_COLLISION, ST25R3916_THRESHOLD_DO_NOT_SET, ST25R3916_THRESHOLD_DO_NOT_SET, (ST25R3916_REG_AUX_nfc_n_mask & gRFAL.timings.nTRFW) );
 8001f78:	0005      	movs	r5, r0
        st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 8001f7a:	2002      	movs	r0, #2
 8001f7c:	f002 fafd 	bl	800457a <st25r3916ChangeRegisterBits>
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 8001f80:	7d20      	ldrb	r0, [r4, #20]
 8001f82:	2107      	movs	r1, #7
 8001f84:	3001      	adds	r0, #1
 8001f86:	f7fe f975 	bl	8000274 <__aeabi_uidivmod>
        gRFAL.field = st25r3916IsTxEnabled();
 8001f8a:	2208      	movs	r2, #8
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 8001f8c:	7521      	strb	r1, [r4, #20]
        gRFAL.field = st25r3916IsTxEnabled();
 8001f8e:	2002      	movs	r0, #2
 8001f90:	0011      	movs	r1, r2
 8001f92:	f002 fb0d 	bl	80045b0 <st25r3916CheckReg>
 8001f96:	7120      	strb	r0, [r4, #4]
        if(gRFAL.field)
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d003      	beq.n	8001fa4 <rfalFieldOnAndStartGT+0x88>
            st25r3916TxRxOn(); /* Enable Tx and Rx (Tx is already On)*/
 8001f9c:	2148      	movs	r1, #72	@ 0x48
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	f002 fac3 	bl	800452a <st25r3916SetRegisterBits>
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 8001fa4:	68a0      	ldr	r0, [r4, #8]
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	d00a      	beq.n	8001fc0 <rfalFieldOnAndStartGT+0xa4>
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( RFAL_MAX( (gRFAL.timings.GT), RFAL_ST25R3916_GT_MIN_1FC) ) );
 8001faa:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <rfalFieldOnAndStartGT+0xac>)
 8001fac:	4298      	cmp	r0, r3
 8001fae:	d200      	bcs.n	8001fb2 <rfalFieldOnAndStartGT+0x96>
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	4905      	ldr	r1, [pc, #20]	@ (8001fc8 <rfalFieldOnAndStartGT+0xac>)
 8001fb4:	f7fe f8d8 	bl	8000168 <__udivsi3>
 8001fb8:	b280      	uxth	r0, r0
 8001fba:	f002 fc77 	bl	80048ac <timerCalculateTimer>
 8001fbe:	6420      	str	r0, [r4, #64]	@ 0x40
}
 8001fc0:	0028      	movs	r0, r5
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
 8001fc4:	20000904 	.word	0x20000904
 8001fc8:	000034f8 	.word	0x000034f8

08001fcc <rfalFieldOff>:
{
 8001fcc:	b510      	push	{r4, lr}
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 8001fce:	4c08      	ldr	r4, [pc, #32]	@ (8001ff0 <rfalFieldOff+0x24>)
 8001fd0:	7e23      	ldrb	r3, [r4, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <rfalFieldOff+0xe>
        rfalCleanupTransceive();
 8001fd6:	f7ff fbc9 	bl	800176c <rfalCleanupTransceive>
    st25r3916TxRxOff();
 8001fda:	2148      	movs	r1, #72	@ 0x48
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f002 fa92 	bl	8004506 <st25r3916ClrRegisterBits>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 8001fe2:	2003      	movs	r0, #3
 8001fe4:	f006 f91c 	bl	8008220 <rfalSetAnalogConfig>
    gRFAL.field = false;
 8001fe8:	2000      	movs	r0, #0
 8001fea:	7120      	strb	r0, [r4, #4]
}
 8001fec:	bd10      	pop	{r4, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	20000904 	.word	0x20000904

08001ff4 <rfalStartTransceive>:
{
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	1e05      	subs	r5, r0, #0
    if( ctx == NULL )
 8001ff8:	d101      	bne.n	8001ffe <rfalStartTransceive+0xa>
        return RFAL_ERR_PARAM;
 8001ffa:	2007      	movs	r0, #7
}
 8001ffc:	bd70      	pop	{r4, r5, r6, pc}
    if( ((ctx->flags & (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U) && ((ctx->flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_MANUAL) == 0U) )
 8001ffe:	2290      	movs	r2, #144	@ 0x90
 8002000:	6943      	ldr	r3, [r0, #20]
        return RFAL_ERR_NOTSUPP;
 8002002:	2018      	movs	r0, #24
    if( ((ctx->flags & (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U) && ((ctx->flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_MANUAL) == 0U) )
 8002004:	4013      	ands	r3, r2
 8002006:	2b10      	cmp	r3, #16
 8002008:	d0f8      	beq.n	8001ffc <rfalStartTransceive+0x8>
    if( gRFAL.state >= RFAL_STATE_MODE_SET )
 800200a:	4c62      	ldr	r4, [pc, #392]	@ (8002194 <rfalStartTransceive+0x1a0>)
 800200c:	7823      	ldrb	r3, [r4, #0]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d801      	bhi.n	8002016 <rfalStartTransceive+0x22>
            return RFAL_ERR_WRONG_STATE;
 8002012:	2021      	movs	r0, #33	@ 0x21
 8002014:	e7f2      	b.n	8001ffc <rfalStartTransceive+0x8>
        if( (!st25r3916IsTxEnabled()) && ((!rfalIsModePassiveListen( gRFAL.mode )) && (ctx->txBuf != NULL)) )
 8002016:	2208      	movs	r2, #8
 8002018:	2002      	movs	r0, #2
 800201a:	0011      	movs	r1, r2
 800201c:	f002 fac8 	bl	80045b0 <st25r3916CheckReg>
 8002020:	2800      	cmp	r0, #0
 8002022:	d106      	bne.n	8002032 <rfalStartTransceive+0x3e>
 8002024:	7863      	ldrb	r3, [r4, #1]
 8002026:	3b0a      	subs	r3, #10
 8002028:	2b02      	cmp	r3, #2
 800202a:	d902      	bls.n	8002032 <rfalStartTransceive+0x3e>
 800202c:	682b      	ldr	r3, [r5, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ef      	bne.n	8002012 <rfalStartTransceive+0x1e>
        gRFAL.TxRx.ctx = *ctx;
 8002032:	0023      	movs	r3, r4
 8002034:	331c      	adds	r3, #28
 8002036:	cd07      	ldmia	r5!, {r0, r1, r2}
 8002038:	c307      	stmia	r3!, {r0, r1, r2}
 800203a:	cd07      	ldmia	r5!, {r0, r1, r2}
 800203c:	c307      	stmia	r3!, {r0, r1, r2}
 800203e:	682a      	ldr	r2, [r5, #0]
 8002040:	601a      	str	r2, [r3, #0]
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8002042:	68e3      	ldr	r3, [r4, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d02f      	beq.n	80020a8 <rfalStartTransceive+0xb4>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8002048:	7863      	ldrb	r3, [r4, #1]
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	2a01      	cmp	r2, #1
 800204e:	d800      	bhi.n	8002052 <rfalStartTransceive+0x5e>
 8002050:	e091      	b.n	8002176 <rfalStartTransceive+0x182>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 8002052:	25ca      	movs	r5, #202	@ 0xca
 8002054:	006d      	lsls	r5, r5, #1
 8002056:	2b03      	cmp	r3, #3
 8002058:	d004      	beq.n	8002064 <rfalStartTransceive+0x70>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 800205a:	3d15      	subs	r5, #21
 800205c:	3dff      	subs	r5, #255	@ 0xff
 800205e:	2b07      	cmp	r3, #7
 8002060:	d000      	beq.n	8002064 <rfalStartTransceive+0x70>
 8002062:	3d40      	subs	r5, #64	@ 0x40
            st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 8002064:	2108      	movs	r1, #8
 8002066:	2012      	movs	r0, #18
 8002068:	f002 fa4d 	bl	8004506 <st25r3916ClrRegisterBits>
            if( gRFAL.mode == RFAL_MODE_POLL_NFCB )
 800206c:	7863      	ldrb	r3, [r4, #1]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d110      	bne.n	8002094 <rfalStartTransceive+0xa0>
                if( st25r3916CheckReg(ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, 0x00U) )
 8002072:	2200      	movs	r2, #0
 8002074:	2104      	movs	r1, #4
 8002076:	200a      	movs	r0, #10
 8002078:	f002 fa9a 	bl	80045b0 <st25r3916CheckReg>
 800207c:	2800      	cmp	r0, #0
 800207e:	d009      	beq.n	8002094 <rfalStartTransceive+0xa0>
                    st25r3916SetRegisterBits( ST25R3916_REG_CORR_CONF1, ST25R3916_REG_CORR_CONF1_corr_s3 );                                                 /* Ensure BPSK start to 33 pilot pulses */
 8002080:	2108      	movs	r1, #8
 8002082:	204c      	movs	r0, #76	@ 0x4c
 8002084:	f002 fa51 	bl	800452a <st25r3916SetRegisterBits>
                    st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 8002088:	2214      	movs	r2, #20
 800208a:	211f      	movs	r1, #31
 800208c:	2046      	movs	r0, #70	@ 0x46
                    FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJT_CORR;                                                                                        /* Reduce FDT(Listen)                   */
 800208e:	3580      	adds	r5, #128	@ 0x80
                    st25r3916ChangeRegisterBits( ST25R3916_REG_SUBC_START_TIME, ST25R3916_REG_SUBC_START_TIME_sst_mask, RFAL_FDT_LISTEN_B_ADJT_CORR_SST );  /* Set sst                              */
 8002090:	f002 fa73 	bl	800457a <st25r3916ChangeRegisterBits>
            st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 8002094:	68e3      	ldr	r3, [r4, #12]
 8002096:	2104      	movs	r1, #4
 8002098:	42ab      	cmp	r3, r5
 800209a:	d302      	bcc.n	80020a2 <rfalStartTransceive+0xae>
 800209c:	1b5b      	subs	r3, r3, r5
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	b2d9      	uxtb	r1, r3
 80020a2:	200f      	movs	r0, #15
 80020a4:	f002 f95a 	bl	800435c <st25r3916WriteRegister>
        if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 80020a8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80020aa:	1e43      	subs	r3, r0, #1
 80020ac:	3303      	adds	r3, #3
 80020ae:	d868      	bhi.n	8002182 <rfalStartTransceive+0x18e>
            if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 80020b0:	68e3      	ldr	r3, [r4, #12]
 80020b2:	4298      	cmp	r0, r3
 80020b4:	d9a1      	bls.n	8001ffa <rfalStartTransceive+0x6>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 80020b6:	7862      	ldrb	r2, [r4, #1]
 80020b8:	2a01      	cmp	r2, #1
 80020ba:	d05f      	beq.n	800217c <rfalStartTransceive+0x188>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 80020bc:	2a02      	cmp	r2, #2
 80020be:	d05d      	beq.n	800217c <rfalStartTransceive+0x188>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 80020c0:	23b4      	movs	r3, #180	@ 0xb4
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	2a03      	cmp	r2, #3
 80020c6:	d00e      	beq.n	80020e6 <rfalStartTransceive+0xf2>
            if( (gRFAL.mode == RFAL_MODE_POLL_NFCF) || (gRFAL.mode == RFAL_MODE_POLL_ACTIVE_P2P) )
 80020c8:	2a06      	cmp	r2, #6
 80020ca:	d002      	beq.n	80020d2 <rfalStartTransceive+0xde>
 80020cc:	2340      	movs	r3, #64	@ 0x40
 80020ce:	2a09      	cmp	r2, #9
 80020d0:	d109      	bne.n	80020e6 <rfalStartTransceive+0xf2>
                FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 80020d2:	78a3      	ldrb	r3, [r4, #2]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	1e5a      	subs	r2, r3, #1
 80020d8:	4193      	sbcs	r3, r2
 80020da:	2288      	movs	r2, #136	@ 0x88
 80020dc:	425b      	negs	r3, r3
 80020de:	0a5b      	lsrs	r3, r3, #9
 80020e0:	025b      	lsls	r3, r3, #9
 80020e2:	00d2      	lsls	r2, r2, #3
 80020e4:	189b      	adds	r3, r3, r2
            gRFAL.TxRx.ctx.fwt = RFAL_MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3916_NRT_MAX_1FC );
 80020e6:	18c0      	adds	r0, r0, r3
 80020e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <rfalStartTransceive+0x1a4>)
 80020ea:	4298      	cmp	r0, r3
 80020ec:	d900      	bls.n	80020f0 <rfalStartTransceive+0xfc>
 80020ee:	0018      	movs	r0, r3
 80020f0:	6360      	str	r0, [r4, #52]	@ 0x34
            st25r3916SetNoResponseTime( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 80020f2:	0980      	lsrs	r0, r0, #6
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 80020f4:	f001 ffb6 	bl	8004064 <st25r3916SetNoResponseTime>
        gRFAL.state       = RFAL_STATE_TXRX;
 80020f8:	2303      	movs	r3, #3
 80020fa:	7023      	strb	r3, [r4, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 80020fc:	3308      	adds	r3, #8
 80020fe:	7623      	strb	r3, [r4, #24]
        gRFAL.TxRx.status = RFAL_ERR_BUSY;
 8002100:	3b09      	subs	r3, #9
 8002102:	8363      	strh	r3, [r4, #26]
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8002104:	7863      	ldrb	r3, [r4, #1]
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 8002106:	69e1      	ldr	r1, [r4, #28]
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8002108:	3b07      	subs	r3, #7
 800210a:	2b01      	cmp	r3, #1
 800210c:	d83b      	bhi.n	8002186 <rfalStartTransceive+0x192>
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 800210e:	0022      	movs	r2, r4
 8002110:	4b22      	ldr	r3, [pc, #136]	@ (800219c <rfalStartTransceive+0x1a8>)
 8002112:	321c      	adds	r2, #28
 8002114:	18e3      	adds	r3, r4, r3
 8002116:	ca61      	ldmia	r2!, {r0, r5, r6}
 8002118:	c361      	stmia	r3!, {r0, r5, r6}
 800211a:	ca61      	ldmia	r2!, {r0, r5, r6}
 800211c:	c361      	stmia	r3!, {r0, r5, r6}
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	601a      	str	r2, [r3, #0]
            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 8002122:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <rfalStartTransceive+0x1ac>)
 8002124:	58e3      	ldr	r3, [r4, r3]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d000      	beq.n	800212c <rfalStartTransceive+0x138>
 800212a:	4b1e      	ldr	r3, [pc, #120]	@ (80021a4 <rfalStartTransceive+0x1b0>)
 800212c:	6263      	str	r3, [r4, #36]	@ 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800212e:	2382      	movs	r3, #130	@ 0x82
 8002130:	015b      	lsls	r3, r3, #5
 8002132:	8523      	strh	r3, [r4, #40]	@ 0x28
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 8002134:	2387      	movs	r3, #135	@ 0x87
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	58e2      	ldr	r2, [r4, r3]
 800213a:	2308      	movs	r3, #8
 800213c:	401a      	ands	r2, r3
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800213e:	332b      	adds	r3, #43	@ 0x2b
 8002140:	4313      	orrs	r3, r2
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 8002142:	6323      	str	r3, [r4, #48]	@ 0x30
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 8002144:	2900      	cmp	r1, #0
 8002146:	d123      	bne.n	8002190 <rfalStartTransceive+0x19c>
            rfalPrepareTransceive( );
 8002148:	f7ff fb26 	bl	8001798 <rfalPrepareTransceive>
            if( rfalIsModeActiveComm(gRFAL.mode) )
 800214c:	2204      	movs	r2, #4
 800214e:	7863      	ldrb	r3, [r4, #1]
 8002150:	4393      	bics	r3, r2
 8002152:	2b09      	cmp	r3, #9
 8002154:	d106      	bne.n	8002164 <rfalStartTransceive+0x170>
                st25r3916TxOff();                
 8002156:	2108      	movs	r1, #8
 8002158:	2002      	movs	r0, #2
 800215a:	f002 f9d4 	bl	8004506 <st25r3916ClrRegisterBits>
                st25r3916ExecuteCommand( ST25R3916_CMD_START_PPON2_TIMER );
 800215e:	20e4      	movs	r0, #228	@ 0xe4
 8002160:	f002 f985 	bl	800446e <st25r3916ExecuteCommand>
            st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8002164:	20d1      	movs	r0, #209	@ 0xd1
 8002166:	f002 f982 	bl	800446e <st25r3916ExecuteCommand>
            st25r3916ExecuteCommand( ST25R3916_CMD_START_NO_RESPONSE_TIMER );
 800216a:	20e3      	movs	r0, #227	@ 0xe3
 800216c:	f002 f97f 	bl	800446e <st25r3916ExecuteCommand>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8002170:	2351      	movs	r3, #81	@ 0x51
 8002172:	7623      	strb	r3, [r4, #24]
 8002174:	e00c      	b.n	8002190 <rfalStartTransceive+0x19c>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 8002176:	258a      	movs	r5, #138	@ 0x8a
 8002178:	006d      	lsls	r5, r5, #1
 800217a:	e773      	b.n	8002064 <rfalStartTransceive+0x70>
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800217c:	23a0      	movs	r3, #160	@ 0xa0
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	e7b1      	b.n	80020e6 <rfalStartTransceive+0xf2>
            st25r3916SetNoResponseTime( RFAL_ST25R3916_NRT_DISABLED );
 8002182:	2000      	movs	r0, #0
 8002184:	e7b6      	b.n	80020f4 <rfalStartTransceive+0x100>
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 8002186:	2900      	cmp	r1, #0
 8002188:	d0de      	beq.n	8002148 <rfalStartTransceive+0x154>
 800218a:	8c23      	ldrh	r3, [r4, #32]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0db      	beq.n	8002148 <rfalStartTransceive+0x154>
                return  RFAL_ERR_NONE;
 8002190:	2000      	movs	r0, #0
 8002192:	e733      	b.n	8001ffc <rfalStartTransceive+0x8>
 8002194:	20000904 	.word	0x20000904
 8002198:	0ffff000 	.word	0x0ffff000
 800219c:	00000424 	.word	0x00000424
 80021a0:	0000042c 	.word	0x0000042c
 80021a4:	20000b1c 	.word	0x20000b1c

080021a8 <rfalIsTransceiveInTx>:
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 80021a8:	2245      	movs	r2, #69	@ 0x45
 80021aa:	2000      	movs	r0, #0
 80021ac:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <rfalIsTransceiveInTx+0x14>)
 80021ae:	7e1b      	ldrb	r3, [r3, #24]
 80021b0:	3b0b      	subs	r3, #11
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	429a      	cmp	r2, r3
 80021b6:	4140      	adcs	r0, r0
 80021b8:	b2c0      	uxtb	r0, r0
}
 80021ba:	4770      	bx	lr
 80021bc:	20000904 	.word	0x20000904

080021c0 <rfalGetTransceiveStatus>:
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : RFAL_ERR_BUSY);
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <rfalGetTransceiveStatus+0x10>)
 80021c2:	2002      	movs	r0, #2
 80021c4:	7e1a      	ldrb	r2, [r3, #24]
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	d100      	bne.n	80021cc <rfalGetTransceiveStatus+0xc>
 80021ca:	8b58      	ldrh	r0, [r3, #26]
}
 80021cc:	4770      	bx	lr
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	20000904 	.word	0x20000904

080021d4 <rfalISO14443AGetTransceiveAnticollisionFrameStatus>:
{
 80021d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d6:	b085      	sub	sp, #20
    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 80021d8:	f7ff fff2 	bl	80021c0 <rfalGetTransceiveStatus>
 80021dc:	0004      	movs	r4, r0
 80021de:	2802      	cmp	r0, #2
 80021e0:	d057      	beq.n	8002292 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xbe>
    if( (*gRFAL.nfcaData.bitsToSend) > 0U )
 80021e2:	4e2f      	ldr	r6, [pc, #188]	@ (80022a0 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xcc>)
 80021e4:	4d2f      	ldr	r5, [pc, #188]	@ (80022a4 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xd0>)
 80021e6:	6833      	ldr	r3, [r6, #0]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	469c      	mov	ip, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01d      	beq.n	800222c <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0x58>
       gRFAL.nfcaData.buf[(*gRFAL.nfcaData.bytesToSend)] >>= (*gRFAL.nfcaData.bitsToSend);
 80021f0:	002b      	movs	r3, r5
 80021f2:	002a      	movs	r2, r5
 80021f4:	33b0      	adds	r3, #176	@ 0xb0
 80021f6:	681f      	ldr	r7, [r3, #0]
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	4663      	mov	r3, ip
 80021fc:	32b4      	adds	r2, #180	@ 0xb4
 80021fe:	6811      	ldr	r1, [r2, #0]
 8002200:	7808      	ldrb	r0, [r1, #0]
 8002202:	5c39      	ldrb	r1, [r7, r0]
 8002204:	4119      	asrs	r1, r3
 8002206:	5439      	strb	r1, [r7, r0]
       gRFAL.nfcaData.buf[(*gRFAL.nfcaData.bytesToSend)] <<= (*gRFAL.nfcaData.bitsToSend);
 8002208:	6811      	ldr	r1, [r2, #0]
 800220a:	9b01      	ldr	r3, [sp, #4]
 800220c:	7808      	ldrb	r0, [r1, #0]
 800220e:	681f      	ldr	r7, [r3, #0]
 8002210:	6836      	ldr	r6, [r6, #0]
 8002212:	5c39      	ldrb	r1, [r7, r0]
 8002214:	7836      	ldrb	r6, [r6, #0]
 8002216:	40b1      	lsls	r1, r6
 8002218:	5439      	strb	r1, [r7, r0]
       gRFAL.nfcaData.buf[(*gRFAL.nfcaData.bytesToSend)] |= gRFAL.nfcaData.collByte;
 800221a:	0028      	movs	r0, r5
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	30ac      	adds	r0, #172	@ 0xac
 8002224:	5c8b      	ldrb	r3, [r1, r2]
 8002226:	7800      	ldrb	r0, [r0, #0]
 8002228:	4303      	orrs	r3, r0
 800222a:	548b      	strb	r3, [r1, r2]
    if( ret == RFAL_ERR_RF_COLLISION )
 800222c:	2c1d      	cmp	r4, #29
 800222e:	d113      	bne.n	8002258 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0x84>
       st25r3916ReadRegister( ST25R3916_REG_COLLISION_STATUS, &collData);
 8002230:	ab02      	add	r3, sp, #8
 8002232:	1dd9      	adds	r1, r3, #7
 8002234:	2020      	movs	r0, #32
 8002236:	f002 f884 	bl	8004342 <st25r3916ReadRegister>
       (*gRFAL.nfcaData.bytesToSend) = ((collData >> ST25R3916_REG_COLLISION_STATUS_c_byte_shift) & 0x0FU); // 4-bits Byte information
 800223a:	002b      	movs	r3, r5
 800223c:	33b4      	adds	r3, #180	@ 0xb4
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	ab02      	add	r3, sp, #8
 8002242:	79db      	ldrb	r3, [r3, #7]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	7013      	strb	r3, [r2, #0]
       (*gRFAL.nfcaData.bitsToSend)  = ((collData >> ST25R3916_REG_COLLISION_STATUS_c_bit_shift)  & 0x07U); // 3-bits bit information
 8002248:	002b      	movs	r3, r5
 800224a:	33b8      	adds	r3, #184	@ 0xb8
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	ab02      	add	r3, sp, #8
 8002250:	79db      	ldrb	r3, [r3, #7]
 8002252:	071b      	lsls	r3, r3, #28
 8002254:	0f5b      	lsrs	r3, r3, #29
 8002256:	7013      	strb	r3, [r2, #0]
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_COL) );
 8002258:	2004      	movs	r0, #4
 800225a:	f002 faa8 	bl	80047ae <st25r3916DisableInterrupts>
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_antcl );
 800225e:	2101      	movs	r1, #1
 8002260:	2005      	movs	r0, #5
 8002262:	f002 f950 	bl	8004506 <st25r3916ClrRegisterBits>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 8002266:	2002      	movs	r0, #2
 8002268:	78ab      	ldrb	r3, [r5, #2]
 800226a:	22ff      	movs	r2, #255	@ 0xff
 800226c:	30ff      	adds	r0, #255	@ 0xff
 800226e:	2bea      	cmp	r3, #234	@ 0xea
 8002270:	d912      	bls.n	8002298 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xc4>
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	4013      	ands	r3, r2
 8002276:	4318      	orrs	r0, r3
 8002278:	f005 ffd2 	bl	8008220 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 800227c:	2081      	movs	r0, #129	@ 0x81
 800227e:	78eb      	ldrb	r3, [r5, #3]
 8002280:	22ff      	movs	r2, #255	@ 0xff
 8002282:	0040      	lsls	r0, r0, #1
 8002284:	2bea      	cmp	r3, #234	@ 0xea
 8002286:	d909      	bls.n	800229c <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xc8>
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	4013      	ands	r3, r2
 800228c:	4318      	orrs	r0, r3
 800228e:	f005 ffc7 	bl	8008220 <rfalSetAnalogConfig>
}
 8002292:	0020      	movs	r0, r4
 8002294:	b005      	add	sp, #20
 8002296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 8002298:	3301      	adds	r3, #1
 800229a:	e7ea      	b.n	8002272 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0x9e>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 800229c:	3301      	adds	r3, #1
 800229e:	e7f3      	b.n	8002288 <rfalISO14443AGetTransceiveAnticollisionFrameStatus+0xb4>
 80022a0:	200009bc 	.word	0x200009bc
 80022a4:	20000904 	.word	0x20000904

080022a8 <rfalGetFeliCaPollStatus>:
{
 80022a8:	b570      	push	{r4, r5, r6, lr}
    if( (gRFAL.state != RFAL_STATE_TXRX) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 80022aa:	4c38      	ldr	r4, [pc, #224]	@ (800238c <rfalGetFeliCaPollStatus+0xe4>)
 80022ac:	4b38      	ldr	r3, [pc, #224]	@ (8002390 <rfalGetFeliCaPollStatus+0xe8>)
 80022ae:	8822      	ldrh	r2, [r4, #0]
        return RFAL_ERR_WRONG_STATE;
 80022b0:	2021      	movs	r0, #33	@ 0x21
    if( (gRFAL.state != RFAL_STATE_TXRX) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d12b      	bne.n	800230e <rfalGetFeliCaPollStatus+0x66>
    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 80022b6:	f7ff ff83 	bl	80021c0 <rfalGetTransceiveStatus>
 80022ba:	0005      	movs	r5, r0
 80022bc:	2802      	cmp	r0, #2
 80022be:	d025      	beq.n	800230c <rfalGetFeliCaPollStatus+0x64>
    if( ret != RFAL_ERR_TIMEOUT )  
 80022c0:	2804      	cmp	r0, #4
 80022c2:	d02b      	beq.n	800231c <rfalGetFeliCaPollStatus+0x74>
        st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 80022c4:	20d1      	movs	r0, #209	@ 0xd1
 80022c6:	f002 f8d2 	bl	800446e <st25r3916ExecuteCommand>
        st25r3916ExecuteCommand( ST25R3916_CMD_RESET_RXGAIN );
 80022ca:	20d5      	movs	r0, #213	@ 0xd5
 80022cc:	f002 f8cf 	bl	800446e <st25r3916ExecuteCommand>
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 80022d0:	0023      	movs	r3, r4
 80022d2:	22ff      	movs	r2, #255	@ 0xff
 80022d4:	333f      	adds	r3, #63	@ 0x3f
 80022d6:	701a      	strb	r2, [r3, #0]
        if( ret == RFAL_ERR_NONE )
 80022d8:	2d00      	cmp	r5, #0
 80022da:	d119      	bne.n	8002310 <rfalGetFeliCaPollStatus+0x68>
           gRFAL.nfcfData.devDetected++;
 80022dc:	0023      	movs	r3, r4
 80022de:	33c9      	adds	r3, #201	@ 0xc9
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	3201      	adds	r2, #1
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	701a      	strb	r2, [r3, #0]
           gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[gRFAL.nfcfData.devDetected];
 80022e8:	2314      	movs	r3, #20
 80022ea:	4353      	muls	r3, r2
 80022ec:	33d5      	adds	r3, #213	@ 0xd5
 80022ee:	191b      	adds	r3, r3, r4
 80022f0:	6263      	str	r3, [r4, #36]	@ 0x24
        if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on ) )
 80022f2:	2202      	movs	r2, #2
 80022f4:	2024      	movs	r0, #36	@ 0x24
 80022f6:	0011      	movs	r1, r2
 80022f8:	f002 f95a 	bl	80045b0 <st25r3916CheckReg>
 80022fc:	2800      	cmp	r0, #0
 80022fe:	d00d      	beq.n	800231c <rfalGetFeliCaPollStatus+0x74>
            gRFAL.TxRx.status = RFAL_ERR_BUSY;
 8002300:	2302      	movs	r3, #2
 8002302:	8363      	strh	r3, [r4, #26]
            gRFAL.state       = RFAL_STATE_TXRX;
 8002304:	3301      	adds	r3, #1
 8002306:	7023      	strb	r3, [r4, #0]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 8002308:	334e      	adds	r3, #78	@ 0x4e
 800230a:	7623      	strb	r3, [r4, #24]
    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 800230c:	2002      	movs	r0, #2
}
 800230e:	bd70      	pop	{r4, r5, r6, pc}
            gRFAL.nfcfData.colDetected++;
 8002310:	0022      	movs	r2, r4
 8002312:	32ca      	adds	r2, #202	@ 0xca
 8002314:	7813      	ldrb	r3, [r2, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	7013      	strb	r3, [r2, #0]
 800231a:	e7ea      	b.n	80022f2 <rfalGetFeliCaPollStatus+0x4a>
    gRFAL.conf.eHandling = gRFAL.nfcfData.curHandling;
 800231c:	0023      	movs	r3, r4
 800231e:	33d4      	adds	r3, #212	@ 0xd4
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	71e3      	strb	r3, [r4, #7]
    if( (gRFAL.nfcfData.pollResList != NULL) && (gRFAL.nfcfData.pollResListSize > 0U) && (gRFAL.nfcfData.devDetected > 0U) )
 8002324:	0023      	movs	r3, r4
 8002326:	33c4      	adds	r3, #196	@ 0xc4
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	2800      	cmp	r0, #0
 800232c:	d013      	beq.n	8002356 <rfalGetFeliCaPollStatus+0xae>
 800232e:	0023      	movs	r3, r4
 8002330:	33c8      	adds	r3, #200	@ 0xc8
 8002332:	7819      	ldrb	r1, [r3, #0]
 8002334:	2900      	cmp	r1, #0
 8002336:	d00e      	beq.n	8002356 <rfalGetFeliCaPollStatus+0xae>
 8002338:	0023      	movs	r3, r4
 800233a:	33c9      	adds	r3, #201	@ 0xc9
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <rfalGetFeliCaPollStatus+0xae>
        RFAL_MEMCPY( gRFAL.nfcfData.pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)RFAL_MIN(gRFAL.nfcfData.pollResListSize, gRFAL.nfcfData.devDetected) ) );
 8002342:	1c0a      	adds	r2, r1, #0
 8002344:	4299      	cmp	r1, r3
 8002346:	d900      	bls.n	800234a <rfalGetFeliCaPollStatus+0xa2>
 8002348:	1c1a      	adds	r2, r3, #0
 800234a:	b2d3      	uxtb	r3, r2
 800234c:	2214      	movs	r2, #20
 800234e:	4911      	ldr	r1, [pc, #68]	@ (8002394 <rfalGetFeliCaPollStatus+0xec>)
 8002350:	435a      	muls	r2, r3
 8002352:	f00d ffed 	bl	8010330 <memcpy>
    if( gRFAL.nfcfData.devicesDetected != NULL )
 8002356:	0023      	movs	r3, r4
 8002358:	33cc      	adds	r3, #204	@ 0xcc
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <rfalGetFeliCaPollStatus+0xc0>
        *gRFAL.nfcfData.devicesDetected = gRFAL.nfcfData.devDetected;
 8002360:	0022      	movs	r2, r4
 8002362:	32c9      	adds	r2, #201	@ 0xc9
 8002364:	7812      	ldrb	r2, [r2, #0]
 8002366:	701a      	strb	r2, [r3, #0]
    if( gRFAL.nfcfData.collisionsDetected != NULL )
 8002368:	0023      	movs	r3, r4
 800236a:	33d0      	adds	r3, #208	@ 0xd0
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <rfalGetFeliCaPollStatus+0xd2>
        *gRFAL.nfcfData.collisionsDetected = gRFAL.nfcfData.colDetected;
 8002372:	0022      	movs	r2, r4
 8002374:	32ca      	adds	r2, #202	@ 0xca
 8002376:	7812      	ldrb	r2, [r2, #0]
 8002378:	701a      	strb	r2, [r3, #0]
    return (( (gRFAL.nfcfData.colDetected != 0U) || (gRFAL.nfcfData.devDetected != 0U)) ? RFAL_ERR_NONE : ret);
 800237a:	34c8      	adds	r4, #200	@ 0xc8
 800237c:	4a06      	ldr	r2, [pc, #24]	@ (8002398 <rfalGetFeliCaPollStatus+0xf0>)
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	4013      	ands	r3, r2
 8002382:	425a      	negs	r2, r3
 8002384:	4153      	adcs	r3, r2
 8002386:	4258      	negs	r0, r3
 8002388:	4028      	ands	r0, r5
 800238a:	e7c0      	b.n	800230e <rfalGetFeliCaPollStatus+0x66>
 800238c:	20000904 	.word	0x20000904
 8002390:	00000603 	.word	0x00000603
 8002394:	200009d9 	.word	0x200009d9
 8002398:	00ffff00 	.word	0x00ffff00

0800239c <rfalIsExtFieldOn>:
    return st25r3916IsExtFieldOn();
 800239c:	2240      	movs	r2, #64	@ 0x40
{
 800239e:	b510      	push	{r4, lr}
    return st25r3916IsExtFieldOn();
 80023a0:	0011      	movs	r1, r2
 80023a2:	2031      	movs	r0, #49	@ 0x31
 80023a4:	f002 f904 	bl	80045b0 <st25r3916CheckReg>
}
 80023a8:	bd10      	pop	{r4, pc}
	...

080023ac <rfalListenStop>:
    if( gRFAL.state < RFAL_STATE_INIT )
 80023ac:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <rfalListenStop+0x50>)
        return RFAL_ERR_WRONG_STATE;
 80023ae:	2021      	movs	r0, #33	@ 0x21
    if( gRFAL.state < RFAL_STATE_INIT )
 80023b0:	781a      	ldrb	r2, [r3, #0]
{
 80023b2:	b510      	push	{r4, lr}
    if( gRFAL.state < RFAL_STATE_INIT )
 80023b4:	2a00      	cmp	r2, #0
 80023b6:	d020      	beq.n	80023fa <rfalListenStop+0x4e>
    gRFAL.Lm.state = RFAL_LM_STATE_NOT_INIT;
 80023b8:	001a      	movs	r2, r3
 80023ba:	2100      	movs	r1, #0
 80023bc:	325c      	adds	r2, #92	@ 0x5c
 80023be:	7011      	strb	r1, [r2, #0]
    rfalCheckDisableObsMode();
 80023c0:	799b      	ldrb	r3, [r3, #6]
 80023c2:	428b      	cmp	r3, r1
 80023c4:	d003      	beq.n	80023ce <rfalListenStop+0x22>
 80023c6:	3140      	adds	r1, #64	@ 0x40
 80023c8:	3820      	subs	r0, #32
 80023ca:	f002 f880 	bl	80044ce <st25r3916WriteTestRegister>
    st25r3916OscOn();
 80023ce:	f001 fcf0 	bl	8003db2 <st25r3916OscOn>
    rfalFieldOff();
 80023d2:	f7ff fdfb 	bl	8001fcc <rfalFieldOff>
    st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p) );
 80023d6:	210d      	movs	r1, #13
 80023d8:	2008      	movs	r0, #8
 80023da:	f002 f8a6 	bl	800452a <st25r3916SetRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_om_iso14443a | ST25R3916_REG_MODE_tr_am_ook | ST25R3916_REG_MODE_nfc_ar_off) );
 80023de:	2108      	movs	r1, #8
 80023e0:	2003      	movs	r0, #3
 80023e2:	f001 ffbb 	bl	800435c <st25r3916WriteRegister>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RFU2 | ST25R3916_IRQ_MASK_OSC ) );
 80023e6:	4806      	ldr	r0, [pc, #24]	@ (8002400 <rfalListenStop+0x54>)
 80023e8:	f002 f9e1 	bl	80047ae <st25r3916DisableInterrupts>
    st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RFU2 | ST25R3916_IRQ_MASK_TXE ) );
 80023ec:	4805      	ldr	r0, [pc, #20]	@ (8002404 <rfalListenStop+0x58>)
 80023ee:	f002 f9a5 	bl	800473c <st25r3916GetInterrupt>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_OFF) );
 80023f2:	2007      	movs	r0, #7
 80023f4:	f005 ff14 	bl	8008220 <rfalSetAnalogConfig>
    return RFAL_ERR_NONE;
 80023f8:	2000      	movs	r0, #0
}
 80023fa:	bd10      	pop	{r4, pc}
 80023fc:	20000904 	.word	0x20000904
 8002400:	1f000080 	.word	0x1f000080
 8002404:	1f000008 	.word	0x1f000008

08002408 <rfalListenSleepStart>:
{
 8002408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( gRFAL.state < RFAL_STATE_INIT )
 800240a:	4c25      	ldr	r4, [pc, #148]	@ (80024a0 <rfalListenSleepStart+0x98>)
{
 800240c:	001e      	movs	r6, r3
    if( gRFAL.state < RFAL_STATE_INIT )
 800240e:	7823      	ldrb	r3, [r4, #0]
{
 8002410:	0005      	movs	r5, r0
 8002412:	000f      	movs	r7, r1
        return RFAL_ERR_WRONG_STATE;
 8002414:	2021      	movs	r0, #33	@ 0x21
{
 8002416:	9201      	str	r2, [sp, #4]
    if( gRFAL.state < RFAL_STATE_INIT )
 8002418:	2b00      	cmp	r3, #0
 800241a:	d026      	beq.n	800246a <rfalListenSleepStart+0x62>
            return RFAL_ERR_NOT_IMPLEMENTED;                    
 800241c:	3812      	subs	r0, #18
    switch(sleepSt)
 800241e:	2d0d      	cmp	r5, #13
 8002420:	d023      	beq.n	800246a <rfalListenSleepStart+0x62>
 8002422:	2d10      	cmp	r5, #16
 8002424:	d022      	beq.n	800246c <rfalListenSleepStart+0x64>
 8002426:	3808      	subs	r0, #8
 8002428:	2d0c      	cmp	r5, #12
 800242a:	d11e      	bne.n	800246a <rfalListenSleepStart+0x62>
            st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 800242c:	2101      	movs	r1, #1
 800242e:	1840      	adds	r0, r0, r1
 8002430:	f002 f869 	bl	8004506 <st25r3916ClrRegisterBits>
            st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SLEEP );
 8002434:	20ce      	movs	r0, #206	@ 0xce
 8002436:	f002 f81a 	bl	800446e <st25r3916ExecuteCommand>
            st25r3916ChangeRegisterBits( ST25R3916_REG_MODE                                                                                     ,
 800243a:	22c8      	movs	r2, #200	@ 0xc8
            st25r3916ChangeRegisterBits( ST25R3916_REG_MODE                                                                                                           ,
 800243c:	21fb      	movs	r1, #251	@ 0xfb
 800243e:	2003      	movs	r0, #3
 8002440:	f002 f89b 	bl	800457a <st25r3916ChangeRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_nfc_f0 );
 8002444:	2120      	movs	r1, #32
 8002446:	2005      	movs	r0, #5
 8002448:	f002 f85d 	bl	8004506 <st25r3916ClrRegisterBits>
    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 800244c:	20d1      	movs	r0, #209	@ 0xd1
 800244e:	f002 f80e 	bl	800446e <st25r3916ExecuteCommand>
    st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | 
 8002452:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8002454:	4813      	ldr	r0, [pc, #76]	@ (80024a4 <rfalListenSleepStart+0x9c>)
 8002456:	4318      	orrs	r0, r3
 8002458:	f002 f9a1 	bl	800479e <st25r3916ClearAndEnableInterrupts>
    if( !rfalIsExtFieldOn() )
 800245c:	f7ff ff9e 	bl	800239c <rfalIsExtFieldOn>
 8002460:	2800      	cmp	r0, #0
 8002462:	d10c      	bne.n	800247e <rfalListenSleepStart+0x76>
        rfalListenStop();
 8002464:	f7ff ffa2 	bl	80023ac <rfalListenStop>
        return RFAL_ERR_LINK_LOSS;
 8002468:	2025      	movs	r0, #37	@ 0x25
}
 800246a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 800246c:	2105      	movs	r1, #5
 800246e:	2008      	movs	r0, #8
 8002470:	f002 f849 	bl	8004506 <st25r3916ClrRegisterBits>
            st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SLEEP );
 8002474:	20ce      	movs	r0, #206	@ 0xce
 8002476:	f001 fffa 	bl	800446e <st25r3916ExecuteCommand>
            st25r3916ChangeRegisterBits( ST25R3916_REG_MODE                                                                                                           ,
 800247a:	22e8      	movs	r2, #232	@ 0xe8
 800247c:	e7de      	b.n	800243c <rfalListenSleepStart+0x34>
    gRFAL.Lm.state    = sleepSt;
 800247e:	0023      	movs	r3, r4
 8002480:	335c      	adds	r3, #92	@ 0x5c
 8002482:	701d      	strb	r5, [r3, #0]
    gRFAL.state       = RFAL_STATE_LM;
 8002484:	2304      	movs	r3, #4
 8002486:	7023      	strb	r3, [r4, #0]
    gRFAL.Lm.rxBufLen = rxBufLen;
 8002488:	0023      	movs	r3, r4
    *gRFAL.Lm.rxLen   = 0;
 800248a:	2000      	movs	r0, #0
    gRFAL.Lm.rxBufLen = rxBufLen;
 800248c:	9a01      	ldr	r2, [sp, #4]
    gRFAL.Lm.rxBuf    = rxBuf;
 800248e:	6727      	str	r7, [r4, #112]	@ 0x70
    gRFAL.Lm.rxLen    = rxLen;
 8002490:	67a6      	str	r6, [r4, #120]	@ 0x78
    gRFAL.Lm.rxBufLen = rxBufLen;
 8002492:	3374      	adds	r3, #116	@ 0x74
    gRFAL.Lm.dataFlag = false;
 8002494:	347c      	adds	r4, #124	@ 0x7c
    gRFAL.Lm.rxBufLen = rxBufLen;
 8002496:	801a      	strh	r2, [r3, #0]
    *gRFAL.Lm.rxLen   = 0;
 8002498:	8030      	strh	r0, [r6, #0]
    gRFAL.Lm.dataFlag = false;
 800249a:	7020      	strb	r0, [r4, #0]
    return RFAL_ERR_NONE;
 800249c:	e7e5      	b.n	800246a <rfalListenSleepStart+0x62>
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	20000904 	.word	0x20000904
 80024a4:	00f01920 	.word	0x00f01920

080024a8 <rfalListenGetState>:
    if( lastBR != NULL )
 80024a8:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <rfalListenGetState+0x20>)
 80024aa:	2900      	cmp	r1, #0
 80024ac:	d003      	beq.n	80024b6 <rfalListenGetState+0xe>
        *lastBR = gRFAL.Lm.brDetected;
 80024ae:	001a      	movs	r2, r3
 80024b0:	326c      	adds	r2, #108	@ 0x6c
 80024b2:	7812      	ldrb	r2, [r2, #0]
 80024b4:	700a      	strb	r2, [r1, #0]
    if( dataFlag != NULL )
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d003      	beq.n	80024c2 <rfalListenGetState+0x1a>
        *dataFlag = gRFAL.Lm.dataFlag;
 80024ba:	001a      	movs	r2, r3
 80024bc:	327c      	adds	r2, #124	@ 0x7c
 80024be:	7812      	ldrb	r2, [r2, #0]
 80024c0:	7002      	strb	r2, [r0, #0]
    return gRFAL.Lm.state;
 80024c2:	335c      	adds	r3, #92	@ 0x5c
 80024c4:	7818      	ldrb	r0, [r3, #0]
}
 80024c6:	4770      	bx	lr
 80024c8:	20000904 	.word	0x20000904

080024cc <rfalListenSetState>:
{
 80024cc:	b570      	push	{r4, r5, r6, lr}
    if( gRFAL.state < RFAL_STATE_INIT )
 80024ce:	4d87      	ldr	r5, [pc, #540]	@ (80026ec <rfalListenSetState+0x220>)
{
 80024d0:	0006      	movs	r6, r0
    if( gRFAL.state < RFAL_STATE_INIT )
 80024d2:	782b      	ldrb	r3, [r5, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <rfalListenSetState+0x12>
        return RFAL_ERR_WRONG_STATE;
 80024d8:	2421      	movs	r4, #33	@ 0x21
}
 80024da:	0020      	movs	r0, r4
 80024dc:	bd70      	pop	{r4, r5, r6, pc}
    gRFAL.Lm.dataFlag = false;
 80024de:	002b      	movs	r3, r5
 80024e0:	2200      	movs	r2, #0
 80024e2:	337c      	adds	r3, #124	@ 0x7c
 80024e4:	701a      	strb	r2, [r3, #0]
        switch( newState )
 80024e6:	1e70      	subs	r0, r6, #1
 80024e8:	280f      	cmp	r0, #15
 80024ea:	d8f5      	bhi.n	80024d8 <rfalListenSetState+0xc>
 80024ec:	f7fd fe28 	bl	8000140 <__gnu_thumb1_case_shi>
 80024f0:	00560010 	.word	0x00560010
 80024f4:	fff400d7 	.word	0xfff400d7
 80024f8:	00ea00ae 	.word	0x00ea00ae
 80024fc:	00f500f5 	.word	0x00f500f5
 8002500:	00f500ce 	.word	0x00f500ce
 8002504:	00fc00f7 	.word	0x00fc00f7
 8002508:	00d700fc 	.word	0x00d700fc
 800250c:	00fc00ea 	.word	0x00fc00ea
                st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_rx_en );
 8002510:	2140      	movs	r1, #64	@ 0x40
 8002512:	2002      	movs	r0, #2
 8002514:	f002 f809 	bl	800452a <st25r3916SetRegisterBits>
                st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 8002518:	20c2      	movs	r0, #194	@ 0xc2
 800251a:	f001 ffa8 	bl	800446e <st25r3916ExecuteCommand>
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U )
 800251e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002520:	055b      	lsls	r3, r3, #21
 8002522:	d506      	bpl.n	8002532 <rfalListenSetState+0x66>
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a );
 8002524:	2101      	movs	r1, #1
 8002526:	2008      	movs	r0, #8
 8002528:	f001 ffed 	bl	8004506 <st25r3916ClrRegisterBits>
                    st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SENSE );
 800252c:	20cd      	movs	r0, #205	@ 0xcd
 800252e:	f001 ff9e 	bl	800446e <st25r3916ExecuteCommand>
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCF) != 0U )
 8002532:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002534:	04db      	lsls	r3, r3, #19
 8002536:	d503      	bpl.n	8002540 <rfalListenSetState+0x74>
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 8002538:	2104      	movs	r1, #4
 800253a:	2008      	movs	r0, #8
 800253c:	f001 ffe3 	bl	8004506 <st25r3916ClrRegisterBits>
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8002540:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002542:	049b      	lsls	r3, r3, #18
 8002544:	d508      	bpl.n	8002558 <rfalListenSetState+0x8c>
                    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, ST25R3916_REG_MODE_nfc_ar_mask, ST25R3916_REG_MODE_nfc_ar_auto_rx );
 8002546:	2103      	movs	r1, #3
 8002548:	2201      	movs	r2, #1
 800254a:	0008      	movs	r0, r1
 800254c:	f002 f815 	bl	800457a <st25r3916ChangeRegisterBits>
                    st25r3916TxOff();
 8002550:	2108      	movs	r1, #8
 8002552:	2002      	movs	r0, #2
 8002554:	f001 ffd7 	bl	8004506 <st25r3916ClrRegisterBits>
                st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 8002558:	2401      	movs	r4, #1
                st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_nfc_f0 );
 800255a:	2120      	movs	r1, #32
                st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 800255c:	4264      	negs	r4, r4
                st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_nfc_f0 );
 800255e:	2005      	movs	r0, #5
 8002560:	f001 ffd1 	bl	8004506 <st25r3916ClrRegisterBits>
                st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 8002564:	0020      	movs	r0, r4
 8002566:	f002 f922 	bl	80047ae <st25r3916DisableInterrupts>
                st25r3916ClearAndEnableInterrupts( (ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_OSC |
 800256a:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800256c:	4860      	ldr	r0, [pc, #384]	@ (80026f0 <rfalListenSetState+0x224>)
 800256e:	4318      	orrs	r0, r3
 8002570:	f002 f915 	bl	800479e <st25r3916ClearAndEnableInterrupts>
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 8002574:	002b      	movs	r3, r5
                st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask), (uint8_t)gRFAL.Lm.mdReg );
 8002576:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 8002578:	336c      	adds	r3, #108	@ 0x6c
                st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask), (uint8_t)gRFAL.Lm.mdReg );
 800257a:	21fb      	movs	r1, #251	@ 0xfb
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	2003      	movs	r0, #3
                gRFAL.Lm.brDetected = RFAL_BR_KEEP;
 8002580:	701c      	strb	r4, [r3, #0]
                st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask | ST25R3916_REG_MODE_nfc_ar_mask), (uint8_t)gRFAL.Lm.mdReg );
 8002582:	f001 fffa 	bl	800457a <st25r3916ChangeRegisterBits>
                if( rfalIsExtFieldOn() )
 8002586:	f7ff ff09 	bl	800239c <rfalIsExtFieldOn>
 800258a:	1e04      	subs	r4, r0, #0
 800258c:	d106      	bne.n	800259c <rfalListenSetState+0xd0>
                    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_tx_en | ST25R3916_REG_OP_CONTROL_rx_en | ST25R3916_REG_OP_CONTROL_en) );
 800258e:	21c8      	movs	r1, #200	@ 0xc8
 8002590:	2002      	movs	r0, #2
 8002592:	f001 ffb8 	bl	8004506 <st25r3916ClrRegisterBits>
    gRFAL.Lm.state = newState;
 8002596:	355c      	adds	r5, #92	@ 0x5c
 8002598:	702e      	strb	r6, [r5, #0]
    return ret;
 800259a:	e79e      	b.n	80024da <rfalListenSetState+0xe>
                if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en )  )
 800259c:	2280      	movs	r2, #128	@ 0x80
 800259e:	2002      	movs	r0, #2
 80025a0:	0011      	movs	r1, r2
 80025a2:	f002 f805 	bl	80045b0 <st25r3916CheckReg>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d113      	bne.n	80025d2 <rfalListenSetState+0x106>
                    st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_rx_en) );
 80025aa:	21c0      	movs	r1, #192	@ 0xc0
 80025ac:	3002      	adds	r0, #2
 80025ae:	f001 ffbc 	bl	800452a <st25r3916SetRegisterBits>
                    if( !st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_osc_ok, ST25R3916_REG_AUX_DISPLAY_osc_ok )  )
 80025b2:	2210      	movs	r2, #16
 80025b4:	2031      	movs	r0, #49	@ 0x31
 80025b6:	0011      	movs	r1, r2
 80025b8:	f001 fffa 	bl	80045b0 <st25r3916CheckReg>
 80025bc:	2800      	cmp	r0, #0
 80025be:	d10b      	bne.n	80025d8 <rfalListenSetState+0x10c>
                        if( st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE ) == 0U )
 80025c0:	210a      	movs	r1, #10
 80025c2:	3080      	adds	r0, #128	@ 0x80
 80025c4:	f002 f880 	bl	80046c8 <st25r3916WaitForInterruptsTimed>
 80025c8:	2800      	cmp	r0, #0
 80025ca:	d105      	bne.n	80025d8 <rfalListenSetState+0x10c>
 80025cc:	2602      	movs	r6, #2
                            ret = RFAL_ERR_IO;
 80025ce:	2403      	movs	r4, #3
 80025d0:	e7e1      	b.n	8002596 <rfalListenSetState+0xca>
                    st25r3916GetInterrupt(ST25R3916_IRQ_MASK_OSC);
 80025d2:	2080      	movs	r0, #128	@ 0x80
 80025d4:	f002 f8b2 	bl	800473c <st25r3916GetInterrupt>
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 80025d8:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80025da:	049b      	lsls	r3, r3, #18
 80025dc:	d41a      	bmi.n	8002614 <rfalListenSetState+0x148>
        reSetState = false;
 80025de:	2400      	movs	r4, #0
 80025e0:	2602      	movs	r6, #2
                if( gRFAL.Lm.state == RFAL_LM_STATE_ACTIVE_A )
 80025e2:	002b      	movs	r3, r5
 80025e4:	335c      	adds	r3, #92	@ 0x5c
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	d106      	bne.n	80025fa <rfalListenSetState+0x12e>
                    st25r3916ClrRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 80025ec:	2101      	movs	r1, #1
 80025ee:	2008      	movs	r0, #8
 80025f0:	f001 ff89 	bl	8004506 <st25r3916ClrRegisterBits>
                    st25r3916ExecuteCommand( ST25R3916_CMD_GOTO_SENSE );
 80025f4:	20cd      	movs	r0, #205	@ 0xcd
 80025f6:	f001 ff3a 	bl	800446e <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 80025fa:	20db      	movs	r0, #219	@ 0xdb
 80025fc:	f001 ff37 	bl	800446e <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8002600:	20d1      	movs	r0, #209	@ 0xd1
 8002602:	f001 ff34 	bl	800446e <st25r3916ExecuteCommand>
                rfalCheckEnableObsModeRx();
 8002606:	79ab      	ldrb	r3, [r5, #6]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d119      	bne.n	8002640 <rfalListenSetState+0x174>
    while( reSetState );
 800260c:	2c00      	cmp	r4, #0
 800260e:	d000      	beq.n	8002612 <rfalListenSetState+0x146>
 8002610:	e769      	b.n	80024e6 <rfalListenSetState+0x1a>
 8002612:	e7c0      	b.n	8002596 <rfalListenSetState+0xca>
                    st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 8002614:	20c2      	movs	r0, #194	@ 0xc2
 8002616:	f001 ff2a 	bl	800446e <st25r3916ExecuteCommand>
                    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, ST25R3916_REG_MODE_nfc_ar_mask, ST25R3916_REG_MODE_nfc_ar_auto_rx );
 800261a:	2103      	movs	r1, #3
 800261c:	2201      	movs	r2, #1
 800261e:	0008      	movs	r0, r1
 8002620:	f001 ffab 	bl	800457a <st25r3916ChangeRegisterBits>
                    st25r3916TxOff();
 8002624:	2108      	movs	r1, #8
 8002626:	2002      	movs	r0, #2
 8002628:	f001 ff6d 	bl	8004506 <st25r3916ClrRegisterBits>
                    if( !st25r3916IsExtFieldOn() )
 800262c:	2240      	movs	r2, #64	@ 0x40
 800262e:	2031      	movs	r0, #49	@ 0x31
 8002630:	0011      	movs	r1, r2
 8002632:	f001 ffbd 	bl	80045b0 <st25r3916CheckReg>
 8002636:	2800      	cmp	r0, #0
 8002638:	d1d1      	bne.n	80025de <rfalListenSetState+0x112>
                        reSetState = true;
 800263a:	2401      	movs	r4, #1
                        newState   = RFAL_LM_STATE_POWER_OFF;                    /* Set POWER_OFF state */
 800263c:	0026      	movs	r6, r4
 800263e:	e7d0      	b.n	80025e2 <rfalListenSetState+0x116>
                rfalCheckEnableObsModeRx();
 8002640:	2140      	movs	r1, #64	@ 0x40
 8002642:	2001      	movs	r0, #1
 8002644:	4319      	orrs	r1, r3
 8002646:	f001 ff42 	bl	80044ce <st25r3916WriteTestRegister>
 800264a:	e7df      	b.n	800260c <rfalListenSetState+0x140>
                st25r3916SetBitrate( (uint8_t)gRFAL.Lm.brDetected, (uint8_t)gRFAL.Lm.brDetected );
 800264c:	002c      	movs	r4, r5
 800264e:	346c      	adds	r4, #108	@ 0x6c
 8002650:	7820      	ldrb	r0, [r4, #0]
 8002652:	0001      	movs	r1, r0
 8002654:	f001 fc72 	bl	8003f3c <st25r3916SetBitrate>
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 8002658:	2101      	movs	r1, #1
 800265a:	2008      	movs	r0, #8
 800265c:	f001 ff65 	bl	800452a <st25r3916SetRegisterBits>
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCF, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 8002660:	7821      	ldrb	r1, [r4, #0]
 8002662:	200c      	movs	r0, #12
 8002664:	000a      	movs	r2, r1
 8002666:	f7ff fb05 	bl	8001c74 <rfalSetMode>
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 800266a:	2304      	movs	r3, #4
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCF, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 800266c:	0004      	movs	r4, r0
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800266e:	20db      	movs	r0, #219	@ 0xdb
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 8002670:	702b      	strb	r3, [r5, #0]
                st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8002672:	f001 fefc 	bl	800446e <st25r3916ExecuteCommand>
                st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8002676:	20d1      	movs	r0, #209	@ 0xd1
 8002678:	f001 fef9 	bl	800446e <st25r3916ExecuteCommand>
                st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 800267c:	20f0      	movs	r0, #240	@ 0xf0
 800267e:	0400      	lsls	r0, r0, #16
 8002680:	f002 f85c 	bl	800473c <st25r3916GetInterrupt>
                st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_RXE );     /* Start looking for any incoming data */
 8002684:	2010      	movs	r0, #16
 8002686:	f002 f885 	bl	8004794 <st25r3916EnableInterrupts>
    while( reSetState );
 800268a:	e784      	b.n	8002596 <rfalListenSetState+0xca>
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCF, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 800268c:	002b      	movs	r3, r5
 800268e:	336c      	adds	r3, #108	@ 0x6c
 8002690:	7819      	ldrb	r1, [r3, #0]
 8002692:	200c      	movs	r0, #12
 8002694:	000a      	movs	r2, r1
 8002696:	f7ff faed 	bl	8001c74 <rfalSetMode>
 800269a:	0004      	movs	r4, r0
    while( reSetState );
 800269c:	e77b      	b.n	8002596 <rfalListenSetState+0xca>
                st25r3916SetBitrate( (uint8_t)gRFAL.Lm.brDetected, (uint8_t)gRFAL.Lm.brDetected );
 800269e:	002c      	movs	r4, r5
 80026a0:	346c      	adds	r4, #108	@ 0x6c
 80026a2:	7820      	ldrb	r0, [r4, #0]
 80026a4:	0001      	movs	r1, r0
 80026a6:	f001 fc49 	bl	8003f3c <st25r3916SetBitrate>
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 80026aa:	2104      	movs	r1, #4
 80026ac:	2008      	movs	r0, #8
 80026ae:	f001 ff3c 	bl	800452a <st25r3916SetRegisterBits>
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCA, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 80026b2:	7821      	ldrb	r1, [r4, #0]
 80026b4:	200a      	movs	r0, #10
 80026b6:	000a      	movs	r2, r1
 80026b8:	f7ff fadc 	bl	8001c74 <rfalSetMode>
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 80026bc:	2304      	movs	r3, #4
                ret = rfalSetMode( RFAL_MODE_LISTEN_NFCA, gRFAL.Lm.brDetected, gRFAL.Lm.brDetected );
 80026be:	0004      	movs	r4, r0
                gRFAL.state = RFAL_STATE_LM;                    /* Keep in Listen Mode */
 80026c0:	702b      	strb	r3, [r5, #0]
    while( reSetState );
 80026c2:	e768      	b.n	8002596 <rfalListenSetState+0xca>
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a) );
 80026c4:	2101      	movs	r1, #1
 80026c6:	2008      	movs	r0, #8
 80026c8:	f001 ff2f 	bl	800452a <st25r3916SetRegisterBits>
                st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 80026cc:	20f0      	movs	r0, #240	@ 0xf0
 80026ce:	0400      	lsls	r0, r0, #16
 80026d0:	f002 f834 	bl	800473c <st25r3916GetInterrupt>
                st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_RXE );    /* Start looking for any incoming data */
 80026d4:	2010      	movs	r0, #16
 80026d6:	f002 f85d 	bl	8004794 <st25r3916EnableInterrupts>
        switch( newState )
 80026da:	2400      	movs	r4, #0
 80026dc:	e75b      	b.n	8002596 <rfalListenSetState+0xca>
                st25r3916SetRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r) );
 80026de:	2104      	movs	r1, #4
 80026e0:	2008      	movs	r0, #8
 80026e2:	f001 ff22 	bl	800452a <st25r3916SetRegisterBits>
    while( reSetState );
 80026e6:	e7f8      	b.n	80026da <rfalListenSetState+0x20e>
        switch( newState )
 80026e8:	2405      	movs	r4, #5
 80026ea:	e6f6      	b.n	80024da <rfalListenSetState+0xe>
 80026ec:	20000904 	.word	0x20000904
 80026f0:	00f019a0 	.word	0x00f019a0

080026f4 <rfalListenStart>:
{
 80026f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f6:	b08b      	sub	sp, #44	@ 0x2c
 80026f8:	001e      	movs	r6, r3
 80026fa:	ab10      	add	r3, sp, #64	@ 0x40
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	cb04      	ldmia	r3!, {r2}
    if( gRFAL.state < RFAL_STATE_INIT )
 8002700:	4c6d      	ldr	r4, [pc, #436]	@ (80028b8 <rfalListenStart+0x1c4>)
{
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	0007      	movs	r7, r0
 8002706:	9303      	str	r3, [sp, #12]
    if( gRFAL.state < RFAL_STATE_INIT )
 8002708:	7823      	ldrb	r3, [r4, #0]
{
 800270a:	000d      	movs	r5, r1
        return RFAL_ERR_WRONG_STATE;
 800270c:	2021      	movs	r0, #33	@ 0x21
{
 800270e:	9202      	str	r2, [sp, #8]
    if( gRFAL.state < RFAL_STATE_INIT )
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00f      	beq.n	8002734 <rfalListenStart+0x40>
    gRFAL.Lm.state  = RFAL_LM_STATE_NOT_INIT;
 8002714:	0023      	movs	r3, r4
 8002716:	2200      	movs	r2, #0
 8002718:	335c      	adds	r3, #92	@ 0x5c
 800271a:	701a      	strb	r2, [r3, #0]
    gRFAL.Lm.mdIrqs = ST25R3916_IRQ_MASK_NONE;
 800271c:	66a2      	str	r2, [r4, #104]	@ 0x68
    gRFAL.Lm.mdReg  = (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_nfc | ST25R3916_REG_MODE_nfc_ar_off);
 800271e:	6662      	str	r2, [r4, #100]	@ 0x64
    if( (lmMask & RFAL_LM_MASK_NFCA) != 0U )
 8002720:	057b      	lsls	r3, r7, #21
 8002722:	d547      	bpl.n	80027b4 <rfalListenStart+0xc0>
        if( confA == NULL )
 8002724:	4291      	cmp	r1, r2
 8002726:	d004      	beq.n	8002732 <rfalListenStart+0x3e>
        switch(confA->nfcidLen)
 8002728:	780b      	ldrb	r3, [r1, #0]
 800272a:	2b04      	cmp	r3, #4
 800272c:	d005      	beq.n	800273a <rfalListenStart+0x46>
 800272e:	2b07      	cmp	r3, #7
 8002730:	d002      	beq.n	8002738 <rfalListenStart+0x44>
        return RFAL_ERR_WRONG_STATE;
 8002732:	2007      	movs	r0, #7
}
 8002734:	b00b      	add	sp, #44	@ 0x2c
 8002736:	bdf0      	pop	{r4, r5, r6, r7, pc}
                st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_id_mask, ST25R3916_REG_AUX_nfc_id_7bytes );
 8002738:	2210      	movs	r2, #16
 800273a:	2130      	movs	r1, #48	@ 0x30
 800273c:	200a      	movs	r0, #10
 800273e:	f001 ff1c 	bl	800457a <st25r3916ChangeRegisterBits>
        RFAL_MEMCPY( pPTMem, confA->nfcid, RFAL_NFCID1_TRIPLE_LEN );
 8002742:	220a      	movs	r2, #10
 8002744:	1c69      	adds	r1, r5, #1
 8002746:	a804      	add	r0, sp, #16
 8002748:	f00d fdf2 	bl	8010330 <memcpy>
        RFAL_MEMCPY( pPTMem, confA->SENS_RES, RFAL_LM_SENS_RES_LEN );
 800274c:	0029      	movs	r1, r5
 800274e:	200a      	movs	r0, #10
 8002750:	ab04      	add	r3, sp, #16
 8002752:	2202      	movs	r2, #2
 8002754:	18c0      	adds	r0, r0, r3
 8002756:	310b      	adds	r1, #11
 8002758:	f00d fdea 	bl	8010330 <memcpy>
        *(pPTMem++) = ( (confA->nfcidLen == RFAL_LM_NFCID_LEN_04) ? ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE ) : (confA->SEL_RES | RFAL_LM_NFCID_INCOMPLETE) );
 800275c:	782a      	ldrb	r2, [r5, #0]
 800275e:	7b6b      	ldrb	r3, [r5, #13]
 8002760:	2a04      	cmp	r2, #4
 8002762:	d124      	bne.n	80027ae <rfalListenStart+0xba>
 8002764:	0019      	movs	r1, r3
 8002766:	4391      	bics	r1, r2
 8002768:	000a      	movs	r2, r1
 800276a:	a904      	add	r1, sp, #16
 800276c:	730a      	strb	r2, [r1, #12]
        *(pPTMem++) = ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE );
 800276e:	2204      	movs	r2, #4
 8002770:	4393      	bics	r3, r2
 8002772:	000a      	movs	r2, r1
 8002774:	734b      	strb	r3, [r1, #13]
        *(pPTMem++) = ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE );
 8002776:	738b      	strb	r3, [r1, #14]
        st25r3916WritePTMem( PTMem.PTMem_A, ST25R3916_PTM_A_LEN );
 8002778:	0010      	movs	r0, r2
 800277a:	210f      	movs	r1, #15
 800277c:	f001 fe29 	bl	80043d2 <st25r3916WritePTMem>
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_off);
 8002780:	22c8      	movs	r2, #200	@ 0xc8
 8002782:	4b4d      	ldr	r3, [pc, #308]	@ (80028b8 <rfalListenStart+0x1c4>)
        autoResp &= ~ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a;
 8002784:	250c      	movs	r5, #12
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_off);
 8002786:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8002788:	430a      	orrs	r2, r1
 800278a:	665a      	str	r2, [r3, #100]	@ 0x64
        gRFAL.Lm.mdIrqs |= (ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_RXE_PTA);
 800278c:	2298      	movs	r2, #152	@ 0x98
 800278e:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002790:	0552      	lsls	r2, r2, #21
 8002792:	430a      	orrs	r2, r1
 8002794:	669a      	str	r2, [r3, #104]	@ 0x68
    if( (lmMask & RFAL_LM_MASK_NFCB) != 0U )
 8002796:	2380      	movs	r3, #128	@ 0x80
 8002798:	003a      	movs	r2, r7
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	401a      	ands	r2, r3
 800279e:	9200      	str	r2, [sp, #0]
 80027a0:	421f      	tst	r7, r3
 80027a2:	d009      	beq.n	80027b8 <rfalListenStart+0xc4>
        if( confB == NULL )
 80027a4:	9b01      	ldr	r3, [sp, #4]
        return RFAL_ERR_NOTSUPP;
 80027a6:	2018      	movs	r0, #24
        if( confB == NULL )
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1c3      	bne.n	8002734 <rfalListenStart+0x40>
 80027ac:	e7c1      	b.n	8002732 <rfalListenStart+0x3e>
        *(pPTMem++) = ( (confA->nfcidLen == RFAL_LM_NFCID_LEN_04) ? ( confA->SEL_RES & ~RFAL_LM_NFCID_INCOMPLETE ) : (confA->SEL_RES | RFAL_LM_NFCID_INCOMPLETE) );
 80027ae:	2204      	movs	r2, #4
 80027b0:	431a      	orrs	r2, r3
 80027b2:	e7da      	b.n	800276a <rfalListenStart+0x76>
    autoResp = (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p);
 80027b4:	250d      	movs	r5, #13
 80027b6:	e7ee      	b.n	8002796 <rfalListenStart+0xa2>
    if( (lmMask & RFAL_LM_MASK_NFCF) != 0U )
 80027b8:	04fb      	lsls	r3, r7, #19
 80027ba:	d52d      	bpl.n	8002818 <rfalListenStart+0x124>
        if( confF == NULL )
 80027bc:	2e00      	cmp	r6, #0
 80027be:	d0b8      	beq.n	8002732 <rfalListenStart+0x3e>
        RFAL_MEMCPY( pPTMem, confF->SC, RFAL_LM_SENSF_SC_LEN );
 80027c0:	0031      	movs	r1, r6
 80027c2:	2202      	movs	r2, #2
 80027c4:	a804      	add	r0, sp, #16
 80027c6:	f00d fdb3 	bl	8010330 <memcpy>
        RFAL_MEMCPY( pPTMem, confF->SENSF_RES, RFAL_LM_SENSF_RES_LEN );
 80027ca:	ab04      	add	r3, sp, #16
 80027cc:	1cb1      	adds	r1, r6, #2
 80027ce:	2211      	movs	r2, #17
 80027d0:	1c98      	adds	r0, r3, #2
 80027d2:	f00d fdad 	bl	8010330 <memcpy>
        pPTMem[RFAL_LM_SENSF_RD0_POS] = 0x00;   /* NFC Forum Digital 1.1 Table 46: 0x00                   */
 80027d6:	ab04      	add	r3, sp, #16
 80027d8:	9a00      	ldr	r2, [sp, #0]
        st25r3916WritePTMemF( PTMem.PTMem_F, ST25R3916_PTM_F_LEN );
 80027da:	0018      	movs	r0, r3
 80027dc:	2115      	movs	r1, #21
        pPTMem[RFAL_LM_SENSF_RD0_POS] = 0x00;   /* NFC Forum Digital 1.1 Table 46: 0x00                   */
 80027de:	74da      	strb	r2, [r3, #19]
        pPTMem[RFAL_LM_SENSF_RD1_POS] = 0x00;   /* NFC Forum Digital 1.1 Table 47: No automatic bit rates */
 80027e0:	751a      	strb	r2, [r3, #20]
        st25r3916WritePTMemF( PTMem.PTMem_F, ST25R3916_PTM_F_LEN );
 80027e2:	f001 fe10 	bl	8004406 <st25r3916WritePTMemF>
        if( !gRFAL.Lm.iniFlag )
 80027e6:	4b35      	ldr	r3, [pc, #212]	@ (80028bc <rfalListenStart+0x1c8>)
 80027e8:	4e33      	ldr	r6, [pc, #204]	@ (80028b8 <rfalListenStart+0x1c4>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <rfalListenStart+0x110>
            *(pPTMem++) = 0x12;
 80027f0:	4b33      	ldr	r3, [pc, #204]	@ (80028c0 <rfalListenStart+0x1cc>)
            st25r3916WritePTMemTSN( PTMem.TSN, ST25R3916_PTM_TSN_LEN );
 80027f2:	210c      	movs	r1, #12
            *(pPTMem++) = 0x12;
 80027f4:	9304      	str	r3, [sp, #16]
            *(pPTMem++) = 0x9A;
 80027f6:	4b33      	ldr	r3, [pc, #204]	@ (80028c4 <rfalListenStart+0x1d0>)
            st25r3916WritePTMemTSN( PTMem.TSN, ST25R3916_PTM_TSN_LEN );
 80027f8:	a804      	add	r0, sp, #16
            *(pPTMem++) = 0x9A;
 80027fa:	9305      	str	r3, [sp, #20]
            *(pPTMem++) = 0x43;
 80027fc:	4b32      	ldr	r3, [pc, #200]	@ (80028c8 <rfalListenStart+0x1d4>)
 80027fe:	9306      	str	r3, [sp, #24]
            st25r3916WritePTMemTSN( PTMem.TSN, ST25R3916_PTM_TSN_LEN );
 8002800:	f001 fe1b 	bl	800443a <st25r3916WritePTMemTSN>
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r);
 8002804:	2304      	movs	r3, #4
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_nfc_ar_off);
 8002806:	6e72      	ldr	r2, [r6, #100]	@ 0x64
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r);
 8002808:	439d      	bics	r5, r3
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_nfc_ar_off);
 800280a:	33dc      	adds	r3, #220	@ 0xdc
 800280c:	4313      	orrs	r3, r2
 800280e:	6673      	str	r3, [r6, #100]	@ 0x64
        gRFAL.Lm.mdIrqs |= (ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE_PTA | ST25R3916_IRQ_MASK_RXE);
 8002810:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
 8002812:	4b2e      	ldr	r3, [pc, #184]	@ (80028cc <rfalListenStart+0x1d8>)
 8002814:	4313      	orrs	r3, r2
 8002816:	66b3      	str	r3, [r6, #104]	@ 0x68
    if( (lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8002818:	04bb      	lsls	r3, r7, #18
 800281a:	d518      	bpl.n	800284e <rfalListenStart+0x15a>
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p);
 800281c:	2308      	movs	r3, #8
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_auto_rx);
 800281e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
        autoResp &= ~(ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p);
 8002820:	439d      	bics	r5, r3
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_auto_rx);
 8002822:	33e1      	adds	r3, #225	@ 0xe1
 8002824:	4313      	orrs	r3, r2
        st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 8002826:	2180      	movs	r1, #128	@ 0x80
 8002828:	200a      	movs	r0, #10
        gRFAL.Lm.mdReg  |= (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om3 | ST25R3916_REG_MODE_om2 | ST25R3916_REG_MODE_om0 | ST25R3916_REG_MODE_nfc_ar_auto_rx);
 800282a:	6663      	str	r3, [r4, #100]	@ 0x64
        st25r3916ClrRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_no_crc_rx );
 800282c:	f001 fe6b 	bl	8004506 <st25r3916ClrRegisterBits>
        st25r3916ChangeRegisterBits(ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, gRFAL.timings.nTRFW);
 8002830:	7d22      	ldrb	r2, [r4, #20]
 8002832:	2103      	movs	r1, #3
 8002834:	200a      	movs	r0, #10
 8002836:	f001 fea0 	bl	800457a <st25r3916ChangeRegisterBits>
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 800283a:	7d20      	ldrb	r0, [r4, #20]
 800283c:	2107      	movs	r1, #7
 800283e:	3001      	adds	r0, #1
 8002840:	f7fd fd18 	bl	8000274 <__aeabi_uidivmod>
        gRFAL.Lm.mdIrqs |= ( ST25R3916_IRQ_MASK_RXE );
 8002844:	2310      	movs	r3, #16
 8002846:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
        gRFAL.timings.nTRFW = rfalGennTRFW( gRFAL.timings.nTRFW );
 8002848:	7521      	strb	r1, [r4, #20]
        gRFAL.Lm.mdIrqs |= ( ST25R3916_IRQ_MASK_RXE );
 800284a:	4313      	orrs	r3, r2
 800284c:	66a3      	str	r3, [r4, #104]	@ 0x68
    if( (gRFAL.Lm.mdReg & ST25R3916_REG_MODE_targ) == ST25R3916_REG_MODE_targ_targ )
 800284e:	4b1a      	ldr	r3, [pc, #104]	@ (80028b8 <rfalListenStart+0x1c4>)
        return RFAL_ERR_REQUEST;   /* Listen Start called but no mode was enabled */
 8002850:	2005      	movs	r0, #5
    if( (gRFAL.Lm.mdReg & ST25R3916_REG_MODE_targ) == ST25R3916_REG_MODE_targ_targ )
 8002852:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002854:	0612      	lsls	r2, r2, #24
 8002856:	d400      	bmi.n	800285a <rfalListenStart+0x166>
 8002858:	e76c      	b.n	8002734 <rfalListenStart+0x40>
        gRFAL.state     = RFAL_STATE_LM;
 800285a:	2204      	movs	r2, #4
 800285c:	701a      	strb	r2, [r3, #0]
        gRFAL.Lm.rxBuf    = rxBuf;
 800285e:	9a02      	ldr	r2, [sp, #8]
        *gRFAL.Lm.rxLen   = 0;
 8002860:	2400      	movs	r4, #0
        gRFAL.Lm.rxBuf    = rxBuf;
 8002862:	671a      	str	r2, [r3, #112]	@ 0x70
        gRFAL.Lm.rxBufLen = rxBufLen;
 8002864:	001a      	movs	r2, r3
 8002866:	9903      	ldr	r1, [sp, #12]
 8002868:	3274      	adds	r2, #116	@ 0x74
 800286a:	8011      	strh	r1, [r2, #0]
        gRFAL.Lm.rxLen    = rxLen;
 800286c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
        gRFAL.Lm.mdMask = lmMask;
 800286e:	661f      	str	r7, [r3, #96]	@ 0x60
        gRFAL.Lm.rxLen    = rxLen;
 8002870:	679a      	str	r2, [r3, #120]	@ 0x78
        *gRFAL.Lm.rxLen   = 0;
 8002872:	8014      	strh	r4, [r2, #0]
        gRFAL.Lm.dataFlag = false;
 8002874:	2280      	movs	r2, #128	@ 0x80
 8002876:	337c      	adds	r3, #124	@ 0x7c
 8002878:	0052      	lsls	r2, r2, #1
 800287a:	801a      	strh	r2, [r3, #0]
        st25r3916ChangeRegisterBits( ST25R3916_REG_PASSIVE_TARGET, (ST25R3916_REG_PASSIVE_TARGET_d_106_ac_a | ST25R3916_REG_PASSIVE_TARGET_d_212_424_1r | ST25R3916_REG_PASSIVE_TARGET_d_ac_ap2p ), autoResp );
 800287c:	210d      	movs	r1, #13
 800287e:	002a      	movs	r2, r5
 8002880:	3003      	adds	r0, #3
 8002882:	f001 fe7a 	bl	800457a <st25r3916ChangeRegisterBits>
        st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger );
 8002886:	0022      	movs	r2, r4
 8002888:	21e0      	movs	r1, #224	@ 0xe0
 800288a:	2012      	movs	r0, #18
 800288c:	f001 fe75 	bl	800457a <st25r3916ChangeRegisterBits>
        st25r3916SetRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step_512 );
 8002890:	2108      	movs	r1, #8
 8002892:	2012      	movs	r0, #18
 8002894:	f001 fe49 	bl	800452a <st25r3916SetRegisterBits>
        st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo512fc( RFAL_LM_GT ) );
 8002898:	2102      	movs	r1, #2
 800289a:	200f      	movs	r0, #15
 800289c:	f001 fd5e 	bl	800435c <st25r3916WriteRegister>
        st25r3916ClrRegisterBits( ST25R3916_REG_ISO14443A_NFC, (ST25R3916_REG_ISO14443A_NFC_no_tx_par | ST25R3916_REG_ISO14443A_NFC_no_rx_par | ST25R3916_REG_ISO14443A_NFC_nfc_f0) );
 80028a0:	21e0      	movs	r1, #224	@ 0xe0
 80028a2:	2005      	movs	r0, #5
 80028a4:	f001 fe2f 	bl	8004506 <st25r3916ClrRegisterBits>
        rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_ON) );
 80028a8:	2006      	movs	r0, #6
 80028aa:	f005 fcb9 	bl	8008220 <rfalSetAnalogConfig>
        rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 80028ae:	2001      	movs	r0, #1
 80028b0:	f7ff fe0c 	bl	80024cc <rfalListenSetState>
    return RFAL_ERR_NONE;
 80028b4:	0020      	movs	r0, r4
 80028b6:	e73d      	b.n	8002734 <rfalListenStart+0x40>
 80028b8:	20000904 	.word	0x20000904
 80028bc:	20000981 	.word	0x20000981
 80028c0:	78563412 	.word	0x78563412
 80028c4:	21dfbc9a 	.word	0x21dfbc9a
 80028c8:	a9876543 	.word	0xa9876543
 80028cc:	18000010 	.word	0x18000010

080028d0 <rfalWorker>:
{
 80028d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( gRFAL.state )
 80028d2:	4caf      	ldr	r4, [pc, #700]	@ (8002b90 <rfalWorker+0x2c0>)
{
 80028d4:	b08d      	sub	sp, #52	@ 0x34
    switch( gRFAL.state )
 80028d6:	7825      	ldrb	r5, [r4, #0]
 80028d8:	2d04      	cmp	r5, #4
 80028da:	d100      	bne.n	80028de <rfalWorker+0xe>
 80028dc:	e35a      	b.n	8002f94 <rfalWorker+0x6c4>
 80028de:	2d05      	cmp	r5, #5
 80028e0:	d101      	bne.n	80028e6 <rfalWorker+0x16>
 80028e2:	f000 fd5e 	bl	80033a2 <rfalWorker+0xad2>
 80028e6:	2d03      	cmp	r5, #3
 80028e8:	d16f      	bne.n	80029ca <rfalWorker+0xfa>
        if( gRFAL.tmr.txRx != RFAL_TIMING_NONE )
 80028ea:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80028ec:	2800      	cmp	r0, #0
 80028ee:	d006      	beq.n	80028fe <rfalWorker+0x2e>
            if( rfalTimerisExpired( gRFAL.tmr.txRx ) )
 80028f0:	f001 ffe2 	bl	80048b8 <timerIsExpired>
 80028f4:	2800      	cmp	r0, #0
 80028f6:	d002      	beq.n	80028fe <rfalWorker+0x2e>
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80028f8:	235a      	movs	r3, #90	@ 0x5a
                gRFAL.TxRx.status = RFAL_ERR_IO;
 80028fa:	8365      	strh	r5, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 80028fc:	7623      	strb	r3, [r4, #24]
        if( rfalIsTransceiveInTx() )
 80028fe:	f7ff fc53 	bl	80021a8 <rfalIsTransceiveInTx>
 8002902:	0003      	movs	r3, r0
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8002904:	7e20      	ldrb	r0, [r4, #24]
        if( rfalIsTransceiveInTx() )
 8002906:	2b00      	cmp	r3, #0
 8002908:	d100      	bne.n	800290c <rfalWorker+0x3c>
 800290a:	e14b      	b.n	8002ba4 <rfalWorker+0x2d4>
    irqs = ST25R3916_IRQ_MASK_NONE;
 800290c:	2300      	movs	r3, #0
 800290e:	9309      	str	r3, [sp, #36]	@ 0x24
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8002910:	7e63      	ldrb	r3, [r4, #25]
 8002912:	4283      	cmp	r3, r0
 8002914:	d000      	beq.n	8002918 <rfalWorker+0x48>
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 8002916:	7660      	strb	r0, [r4, #25]
    switch( gRFAL.TxRx.state )
 8002918:	380b      	subs	r0, #11
 800291a:	2809      	cmp	r0, #9
 800291c:	d900      	bls.n	8002920 <rfalWorker+0x50>
 800291e:	e134      	b.n	8002b8a <rfalWorker+0x2ba>
 8002920:	f7fd fc18 	bl	8000154 <__gnu_thumb1_case_uhi>
 8002924:	000c000a 	.word	0x000c000a
 8002928:	001b0014 	.word	0x001b0014
 800292c:	00970072 	.word	0x00970072
 8002930:	00f700a6 	.word	0x00f700a6
 8002934:	01230104 	.word	0x01230104
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 8002938:	230c      	movs	r3, #12
 800293a:	7623      	strb	r3, [r4, #24]
            if( !rfalIsGTExpired() )
 800293c:	f7ff fae2 	bl	8001f04 <rfalIsGTExpired>
 8002940:	2800      	cmp	r0, #0
 8002942:	d042      	beq.n	80029ca <rfalWorker+0xfa>
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8002944:	2300      	movs	r3, #0
 8002946:	6423      	str	r3, [r4, #64]	@ 0x40
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 8002948:	330d      	adds	r3, #13
 800294a:	7623      	strb	r3, [r4, #24]
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 800294c:	2104      	movs	r1, #4
 800294e:	7863      	ldrb	r3, [r4, #1]
 8002950:	438b      	bics	r3, r1
 8002952:	2b09      	cmp	r3, #9
 8002954:	d133      	bne.n	80029be <rfalWorker+0xee>
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_PREP_TX;
 8002956:	230e      	movs	r3, #14
 8002958:	7623      	strb	r3, [r4, #24]
            rfalPrepareTransceive( );
 800295a:	f7fe ff1d 	bl	8001798 <rfalPrepareTransceive>
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 800295e:	239c      	movs	r3, #156	@ 0x9c
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8002960:	7865      	ldrb	r5, [r4, #1]
            gRFAL.fifo.expWL = RFAL_FIFO_OUT_WL;
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	8723      	strh	r3, [r4, #56]	@ 0x38
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8002966:	1feb      	subs	r3, r5, #7
 8002968:	8c20      	ldrh	r0, [r4, #32]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d85d      	bhi.n	8002a2a <rfalWorker+0x15a>
                gRFAL.nfcvData.nfcvOffset = 0;
 800296e:	2384      	movs	r3, #132	@ 0x84
 8002970:	2200      	movs	r2, #0
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	52e2      	strh	r2, [r4, r3]
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8002976:	3318      	adds	r3, #24
 8002978:	58e1      	ldr	r1, [r4, r3]
 800297a:	3201      	adds	r2, #1
 800297c:	3007      	adds	r0, #7
 800297e:	098b      	lsrs	r3, r1, #6
 8002980:	0016      	movs	r6, r2
 8002982:	438a      	bics	r2, r1
 8002984:	08c1      	lsrs	r1, r0, #3
 8002986:	4883      	ldr	r0, [pc, #524]	@ (8002b94 <rfalWorker+0x2c4>)
 8002988:	3d08      	subs	r5, #8
 800298a:	9005      	str	r0, [sp, #20]
 800298c:	2080      	movs	r0, #128	@ 0x80
 800298e:	0080      	lsls	r0, r0, #2
 8002990:	9004      	str	r0, [sp, #16]
 8002992:	4881      	ldr	r0, [pc, #516]	@ (8002b98 <rfalWorker+0x2c8>)
 8002994:	439e      	bics	r6, r3
 8002996:	9002      	str	r0, [sp, #8]
 8002998:	4880      	ldr	r0, [pc, #512]	@ (8002b9c <rfalWorker+0x2cc>)
 800299a:	0033      	movs	r3, r6
 800299c:	9001      	str	r0, [sp, #4]
 800299e:	4268      	negs	r0, r5
 80029a0:	4145      	adcs	r5, r0
 80029a2:	4e7f      	ldr	r6, [pc, #508]	@ (8002ba0 <rfalWorker+0x2d0>)
 80029a4:	9500      	str	r5, [sp, #0]
 80029a6:	9603      	str	r6, [sp, #12]
 80029a8:	69e0      	ldr	r0, [r4, #28]
 80029aa:	f005 fd19 	bl	80083e0 <rfalIso15693VCDCode>
                if( (ret != RFAL_ERR_NONE) && (ret != RFAL_ERR_AGAIN) )
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d00d      	beq.n	80029ce <rfalWorker+0xfe>
 80029b2:	280d      	cmp	r0, #13
 80029b4:	d00b      	beq.n	80029ce <rfalWorker+0xfe>
                    gRFAL.TxRx.status = ret;
 80029b6:	8360      	strh	r0, [r4, #26]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 80029b8:	2314      	movs	r3, #20
 80029ba:	7623      	strb	r3, [r4, #24]
                    break;
 80029bc:	e005      	b.n	80029ca <rfalWorker+0xfa>
                if( st25r3916IsGPTRunning() )
 80029be:	000a      	movs	r2, r1
 80029c0:	2024      	movs	r0, #36	@ 0x24
 80029c2:	f001 fdf5 	bl	80045b0 <st25r3916CheckReg>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d0c5      	beq.n	8002956 <rfalWorker+0x86>
}
 80029ca:	b00d      	add	sp, #52	@ 0x34
 80029cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                st25r3916SetNumTxBits( (uint16_t)rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 80029ce:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
 80029d0:	00c0      	lsls	r0, r0, #3
 80029d2:	b280      	uxth	r0, r0
 80029d4:	f001 fb28 	bl	8004028 <st25r3916SetNumTxBits>
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, gRFAL.fifo.bytesWritten );
 80029d8:	0030      	movs	r0, r6
 80029da:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 80029dc:	f001 fcc8 	bl	8004370 <st25r3916WriteFifo>
            rfalCheckEnableObsModeTx();
 80029e0:	7963      	ldrb	r3, [r4, #5]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <rfalWorker+0x120>
 80029e6:	2140      	movs	r1, #64	@ 0x40
 80029e8:	2001      	movs	r0, #1
 80029ea:	4319      	orrs	r1, r3
 80029ec:	f001 fd6f 	bl	80044ce <st25r3916WriteTestRegister>
            if( rfalIsModePassiveListen(gRFAL.mode) )
 80029f0:	7863      	ldrb	r3, [r4, #1]
 80029f2:	3b0a      	subs	r3, #10
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d805      	bhi.n	8002a04 <rfalWorker+0x134>
                if( !rfalIsExtFieldOn() )
 80029f8:	f7ff fcd0 	bl	800239c <rfalIsExtFieldOn>
                    gRFAL.TxRx.status = RFAL_ERR_LINK_LOSS;
 80029fc:	2325      	movs	r3, #37	@ 0x25
                if( !rfalIsExtFieldOn() )
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d100      	bne.n	8002a04 <rfalWorker+0x134>
 8002a02:	e0a7      	b.n	8002b54 <rfalWorker+0x284>
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 8002a04:	230f      	movs	r3, #15
 8002a06:	7623      	strb	r3, [r4, #24]
            if( gRFAL.callbacks.syncTxRx != NULL )
 8002a08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11d      	bne.n	8002a4a <rfalWorker+0x17a>
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 8002a0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITHOUT_CRC );
 8002a10:	20c5      	movs	r0, #197	@ 0xc5
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 8002a12:	07db      	lsls	r3, r3, #31
 8002a14:	d400      	bmi.n	8002a18 <rfalWorker+0x148>
                st25r3916ExecuteCommand( ST25R3916_CMD_TRANSMIT_WITH_CRC );
 8002a16:	20c4      	movs	r0, #196	@ 0xc4
 8002a18:	f001 fd29 	bl	800446e <st25r3916ExecuteCommand>
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8002a1c:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8002a1e:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 8002a20:	2312      	movs	r3, #18
 8002a22:	4291      	cmp	r1, r2
 8002a24:	d2c9      	bcs.n	80029ba <rfalWorker+0xea>
 8002a26:	3b02      	subs	r3, #2
 8002a28:	e7c7      	b.n	80029ba <rfalWorker+0xea>
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 8002a2a:	1dc3      	adds	r3, r0, #7
 8002a2c:	08db      	lsrs	r3, r3, #3
 8002a2e:	8763      	strh	r3, [r4, #58]	@ 0x3a
                st25r3916SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 8002a30:	f001 fafa 	bl	8004028 <st25r3916SetNumTxBits>
                gRFAL.fifo.bytesWritten = RFAL_MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 8002a34:	2280      	movs	r2, #128	@ 0x80
 8002a36:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
 8002a38:	0092      	lsls	r2, r2, #2
 8002a3a:	1c0b      	adds	r3, r1, #0
 8002a3c:	4291      	cmp	r1, r2
 8002a3e:	d900      	bls.n	8002a42 <rfalWorker+0x172>
 8002a40:	1c13      	adds	r3, r2, #0
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 8002a42:	69e0      	ldr	r0, [r4, #28]
                gRFAL.fifo.bytesWritten = RFAL_MIN( gRFAL.fifo.bytesTotal, ST25R3916_FIFO_DEPTH );
 8002a44:	b299      	uxth	r1, r3
 8002a46:	87a3      	strh	r3, [r4, #60]	@ 0x3c
                st25r3916WriteFifo( gRFAL.TxRx.ctx.txBuf, gRFAL.fifo.bytesWritten );
 8002a48:	e7c8      	b.n	80029dc <rfalWorker+0x10c>
                if( !gRFAL.callbacks.syncTxRx() )
 8002a4a:	4798      	blx	r3
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d1de      	bne.n	8002a0e <rfalWorker+0x13e>
 8002a50:	e7bb      	b.n	80029ca <rfalWorker+0xfa>
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 8002a52:	2048      	movs	r0, #72	@ 0x48
 8002a54:	f001 fe72 	bl	800473c <st25r3916GetInterrupt>
 8002a58:	9009      	str	r0, [sp, #36]	@ 0x24
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8002a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0b4      	beq.n	80029ca <rfalWorker+0xfa>
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_TXE) == 0U) )
 8002a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a62:	065b      	lsls	r3, r3, #25
 8002a64:	d575      	bpl.n	8002b52 <rfalWorker+0x282>
 8002a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a68:	071b      	lsls	r3, r3, #28
 8002a6a:	d472      	bmi.n	8002b52 <rfalWorker+0x282>
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 8002a6c:	2311      	movs	r3, #17
 8002a6e:	7623      	strb	r3, [r4, #24]
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8002a70:	7867      	ldrb	r7, [r4, #1]
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8002a72:	69e1      	ldr	r1, [r4, #28]
                maxLen = (uint16_t)RFAL_MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8002a74:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 8002a76:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8002a78:	8f25      	ldrh	r5, [r4, #56]	@ 0x38
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8002a7a:	9107      	str	r1, [sp, #28]
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8002a7c:	1ff9      	subs	r1, r7, #7
                maxLen = (uint16_t)RFAL_MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	ae0b      	add	r6, sp, #44	@ 0x2c
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 8002a82:	2901      	cmp	r1, #1
 8002a84:	d83d      	bhi.n	8002b02 <rfalWorker+0x232>
                maxLen = (uint16_t)RFAL_MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 8002a86:	429d      	cmp	r5, r3
 8002a88:	dd00      	ble.n	8002a8c <rfalWorker+0x1bc>
 8002a8a:	b29d      	uxth	r5, r3
                tmp    = 0;
 8002a8c:	2300      	movs	r3, #0
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8002a8e:	2201      	movs	r2, #1
                tmp    = 0;
 8002a90:	8033      	strh	r3, [r6, #0]
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8002a92:	2387      	movs	r3, #135	@ 0x87
 8002a94:	0010      	movs	r0, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	58e1      	ldr	r1, [r4, r3]
 8002a9a:	098b      	lsrs	r3, r1, #6
 8002a9c:	4398      	bics	r0, r3
 8002a9e:	0003      	movs	r3, r0
                maxLen = (uint16_t)RFAL_MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 8002aa0:	2082      	movs	r0, #130	@ 0x82
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8002aa2:	438a      	bics	r2, r1
 8002aa4:	8c21      	ldrh	r1, [r4, #32]
                maxLen = (uint16_t)RFAL_MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 8002aa6:	0080      	lsls	r0, r0, #2
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8002aa8:	3107      	adds	r1, #7
 8002aaa:	9605      	str	r6, [sp, #20]
 8002aac:	08c9      	lsrs	r1, r1, #3
                maxLen = (uint16_t)RFAL_MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 8002aae:	1c2e      	adds	r6, r5, #0
 8002ab0:	4285      	cmp	r5, r0
 8002ab2:	d900      	bls.n	8002ab6 <rfalWorker+0x1e6>
 8002ab4:	1c06      	adds	r6, r0, #0
                ret = rfalIso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 8002ab6:	b2b6      	uxth	r6, r6
 8002ab8:	9604      	str	r6, [sp, #16]
 8002aba:	4e37      	ldr	r6, [pc, #220]	@ (8002b98 <rfalWorker+0x2c8>)
 8002abc:	3f08      	subs	r7, #8
 8002abe:	9602      	str	r6, [sp, #8]
 8002ac0:	4e36      	ldr	r6, [pc, #216]	@ (8002b9c <rfalWorker+0x2cc>)
 8002ac2:	4d37      	ldr	r5, [pc, #220]	@ (8002ba0 <rfalWorker+0x2d0>)
 8002ac4:	9601      	str	r6, [sp, #4]
 8002ac6:	427e      	negs	r6, r7
 8002ac8:	4177      	adcs	r7, r6
 8002aca:	9807      	ldr	r0, [sp, #28]
 8002acc:	9503      	str	r5, [sp, #12]
 8002ace:	9700      	str	r7, [sp, #0]
 8002ad0:	f005 fc86 	bl	80083e0 <rfalIso15693VCDCode>
                if( (ret != RFAL_ERR_NONE) && (ret != RFAL_ERR_AGAIN) )
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d002      	beq.n	8002ade <rfalWorker+0x20e>
 8002ad8:	280d      	cmp	r0, #13
 8002ada:	d000      	beq.n	8002ade <rfalWorker+0x20e>
 8002adc:	e76b      	b.n	80029b6 <rfalWorker+0xe6>
                st25r3916WriteFifo( gRFAL.nfcvData.codingBuffer, tmp );
 8002ade:	0028      	movs	r0, r5
 8002ae0:	ab0b      	add	r3, sp, #44	@ 0x2c
 8002ae2:	8819      	ldrh	r1, [r3, #0]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 8002ae4:	f001 fc44 	bl	8004370 <st25r3916WriteFifo>
            gRFAL.fifo.bytesWritten += tmp;
 8002ae8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002aea:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8002aec:	8812      	ldrh	r2, [r2, #0]
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8002aee:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
            gRFAL.fifo.bytesWritten += tmp;
 8002af0:	189b      	adds	r3, r3, r2
 8002af2:	b29b      	uxth	r3, r3
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8002af4:	2212      	movs	r2, #18
            gRFAL.fifo.bytesWritten += tmp;
 8002af6:	87a3      	strh	r3, [r4, #60]	@ 0x3c
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 8002af8:	4299      	cmp	r1, r3
 8002afa:	d900      	bls.n	8002afe <rfalWorker+0x22e>
 8002afc:	3a02      	subs	r2, #2
 8002afe:	7622      	strb	r2, [r4, #24]
            break;
 8002b00:	e763      	b.n	80029ca <rfalWorker+0xfa>
                tmp = RFAL_MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 8002b02:	429d      	cmp	r5, r3
 8002b04:	dd00      	ble.n	8002b08 <rfalWorker+0x238>
 8002b06:	001d      	movs	r5, r3
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 8002b08:	9b07      	ldr	r3, [sp, #28]
                tmp = RFAL_MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 8002b0a:	b2a9      	uxth	r1, r5
 8002b0c:	8031      	strh	r1, [r6, #0]
                st25r3916WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], tmp );
 8002b0e:	1898      	adds	r0, r3, r2
 8002b10:	e7e8      	b.n	8002ae4 <rfalWorker+0x214>
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_TXE) );
 8002b12:	2048      	movs	r0, #72	@ 0x48
 8002b14:	f001 fe12 	bl	800473c <st25r3916GetInterrupt>
 8002b18:	9009      	str	r0, [sp, #36]	@ 0x24
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8002b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d100      	bne.n	8002b22 <rfalWorker+0x252>
 8002b20:	e753      	b.n	80029ca <rfalWorker+0xfa>
            if( (irqs & ST25R3916_IRQ_MASK_TXE) != 0U )
 8002b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b24:	071b      	lsls	r3, r3, #28
 8002b26:	d510      	bpl.n	8002b4a <rfalWorker+0x27a>
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 8002b28:	2313      	movs	r3, #19
 8002b2a:	7623      	strb	r3, [r4, #24]
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 8002b2c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                rfalCheckDisableObsMode();
 8002b2e:	79a3      	ldrb	r3, [r4, #6]
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 8002b30:	2a00      	cmp	r2, #0
 8002b32:	d111      	bne.n	8002b58 <rfalWorker+0x288>
            rfalCheckDisableObsMode();
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <rfalWorker+0x270>
 8002b38:	2140      	movs	r1, #64	@ 0x40
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f001 fcc7 	bl	80044ce <st25r3916WriteTestRegister>
            rfalCleanupTransceive();
 8002b40:	f7fe fe14 	bl	800176c <rfalCleanupTransceive>
            gRFAL.TxRx.status = RFAL_ERR_NONE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	8363      	strh	r3, [r4, #26]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 8002b48:	e737      	b.n	80029ba <rfalWorker+0xea>
            else if( (irqs & ST25R3916_IRQ_MASK_FWL) != 0U )
 8002b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b4c:	065b      	lsls	r3, r3, #25
 8002b4e:	d500      	bpl.n	8002b52 <rfalWorker+0x282>
 8002b50:	e73b      	b.n	80029ca <rfalWorker+0xfa>
                gRFAL.TxRx.status = RFAL_ERR_IO;
 8002b52:	2303      	movs	r3, #3
 8002b54:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 8002b56:	e72f      	b.n	80029b8 <rfalWorker+0xe8>
            rfalCheckEnableObsModeRx();
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <rfalWorker+0x296>
 8002b5c:	2140      	movs	r1, #64	@ 0x40
 8002b5e:	2001      	movs	r0, #1
 8002b60:	4319      	orrs	r1, r3
 8002b62:	f001 fcb4 	bl	80044ce <st25r3916WriteTestRegister>
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 8002b66:	2351      	movs	r3, #81	@ 0x51
 8002b68:	e727      	b.n	80029ba <rfalWorker+0xea>
            if( gRFAL.TxRx.status == RFAL_ERR_BUSY )
 8002b6a:	8b63      	ldrh	r3, [r4, #26]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d101      	bne.n	8002b74 <rfalWorker+0x2a4>
                gRFAL.TxRx.status = RFAL_ERR_SYSTEM;
 8002b70:	3306      	adds	r3, #6
 8002b72:	8363      	strh	r3, [r4, #26]
            rfalCheckDisableObsMode();
 8002b74:	79a3      	ldrb	r3, [r4, #6]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <rfalWorker+0x2b2>
 8002b7a:	2140      	movs	r1, #64	@ 0x40
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f001 fca6 	bl	80044ce <st25r3916WriteTestRegister>
            rfalCleanupTransceive();
 8002b82:	f7fe fdf3 	bl	800176c <rfalCleanupTransceive>
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e717      	b.n	80029ba <rfalWorker+0xea>
            gRFAL.TxRx.status = RFAL_ERR_SYSTEM;
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	e7e2      	b.n	8002b54 <rfalWorker+0x284>
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	20000904 	.word	0x20000904
 8002b94:	20000940 	.word	0x20000940
 8002b98:	20000d24 	.word	0x20000d24
 8002b9c:	2000093e 	.word	0x2000093e
 8002ba0:	20000b1c 	.word	0x20000b1c
        if( rfalIsTransceiveInRx() )
 8002ba4:	2850      	cmp	r0, #80	@ 0x50
 8002ba6:	d800      	bhi.n	8002baa <rfalWorker+0x2da>
 8002ba8:	e70f      	b.n	80029ca <rfalWorker+0xfa>
    irqs = ST25R3916_IRQ_MASK_NONE;
 8002baa:	930a      	str	r3, [sp, #40]	@ 0x28
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 8002bac:	7e63      	ldrb	r3, [r4, #25]
 8002bae:	4283      	cmp	r3, r0
 8002bb0:	d000      	beq.n	8002bb4 <rfalWorker+0x2e4>
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 8002bb2:	7660      	strb	r0, [r4, #25]
    switch( gRFAL.TxRx.state )
 8002bb4:	3851      	subs	r0, #81	@ 0x51
 8002bb6:	2809      	cmp	r0, #9
 8002bb8:	d900      	bls.n	8002bbc <rfalWorker+0x2ec>
 8002bba:	e1e8      	b.n	8002f8e <rfalWorker+0x6be>
 8002bbc:	f7fd faca 	bl	8000154 <__gnu_thumb1_case_uhi>
 8002bc0:	01b0000a 	.word	0x01b0000a
 8002bc4:	0049001d 	.word	0x0049001d
 8002bc8:	008c0168 	.word	0x008c0168
 8002bcc:	01cf00cd 	.word	0x01cf00cd
 8002bd0:	01a00166 	.word	0x01a00166
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 8002bd4:	2300      	movs	r3, #0
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 8002bd6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            gRFAL.fifo.bytesWritten   = 0;            /* Total bytes written on RxBuffer         */
 8002bd8:	87a3      	strh	r3, [r4, #60]	@ 0x3c
            gRFAL.fifo.bytesTotal     = 0;            /* Total bytes in FIFO will now be from Rx */
 8002bda:	8763      	strh	r3, [r4, #58]	@ 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d000      	beq.n	8002be2 <rfalWorker+0x312>
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 8002be0:	8013      	strh	r3, [r2, #0]
            rfalTimerStart( gRFAL.tmr.PPON2, 10U );
 8002be2:	200a      	movs	r0, #10
 8002be4:	f001 fe62 	bl	80048ac <timerCalculateTimer>
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 8002be8:	2204      	movs	r2, #4
 8002bea:	7863      	ldrb	r3, [r4, #1]
            rfalTimerStart( gRFAL.tmr.PPON2, 10U );
 8002bec:	64a0      	str	r0, [r4, #72]	@ 0x48
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 8002bee:	4393      	bics	r3, r2
 8002bf0:	3b09      	subs	r3, #9
 8002bf2:	1e5a      	subs	r2, r3, #1
 8002bf4:	4193      	sbcs	r3, r2
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8002bf6:	3352      	adds	r3, #82	@ 0x52
 8002bf8:	e6df      	b.n	80029ba <rfalWorker+0xea>
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_EOF) );
 8002bfa:	48ba      	ldr	r0, [pc, #744]	@ (8002ee4 <rfalWorker+0x614>)
 8002bfc:	f001 fd9e 	bl	800473c <st25r3916GetInterrupt>
 8002c00:	900a      	str	r0, [sp, #40]	@ 0x28
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8002c02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d100      	bne.n	8002c0a <rfalWorker+0x33a>
 8002c08:	e6df      	b.n	80029ca <rfalWorker+0xfa>
            if( ((irqs & ST25R3916_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 8002c0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c0c:	045b      	lsls	r3, r3, #17
 8002c0e:	d506      	bpl.n	8002c1e <rfalWorker+0x34e>
 8002c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c12:	069b      	lsls	r3, r3, #26
 8002c14:	d403      	bmi.n	8002c1e <rfalWorker+0x34e>
                gRFAL.TxRx.status = RFAL_ERR_TIMEOUT;
 8002c16:	2304      	movs	r3, #4
                 gRFAL.TxRx.status = RFAL_ERR_LINK_LOSS;
 8002c18:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 8002c1a:	235a      	movs	r3, #90	@ 0x5a
 8002c1c:	e6cd      	b.n	80029ba <rfalWorker+0xea>
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXS) == 0U) )
 8002c1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c20:	051b      	lsls	r3, r3, #20
 8002c22:	d509      	bpl.n	8002c38 <rfalWorker+0x368>
 8002c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c26:	069b      	lsls	r3, r3, #26
 8002c28:	d406      	bmi.n	8002c38 <rfalWorker+0x368>
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_ERR_TIMEOUT : RFAL_ERR_LINK_LOSS );
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	7862      	ldrb	r2, [r4, #1]
 8002c2e:	439a      	bics	r2, r3
 8002c30:	2a09      	cmp	r2, #9
 8002c32:	d0f1      	beq.n	8002c18 <rfalWorker+0x348>
 8002c34:	3321      	adds	r3, #33	@ 0x21
 8002c36:	e7ef      	b.n	8002c18 <rfalWorker+0x348>
            if( (irqs & ST25R3916_IRQ_MASK_RXS) != 0U )
 8002c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c3a:	069b      	lsls	r3, r3, #26
 8002c3c:	d519      	bpl.n	8002c72 <rfalWorker+0x3a2>
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8002c3e:	2032      	movs	r0, #50	@ 0x32
 8002c40:	f001 fe34 	bl	80048ac <timerCalculateTimer>
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8002c44:	2354      	movs	r3, #84	@ 0x54
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 8002c46:	4aa8      	ldr	r2, [pc, #672]	@ (8002ee8 <rfalWorker+0x618>)
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8002c48:	7623      	strb	r3, [r4, #24]
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 8002c4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
                rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8002c4c:	6460      	str	r0, [r4, #68]	@ 0x44
            irqs &= ~(ST25R3916_IRQ_MASK_RXS | ST25R3916_IRQ_MASK_NRE);
 8002c4e:	4013      	ands	r3, r2
 8002c50:	930a      	str	r3, [sp, #40]	@ 0x28
            irqs |= st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_FWL | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_WU_F ) );
 8002c52:	48a6      	ldr	r0, [pc, #664]	@ (8002eec <rfalWorker+0x61c>)
 8002c54:	f001 fd72 	bl	800473c <st25r3916GetInterrupt>
 8002c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c5a:	4318      	orrs	r0, r3
 8002c5c:	900a      	str	r0, [sp, #40]	@ 0x28
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8002c5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d108      	bne.n	8002c76 <rfalWorker+0x3a6>
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 8002c64:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002c66:	f001 fe27 	bl	80048b8 <timerIsExpired>
                    gRFAL.TxRx.status = RFAL_ERR_FRAMING;
 8002c6a:	2309      	movs	r3, #9
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d1d3      	bne.n	8002c18 <rfalWorker+0x348>
 8002c70:	e6ab      	b.n	80029ca <rfalWorker+0xfa>
                gRFAL.TxRx.status = RFAL_ERR_IO;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e7d0      	b.n	8002c18 <rfalWorker+0x348>
            if( (irqs & ST25R3916_IRQ_MASK_RX_REST) != 0U )
 8002c76:	2502      	movs	r5, #2
 8002c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c7a:	422b      	tst	r3, r5
 8002c7c:	d019      	beq.n	8002cb2 <rfalWorker+0x3e2>
                if( st25r3916GetInterrupt( ST25R3916_IRQ_MASK_NRE ) != 0U )
 8002c7e:	2080      	movs	r0, #128	@ 0x80
 8002c80:	01c0      	lsls	r0, r0, #7
 8002c82:	f001 fd5b 	bl	800473c <st25r3916GetInterrupt>
 8002c86:	1e02      	subs	r2, r0, #0
 8002c88:	d1c5      	bne.n	8002c16 <rfalWorker+0x346>
                if( st25r3916CheckReg( ST25R3916_REG_NFCIP1_BIT_RATE, ST25R3916_REG_NFCIP1_BIT_RATE_nrt_on, 0 ) )   /* MISRA 13.5 */
 8002c8a:	0029      	movs	r1, r5
 8002c8c:	2024      	movs	r0, #36	@ 0x24
 8002c8e:	f001 fc8f 	bl	80045b0 <st25r3916CheckReg>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d1bf      	bne.n	8002c16 <rfalWorker+0x346>
                st25r3916GetInterrupt( ST25R3916_IRQ_MASK_RXS );
 8002c96:	3020      	adds	r0, #32
 8002c98:	f001 fd50 	bl	800473c <st25r3916GetInterrupt>
                if( st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_rx_act, ST25R3916_REG_AUX_DISPLAY_rx_act) )
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	2031      	movs	r0, #49	@ 0x31
 8002ca0:	0011      	movs	r1, r2
 8002ca2:	f001 fc85 	bl	80045b0 <st25r3916CheckReg>
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	d001      	beq.n	8002cae <rfalWorker+0x3de>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 8002caa:	2354      	movs	r3, #84	@ 0x54
 8002cac:	e685      	b.n	80029ba <rfalWorker+0xea>
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8002cae:	2353      	movs	r3, #83	@ 0x53
 8002cb0:	e683      	b.n	80029ba <rfalWorker+0xea>
            if( ((irqs & ST25R3916_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3916_IRQ_MASK_RXE) == 0U) )
 8002cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002cb4:	065b      	lsls	r3, r3, #25
 8002cb6:	d504      	bpl.n	8002cc2 <rfalWorker+0x3f2>
 8002cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002cba:	06db      	lsls	r3, r3, #27
 8002cbc:	d401      	bmi.n	8002cc2 <rfalWorker+0x3f2>
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 8002cbe:	2355      	movs	r3, #85	@ 0x55
 8002cc0:	e67b      	b.n	80029ba <rfalWorker+0xea>
            if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 8002cc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	d4f2      	bmi.n	8002cae <rfalWorker+0x3de>
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 8002cc8:	4889      	ldr	r0, [pc, #548]	@ (8002ef0 <rfalWorker+0x620>)
 8002cca:	f001 fd37 	bl	800473c <st25r3916GetInterrupt>
 8002cce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002cd0:	4318      	orrs	r0, r3
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 8002cd2:	2356      	movs	r3, #86	@ 0x56
            irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR1 | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_COL) );
 8002cd4:	900a      	str	r0, [sp, #40]	@ 0x28
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 8002cd6:	7623      	strb	r3, [r4, #24]
            if( (irqs & ST25R3916_IRQ_MASK_ERR1) != 0U )
 8002cd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002cda:	02db      	lsls	r3, r3, #11
 8002cdc:	d506      	bpl.n	8002cec <rfalWorker+0x41c>
                gRFAL.TxRx.status = RFAL_ERR_FRAMING;
 8002cde:	2309      	movs	r3, #9
 8002ce0:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8002ce2:	334e      	adds	r3, #78	@ 0x4e
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8002ce4:	7623      	strb	r3, [r4, #24]
                rfalErrorHandling();
 8002ce6:	f7fe fe2f 	bl	8001948 <rfalErrorHandling>
                break;
 8002cea:	e66e      	b.n	80029ca <rfalWorker+0xfa>
            else if( (rfalIsModePassivePoll( gRFAL.mode )) && ((irqs & ST25R3916_IRQ_MASK_ERR2) != 0U) && (gRFAL.mode != RFAL_MODE_POLL_B_CTS) )
 8002cec:	7863      	ldrb	r3, [r4, #1]
 8002cee:	001a      	movs	r2, r3
 8002cf0:	3a09      	subs	r2, #9
 8002cf2:	2a04      	cmp	r2, #4
 8002cf4:	d904      	bls.n	8002d00 <rfalWorker+0x430>
 8002cf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002cf8:	0292      	lsls	r2, r2, #10
 8002cfa:	d501      	bpl.n	8002d00 <rfalWorker+0x430>
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	d1ee      	bne.n	8002cde <rfalWorker+0x40e>
            else if( (irqs & ST25R3916_IRQ_MASK_PAR) != 0U )
 8002d00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002d02:	0252      	lsls	r2, r2, #9
 8002d04:	d503      	bpl.n	8002d0e <rfalWorker+0x43e>
                gRFAL.TxRx.status = RFAL_ERR_PAR;
 8002d06:	231b      	movs	r3, #27
 8002d08:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8002d0a:	333c      	adds	r3, #60	@ 0x3c
 8002d0c:	e7ea      	b.n	8002ce4 <rfalWorker+0x414>
            else if( (irqs & ST25R3916_IRQ_MASK_CRC) != 0U )
 8002d0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002d10:	0212      	lsls	r2, r2, #8
 8002d12:	d503      	bpl.n	8002d1c <rfalWorker+0x44c>
                gRFAL.TxRx.status = RFAL_ERR_CRC;
 8002d14:	2315      	movs	r3, #21
 8002d16:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8002d18:	3342      	adds	r3, #66	@ 0x42
 8002d1a:	e7e3      	b.n	8002ce4 <rfalWorker+0x414>
            else if( (irqs & ST25R3916_IRQ_MASK_COL) != 0U )
 8002d1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002d1e:	0752      	lsls	r2, r2, #29
 8002d20:	d503      	bpl.n	8002d2a <rfalWorker+0x45a>
                gRFAL.TxRx.status = RFAL_ERR_RF_COLLISION;
 8002d22:	231d      	movs	r3, #29
 8002d24:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 8002d26:	333a      	adds	r3, #58	@ 0x3a
 8002d28:	e7dc      	b.n	8002ce4 <rfalWorker+0x414>
            else if( rfalIsModePassiveListen( gRFAL.mode ) && ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) )
 8002d2a:	3b0a      	subs	r3, #10
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d804      	bhi.n	8002d3a <rfalWorker+0x46a>
 8002d30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002d32:	051b      	lsls	r3, r3, #20
 8002d34:	d501      	bpl.n	8002d3a <rfalWorker+0x46a>
                 gRFAL.TxRx.status = RFAL_ERR_LINK_LOSS;
 8002d36:	2325      	movs	r3, #37	@ 0x25
 8002d38:	e76e      	b.n	8002c18 <rfalWorker+0x348>
            else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 8002d3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002d3c:	06db      	lsls	r3, r3, #27
 8002d3e:	d598      	bpl.n	8002c72 <rfalWorker+0x3a2>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 8002d40:	0025      	movs	r5, r4
    rfalFIFOStatusUpdate();
 8002d42:	f7fe fde1 	bl	8001908 <rfalFIFOStatusUpdate>
                if( rfalFIFOStatusIsIncompleteByte() )
 8002d46:	230e      	movs	r3, #14
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 8002d48:	353f      	adds	r5, #63	@ 0x3f
                if( rfalFIFOStatusIsIncompleteByte() )
 8002d4a:	782a      	ldrb	r2, [r5, #0]
 8002d4c:	421a      	tst	r2, r3
 8002d4e:	d100      	bne.n	8002d52 <rfalWorker+0x482>
 8002d50:	e088      	b.n	8002e64 <rfalWorker+0x594>
                   gRFAL.TxRx.status = RFAL_ERR_INCOMPLETE_BYTE;
 8002d52:	331a      	adds	r3, #26
                   gRFAL.TxRx.status = RFAL_ERR_FRAMING;
 8002d54:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 8002d56:	2357      	movs	r3, #87	@ 0x57
 8002d58:	7623      	strb	r3, [r4, #24]
            tmp = rfalFIFOStatusGetNumBytes();
 8002d5a:	f7fe fde5 	bl	8001928 <rfalFIFOStatusGetNumBytes>
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 8002d5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            tmp = rfalFIFOStatusGetNumBytes();
 8002d60:	0001      	movs	r1, r0
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 8002d62:	079b      	lsls	r3, r3, #30
 8002d64:	d409      	bmi.n	8002d7a <rfalWorker+0x4aa>
                if( (uint16_t)(gRFAL.fifo.bytesTotal + tmp) > 0U )
 8002d66:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 8002d68:	18c2      	adds	r2, r0, r3
 8002d6a:	b292      	uxth	r2, r2
 8002d6c:	2a00      	cmp	r2, #0
 8002d6e:	d004      	beq.n	8002d7a <rfalWorker+0x4aa>
                    if( ( tmp > RFAL_CRC_LEN) )  
 8002d70:	2802      	cmp	r0, #2
 8002d72:	d800      	bhi.n	8002d76 <rfalWorker+0x4a6>
 8002d74:	e07e      	b.n	8002e74 <rfalWorker+0x5a4>
                        tmp -= RFAL_CRC_LEN;
 8002d76:	3902      	subs	r1, #2
 8002d78:	b289      	uxth	r1, r1
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8002d7a:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8002d7c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8002d7e:	188a      	adds	r2, r1, r2
 8002d80:	b292      	uxth	r2, r2
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8002d82:	3307      	adds	r3, #7
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 8002d84:	8fa5      	ldrh	r5, [r4, #60]	@ 0x3c
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 8002d86:	8762      	strh	r2, [r4, #58]	@ 0x3a
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 8002d88:	08db      	lsrs	r3, r3, #3
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d906      	bls.n	8002d9c <rfalWorker+0x4cc>
                tmp = (uint16_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 8002d8e:	1b5b      	subs	r3, r3, r5
 8002d90:	b299      	uxth	r1, r3
                if( gRFAL.TxRx.status == RFAL_ERR_BUSY )
 8002d92:	8b63      	ldrh	r3, [r4, #26]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d101      	bne.n	8002d9c <rfalWorker+0x4cc>
                    gRFAL.TxRx.status = RFAL_ERR_NOMEM;
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	8363      	strh	r3, [r4, #26]
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 8002d9c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002d9e:	1940      	adds	r0, r0, r5
 8002da0:	f001 fb02 	bl	80043a8 <st25r3916ReadFifo>
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 8002da4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002da6:	2a00      	cmp	r2, #0
 8002da8:	d015      	beq.n	8002dd6 <rfalWorker+0x506>
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 8002daa:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 8002dac:	0025      	movs	r5, r4
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	8013      	strh	r3, [r2, #0]
    rfalFIFOStatusUpdate();
 8002db2:	f7fe fda9 	bl	8001908 <rfalFIFOStatusUpdate>
                if( rfalFIFOStatusIsIncompleteByte() )
 8002db6:	230e      	movs	r3, #14
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) != 0U);
 8002db8:	353f      	adds	r5, #63	@ 0x3f
                if( rfalFIFOStatusIsIncompleteByte() )
 8002dba:	782a      	ldrb	r2, [r5, #0]
 8002dbc:	421a      	tst	r2, r3
 8002dbe:	d00a      	beq.n	8002dd6 <rfalWorker+0x506>
    rfalFIFOStatusUpdate();
 8002dc0:	f7fe fda2 	bl	8001908 <rfalFIFOStatusUpdate>
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 8002dc4:	2208      	movs	r2, #8
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 8002dc6:	782b      	ldrb	r3, [r5, #0]
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 8002dc8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_fifo_lb_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_lb_shift);
 8002dca:	071b      	lsls	r3, r3, #28
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 8002dcc:	0f5b      	lsrs	r3, r3, #29
 8002dce:	1ad2      	subs	r2, r2, r3
 8002dd0:	880b      	ldrh	r3, [r1, #0]
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	800b      	strh	r3, [r1, #0]
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == RFAL_ERR_BUSY) )
 8002dd6:	7862      	ldrb	r2, [r4, #1]
 8002dd8:	1fd3      	subs	r3, r2, #7
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d83b      	bhi.n	8002e56 <rfalWorker+0x586>
 8002dde:	8b65      	ldrh	r5, [r4, #26]
 8002de0:	2d02      	cmp	r5, #2
 8002de2:	d138      	bne.n	8002e56 <rfalWorker+0x586>
                uint16_t offset = 0; /* REMARK offset not currently used */
 8002de4:	2300      	movs	r3, #0
 8002de6:	a80b      	add	r0, sp, #44	@ 0x2c
 8002de8:	8003      	strh	r3, [r0, #0]
                ret = rfalIso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8002dea:	3a08      	subs	r2, #8
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 8002dec:	2386      	movs	r3, #134	@ 0x86
                ret = rfalIso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8002dee:	4256      	negs	r6, r2
 8002df0:	4172      	adcs	r2, r6
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	5ae3      	ldrh	r3, [r4, r3]
                ret = rfalIso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8002df6:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
 8002df8:	9203      	str	r2, [sp, #12]
 8002dfa:	2288      	movs	r2, #136	@ 0x88
 8002dfc:	00d2      	lsls	r2, r2, #3
 8002dfe:	5aa2      	ldrh	r2, [r4, r2]
 8002e00:	4e3c      	ldr	r6, [pc, #240]	@ (8002ef4 <rfalWorker+0x624>)
 8002e02:	9202      	str	r2, [sp, #8]
 8002e04:	59a2      	ldr	r2, [r4, r6]
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode));
 8002e06:	3307      	adds	r3, #7
                ret = rfalIso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 8002e08:	9201      	str	r2, [sp, #4]
 8002e0a:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef8 <rfalWorker+0x628>)
 8002e0c:	9000      	str	r0, [sp, #0]
 8002e0e:	58a2      	ldr	r2, [r4, r2]
 8002e10:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002e12:	08db      	lsrs	r3, r3, #3
 8002e14:	f005 fbc4 	bl	80085a0 <rfalIso15693VICCDecode>
                if( ((RFAL_ERR_NONE == ret) || (RFAL_ERR_CRC == ret))
 8002e18:	2800      	cmp	r0, #0
 8002e1a:	d001      	beq.n	8002e20 <rfalWorker+0x550>
 8002e1c:	2815      	cmp	r0, #21
 8002e1e:	d10c      	bne.n	8002e3a <rfalWorker+0x56a>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 8002e20:	2387      	movs	r3, #135	@ 0x87
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	58e3      	ldr	r3, [r4, r3]
 8002e26:	079b      	lsls	r3, r3, #30
 8002e28:	d407      	bmi.n	8002e3a <rfalWorker+0x56a>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 8002e2a:	59a2      	ldr	r2, [r4, r6]
 8002e2c:	8813      	ldrh	r3, [r2, #0]
 8002e2e:	0759      	lsls	r1, r3, #29
 8002e30:	d103      	bne.n	8002e3a <rfalWorker+0x56a>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 8002e32:	2b0f      	cmp	r3, #15
 8002e34:	d901      	bls.n	8002e3a <rfalWorker+0x56a>
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 8002e36:	3b10      	subs	r3, #16
 8002e38:	8013      	strh	r3, [r2, #0]
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 8002e3a:	0023      	movs	r3, r4
 8002e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002efc <rfalWorker+0x62c>)
 8002e3e:	331c      	adds	r3, #28
 8002e40:	18a2      	adds	r2, r4, r2
 8002e42:	cac2      	ldmia	r2!, {r1, r6, r7}
 8002e44:	c3c2      	stmia	r3!, {r1, r6, r7}
 8002e46:	cac2      	ldmia	r2!, {r1, r6, r7}
 8002e48:	c3c2      	stmia	r3!, {r1, r6, r7}
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	601a      	str	r2, [r3, #0]
                gRFAL.TxRx.status = ((ret != RFAL_ERR_NONE) ? ret : RFAL_ERR_BUSY);
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d000      	beq.n	8002e54 <rfalWorker+0x584>
 8002e52:	0005      	movs	r5, r0
 8002e54:	8365      	strh	r5, [r4, #26]
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 8002e56:	2204      	movs	r2, #4
 8002e58:	7863      	ldrb	r3, [r4, #1]
 8002e5a:	4393      	bics	r3, r2
 8002e5c:	2b09      	cmp	r3, #9
 8002e5e:	d10f      	bne.n	8002e80 <rfalWorker+0x5b0>
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 8002e60:	334f      	adds	r3, #79	@ 0x4f
 8002e62:	e5aa      	b.n	80029ba <rfalWorker+0xea>
    rfalFIFOStatusUpdate();
 8002e64:	f7fe fd50 	bl	8001908 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3916_REG_FIFO_STATUS2_np_lb) != 0U);
 8002e68:	782b      	ldrb	r3, [r5, #0]
                else if( rfalFIFOStatusIsMissingPar() )
 8002e6a:	07db      	lsls	r3, r3, #31
 8002e6c:	d400      	bmi.n	8002e70 <rfalWorker+0x5a0>
 8002e6e:	e772      	b.n	8002d56 <rfalWorker+0x486>
                   gRFAL.TxRx.status = RFAL_ERR_FRAMING;
 8002e70:	2309      	movs	r3, #9
 8002e72:	e76f      	b.n	8002d54 <rfalWorker+0x484>
                    else if(gRFAL.fifo.bytesTotal > RFAL_CRC_LEN)                       
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d800      	bhi.n	8002e7a <rfalWorker+0x5aa>
 8002e78:	e77f      	b.n	8002d7a <rfalWorker+0x4aa>
                        gRFAL.fifo.bytesTotal -= RFAL_CRC_LEN;
 8002e7a:	3b02      	subs	r3, #2
 8002e7c:	8763      	strh	r3, [r4, #58]	@ 0x3a
 8002e7e:	e77c      	b.n	8002d7a <rfalWorker+0x4aa>
            if( gRFAL.TxRx.status != RFAL_ERR_BUSY )
 8002e80:	8b63      	ldrh	r3, [r4, #26]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d000      	beq.n	8002e88 <rfalWorker+0x5b8>
 8002e86:	e6c8      	b.n	8002c1a <rfalWorker+0x34a>
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 8002e88:	2359      	movs	r3, #89	@ 0x59
 8002e8a:	7623      	strb	r3, [r4, #24]
            rfalCheckDisableObsMode();
 8002e8c:	79a3      	ldrb	r3, [r4, #6]
 8002e8e:	e651      	b.n	8002b34 <rfalWorker+0x264>
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 8002e90:	2032      	movs	r0, #50	@ 0x32
 8002e92:	f001 fd0b 	bl	80048ac <timerCalculateTimer>
 8002e96:	6460      	str	r0, [r4, #68]	@ 0x44
            tmp = rfalFIFOStatusGetNumBytes();
 8002e98:	f7fe fd46 	bl	8001928 <rfalFIFOStatusGetNumBytes>
            gRFAL.fifo.bytesTotal += tmp;
 8002e9c:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8002e9e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
            gRFAL.fifo.bytesTotal += tmp;
 8002ea0:	1882      	adds	r2, r0, r2
 8002ea2:	b292      	uxth	r2, r2
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8002ea4:	3307      	adds	r3, #7
            tmp = rfalFIFOStatusGetNumBytes();
 8002ea6:	0005      	movs	r5, r0
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8002ea8:	0006      	movs	r6, r0
            gRFAL.fifo.bytesTotal += tmp;
 8002eaa:	8762      	strh	r2, [r4, #58]	@ 0x3a
            aux = (( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d902      	bls.n	8002eb8 <rfalWorker+0x5e8>
 8002eb2:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	b29e      	uxth	r6, r3
            st25r3916ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 8002eb8:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8002eba:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002ebc:	0031      	movs	r1, r6
 8002ebe:	18c0      	adds	r0, r0, r3
 8002ec0:	f001 fa72 	bl	80043a8 <st25r3916ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 8002ec4:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8002ec6:	18f3      	adds	r3, r6, r3
 8002ec8:	87a3      	strh	r3, [r4, #60]	@ 0x3c
            if( aux < tmp )
 8002eca:	42b5      	cmp	r5, r6
 8002ecc:	d904      	bls.n	8002ed8 <rfalWorker+0x608>
                st25r3916ReadFifo( NULL, (tmp - aux) );
 8002ece:	1ba9      	subs	r1, r5, r6
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	b289      	uxth	r1, r1
 8002ed4:	f001 fa68 	bl	80043a8 <st25r3916ReadFifo>
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 8002ed8:	0023      	movs	r3, r4
 8002eda:	22ff      	movs	r2, #255	@ 0xff
 8002edc:	333f      	adds	r3, #63	@ 0x3f
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e6e3      	b.n	8002caa <rfalWorker+0x3da>
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	00004820 	.word	0x00004820
 8002ee8:	ffffbfdf 	.word	0xffffbfdf
 8002eec:	08000852 	.word	0x08000852
 8002ef0:	00f00004 	.word	0x00f00004
 8002ef4:	00000434 	.word	0x00000434
 8002ef8:	0000042c 	.word	0x0000042c
 8002efc:	00000424 	.word	0x00000424
            rfalCheckDisableObsMode();
 8002f00:	79a3      	ldrb	r3, [r4, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <rfalWorker+0x63e>
 8002f06:	2140      	movs	r1, #64	@ 0x40
 8002f08:	2001      	movs	r0, #1
 8002f0a:	f001 fae0 	bl	80044ce <st25r3916WriteTestRegister>
            rfalCleanupTransceive();
 8002f0e:	f7fe fc2d 	bl	800176c <rfalCleanupTransceive>
            if( gRFAL.TxRx.status == RFAL_ERR_BUSY )
 8002f12:	8b63      	ldrh	r3, [r4, #26]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d000      	beq.n	8002f1a <rfalWorker+0x64a>
 8002f18:	e635      	b.n	8002b86 <rfalWorker+0x2b6>
                gRFAL.TxRx.status = RFAL_ERR_SYSTEM;
 8002f1a:	3306      	adds	r3, #6
 8002f1c:	8363      	strh	r3, [r4, #26]
 8002f1e:	e632      	b.n	8002b86 <rfalWorker+0x2b6>
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EON | ST25R3916_IRQ_MASK_NRE | ST25R3916_IRQ_MASK_PPON2) );
 8002f20:	48b6      	ldr	r0, [pc, #728]	@ (80031fc <rfalWorker+0x92c>)
 8002f22:	f001 fc0b 	bl	800473c <st25r3916GetInterrupt>
 8002f26:	900a      	str	r0, [sp, #40]	@ 0x28
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8002f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <rfalWorker+0x66c>
                if( rfalTimerisExpired( gRFAL.tmr.PPON2 ) )
 8002f2e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002f30:	f001 fcc2 	bl	80048b8 <timerIsExpired>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d000      	beq.n	8002f3a <rfalWorker+0x66a>
 8002f38:	e6fd      	b.n	8002d36 <rfalWorker+0x466>
 8002f3a:	e546      	b.n	80029ca <rfalWorker+0xfa>
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 8002f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f3e:	04db      	lsls	r3, r3, #19
 8002f40:	d501      	bpl.n	8002f46 <rfalWorker+0x676>
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 8002f42:	2353      	movs	r3, #83	@ 0x53
 8002f44:	7623      	strb	r3, [r4, #24]
            if( (irqs & ST25R3916_IRQ_MASK_NRE) != 0U )
 8002f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f48:	045b      	lsls	r3, r3, #17
 8002f4a:	d503      	bpl.n	8002f54 <rfalWorker+0x684>
                gRFAL.TxRx.status = RFAL_ERR_TIMEOUT;
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	8363      	strh	r3, [r4, #26]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 8002f50:	3356      	adds	r3, #86	@ 0x56
 8002f52:	7623      	strb	r3, [r4, #24]
            if( (irqs & ST25R3916_IRQ_MASK_PPON2) != 0U )
 8002f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db00      	blt.n	8002f5c <rfalWorker+0x68c>
 8002f5a:	e536      	b.n	80029ca <rfalWorker+0xfa>
 8002f5c:	e6eb      	b.n	8002d36 <rfalWorker+0x466>
            irqs = st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_CAC) );
 8002f5e:	20c0      	movs	r0, #192	@ 0xc0
 8002f60:	00c0      	lsls	r0, r0, #3
 8002f62:	f001 fbeb 	bl	800473c <st25r3916GetInterrupt>
 8002f66:	900a      	str	r0, [sp, #40]	@ 0x28
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8002f68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d100      	bne.n	8002f70 <rfalWorker+0x6a0>
 8002f6e:	e52c      	b.n	80029ca <rfalWorker+0xfa>
            if( (irqs & ST25R3916_IRQ_MASK_CAT) != 0U )
 8002f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f72:	059b      	lsls	r3, r3, #22
 8002f74:	d505      	bpl.n	8002f82 <rfalWorker+0x6b2>
                gRFAL.TxRx.state = (( gRFAL.TxRx.status != RFAL_ERR_BUSY ) ? RFAL_TXRX_STATE_RX_FAIL : RFAL_TXRX_STATE_RX_DONE);
 8002f76:	8b63      	ldrh	r3, [r4, #26]
 8002f78:	3b02      	subs	r3, #2
 8002f7a:	1e5a      	subs	r2, r3, #1
 8002f7c:	4193      	sbcs	r3, r2
 8002f7e:	3359      	adds	r3, #89	@ 0x59
 8002f80:	e51b      	b.n	80029ba <rfalWorker+0xea>
            else if( (irqs & ST25R3916_IRQ_MASK_CAC) != 0U )
 8002f82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f84:	055b      	lsls	r3, r3, #21
 8002f86:	d400      	bmi.n	8002f8a <rfalWorker+0x6ba>
 8002f88:	e673      	b.n	8002c72 <rfalWorker+0x3a2>
               gRFAL.TxRx.status = RFAL_ERR_RF_COLLISION;
 8002f8a:	231d      	movs	r3, #29
 8002f8c:	e644      	b.n	8002c18 <rfalWorker+0x348>
            gRFAL.TxRx.status = RFAL_ERR_SYSTEM;
 8002f8e:	2308      	movs	r3, #8
 8002f90:	8363      	strh	r3, [r4, #26]
 8002f92:	e630      	b.n	8002bf6 <rfalWorker+0x326>
    switch( gRFAL.Lm.state )
 8002f94:	0023      	movs	r3, r4
 8002f96:	335c      	adds	r3, #92	@ 0x5c
 8002f98:	7818      	ldrb	r0, [r3, #0]
 8002f9a:	3801      	subs	r0, #1
 8002f9c:	280f      	cmp	r0, #15
 8002f9e:	d900      	bls.n	8002fa2 <rfalWorker+0x6d2>
 8002fa0:	e513      	b.n	80029ca <rfalWorker+0xfa>
 8002fa2:	f7fd f8cd 	bl	8000140 <__gnu_thumb1_case_shi>
 8002fa6:	0010      	.short	0x0010
 8002fa8:	01160021 	.word	0x01160021
 8002fac:	00cdfd12 	.word	0x00cdfd12
 8002fb0:	fd120137 	.word	0xfd120137
 8002fb4:	fd12fd12 	.word	0xfd12fd12
 8002fb8:	fd12fd12 	.word	0xfd12fd12
 8002fbc:	01940194 	.word	0x01940194
 8002fc0:	013701ea 	.word	0x013701ea
 8002fc4:	0194      	.short	0x0194
            irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EON ) );
 8002fc6:	2580      	movs	r5, #128	@ 0x80
 8002fc8:	016d      	lsls	r5, r5, #5
 8002fca:	0028      	movs	r0, r5
 8002fcc:	f001 fbb6 	bl	800473c <st25r3916GetInterrupt>
 8002fd0:	900b      	str	r0, [sp, #44]	@ 0x2c
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8002fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d100      	bne.n	8002fda <rfalWorker+0x70a>
 8002fd8:	e4f7      	b.n	80029ca <rfalWorker+0xfa>
            if( (irqs & ST25R3916_IRQ_MASK_EON) != 0U )
 8002fda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002fdc:	422b      	tst	r3, r5
 8002fde:	d100      	bne.n	8002fe2 <rfalWorker+0x712>
 8002fe0:	e4f3      	b.n	80029ca <rfalWorker+0xfa>
                rfalListenSetState( RFAL_LM_STATE_IDLE );
 8002fe2:	2002      	movs	r0, #2
 8002fe4:	f7ff fa72 	bl	80024cc <rfalListenSetState>
            irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RXE_PTA ) );
 8002fe8:	4885      	ldr	r0, [pc, #532]	@ (8003200 <rfalWorker+0x930>)
 8002fea:	f001 fba7 	bl	800473c <st25r3916GetInterrupt>
 8002fee:	900b      	str	r0, [sp, #44]	@ 0x2c
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 8002ff0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d100      	bne.n	8002ff8 <rfalWorker+0x728>
 8002ff6:	e4e8      	b.n	80029ca <rfalWorker+0xfa>
            if( (irqs & ST25R3916_IRQ_MASK_NFCT) != 0U )
 8002ff8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002ffa:	05db      	lsls	r3, r3, #23
 8002ffc:	d513      	bpl.n	8003026 <rfalWorker+0x756>
                st25r3916ReadRegister( ST25R3916_REG_NFCIP1_BIT_RATE, &newBr );
 8002ffe:	2024      	movs	r0, #36	@ 0x24
 8003000:	a90a      	add	r1, sp, #40	@ 0x28
 8003002:	f001 f99e 	bl	8004342 <st25r3916ReadRegister>
                newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 8003006:	2220      	movs	r2, #32
 8003008:	ab02      	add	r3, sp, #8
 800300a:	189b      	adds	r3, r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	091b      	lsrs	r3, r3, #4
                if (newBr > ST25R3916_REG_BIT_RATE_rxrate_424)
 8003010:	1c1a      	adds	r2, r3, #0
 8003012:	2b02      	cmp	r3, #2
 8003014:	d900      	bls.n	8003018 <rfalWorker+0x748>
 8003016:	2202      	movs	r2, #2
                newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 8003018:	2120      	movs	r1, #32
 800301a:	ab02      	add	r3, sp, #8
 800301c:	185b      	adds	r3, r3, r1
 800301e:	701a      	strb	r2, [r3, #0]
                gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 8003020:	0023      	movs	r3, r4
 8003022:	336c      	adds	r3, #108	@ 0x6c
 8003024:	701a      	strb	r2, [r3, #0]
            if( ((irqs & ST25R3916_IRQ_MASK_EOF) != 0U) && (!gRFAL.Lm.dataFlag) )
 8003026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003028:	051b      	lsls	r3, r3, #20
 800302a:	d508      	bpl.n	800303e <rfalWorker+0x76e>
 800302c:	0023      	movs	r3, r4
 800302e:	337c      	adds	r3, #124	@ 0x7c
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <rfalWorker+0x76e>
                rfalListenSetState( RFAL_LM_STATE_POWER_OFF );
 8003036:	2001      	movs	r0, #1
                    rfalListenSetState( RFAL_LM_STATE_ACTIVE_Ax );
 8003038:	f7ff fa48 	bl	80024cc <rfalListenSetState>
            break;
 800303c:	e4c5      	b.n	80029ca <rfalWorker+0xfa>
            else if( ((irqs & ST25R3916_IRQ_MASK_WU_F) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 800303e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	d506      	bpl.n	8003052 <rfalWorker+0x782>
 8003044:	0023      	movs	r3, r4
 8003046:	336c      	adds	r3, #108	@ 0x6c
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2bff      	cmp	r3, #255	@ 0xff
 800304c:	d001      	beq.n	8003052 <rfalWorker+0x782>
                rfalListenSetState( RFAL_LM_STATE_READY_F );
 800304e:	2005      	movs	r0, #5
 8003050:	e7f2      	b.n	8003038 <rfalWorker+0x768>
            else if( ((irqs & ST25R3916_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8003052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003054:	06db      	lsls	r3, r3, #27
 8003056:	d55a      	bpl.n	800310e <rfalWorker+0x83e>
 8003058:	0023      	movs	r3, r4
 800305a:	336c      	adds	r3, #108	@ 0x6c
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2bff      	cmp	r3, #255	@ 0xff
 8003060:	d055      	beq.n	800310e <rfalWorker+0x83e>
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1 ) );
 8003062:	4868      	ldr	r0, [pc, #416]	@ (8003204 <rfalWorker+0x934>)
 8003064:	f001 fb6a 	bl	800473c <st25r3916GetInterrupt>
 8003068:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U))
 800306a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	d405      	bmi.n	800307c <rfalWorker+0x7ac>
 8003070:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003072:	025b      	lsls	r3, r3, #9
 8003074:	d402      	bmi.n	800307c <rfalWorker+0x7ac>
 8003076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003078:	02db      	lsls	r3, r3, #11
 800307a:	d50a      	bpl.n	8003092 <rfalWorker+0x7c2>
                    st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800307c:	20db      	movs	r0, #219	@ 0xdb
 800307e:	f001 f9f6 	bl	800446e <st25r3916ExecuteCommand>
                    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8003082:	20d1      	movs	r0, #209	@ 0xd1
 8003084:	f001 f9f3 	bl	800446e <st25r3916ExecuteCommand>
                    st25r3916TxOff();
 8003088:	2108      	movs	r1, #8
 800308a:	2002      	movs	r0, #2
 800308c:	f001 fa3b 	bl	8004506 <st25r3916ClrRegisterBits>
                    break; /* A bad reception occurred, remain in same state */
 8003090:	e49b      	b.n	80029ca <rfalWorker+0xfa>
                if( (gRFAL.Lm.mdMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )
 8003092:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003094:	049b      	lsls	r3, r3, #18
 8003096:	d503      	bpl.n	80030a0 <rfalWorker+0x7d0>
                    st25r3916WriteRegister( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ_targ | ST25R3916_REG_MODE_om_targ_nfcip | ST25R3916_REG_MODE_nfc_ar_eof) );
 8003098:	21ba      	movs	r1, #186	@ 0xba
 800309a:	2003      	movs	r0, #3
 800309c:	f001 f95e 	bl	800435c <st25r3916WriteRegister>
                *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 80030a0:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 80030a2:	f000 ffcc 	bl	800403e <st25r3916GetNumFIFOBytes>
                st25r3916ReadFifo( gRFAL.Lm.rxBuf, RFAL_MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 80030a6:	0023      	movs	r3, r4
                *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 80030a8:	8028      	strh	r0, [r5, #0]
                st25r3916ReadFifo( gRFAL.Lm.rxBuf, RFAL_MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 80030aa:	3374      	adds	r3, #116	@ 0x74
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80030b0:	3307      	adds	r3, #7
 80030b2:	8812      	ldrh	r2, [r2, #0]
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	1c19      	adds	r1, r3, #0
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d900      	bls.n	80030be <rfalWorker+0x7ee>
 80030bc:	1c11      	adds	r1, r2, #0
 80030be:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80030c0:	b289      	uxth	r1, r1
 80030c2:	f001 f971 	bl	80043a8 <st25r3916ReadFifo>
                if( (*gRFAL.Lm.rxLen > RFAL_CRC_LEN) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 80030c6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80030c8:	881a      	ldrh	r2, [r3, #0]
 80030ca:	2a02      	cmp	r2, #2
 80030cc:	d90a      	bls.n	80030e4 <rfalWorker+0x814>
 80030ce:	0023      	movs	r3, r4
 80030d0:	336c      	adds	r3, #108	@ 0x6c
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <rfalWorker+0x814>
                    if( rfalCrcCalculateCcitt( RFAL_ISO14443A_CRC_INTVAL, gRFAL.Lm.rxBuf, *gRFAL.Lm.rxLen ) != 0U )
 80030d8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80030da:	484b      	ldr	r0, [pc, #300]	@ (8003208 <rfalWorker+0x938>)
 80030dc:	f005 f906 	bl	80082ec <rfalCrcCalculateCcitt>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d1cb      	bne.n	800307c <rfalWorker+0x7ac>
                *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 80030e4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80030e6:	8813      	ldrh	r3, [r2, #0]
 80030e8:	1c19      	adds	r1, r3, #0
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d900      	bls.n	80030f0 <rfalWorker+0x820>
 80030ee:	2102      	movs	r1, #2
 80030f0:	1a5b      	subs	r3, r3, r1
                *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	8013      	strh	r3, [r2, #0]
                gRFAL.Lm.dataFlag = true;
 80030f6:	0023      	movs	r3, r4
 80030f8:	2001      	movs	r0, #1
 80030fa:	337c      	adds	r3, #124	@ 0x7c
 80030fc:	7018      	strb	r0, [r3, #0]
                rfalCheckDisableObsMode();
 80030fe:	79a3      	ldrb	r3, [r4, #6]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d100      	bne.n	8003106 <rfalWorker+0x836>
 8003104:	e461      	b.n	80029ca <rfalWorker+0xfa>
 8003106:	2140      	movs	r1, #64	@ 0x40
 8003108:	f001 f9e1 	bl	80044ce <st25r3916WriteTestRegister>
 800310c:	e45d      	b.n	80029ca <rfalWorker+0xfa>
            else if( ((irqs & ST25R3916_IRQ_MASK_RXE_PTA) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 800310e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	d400      	bmi.n	8003116 <rfalWorker+0x846>
 8003114:	e459      	b.n	80029ca <rfalWorker+0xfa>
 8003116:	0023      	movs	r3, r4
 8003118:	336c      	adds	r3, #108	@ 0x6c
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d000      	beq.n	8003122 <rfalWorker+0x852>
 8003120:	e453      	b.n	80029ca <rfalWorker+0xfa>
                if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 8003122:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003124:	055b      	lsls	r3, r3, #21
 8003126:	d400      	bmi.n	800312a <rfalWorker+0x85a>
 8003128:	e44f      	b.n	80029ca <rfalWorker+0xfa>
                    st25r3916ReadRegister( ST25R3916_REG_PASSIVE_TARGET_STATUS, &tmp );
 800312a:	ac0a      	add	r4, sp, #40	@ 0x28
 800312c:	0021      	movs	r1, r4
 800312e:	2021      	movs	r0, #33	@ 0x21
 8003130:	f001 f907 	bl	8004342 <st25r3916ReadRegister>
                    if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_idle )
 8003134:	7823      	ldrb	r3, [r4, #0]
                        rfalListenSetState( RFAL_LM_STATE_READY_A );
 8003136:	2003      	movs	r0, #3
                    if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_idle )
 8003138:	2b01      	cmp	r3, #1
 800313a:	d800      	bhi.n	800313e <rfalWorker+0x86e>
 800313c:	e445      	b.n	80029ca <rfalWorker+0xfa>
 800313e:	e77b      	b.n	8003038 <rfalWorker+0x768>
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF) );
 8003140:	4832      	ldr	r0, [pc, #200]	@ (800320c <rfalWorker+0x93c>)
 8003142:	f001 fafb 	bl	800473c <st25r3916GetInterrupt>
 8003146:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 8003148:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <rfalWorker+0x882>
 800314e:	f7ff fc3c 	bl	80029ca <rfalWorker+0xfa>
                if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 8003152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003154:	051b      	lsls	r3, r3, #20
 8003156:	d500      	bpl.n	800315a <rfalWorker+0x88a>
 8003158:	e76d      	b.n	8003036 <rfalWorker+0x766>
                else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 800315a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800315c:	06db      	lsls	r3, r3, #27
 800315e:	d535      	bpl.n	80031cc <rfalWorker+0x8fc>
                    irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 8003160:	20b0      	movs	r0, #176	@ 0xb0
 8003162:	0400      	lsls	r0, r0, #16
 8003164:	f001 faea 	bl	800473c <st25r3916GetInterrupt>
 8003168:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800316a:	4318      	orrs	r0, r3
 800316c:	900b      	str	r0, [sp, #44]	@ 0x2c
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U) )
 800316e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	d402      	bmi.n	800317a <rfalWorker+0x8aa>
 8003174:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003176:	02db      	lsls	r3, r3, #11
 8003178:	d507      	bpl.n	800318a <rfalWorker+0x8ba>
                    st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800317a:	20db      	movs	r0, #219	@ 0xdb
 800317c:	f001 f977 	bl	800446e <st25r3916ExecuteCommand>
                    st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8003180:	20d1      	movs	r0, #209	@ 0xd1
 8003182:	f001 f974 	bl	800446e <st25r3916ExecuteCommand>
 8003186:	f7ff fc20 	bl	80029ca <rfalWorker+0xfa>
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 800318a:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 800318c:	f000 ff57 	bl	800403e <st25r3916GetNumFIFOBytes>
                    st25r3916ReadFifo( gRFAL.Lm.rxBuf, RFAL_MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 8003190:	0023      	movs	r3, r4
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 8003192:	8028      	strh	r0, [r5, #0]
                    st25r3916ReadFifo( gRFAL.Lm.rxBuf, RFAL_MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );
 8003194:	3374      	adds	r3, #116	@ 0x74
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800319a:	3307      	adds	r3, #7
 800319c:	8812      	ldrh	r2, [r2, #0]
 800319e:	08db      	lsrs	r3, r3, #3
 80031a0:	1c19      	adds	r1, r3, #0
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d900      	bls.n	80031a8 <rfalWorker+0x8d8>
 80031a6:	1c11      	adds	r1, r2, #0
 80031a8:	b289      	uxth	r1, r1
 80031aa:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80031ac:	f001 f8fc 	bl	80043a8 <st25r3916ReadFifo>
                    *gRFAL.Lm.rxLen  -= ((*gRFAL.Lm.rxLen > RFAL_CRC_LEN) ? RFAL_CRC_LEN : *gRFAL.Lm.rxLen);
 80031b0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80031b2:	8813      	ldrh	r3, [r2, #0]
 80031b4:	1c19      	adds	r1, r3, #0
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d900      	bls.n	80031bc <rfalWorker+0x8ec>
 80031ba:	2102      	movs	r1, #2
 80031bc:	1a5b      	subs	r3, r3, r1
                    *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	8013      	strh	r3, [r2, #0]
                    gRFAL.Lm.dataFlag = true;
 80031c2:	2301      	movs	r3, #1
 80031c4:	347c      	adds	r4, #124	@ 0x7c
 80031c6:	7023      	strb	r3, [r4, #0]
 80031c8:	f7ff fbff 	bl	80029ca <rfalWorker+0xfa>
                else if( (irqs & ST25R3916_IRQ_MASK_WU_F) != 0U )
 80031cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80031ce:	f7ff fbfc 	bl	80029ca <rfalWorker+0xfa>
                irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_A  ) );
 80031d2:	480f      	ldr	r0, [pc, #60]	@ (8003210 <rfalWorker+0x940>)
 80031d4:	f001 fab2 	bl	800473c <st25r3916GetInterrupt>
 80031d8:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 80031da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <rfalWorker+0x914>
 80031e0:	f7ff fbf3 	bl	80029ca <rfalWorker+0xfa>
                if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 80031e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80031e6:	051b      	lsls	r3, r3, #20
 80031e8:	d500      	bpl.n	80031ec <rfalWorker+0x91c>
 80031ea:	e724      	b.n	8003036 <rfalWorker+0x766>
                else if( (irqs & ST25R3916_IRQ_MASK_WU_A) != 0U )
 80031ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                    rfalListenSetState( RFAL_LM_STATE_ACTIVE_A );
 80031ee:	2006      	movs	r0, #6
                else if( (irqs & ST25R3916_IRQ_MASK_WU_A) != 0U )
 80031f0:	01db      	lsls	r3, r3, #7
 80031f2:	d401      	bmi.n	80031f8 <rfalWorker+0x928>
 80031f4:	f7ff fbe9 	bl	80029ca <rfalWorker+0xfa>
 80031f8:	e71e      	b.n	8003038 <rfalWorker+0x768>
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	80005000 	.word	0x80005000
 8003200:	18000910 	.word	0x18000910
 8003204:	08f00810 	.word	0x08f00810
 8003208:	00006363 	.word	0x00006363
 800320c:	08000810 	.word	0x08000810
 8003210:	01000800 	.word	0x01000800
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF) );
 8003214:	2081      	movs	r0, #129	@ 0x81
 8003216:	0100      	lsls	r0, r0, #4
 8003218:	f001 fa90 	bl	800473c <st25r3916GetInterrupt>
 800321c:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 800321e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <rfalWorker+0x958>
 8003224:	f7ff fbd1 	bl	80029ca <rfalWorker+0xfa>
                if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 8003228:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800322a:	051b      	lsls	r3, r3, #20
 800322c:	d500      	bpl.n	8003230 <rfalWorker+0x960>
 800322e:	e702      	b.n	8003036 <rfalWorker+0x766>
                else if( (irqs & ST25R3916_IRQ_MASK_RXE) != 0U )
 8003230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003232:	06db      	lsls	r3, r3, #27
 8003234:	d401      	bmi.n	800323a <rfalWorker+0x96a>
 8003236:	f7ff fbc8 	bl	80029ca <rfalWorker+0xfa>
                    irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 800323a:	20f0      	movs	r0, #240	@ 0xf0
 800323c:	0400      	lsls	r0, r0, #16
 800323e:	f001 fa7d 	bl	800473c <st25r3916GetInterrupt>
 8003242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 8003244:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
                    irqs |= st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_PAR | ST25R3916_IRQ_MASK_CRC | ST25R3916_IRQ_MASK_ERR2 | ST25R3916_IRQ_MASK_ERR1) );
 8003246:	4318      	orrs	r0, r3
 8003248:	900b      	str	r0, [sp, #44]	@ 0x2c
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 800324a:	f000 fef8 	bl	800403e <st25r3916GetNumFIFOBytes>
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U)    || 
 800324e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                    *gRFAL.Lm.rxLen = st25r3916GetNumFIFOBytes();
 8003250:	8028      	strh	r0, [r5, #0]
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U)    || 
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	d409      	bmi.n	800326a <rfalWorker+0x99a>
 8003256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003258:	02db      	lsls	r3, r3, #11
 800325a:	d406      	bmi.n	800326a <rfalWorker+0x99a>
                        ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || (*gRFAL.Lm.rxLen <= RFAL_CRC_LEN)  )
 800325c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                    if( ((irqs & ST25R3916_IRQ_MASK_CRC) != 0U) || ((irqs & ST25R3916_IRQ_MASK_ERR1) != 0U)    || 
 800325e:	025b      	lsls	r3, r3, #9
 8003260:	d403      	bmi.n	800326a <rfalWorker+0x99a>
                        ((irqs & ST25R3916_IRQ_MASK_PAR) != 0U) || (*gRFAL.Lm.rxLen <= RFAL_CRC_LEN)  )
 8003262:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8003264:	8813      	ldrh	r3, [r2, #0]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d81e      	bhi.n	80032a8 <rfalWorker+0x9d8>
                        *gRFAL.Lm.rxLen = 0;
 800326a:	2200      	movs	r2, #0
 800326c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
                        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 800326e:	20db      	movs	r0, #219	@ 0xdb
                        *gRFAL.Lm.rxLen = 0;
 8003270:	801a      	strh	r2, [r3, #0]
                        st25r3916ExecuteCommand( ST25R3916_CMD_CLEAR_FIFO );
 8003272:	f001 f8fc 	bl	800446e <st25r3916ExecuteCommand>
                        st25r3916ExecuteCommand( ST25R3916_CMD_UNMASK_RECEIVE_DATA );
 8003276:	20d1      	movs	r0, #209	@ 0xd1
 8003278:	f001 f8f9 	bl	800446e <st25r3916ExecuteCommand>
                        if( gRFAL.Lm.state == RFAL_LM_STATE_ACTIVE_Ax )
 800327c:	0023      	movs	r3, r4
 800327e:	335c      	adds	r3, #92	@ 0x5c
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b0f      	cmp	r3, #15
 8003284:	d10c      	bne.n	80032a0 <rfalWorker+0x9d0>
                            rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gRFAL.Lm.rxBuf, gRFAL.Lm.rxBufLen, gRFAL.Lm.rxLen );
 8003286:	0023      	movs	r3, r4
 8003288:	3374      	adds	r3, #116	@ 0x74
 800328a:	881a      	ldrh	r2, [r3, #0]
 800328c:	200c      	movs	r0, #12
 800328e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8003290:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003292:	f7ff f8b9 	bl	8002408 <rfalListenSleepStart>
                        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_RXE );
 8003296:	2010      	movs	r0, #16
 8003298:	f001 fa89 	bl	80047ae <st25r3916DisableInterrupts>
                        break;
 800329c:	f7ff fb95 	bl	80029ca <rfalWorker+0xfa>
                            rfalListenSetState( RFAL_LM_STATE_IDLE );
 80032a0:	2002      	movs	r0, #2
 80032a2:	f7ff f913 	bl	80024cc <rfalListenSetState>
 80032a6:	e7f6      	b.n	8003296 <rfalWorker+0x9c6>
                    *gRFAL.Lm.rxLen -= RFAL_CRC_LEN;
 80032a8:	3b02      	subs	r3, #2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	8013      	strh	r3, [r2, #0]
                    st25r3916ReadFifo( gRFAL.Lm.rxBuf, RFAL_MIN( *gRFAL.Lm.rxLen, rfalConvBitsToBytes(gRFAL.Lm.rxBufLen) ) );                    
 80032ae:	0022      	movs	r2, r4
 80032b0:	3274      	adds	r2, #116	@ 0x74
 80032b2:	8812      	ldrh	r2, [r2, #0]
 80032b4:	3207      	adds	r2, #7
 80032b6:	08d2      	lsrs	r2, r2, #3
 80032b8:	1c11      	adds	r1, r2, #0
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d900      	bls.n	80032c0 <rfalWorker+0x9f0>
 80032be:	1c19      	adds	r1, r3, #0
 80032c0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80032c2:	b289      	uxth	r1, r1
 80032c4:	f001 f870 	bl	80043a8 <st25r3916ReadFifo>
                    *gRFAL.Lm.rxLen   = (uint16_t)rfalConvBytesToBits( *gRFAL.Lm.rxLen );
 80032c8:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80032ca:	8813      	ldrh	r3, [r2, #0]
 80032cc:	e777      	b.n	80031be <rfalWorker+0x8ee>
                irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_NFCT | ST25R3916_IRQ_MASK_WU_F | ST25R3916_IRQ_MASK_RXE | ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_RXE_PTA ) );
 80032ce:	48a9      	ldr	r0, [pc, #676]	@ (8003574 <rfalWorker+0xca4>)
 80032d0:	f001 fa34 	bl	800473c <st25r3916GetInterrupt>
 80032d4:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 80032d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <rfalWorker+0xa10>
 80032dc:	f7ff fb75 	bl	80029ca <rfalWorker+0xfa>
                if( (irqs & ST25R3916_IRQ_MASK_NFCT) != 0U )
 80032e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80032e2:	05db      	lsls	r3, r3, #23
 80032e4:	d513      	bpl.n	800330e <rfalWorker+0xa3e>
                    st25r3916ReadRegister( ST25R3916_REG_NFCIP1_BIT_RATE, &newBr );
 80032e6:	2024      	movs	r0, #36	@ 0x24
 80032e8:	a90a      	add	r1, sp, #40	@ 0x28
 80032ea:	f001 f82a 	bl	8004342 <st25r3916ReadRegister>
                    newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 80032ee:	2220      	movs	r2, #32
 80032f0:	ab02      	add	r3, sp, #8
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	091b      	lsrs	r3, r3, #4
                    if (newBr > ST25R3916_REG_BIT_RATE_rxrate_424)
 80032f8:	1c1a      	adds	r2, r3, #0
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d900      	bls.n	8003300 <rfalWorker+0xa30>
 80032fe:	2202      	movs	r2, #2
                    newBr >>= ST25R3916_REG_NFCIP1_BIT_RATE_nfc_rate_shift;
 8003300:	2120      	movs	r1, #32
 8003302:	ab02      	add	r3, sp, #8
 8003304:	185b      	adds	r3, r3, r1
 8003306:	701a      	strb	r2, [r3, #0]
                    gRFAL.Lm.brDetected = (rfalBitRate)(newBr); /* PRQA S 4342 # MISRA 10.5 - Guaranteed that no invalid enum values may be created. See also equalityGuard_RFAL_BR_106 ff.*/
 8003308:	0023      	movs	r3, r4
 800330a:	336c      	adds	r3, #108	@ 0x6c
 800330c:	701a      	strb	r2, [r3, #0]
                if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 800330e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003310:	051b      	lsls	r3, r3, #20
 8003312:	d500      	bpl.n	8003316 <rfalWorker+0xa46>
 8003314:	e68f      	b.n	8003036 <rfalWorker+0x766>
                else if( ((irqs & ST25R3916_IRQ_MASK_WU_F) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8003316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	d505      	bpl.n	8003328 <rfalWorker+0xa58>
 800331c:	0023      	movs	r3, r4
 800331e:	336c      	adds	r3, #108	@ 0x6c
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2bff      	cmp	r3, #255	@ 0xff
 8003324:	d000      	beq.n	8003328 <rfalWorker+0xa58>
 8003326:	e692      	b.n	800304e <rfalWorker+0x77e>
                else if( ((irqs & ST25R3916_IRQ_MASK_RXE) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8003328:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800332a:	06db      	lsls	r3, r3, #27
 800332c:	d508      	bpl.n	8003340 <rfalWorker+0xa70>
 800332e:	0023      	movs	r3, r4
 8003330:	336c      	adds	r3, #108	@ 0x6c
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2bff      	cmp	r3, #255	@ 0xff
 8003336:	d003      	beq.n	8003340 <rfalWorker+0xa70>
                    *gRFAL.Lm.rxLen = 0;
 8003338:	2200      	movs	r2, #0
 800333a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800333c:	801a      	strh	r2, [r3, #0]
 800333e:	e71c      	b.n	800317a <rfalWorker+0x8aa>
                else if( ((irqs & ST25R3916_IRQ_MASK_RXE_PTA) != 0U) && (gRFAL.Lm.brDetected != RFAL_BR_KEEP) )
 8003340:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	d401      	bmi.n	800334a <rfalWorker+0xa7a>
 8003346:	f7ff fb40 	bl	80029ca <rfalWorker+0xfa>
 800334a:	0023      	movs	r3, r4
 800334c:	336c      	adds	r3, #108	@ 0x6c
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <rfalWorker+0xa88>
 8003354:	f7ff fb39 	bl	80029ca <rfalWorker+0xfa>
                    if( ((gRFAL.Lm.mdMask & RFAL_LM_MASK_NFCA) != 0U) && (gRFAL.Lm.brDetected == RFAL_BR_106) )
 8003358:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800335a:	055b      	lsls	r3, r3, #21
 800335c:	d401      	bmi.n	8003362 <rfalWorker+0xa92>
 800335e:	f7ff fb34 	bl	80029ca <rfalWorker+0xfa>
                        st25r3916ReadRegister( ST25R3916_REG_PASSIVE_TARGET_STATUS, &tmp );
 8003362:	ac0a      	add	r4, sp, #40	@ 0x28
 8003364:	0021      	movs	r1, r4
 8003366:	2021      	movs	r0, #33	@ 0x21
 8003368:	f000 ffeb 	bl	8004342 <st25r3916ReadRegister>
                        if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_halt )
 800336c:	7823      	ldrb	r3, [r4, #0]
                            rfalListenSetState( RFAL_LM_STATE_READY_Ax );
 800336e:	200e      	movs	r0, #14
                        if( tmp > ST25R3916_REG_PASSIVE_TARGET_STATUS_pta_st_halt )
 8003370:	2b09      	cmp	r3, #9
 8003372:	d801      	bhi.n	8003378 <rfalWorker+0xaa8>
 8003374:	f7ff fb29 	bl	80029ca <rfalWorker+0xfa>
 8003378:	e65e      	b.n	8003038 <rfalWorker+0x768>
                irqs = st25r3916GetInterrupt( (  ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_WU_A_X  ) );
 800337a:	487f      	ldr	r0, [pc, #508]	@ (8003578 <rfalWorker+0xca8>)
 800337c:	f001 f9de 	bl	800473c <st25r3916GetInterrupt>
 8003380:	900b      	str	r0, [sp, #44]	@ 0x2c
                if( irqs == ST25R3916_IRQ_MASK_NONE )
 8003382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <rfalWorker+0xabc>
 8003388:	f7ff fb1f 	bl	80029ca <rfalWorker+0xfa>
                if( (irqs & ST25R3916_IRQ_MASK_EOF) != 0U )
 800338c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800338e:	051b      	lsls	r3, r3, #20
 8003390:	d500      	bpl.n	8003394 <rfalWorker+0xac4>
 8003392:	e650      	b.n	8003036 <rfalWorker+0x766>
                else if( (irqs & ST25R3916_IRQ_MASK_WU_A_X) != 0U )
 8003394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003396:	019b      	lsls	r3, r3, #6
 8003398:	d401      	bmi.n	800339e <rfalWorker+0xace>
 800339a:	f7ff fb16 	bl	80029ca <rfalWorker+0xfa>
                    rfalListenSetState( RFAL_LM_STATE_ACTIVE_Ax );
 800339e:	200f      	movs	r0, #15
 80033a0:	e64a      	b.n	8003038 <rfalWorker+0x768>
    if( gRFAL.state != RFAL_STATE_WUM )
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 80033a2:	0025      	movs	r5, r4
 80033a4:	3580      	adds	r5, #128	@ 0x80
 80033a6:	782b      	ldrb	r3, [r5, #0]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d901      	bls.n	80033b2 <rfalWorker+0xae2>
 80033ae:	f7ff fb0c 	bl	80029ca <rfalWorker+0xfa>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3916GetInterrupt( ( ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP ) );
 80033b2:	20f0      	movs	r0, #240	@ 0xf0
 80033b4:	0300      	lsls	r0, r0, #12
 80033b6:	f001 f9c1 	bl	800473c <st25r3916GetInterrupt>
            if( irqs == ST25R3916_IRQ_MASK_NONE )
 80033ba:	2800      	cmp	r0, #0
 80033bc:	d101      	bne.n	80033c2 <rfalWorker+0xaf2>
 80033be:	f7ff fb04 	bl	80029ca <rfalWorker+0xfa>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3916_IRQ_MASK_WAM) != 0U)
 80033c2:	0343      	lsls	r3, r0, #13
 80033c4:	d505      	bpl.n	80033d2 <rfalWorker+0xb02>
            {
                gRFAL.wum.info.indAmp.irqWu = true;
 80033c6:	0023      	movs	r3, r4
 80033c8:	2201      	movs	r2, #1
 80033ca:	33a4      	adds	r3, #164	@ 0xa4
 80033cc:	701a      	strb	r2, [r3, #0]
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 80033ce:	2302      	movs	r3, #2
 80033d0:	702b      	strb	r3, [r5, #0]
            }
            
            if((irqs & ST25R3916_IRQ_MASK_WPH) != 0U)
 80033d2:	0383      	lsls	r3, r0, #14
 80033d4:	d507      	bpl.n	80033e6 <rfalWorker+0xb16>
            {
                gRFAL.wum.info.indPha.irqWu = true;
 80033d6:	0023      	movs	r3, r4
 80033d8:	2201      	movs	r2, #1
 80033da:	33a6      	adds	r3, #166	@ 0xa6
 80033dc:	701a      	strb	r2, [r3, #0]
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 80033de:	0023      	movs	r3, r4
 80033e0:	1892      	adds	r2, r2, r2
 80033e2:	3380      	adds	r3, #128	@ 0x80
 80033e4:	701a      	strb	r2, [r3, #0]
            }
            
        #ifdef ST25R3916
            if((irqs & ST25R3916_IRQ_MASK_WCAP) != 0U)
 80033e6:	03c3      	lsls	r3, r0, #15
 80033e8:	d507      	bpl.n	80033fa <rfalWorker+0xb2a>
            {
                gRFAL.wum.info.cap.irqWu = true;
 80033ea:	0023      	movs	r3, r4
 80033ec:	2201      	movs	r2, #1
 80033ee:	33a8      	adds	r3, #168	@ 0xa8
 80033f0:	701a      	strb	r2, [r3, #0]
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 80033f2:	0023      	movs	r3, r4
 80033f4:	1892      	adds	r2, r2, r2
 80033f6:	3380      	adds	r3, #128	@ 0x80
 80033f8:	701a      	strb	r2, [r3, #0]
            }
        #endif /* ST25R3916 */
            
            if((irqs & ST25R3916_IRQ_MASK_WT) != 0U)
 80033fa:	0300      	lsls	r0, r0, #12
 80033fc:	d401      	bmi.n	8003402 <rfalWorker+0xb32>
 80033fe:	f7ff fae4 	bl	80029ca <rfalWorker+0xfa>
            {
                gRFAL.wum.info.irqWut = true;
 8003402:	0023      	movs	r3, r4
 8003404:	2001      	movs	r0, #1
 8003406:	33a2      	adds	r3, #162	@ 0xa2
 8003408:	7018      	strb	r0, [r3, #0]
                
                /*******************************************************************************/
                if( gRFAL.wum.cfg.swTagDetect )
 800340a:	0023      	movs	r3, r4
 800340c:	3384      	adds	r3, #132	@ 0x84
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <rfalWorker+0xb48>
 8003414:	f7ff fad9 	bl	80029ca <rfalWorker+0xfa>
                {
                    woke = false;
                    
                    /* Enable Ready mode and wait the settle time if AAT is used */
                    if( st25r3916IsAATOn() )
 8003418:	2220      	movs	r2, #32
 800341a:	0011      	movs	r1, r2
 800341c:	f001 f8c8 	bl	80045b0 <st25r3916CheckReg>
 8003420:	1e02      	subs	r2, r0, #0
 8003422:	d100      	bne.n	8003426 <rfalWorker+0xb56>
 8003424:	e09c      	b.n	8003560 <rfalWorker+0xc90>
                    {
                        st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), ST25R3916_REG_OP_CONTROL_en );
 8003426:	2280      	movs	r2, #128	@ 0x80
 8003428:	2184      	movs	r1, #132	@ 0x84
 800342a:	2002      	movs	r0, #2
 800342c:	f001 f8a5 	bl	800457a <st25r3916ChangeRegisterBits>
                        platformDelay( RFAL_ST25R3916_AAT_SETTLE );
 8003430:	2005      	movs	r0, #5
 8003432:	f001 fb29 	bl	8004a88 <HAL_Delay>
                        st25r3916OscOn();
                    }
                    
                    
                    /*******************************************************************************/
                    if( gRFAL.wum.cfg.indAmp.enabled )
 8003436:	0023      	movs	r3, r4
 8003438:	3386      	adds	r3, #134	@ 0x86
 800343a:	781d      	ldrb	r5, [r3, #0]
 800343c:	2d00      	cmp	r5, #0
 800343e:	d041      	beq.n	80034c4 <rfalWorker+0xbf4>
                    {
                        /* Perform amplitude measurement */
                        st25r3916MeasureAmplitude( &reg );
 8003440:	ae0b      	add	r6, sp, #44	@ 0x2c
 8003442:	0030      	movs	r0, r6
 8003444:	f000 fd46 	bl	8003ed4 <st25r3916MeasureAmplitude>
                        
                        /* Update last measurement info */
                        gRFAL.wum.info.indAmp.lastMeas = reg;
 8003448:	0023      	movs	r3, r4
 800344a:	7831      	ldrb	r1, [r6, #0]
 800344c:	33a3      	adds	r3, #163	@ 0xa3
                        
                        /* Convert inputs to TD format */
                        value = rfalConvTDFormat( reg );
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indAmp.delta );
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indAmp.fracDelta );
 800344e:	0022      	movs	r2, r4
                        gRFAL.wum.info.indAmp.lastMeas = reg;
 8003450:	7019      	strb	r1, [r3, #0]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indAmp.delta );
 8003452:	0023      	movs	r3, r4
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indAmp.fracDelta );
 8003454:	2003      	movs	r0, #3
 8003456:	3288      	adds	r2, #136	@ 0x88
 8003458:	7812      	ldrb	r2, [r2, #0]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indAmp.delta );
 800345a:	3387      	adds	r3, #135	@ 0x87
 800345c:	781b      	ldrb	r3, [r3, #0]
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indAmp.fracDelta );
 800345e:	4002      	ands	r2, r0
 8003460:	0192      	lsls	r2, r2, #6
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indAmp.delta );
 8003462:	021b      	lsls	r3, r3, #8
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indAmp.fracDelta );
 8003464:	4313      	orrs	r3, r2
                        
                        /* Set first measurement as reference */
                        if( gRFAL.wum.cfg.indAmp.reference == 0U )
 8003466:	0022      	movs	r2, r4
 8003468:	328a      	adds	r2, #138	@ 0x8a
 800346a:	8810      	ldrh	r0, [r2, #0]
                        value = rfalConvTDFormat( reg );
 800346c:	0209      	lsls	r1, r1, #8
                        if( gRFAL.wum.cfg.indAmp.reference == 0U )
 800346e:	2800      	cmp	r0, #0
 8003470:	d100      	bne.n	8003474 <rfalWorker+0xba4>
                        {
                            gRFAL.wum.cfg.indAmp.reference = value;
 8003472:	8011      	strh	r1, [r2, #0]
                        }
                        
                        /* Check if device should be woken */
                        if( ( value >= (gRFAL.wum.cfg.indAmp.reference + delta) ) || 
 8003474:	0022      	movs	r2, r4
 8003476:	328a      	adds	r2, #138	@ 0x8a
 8003478:	8810      	ldrh	r0, [r2, #0]
 800347a:	18c2      	adds	r2, r0, r3
 800347c:	4291      	cmp	r1, r2
 800347e:	da02      	bge.n	8003486 <rfalWorker+0xbb6>
                            ( value <= (gRFAL.wum.cfg.indAmp.reference - delta) )   )
 8003480:	1ac3      	subs	r3, r0, r3
                        if( ( value >= (gRFAL.wum.cfg.indAmp.reference + delta) ) || 
 8003482:	4299      	cmp	r1, r3
 8003484:	dc73      	bgt.n	800356e <rfalWorker+0xc9e>
                        {
                            woke = true;
                            gRFAL.wum.info.indAmp.irqWu = true;
 8003486:	0023      	movs	r3, r4
 8003488:	2201      	movs	r2, #1
 800348a:	33a4      	adds	r3, #164	@ 0xa4
 800348c:	701a      	strb	r2, [r3, #0]
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800348e:	0023      	movs	r3, r4
 8003490:	1892      	adds	r2, r2, r2
 8003492:	3380      	adds	r3, #128	@ 0x80
 8003494:	701a      	strb	r2, [r3, #0]
                            /* continue wake-up as for HW */
                        }
                        
                        /* Update moving reference if enabled */
                        if( (gRFAL.wum.cfg.indAmp.autoAvg) && ((gRFAL.wum.cfg.indAmp.aaInclMeas) || (!woke)) )
 8003496:	0023      	movs	r3, r4
 8003498:	338c      	adds	r3, #140	@ 0x8c
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d011      	beq.n	80034c4 <rfalWorker+0xbf4>
 80034a0:	0023      	movs	r3, r4
 80034a2:	338d      	adds	r3, #141	@ 0x8d
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <rfalWorker+0xbde>
 80034aa:	2d00      	cmp	r5, #0
 80034ac:	d10a      	bne.n	80034c4 <rfalWorker+0xbf4>
                        {
                            gRFAL.wum.cfg.indAmp.reference = rfalWakeUpModeFilter( gRFAL.wum.cfg.indAmp.reference, value, (RFAL_WU_MIN_WEIGHT_VAL<<(uint8_t)gRFAL.wum.cfg.indAmp.aaWeight) );
 80034ae:	0023      	movs	r3, r4
 80034b0:	2204      	movs	r2, #4
 80034b2:	338e      	adds	r3, #142	@ 0x8e
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	409a      	lsls	r2, r3
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	f7fe fa05 	bl	80018c8 <rfalWakeUpModeFilter>
 80034be:	0023      	movs	r3, r4
 80034c0:	338a      	adds	r3, #138	@ 0x8a
 80034c2:	8018      	strh	r0, [r3, #0]
                        }
                    }
                    
                    /*******************************************************************************/
                    if( gRFAL.wum.cfg.indPha.enabled )
 80034c4:	0023      	movs	r3, r4
 80034c6:	3390      	adds	r3, #144	@ 0x90
 80034c8:	781e      	ldrb	r6, [r3, #0]
 80034ca:	2e00      	cmp	r6, #0
 80034cc:	d041      	beq.n	8003552 <rfalWorker+0xc82>
                    {
                        /* Perform Phase measurement */
                        st25r3916MeasurePhase( &reg );
 80034ce:	af0b      	add	r7, sp, #44	@ 0x2c
 80034d0:	0038      	movs	r0, r7
 80034d2:	f000 fd07 	bl	8003ee4 <st25r3916MeasurePhase>
                        
                        /* Update last measurement info */
                        gRFAL.wum.info.indPha.lastMeas = reg;
 80034d6:	0023      	movs	r3, r4
 80034d8:	7839      	ldrb	r1, [r7, #0]
 80034da:	33a5      	adds	r3, #165	@ 0xa5
                        
                        /* Convert inputs to TD format */
                        value = rfalConvTDFormat( reg );
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indPha.delta );
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indPha.fracDelta );
 80034dc:	0022      	movs	r2, r4
                        gRFAL.wum.info.indPha.lastMeas = reg;
 80034de:	7019      	strb	r1, [r3, #0]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indPha.delta );
 80034e0:	0023      	movs	r3, r4
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indPha.fracDelta );
 80034e2:	2003      	movs	r0, #3
 80034e4:	3292      	adds	r2, #146	@ 0x92
 80034e6:	7812      	ldrb	r2, [r2, #0]
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indPha.delta );
 80034e8:	3391      	adds	r3, #145	@ 0x91
 80034ea:	781b      	ldrb	r3, [r3, #0]
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indPha.fracDelta );
 80034ec:	4002      	ands	r2, r0
 80034ee:	0192      	lsls	r2, r2, #6
                        delta = rfalConvTDFormat( gRFAL.wum.cfg.indPha.delta );
 80034f0:	021b      	lsls	r3, r3, #8
                        delta |= rfalAddFracTDFormat( gRFAL.wum.cfg.indPha.fracDelta );
 80034f2:	4313      	orrs	r3, r2
                        
                        /* Set first measurement as reference */
                        if( gRFAL.wum.cfg.indPha.reference == 0U )
 80034f4:	0022      	movs	r2, r4
 80034f6:	3294      	adds	r2, #148	@ 0x94
 80034f8:	8810      	ldrh	r0, [r2, #0]
                        value = rfalConvTDFormat( reg );
 80034fa:	0209      	lsls	r1, r1, #8
                        if( gRFAL.wum.cfg.indPha.reference == 0U )
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d100      	bne.n	8003502 <rfalWorker+0xc32>
                        {
                            gRFAL.wum.cfg.indPha.reference = value;
 8003500:	8011      	strh	r1, [r2, #0]
                        }
                        
                        /* Check if device should be woken */
                        if( ( value >= (gRFAL.wum.cfg.indPha.reference + delta) ) || 
 8003502:	0022      	movs	r2, r4
 8003504:	3294      	adds	r2, #148	@ 0x94
 8003506:	8810      	ldrh	r0, [r2, #0]
 8003508:	18c2      	adds	r2, r0, r3
 800350a:	4291      	cmp	r1, r2
 800350c:	da02      	bge.n	8003514 <rfalWorker+0xc44>
                            ( value <= (gRFAL.wum.cfg.indPha.reference - delta) )   )
 800350e:	1ac3      	subs	r3, r0, r3
                        if( ( value >= (gRFAL.wum.cfg.indPha.reference + delta) ) || 
 8003510:	4299      	cmp	r1, r3
 8003512:	dc08      	bgt.n	8003526 <rfalWorker+0xc56>
                        {
                            woke = true;
                            gRFAL.wum.info.indPha.irqWu = true;
 8003514:	0023      	movs	r3, r4
 8003516:	2201      	movs	r2, #1
 8003518:	33a6      	adds	r3, #166	@ 0xa6
 800351a:	701a      	strb	r2, [r3, #0]
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800351c:	0023      	movs	r3, r4
                            woke = true;
 800351e:	0035      	movs	r5, r6
                            gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 8003520:	3380      	adds	r3, #128	@ 0x80
 8003522:	1892      	adds	r2, r2, r2
 8003524:	701a      	strb	r2, [r3, #0]
                            /* continue wake-up as for HW */
                        }
                        
                        /* Update moving reference if enabled */
                        if( (gRFAL.wum.cfg.indPha.autoAvg) && ((gRFAL.wum.cfg.indPha.aaInclMeas) || (!woke)) )
 8003526:	0023      	movs	r3, r4
 8003528:	3396      	adds	r3, #150	@ 0x96
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <rfalWorker+0xc82>
 8003530:	0023      	movs	r3, r4
 8003532:	3397      	adds	r3, #151	@ 0x97
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <rfalWorker+0xc6e>
 800353a:	2d00      	cmp	r5, #0
 800353c:	d109      	bne.n	8003552 <rfalWorker+0xc82>
                        {
                            gRFAL.wum.cfg.indPha.reference = rfalWakeUpModeFilter( gRFAL.wum.cfg.indPha.reference, value, (RFAL_WU_MIN_WEIGHT_VAL<<(uint8_t)gRFAL.wum.cfg.indPha.aaWeight) );
 800353e:	0023      	movs	r3, r4
 8003540:	2204      	movs	r2, #4
 8003542:	3398      	adds	r3, #152	@ 0x98
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	3494      	adds	r4, #148	@ 0x94
 8003548:	409a      	lsls	r2, r3
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f7fe f9bc 	bl	80018c8 <rfalWakeUpModeFilter>
 8003550:	8020      	strh	r0, [r4, #0]
                        }
                    }
                    
                    /* Re-Enable low power Wake-Up mode for wto to trigger another measurement(s) */
                    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_wu), (ST25R3916_REG_OP_CONTROL_wu) );
 8003552:	2204      	movs	r2, #4
 8003554:	2184      	movs	r1, #132	@ 0x84
 8003556:	2002      	movs	r0, #2
 8003558:	f001 f80f 	bl	800457a <st25r3916ChangeRegisterBits>
}
 800355c:	f7ff fa35 	bl	80029ca <rfalWorker+0xfa>
                        st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu, 0 );
 8003560:	2104      	movs	r1, #4
 8003562:	2002      	movs	r0, #2
 8003564:	f001 f809 	bl	800457a <st25r3916ChangeRegisterBits>
                        st25r3916OscOn();
 8003568:	f000 fc23 	bl	8003db2 <st25r3916OscOn>
 800356c:	e763      	b.n	8003436 <rfalWorker+0xb66>
                    woke = false;
 800356e:	2500      	movs	r5, #0
 8003570:	e791      	b.n	8003496 <rfalWorker+0xbc6>
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	18000910 	.word	0x18000910
 8003578:	02000800 	.word	0x02000800

0800357c <rfalTransceiveRunBlockingTx>:
{
 800357c:	b510      	push	{r4, lr}
        rfalWorker();
 800357e:	f7ff f9a7 	bl	80028d0 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 8003582:	f7fe fe1d 	bl	80021c0 <rfalGetTransceiveStatus>
 8003586:	0004      	movs	r4, r0
    while( (rfalIsTransceiveInTx()) && (ret == RFAL_ERR_BUSY) );
 8003588:	f7fe fe0e 	bl	80021a8 <rfalIsTransceiveInTx>
 800358c:	2800      	cmp	r0, #0
 800358e:	d001      	beq.n	8003594 <rfalTransceiveRunBlockingTx+0x18>
 8003590:	2c02      	cmp	r4, #2
 8003592:	d0f4      	beq.n	800357e <rfalTransceiveRunBlockingTx+0x2>
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 8003594:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <rfalTransceiveRunBlockingTx+0x28>)
    if( rfalIsTransceiveInRx() )
 8003596:	7e1b      	ldrb	r3, [r3, #24]
 8003598:	2b50      	cmp	r3, #80	@ 0x50
 800359a:	d900      	bls.n	800359e <rfalTransceiveRunBlockingTx+0x22>
        return RFAL_ERR_NONE;
 800359c:	2400      	movs	r4, #0
}
 800359e:	0020      	movs	r0, r4
 80035a0:	bd10      	pop	{r4, pc}
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	20000904 	.word	0x20000904

080035a8 <rfalTransceiveBlockingTx>:
{
 80035a8:	b500      	push	{lr}
 80035aa:	b089      	sub	sp, #36	@ 0x24
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 80035ac:	9001      	str	r0, [sp, #4]
 80035ae:	4668      	mov	r0, sp
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	8203      	strh	r3, [r0, #16]
 80035b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80035b6:	00c9      	lsls	r1, r1, #3
 80035b8:	9305      	str	r3, [sp, #20]
 80035ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80035bc:	8101      	strh	r1, [r0, #8]
 80035be:	9306      	str	r3, [sp, #24]
 80035c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    RFAL_EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 80035c2:	a801      	add	r0, sp, #4
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 80035c4:	9203      	str	r2, [sp, #12]
 80035c6:	9307      	str	r3, [sp, #28]
    RFAL_EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 80035c8:	f7fe fd14 	bl	8001ff4 <rfalStartTransceive>
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d101      	bne.n	80035d4 <rfalTransceiveBlockingTx+0x2c>
    return rfalTransceiveRunBlockingTx();
 80035d0:	f7ff ffd4 	bl	800357c <rfalTransceiveRunBlockingTx>
}
 80035d4:	b009      	add	sp, #36	@ 0x24
 80035d6:	bd00      	pop	{pc}

080035d8 <rfalStartFeliCaPoll>:
{
 80035d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 80035da:	4c1f      	ldr	r4, [pc, #124]	@ (8003658 <rfalStartFeliCaPoll+0x80>)
{
 80035dc:	b089      	sub	sp, #36	@ 0x24
 80035de:	001e      	movs	r6, r3
 80035e0:	ab0e      	add	r3, sp, #56	@ 0x38
 80035e2:	781f      	ldrb	r7, [r3, #0]
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 80035e4:	7823      	ldrb	r3, [r4, #0]
{
 80035e6:	0005      	movs	r5, r0
 80035e8:	9205      	str	r2, [sp, #20]
        return RFAL_ERR_WRONG_STATE;
 80035ea:	2021      	movs	r0, #33	@ 0x21
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d931      	bls.n	8003654 <rfalStartFeliCaPoll+0x7c>
 80035f0:	7863      	ldrb	r3, [r4, #1]
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d12e      	bne.n	8003654 <rfalStartFeliCaPoll+0x7c>
    gRFAL.nfcfData.colDetected = 0;
 80035f6:	0020      	movs	r0, r4
 80035f8:	2300      	movs	r3, #0
 80035fa:	30ca      	adds	r0, #202	@ 0xca
 80035fc:	7003      	strb	r3, [r0, #0]
    gRFAL.nfcfData.devDetected = 0;
 80035fe:	0020      	movs	r0, r4
 8003600:	30c9      	adds	r0, #201	@ 0xc9
 8003602:	7003      	strb	r3, [r0, #0]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 8003604:	0a0a      	lsrs	r2, r1, #8
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */   
 8003606:	a806      	add	r0, sp, #24
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 8003608:	7042      	strb	r2, [r0, #1]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 800360a:	9a05      	ldr	r2, [sp, #20]
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */   
 800360c:	7003      	strb	r3, [r0, #0]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 800360e:	70c2      	strb	r2, [r0, #3]
    gRFAL.nfcfData.curHandling = gRFAL.conf.eHandling;
 8003610:	0022      	movs	r2, r4
    frame[frameIdx++] = (uint8_t)slots;              /* TimeSlot (TSN)                      */
 8003612:	7105      	strb	r5, [r0, #4]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 8003614:	7081      	strb	r1, [r0, #2]
    gRFAL.nfcfData.curHandling = gRFAL.conf.eHandling;
 8003616:	79e1      	ldrb	r1, [r4, #7]
 8003618:	32d4      	adds	r2, #212	@ 0xd4
 800361a:	7011      	strb	r1, [r2, #0]
    gRFAL.conf.eHandling       = RFAL_ERRORHANDLING_EMD;
 800361c:	2201      	movs	r2, #1
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( frame, 
 800361e:	3503      	adds	r5, #3
    gRFAL.conf.eHandling       = RFAL_ERRORHANDLING_EMD;
 8003620:	71e2      	strb	r2, [r4, #7]
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( frame, 
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <rfalStartFeliCaPoll+0x84>)
 8003626:	03ad      	lsls	r5, r5, #14
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2105      	movs	r1, #5
 800362c:	2314      	movs	r3, #20
 800362e:	4a0c      	ldr	r2, [pc, #48]	@ (8003660 <rfalStartFeliCaPoll+0x88>)
 8003630:	9502      	str	r5, [sp, #8]
 8003632:	f7ff ffb9 	bl	80035a8 <rfalTransceiveBlockingTx>
 8003636:	2800      	cmp	r0, #0
 8003638:	d10c      	bne.n	8003654 <rfalStartFeliCaPoll+0x7c>
   gRFAL.nfcfData.pollResList        = pollResList;
 800363a:	0023      	movs	r3, r4
 800363c:	33c4      	adds	r3, #196	@ 0xc4
 800363e:	601e      	str	r6, [r3, #0]
   gRFAL.nfcfData.pollResListSize    = pollResListSize;
 8003640:	0023      	movs	r3, r4
 8003642:	33c8      	adds	r3, #200	@ 0xc8
 8003644:	701f      	strb	r7, [r3, #0]
   gRFAL.nfcfData.devicesDetected    = devicesDetected;
 8003646:	0023      	movs	r3, r4
 8003648:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800364a:	33cc      	adds	r3, #204	@ 0xcc
 800364c:	601a      	str	r2, [r3, #0]
   gRFAL.nfcfData.collisionsDetected = collisionsDetected;
 800364e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003650:	34d0      	adds	r4, #208	@ 0xd0
 8003652:	6023      	str	r3, [r4, #0]
}
 8003654:	b009      	add	sp, #36	@ 0x24
 8003656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003658:	20000904 	.word	0x20000904
 800365c:	200009c4 	.word	0x200009c4
 8003660:	200009d9 	.word	0x200009d9

08003664 <rfalISO14443AStartTransceiveAnticollisionFrame>:
{
 8003664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003666:	b08b      	sub	sp, #44	@ 0x2c
 8003668:	9300      	str	r3, [sp, #0]
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 800366a:	4b33      	ldr	r3, [pc, #204]	@ (8003738 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd4>)
{
 800366c:	0004      	movs	r4, r0
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	781b      	ldrb	r3, [r3, #0]
{
 8003672:	000d      	movs	r5, r1
 8003674:	0016      	movs	r6, r2
        return RFAL_ERR_WRONG_STATE;
 8003676:	2021      	movs	r0, #33	@ 0x21
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 8003678:	2b01      	cmp	r3, #1
 800367a:	d95b      	bls.n	8003734 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
 800367c:	9b01      	ldr	r3, [sp, #4]
 800367e:	785f      	ldrb	r7, [r3, #1]
 8003680:	2f01      	cmp	r7, #1
 8003682:	d157      	bne.n	8003734 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
        return RFAL_ERR_PARAM;
 8003684:	381a      	subs	r0, #26
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 8003686:	2c00      	cmp	r4, #0
 8003688:	d054      	beq.n	8003734 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
 800368a:	2900      	cmp	r1, #0
 800368c:	d052      	beq.n	8003734 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
 800368e:	2a00      	cmp	r2, #0
 8003690:	d050      	beq.n	8003734 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
 8003692:	9b00      	ldr	r3, [sp, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d04d      	beq.n	8003734 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 8003698:	2004      	movs	r0, #4
 800369a:	30ff      	adds	r0, #255	@ 0xff
 800369c:	f004 fdc0 	bl	8008220 <rfalSetAnalogConfig>
    st25r3916SetRegisterBits( ST25R3916_REG_ISO14443A_NFC, ST25R3916_REG_ISO14443A_NFC_antcl );
 80036a0:	0039      	movs	r1, r7
 80036a2:	2005      	movs	r0, #5
 80036a4:	f000 ff41 	bl	800452a <st25r3916SetRegisterBits>
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 80036a8:	782b      	ldrb	r3, [r5, #0]
 80036aa:	7832      	ldrb	r2, [r6, #0]
 80036ac:	00d9      	lsls	r1, r3, #3
    ctx.rxBuf     = &buf[*bytesToSend];
 80036ae:	18e3      	adds	r3, r4, r3
 80036b0:	9305      	str	r3, [sp, #20]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 80036b2:	2328      	movs	r3, #40	@ 0x28
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 80036b4:	1852      	adds	r2, r2, r1
 80036b6:	a902      	add	r1, sp, #8
 80036b8:	810a      	strh	r2, [r1, #8]
    ctx.flags    |= (st25r3916CheckReg( ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, ST25R3916_REG_AUX_dis_corr ) ? (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF : 0x00U );
 80036ba:	2204      	movs	r2, #4
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 80036bc:	820b      	strh	r3, [r1, #16]
    ctx.rxRcvdLen = rxLength;
 80036be:	9b00      	ldr	r3, [sp, #0]
    ctx.flags    |= (st25r3916CheckReg( ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, ST25R3916_REG_AUX_dis_corr ) ? (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF : 0x00U );
 80036c0:	0011      	movs	r1, r2
    ctx.rxRcvdLen = rxLength;
 80036c2:	9307      	str	r3, [sp, #28]
    ctx.fwt       = fwt;
 80036c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    ctx.flags    |= (st25r3916CheckReg( ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, ST25R3916_REG_AUX_dis_corr ) ? (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF : 0x00U );
 80036c6:	200a      	movs	r0, #10
    ctx.fwt       = fwt;
 80036c8:	9309      	str	r3, [sp, #36]	@ 0x24
    ctx.txBuf     = buf;
 80036ca:	9403      	str	r4, [sp, #12]
    ctx.flags    |= (st25r3916CheckReg( ST25R3916_REG_AUX, ST25R3916_REG_AUX_dis_corr, ST25R3916_REG_AUX_dis_corr ) ? (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF : 0x00U );
 80036cc:	f000 ff70 	bl	80045b0 <st25r3916CheckReg>
 80036d0:	00c3      	lsls	r3, r0, #3
 80036d2:	2083      	movs	r0, #131	@ 0x83
 80036d4:	4318      	orrs	r0, r3
 80036d6:	9008      	str	r0, [sp, #32]
    RFAL_EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 80036d8:	a803      	add	r0, sp, #12
 80036da:	f7fe fc8b 	bl	8001ff4 <rfalStartTransceive>
 80036de:	1e07      	subs	r7, r0, #0
 80036e0:	d128      	bne.n	8003734 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd0>
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_COL );
 80036e2:	2004      	movs	r0, #4
 80036e4:	f001 f82a 	bl	800473c <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_COL );
 80036e8:	2004      	movs	r0, #4
 80036ea:	f001 f853 	bl	8004794 <st25r3916EnableInterrupts>
    gRFAL.nfcaData.collByte = 0;
 80036ee:	9801      	ldr	r0, [sp, #4]
 80036f0:	30ac      	adds	r0, #172	@ 0xac
 80036f2:	7007      	strb	r7, [r0, #0]
    if ((*bitsToSend) > 0U)
 80036f4:	7832      	ldrb	r2, [r6, #0]
 80036f6:	2a00      	cmp	r2, #0
 80036f8:	d00e      	beq.n	8003718 <rfalISO14443AStartTransceiveAnticollisionFrame+0xb4>
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 80036fa:	2308      	movs	r3, #8
 80036fc:	782f      	ldrb	r7, [r5, #0]
 80036fe:	1a9a      	subs	r2, r3, r2
 8003700:	5de1      	ldrb	r1, [r4, r7]
 8003702:	4091      	lsls	r1, r2
 8003704:	55e1      	strb	r1, [r4, r7]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 8003706:	782a      	ldrb	r2, [r5, #0]
 8003708:	7837      	ldrb	r7, [r6, #0]
 800370a:	5ca1      	ldrb	r1, [r4, r2]
 800370c:	1bdb      	subs	r3, r3, r7
 800370e:	4119      	asrs	r1, r3
 8003710:	54a1      	strb	r1, [r4, r2]
        gRFAL.nfcaData.collByte = buf[(*bytesToSend)];
 8003712:	782b      	ldrb	r3, [r5, #0]
 8003714:	5ce3      	ldrb	r3, [r4, r3]
 8003716:	7003      	strb	r3, [r0, #0]
    gRFAL.nfcaData.buf         = buf;
 8003718:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <rfalISO14443AStartTransceiveAnticollisionFrame+0xd4>)
 800371a:	4a08      	ldr	r2, [pc, #32]	@ (800373c <rfalISO14443AStartTransceiveAnticollisionFrame+0xd8>)
 800371c:	6014      	str	r4, [r2, #0]
    gRFAL.nfcaData.bytesToSend = bytesToSend;
 800371e:	001a      	movs	r2, r3
 8003720:	32b4      	adds	r2, #180	@ 0xb4
 8003722:	6015      	str	r5, [r2, #0]
    gRFAL.nfcaData.bitsToSend  = bitsToSend;
 8003724:	001a      	movs	r2, r3
 8003726:	32b8      	adds	r2, #184	@ 0xb8
 8003728:	6016      	str	r6, [r2, #0]
    gRFAL.nfcaData.rxLength    = rxLength;
 800372a:	9a00      	ldr	r2, [sp, #0]
 800372c:	33bc      	adds	r3, #188	@ 0xbc
 800372e:	601a      	str	r2, [r3, #0]
    return rfalTransceiveRunBlockingTx();
 8003730:	f7ff ff24 	bl	800357c <rfalTransceiveRunBlockingTx>
}
 8003734:	b00b      	add	sp, #44	@ 0x2c
 8003736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003738:	20000904 	.word	0x20000904
 800373c:	200009b4 	.word	0x200009b4

08003740 <rfalTransceiveBlockingRx>:
{
 8003740:	b510      	push	{r4, lr}
        rfalWorker();
 8003742:	f7ff f8c5 	bl	80028d0 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 8003746:	f7fe fd3b 	bl	80021c0 <rfalGetTransceiveStatus>
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800374a:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <rfalTransceiveBlockingRx+0x18>)
    while( (rfalIsTransceiveInRx()) || (ret == RFAL_ERR_BUSY) );
 800374c:	7e1b      	ldrb	r3, [r3, #24]
 800374e:	2b50      	cmp	r3, #80	@ 0x50
 8003750:	d8f7      	bhi.n	8003742 <rfalTransceiveBlockingRx+0x2>
 8003752:	2802      	cmp	r0, #2
 8003754:	d0f5      	beq.n	8003742 <rfalTransceiveBlockingRx+0x2>
}
 8003756:	bd10      	pop	{r4, pc}
 8003758:	20000904 	.word	0x20000904

0800375c <rfalTransceiveBlockingTxRx>:
{
 800375c:	b530      	push	{r4, r5, lr}
 800375e:	b085      	sub	sp, #20
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 8003760:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
{
 8003762:	9c08      	ldr	r4, [sp, #32]
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 8003764:	9502      	str	r5, [sp, #8]
 8003766:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003768:	9400      	str	r4, [sp, #0]
 800376a:	9501      	str	r5, [sp, #4]
 800376c:	f7ff ff1c 	bl	80035a8 <rfalTransceiveBlockingTx>
 8003770:	2800      	cmp	r0, #0
 8003772:	d107      	bne.n	8003784 <rfalTransceiveBlockingTxRx+0x28>
    ret = rfalTransceiveBlockingRx();
 8003774:	f7ff ffe4 	bl	8003740 <rfalTransceiveBlockingRx>
    if( actLen != NULL )
 8003778:	2c00      	cmp	r4, #0
 800377a:	d003      	beq.n	8003784 <rfalTransceiveBlockingTxRx+0x28>
        *actLen = rfalConvBitsToBytes(*actLen);
 800377c:	8823      	ldrh	r3, [r4, #0]
 800377e:	3307      	adds	r3, #7
 8003780:	08db      	lsrs	r3, r3, #3
 8003782:	8023      	strh	r3, [r4, #0]
}
 8003784:	b005      	add	sp, #20
 8003786:	bd30      	pop	{r4, r5, pc}

08003788 <rfalISO15693TransceiveEOF>:
{
 8003788:	b530      	push	{r4, r5, lr}
 800378a:	000b      	movs	r3, r1
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800378c:	490b      	ldr	r1, [pc, #44]	@ (80037bc <rfalISO15693TransceiveEOF+0x34>)
{
 800378e:	0004      	movs	r4, r0
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8003790:	780d      	ldrb	r5, [r1, #0]
        return RFAL_ERR_WRONG_STATE;
 8003792:	2021      	movs	r0, #33	@ 0x21
{
 8003794:	b087      	sub	sp, #28
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8003796:	2d01      	cmp	r5, #1
 8003798:	d90e      	bls.n	80037b8 <rfalISO15693TransceiveEOF+0x30>
 800379a:	7849      	ldrb	r1, [r1, #1]
 800379c:	2907      	cmp	r1, #7
 800379e:	d10b      	bne.n	80037b8 <rfalISO15693TransceiveEOF+0x30>
    ret = rfalTransceiveBlockingTxRx( &dummy,
 80037a0:	21a2      	movs	r1, #162	@ 0xa2
 80037a2:	0149      	lsls	r1, r1, #5
 80037a4:	9102      	str	r1, [sp, #8]
 80037a6:	2103      	movs	r1, #3
 80037a8:	380a      	subs	r0, #10
 80037aa:	9101      	str	r1, [sp, #4]
 80037ac:	9200      	str	r2, [sp, #0]
 80037ae:	2100      	movs	r1, #0
 80037b0:	0022      	movs	r2, r4
 80037b2:	4468      	add	r0, sp
 80037b4:	f7ff ffd2 	bl	800375c <rfalTransceiveBlockingTxRx>
}
 80037b8:	b007      	add	sp, #28
 80037ba:	bd30      	pop	{r4, r5, pc}
 80037bc:	20000904 	.word	0x20000904

080037c0 <rfalISO14443ATransceiveShortFrame>:
{
 80037c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037c2:	9201      	str	r2, [sp, #4]
    if( (!st25r3916IsTxEnabled()) || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 80037c4:	2208      	movs	r2, #8
{
 80037c6:	9100      	str	r1, [sp, #0]
 80037c8:	0007      	movs	r7, r0
    if( (!st25r3916IsTxEnabled()) || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 80037ca:	0011      	movs	r1, r2
 80037cc:	2002      	movs	r0, #2
{
 80037ce:	001e      	movs	r6, r3
    if( (!st25r3916IsTxEnabled()) || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 80037d0:	f000 feee 	bl	80045b0 <st25r3916CheckReg>
        return RFAL_ERR_WRONG_STATE;
 80037d4:	2521      	movs	r5, #33	@ 0x21
    if( (!st25r3916IsTxEnabled()) || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d100      	bne.n	80037dc <rfalISO14443ATransceiveShortFrame+0x1c>
 80037da:	e094      	b.n	8003906 <rfalISO14443ATransceiveShortFrame+0x146>
 80037dc:	4c4d      	ldr	r4, [pc, #308]	@ (8003914 <rfalISO14443ATransceiveShortFrame+0x154>)
 80037de:	7823      	ldrb	r3, [r4, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d800      	bhi.n	80037e6 <rfalISO14443ATransceiveShortFrame+0x26>
 80037e4:	e08f      	b.n	8003906 <rfalISO14443ATransceiveShortFrame+0x146>
 80037e6:	7863      	ldrb	r3, [r4, #1]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d900      	bls.n	80037f0 <rfalISO14443ATransceiveShortFrame+0x30>
 80037ee:	e08a      	b.n	8003906 <rfalISO14443ATransceiveShortFrame+0x146>
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 80037f0:	9b00      	ldr	r3, [sp, #0]
        return RFAL_ERR_PARAM;
 80037f2:	3d1a      	subs	r5, #26
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d100      	bne.n	80037fa <rfalISO14443ATransceiveShortFrame+0x3a>
 80037f8:	e085      	b.n	8003906 <rfalISO14443ATransceiveShortFrame+0x146>
 80037fa:	2e00      	cmp	r6, #0
 80037fc:	d100      	bne.n	8003800 <rfalISO14443ATransceiveShortFrame+0x40>
 80037fe:	e082      	b.n	8003906 <rfalISO14443ATransceiveShortFrame+0x146>
 8003800:	9b08      	ldr	r3, [sp, #32]
 8003802:	3301      	adds	r3, #1
 8003804:	d07f      	beq.n	8003906 <rfalISO14443ATransceiveShortFrame+0x146>
    switch (txCmd)
 8003806:	2f26      	cmp	r7, #38	@ 0x26
 8003808:	d100      	bne.n	800380c <rfalISO14443ATransceiveShortFrame+0x4c>
 800380a:	e07e      	b.n	800390a <rfalISO14443ATransceiveShortFrame+0x14a>
 800380c:	2f52      	cmp	r7, #82	@ 0x52
 800380e:	d17a      	bne.n	8003906 <rfalISO14443ATransceiveShortFrame+0x146>
            directCmd = ST25R3916_CMD_TRANSMIT_WUPA;
 8003810:	35c0      	adds	r5, #192	@ 0xc0
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 8003812:	f7fe fb77 	bl	8001f04 <rfalIsGTExpired>
 8003816:	2800      	cmp	r0, #0
 8003818:	d0fb      	beq.n	8003812 <rfalISO14443ATransceiveShortFrame+0x52>
    while( st25r3916IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 800381a:	2704      	movs	r7, #4
 800381c:	003a      	movs	r2, r7
 800381e:	0039      	movs	r1, r7
 8003820:	2024      	movs	r0, #36	@ 0x24
 8003822:	f000 fec5 	bl	80045b0 <st25r3916CheckReg>
 8003826:	2800      	cmp	r0, #0
 8003828:	d1f8      	bne.n	800381c <rfalISO14443ATransceiveShortFrame+0x5c>
    gRFAL.TxRx.ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_MANUAL );
 800382a:	2383      	movs	r3, #131	@ 0x83
    st25r3916SetNoResponseTime( rfalConv1fcTo64fc( RFAL_MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3916_NRT_MAX_1FC ) ) );
 800382c:	22a0      	movs	r2, #160	@ 0xa0
    gRFAL.TxRx.ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_MANUAL );
 800382e:	6323      	str	r3, [r4, #48]	@ 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 8003830:	9b00      	ldr	r3, [sp, #0]
    st25r3916SetNoResponseTime( rfalConv1fcTo64fc( RFAL_MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3916_NRT_MAX_1FC ) ) );
 8003832:	0092      	lsls	r2, r2, #2
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 8003834:	6263      	str	r3, [r4, #36]	@ 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 8003836:	9b01      	ldr	r3, [sp, #4]
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 8003838:	6420      	str	r0, [r4, #64]	@ 0x40
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 800383a:	8523      	strh	r3, [r4, #40]	@ 0x28
    gRFAL.TxRx.ctx.fwt       = fwt;
 800383c:	9b08      	ldr	r3, [sp, #32]
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 800383e:	62e6      	str	r6, [r4, #44]	@ 0x2c
    gRFAL.TxRx.ctx.fwt       = fwt;
 8003840:	6363      	str	r3, [r4, #52]	@ 0x34
    st25r3916SetNoResponseTime( rfalConv1fcTo64fc( RFAL_MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3916_NRT_MAX_1FC ) ) );
 8003842:	1898      	adds	r0, r3, r2
 8003844:	4b34      	ldr	r3, [pc, #208]	@ (8003918 <rfalISO14443ATransceiveShortFrame+0x158>)
 8003846:	4298      	cmp	r0, r3
 8003848:	d900      	bls.n	800384c <rfalISO14443ATransceiveShortFrame+0x8c>
 800384a:	0018      	movs	r0, r3
 800384c:	0980      	lsrs	r0, r0, #6
 800384e:	f000 fc09 	bl	8004064 <st25r3916SetNoResponseTime>
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 8003852:	68e3      	ldr	r3, [r4, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d010      	beq.n	800387a <rfalISO14443ATransceiveShortFrame+0xba>
        st25r3916ClrRegisterBits(ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_mrt_step );
 8003858:	2108      	movs	r1, #8
 800385a:	2012      	movs	r0, #18
 800385c:	f000 fe53 	bl	8004506 <st25r3916ClrRegisterBits>
        st25r3916WriteRegister( ST25R3916_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3916_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 8003860:	228a      	movs	r2, #138	@ 0x8a
 8003862:	68e3      	ldr	r3, [r4, #12]
 8003864:	2104      	movs	r1, #4
 8003866:	0052      	lsls	r2, r2, #1
 8003868:	4293      	cmp	r3, r2
 800386a:	d303      	bcc.n	8003874 <rfalISO14443ATransceiveShortFrame+0xb4>
 800386c:	3b15      	subs	r3, #21
 800386e:	3bff      	subs	r3, #255	@ 0xff
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	b2d9      	uxtb	r1, r3
 8003874:	200f      	movs	r0, #15
 8003876:	f000 fd71 	bl	800435c <st25r3916WriteRegister>
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800387a:	6920      	ldr	r0, [r4, #16]
 800387c:	2800      	cmp	r0, #0
 800387e:	d007      	beq.n	8003890 <rfalISO14443ATransceiveShortFrame+0xd0>
        st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( ((gRFAL.timings.FDTPoll < RFAL_FDT_POLL_ADJUSTMENT) ? gRFAL.timings.FDTPoll : (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT)) ) , ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 8003880:	4b26      	ldr	r3, [pc, #152]	@ (800391c <rfalISO14443ATransceiveShortFrame+0x15c>)
 8003882:	4298      	cmp	r0, r3
 8003884:	d843      	bhi.n	800390e <rfalISO14443ATransceiveShortFrame+0x14e>
 8003886:	08c0      	lsrs	r0, r0, #3
 8003888:	2120      	movs	r1, #32
 800388a:	b280      	uxth	r0, r0
 800388c:	f000 fc21 	bl	80040d2 <st25r3916SetStartGPTimer>
    rfalPrepareTransceive();
 8003890:	f7fd ff82 	bl	8001798 <rfalPrepareTransceive>
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_COL );
 8003894:	2004      	movs	r0, #4
 8003896:	f000 ff51 	bl	800473c <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_COL );
 800389a:	2004      	movs	r0, #4
 800389c:	f000 ff7a 	bl	8004794 <st25r3916EnableInterrupts>
    rfalCheckEnableObsModeTx();
 80038a0:	7963      	ldrb	r3, [r4, #5]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <rfalISO14443ATransceiveShortFrame+0xf0>
 80038a6:	2140      	movs	r1, #64	@ 0x40
 80038a8:	2001      	movs	r0, #1
 80038aa:	4319      	orrs	r1, r3
 80038ac:	f000 fe0f 	bl	80044ce <st25r3916WriteTestRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, 0);
 80038b0:	2100      	movs	r1, #0
 80038b2:	2023      	movs	r0, #35	@ 0x23
 80038b4:	f000 fd52 	bl	800435c <st25r3916WriteRegister>
    st25r3916ExecuteCommand( directCmd );
 80038b8:	0028      	movs	r0, r5
 80038ba:	f000 fdd8 	bl	800446e <st25r3916ExecuteCommand>
    if( st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_TXE, (uint16_t)RFAL_MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3916_SW_TMR_MIN_1MS ) ) == 0U )
 80038be:	4b18      	ldr	r3, [pc, #96]	@ (8003920 <rfalISO14443ATransceiveShortFrame+0x160>)
 80038c0:	9a08      	ldr	r2, [sp, #32]
 80038c2:	2101      	movs	r1, #1
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d904      	bls.n	80038d2 <rfalISO14443ATransceiveShortFrame+0x112>
 80038c8:	4916      	ldr	r1, [pc, #88]	@ (8003924 <rfalISO14443ATransceiveShortFrame+0x164>)
 80038ca:	0010      	movs	r0, r2
 80038cc:	f7fc fc4c 	bl	8000168 <__udivsi3>
 80038d0:	b281      	uxth	r1, r0
 80038d2:	2008      	movs	r0, #8
 80038d4:	f000 fef8 	bl	80046c8 <st25r3916WaitForInterruptsTimed>
        ret = RFAL_ERR_IO;
 80038d8:	2503      	movs	r5, #3
    if( st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_TXE, (uint16_t)RFAL_MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3916_SW_TMR_MIN_1MS ) ) == 0U )
 80038da:	2800      	cmp	r0, #0
 80038dc:	d010      	beq.n	8003900 <rfalISO14443ATransceiveShortFrame+0x140>
        rfalCheckEnableObsModeRx();
 80038de:	79a3      	ldrb	r3, [r4, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <rfalISO14443ATransceiveShortFrame+0x12e>
 80038e4:	2140      	movs	r1, #64	@ 0x40
 80038e6:	2001      	movs	r0, #1
 80038e8:	4319      	orrs	r1, r3
 80038ea:	f000 fdf0 	bl	80044ce <st25r3916WriteTestRegister>
        gRFAL.state       = RFAL_STATE_TXRX;
 80038ee:	2303      	movs	r3, #3
 80038f0:	7023      	strb	r3, [r4, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 80038f2:	334e      	adds	r3, #78	@ 0x4e
 80038f4:	7623      	strb	r3, [r4, #24]
        gRFAL.TxRx.status = RFAL_ERR_BUSY;
 80038f6:	3b4f      	subs	r3, #79	@ 0x4f
 80038f8:	8363      	strh	r3, [r4, #26]
        ret = rfalTransceiveBlockingRx();
 80038fa:	f7ff ff21 	bl	8003740 <rfalTransceiveBlockingRx>
 80038fe:	0005      	movs	r5, r0
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_COL) );
 8003900:	2004      	movs	r0, #4
 8003902:	f000 ff54 	bl	80047ae <st25r3916DisableInterrupts>
}
 8003906:	0028      	movs	r0, r5
 8003908:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    switch (txCmd)
 800390a:	25c6      	movs	r5, #198	@ 0xc6
 800390c:	e781      	b.n	8003812 <rfalISO14443ATransceiveShortFrame+0x52>
        st25r3916SetStartGPTimer( (uint16_t)rfalConv1fcTo8fc( ((gRFAL.timings.FDTPoll < RFAL_FDT_POLL_ADJUSTMENT) ? gRFAL.timings.FDTPoll : (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT)) ) , ST25R3916_REG_TIMER_EMV_CONTROL_gptc_erx );
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <rfalISO14443ATransceiveShortFrame+0x168>)
 8003910:	18c0      	adds	r0, r0, r3
 8003912:	e7b8      	b.n	8003886 <rfalISO14443ATransceiveShortFrame+0xc6>
 8003914:	20000904 	.word	0x20000904
 8003918:	0ffff000 	.word	0x0ffff000
 800391c:	0000043b 	.word	0x0000043b
 8003920:	000069ef 	.word	0x000069ef
 8003924:	000034f8 	.word	0x000034f8
 8003928:	fffffbc4 	.word	0xfffffbc4

0800392c <rfalISO15693TransceiveAnticollisionFrame>:
{
 800392c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800392e:	4d34      	ldr	r5, [pc, #208]	@ (8003a00 <rfalISO15693TransceiveAnticollisionFrame+0xd4>)
{
 8003930:	001f      	movs	r7, r3
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 8003932:	782b      	ldrb	r3, [r5, #0]
{
 8003934:	b08b      	sub	sp, #44	@ 0x2c
 8003936:	000e      	movs	r6, r1
        return RFAL_ERR_WRONG_STATE;
 8003938:	2421      	movs	r4, #33	@ 0x21
{
 800393a:	9000      	str	r0, [sp, #0]
 800393c:	9201      	str	r2, [sp, #4]
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800393e:	2b01      	cmp	r3, #1
 8003940:	d953      	bls.n	80039ea <rfalISO15693TransceiveAnticollisionFrame+0xbe>
 8003942:	786b      	ldrb	r3, [r5, #1]
 8003944:	2b07      	cmp	r3, #7
 8003946:	d150      	bne.n	80039ea <rfalISO15693TransceiveAnticollisionFrame+0xbe>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 8003948:	482e      	ldr	r0, [pc, #184]	@ (8003a04 <rfalISO15693TransceiveAnticollisionFrame+0xd8>)
 800394a:	f004 fc69 	bl	8008220 <rfalSetAnalogConfig>
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800394e:	2388      	movs	r3, #136	@ 0x88
 8003950:	2210      	movs	r2, #16
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	52ea      	strh	r2, [r5, r3]
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 8003956:	2e00      	cmp	r6, #0
 8003958:	d14a      	bne.n	80039f0 <rfalISO15693TransceiveAnticollisionFrame+0xc4>
 800395a:	2340      	movs	r3, #64	@ 0x40
 800395c:	3a05      	subs	r2, #5
 800395e:	4313      	orrs	r3, r2
 8003960:	9308      	str	r3, [sp, #32]
    ctx.txBuf     = txBuf;
 8003962:	9b00      	ldr	r3, [sp, #0]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 8003964:	00f6      	lsls	r6, r6, #3
    ctx.txBuf     = txBuf;
 8003966:	9303      	str	r3, [sp, #12]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 8003968:	ab02      	add	r3, sp, #8
 800396a:	811e      	strh	r6, [r3, #8]
    ctx.rxBuf     = rxBuf;
 800396c:	9b01      	ldr	r3, [sp, #4]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800396e:	aa02      	add	r2, sp, #8
    ctx.rxBuf     = rxBuf;
 8003970:	9305      	str	r3, [sp, #20]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 8003972:	00fb      	lsls	r3, r7, #3
 8003974:	8213      	strh	r3, [r2, #16]
    ctx.rxRcvdLen = actLen;
 8003976:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    RFAL_EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 8003978:	a803      	add	r0, sp, #12
    ctx.rxRcvdLen = actLen;
 800397a:	9307      	str	r3, [sp, #28]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 800397c:	23a2      	movs	r3, #162	@ 0xa2
 800397e:	015b      	lsls	r3, r3, #5
 8003980:	9309      	str	r3, [sp, #36]	@ 0x24
    RFAL_EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 8003982:	f7fe fb37 	bl	8001ff4 <rfalStartTransceive>
 8003986:	1e04      	subs	r4, r0, #0
 8003988:	d12f      	bne.n	80039ea <rfalISO15693TransceiveAnticollisionFrame+0xbe>
    ret = rfalTransceiveRunBlockingTx();
 800398a:	f7ff fdf7 	bl	800357c <rfalTransceiveRunBlockingTx>
 800398e:	1e04      	subs	r4, r0, #0
    if( ret == RFAL_ERR_NONE)
 8003990:	d102      	bne.n	8003998 <rfalISO15693TransceiveAnticollisionFrame+0x6c>
        ret = rfalTransceiveBlockingRx();
 8003992:	f7ff fed5 	bl	8003740 <rfalTransceiveBlockingRx>
 8003996:	0004      	movs	r4, r0
    if( ((ret == RFAL_ERR_RF_COLLISION) || (ret == RFAL_ERR_CRC) || (ret == RFAL_ERR_FRAMING)) && (rfalConvBitsToBytes(*ctx.rxRcvdLen) < RFAL_ISO15693_INV_RES_LEN) )
 8003998:	2c1d      	cmp	r4, #29
 800399a:	d80e      	bhi.n	80039ba <rfalISO15693TransceiveAnticollisionFrame+0x8e>
 800399c:	4b1a      	ldr	r3, [pc, #104]	@ (8003a08 <rfalISO15693TransceiveAnticollisionFrame+0xdc>)
 800399e:	40e3      	lsrs	r3, r4
 80039a0:	07db      	lsls	r3, r3, #31
 80039a2:	d50a      	bpl.n	80039ba <rfalISO15693TransceiveAnticollisionFrame+0x8e>
 80039a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	3307      	adds	r3, #7
 80039aa:	08da      	lsrs	r2, r3, #3
 80039ac:	2b5f      	cmp	r3, #95	@ 0x5f
 80039ae:	d804      	bhi.n	80039ba <rfalISO15693TransceiveAnticollisionFrame+0x8e>
        platformDelay( (uint8_t)( (RFAL_ISO15693_INV_RES_LEN - rfalConvBitsToBytes(*ctx.rxRcvdLen)) / ((RFAL_ISO15693_INV_RES_LEN / RFAL_ISO15693_INV_RES_DUR)+1U) ));
 80039b0:	200c      	movs	r0, #12
 80039b2:	1a80      	subs	r0, r0, r2
 80039b4:	0880      	lsrs	r0, r0, #2
 80039b6:	f001 f867 	bl	8004a88 <HAL_Delay>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 80039ba:	78ab      	ldrb	r3, [r5, #2]
 80039bc:	22ff      	movs	r2, #255	@ 0xff
 80039be:	4813      	ldr	r0, [pc, #76]	@ (8003a0c <rfalISO15693TransceiveAnticollisionFrame+0xe0>)
 80039c0:	2bea      	cmp	r3, #234	@ 0xea
 80039c2:	d918      	bls.n	80039f6 <rfalISO15693TransceiveAnticollisionFrame+0xca>
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	4013      	ands	r3, r2
 80039c8:	4318      	orrs	r0, r3
 80039ca:	f004 fc29 	bl	8008220 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 80039ce:	78eb      	ldrb	r3, [r5, #3]
 80039d0:	22ff      	movs	r2, #255	@ 0xff
 80039d2:	480f      	ldr	r0, [pc, #60]	@ (8003a10 <rfalISO15693TransceiveAnticollisionFrame+0xe4>)
 80039d4:	2bea      	cmp	r3, #234	@ 0xea
 80039d6:	d910      	bls.n	80039fa <rfalISO15693TransceiveAnticollisionFrame+0xce>
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	4013      	ands	r3, r2
 80039dc:	4318      	orrs	r0, r3
 80039de:	f004 fc1f 	bl	8008220 <rfalSetAnalogConfig>
    gRFAL.nfcvData.ignoreBits = 0;
 80039e2:	2388      	movs	r3, #136	@ 0x88
 80039e4:	2200      	movs	r2, #0
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	52ea      	strh	r2, [r5, r3]
}
 80039ea:	0020      	movs	r0, r4
 80039ec:	b00b      	add	sp, #44	@ 0x2c
 80039ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 80039f0:	220a      	movs	r2, #10
 80039f2:	2300      	movs	r3, #0
 80039f4:	e7b3      	b.n	800395e <rfalISO15693TransceiveAnticollisionFrame+0x32>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX) );
 80039f6:	3301      	adds	r3, #1
 80039f8:	e7e4      	b.n	80039c4 <rfalISO15693TransceiveAnticollisionFrame+0x98>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX) );
 80039fa:	3301      	adds	r3, #1
 80039fc:	e7ec      	b.n	80039d8 <rfalISO15693TransceiveAnticollisionFrame+0xac>
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	20000904 	.word	0x20000904
 8003a04:	00001003 	.word	0x00001003
 8003a08:	20200200 	.word	0x20200200
 8003a0c:	00001001 	.word	0x00001001
 8003a10:	00001002 	.word	0x00001002

08003a14 <rfalISO15693TransceiveEOFAnticollision>:
{
 8003a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 8003a16:	9200      	str	r2, [sp, #0]
 8003a18:	0002      	movs	r2, r0
 8003a1a:	200f      	movs	r0, #15
{
 8003a1c:	000b      	movs	r3, r1
    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 8003a1e:	4468      	add	r0, sp
 8003a20:	2100      	movs	r1, #0
 8003a22:	f7ff ff83 	bl	800392c <rfalISO15693TransceiveAnticollisionFrame>
}
 8003a26:	b005      	add	sp, #20
 8003a28:	bd00      	pop	{pc}
	...

08003a2c <rfalWakeUpModeStart>:
{
 8003a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( gRFAL.state < RFAL_STATE_INIT )
 8003a2e:	4cbd      	ldr	r4, [pc, #756]	@ (8003d24 <rfalWakeUpModeStart+0x2f8>)
{
 8003a30:	0001      	movs	r1, r0
    if( gRFAL.state < RFAL_STATE_INIT )
 8003a32:	7823      	ldrb	r3, [r4, #0]
        return RFAL_ERR_WRONG_STATE;
 8003a34:	2021      	movs	r0, #33	@ 0x21
    if( gRFAL.state < RFAL_STATE_INIT )
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d100      	bne.n	8003a3c <rfalWakeUpModeStart+0x10>
 8003a3a:	e0b4      	b.n	8003ba6 <rfalWakeUpModeStart+0x17a>
    if( config == NULL )
 8003a3c:	0020      	movs	r0, r4
 8003a3e:	3082      	adds	r0, #130	@ 0x82
 8003a40:	2900      	cmp	r1, #0
 8003a42:	d000      	beq.n	8003a46 <rfalWakeUpModeStart+0x1a>
 8003a44:	e09e      	b.n	8003b84 <rfalWakeUpModeStart+0x158>
        gRFAL.wum.cfg.period           = RFAL_WUM_PERIOD_200MS;
 8003a46:	2311      	movs	r3, #17
 8003a48:	8003      	strh	r3, [r0, #0]
        gRFAL.wum.cfg.indPha.enabled   = false;
 8003a4a:	0023      	movs	r3, r4
 8003a4c:	3390      	adds	r3, #144	@ 0x90
 8003a4e:	7019      	strb	r1, [r3, #0]
        gRFAL.wum.cfg.cap.enabled      = false;
 8003a50:	0023      	movs	r3, r4
 8003a52:	339a      	adds	r3, #154	@ 0x9a
 8003a54:	7019      	strb	r1, [r3, #0]
        gRFAL.wum.cfg.indAmp.enabled   = true;
 8003a56:	0023      	movs	r3, r4
 8003a58:	4ab3      	ldr	r2, [pc, #716]	@ (8003d28 <rfalWakeUpModeStart+0x2fc>)
 8003a5a:	3386      	adds	r3, #134	@ 0x86
 8003a5c:	801a      	strh	r2, [r3, #0]
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 8003a5e:	0023      	movs	r3, r4
        gRFAL.wum.cfg.swTagDetect      = false;
 8003a60:	0027      	movs	r7, r4
        gRFAL.wum.cfg.indAmp.fracDelta = 0U;
 8003a62:	0026      	movs	r6, r4
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 8003a64:	0025      	movs	r5, r4
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 8003a66:	3a03      	subs	r2, #3
 8003a68:	3aff      	subs	r2, #255	@ 0xff
 8003a6a:	338a      	adds	r3, #138	@ 0x8a
        gRFAL.wum.cfg.swTagDetect      = false;
 8003a6c:	3784      	adds	r7, #132	@ 0x84
        gRFAL.wum.cfg.indAmp.fracDelta = 0U;
 8003a6e:	3688      	adds	r6, #136	@ 0x88
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 8003a70:	801a      	strh	r2, [r3, #0]
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 8003a72:	358c      	adds	r5, #140	@ 0x8c
        if( st25r3916IsAATOn() )
 8003a74:	3adf      	subs	r2, #223	@ 0xdf
        gRFAL.wum.cfg.swTagDetect      = false;
 8003a76:	7039      	strb	r1, [r7, #0]
        gRFAL.wum.cfg.indAmp.fracDelta = 0U;
 8003a78:	7031      	strb	r1, [r6, #0]
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 8003a7a:	7029      	strb	r1, [r5, #0]
        if( st25r3916IsAATOn() )
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	0011      	movs	r1, r2
 8003a80:	f000 fd96 	bl	80045b0 <st25r3916CheckReg>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d00a      	beq.n	8003a9e <rfalWakeUpModeStart+0x72>
            gRFAL.wum.cfg.indAmp.delta     = 1U;
 8003a88:	0022      	movs	r2, r4
            gRFAL.wum.cfg.swTagDetect      = true;
 8003a8a:	2301      	movs	r3, #1
            gRFAL.wum.cfg.indAmp.delta     = 1U;
 8003a8c:	3287      	adds	r2, #135	@ 0x87
 8003a8e:	7013      	strb	r3, [r2, #0]
            gRFAL.wum.cfg.swTagDetect      = true;
 8003a90:	703b      	strb	r3, [r7, #0]
            gRFAL.wum.cfg.indAmp.autoAvg   = true;
 8003a92:	702b      	strb	r3, [r5, #0]
            gRFAL.wum.cfg.indAmp.aaWeight  = RFAL_WUM_AA_WEIGHT_16;
 8003a94:	0023      	movs	r3, r4
            gRFAL.wum.cfg.indAmp.fracDelta = 2U;
 8003a96:	2202      	movs	r2, #2
            gRFAL.wum.cfg.indAmp.aaWeight  = RFAL_WUM_AA_WEIGHT_16;
 8003a98:	338e      	adds	r3, #142	@ 0x8e
            gRFAL.wum.cfg.indAmp.fracDelta = 2U;
 8003a9a:	7032      	strb	r2, [r6, #0]
            gRFAL.wum.cfg.indAmp.aaWeight  = RFAL_WUM_AA_WEIGHT_16;
 8003a9c:	701a      	strb	r2, [r3, #0]
    if( ((!gRFAL.wum.cfg.cap.enabled) && (!gRFAL.wum.cfg.indAmp.enabled) && (!gRFAL.wum.cfg.indPha.enabled))  ||
 8003a9e:	0022      	movs	r2, r4
 8003aa0:	0023      	movs	r3, r4
 8003aa2:	329a      	adds	r2, #154	@ 0x9a
 8003aa4:	7812      	ldrb	r2, [r2, #0]
 8003aa6:	3386      	adds	r3, #134	@ 0x86
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2a00      	cmp	r2, #0
 8003aac:	d16e      	bne.n	8003b8c <rfalWakeUpModeStart+0x160>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <rfalWakeUpModeStart+0x92>
 8003ab2:	0023      	movs	r3, r4
 8003ab4:	3390      	adds	r3, #144	@ 0x90
 8003ab6:	781b      	ldrb	r3, [r3, #0]
        return RFAL_ERR_PARAM;
 8003ab8:	2007      	movs	r0, #7
    if( ((!gRFAL.wum.cfg.cap.enabled) && (!gRFAL.wum.cfg.indAmp.enabled) && (!gRFAL.wum.cfg.indPha.enabled))  ||
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d073      	beq.n	8003ba6 <rfalWakeUpModeStart+0x17a>
        ( (gRFAL.wum.cfg.indAmp.reference > RFAL_WUM_REFERENCE_AUTO) || 
 8003abe:	0023      	movs	r3, r4
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 8003ac0:	0022      	movs	r2, r4
        ( (gRFAL.wum.cfg.indAmp.reference > RFAL_WUM_REFERENCE_AUTO) || 
 8003ac2:	338a      	adds	r3, #138	@ 0x8a
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 8003ac4:	3294      	adds	r2, #148	@ 0x94
 8003ac6:	8812      	ldrh	r2, [r2, #0]
 8003ac8:	881b      	ldrh	r3, [r3, #0]
        return RFAL_ERR_PARAM;
 8003aca:	2007      	movs	r0, #7
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 8003acc:	4313      	orrs	r3, r2
          (gRFAL.wum.cfg.cap.reference    > RFAL_WUM_REFERENCE_AUTO)    )                                )
 8003ace:	0022      	movs	r2, r4
 8003ad0:	329c      	adds	r2, #156	@ 0x9c
          (gRFAL.wum.cfg.indPha.reference > RFAL_WUM_REFERENCE_AUTO) || 
 8003ad2:	8812      	ldrh	r2, [r2, #0]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	2bff      	cmp	r3, #255	@ 0xff
 8003ad8:	d865      	bhi.n	8003ba6 <rfalWakeUpModeStart+0x17a>
    st25r3916TxRxOff();
 8003ada:	2148      	movs	r1, #72	@ 0x48
 8003adc:	3805      	subs	r0, #5
 8003ade:	f000 fd12 	bl	8004506 <st25r3916ClrRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask );
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	2002      	movs	r0, #2
 8003ae6:	f000 fd0e 	bl	8004506 <st25r3916ClrRegisterBits>
    st25r3916ChangeRegisterBits( ST25R3916_REG_MODE, (ST25R3916_REG_MODE_targ | ST25R3916_REG_MODE_om_mask), (ST25R3916_REG_MODE_targ_init | ST25R3916_REG_MODE_om_iso14443a) );
 8003aea:	2208      	movs	r2, #8
 8003aec:	21f8      	movs	r1, #248	@ 0xf8
 8003aee:	2003      	movs	r0, #3
 8003af0:	f000 fd43 	bl	800457a <st25r3916ChangeRegisterBits>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 8003af4:	2004      	movs	r0, #4
 8003af6:	f004 fb93 	bl	8008220 <rfalSetAnalogConfig>
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3916_REG_WUP_TIMER_CONTROL_wut_shift);
 8003afa:	0023      	movs	r3, r4
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 8003afc:	2500      	movs	r5, #0
 8003afe:	220f      	movs	r2, #15
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3916_REG_WUP_TIMER_CONTROL_wut_shift);
 8003b00:	3382      	adds	r3, #130	@ 0x82
 8003b02:	781b      	ldrb	r3, [r3, #0]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 8003b04:	429a      	cmp	r2, r3
 8003b06:	416d      	adcs	r5, r5
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	01ed      	lsls	r5, r5, #7
 8003b0c:	431d      	orrs	r5, r3
    if( (gRFAL.wum.cfg.irqTout) || (gRFAL.wum.cfg.swTagDetect) )
 8003b0e:	0023      	movs	r3, r4
 8003b10:	3383      	adds	r3, #131	@ 0x83
 8003b12:	781b      	ldrb	r3, [r3, #0]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 8003b14:	b26d      	sxtb	r5, r5
    if( (gRFAL.wum.cfg.irqTout) || (gRFAL.wum.cfg.swTagDetect) )
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d104      	bne.n	8003b24 <rfalWakeUpModeStart+0xf8>
 8003b1a:	0023      	movs	r3, r4
 8003b1c:	3384      	adds	r3, #132	@ 0x84
 8003b1e:	781e      	ldrb	r6, [r3, #0]
 8003b20:	2e00      	cmp	r6, #0
 8003b22:	d041      	beq.n	8003ba8 <rfalWakeUpModeStart+0x17c>
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wto;
 8003b24:	2308      	movs	r3, #8
 8003b26:	431d      	orrs	r5, r3
    if( gRFAL.wum.cfg.swTagDetect )
 8003b28:	0023      	movs	r3, r4
 8003b2a:	3384      	adds	r3, #132	@ 0x84
 8003b2c:	781b      	ldrb	r3, [r3, #0]
        reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wto;
 8003b2e:	b2ed      	uxtb	r5, r5
    if( gRFAL.wum.cfg.swTagDetect )
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d100      	bne.n	8003b36 <rfalWakeUpModeStart+0x10a>
 8003b34:	e0f2      	b.n	8003d1c <rfalWakeUpModeStart+0x2f0>
        gRFAL.wum.cfg.indAmp.reference = 0U;
 8003b36:	0022      	movs	r2, r4
 8003b38:	2300      	movs	r3, #0
 8003b3a:	328a      	adds	r2, #138	@ 0x8a
 8003b3c:	8013      	strh	r3, [r2, #0]
        gRFAL.wum.cfg.indPha.reference = 0U;
 8003b3e:	0022      	movs	r2, r4
 8003b40:	3294      	adds	r2, #148	@ 0x94
 8003b42:	8013      	strh	r3, [r2, #0]
        gRFAL.wum.cfg.cap.reference    = 0U;
 8003b44:	0022      	movs	r2, r4
 8003b46:	2680      	movs	r6, #128	@ 0x80
 8003b48:	329c      	adds	r2, #156	@ 0x9c
 8003b4a:	8013      	strh	r3, [r2, #0]
 8003b4c:	0336      	lsls	r6, r6, #12
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 8003b4e:	2001      	movs	r0, #1
 8003b50:	4240      	negs	r0, r0
 8003b52:	f000 fe2c 	bl	80047ae <st25r3916DisableInterrupts>
    st25r3916GetInterrupt( irqs );
 8003b56:	0030      	movs	r0, r6
 8003b58:	f000 fdf0 	bl	800473c <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( irqs );
 8003b5c:	0030      	movs	r0, r6
 8003b5e:	f000 fe19 	bl	8004794 <st25r3916EnableInterrupts>
    st25r3916WriteRegister( ST25R3916_REG_WUP_TIMER_CONTROL, reg );
 8003b62:	0029      	movs	r1, r5
 8003b64:	2032      	movs	r0, #50	@ 0x32
 8003b66:	f000 fbf9 	bl	800435c <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL , 
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	21cf      	movs	r1, #207	@ 0xcf
 8003b6e:	2002      	movs	r0, #2
 8003b70:	f000 fd03 	bl	800457a <st25r3916ChangeRegisterBits>
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 8003b74:	0023      	movs	r3, r4
 8003b76:	2201      	movs	r2, #1
 8003b78:	3380      	adds	r3, #128	@ 0x80
 8003b7a:	701a      	strb	r2, [r3, #0]
    gRFAL.state     = RFAL_STATE_WUM;
 8003b7c:	2305      	movs	r3, #5
    return RFAL_ERR_NONE;
 8003b7e:	2000      	movs	r0, #0
    gRFAL.state     = RFAL_STATE_WUM;
 8003b80:	7023      	strb	r3, [r4, #0]
    return RFAL_ERR_NONE;
 8003b82:	e010      	b.n	8003ba6 <rfalWakeUpModeStart+0x17a>
        gRFAL.wum.cfg = *config;
 8003b84:	2220      	movs	r2, #32
 8003b86:	f00c fbd3 	bl	8010330 <memcpy>
 8003b8a:	e788      	b.n	8003a9e <rfalWakeUpModeStart+0x72>
        return RFAL_ERR_PARAM;
 8003b8c:	2007      	movs	r0, #7
        ((gRFAL.wum.cfg.cap.enabled)  && ((gRFAL.wum.cfg.indAmp.enabled) || (gRFAL.wum.cfg.indPha.enabled)))  ||
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <rfalWakeUpModeStart+0x17a>
 8003b92:	0023      	movs	r3, r4
 8003b94:	3390      	adds	r3, #144	@ 0x90
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d104      	bne.n	8003ba6 <rfalWakeUpModeStart+0x17a>
        ((gRFAL.wum.cfg.cap.enabled)  &&  (gRFAL.wum.cfg.swTagDetect))                                        ||
 8003b9c:	0023      	movs	r3, r4
 8003b9e:	3384      	adds	r3, #132	@ 0x84
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d08b      	beq.n	8003abe <rfalWakeUpModeStart+0x92>
}
 8003ba6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3916_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 8003ba8:	b2ed      	uxtb	r5, r5
        if( gRFAL.wum.cfg.indAmp.enabled )
 8003baa:	0023      	movs	r3, r4
 8003bac:	3386      	adds	r3, #134	@ 0x86
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d033      	beq.n	8003c1c <rfalWakeUpModeStart+0x1f0>
            aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_d_shift);
 8003bb4:	0023      	movs	r3, r4
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 8003bb6:	0027      	movs	r7, r4
            aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_d_shift);
 8003bb8:	3387      	adds	r3, #135	@ 0x87
 8003bba:	7819      	ldrb	r1, [r3, #0]
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 8003bbc:	378c      	adds	r7, #140	@ 0x8c
 8003bbe:	783b      	ldrb	r3, [r7, #0]
            aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_d_shift);
 8003bc0:	0109      	lsls	r1, r1, #4
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 8003bc2:	4319      	orrs	r1, r3
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 8003bc4:	0023      	movs	r3, r4
 8003bc6:	338d      	adds	r3, #141	@ 0x8d
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 8003bc8:	781b      	ldrb	r3, [r3, #0]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_shift) & ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_mask);
 8003bca:	2206      	movs	r2, #6
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4319      	orrs	r1, r3
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_shift) & ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_mask);
 8003bd0:	0023      	movs	r3, r4
 8003bd2:	338e      	adds	r3, #142	@ 0x8e
 8003bd4:	781b      	ldrb	r3, [r3, #0]
            st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_CONF, aux );
 8003bd6:	2033      	movs	r0, #51	@ 0x33
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_shift) & ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_aew_mask);
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4013      	ands	r3, r2
            aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3916_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 8003bdc:	4319      	orrs	r1, r3
 8003bde:	466b      	mov	r3, sp
 8003be0:	b2c9      	uxtb	r1, r1
 8003be2:	71d9      	strb	r1, [r3, #7]
            st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_CONF, aux );
 8003be4:	f000 fbba 	bl	800435c <st25r3916WriteRegister>
            if( !gRFAL.wum.cfg.indAmp.autoAvg )
 8003be8:	783b      	ldrb	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d111      	bne.n	8003c12 <rfalWakeUpModeStart+0x1e6>
                if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 8003bee:	0027      	movs	r7, r4
 8003bf0:	378a      	adds	r7, #138	@ 0x8a
 8003bf2:	883b      	ldrh	r3, [r7, #0]
 8003bf4:	2bff      	cmp	r3, #255	@ 0xff
 8003bf6:	d106      	bne.n	8003c06 <rfalWakeUpModeStart+0x1da>
                    st25r3916MeasureAmplitude( &aux );
 8003bf8:	466b      	mov	r3, sp
 8003bfa:	1dd8      	adds	r0, r3, #7
 8003bfc:	f000 f96a 	bl	8003ed4 <st25r3916MeasureAmplitude>
                    gRFAL.wum.cfg.indAmp.reference = aux;
 8003c00:	466b      	mov	r3, sp
 8003c02:	79db      	ldrb	r3, [r3, #7]
 8003c04:	803b      	strh	r3, [r7, #0]
                st25r3916WriteRegister( ST25R3916_REG_AMPLITUDE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.indAmp.reference );
 8003c06:	0023      	movs	r3, r4
 8003c08:	338a      	adds	r3, #138	@ 0x8a
 8003c0a:	2034      	movs	r0, #52	@ 0x34
 8003c0c:	7819      	ldrb	r1, [r3, #0]
 8003c0e:	f000 fba5 	bl	800435c <st25r3916WriteRegister>
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wam;
 8003c12:	2304      	movs	r3, #4
 8003c14:	431d      	orrs	r5, r3
            irqs |= ST25R3916_IRQ_MASK_WAM;
 8003c16:	2380      	movs	r3, #128	@ 0x80
 8003c18:	02db      	lsls	r3, r3, #11
 8003c1a:	431e      	orrs	r6, r3
        if( gRFAL.wum.cfg.indPha.enabled )
 8003c1c:	0023      	movs	r3, r4
 8003c1e:	3390      	adds	r3, #144	@ 0x90
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d033      	beq.n	8003c8e <rfalWakeUpModeStart+0x262>
            aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3916_REG_PHASE_MEASURE_CONF_pm_d_shift);
 8003c26:	0023      	movs	r3, r4
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8003c28:	0027      	movs	r7, r4
            aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3916_REG_PHASE_MEASURE_CONF_pm_d_shift);
 8003c2a:	3391      	adds	r3, #145	@ 0x91
 8003c2c:	7819      	ldrb	r1, [r3, #0]
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8003c2e:	3796      	adds	r7, #150	@ 0x96
 8003c30:	783b      	ldrb	r3, [r7, #0]
            aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3916_REG_PHASE_MEASURE_CONF_pm_d_shift);
 8003c32:	0109      	lsls	r1, r1, #4
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8003c34:	4319      	orrs	r1, r3
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 8003c36:	0023      	movs	r3, r4
 8003c38:	3397      	adds	r3, #151	@ 0x97
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8003c3a:	781b      	ldrb	r3, [r3, #0]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_shift) & ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_mask);
 8003c3c:	2206      	movs	r2, #6
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4319      	orrs	r1, r3
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_shift) & ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_mask);
 8003c42:	0023      	movs	r3, r4
 8003c44:	3398      	adds	r3, #152	@ 0x98
 8003c46:	781b      	ldrb	r3, [r3, #0]
            st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_CONF, aux );
 8003c48:	2037      	movs	r0, #55	@ 0x37
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_shift) & ST25R3916_REG_PHASE_MEASURE_CONF_pm_aew_mask);
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4013      	ands	r3, r2
            aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3916_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 8003c4e:	4319      	orrs	r1, r3
 8003c50:	466b      	mov	r3, sp
 8003c52:	b2c9      	uxtb	r1, r1
 8003c54:	71d9      	strb	r1, [r3, #7]
            st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_CONF, aux );
 8003c56:	f000 fb81 	bl	800435c <st25r3916WriteRegister>
            if( !gRFAL.wum.cfg.indPha.autoAvg )
 8003c5a:	783b      	ldrb	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d111      	bne.n	8003c84 <rfalWakeUpModeStart+0x258>
                if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 8003c60:	0027      	movs	r7, r4
 8003c62:	3794      	adds	r7, #148	@ 0x94
 8003c64:	883b      	ldrh	r3, [r7, #0]
 8003c66:	2bff      	cmp	r3, #255	@ 0xff
 8003c68:	d106      	bne.n	8003c78 <rfalWakeUpModeStart+0x24c>
                    st25r3916MeasurePhase( &aux );
 8003c6a:	466b      	mov	r3, sp
 8003c6c:	1dd8      	adds	r0, r3, #7
 8003c6e:	f000 f939 	bl	8003ee4 <st25r3916MeasurePhase>
                    gRFAL.wum.cfg.indPha.reference = aux;
 8003c72:	466b      	mov	r3, sp
 8003c74:	79db      	ldrb	r3, [r3, #7]
 8003c76:	803b      	strh	r3, [r7, #0]
                st25r3916WriteRegister( ST25R3916_REG_PHASE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.indPha.reference );
 8003c78:	0023      	movs	r3, r4
 8003c7a:	3394      	adds	r3, #148	@ 0x94
 8003c7c:	2038      	movs	r0, #56	@ 0x38
 8003c7e:	7819      	ldrb	r1, [r3, #0]
 8003c80:	f000 fb6c 	bl	800435c <st25r3916WriteRegister>
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wph;
 8003c84:	2302      	movs	r3, #2
 8003c86:	431d      	orrs	r5, r3
            irqs |= ST25R3916_IRQ_MASK_WPH;
 8003c88:	2380      	movs	r3, #128	@ 0x80
 8003c8a:	029b      	lsls	r3, r3, #10
 8003c8c:	431e      	orrs	r6, r3
        if( gRFAL.wum.cfg.cap.enabled )
 8003c8e:	0023      	movs	r3, r4
 8003c90:	339a      	adds	r3, #154	@ 0x9a
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d100      	bne.n	8003c9a <rfalWakeUpModeStart+0x26e>
 8003c98:	e759      	b.n	8003b4e <rfalWakeUpModeStart+0x122>
            st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, (ST25R3916_REG_OP_CONTROL_en | ST25R3916_REG_OP_CONTROL_tx_en) );
 8003c9a:	2188      	movs	r1, #136	@ 0x88
 8003c9c:	2002      	movs	r0, #2
 8003c9e:	f000 fc32 	bl	8004506 <st25r3916ClrRegisterBits>
            st25r3916CalibrateCapacitiveSensor( NULL );
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f000 f92e 	bl	8003f04 <st25r3916CalibrateCapacitiveSensor>
            aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_d_shift);
 8003ca8:	0023      	movs	r3, r4
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8003caa:	0027      	movs	r7, r4
            aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_d_shift);
 8003cac:	339b      	adds	r3, #155	@ 0x9b
 8003cae:	7819      	ldrb	r1, [r3, #0]
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8003cb0:	379e      	adds	r7, #158	@ 0x9e
 8003cb2:	783b      	ldrb	r3, [r7, #0]
            aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_d_shift);
 8003cb4:	0109      	lsls	r1, r1, #4
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8003cb6:	4319      	orrs	r1, r3
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 8003cb8:	0023      	movs	r3, r4
 8003cba:	339f      	adds	r3, #159	@ 0x9f
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8003cbc:	781b      	ldrb	r3, [r3, #0]
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_shift) & ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_mask);
 8003cbe:	2206      	movs	r2, #6
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4319      	orrs	r1, r3
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_shift) & ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_mask);
 8003cc4:	0023      	movs	r3, r4
 8003cc6:	33a0      	adds	r3, #160	@ 0xa0
 8003cc8:	781b      	ldrb	r3, [r3, #0]
            st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_CONF, aux );
 8003cca:	203b      	movs	r0, #59	@ 0x3b
            aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_shift) & ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_aew_mask);
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	4013      	ands	r3, r2
            aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3916_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 8003cd0:	4319      	orrs	r1, r3
 8003cd2:	466b      	mov	r3, sp
 8003cd4:	b2c9      	uxtb	r1, r1
 8003cd6:	71d9      	strb	r1, [r3, #7]
            st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_CONF, aux );
 8003cd8:	f000 fb40 	bl	800435c <st25r3916WriteRegister>
            if( (!gRFAL.wum.cfg.cap.autoAvg) || (gRFAL.wum.cfg.swTagDetect) )
 8003cdc:	783b      	ldrb	r3, [r7, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <rfalWakeUpModeStart+0x2c0>
 8003ce2:	0023      	movs	r3, r4
 8003ce4:	3384      	adds	r3, #132	@ 0x84
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d011      	beq.n	8003d10 <rfalWakeUpModeStart+0x2e4>
                if( gRFAL.wum.cfg.cap.reference == RFAL_WUM_REFERENCE_AUTO )
 8003cec:	0027      	movs	r7, r4
 8003cee:	379c      	adds	r7, #156	@ 0x9c
 8003cf0:	883b      	ldrh	r3, [r7, #0]
 8003cf2:	2bff      	cmp	r3, #255	@ 0xff
 8003cf4:	d106      	bne.n	8003d04 <rfalWakeUpModeStart+0x2d8>
                    st25r3916MeasureCapacitance( &aux );
 8003cf6:	466b      	mov	r3, sp
 8003cf8:	1dd8      	adds	r0, r3, #7
 8003cfa:	f000 f8fb 	bl	8003ef4 <st25r3916MeasureCapacitance>
                    gRFAL.wum.cfg.cap.reference = aux;
 8003cfe:	466b      	mov	r3, sp
 8003d00:	79db      	ldrb	r3, [r3, #7]
 8003d02:	803b      	strh	r3, [r7, #0]
                st25r3916WriteRegister( ST25R3916_REG_CAPACITANCE_MEASURE_REF, (uint8_t)gRFAL.wum.cfg.cap.reference );
 8003d04:	0023      	movs	r3, r4
 8003d06:	339c      	adds	r3, #156	@ 0x9c
 8003d08:	203c      	movs	r0, #60	@ 0x3c
 8003d0a:	7819      	ldrb	r1, [r3, #0]
 8003d0c:	f000 fb26 	bl	800435c <st25r3916WriteRegister>
            reg  |= ST25R3916_REG_WUP_TIMER_CONTROL_wcap;
 8003d10:	2301      	movs	r3, #1
 8003d12:	431d      	orrs	r5, r3
            irqs |= ST25R3916_IRQ_MASK_WCAP;
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	025b      	lsls	r3, r3, #9
 8003d18:	431e      	orrs	r6, r3
 8003d1a:	e718      	b.n	8003b4e <rfalWakeUpModeStart+0x122>
 8003d1c:	2680      	movs	r6, #128	@ 0x80
 8003d1e:	0336      	lsls	r6, r6, #12
 8003d20:	e743      	b.n	8003baa <rfalWakeUpModeStart+0x17e>
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	20000904 	.word	0x20000904
 8003d28:	00000201 	.word	0x00000201

08003d2c <rfalWakeUpModeHasWoke>:
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	4b03      	ldr	r3, [pc, #12]	@ (8003d3c <rfalWakeUpModeHasWoke+0x10>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	4298      	cmp	r0, r3
 8003d34:	4180      	sbcs	r0, r0
 8003d36:	4240      	negs	r0, r0
}
 8003d38:	4770      	bx	lr
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	20000984 	.word	0x20000984

08003d40 <rfalWakeUpModeStop>:

/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
    /* Check if RFAL is in Wake-up mode */
    if( gRFAL.state != RFAL_STATE_WUM )
 8003d40:	4b0f      	ldr	r3, [pc, #60]	@ (8003d80 <rfalWakeUpModeStop+0x40>)
{
 8003d42:	b570      	push	{r4, r5, r6, lr}
    if( gRFAL.state != RFAL_STATE_WUM )
 8003d44:	781d      	ldrb	r5, [r3, #0]
    {
        return RFAL_ERR_WRONG_STATE;
 8003d46:	2021      	movs	r0, #33	@ 0x21
    if( gRFAL.state != RFAL_STATE_WUM )
 8003d48:	2d05      	cmp	r5, #5
 8003d4a:	d118      	bne.n	8003d7e <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8003d4c:	2400      	movs	r4, #0
 8003d4e:	3380      	adds	r3, #128	@ 0x80
    
    /* Disable Wake-Up Mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8003d50:	2104      	movs	r1, #4
 8003d52:	381f      	subs	r0, #31
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 8003d54:	701c      	strb	r4, [r3, #0]
    st25r3916ClrRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_wu );
 8003d56:	f000 fbd6 	bl	8004506 <st25r3916ClrRegisterBits>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_WT | ST25R3916_IRQ_MASK_WAM | ST25R3916_IRQ_MASK_WPH | ST25R3916_IRQ_MASK_WCAP) );
 8003d5a:	20f0      	movs	r0, #240	@ 0xf0
 8003d5c:	0300      	lsls	r0, r0, #12
 8003d5e:	f000 fd26 	bl	80047ae <st25r3916DisableInterrupts>
    
    /* Stop any ongoing activity */
    st25r3916ExecuteCommand( ST25R3916_CMD_STOP );
 8003d62:	20c2      	movs	r0, #194	@ 0xc2
 8003d64:	f000 fb83 	bl	800446e <st25r3916ExecuteCommand>
    
    /* Re-Enable External Field Detector as: Automatics */
    st25r3916ChangeRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en_fd_mask, ST25R3916_REG_OP_CONTROL_en_fd_auto_efd );
 8003d68:	2203      	movs	r2, #3
 8003d6a:	2002      	movs	r0, #2
 8003d6c:	0011      	movs	r1, r2
 8003d6e:	f000 fc04 	bl	800457a <st25r3916ChangeRegisterBits>
    
    /* Re-Enable the Oscillator */
    st25r3916OscOn();
 8003d72:	f000 f81e 	bl	8003db2 <st25r3916OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 8003d76:	0028      	movs	r0, r5
 8003d78:	f004 fa52 	bl	8008220 <rfalSetAnalogConfig>
      
    return RFAL_ERR_NONE;
 8003d7c:	0020      	movs	r0, r4
}
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
 8003d80:	20000904 	.word	0x20000904

08003d84 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8003d84:	b570      	push	{r4, r5, r6, lr}
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 8003d86:	b2c4      	uxtb	r4, r0
 8003d88:	0020      	movs	r0, r4
{
 8003d8a:	000d      	movs	r5, r1
 8003d8c:	0016      	movs	r6, r2
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 8003d8e:	f000 fc20 	bl	80045d2 <st25r3916IsRegValid>
 8003d92:	0003      	movs	r3, r0
    {
        return RFAL_ERR_PARAM;
 8003d94:	2007      	movs	r0, #7
    if( !st25r3916IsRegValid( (uint8_t)reg) )
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <rfalChipChangeRegBits+0x20>
    }
    
    return st25r3916ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 8003d9a:	0032      	movs	r2, r6
 8003d9c:	0029      	movs	r1, r5
 8003d9e:	0020      	movs	r0, r4
 8003da0:	f000 fbeb 	bl	800457a <st25r3916ChangeRegisterBits>
}
 8003da4:	bd70      	pop	{r4, r5, r6, pc}

08003da6 <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 8003da6:	b510      	push	{r4, lr}
    st25r3916ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 8003da8:	b2c0      	uxtb	r0, r0
 8003daa:	f000 fbeb 	bl	8004584 <st25r3916ChangeTestRegisterBits>
    return RFAL_ERR_NONE;
}
 8003dae:	2000      	movs	r0, #0
 8003db0:	bd10      	pop	{r4, pc}

08003db2 <st25r3916OscOn>:
/*******************************************************************************/
ReturnCode st25r3916OscOn( void )
{
    /* Check if oscillator is already turned on and stable                                                */
    /* Use ST25R3916_REG_OP_CONTROL_en instead of ST25R3916_REG_AUX_DISPLAY_osc_ok to be on the safe side */
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 8003db2:	2280      	movs	r2, #128	@ 0x80
{
 8003db4:	b510      	push	{r4, lr}
    if( !st25r3916CheckReg( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en, ST25R3916_REG_OP_CONTROL_en ) )
 8003db6:	0011      	movs	r1, r2
 8003db8:	2002      	movs	r0, #2
 8003dba:	f000 fbf9 	bl	80045b0 <st25r3916CheckReg>
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d110      	bne.n	8003de4 <st25r3916OscOn+0x32>
    {
        /* Clear any eventual previous oscillator frequency stable IRQ and enable it */
        st25r3916ClearAndEnableInterrupts( ST25R3916_IRQ_MASK_OSC );
 8003dc2:	3080      	adds	r0, #128	@ 0x80
 8003dc4:	f000 fceb 	bl	800479e <st25r3916ClearAndEnableInterrupts>
        
        /* Clear any oscillator IRQ that was potentially pending on ST25R */
        st25r3916GetInterrupt( ST25R3916_IRQ_MASK_OSC );
 8003dc8:	2080      	movs	r0, #128	@ 0x80
 8003dca:	f000 fcb7 	bl	800473c <st25r3916GetInterrupt>

        /* Enable oscillator and regulator output */
        st25r3916SetRegisterBits( ST25R3916_REG_OP_CONTROL, ST25R3916_REG_OP_CONTROL_en );
 8003dce:	2180      	movs	r1, #128	@ 0x80
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	f000 fbaa 	bl	800452a <st25r3916SetRegisterBits>

        /* Wait for the oscillator interrupt */
        st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_OSC, ST25R3916_TOUT_OSC_STABLE );
 8003dd6:	210a      	movs	r1, #10
 8003dd8:	2080      	movs	r0, #128	@ 0x80
 8003dda:	f000 fc75 	bl	80046c8 <st25r3916WaitForInterruptsTimed>
        st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_OSC );
 8003dde:	2080      	movs	r0, #128	@ 0x80
 8003de0:	f000 fce5 	bl	80047ae <st25r3916DisableInterrupts>
    }
    
    if( !st25r3916CheckReg( ST25R3916_REG_AUX_DISPLAY, ST25R3916_REG_AUX_DISPLAY_osc_ok, ST25R3916_REG_AUX_DISPLAY_osc_ok ) )
 8003de4:	2210      	movs	r2, #16
 8003de6:	2031      	movs	r0, #49	@ 0x31
 8003de8:	0011      	movs	r1, r2
 8003dea:	f000 fbe1 	bl	80045b0 <st25r3916CheckReg>
 8003dee:	2301      	movs	r3, #1
 8003df0:	4058      	eors	r0, r3
 8003df2:	b2c0      	uxtb	r0, r0
    {
        return RFAL_ERR_SYSTEM;
    }
    
    return RFAL_ERR_NONE;
}
 8003df4:	00c0      	lsls	r0, r0, #3
 8003df6:	bd10      	pop	{r4, pc}

08003df8 <st25r3916ExecuteCommandAndGetResult>:

/*******************************************************************************/
ReturnCode st25r3916ExecuteCommandAndGetResult( uint8_t cmd, uint8_t resReg, uint8_t tOut, uint8_t* result )
{
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	0007      	movs	r7, r0
    /* Clear and enable Direct Command interrupt */
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 8003dfc:	2080      	movs	r0, #128	@ 0x80
 8003dfe:	0200      	lsls	r0, r0, #8
{
 8003e00:	0016      	movs	r6, r2
 8003e02:	001c      	movs	r4, r3
 8003e04:	000d      	movs	r5, r1
    st25r3916GetInterrupt( ST25R3916_IRQ_MASK_DCT );
 8003e06:	f000 fc99 	bl	800473c <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( ST25R3916_IRQ_MASK_DCT );
 8003e0a:	2080      	movs	r0, #128	@ 0x80
 8003e0c:	0200      	lsls	r0, r0, #8
 8003e0e:	f000 fcc1 	bl	8004794 <st25r3916EnableInterrupts>

    st25r3916ExecuteCommand( cmd );
 8003e12:	0038      	movs	r0, r7
 8003e14:	f000 fb2b 	bl	800446e <st25r3916ExecuteCommand>

    st25r3916WaitForInterruptsTimed( ST25R3916_IRQ_MASK_DCT, tOut );
 8003e18:	2080      	movs	r0, #128	@ 0x80
 8003e1a:	0031      	movs	r1, r6
 8003e1c:	0200      	lsls	r0, r0, #8
 8003e1e:	f000 fc53 	bl	80046c8 <st25r3916WaitForInterruptsTimed>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_DCT );
 8003e22:	2080      	movs	r0, #128	@ 0x80
 8003e24:	0200      	lsls	r0, r0, #8
 8003e26:	f000 fcc2 	bl	80047ae <st25r3916DisableInterrupts>

    /* After execution read out the result if the pointer is not NULL */
    if( result != NULL )
 8003e2a:	2c00      	cmp	r4, #0
 8003e2c:	d003      	beq.n	8003e36 <st25r3916ExecuteCommandAndGetResult+0x3e>
    {
        st25r3916ReadRegister( resReg, result);
 8003e2e:	0021      	movs	r1, r4
 8003e30:	0028      	movs	r0, r5
 8003e32:	f000 fa86 	bl	8004342 <st25r3916ReadRegister>
    }

    return RFAL_ERR_NONE;

}
 8003e36:	2000      	movs	r0, #0
 8003e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e3a <st25r3916MeasurePowerSupply>:


/*******************************************************************************/
uint8_t st25r3916MeasurePowerSupply( uint8_t mpsv )
{
 8003e3a:	b513      	push	{r0, r1, r4, lr}
 8003e3c:	0002      	movs	r2, r0
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3916ChangeRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_mpsv_mask, mpsv );
 8003e3e:	2107      	movs	r1, #7
 8003e40:	202c      	movs	r0, #44	@ 0x2c
 8003e42:	f000 fb9a 	bl	800457a <st25r3916ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_VDD, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_VDD, &result);
 8003e46:	466b      	mov	r3, sp
 8003e48:	1ddc      	adds	r4, r3, #7
 8003e4a:	0023      	movs	r3, r4
 8003e4c:	2264      	movs	r2, #100	@ 0x64
 8003e4e:	2125      	movs	r1, #37	@ 0x25
 8003e50:	20df      	movs	r0, #223	@ 0xdf
 8003e52:	f7ff ffd1 	bl	8003df8 <st25r3916ExecuteCommandAndGetResult>

    return result;
 8003e56:	7820      	ldrb	r0, [r4, #0]
}
 8003e58:	bd16      	pop	{r1, r2, r4, pc}

08003e5a <st25r3916MeasureVoltage>:


/*******************************************************************************/
uint16_t st25r3916MeasureVoltage( uint8_t mpsv )
{
 8003e5a:	b510      	push	{r4, lr}
    uint8_t result; 
    uint16_t mV;

    result = st25r3916MeasurePowerSupply(mpsv);
 8003e5c:	f7ff ffed 	bl	8003e3a <st25r3916MeasurePowerSupply>
   
    /* Convert cmd output into mV (each step represents 23.4 mV )*/
    mV  = ((uint16_t)result) * 23U;
 8003e60:	2417      	movs	r4, #23
 8003e62:	4344      	muls	r4, r0
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 8003e64:	0080      	lsls	r0, r0, #2
 8003e66:	210a      	movs	r1, #10
 8003e68:	3005      	adds	r0, #5
 8003e6a:	f7fc f97d 	bl	8000168 <__udivsi3>
    mV  = ((uint16_t)result) * 23U;
 8003e6e:	b2a4      	uxth	r4, r4
    mV += (((((uint16_t)result) * 4U) + 5U) / 10U);
 8003e70:	1820      	adds	r0, r4, r0

    return mV;
 8003e72:	b280      	uxth	r0, r0
}
 8003e74:	bd10      	pop	{r4, pc}

08003e76 <st25r3916AdjustRegulators>:


/*******************************************************************************/
ReturnCode st25r3916AdjustRegulators( uint16_t* result_mV )
{
 8003e76:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t result;

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 8003e78:	2180      	movs	r1, #128	@ 0x80
{
 8003e7a:	0005      	movs	r5, r0
    st25r3916SetRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 8003e7c:	202c      	movs	r0, #44	@ 0x2c
 8003e7e:	f000 fb54 	bl	800452a <st25r3916SetRegisterBits>
    st25r3916ClrRegisterBits( ST25R3916_REG_REGULATOR_CONTROL, ST25R3916_REG_REGULATOR_CONTROL_reg_s );
 8003e82:	2180      	movs	r1, #128	@ 0x80
 8003e84:	202c      	movs	r0, #44	@ 0x2c
 8003e86:	f000 fb3e 	bl	8004506 <st25r3916ClrRegisterBits>

    /* Execute Adjust regulators cmd and retrieve result */
    st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_ADJUST_REGULATORS, ST25R3916_REG_REGULATOR_RESULT, ST25R3916_TOUT_ADJUST_REGULATORS, &result );
 8003e8a:	466b      	mov	r3, sp
 8003e8c:	1ddc      	adds	r4, r3, #7
 8003e8e:	0023      	movs	r3, r4
 8003e90:	2206      	movs	r2, #6
 8003e92:	216c      	movs	r1, #108	@ 0x6c
 8003e94:	20d6      	movs	r0, #214	@ 0xd6
 8003e96:	f7ff ffaf 	bl	8003df8 <st25r3916ExecuteCommandAndGetResult>

    /* Calculate result in mV */
    result >>= ST25R3916_REG_REGULATOR_RESULT_reg_shift;
 8003e9a:	7823      	ldrb	r3, [r4, #0]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	7023      	strb	r3, [r4, #0]
    
    if( result_mV != NULL )
 8003ea0:	2d00      	cmp	r5, #0
 8003ea2:	d015      	beq.n	8003ed0 <st25r3916AdjustRegulators+0x5a>
    {
        if( st25r3916CheckReg( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ST25R3916_REG_IO_CONF2_sup3V )  )
 8003ea4:	2280      	movs	r2, #128	@ 0x80
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	0011      	movs	r1, r2
 8003eaa:	f000 fb81 	bl	80045b0 <st25r3916CheckReg>
 8003eae:	23e1      	movs	r3, #225	@ 0xe1
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d007      	beq.n	8003ec4 <st25r3916AdjustRegulators+0x4e>
        {
            result -= ((result>4U) ? (5U) : 0U);          /* In 3.3V mode [0,4] are not used                       */
 8003eb4:	7823      	ldrb	r3, [r4, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d900      	bls.n	8003ebe <st25r3916AdjustRegulators+0x48>
 8003ebc:	3205      	adds	r2, #5
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	7023      	strb	r3, [r4, #0]
            *result_mV = 2400U;                          /* Minimum regulated voltage 2.4V in case of 3.3V supply */
 8003ec2:	2396      	movs	r3, #150	@ 0x96
        else
        {
            *result_mV = 3600U;                          /* Minimum regulated voltage 3.6V in case of 5V supply   */
        }
        
        *result_mV += (uint16_t)result * 100U;           /* 100mV steps in both 3.3V and 5V supply                */
 8003ec4:	2164      	movs	r1, #100	@ 0x64
 8003ec6:	7822      	ldrb	r2, [r4, #0]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	434a      	muls	r2, r1
 8003ecc:	189b      	adds	r3, r3, r2
 8003ece:	802b      	strh	r3, [r5, #0]
    }
    return RFAL_ERR_NONE;
}
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08003ed4 <st25r3916MeasureAmplitude>:


/*******************************************************************************/
ReturnCode st25r3916MeasureAmplitude( uint8_t* result )
{
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	0003      	movs	r3, r0
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_AMPLITUDE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_AMPLITUDE, result );
 8003ed8:	220a      	movs	r2, #10
 8003eda:	2125      	movs	r1, #37	@ 0x25
 8003edc:	20d3      	movs	r0, #211	@ 0xd3
 8003ede:	f7ff ff8b 	bl	8003df8 <st25r3916ExecuteCommandAndGetResult>
}
 8003ee2:	bd10      	pop	{r4, pc}

08003ee4 <st25r3916MeasurePhase>:


/*******************************************************************************/
ReturnCode st25r3916MeasurePhase( uint8_t* result )
{
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	0003      	movs	r3, r0
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_PHASE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_PHASE, result );
 8003ee8:	220a      	movs	r2, #10
 8003eea:	2125      	movs	r1, #37	@ 0x25
 8003eec:	20d9      	movs	r0, #217	@ 0xd9
 8003eee:	f7ff ff83 	bl	8003df8 <st25r3916ExecuteCommandAndGetResult>
}
 8003ef2:	bd10      	pop	{r4, pc}

08003ef4 <st25r3916MeasureCapacitance>:


/*******************************************************************************/
ReturnCode st25r3916MeasureCapacitance( uint8_t* result )
{
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	0003      	movs	r3, r0
#ifdef ST25R3916B
    return RFAL_ERR_NOTSUPP;
#else
    return st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_MEASURE_CAPACITANCE, ST25R3916_REG_AD_RESULT, ST25R3916_TOUT_MEASURE_CAPACITANCE, result );
 8003ef8:	220a      	movs	r2, #10
 8003efa:	2125      	movs	r1, #37	@ 0x25
 8003efc:	20de      	movs	r0, #222	@ 0xde
 8003efe:	f7ff ff7b 	bl	8003df8 <st25r3916ExecuteCommandAndGetResult>
#endif /* ST25R3916B */
}
 8003f02:	bd10      	pop	{r4, pc}

08003f04 <st25r3916CalibrateCapacitiveSensor>:


/*******************************************************************************/
ReturnCode st25r3916CalibrateCapacitiveSensor( uint8_t* result )
{
 8003f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
#else
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3916ClrRegisterBits( ST25R3916_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_cs_mcal_mask );
 8003f06:	21f8      	movs	r1, #248	@ 0xf8
{
 8003f08:	0004      	movs	r4, r0
    st25r3916ClrRegisterBits( ST25R3916_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_cs_mcal_mask );
 8003f0a:	202f      	movs	r0, #47	@ 0x2f
 8003f0c:	f000 fafb 	bl	8004506 <st25r3916ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3916ExecuteCommandAndGetResult( ST25R3916_CMD_CALIBRATE_C_SENSOR, ST25R3916_REG_CAP_SENSOR_RESULT, ST25R3916_TOUT_CALIBRATE_CAP_SENSOR, &res );
 8003f10:	466b      	mov	r3, sp
 8003f12:	1ddd      	adds	r5, r3, #7
 8003f14:	002b      	movs	r3, r5
 8003f16:	2204      	movs	r2, #4
 8003f18:	2130      	movs	r1, #48	@ 0x30
 8003f1a:	20dd      	movs	r0, #221	@ 0xdd
 8003f1c:	f7ff ff6c 	bl	8003df8 <st25r3916ExecuteCommandAndGetResult>
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 8003f20:	2206      	movs	r2, #6
 8003f22:	782b      	ldrb	r3, [r5, #0]
 8003f24:	401a      	ands	r2, r3
 8003f26:	2a04      	cmp	r2, #4
 8003f28:	d106      	bne.n	8003f38 <st25r3916CalibrateCapacitiveSensor+0x34>
        ((res & ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != RFAL_ERR_NONE) )
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d104      	bne.n	8003f38 <st25r3916CalibrateCapacitiveSensor+0x34>
    {
        return RFAL_ERR_IO;
    }
    
    if( result != NULL )
 8003f2e:	2c00      	cmp	r4, #0
 8003f30:	d001      	beq.n	8003f36 <st25r3916CalibrateCapacitiveSensor+0x32>
    {
        (*result) = (uint8_t)(res >> ST25R3916_REG_CAP_SENSOR_RESULT_cs_cal_shift);
 8003f32:	08db      	lsrs	r3, r3, #3
 8003f34:	7023      	strb	r3, [r4, #0]
    }
    
    return RFAL_ERR_NONE;
#endif /* ST25R3916B */    
}
 8003f36:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        return RFAL_ERR_IO;
 8003f38:	2003      	movs	r0, #3
 8003f3a:	e7fc      	b.n	8003f36 <st25r3916CalibrateCapacitiveSensor+0x32>

08003f3c <st25r3916SetBitrate>:


/*******************************************************************************/
ReturnCode st25r3916SetBitrate(uint8_t txrate, uint8_t rxrate)
{
 8003f3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg;

    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 8003f3e:	466b      	mov	r3, sp
 8003f40:	1dde      	adds	r6, r3, #7
{
 8003f42:	000d      	movs	r5, r1
 8003f44:	0004      	movs	r4, r0
    st25r3916ReadRegister( ST25R3916_REG_BIT_RATE, &reg );
 8003f46:	0031      	movs	r1, r6
 8003f48:	2004      	movs	r0, #4
 8003f4a:	f000 f9fa 	bl	8004342 <st25r3916ReadRegister>
    if( rxrate != ST25R3916_BR_DO_NOT_SET )
 8003f4e:	2dff      	cmp	r5, #255	@ 0xff
 8003f50:	d008      	beq.n	8003f64 <st25r3916SetBitrate+0x28>
    {
        if(rxrate > ST25R3916_BR_848)
 8003f52:	2d03      	cmp	r5, #3
 8003f54:	d901      	bls.n	8003f5a <st25r3916SetBitrate+0x1e>
        {
            return RFAL_ERR_PARAM;
 8003f56:	2007      	movs	r0, #7
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;

    }
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );    
}
 8003f58:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_rxrate_mask);     /* MISRA 10.3 */
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	7833      	ldrb	r3, [r6, #0]
 8003f5e:	4393      	bics	r3, r2
        reg |= rxrate << ST25R3916_REG_BIT_RATE_rxrate_shift;
 8003f60:	431d      	orrs	r5, r3
 8003f62:	7035      	strb	r5, [r6, #0]
    if( txrate != ST25R3916_BR_DO_NOT_SET )
 8003f64:	2cff      	cmp	r4, #255	@ 0xff
 8003f66:	d007      	beq.n	8003f78 <st25r3916SetBitrate+0x3c>
        if(txrate > ST25R3916_BR_6780)
 8003f68:	2c07      	cmp	r4, #7
 8003f6a:	d8f4      	bhi.n	8003f56 <st25r3916SetBitrate+0x1a>
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 8003f6c:	2230      	movs	r2, #48	@ 0x30
 8003f6e:	7833      	ldrb	r3, [r6, #0]
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 8003f70:	0124      	lsls	r4, r4, #4
        reg = (uint8_t)(reg & ~ST25R3916_REG_BIT_RATE_txrate_mask);     /* MISRA 10.3 */
 8003f72:	4393      	bics	r3, r2
        reg |= txrate<<ST25R3916_REG_BIT_RATE_txrate_shift;
 8003f74:	431c      	orrs	r4, r3
 8003f76:	7034      	strb	r4, [r6, #0]
    return st25r3916WriteRegister( ST25R3916_REG_BIT_RATE, reg );    
 8003f78:	7831      	ldrb	r1, [r6, #0]
 8003f7a:	2004      	movs	r0, #4
 8003f7c:	f000 f9ee 	bl	800435c <st25r3916WriteRegister>
 8003f80:	e7ea      	b.n	8003f58 <st25r3916SetBitrate+0x1c>
	...

08003f84 <st25r3916PerformCollisionAvoidance>:


/*******************************************************************************/
ReturnCode st25r3916PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	0006      	movs	r6, r0
 8003f88:	001f      	movs	r7, r3
    uint8_t    treMask;
    uint32_t   irqs;
    ReturnCode err;
    
    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 8003f8a:	0033      	movs	r3, r6
 8003f8c:	3338      	adds	r3, #56	@ 0x38
 8003f8e:	b2db      	uxtb	r3, r3
{
 8003f90:	000c      	movs	r4, r1
 8003f92:	0010      	movs	r0, r2
    {
        return RFAL_ERR_PARAM;
 8003f94:	2507      	movs	r5, #7
    if( (FieldONCmd != ST25R3916_CMD_INITIAL_RF_COLLISION) && (FieldONCmd != ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d827      	bhi.n	8003fea <st25r3916PerformCollisionAvoidance+0x66>
    
    err = RFAL_ERR_INTERNAL;
    
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 8003f9a:	29ff      	cmp	r1, #255	@ 0xff
 8003f9c:	d127      	bne.n	8003fee <st25r3916PerformCollisionAvoidance+0x6a>
    {
        treMask = 0;
 8003f9e:	2300      	movs	r3, #0
    if( (pdThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET) )
 8003fa0:	2aff      	cmp	r2, #255	@ 0xff
 8003fa2:	d128      	bne.n	8003ff6 <st25r3916PerformCollisionAvoidance+0x72>
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
    }
    
    /* Set n x TRFW */
    st25r3916ChangeRegisterBits( ST25R3916_REG_AUX, ST25R3916_REG_AUX_nfc_n_mask, nTRFW );
 8003fa4:	003a      	movs	r2, r7
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	200a      	movs	r0, #10
 8003faa:	f000 fae6 	bl	800457a <st25r3916ChangeRegisterBits>
        
    /*******************************************************************************/
    /* Enable and clear CA specific interrupts and execute command */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 8003fae:	481c      	ldr	r0, [pc, #112]	@ (8004020 <st25r3916PerformCollisionAvoidance+0x9c>)
 8003fb0:	f000 fbc4 	bl	800473c <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 8003fb4:	481a      	ldr	r0, [pc, #104]	@ (8004020 <st25r3916PerformCollisionAvoidance+0x9c>)
 8003fb6:	f000 fbed 	bl	8004794 <st25r3916EnableInterrupts>
    
    st25r3916ExecuteCommand( FieldONCmd );
 8003fba:	0030      	movs	r0, r6
 8003fbc:	f000 fa57 	bl	800446e <st25r3916ExecuteCommand>
    
    /*******************************************************************************/
    /* Wait for initial APON interrupt, indicating anticollision avoidance done and ST25R3916's 
     * field is now on, or a CAC indicating a collision */   
    irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_APON ), ST25R3916_TOUT_CA );    
 8003fc0:	210a      	movs	r1, #10
 8003fc2:	4818      	ldr	r0, [pc, #96]	@ (8004024 <st25r3916PerformCollisionAvoidance+0xa0>)
 8003fc4:	f000 fb80 	bl	80046c8 <st25r3916WaitForInterruptsTimed>
   
    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 8003fc8:	2380      	movs	r3, #128	@ 0x80
 8003fca:	0004      	movs	r4, r0
 8003fcc:	00db      	lsls	r3, r3, #3
    {        
        err = RFAL_ERR_RF_COLLISION;
 8003fce:	251d      	movs	r5, #29
    if( (ST25R3916_IRQ_MASK_CAC & irqs) != 0U )        /* Collision occurred */
 8003fd0:	401c      	ands	r4, r3
 8003fd2:	4218      	tst	r0, r3
 8003fd4:	d102      	bne.n	8003fdc <st25r3916PerformCollisionAvoidance+0x58>
    }
    else if( (ST25R3916_IRQ_MASK_APON & irqs) != 0U )
 8003fd6:	0080      	lsls	r0, r0, #2
 8003fd8:	d418      	bmi.n	800400c <st25r3916PerformCollisionAvoidance+0x88>
    err = RFAL_ERR_INTERNAL;
 8003fda:	250c      	movs	r5, #12
    {
        /* MISRA 15.7 - Empty else */
    }

    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3916GetInterrupt( (ST25R3916_IRQ_MASK_EOF | ST25R3916_IRQ_MASK_EON) );
 8003fdc:	20c0      	movs	r0, #192	@ 0xc0
 8003fde:	0140      	lsls	r0, r0, #5
 8003fe0:	f000 fbac 	bl	800473c <st25r3916GetInterrupt>
    st25r3916DisableInterrupts( (ST25R3916_IRQ_MASK_CAC | ST25R3916_IRQ_MASK_CAT | ST25R3916_IRQ_MASK_APON) );
 8003fe4:	480e      	ldr	r0, [pc, #56]	@ (8004020 <st25r3916PerformCollisionAvoidance+0x9c>)
 8003fe6:	f000 fbe2 	bl	80047ae <st25r3916DisableInterrupts>
    
    return err;
}
 8003fea:	0028      	movs	r0, r5
 8003fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(caThreshold != ST25R3916_THRESHOLD_DO_NOT_SET)
 8003fee:	2170      	movs	r1, #112	@ 0x70
 8003ff0:	2aff      	cmp	r2, #255	@ 0xff
 8003ff2:	d002      	beq.n	8003ffa <st25r3916PerformCollisionAvoidance+0x76>
 8003ff4:	000b      	movs	r3, r1
            treMask |= ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask;
 8003ff6:	210f      	movs	r1, #15
 8003ff8:	4319      	orrs	r1, r3
        st25r3916ChangeRegisterBits( ST25R3916_REG_FIELD_THRESHOLD_ACTV, treMask, (pdThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_trg_mask) | (caThreshold & ST25R3916_REG_FIELD_THRESHOLD_ACTV_rfe_mask ) );
 8003ffa:	230f      	movs	r3, #15
 8003ffc:	2270      	movs	r2, #112	@ 0x70
 8003ffe:	4018      	ands	r0, r3
 8004000:	4022      	ands	r2, r4
 8004002:	4302      	orrs	r2, r0
 8004004:	202a      	movs	r0, #42	@ 0x2a
 8004006:	f000 fab8 	bl	800457a <st25r3916ChangeRegisterBits>
 800400a:	e7cb      	b.n	8003fa4 <st25r3916PerformCollisionAvoidance+0x20>
        irqs = st25r3916WaitForInterruptsTimed( ( ST25R3916_IRQ_MASK_CAT ), ST25R3916_TOUT_CA );        
 800400c:	2580      	movs	r5, #128	@ 0x80
 800400e:	00ad      	lsls	r5, r5, #2
 8004010:	210a      	movs	r1, #10
 8004012:	0028      	movs	r0, r5
 8004014:	f000 fb58 	bl	80046c8 <st25r3916WaitForInterruptsTimed>
        if( (ST25R3916_IRQ_MASK_CAT & irqs) != 0U )                             /* No Collision detected, Field On */
 8004018:	4228      	tst	r0, r5
 800401a:	d0de      	beq.n	8003fda <st25r3916PerformCollisionAvoidance+0x56>
            err = RFAL_ERR_NONE;
 800401c:	0025      	movs	r5, r4
 800401e:	e7dd      	b.n	8003fdc <st25r3916PerformCollisionAvoidance+0x58>
 8004020:	20000600 	.word	0x20000600
 8004024:	20000400 	.word	0x20000400

08004028 <st25r3916SetNumTxBits>:


/*******************************************************************************/
void st25r3916SetNumTxBits( uint16_t nBits )
{
 8004028:	b510      	push	{r4, lr}
 800402a:	0004      	movs	r4, r0
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xFFU) );
 800402c:	b2c1      	uxtb	r1, r0
 800402e:	2023      	movs	r0, #35	@ 0x23
 8004030:	f000 f994 	bl	800435c <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xFFU) );
 8004034:	0a21      	lsrs	r1, r4, #8
 8004036:	2022      	movs	r0, #34	@ 0x22
 8004038:	f000 f990 	bl	800435c <st25r3916WriteRegister>
}
 800403c:	bd10      	pop	{r4, pc}

0800403e <st25r3916GetNumFIFOBytes>:


/*******************************************************************************/
uint16_t st25r3916GetNumFIFOBytes( void )
{
 800403e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t  reg;
    uint16_t result;
    
    
    st25r3916ReadRegister( ST25R3916_REG_FIFO_STATUS2, &reg );
 8004040:	466b      	mov	r3, sp
 8004042:	1ddd      	adds	r5, r3, #7
 8004044:	0029      	movs	r1, r5
 8004046:	201f      	movs	r0, #31
 8004048:	f000 f97b 	bl	8004342 <st25r3916ReadRegister>
    reg    = ((reg & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift);
 800404c:	7828      	ldrb	r0, [r5, #0]
    result = ((uint16_t)reg << 8);
    
    st25r3916ReadRegister( ST25R3916_REG_FIFO_STATUS1, &reg );
 800404e:	0029      	movs	r1, r5
    reg    = ((reg & ST25R3916_REG_FIFO_STATUS2_fifo_b_mask) >> ST25R3916_REG_FIFO_STATUS2_fifo_b_shift);
 8004050:	0980      	lsrs	r0, r0, #6
 8004052:	7028      	strb	r0, [r5, #0]
    result = ((uint16_t)reg << 8);
 8004054:	0204      	lsls	r4, r0, #8
    st25r3916ReadRegister( ST25R3916_REG_FIFO_STATUS1, &reg );
 8004056:	201e      	movs	r0, #30
 8004058:	f000 f973 	bl	8004342 <st25r3916ReadRegister>
    result |= (((uint16_t)reg) & 0x00FFU);
 800405c:	7828      	ldrb	r0, [r5, #0]
 800405e:	4320      	orrs	r0, r4

    return result;
}
 8004060:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

08004064 <st25r3916SetNoResponseTime>:
    
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
    
    
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 8004064:	2380      	movs	r3, #128	@ 0x80
{    
 8004066:	b570      	push	{r4, r5, r6, lr}
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 8004068:	025b      	lsls	r3, r3, #9
{    
 800406a:	0004      	movs	r4, r0
    if( tmpNRT > ST25R3916_NRT_MAX )                                   /* Check if the given NRT value fits using 64/fc steps */
 800406c:	4298      	cmp	r0, r3
 800406e:	d31c      	bcc.n	80040aa <st25r3916SetNoResponseTime+0x46>
    {
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
        
        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 8004070:	2380      	movs	r3, #128	@ 0x80
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 8004072:	343f      	adds	r4, #63	@ 0x3f
        if( tmpNRT > ST25R3916_NRT_MAX )                               /* Check if the NRT value fits using 64/fc steps       */
 8004074:	03db      	lsls	r3, r3, #15
 8004076:	429c      	cmp	r4, r3
 8004078:	d214      	bcs.n	80040a4 <st25r3916SetNoResponseTime+0x40>
    err    = RFAL_ERR_NONE;
 800407a:	2500      	movs	r5, #0
        tmpNRT = ((tmpNRT + 63U) / 64U);                               /* Calculate number of steps in 4096/fc                */
 800407c:	09a4      	lsrs	r4, r4, #6
        nrt_step  = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_4096_fc;  /* If not, change NRT set to 4096/fc                   */
 800407e:	2201      	movs	r2, #1
        {
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
            err = RFAL_ERR_PARAM;                                           /* Signal parameter error                              */
        }
        gST25R3916NRT_64fcs = (64U * tmpNRT);
 8004080:	01a3      	lsls	r3, r4, #6
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 8004082:	490c      	ldr	r1, [pc, #48]	@ (80040b4 <st25r3916SetNoResponseTime+0x50>)
    }

    /* Set the ST25R3916 NRT step units and the value */
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 8004084:	2012      	movs	r0, #18
    gST25R3916NRT_64fcs = tmpNRT;                                      /* Store given NRT value in 64/fc into local var       */
 8004086:	600b      	str	r3, [r1, #0]
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step, nrt_step );
 8004088:	2101      	movs	r1, #1
 800408a:	f000 fa76 	bl	800457a <st25r3916ChangeRegisterBits>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER1, (uint8_t)(tmpNRT >> 8U) );
 800408e:	0a21      	lsrs	r1, r4, #8
 8004090:	b2c9      	uxtb	r1, r1
 8004092:	2010      	movs	r0, #16
 8004094:	f000 f962 	bl	800435c <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_NO_RESPONSE_TIMER2, (uint8_t)(tmpNRT & 0xFFU) );
 8004098:	b2e1      	uxtb	r1, r4
 800409a:	2011      	movs	r0, #17
 800409c:	f000 f95e 	bl	800435c <st25r3916WriteRegister>

    return err;
}
 80040a0:	0028      	movs	r0, r5
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
            err = RFAL_ERR_PARAM;                                           /* Signal parameter error                              */
 80040a4:	2507      	movs	r5, #7
            tmpNRT = ST25R3916_NRT_MAX;                                /* Assign the maximum possible                         */
 80040a6:	4c04      	ldr	r4, [pc, #16]	@ (80040b8 <st25r3916SetNoResponseTime+0x54>)
 80040a8:	e7e9      	b.n	800407e <st25r3916SetNoResponseTime+0x1a>
    nrt_step = ST25R3916_REG_TIMER_EMV_CONTROL_nrt_step_64fc;          /* Set default NRT in steps of 64/fc                   */
 80040aa:	2200      	movs	r2, #0
 80040ac:	0003      	movs	r3, r0
    err    = RFAL_ERR_NONE;
 80040ae:	0015      	movs	r5, r2
 80040b0:	e7e7      	b.n	8004082 <st25r3916SetNoResponseTime+0x1e>
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	20000d48 	.word	0x20000d48
 80040b8:	0000ffff 	.word	0x0000ffff

080040bc <st25r3916SetGPTime>:
}


/*******************************************************************************/
void st25r3916SetGPTime( uint16_t gpt_8fcs )
{
 80040bc:	b510      	push	{r4, lr}
 80040be:	0004      	movs	r4, r0
    st25r3916WriteRegister( ST25R3916_REG_GPT1, (uint8_t)(gpt_8fcs >> 8) );
 80040c0:	0a01      	lsrs	r1, r0, #8
 80040c2:	2013      	movs	r0, #19
 80040c4:	f000 f94a 	bl	800435c <st25r3916WriteRegister>
    st25r3916WriteRegister( ST25R3916_REG_GPT2, (uint8_t)(gpt_8fcs & 0xFFU) );
 80040c8:	b2e1      	uxtb	r1, r4
 80040ca:	2014      	movs	r0, #20
 80040cc:	f000 f946 	bl	800435c <st25r3916WriteRegister>
}
 80040d0:	bd10      	pop	{r4, pc}

080040d2 <st25r3916SetStartGPTimer>:


/*******************************************************************************/
ReturnCode st25r3916SetStartGPTimer( uint16_t gpt_8fcs, uint8_t trigger_source )
{
 80040d2:	b510      	push	{r4, lr}
 80040d4:	000c      	movs	r4, r1
    st25r3916SetGPTime( gpt_8fcs );
 80040d6:	f7ff fff1 	bl	80040bc <st25r3916SetGPTime>
    st25r3916ChangeRegisterBits( ST25R3916_REG_TIMER_EMV_CONTROL, ST25R3916_REG_TIMER_EMV_CONTROL_gptc_mask, trigger_source );
 80040da:	0022      	movs	r2, r4
 80040dc:	21e0      	movs	r1, #224	@ 0xe0
 80040de:	2012      	movs	r0, #18
 80040e0:	f000 fa4b 	bl	800457a <st25r3916ChangeRegisterBits>
    
    /* If there's no trigger source, start GPT immediately */
    if( trigger_source == ST25R3916_REG_TIMER_EMV_CONTROL_gptc_no_trigger )
 80040e4:	2c00      	cmp	r4, #0
 80040e6:	d102      	bne.n	80040ee <st25r3916SetStartGPTimer+0x1c>
    {
        st25r3916ExecuteCommand( ST25R3916_CMD_START_GP_TIMER );
 80040e8:	20e0      	movs	r0, #224	@ 0xe0
 80040ea:	f000 f9c0 	bl	800446e <st25r3916ExecuteCommand>
    }

    return RFAL_ERR_NONE;
}
 80040ee:	2000      	movs	r0, #0
 80040f0:	bd10      	pop	{r4, pc}

080040f2 <st25r3916CheckChipID>:


/*******************************************************************************/
bool st25r3916CheckChipID( uint8_t *rev )
{
 80040f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t ID;
    
    ID = 0;
 80040f4:	466b      	mov	r3, sp
 80040f6:	2400      	movs	r4, #0
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 80040f8:	1dd9      	adds	r1, r3, #7
{
 80040fa:	0005      	movs	r5, r0
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 80040fc:	203f      	movs	r0, #63	@ 0x3f
    ID = 0;
 80040fe:	71dc      	strb	r4, [r3, #7]
    st25r3916ReadRegister( ST25R3916_REG_IC_IDENTITY, &ID );
 8004100:	f000 f91f 	bl	8004342 <st25r3916ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3916's IC type code */
#if defined(ST25R3916)
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 8004104:	466b      	mov	r3, sp
 8004106:	79db      	ldrb	r3, [r3, #7]
 8004108:	2207      	movs	r2, #7
 800410a:	0019      	movs	r1, r3
    {
        return false;
 800410c:	0020      	movs	r0, r4
    if( (ID & ST25R3916_REG_IC_IDENTITY_ic_type_mask) != ST25R3916_REG_IC_IDENTITY_ic_type_st25r3916 )
 800410e:	4391      	bics	r1, r2
 8004110:	2928      	cmp	r1, #40	@ 0x28
 8004112:	d102      	bne.n	800411a <st25r3916CheckChipID+0x28>
        return false;
    }
#endif /* ST25R3916 */
    
        
    if(rev != NULL)
 8004114:	42a5      	cmp	r5, r4
 8004116:	d101      	bne.n	800411c <st25r3916CheckChipID+0x2a>
    {
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
    }
    
    return true;
 8004118:	2001      	movs	r0, #1
}
 800411a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        *rev = (ID & ST25R3916_REG_IC_IDENTITY_ic_rev_mask);
 800411c:	4013      	ands	r3, r2
 800411e:	702b      	strb	r3, [r5, #0]
 8004120:	e7fa      	b.n	8004118 <st25r3916CheckChipID+0x26>
	...

08004124 <st25r3916Initialize>:
    platformSpiDeselect();
 8004124:	2090      	movs	r0, #144	@ 0x90
{
 8004126:	b510      	push	{r4, lr}
    platformSpiDeselect();
 8004128:	2201      	movs	r2, #1
 800412a:	2110      	movs	r1, #16
 800412c:	05c0      	lsls	r0, r0, #23
 800412e:	f000 feab 	bl	8004e88 <HAL_GPIO_WritePin>
    st25r3916ExecuteCommand( ST25R3916_CMD_SET_DEFAULT );
 8004132:	20c1      	movs	r0, #193	@ 0xc1
 8004134:	f000 f99b 	bl	800446e <st25r3916ExecuteCommand>
    st25r3916WriteRegister(ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_io_drv_lvl);
 8004138:	2104      	movs	r1, #4
 800413a:	2001      	movs	r0, #1
 800413c:	f000 f90e 	bl	800435c <st25r3916WriteRegister>
    if( !st25r3916CheckChipID( NULL ) )
 8004140:	2000      	movs	r0, #0
 8004142:	f7ff ffd6 	bl	80040f2 <st25r3916CheckChipID>
 8004146:	2800      	cmp	r0, #0
 8004148:	d106      	bne.n	8004158 <st25r3916Initialize+0x34>
        platformErrorHandle();
 800414a:	2177      	movs	r1, #119	@ 0x77
 800414c:	481a      	ldr	r0, [pc, #104]	@ (80041b8 <st25r3916Initialize+0x94>)
 800414e:	f00c f829 	bl	80101a4 <_Error_Handler>
        return RFAL_ERR_HW_MISMATCH;
 8004152:	2424      	movs	r4, #36	@ 0x24
}
 8004154:	0020      	movs	r0, r4
 8004156:	bd10      	pop	{r4, pc}
    st25r3916InitInterrupts();
 8004158:	f000 fa40 	bl	80045dc <st25r3916InitInterrupts>
    st25r3916ledInit();
 800415c:	f000 fb5a 	bl	8004814 <st25r3916ledInit>
    gST25R3916NRT_64fcs = 0;
 8004160:	2200      	movs	r2, #0
 8004162:	4b16      	ldr	r3, [pc, #88]	@ (80041bc <st25r3916Initialize+0x98>)
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 8004164:	2118      	movs	r1, #24
 8004166:	2001      	movs	r0, #1
    gST25R3916NRT_64fcs = 0;
 8004168:	601a      	str	r2, [r3, #0]
    st25r3916SetRegisterBits(ST25R3916_REG_IO_CONF2, ( ST25R3916_REG_IO_CONF2_miso_pd1 | ST25R3916_REG_IO_CONF2_miso_pd2 ) );
 800416a:	f000 f9de 	bl	800452a <st25r3916SetRegisterBits>
    st25r3916ChangeTestRegisterBits( 0x04, 0x10, 0x10 );
 800416e:	2210      	movs	r2, #16
 8004170:	2004      	movs	r0, #4
 8004172:	0011      	movs	r1, r2
 8004174:	f000 fa06 	bl	8004584 <st25r3916ChangeTestRegisterBits>
    ret = st25r3916OscOn();
 8004178:	f7ff fe1b 	bl	8003db2 <st25r3916OscOn>
 800417c:	1e04      	subs	r4, r0, #0
    if( ret != RFAL_ERR_NONE )
 800417e:	d004      	beq.n	800418a <st25r3916Initialize+0x66>
        platformErrorHandle();
 8004180:	21b3      	movs	r1, #179	@ 0xb3
 8004182:	480d      	ldr	r0, [pc, #52]	@ (80041b8 <st25r3916Initialize+0x94>)
 8004184:	f00c f80e 	bl	80101a4 <_Error_Handler>
        return ret;
 8004188:	e7e4      	b.n	8004154 <st25r3916Initialize+0x30>
    vdd_mV = st25r3916MeasureVoltage( ST25R3916_REG_REGULATOR_CONTROL_mpsv_vdd );
 800418a:	f7ff fe66 	bl	8003e5a <st25r3916MeasureVoltage>
    st25r3916ChangeRegisterBits( ST25R3916_REG_IO_CONF2, ST25R3916_REG_IO_CONF2_sup3V, ((vdd_mV < ST25R3916_SUPPLY_THRESHOLD) ? ST25R3916_REG_IO_CONF2_sup3V_3V : ST25R3916_REG_IO_CONF2_sup3V_5V) );
 800418e:	22e1      	movs	r2, #225	@ 0xe1
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	4290      	cmp	r0, r2
 8004194:	4192      	sbcs	r2, r2
 8004196:	4252      	negs	r2, r2
 8004198:	01d2      	lsls	r2, r2, #7
 800419a:	2180      	movs	r1, #128	@ 0x80
 800419c:	2001      	movs	r0, #1
 800419e:	f000 f9ec 	bl	800457a <st25r3916ChangeRegisterBits>
    st25r3916TxRxOff();
 80041a2:	2148      	movs	r1, #72	@ 0x48
 80041a4:	2002      	movs	r0, #2
 80041a6:	f000 f9ae 	bl	8004506 <st25r3916ClrRegisterBits>
    st25r3916DisableInterrupts( ST25R3916_IRQ_MASK_ALL );
 80041aa:	2001      	movs	r0, #1
 80041ac:	4240      	negs	r0, r0
 80041ae:	f000 fafe 	bl	80047ae <st25r3916DisableInterrupts>
    st25r3916ClearInterrupts();
 80041b2:	f000 fb03 	bl	80047bc <st25r3916ClearInterrupts>
    return RFAL_ERR_NONE;
 80041b6:	e7cd      	b.n	8004154 <st25r3916Initialize+0x30>
 80041b8:	08010f7f 	.word	0x08010f7f
 80041bc:	20000d48 	.word	0x20000d48

080041c0 <st25r3916StreamConfigure>:
}


/*******************************************************************************/
ReturnCode st25r3916StreamConfigure(const struct st25r3916StreamConfig *config)
{
 80041c0:	b570      	push	{r4, r5, r6, lr}
    uint8_t smd;
    uint8_t mode;

    smd = 0;
    
    if( config->useBPSK != 0U )
 80041c2:	7801      	ldrb	r1, [r0, #0]
{
 80041c4:	0002      	movs	r2, r0
    {
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 80041c6:	7843      	ldrb	r3, [r0, #1]
    if( config->useBPSK != 0U )
 80041c8:	2900      	cmp	r1, #0
 80041ca:	d020      	beq.n	800420e <st25r3916StreamConfigure+0x4e>
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 80041cc:	1e99      	subs	r1, r3, #2
        {
            return RFAL_ERR_PARAM;
 80041ce:	2007      	movs	r0, #7
        if( (config->din<2U) || (config->din>4U) ) /* not in fc/4 .. fc/16 */
 80041d0:	2902      	cmp	r1, #2
 80041d2:	d81b      	bhi.n	800420c <st25r3916StreamConfigure+0x4c>
        }
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 80041d4:	2104      	movs	r1, #4
        mode = ST25R3916_REG_MODE_om_bpsk_stream;
 80041d6:	2478      	movs	r4, #120	@ 0x78
        smd |= ((4U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 80041d8:	1ac9      	subs	r1, r1, r3
 80041da:	0149      	lsls	r1, r1, #5
 80041dc:	b2c9      	uxtb	r1, r1
        {
            return RFAL_ERR_PARAM;
        }
    }

    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 80041de:	2307      	movs	r3, #7
 80041e0:	7895      	ldrb	r5, [r2, #2]
            return RFAL_ERR_PARAM;
 80041e2:	0018      	movs	r0, r3
    if( (config->dout<1U) || (config->dout>7U) ) /* not in fc/2 .. fc/128 */
 80041e4:	1e6e      	subs	r6, r5, #1
 80041e6:	2e06      	cmp	r6, #6
 80041e8:	d810      	bhi.n	800420c <st25r3916StreamConfigure+0x4c>
    {
        return RFAL_ERR_PARAM;
    }
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;

    if( config->report_period_length > 3U )
 80041ea:	78d2      	ldrb	r2, [r2, #3]
 80041ec:	2a03      	cmp	r2, #3
 80041ee:	d80d      	bhi.n	800420c <st25r3916StreamConfigure+0x4c>
    {
        return RFAL_ERR_PARAM;
    }
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 80041f0:	00d2      	lsls	r2, r2, #3
    smd |= (7U - config->dout) << ST25R3916_REG_STREAM_MODE_stx_shift;
 80041f2:	1b5b      	subs	r3, r3, r5
    smd |= (config->report_period_length << ST25R3916_REG_STREAM_MODE_scp_shift);
 80041f4:	4313      	orrs	r3, r2
 80041f6:	4319      	orrs	r1, r3

    st25r3916WriteRegister(ST25R3916_REG_STREAM_MODE, smd);
 80041f8:	b2c9      	uxtb	r1, r1
 80041fa:	3002      	adds	r0, #2
 80041fc:	f000 f8ae 	bl	800435c <st25r3916WriteRegister>
    st25r3916ChangeRegisterBits(ST25R3916_REG_MODE, ST25R3916_REG_MODE_om_mask, mode);
 8004200:	0022      	movs	r2, r4
 8004202:	2178      	movs	r1, #120	@ 0x78
 8004204:	2003      	movs	r0, #3
 8004206:	f000 f9b8 	bl	800457a <st25r3916ChangeRegisterBits>

    return RFAL_ERR_NONE;
 800420a:	2000      	movs	r0, #0
}
 800420c:	bd70      	pop	{r4, r5, r6, pc}
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 800420e:	1ed9      	subs	r1, r3, #3
            return RFAL_ERR_PARAM;
 8004210:	2007      	movs	r0, #7
        if( (config->din<3U) || (config->din>6U) ) /* not in fc/8 .. fc/64 */
 8004212:	2903      	cmp	r1, #3
 8004214:	d8fa      	bhi.n	800420c <st25r3916StreamConfigure+0x4c>
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 8004216:	2106      	movs	r1, #6
 8004218:	1ac9      	subs	r1, r1, r3
        if( config->report_period_length == 0U )
 800421a:	78d3      	ldrb	r3, [r2, #3]
        smd |= ((6U - config->din) << ST25R3916_REG_STREAM_MODE_scf_shift);
 800421c:	0149      	lsls	r1, r1, #5
 800421e:	b2c9      	uxtb	r1, r1
        if( config->report_period_length == 0U )
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f3      	beq.n	800420c <st25r3916StreamConfigure+0x4c>
        mode = ST25R3916_REG_MODE_om_subcarrier_stream;
 8004224:	2470      	movs	r4, #112	@ 0x70
 8004226:	e7da      	b.n	80041de <st25r3916StreamConfigure+0x1e>

08004228 <st25r3916comStop>:
#ifdef RFAL_USE_I2C
    /* Generate Stop signal */
    st25r3916I2CStop();
#else
    /* Release the chip select */
    platformSpiDeselect();
 8004228:	2090      	movs	r0, #144	@ 0x90
 800422a:	2201      	movs	r2, #1
 800422c:	2110      	movs	r1, #16
{
 800422e:	b510      	push	{r4, lr}
    platformSpiDeselect();
 8004230:	05c0      	lsls	r0, r0, #23
 8004232:	f000 fe29 	bl	8004e88 <HAL_GPIO_WritePin>
#endif /* RFAL_USE_I2C */
    
    /* reEnable the ST25R3916 interrupt */
    platformUnprotectST25RComm();
 8004236:	4a05      	ldr	r2, [pc, #20]	@ (800424c <st25r3916comStop+0x24>)
 8004238:	7813      	ldrb	r3, [r2, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	7013      	strb	r3, [r2, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d102      	bne.n	800424a <st25r3916comStop+0x22>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004244:	2220      	movs	r2, #32
 8004246:	4b02      	ldr	r3, [pc, #8]	@ (8004250 <st25r3916comStop+0x28>)
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bd10      	pop	{r4, pc}
 800424c:	200023a4 	.word	0x200023a4
 8004250:	e000e100 	.word	0xe000e100

08004254 <st25r3916comTx.part.0>:
}
#endif /* RFAL_USE_I2C */


/*******************************************************************************/
static void st25r3916comTx( const uint8_t* txBuf, uint16_t txLen, bool last, bool txOnly )
 8004254:	b510      	push	{r4, lr}
 8004256:	000a      	movs	r2, r1
            {
                platformSpiTxRx( comBuf, NULL, comBufIt );
            }
            
        #else
            platformSpiTxRx( txBuf, NULL, txLen );
 8004258:	2100      	movs	r1, #0
 800425a:	f00b f961 	bl	800f520 <BSP_NFC0XCOMM_SendRecv>
        #endif /* ST25R_COM_SINGLETXRX */
            
#endif /* RFAL_USE_I2C */
    }
}
 800425e:	bd10      	pop	{r4, pc}

08004260 <st25r3916comRx.part.0>:


/*******************************************************************************/
static void st25r3916comRx( uint8_t* rxBuf, uint16_t rxLen )
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	0004      	movs	r4, r0
 8004264:	000d      	movs	r5, r1
    #ifdef ST25R_COM_SINGLETXRX
        RFAL_MEMSET( &comBuf[comBufIt], 0x00, RFAL_MIN( rxLen, (uint16_t)(ST25R3916_BUF_LEN - comBufIt) ) );     /* clear outgoing buffer                                  */
        platformSpiTxRx( comBuf, comBuf, RFAL_MIN( (comBufIt + rxLen), ST25R3916_BUF_LEN ) );                  /* transceive as a single SPI call                        */
        RFAL_MEMCPY( rxBuf, &comBuf[comBufIt], RFAL_MIN( rxLen, (uint16_t)(ST25R3916_BUF_LEN - comBufIt) ) );    /* copy from local buf to output buffer and skip cmd byte */
    #else
        if( rxBuf != NULL)
 8004266:	2800      	cmp	r0, #0
 8004268:	d003      	beq.n	8004272 <st25r3916comRx.part.0+0x12>
        {
            RFAL_MEMSET( rxBuf, 0x00, rxLen );                                                              /* clear outgoing buffer                                  */
 800426a:	000a      	movs	r2, r1
 800426c:	2100      	movs	r1, #0
 800426e:	f00c f82b 	bl	80102c8 <memset>
        }
        platformSpiTxRx( NULL, rxBuf, rxLen );
 8004272:	002a      	movs	r2, r5
 8004274:	0021      	movs	r1, r4
 8004276:	2000      	movs	r0, #0
 8004278:	f00b f952 	bl	800f520 <BSP_NFC0XCOMM_SendRecv>
    #endif /* ST25R_COM_SINGLETXRX */
#endif /* RFAL_USE_I2C */
    }
}
 800427c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004280 <st25r3916comStart>:
{
 8004280:	b510      	push	{r4, lr}
    platformProtectST25RComm();
 8004282:	4a0c      	ldr	r2, [pc, #48]	@ (80042b4 <st25r3916comStart+0x34>)
 8004284:	7813      	ldrb	r3, [r2, #0]
 8004286:	3301      	adds	r3, #1
 8004288:	7013      	strb	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800428a:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428e:	2220      	movs	r2, #32
 8004290:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <st25r3916comStart+0x38>)
 8004292:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004294:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004298:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 800429c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80042a0:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 80042a4:	2090      	movs	r0, #144	@ 0x90
 80042a6:	2200      	movs	r2, #0
 80042a8:	2110      	movs	r1, #16
 80042aa:	05c0      	lsls	r0, r0, #23
 80042ac:	f000 fdec 	bl	8004e88 <HAL_GPIO_WritePin>
}
 80042b0:	bd10      	pop	{r4, pc}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	200023a4 	.word	0x200023a4
 80042b8:	e000e104 	.word	0xe000e104

080042bc <st25r3916ReadMultipleRegisters.part.0>:
    return st25r3916ReadMultipleRegisters( reg, val, ST25R3916_REG_LEN );
}


/*******************************************************************************/
ReturnCode st25r3916ReadMultipleRegisters( uint8_t reg, uint8_t* values, uint8_t length )
 80042bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042be:	0004      	movs	r4, r0
 80042c0:	000d      	movs	r5, r1
 80042c2:	0016      	movs	r6, r2
{
    if( length > 0U )
    {
        st25r3916comStart();
 80042c4:	f7ff ffdc 	bl	8004280 <st25r3916comStart>
        
        /* If is a space-B register send a direct command first */
        if( (reg & ST25R3916_SPACE_B) != 0U )
 80042c8:	0663      	lsls	r3, r4, #25
 80042ca:	d506      	bpl.n	80042da <st25r3916ReadMultipleRegisters.part.0+0x1e>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80042cc:	466a      	mov	r2, sp
 80042ce:	23fb      	movs	r3, #251	@ 0xfb
 80042d0:	2101      	movs	r1, #1
 80042d2:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 80042d4:	1dd0      	adds	r0, r2, #7
 80042d6:	f7ff ffbd 	bl	8004254 <st25r3916comTx.part.0>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, false );
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 80042da:	2340      	movs	r3, #64	@ 0x40
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80042dc:	466a      	mov	r2, sp
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_READ_MODE), true, false );
 80042de:	4323      	orrs	r3, r4
 80042e0:	1dd0      	adds	r0, r2, #7
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80042e2:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 80042e4:	2101      	movs	r1, #1
 80042e6:	f7ff ffb5 	bl	8004254 <st25r3916comTx.part.0>
    if( rxLen > 0U )
 80042ea:	0031      	movs	r1, r6
 80042ec:	0028      	movs	r0, r5
 80042ee:	f7ff ffb7 	bl	8004260 <st25r3916comRx.part.0>
        st25r3916comRepeatStart();
        st25r3916comRx( values, length );
        st25r3916comStop();
 80042f2:	f7ff ff99 	bl	8004228 <st25r3916comStop>
    }
    
    return RFAL_ERR_NONE;
}
 80042f6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080042f8 <st25r3916WriteMultipleRegisters.part.0>:
    return st25r3916WriteMultipleRegisters( reg, &value, ST25R3916_REG_LEN );
}


/*******************************************************************************/
ReturnCode st25r3916WriteMultipleRegisters( uint8_t reg, const uint8_t* values, uint8_t length )
 80042f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042fa:	0004      	movs	r4, r0
 80042fc:	000d      	movs	r5, r1
 80042fe:	0016      	movs	r6, r2
{
    if( length > 0U )
    {
        st25r3916comStart();
 8004300:	f7ff ffbe 	bl	8004280 <st25r3916comStart>
        
        if( (reg & ST25R3916_SPACE_B) != 0U )
 8004304:	0663      	lsls	r3, r4, #25
 8004306:	d506      	bpl.n	8004316 <st25r3916WriteMultipleRegisters.part.0+0x1e>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8004308:	466a      	mov	r2, sp
 800430a:	23fb      	movs	r3, #251	@ 0xfb
 800430c:	2101      	movs	r1, #1
 800430e:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 8004310:	1dd0      	adds	r0, r2, #7
 8004312:	f7ff ff9f 	bl	8004254 <st25r3916comTx.part.0>
        {
            st25r3916comTxByte( ST25R3916_CMD_SPACE_B_ACCESS, false, true );
        }
        
        st25r3916comTxByte( ((reg & ~ST25R3916_SPACE_B) | ST25R3916_WRITE_MODE), false, true );
 8004316:	2340      	movs	r3, #64	@ 0x40
 8004318:	0022      	movs	r2, r4
 800431a:	439a      	bics	r2, r3
 800431c:	0013      	movs	r3, r2
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 800431e:	466a      	mov	r2, sp
 8004320:	2101      	movs	r1, #1
 8004322:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 8004324:	1dd0      	adds	r0, r2, #7
 8004326:	f7ff ff95 	bl	8004254 <st25r3916comTx.part.0>
 800432a:	0031      	movs	r1, r6
 800432c:	0028      	movs	r0, r5
 800432e:	f7ff ff91 	bl	8004254 <st25r3916comTx.part.0>
        st25r3916comTx( values, length, true, true );
        st25r3916comStop();
 8004332:	f7ff ff79 	bl	8004228 <st25r3916comStop>
        
        /* Send a WriteMultiReg event to LED handling */
        st25r3916ledEvtWrMultiReg( reg, values, length);
 8004336:	0032      	movs	r2, r6
 8004338:	0029      	movs	r1, r5
 800433a:	0020      	movs	r0, r4
 800433c:	f000 fa94 	bl	8004868 <st25r3916ledEvtWrMultiReg>
    }
    
    return RFAL_ERR_NONE;
}
 8004340:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08004342 <st25r3916ReadRegister>:
{
 8004342:	b510      	push	{r4, lr}
 8004344:	2201      	movs	r2, #1
}
 8004346:	f7ff ffb9 	bl	80042bc <st25r3916ReadMultipleRegisters.part.0>
 800434a:	2000      	movs	r0, #0
 800434c:	bd10      	pop	{r4, pc}

0800434e <st25r3916ReadMultipleRegisters>:
{
 800434e:	b510      	push	{r4, lr}
    if( length > 0U )
 8004350:	2a00      	cmp	r2, #0
 8004352:	d001      	beq.n	8004358 <st25r3916ReadMultipleRegisters+0xa>
 8004354:	f7ff ffb2 	bl	80042bc <st25r3916ReadMultipleRegisters.part.0>
}
 8004358:	2000      	movs	r0, #0
 800435a:	bd10      	pop	{r4, pc}

0800435c <st25r3916WriteRegister>:
{
 800435c:	b507      	push	{r0, r1, r2, lr}
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 800435e:	466b      	mov	r3, sp
 8004360:	71d9      	strb	r1, [r3, #7]
 8004362:	3307      	adds	r3, #7
    if( length > 0U )
 8004364:	2201      	movs	r2, #1
 8004366:	0019      	movs	r1, r3
 8004368:	f7ff ffc6 	bl	80042f8 <st25r3916WriteMultipleRegisters.part.0>
}
 800436c:	2000      	movs	r0, #0
 800436e:	bd0e      	pop	{r1, r2, r3, pc}

08004370 <st25r3916WriteFifo>:


/*******************************************************************************/
ReturnCode st25r3916WriteFifo( const uint8_t* values, uint16_t length )
{
    if( length > ST25R3916_FIFO_DEPTH )
 8004370:	2380      	movs	r3, #128	@ 0x80
{
 8004372:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( length > ST25R3916_FIFO_DEPTH )
 8004374:	009b      	lsls	r3, r3, #2
{
 8004376:	0005      	movs	r5, r0
 8004378:	000c      	movs	r4, r1
    {
        return RFAL_ERR_PARAM;
 800437a:	2007      	movs	r0, #7
    if( length > ST25R3916_FIFO_DEPTH )
 800437c:	4299      	cmp	r1, r3
 800437e:	d802      	bhi.n	8004386 <st25r3916WriteFifo+0x16>
    }
    
    if( length > 0U )
 8004380:	2900      	cmp	r1, #0
 8004382:	d101      	bne.n	8004388 <st25r3916WriteFifo+0x18>
        st25r3916comTxByte( ST25R3916_FIFO_LOAD, false, true );
        st25r3916comTx( values, length, true, true );
        st25r3916comStop();
    }

    return RFAL_ERR_NONE;
 8004384:	2000      	movs	r0, #0
}
 8004386:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        st25r3916comStart();
 8004388:	f7ff ff7a 	bl	8004280 <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 800438c:	466b      	mov	r3, sp
 800438e:	1dd8      	adds	r0, r3, #7
 8004390:	2380      	movs	r3, #128	@ 0x80
 8004392:	2101      	movs	r1, #1
 8004394:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 8004396:	f7ff ff5d 	bl	8004254 <st25r3916comTx.part.0>
 800439a:	0021      	movs	r1, r4
 800439c:	0028      	movs	r0, r5
 800439e:	f7ff ff59 	bl	8004254 <st25r3916comTx.part.0>
        st25r3916comStop();
 80043a2:	f7ff ff41 	bl	8004228 <st25r3916comStop>
 80043a6:	e7ed      	b.n	8004384 <st25r3916WriteFifo+0x14>

080043a8 <st25r3916ReadFifo>:


/*******************************************************************************/
ReturnCode st25r3916ReadFifo( uint8_t* buf, uint16_t length )
{
 80043a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043aa:	0005      	movs	r5, r0
 80043ac:	1e0c      	subs	r4, r1, #0
    if( length > 0U )
 80043ae:	d00e      	beq.n	80043ce <st25r3916ReadFifo+0x26>
    {
        st25r3916comStart();
 80043b0:	f7ff ff66 	bl	8004280 <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80043b4:	466b      	mov	r3, sp
 80043b6:	1dd8      	adds	r0, r3, #7
 80043b8:	239f      	movs	r3, #159	@ 0x9f
 80043ba:	2101      	movs	r1, #1
 80043bc:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 80043be:	f7ff ff49 	bl	8004254 <st25r3916comTx.part.0>
    if( rxLen > 0U )
 80043c2:	0021      	movs	r1, r4
 80043c4:	0028      	movs	r0, r5
 80043c6:	f7ff ff4b 	bl	8004260 <st25r3916comRx.part.0>
        st25r3916comTxByte( ST25R3916_FIFO_READ, true, false );
        
        st25r3916comRepeatStart();
        st25r3916comRx( buf, length );
        st25r3916comStop();
 80043ca:	f7ff ff2d 	bl	8004228 <st25r3916comStop>
    }

    return RFAL_ERR_NONE;
}
 80043ce:	2000      	movs	r0, #0
 80043d0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080043d2 <st25r3916WritePTMem>:


/*******************************************************************************/
ReturnCode st25r3916WritePTMem( const uint8_t* values, uint16_t length )
{
 80043d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043d4:	0005      	movs	r5, r0
 80043d6:	000c      	movs	r4, r1
    if( length > ST25R3916_PTM_LEN )
    {
        return RFAL_ERR_PARAM;
 80043d8:	2007      	movs	r0, #7
    if( length > ST25R3916_PTM_LEN )
 80043da:	2930      	cmp	r1, #48	@ 0x30
 80043dc:	d802      	bhi.n	80043e4 <st25r3916WritePTMem+0x12>
    }
    
    if( length > 0U )
 80043de:	2900      	cmp	r1, #0
 80043e0:	d101      	bne.n	80043e6 <st25r3916WritePTMem+0x14>
        st25r3916comTxByte( ST25R3916_PT_A_CONFIG_LOAD, false, true );
        st25r3916comTx( values, length, true, true );
        st25r3916comStop();
    }

    return RFAL_ERR_NONE;
 80043e2:	2000      	movs	r0, #0
}
 80043e4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        st25r3916comStart();
 80043e6:	f7ff ff4b 	bl	8004280 <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80043ea:	466b      	mov	r3, sp
 80043ec:	1dd8      	adds	r0, r3, #7
 80043ee:	23a0      	movs	r3, #160	@ 0xa0
 80043f0:	2101      	movs	r1, #1
 80043f2:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 80043f4:	f7ff ff2e 	bl	8004254 <st25r3916comTx.part.0>
 80043f8:	0021      	movs	r1, r4
 80043fa:	0028      	movs	r0, r5
 80043fc:	f7ff ff2a 	bl	8004254 <st25r3916comTx.part.0>
        st25r3916comStop();
 8004400:	f7ff ff12 	bl	8004228 <st25r3916comStop>
 8004404:	e7ed      	b.n	80043e2 <st25r3916WritePTMem+0x10>

08004406 <st25r3916WritePTMemF>:
}


/*******************************************************************************/
ReturnCode st25r3916WritePTMemF( const uint8_t* values, uint16_t length )
{
 8004406:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004408:	0005      	movs	r5, r0
 800440a:	000c      	movs	r4, r1
    if( length > (ST25R3916_PTM_F_LEN + ST25R3916_PTM_TSN_LEN) )
    {
        return RFAL_ERR_PARAM;
 800440c:	2007      	movs	r0, #7
    if( length > (ST25R3916_PTM_F_LEN + ST25R3916_PTM_TSN_LEN) )
 800440e:	2921      	cmp	r1, #33	@ 0x21
 8004410:	d802      	bhi.n	8004418 <st25r3916WritePTMemF+0x12>
    }
    
    if( length > 0U )
 8004412:	2900      	cmp	r1, #0
 8004414:	d101      	bne.n	800441a <st25r3916WritePTMemF+0x14>
        st25r3916comTxByte( ST25R3916_PT_F_CONFIG_LOAD, false, true );
        st25r3916comTx( values, length, true, true );
        st25r3916comStop();
    }

    return RFAL_ERR_NONE;
 8004416:	2000      	movs	r0, #0
}
 8004418:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        st25r3916comStart();
 800441a:	f7ff ff31 	bl	8004280 <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 800441e:	466b      	mov	r3, sp
 8004420:	1dd8      	adds	r0, r3, #7
 8004422:	23a8      	movs	r3, #168	@ 0xa8
 8004424:	2101      	movs	r1, #1
 8004426:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 8004428:	f7ff ff14 	bl	8004254 <st25r3916comTx.part.0>
 800442c:	0021      	movs	r1, r4
 800442e:	0028      	movs	r0, r5
 8004430:	f7ff ff10 	bl	8004254 <st25r3916comTx.part.0>
        st25r3916comStop();
 8004434:	f7ff fef8 	bl	8004228 <st25r3916comStop>
 8004438:	e7ed      	b.n	8004416 <st25r3916WritePTMemF+0x10>

0800443a <st25r3916WritePTMemTSN>:


/*******************************************************************************/
ReturnCode st25r3916WritePTMemTSN( const uint8_t* values, uint16_t length )
{
 800443a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800443c:	0005      	movs	r5, r0
 800443e:	000c      	movs	r4, r1
    if( length > ST25R3916_PTM_TSN_LEN )
    {
        return RFAL_ERR_PARAM;
 8004440:	2007      	movs	r0, #7
    if( length > ST25R3916_PTM_TSN_LEN )
 8004442:	290c      	cmp	r1, #12
 8004444:	d802      	bhi.n	800444c <st25r3916WritePTMemTSN+0x12>
    }
    
    if(length > 0U)
 8004446:	2900      	cmp	r1, #0
 8004448:	d101      	bne.n	800444e <st25r3916WritePTMemTSN+0x14>
        st25r3916comTxByte( ST25R3916_PT_TSN_DATA_LOAD, false, true );
        st25r3916comTx( values, length, true, true );
        st25r3916comStop();
    }

    return RFAL_ERR_NONE;
 800444a:	2000      	movs	r0, #0
}
 800444c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        st25r3916comStart();
 800444e:	f7ff ff17 	bl	8004280 <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8004452:	466b      	mov	r3, sp
 8004454:	1dd8      	adds	r0, r3, #7
 8004456:	23ac      	movs	r3, #172	@ 0xac
 8004458:	2101      	movs	r1, #1
 800445a:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 800445c:	f7ff fefa 	bl	8004254 <st25r3916comTx.part.0>
 8004460:	0021      	movs	r1, r4
 8004462:	0028      	movs	r0, r5
 8004464:	f7ff fef6 	bl	8004254 <st25r3916comTx.part.0>
        st25r3916comStop();
 8004468:	f7ff fede 	bl	8004228 <st25r3916comStop>
 800446c:	e7ed      	b.n	800444a <st25r3916WritePTMemTSN+0x10>

0800446e <st25r3916ExecuteCommand>:


/*******************************************************************************/
ReturnCode st25r3916ExecuteCommand( uint8_t cmd )
{
 800446e:	b513      	push	{r0, r1, r4, lr}
 8004470:	0004      	movs	r4, r0
    st25r3916comStart();
 8004472:	f7ff ff05 	bl	8004280 <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8004476:	466b      	mov	r3, sp
 8004478:	1dd8      	adds	r0, r3, #7
    st25r3916comTxByte( (cmd | ST25R3916_CMD_MODE ), true, true );
 800447a:	2340      	movs	r3, #64	@ 0x40
 800447c:	425b      	negs	r3, r3
 800447e:	4323      	orrs	r3, r4
 8004480:	2101      	movs	r1, #1
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 8004482:	7003      	strb	r3, [r0, #0]
    if( txLen > 0U )
 8004484:	f7ff fee6 	bl	8004254 <st25r3916comTx.part.0>
    st25r3916comStop();
 8004488:	f7ff fece 	bl	8004228 <st25r3916comStop>
    
    /* Send a cmd event to LED handling */
    st25r3916ledEvtCmd(cmd);
 800448c:	0020      	movs	r0, r4
 800448e:	f000 f9fb 	bl	8004888 <st25r3916ledEvtCmd>
    
    return RFAL_ERR_NONE;
}
 8004492:	2000      	movs	r0, #0
 8004494:	bd16      	pop	{r1, r2, r4, pc}

08004496 <st25r3916ReadTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916ReadTestRegister( uint8_t reg, uint8_t* val )
{
 8004496:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004498:	0005      	movs	r5, r0
 800449a:	000c      	movs	r4, r1
    st25r3916comStart();
 800449c:	f7ff fef0 	bl	8004280 <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80044a0:	466a      	mov	r2, sp
 80044a2:	23fc      	movs	r3, #252	@ 0xfc
 80044a4:	1dd0      	adds	r0, r2, #7
 80044a6:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 80044a8:	2101      	movs	r1, #1
 80044aa:	f7ff fed3 	bl	8004254 <st25r3916comTx.part.0>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, false );
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 80044ae:	2040      	movs	r0, #64	@ 0x40
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80044b0:	466b      	mov	r3, sp
    st25r3916comTxByte( (reg | ST25R3916_READ_MODE), true, false );
 80044b2:	4328      	orrs	r0, r5
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80044b4:	71d8      	strb	r0, [r3, #7]
    if( txLen > 0U )
 80044b6:	2101      	movs	r1, #1
 80044b8:	1dd8      	adds	r0, r3, #7
 80044ba:	f7ff fecb 	bl	8004254 <st25r3916comTx.part.0>
    if( rxLen > 0U )
 80044be:	0020      	movs	r0, r4
 80044c0:	2101      	movs	r1, #1
 80044c2:	f7ff fecd 	bl	8004260 <st25r3916comRx.part.0>
    st25r3916comRepeatStart();
    st25r3916comRx( val, ST25R3916_REG_LEN );
    st25r3916comStop();
 80044c6:	f7ff feaf 	bl	8004228 <st25r3916comStop>
    
    return RFAL_ERR_NONE;
}
 80044ca:	2000      	movs	r0, #0
 80044cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080044ce <st25r3916WriteTestRegister>:


/*******************************************************************************/
ReturnCode st25r3916WriteTestRegister( uint8_t reg, uint8_t val )
{
 80044ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 80044d0:	466b      	mov	r3, sp
 80044d2:	1d9d      	adds	r5, r3, #6
{
 80044d4:	0004      	movs	r4, r0
    uint8_t value = val;               /* MISRA 17.8: use intermediate variable */
 80044d6:	7199      	strb	r1, [r3, #6]

    st25r3916comStart();
 80044d8:	f7ff fed2 	bl	8004280 <st25r3916comStart>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80044dc:	466a      	mov	r2, sp
 80044de:	23fc      	movs	r3, #252	@ 0xfc
 80044e0:	1dd0      	adds	r0, r2, #7
 80044e2:	71d3      	strb	r3, [r2, #7]
    if( txLen > 0U )
 80044e4:	2101      	movs	r1, #1
 80044e6:	f7ff feb5 	bl	8004254 <st25r3916comTx.part.0>
    uint8_t val = txByte;               /* MISRA 17.8: use intermediate variable */
 80044ea:	466b      	mov	r3, sp
 80044ec:	2101      	movs	r1, #1
 80044ee:	1dd8      	adds	r0, r3, #7
 80044f0:	71dc      	strb	r4, [r3, #7]
    if( txLen > 0U )
 80044f2:	f7ff feaf 	bl	8004254 <st25r3916comTx.part.0>
 80044f6:	0028      	movs	r0, r5
 80044f8:	2101      	movs	r1, #1
 80044fa:	f7ff feab 	bl	8004254 <st25r3916comTx.part.0>
    st25r3916comTxByte( ST25R3916_CMD_TEST_ACCESS, false, true );
    st25r3916comTxByte( (reg | ST25R3916_WRITE_MODE), false, true );
    st25r3916comTx( &value, ST25R3916_REG_LEN, true, true );
    st25r3916comStop();
 80044fe:	f7ff fe93 	bl	8004228 <st25r3916comStop>
    
    return RFAL_ERR_NONE;
}
 8004502:	2000      	movs	r0, #0
 8004504:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08004506 <st25r3916ClrRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8004506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004508:	466b      	mov	r3, sp
 800450a:	000d      	movs	r5, r1
 800450c:	1dde      	adds	r6, r3, #7
 800450e:	0031      	movs	r1, r6
 8004510:	2201      	movs	r2, #1
 8004512:	0004      	movs	r4, r0
    if( length > 0U )
 8004514:	f7ff fed2 	bl	80042bc <st25r3916ReadMultipleRegisters.part.0>
    
    /* Read current reg value */
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
    
    /* Only perform a Write if value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 8004518:	7831      	ldrb	r1, [r6, #0]
    {
        return RFAL_ERR_NONE;
 800451a:	2000      	movs	r0, #0
    if( ST25R3916_OPTIMIZE && (rdVal == (uint8_t)(rdVal & ~clr_mask)) )
 800451c:	420d      	tst	r5, r1
 800451e:	d003      	beq.n	8004528 <st25r3916ClrRegisterBits+0x22>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (uint8_t)(rdVal & ~clr_mask) );
 8004520:	0020      	movs	r0, r4
 8004522:	43a9      	bics	r1, r5
 8004524:	f7ff ff1a 	bl	800435c <st25r3916WriteRegister>
}
 8004528:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800452a <st25r3916SetRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 800452a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800452c:	466b      	mov	r3, sp
 800452e:	000c      	movs	r4, r1
 8004530:	1dde      	adds	r6, r3, #7
 8004532:	0031      	movs	r1, r6
 8004534:	2201      	movs	r2, #1
 8004536:	0005      	movs	r5, r0
    if( length > 0U )
 8004538:	f7ff fec0 	bl	80042bc <st25r3916ReadMultipleRegisters.part.0>
    
    /* Read current reg value */
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 800453c:	0021      	movs	r1, r4
 800453e:	7833      	ldrb	r3, [r6, #0]
    {
        return RFAL_ERR_NONE;
 8004540:	2000      	movs	r0, #0
    if( ST25R3916_OPTIMIZE && (rdVal == (rdVal | set_mask)) )
 8004542:	4319      	orrs	r1, r3
 8004544:	428b      	cmp	r3, r1
 8004546:	d002      	beq.n	800454e <st25r3916SetRegisterBits+0x24>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, (rdVal | set_mask) );
 8004548:	0028      	movs	r0, r5
 800454a:	f7ff ff07 	bl	800435c <st25r3916WriteRegister>
}
 800454e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08004550 <st25r3916ModifyRegister>:
}


/*******************************************************************************/
ReturnCode st25r3916ModifyRegister( uint8_t reg, uint8_t clr_mask, uint8_t set_mask )
{
 8004550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004552:	466b      	mov	r3, sp
 8004554:	1ddf      	adds	r7, r3, #7
 8004556:	000e      	movs	r6, r1
 8004558:	0015      	movs	r5, r2
 800455a:	0039      	movs	r1, r7
 800455c:	2201      	movs	r2, #1
 800455e:	0004      	movs	r4, r0
    if( length > 0U )
 8004560:	f7ff feac 	bl	80042bc <st25r3916ReadMultipleRegisters.part.0>
    
    /* Read current reg value */
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadRegister(reg, &rdVal) );
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 8004564:	783b      	ldrb	r3, [r7, #0]
    wrVal |= set_mask;
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
    {
        return RFAL_ERR_NONE;
 8004566:	2000      	movs	r0, #0
    wrVal  = (uint8_t)(rdVal & ~clr_mask);
 8004568:	0019      	movs	r1, r3
 800456a:	43b1      	bics	r1, r6
    wrVal |= set_mask;
 800456c:	4329      	orrs	r1, r5
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 800456e:	428b      	cmp	r3, r1
 8004570:	d002      	beq.n	8004578 <st25r3916ModifyRegister+0x28>
    }
    
    /* Write new reg value */
    return st25r3916WriteRegister(reg, wrVal );
 8004572:	0020      	movs	r0, r4
 8004574:	f7ff fef2 	bl	800435c <st25r3916WriteRegister>
}
 8004578:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800457a <st25r3916ChangeRegisterBits>:
{
 800457a:	b510      	push	{r4, lr}
    return st25r3916ModifyRegister(reg, valueMask, (valueMask & value) );
 800457c:	400a      	ands	r2, r1
 800457e:	f7ff ffe7 	bl	8004550 <st25r3916ModifyRegister>
}
 8004582:	bd10      	pop	{r4, pc}

08004584 <st25r3916ChangeTestRegisterBits>:


/*******************************************************************************/
ReturnCode st25r3916ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8004584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ReturnCode ret;
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 8004586:	466b      	mov	r3, sp
 8004588:	1ddf      	adds	r7, r3, #7
{
 800458a:	000e      	movs	r6, r1
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 800458c:	0039      	movs	r1, r7
{
 800458e:	0005      	movs	r5, r0
 8004590:	0014      	movs	r4, r2
    RFAL_EXIT_ON_ERR( ret, st25r3916ReadTestRegister(reg, &rdVal) );
 8004592:	f7ff ff80 	bl	8004496 <st25r3916ReadTestRegister>
 8004596:	2800      	cmp	r0, #0
 8004598:	d109      	bne.n	80045ae <st25r3916ChangeTestRegisterBits+0x2a>
    
    /* Compute new value */
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 800459a:	783b      	ldrb	r3, [r7, #0]
    wrVal |= (uint8_t)(value & valueMask);
 800459c:	4034      	ands	r4, r6
    wrVal  = (uint8_t)(rdVal & ~valueMask);
 800459e:	0019      	movs	r1, r3
 80045a0:	43b1      	bics	r1, r6
    wrVal |= (uint8_t)(value & valueMask);
 80045a2:	4321      	orrs	r1, r4
    
    /* Only perform a Write if the value to be written is different */
    if( ST25R3916_OPTIMIZE && (rdVal == wrVal) )
 80045a4:	428b      	cmp	r3, r1
 80045a6:	d002      	beq.n	80045ae <st25r3916ChangeTestRegisterBits+0x2a>
    {
        return RFAL_ERR_NONE;
    }
    
    /* Write new reg value */
    return st25r3916WriteTestRegister(reg, wrVal );
 80045a8:	0028      	movs	r0, r5
 80045aa:	f7ff ff90 	bl	80044ce <st25r3916WriteTestRegister>
}
 80045ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080045b0 <st25r3916CheckReg>:


/*******************************************************************************/
bool st25r3916CheckReg( uint8_t reg, uint8_t mask, uint8_t val )
{    
 80045b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045b2:	0014      	movs	r4, r2
    uint8_t regVal;
    
    regVal = 0;
 80045b4:	466a      	mov	r2, sp
 80045b6:	2300      	movs	r3, #0
{    
 80045b8:	000d      	movs	r5, r1
    st25r3916ReadRegister( reg, &regVal );
 80045ba:	1dd1      	adds	r1, r2, #7
    regVal = 0;
 80045bc:	71d3      	strb	r3, [r2, #7]
    st25r3916ReadRegister( reg, &regVal );
 80045be:	f7ff fec0 	bl	8004342 <st25r3916ReadRegister>
    
    return ( (regVal & mask) == val );
 80045c2:	466b      	mov	r3, sp
 80045c4:	79d8      	ldrb	r0, [r3, #7]
 80045c6:	4028      	ands	r0, r5
 80045c8:	1b00      	subs	r0, r0, r4
 80045ca:	4243      	negs	r3, r0
 80045cc:	4158      	adcs	r0, r3
 80045ce:	b2c0      	uxtb	r0, r0
}
 80045d0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080045d2 <st25r3916IsRegValid>:


/*******************************************************************************/
bool st25r3916IsRegValid( uint8_t reg )
{
    if( !(( (int16_t)reg >= (int16_t)ST25R3916_REG_IO_CONF1) && (reg <= (ST25R3916_SPACE_B | ST25R3916_REG_IC_IDENTITY)) ))
 80045d2:	43c0      	mvns	r0, r0
 80045d4:	b2c0      	uxtb	r0, r0
    {
        return false;
    }    
    return true;
}
 80045d6:	09c0      	lsrs	r0, r0, #7
 80045d8:	4770      	bx	lr
	...

080045dc <st25r3916InitInterrupts>:
{
    platformIrqST25RPinInitialize();
    platformIrqST25RSetCallback( st25r3916Isr );
    
    
    st25r3916interrupt.callback     = NULL;
 80045dc:	2200      	movs	r2, #0
 80045de:	4b03      	ldr	r3, [pc, #12]	@ (80045ec <st25r3916InitInterrupts+0x10>)
 80045e0:	605a      	str	r2, [r3, #4]
    st25r3916interrupt.prevCallback = NULL;
 80045e2:	601a      	str	r2, [r3, #0]
    st25r3916interrupt.status       = ST25R3916_IRQ_MASK_NONE;
 80045e4:	609a      	str	r2, [r3, #8]
    st25r3916interrupt.mask         = ST25R3916_IRQ_MASK_NONE;
 80045e6:	60da      	str	r2, [r3, #12]
}
 80045e8:	4770      	bx	lr
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	20000d4c 	.word	0x20000d4c

080045f0 <st25r3916CheckForReceivedInterrupts>:
    uint8_t  iregs[ST25R3916_INT_REGS_LEN];
    uint32_t irqStatus;
    
    /* Initialize iregs */
    irqStatus = ST25R3916_IRQ_MASK_NONE;
    RFAL_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 80045f0:	2301      	movs	r3, #1
{
 80045f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    
    
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
   while( platformGpioIsHigh( ST25R_INT_PORT, ST25R_INT_PIN ) )
 80045f4:	2590      	movs	r5, #144	@ 0x90
    irqStatus = ST25R3916_IRQ_MASK_NONE;
 80045f6:	2400      	movs	r4, #0
    RFAL_MEMSET( iregs, (int32_t)(ST25R3916_IRQ_MASK_ALL & 0xFFU), ST25R3916_INT_REGS_LEN );
 80045f8:	425b      	negs	r3, r3
 80045fa:	9301      	str	r3, [sp, #4]
   while( platformGpioIsHigh( ST25R_INT_PORT, ST25R_INT_PIN ) )
 80045fc:	05ed      	lsls	r5, r5, #23
 80045fe:	2102      	movs	r1, #2
 8004600:	0028      	movs	r0, r5
 8004602:	f000 fc3b 	bl	8004e7c <HAL_GPIO_ReadPin>
 8004606:	2801      	cmp	r0, #1
 8004608:	d020      	beq.n	800464c <st25r3916CheckForReceivedInterrupts+0x5c>
       irqStatus |= (uint32_t)iregs[2]<<16;
       irqStatus |= (uint32_t)iregs[3]<<24;
   }
   
   /* Forward all interrupts, even masked ones to application */
   platformProtectST25RIrqStatus();
 800460a:	4a14      	ldr	r2, [pc, #80]	@ (800465c <st25r3916CheckForReceivedInterrupts+0x6c>)
 800460c:	7813      	ldrb	r3, [r2, #0]
 800460e:	3301      	adds	r3, #1
 8004610:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	2020      	movs	r0, #32
 8004618:	4b11      	ldr	r3, [pc, #68]	@ (8004660 <st25r3916CheckForReceivedInterrupts+0x70>)
 800461a:	67d8      	str	r0, [r3, #124]	@ 0x7c
 800461c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004620:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8004624:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004628:	f3bf 8f6f 	isb	sy
   st25r3916interrupt.status |= irqStatus;
 800462c:	490d      	ldr	r1, [pc, #52]	@ (8004664 <st25r3916CheckForReceivedInterrupts+0x74>)
 800462e:	688b      	ldr	r3, [r1, #8]
 8004630:	4323      	orrs	r3, r4
 8004632:	608b      	str	r3, [r1, #8]
   platformUnprotectST25RIrqStatus();
 8004634:	7813      	ldrb	r3, [r2, #0]
 8004636:	3b01      	subs	r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	7013      	strb	r3, [r2, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <st25r3916CheckForReceivedInterrupts+0x54>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004640:	4b09      	ldr	r3, [pc, #36]	@ (8004668 <st25r3916CheckForReceivedInterrupts+0x78>)
 8004642:	6018      	str	r0, [r3, #0]
   
   /* Send an IRQ event to LED handling */
   st25r3916ledEvtIrq( st25r3916interrupt.status );
 8004644:	6888      	ldr	r0, [r1, #8]
 8004646:	f000 f8ef 	bl	8004828 <st25r3916ledEvtIrq>
}
 800464a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
       st25r3916ReadMultipleRegisters( ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN );
 800464c:	2204      	movs	r2, #4
 800464e:	201a      	movs	r0, #26
 8004650:	a901      	add	r1, sp, #4
 8004652:	f7ff fe7c 	bl	800434e <st25r3916ReadMultipleRegisters>
       irqStatus |= (uint32_t)iregs[3]<<24;
 8004656:	9b01      	ldr	r3, [sp, #4]
 8004658:	431c      	orrs	r4, r3
 800465a:	e7d0      	b.n	80045fe <st25r3916CheckForReceivedInterrupts+0xe>
 800465c:	200023a4 	.word	0x200023a4
 8004660:	e000e104 	.word	0xe000e104
 8004664:	20000d4c 	.word	0x20000d4c
 8004668:	e000e100 	.word	0xe000e100

0800466c <st25r3916Isr>:
{
 800466c:	b510      	push	{r4, lr}
    st25r3916CheckForReceivedInterrupts();
 800466e:	f7ff ffbf 	bl	80045f0 <st25r3916CheckForReceivedInterrupts>
    if( NULL != st25r3916interrupt.callback )
 8004672:	4b03      	ldr	r3, [pc, #12]	@ (8004680 <st25r3916Isr+0x14>)
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	2a00      	cmp	r2, #0
 8004678:	d001      	beq.n	800467e <st25r3916Isr+0x12>
        st25r3916interrupt.callback();
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	4798      	blx	r3
}
 800467e:	bd10      	pop	{r4, pc}
 8004680:	20000d4c 	.word	0x20000d4c

08004684 <st25r3916ModifyInterrupts>:


/*******************************************************************************/
void st25r3916ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8004684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old_mask;
    uint32_t new_mask;
    

    old_mask = st25r3916interrupt.mask;
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8004686:	000b      	movs	r3, r1
    st25r3916interrupt.mask &= ~clr_mask;
    st25r3916interrupt.mask |= set_mask;
 8004688:	2500      	movs	r5, #0
    
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
    { 
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 800468a:	27ff      	movs	r7, #255	@ 0xff
    old_mask = st25r3916interrupt.mask;
 800468c:	4c0d      	ldr	r4, [pc, #52]	@ (80046c4 <st25r3916ModifyInterrupts+0x40>)
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 800468e:	4043      	eors	r3, r0
    old_mask = st25r3916interrupt.mask;
 8004690:	68e6      	ldr	r6, [r4, #12]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8004692:	401e      	ands	r6, r3
    st25r3916interrupt.mask &= ~clr_mask;
 8004694:	68e3      	ldr	r3, [r4, #12]
    new_mask = ((~old_mask & set_mask) | (old_mask & clr_mask));
 8004696:	404e      	eors	r6, r1
    st25r3916interrupt.mask &= ~clr_mask;
 8004698:	4383      	bics	r3, r0
 800469a:	60e3      	str	r3, [r4, #12]
    st25r3916interrupt.mask |= set_mask;
 800469c:	68e3      	ldr	r3, [r4, #12]
 800469e:	430b      	orrs	r3, r1
 80046a0:	60e3      	str	r3, [r4, #12]
        if( ((new_mask >> (8U*i)) & 0xFFU) == 0U )
 80046a2:	0032      	movs	r2, r6
 80046a4:	00eb      	lsls	r3, r5, #3
 80046a6:	40da      	lsrs	r2, r3
 80046a8:	423a      	tst	r2, r7
 80046aa:	d007      	beq.n	80046bc <st25r3916ModifyInterrupts+0x38>
        {
            continue;
        }
        
        st25r3916WriteRegister(ST25R3916_REG_IRQ_MASK_MAIN + i, (uint8_t)((st25r3916interrupt.mask>>(8U*i)) & 0xFFU) );
 80046ac:	68e1      	ldr	r1, [r4, #12]
 80046ae:	0028      	movs	r0, r5
 80046b0:	40d9      	lsrs	r1, r3
 80046b2:	3016      	adds	r0, #22
 80046b4:	b2c9      	uxtb	r1, r1
 80046b6:	b2c0      	uxtb	r0, r0
 80046b8:	f7ff fe50 	bl	800435c <st25r3916WriteRegister>
    for(i=0; i<ST25R3916_INT_REGS_LEN; i++)
 80046bc:	3501      	adds	r5, #1
 80046be:	2d04      	cmp	r5, #4
 80046c0:	d1ef      	bne.n	80046a2 <st25r3916ModifyInterrupts+0x1e>
    }
    return;
}
 80046c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046c4:	20000d4c 	.word	0x20000d4c

080046c8 <st25r3916WaitForInterruptsTimed>:


/*******************************************************************************/
uint32_t st25r3916WaitForInterruptsTimed( uint32_t mask, uint16_t tmo )
{
 80046c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ca:	0005      	movs	r5, r0
    uint32_t tmrDelay;
    uint32_t status;
    
    tmrDelay = platformTimerCreate( tmo );
 80046cc:	0008      	movs	r0, r1
{
 80046ce:	000e      	movs	r6, r1
    tmrDelay = platformTimerCreate( tmo );
 80046d0:	f000 f8ec 	bl	80048ac <timerCalculateTimer>
 80046d4:	9001      	str	r0, [sp, #4]
    
    /* Run until specific interrupt has happen or the timer has expired */
    do 
    {
        status = (st25r3916interrupt.status & mask);
 80046d6:	4c15      	ldr	r4, [pc, #84]	@ (800472c <st25r3916WaitForInterruptsTimed+0x64>)
    } while( ( (!platformTimerIsExpired( tmrDelay )) || (tmo == 0U)) && (status == 0U) );
 80046d8:	9801      	ldr	r0, [sp, #4]
        status = (st25r3916interrupt.status & mask);
 80046da:	68a7      	ldr	r7, [r4, #8]
 80046dc:	402f      	ands	r7, r5
    } while( ( (!platformTimerIsExpired( tmrDelay )) || (tmo == 0U)) && (status == 0U) );
 80046de:	f000 f8eb 	bl	80048b8 <timerIsExpired>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d001      	beq.n	80046ea <st25r3916WaitForInterruptsTimed+0x22>
 80046e6:	2e00      	cmp	r6, #0
 80046e8:	d101      	bne.n	80046ee <st25r3916WaitForInterruptsTimed+0x26>
 80046ea:	2f00      	cmp	r7, #0
 80046ec:	d0f3      	beq.n	80046d6 <st25r3916WaitForInterruptsTimed+0xe>
    
    platformTimerDestroy( tmrDelay );

    status = st25r3916interrupt.status & mask;
    
    platformProtectST25RIrqStatus();
 80046ee:	4a10      	ldr	r2, [pc, #64]	@ (8004730 <st25r3916WaitForInterruptsTimed+0x68>)
    status = st25r3916interrupt.status & mask;
 80046f0:	68a0      	ldr	r0, [r4, #8]
    platformProtectST25RIrqStatus();
 80046f2:	7813      	ldrb	r3, [r2, #0]
    status = st25r3916interrupt.status & mask;
 80046f4:	4028      	ands	r0, r5
    platformProtectST25RIrqStatus();
 80046f6:	3301      	adds	r3, #1
 80046f8:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80046fa:	f3bf 8f4f 	dsb	sy
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046fe:	2120      	movs	r1, #32
 8004700:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <st25r3916WaitForInterruptsTimed+0x6c>)
 8004702:	67d9      	str	r1, [r3, #124]	@ 0x7c
 8004704:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004708:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 800470c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004710:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status &= ~status;
 8004714:	68a3      	ldr	r3, [r4, #8]
 8004716:	4383      	bics	r3, r0
 8004718:	60a3      	str	r3, [r4, #8]
    platformUnprotectST25RIrqStatus();
 800471a:	7813      	ldrb	r3, [r2, #0]
 800471c:	3b01      	subs	r3, #1
 800471e:	b2db      	uxtb	r3, r3
 8004720:	7013      	strb	r3, [r2, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <st25r3916WaitForInterruptsTimed+0x62>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004726:	4b04      	ldr	r3, [pc, #16]	@ (8004738 <st25r3916WaitForInterruptsTimed+0x70>)
 8004728:	6019      	str	r1, [r3, #0]
    
    return status;
}
 800472a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800472c:	20000d4c 	.word	0x20000d4c
 8004730:	200023a4 	.word	0x200023a4
 8004734:	e000e104 	.word	0xe000e104
 8004738:	e000e100 	.word	0xe000e100

0800473c <st25r3916GetInterrupt>:


/*******************************************************************************/
uint32_t st25r3916GetInterrupt( uint32_t mask )
{
 800473c:	0001      	movs	r1, r0
    uint32_t irqs;

    irqs = (st25r3916interrupt.status & mask);
 800473e:	4b11      	ldr	r3, [pc, #68]	@ (8004784 <st25r3916GetInterrupt+0x48>)
{
 8004740:	b510      	push	{r4, lr}
    irqs = (st25r3916interrupt.status & mask);
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	4010      	ands	r0, r2
    if(irqs != ST25R3916_IRQ_MASK_NONE)
 8004746:	4211      	tst	r1, r2
 8004748:	d01b      	beq.n	8004782 <st25r3916GetInterrupt+0x46>
    {
        platformProtectST25RIrqStatus();
 800474a:	4a0f      	ldr	r2, [pc, #60]	@ (8004788 <st25r3916GetInterrupt+0x4c>)
 800474c:	7811      	ldrb	r1, [r2, #0]
 800474e:	3101      	adds	r1, #1
 8004750:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004752:	f3bf 8f4f 	dsb	sy
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004756:	2420      	movs	r4, #32
 8004758:	490c      	ldr	r1, [pc, #48]	@ (800478c <st25r3916GetInterrupt+0x50>)
 800475a:	67cc      	str	r4, [r1, #124]	@ 0x7c
 800475c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004760:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8004764:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004768:	f3bf 8f6f 	isb	sy
        st25r3916interrupt.status &= ~irqs;
 800476c:	6899      	ldr	r1, [r3, #8]
 800476e:	4381      	bics	r1, r0
 8004770:	6099      	str	r1, [r3, #8]
        platformUnprotectST25RIrqStatus();
 8004772:	7813      	ldrb	r3, [r2, #0]
 8004774:	3b01      	subs	r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	7013      	strb	r3, [r2, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <st25r3916GetInterrupt+0x46>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800477e:	4b04      	ldr	r3, [pc, #16]	@ (8004790 <st25r3916GetInterrupt+0x54>)
 8004780:	601c      	str	r4, [r3, #0]
    }

    return irqs;
}
 8004782:	bd10      	pop	{r4, pc}
 8004784:	20000d4c 	.word	0x20000d4c
 8004788:	200023a4 	.word	0x200023a4
 800478c:	e000e104 	.word	0xe000e104
 8004790:	e000e100 	.word	0xe000e100

08004794 <st25r3916EnableInterrupts>:
}


/*******************************************************************************/
void st25r3916EnableInterrupts(uint32_t mask)
{
 8004794:	b510      	push	{r4, lr}
    st25r3916ModifyInterrupts(mask, 0);
 8004796:	2100      	movs	r1, #0
 8004798:	f7ff ff74 	bl	8004684 <st25r3916ModifyInterrupts>
}
 800479c:	bd10      	pop	{r4, pc}

0800479e <st25r3916ClearAndEnableInterrupts>:
{
 800479e:	b510      	push	{r4, lr}
 80047a0:	0004      	movs	r4, r0
    st25r3916GetInterrupt( mask );
 80047a2:	f7ff ffcb 	bl	800473c <st25r3916GetInterrupt>
    st25r3916EnableInterrupts( mask );
 80047a6:	0020      	movs	r0, r4
 80047a8:	f7ff fff4 	bl	8004794 <st25r3916EnableInterrupts>
}
 80047ac:	bd10      	pop	{r4, pc}

080047ae <st25r3916DisableInterrupts>:


/*******************************************************************************/
void st25r3916DisableInterrupts(uint32_t mask)
{
 80047ae:	b510      	push	{r4, lr}
 80047b0:	0001      	movs	r1, r0
    st25r3916ModifyInterrupts(0, mask);
 80047b2:	2000      	movs	r0, #0
 80047b4:	f7ff ff66 	bl	8004684 <st25r3916ModifyInterrupts>
}
 80047b8:	bd10      	pop	{r4, pc}
	...

080047bc <st25r3916ClearInterrupts>:

/*******************************************************************************/
void st25r3916ClearInterrupts( void )
{
 80047bc:	b507      	push	{r0, r1, r2, lr}
    uint8_t iregs[ST25R3916_INT_REGS_LEN];

    st25r3916ReadMultipleRegisters(ST25R3916_REG_IRQ_MAIN, iregs, ST25R3916_INT_REGS_LEN);
 80047be:	2204      	movs	r2, #4
 80047c0:	a901      	add	r1, sp, #4
 80047c2:	201a      	movs	r0, #26
 80047c4:	f7ff fdc3 	bl	800434e <st25r3916ReadMultipleRegisters>

    platformProtectST25RIrqStatus();
 80047c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004804 <st25r3916ClearInterrupts+0x48>)
 80047ca:	7813      	ldrb	r3, [r2, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80047d0:	f3bf 8f4f 	dsb	sy
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047d4:	2120      	movs	r1, #32
 80047d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004808 <st25r3916ClearInterrupts+0x4c>)
 80047d8:	67d9      	str	r1, [r3, #124]	@ 0x7c
 80047da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80047de:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 80047e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80047e6:	f3bf 8f6f 	isb	sy
    st25r3916interrupt.status = ST25R3916_IRQ_MASK_NONE;
 80047ea:	2000      	movs	r0, #0
 80047ec:	4b07      	ldr	r3, [pc, #28]	@ (800480c <st25r3916ClearInterrupts+0x50>)
 80047ee:	6098      	str	r0, [r3, #8]
    platformUnprotectST25RIrqStatus();
 80047f0:	7813      	ldrb	r3, [r2, #0]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	7013      	strb	r3, [r2, #0]
 80047f8:	4283      	cmp	r3, r0
 80047fa:	d101      	bne.n	8004800 <st25r3916ClearInterrupts+0x44>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047fc:	4b04      	ldr	r3, [pc, #16]	@ (8004810 <st25r3916ClearInterrupts+0x54>)
 80047fe:	6019      	str	r1, [r3, #0]
    return;
}
 8004800:	bd07      	pop	{r0, r1, r2, pc}
 8004802:	46c0      	nop			@ (mov r8, r8)
 8004804:	200023a4 	.word	0x200023a4
 8004808:	e000e104 	.word	0xe000e104
 800480c:	20000d4c 	.word	0x20000d4c
 8004810:	e000e100 	.word	0xe000e100

08004814 <st25r3916ledInit>:
{
    /* Initialize LEDs if existing and defined */
    platformLedsInitialize();
    
    st25r3916ledRxOff();
    st25r3916ledFieldOff();
 8004814:	2180      	movs	r1, #128	@ 0x80
{
 8004816:	b510      	push	{r4, lr}
    st25r3916ledFieldOff();
 8004818:	2200      	movs	r2, #0
 800481a:	4802      	ldr	r0, [pc, #8]	@ (8004824 <st25r3916ledInit+0x10>)
 800481c:	0149      	lsls	r1, r1, #5
 800481e:	f000 fb33 	bl	8004e88 <HAL_GPIO_WritePin>
}
 8004822:	bd10      	pop	{r4, pc}
 8004824:	48000400 	.word	0x48000400

08004828 <st25r3916ledEvtIrq>:


/*******************************************************************************/
void st25r3916ledEvtIrq( uint32_t irqs )
{
    if( (irqs & (ST25R3916_IRQ_MASK_TXE | ST25R3916_IRQ_MASK_CAT) ) != 0U )
 8004828:	2382      	movs	r3, #130	@ 0x82
 800482a:	009b      	lsls	r3, r3, #2
{
 800482c:	b510      	push	{r4, lr}
    if( (irqs & (ST25R3916_IRQ_MASK_TXE | ST25R3916_IRQ_MASK_CAT) ) != 0U )
 800482e:	4218      	tst	r0, r3
 8004830:	d005      	beq.n	800483e <st25r3916ledEvtIrq+0x16>
    {
        st25r3916ledFieldOn();
 8004832:	2180      	movs	r1, #128	@ 0x80
 8004834:	2201      	movs	r2, #1
 8004836:	4802      	ldr	r0, [pc, #8]	@ (8004840 <st25r3916ledEvtIrq+0x18>)
 8004838:	0149      	lsls	r1, r1, #5
 800483a:	f000 fb25 	bl	8004e88 <HAL_GPIO_WritePin>
    if( (irqs & (ST25R3916_IRQ_MASK_RXE  | ST25R3916_IRQ_MASK_NRE    | ST25R3916_IRQ_MASK_RX_REST | ST25R3916_IRQ_MASK_RXE_PTA |                                                 
                 ST25R3916_IRQ_MASK_WU_A | ST25R3916_IRQ_MASK_WU_A_X | ST25R3916_IRQ_MASK_WU_F    | ST25R3916_IRQ_MASK_RFU2)   ) != 0U ) 
    {
        st25r3916ledRxOff();
    }
}
 800483e:	bd10      	pop	{r4, pc}
 8004840:	48000400 	.word	0x48000400

08004844 <st25r3916ledEvtWrReg>:


/*******************************************************************************/
void st25r3916ledEvtWrReg( uint8_t reg, uint8_t val )
{
 8004844:	b510      	push	{r4, lr}
    if( reg == ST25R3916_REG_OP_CONTROL )
 8004846:	2802      	cmp	r0, #2
 8004848:	d10a      	bne.n	8004860 <st25r3916ledEvtWrReg+0x1c>
    {
        if( (ST25R3916_REG_OP_CONTROL_tx_en & val) != 0U )
 800484a:	2308      	movs	r3, #8
 800484c:	000a      	movs	r2, r1
 800484e:	401a      	ands	r2, r3
 8004850:	4219      	tst	r1, r3
 8004852:	d000      	beq.n	8004856 <st25r3916ledEvtWrReg+0x12>
        {
            st25r3916ledFieldOn();
 8004854:	2201      	movs	r2, #1
        }
        else
        {
            st25r3916ledFieldOff();
 8004856:	2180      	movs	r1, #128	@ 0x80
 8004858:	4802      	ldr	r0, [pc, #8]	@ (8004864 <st25r3916ledEvtWrReg+0x20>)
 800485a:	0149      	lsls	r1, r1, #5
 800485c:	f000 fb14 	bl	8004e88 <HAL_GPIO_WritePin>
        }
    }
}
 8004860:	bd10      	pop	{r4, pc}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	48000400 	.word	0x48000400

08004868 <st25r3916ledEvtWrMultiReg>:


/*******************************************************************************/
void st25r3916ledEvtWrMultiReg( uint8_t reg, const uint8_t* vals, uint8_t len )
{
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	0007      	movs	r7, r0
 800486c:	000d      	movs	r5, r1
    uint8_t i;
    
    for(i=0; i<(len); i++)
 800486e:	000c      	movs	r4, r1
 8004870:	188e      	adds	r6, r1, r2
 8004872:	42b4      	cmp	r4, r6
 8004874:	d100      	bne.n	8004878 <st25r3916ledEvtWrMultiReg+0x10>
    {
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
    }
}
 8004876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        st25r3916ledEvtWrReg( (reg+i), vals[i] );
 8004878:	1b78      	subs	r0, r7, r5
 800487a:	1900      	adds	r0, r0, r4
 800487c:	7821      	ldrb	r1, [r4, #0]
 800487e:	b2c0      	uxtb	r0, r0
 8004880:	f7ff ffe0 	bl	8004844 <st25r3916ledEvtWrReg>
    for(i=0; i<(len); i++)
 8004884:	3401      	adds	r4, #1
 8004886:	e7f4      	b.n	8004872 <st25r3916ledEvtWrMultiReg+0xa>

08004888 <st25r3916ledEvtCmd>:


/*******************************************************************************/
void st25r3916ledEvtCmd( uint8_t cmd )
{
    if( (cmd >= ST25R3916_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 8004888:	0003      	movs	r3, r0
 800488a:	333c      	adds	r3, #60	@ 0x3c
 800488c:	b2db      	uxtb	r3, r3
{
 800488e:	b510      	push	{r4, lr}
    if( (cmd >= ST25R3916_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3916_CMD_RESPONSE_RF_COLLISION_N) )
 8004890:	2b05      	cmp	r3, #5
 8004892:	d806      	bhi.n	80048a2 <st25r3916ledEvtCmd+0x1a>
    {
        st25r3916ledFieldOff();
 8004894:	2180      	movs	r1, #128	@ 0x80
 8004896:	2200      	movs	r2, #0
 8004898:	4803      	ldr	r0, [pc, #12]	@ (80048a8 <st25r3916ledEvtCmd+0x20>)
 800489a:	0149      	lsls	r1, r1, #5
 800489c:	f000 faf4 	bl	8004e88 <HAL_GPIO_WritePin>
    if( cmd == ST25R3916_CMD_SET_DEFAULT )
    {
        st25r3916ledFieldOff();
        st25r3916ledRxOff();
    }
}
 80048a0:	bd10      	pop	{r4, pc}
    if( cmd == ST25R3916_CMD_SET_DEFAULT )
 80048a2:	28c1      	cmp	r0, #193	@ 0xc1
 80048a4:	d1fc      	bne.n	80048a0 <st25r3916ledEvtCmd+0x18>
 80048a6:	e7f5      	b.n	8004894 <st25r3916ledEvtCmd+0xc>
 80048a8:	48000400 	.word	0x48000400

080048ac <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{
 80048ac:	b510      	push	{r4, lr}
 80048ae:	0004      	movs	r4, r0
  return (platformGetSysTick() + time);
 80048b0:	f7fb fde8 	bl	8000484 <BSP_GetTick>
 80048b4:	1820      	adds	r0, r4, r0
}
 80048b6:	bd10      	pop	{r4, pc}

080048b8 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 80048b8:	b510      	push	{r4, lr}
 80048ba:	0004      	movs	r4, r0
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 80048bc:	f7fb fde2 	bl	8000484 <BSP_GetTick>
 80048c0:	1a20      	subs	r0, r4, r0
  {
    return true;
  }
  
  return false;
}
 80048c2:	0fc0      	lsrs	r0, r0, #31
 80048c4:	bd10      	pop	{r4, pc}
	...

080048c8 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80048c8:	b510      	push	{r4, lr}
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();

  if (ButtonMode == BUTTON_MODE_EXTI)
 80048ca:	2901      	cmp	r1, #1
 80048cc:	d119      	bne.n	8004902 <BSP_PB_Init+0x3a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80048ce:	21c0      	movs	r1, #192	@ 0xc0
 80048d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004908 <BSP_PB_Init+0x40>)
 80048d2:	00c0      	lsls	r0, r0, #3
 80048d4:	1904      	adds	r4, r0, r4
 80048d6:	04c9      	lsls	r1, r1, #19
 80048d8:	0020      	movs	r0, r4
 80048da:	f000 f9f8 	bl	8004cce <HAL_EXTI_GetHandle>
 80048de:	1e01      	subs	r1, r0, #0
 80048e0:	d002      	beq.n	80048e8 <BSP_PB_Init+0x20>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80048e2:	2004      	movs	r0, #4
 80048e4:	4240      	negs	r0, r0
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
    }
  }

  return ret;
}
 80048e6:	bd10      	pop	{r4, pc}
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80048e8:	4a08      	ldr	r2, [pc, #32]	@ (800490c <BSP_PB_Init+0x44>)
 80048ea:	0020      	movs	r0, r4
 80048ec:	f000 f9e8 	bl	8004cc0 <HAL_EXTI_RegisterCallback>
 80048f0:	1e02      	subs	r2, r0, #0
 80048f2:	d1f6      	bne.n	80048e2 <BSP_PB_Init+0x1a>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80048f4:	2005      	movs	r0, #5
 80048f6:	210f      	movs	r1, #15
 80048f8:	f000 f8d8 	bl	8004aac <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80048fc:	2005      	movs	r0, #5
 80048fe:	f000 f8ff 	bl	8004b00 <HAL_NVIC_EnableIRQ>
  int32_t ret = BSP_ERROR_NONE;
 8004902:	2000      	movs	r0, #0
  return ret;
 8004904:	e7ef      	b.n	80048e6 <BSP_PB_Init+0x1e>
 8004906:	46c0      	nop			@ (mov r8, r8)
 8004908:	2000000c 	.word	0x2000000c
 800490c:	08004913 	.word	0x08004913

08004910 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8004910:	4770      	bx	lr

08004912 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004912:	b510      	push	{r4, lr}
  BSP_PB_Callback(BUTTON_USER);
 8004914:	2000      	movs	r0, #0
 8004916:	f7ff fffb 	bl	8004910 <BSP_PB_Callback>
}
 800491a:	bd10      	pop	{r4, pc}

0800491c <MX_USART2_UART_Init>:

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;

  huart->Instance = USART2;
 800491c:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <MX_USART2_UART_Init+0x2c>)
{
 800491e:	b510      	push	{r4, lr}
  huart->Instance = USART2;
 8004920:	6003      	str	r3, [r0, #0]
  huart->Init.BaudRate = 115200;
 8004922:	23e1      	movs	r3, #225	@ 0xe1
 8004924:	025b      	lsls	r3, r3, #9
  huart->Init.WordLength = UART_WORDLENGTH_8B;
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 8004926:	220c      	movs	r2, #12
  huart->Init.BaudRate = 115200;
 8004928:	6043      	str	r3, [r0, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800492a:	2300      	movs	r3, #0
  huart->Init.Mode = UART_MODE_TX_RX;
 800492c:	6142      	str	r2, [r0, #20]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800492e:	6083      	str	r3, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8004930:	60c3      	str	r3, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004932:	6103      	str	r3, [r0, #16]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004934:	6183      	str	r3, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004936:	61c3      	str	r3, [r0, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004938:	6203      	str	r3, [r0, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800493a:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800493c:	f002 ffae 	bl	800789c <HAL_UART_Init>
 8004940:	1e43      	subs	r3, r0, #1
 8004942:	4198      	sbcs	r0, r3
  {
    ret = HAL_ERROR;
  }

  return ret;
 8004944:	b2c0      	uxtb	r0, r0
}
 8004946:	bd10      	pop	{r4, pc}
 8004948:	40004400 	.word	0x40004400

0800494c <BSP_COM_Init>:
{
 800494c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494e:	0004      	movs	r4, r0
 8004950:	b08b      	sub	sp, #44	@ 0x2c
  if(COM > COMn)
 8004952:	2801      	cmp	r0, #1
 8004954:	d846      	bhi.n	80049e4 <BSP_COM_Init+0x98>
     hcom_uart[COM].Instance = COM_USART[COM];
 8004956:	2288      	movs	r2, #136	@ 0x88
 8004958:	4b25      	ldr	r3, [pc, #148]	@ (80049f0 <BSP_COM_Init+0xa4>)
 800495a:	4342      	muls	r2, r0
 800495c:	0080      	lsls	r0, r0, #2
 800495e:	58c3      	ldr	r3, [r0, r3]
 8004960:	4924      	ldr	r1, [pc, #144]	@ (80049f4 <BSP_COM_Init+0xa8>)
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8004962:	2090      	movs	r0, #144	@ 0x90
     hcom_uart[COM].Instance = COM_USART[COM];
 8004964:	5053      	str	r3, [r2, r1]
    __HAL_RCC_USART2_CLK_ENABLE();
 8004966:	2280      	movs	r2, #128	@ 0x80
 8004968:	4b23      	ldr	r3, [pc, #140]	@ (80049f8 <BSP_COM_Init+0xac>)
     hcom_uart[COM].Instance = COM_USART[COM];
 800496a:	9101      	str	r1, [sp, #4]
    __HAL_RCC_USART2_CLK_ENABLE();
 800496c:	69d9      	ldr	r1, [r3, #28]
 800496e:	0292      	lsls	r2, r2, #10
 8004970:	4311      	orrs	r1, r2
 8004972:	61d9      	str	r1, [r3, #28]
 8004974:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004976:	2500      	movs	r5, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8004978:	4011      	ands	r1, r2
 800497a:	9103      	str	r1, [sp, #12]
 800497c:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800497e:	6959      	ldr	r1, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004980:	2702      	movs	r7, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004982:	4311      	orrs	r1, r2
 8004984:	6159      	str	r1, [r3, #20]
 8004986:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004988:	2603      	movs	r6, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498a:	4013      	ands	r3, r2
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8004990:	2304      	movs	r3, #4
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8004992:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8004994:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8004996:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8004998:	3b03      	subs	r3, #3
 800499a:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049a0:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80049a2:	f000 f9ad 	bl	8004d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80049a6:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80049a8:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80049aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80049ac:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80049ae:	3b07      	subs	r3, #7
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80049b0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80049b2:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b4:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049b8:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80049ba:	f000 f9a1 	bl	8004d00 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049be:	002a      	movs	r2, r5
 80049c0:	0029      	movs	r1, r5
 80049c2:	201c      	movs	r0, #28
 80049c4:	f000 f872 	bl	8004aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049c8:	201c      	movs	r0, #28
 80049ca:	f000 f899 	bl	8004b00 <HAL_NVIC_EnableIRQ>
    USART2_MspInit(&hcom_uart[COM]);
 80049ce:	2388      	movs	r3, #136	@ 0x88
 80049d0:	4260      	negs	r0, r4
 80049d2:	4018      	ands	r0, r3
 80049d4:	9b01      	ldr	r3, [sp, #4]
 80049d6:	18c0      	adds	r0, r0, r3
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80049d8:	f7ff ffa0 	bl	800491c <MX_USART2_UART_Init>
 80049dc:	42a8      	cmp	r0, r5
 80049de:	d104      	bne.n	80049ea <BSP_COM_Init+0x9e>
}
 80049e0:	b00b      	add	sp, #44	@ 0x2c
 80049e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80049e4:	2002      	movs	r0, #2
      ret = BSP_ERROR_PERIPH_FAILURE;
 80049e6:	4240      	negs	r0, r0
  return ret;
 80049e8:	e7fa      	b.n	80049e0 <BSP_COM_Init+0x94>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80049ea:	2004      	movs	r0, #4
 80049ec:	e7fb      	b.n	80049e6 <BSP_COM_Init+0x9a>
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	20000008 	.word	0x20000008
 80049f4:	20000d5c 	.word	0x20000d5c
 80049f8:	40021000 	.word	0x40021000

080049fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a00:	20fa      	movs	r0, #250	@ 0xfa
 8004a02:	4b0d      	ldr	r3, [pc, #52]	@ (8004a38 <HAL_InitTick+0x3c>)
 8004a04:	0080      	lsls	r0, r0, #2
 8004a06:	7819      	ldrb	r1, [r3, #0]
 8004a08:	f7fb fbae 	bl	8000168 <__udivsi3>
 8004a0c:	4c0b      	ldr	r4, [pc, #44]	@ (8004a3c <HAL_InitTick+0x40>)
 8004a0e:	0001      	movs	r1, r0
 8004a10:	6820      	ldr	r0, [r4, #0]
 8004a12:	f7fb fba9 	bl	8000168 <__udivsi3>
 8004a16:	f000 f87f 	bl	8004b18 <HAL_SYSTICK_Config>
 8004a1a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8004a1c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a1e:	2c00      	cmp	r4, #0
 8004a20:	d109      	bne.n	8004a36 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a22:	2d03      	cmp	r5, #3
 8004a24:	d807      	bhi.n	8004a36 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a26:	3802      	subs	r0, #2
 8004a28:	0022      	movs	r2, r4
 8004a2a:	0029      	movs	r1, r5
 8004a2c:	f000 f83e 	bl	8004aac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a30:	0020      	movs	r0, r4
 8004a32:	4b03      	ldr	r3, [pc, #12]	@ (8004a40 <HAL_InitTick+0x44>)
 8004a34:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
 8004a38:	20000014 	.word	0x20000014
 8004a3c:	20000004 	.word	0x20000004
 8004a40:	20000018 	.word	0x20000018

08004a44 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a44:	2310      	movs	r3, #16
 8004a46:	4a06      	ldr	r2, [pc, #24]	@ (8004a60 <HAL_Init+0x1c>)
{
 8004a48:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a4a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a4c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a52:	f7ff ffd3 	bl	80049fc <HAL_InitTick>
  HAL_MspInit();
 8004a56:	f7fc fca7 	bl	80013a8 <HAL_MspInit>
}
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	bd10      	pop	{r4, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	40022000 	.word	0x40022000

08004a64 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004a64:	4a03      	ldr	r2, [pc, #12]	@ (8004a74 <HAL_IncTick+0x10>)
 8004a66:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <HAL_IncTick+0x14>)
 8004a68:	6811      	ldr	r1, [r2, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	185b      	adds	r3, r3, r1
 8004a6e:	6013      	str	r3, [r2, #0]
}
 8004a70:	4770      	bx	lr
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	20000de4 	.word	0x20000de4
 8004a78:	20000014 	.word	0x20000014

08004a7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004a7c:	4b01      	ldr	r3, [pc, #4]	@ (8004a84 <HAL_GetTick+0x8>)
 8004a7e:	6818      	ldr	r0, [r3, #0]
}
 8004a80:	4770      	bx	lr
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	20000de4 	.word	0x20000de4

08004a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a8c:	f7ff fff6 	bl	8004a7c <HAL_GetTick>
 8004a90:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a92:	1c63      	adds	r3, r4, #1
 8004a94:	d002      	beq.n	8004a9c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a96:	4b04      	ldr	r3, [pc, #16]	@ (8004aa8 <HAL_Delay+0x20>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004a9c:	f7ff ffee 	bl	8004a7c <HAL_GetTick>
 8004aa0:	1b40      	subs	r0, r0, r5
 8004aa2:	42a0      	cmp	r0, r4
 8004aa4:	d3fa      	bcc.n	8004a9c <HAL_Delay+0x14>
  {
  }
}
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}
 8004aa8:	20000014 	.word	0x20000014

08004aac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aac:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004aae:	24ff      	movs	r4, #255	@ 0xff
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	000b      	movs	r3, r1
 8004ab4:	0021      	movs	r1, r4
 8004ab6:	4002      	ands	r2, r0
 8004ab8:	00d2      	lsls	r2, r2, #3
 8004aba:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004abc:	019b      	lsls	r3, r3, #6
 8004abe:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ac0:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ac2:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	db0a      	blt.n	8004ade <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ac8:	24c0      	movs	r4, #192	@ 0xc0
 8004aca:	4a0b      	ldr	r2, [pc, #44]	@ (8004af8 <HAL_NVIC_SetPriority+0x4c>)
 8004acc:	0880      	lsrs	r0, r0, #2
 8004ace:	0080      	lsls	r0, r0, #2
 8004ad0:	1880      	adds	r0, r0, r2
 8004ad2:	00a4      	lsls	r4, r4, #2
 8004ad4:	5902      	ldr	r2, [r0, r4]
 8004ad6:	400a      	ands	r2, r1
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8004adc:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ade:	220f      	movs	r2, #15
 8004ae0:	4010      	ands	r0, r2
 8004ae2:	3808      	subs	r0, #8
 8004ae4:	4a05      	ldr	r2, [pc, #20]	@ (8004afc <HAL_NVIC_SetPriority+0x50>)
 8004ae6:	0880      	lsrs	r0, r0, #2
 8004ae8:	0080      	lsls	r0, r0, #2
 8004aea:	1880      	adds	r0, r0, r2
 8004aec:	69c2      	ldr	r2, [r0, #28]
 8004aee:	4011      	ands	r1, r2
 8004af0:	4319      	orrs	r1, r3
 8004af2:	61c1      	str	r1, [r0, #28]
 8004af4:	e7f2      	b.n	8004adc <HAL_NVIC_SetPriority+0x30>
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	e000e100 	.word	0xe000e100
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b00:	2800      	cmp	r0, #0
 8004b02:	db05      	blt.n	8004b10 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b04:	231f      	movs	r3, #31
 8004b06:	4018      	ands	r0, r3
 8004b08:	3b1e      	subs	r3, #30
 8004b0a:	4083      	lsls	r3, r0
 8004b0c:	4a01      	ldr	r2, [pc, #4]	@ (8004b14 <HAL_NVIC_EnableIRQ+0x14>)
 8004b0e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b10:	4770      	bx	lr
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	e000e100 	.word	0xe000e100

08004b18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b18:	2280      	movs	r2, #128	@ 0x80
 8004b1a:	1e43      	subs	r3, r0, #1
 8004b1c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b1e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d20d      	bcs.n	8004b40 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b24:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b26:	4a07      	ldr	r2, [pc, #28]	@ (8004b44 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b28:	4807      	ldr	r0, [pc, #28]	@ (8004b48 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b2a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b2c:	6a03      	ldr	r3, [r0, #32]
 8004b2e:	0609      	lsls	r1, r1, #24
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b38:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b3a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b3c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b3e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004b40:	4770      	bx	lr
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	e000e010 	.word	0xe000e010
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 8004b50:	2001      	movs	r0, #1
  if (NULL == hdma)
 8004b52:	2c00      	cmp	r4, #0
 8004b54:	d024      	beq.n	8004ba0 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b56:	2302      	movs	r3, #2
 8004b58:	1ca5      	adds	r5, r4, #2
 8004b5a:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b5c:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004b5e:	4b11      	ldr	r3, [pc, #68]	@ (8004ba4 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 8004b60:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b62:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004b64:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8004b66:	6863      	ldr	r3, [r4, #4]
 8004b68:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b6a:	68e1      	ldr	r1, [r4, #12]
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6921      	ldr	r1, [r4, #16]
 8004b70:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b72:	6961      	ldr	r1, [r4, #20]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	69a1      	ldr	r1, [r4, #24]
 8004b78:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b7a:	69e1      	ldr	r1, [r4, #28]
 8004b7c:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8004b7e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b80:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b82:	4b09      	ldr	r3, [pc, #36]	@ (8004ba8 <HAL_DMA_Init+0x5c>)
 8004b84:	2114      	movs	r1, #20
 8004b86:	18c0      	adds	r0, r0, r3
 8004b88:	f7fb faee 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8004b8c:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b8e:	0080      	lsls	r0, r0, #2
 8004b90:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004b92:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b94:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004b96:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b98:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8004b9a:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8004b9c:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8004b9e:	77e0      	strb	r0, [r4, #31]
}
 8004ba0:	bd70      	pop	{r4, r5, r6, pc}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	ffffc00f 	.word	0xffffc00f
 8004ba8:	bffdfff8 	.word	0xbffdfff8
 8004bac:	40020000 	.word	0x40020000

08004bb0 <HAL_DMA_Abort>:
{
 8004bb0:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004bb2:	1c84      	adds	r4, r0, #2
 8004bb4:	7fe2      	ldrb	r2, [r4, #31]
{
 8004bb6:	0003      	movs	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004bb8:	2a02      	cmp	r2, #2
 8004bba:	d006      	beq.n	8004bca <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8004bc0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	77da      	strb	r2, [r3, #31]
}
 8004bc8:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bca:	6802      	ldr	r2, [r0, #0]
 8004bcc:	200e      	movs	r0, #14
 8004bce:	6811      	ldr	r1, [r2, #0]
 8004bd0:	4381      	bics	r1, r0
 8004bd2:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004bd4:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004bd6:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004bd8:	6810      	ldr	r0, [r2, #0]
 8004bda:	4388      	bics	r0, r1
 8004bdc:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004bde:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be2:	4085      	lsls	r5, r0
  return HAL_OK;
 8004be4:	2000      	movs	r0, #0
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004be6:	6055      	str	r5, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8004be8:	77e1      	strb	r1, [r4, #31]
  return HAL_OK;
 8004bea:	e7ea      	b.n	8004bc2 <HAL_DMA_Abort+0x12>

08004bec <HAL_DMA_Abort_IT>:
{
 8004bec:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004bee:	1c84      	adds	r4, r0, #2
 8004bf0:	7fe3      	ldrb	r3, [r4, #31]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d003      	beq.n	8004bfe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8004bfa:	2001      	movs	r0, #1
}
 8004bfc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bfe:	210e      	movs	r1, #14
 8004c00:	6803      	ldr	r3, [r0, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	438a      	bics	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004c08:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c0a:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004c0c:	6819      	ldr	r1, [r3, #0]
 8004c0e:	4391      	bics	r1, r2
 8004c10:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c12:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004c14:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004c16:	408d      	lsls	r5, r1
 8004c18:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004c1a:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8004c1c:	1883      	adds	r3, r0, r2
 8004c1e:	2200      	movs	r2, #0
 8004c20:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8004c22:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d000      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 8004c28:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	e7e6      	b.n	8004bfc <HAL_DMA_Abort_IT+0x10>

08004c2e <HAL_DMA_IRQHandler>:
{
 8004c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004c30:	2704      	movs	r7, #4
 8004c32:	003e      	movs	r6, r7
 8004c34:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004c38:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c3a:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004c3c:	6803      	ldr	r3, [r0, #0]
 8004c3e:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004c40:	4235      	tst	r5, r6
 8004c42:	d00d      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x32>
 8004c44:	423c      	tst	r4, r7
 8004c46:	d00b      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c48:	6819      	ldr	r1, [r3, #0]
 8004c4a:	0689      	lsls	r1, r1, #26
 8004c4c:	d402      	bmi.n	8004c54 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	43b9      	bics	r1, r7
 8004c52:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8004c54:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004c56:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d019      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 8004c5c:	4798      	blx	r3
}
 8004c5e:	e017      	b.n	8004c90 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004c60:	2702      	movs	r7, #2
 8004c62:	003e      	movs	r6, r7
 8004c64:	408e      	lsls	r6, r1
 8004c66:	4235      	tst	r5, r6
 8004c68:	d013      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x64>
 8004c6a:	423c      	tst	r4, r7
 8004c6c:	d011      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c6e:	6819      	ldr	r1, [r3, #0]
 8004c70:	0689      	lsls	r1, r1, #26
 8004c72:	d406      	bmi.n	8004c82 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004c74:	240a      	movs	r4, #10
 8004c76:	6819      	ldr	r1, [r3, #0]
 8004c78:	43a1      	bics	r1, r4
 8004c7a:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	19c3      	adds	r3, r0, r7
 8004c80:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004c82:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 8004c84:	2200      	movs	r2, #0
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 8004c8a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if (hdma->XferErrorCallback != NULL)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d1e5      	bne.n	8004c5c <HAL_DMA_IRQHandler+0x2e>
}
 8004c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004c92:	2608      	movs	r6, #8
 8004c94:	0037      	movs	r7, r6
 8004c96:	408f      	lsls	r7, r1
 8004c98:	423d      	tst	r5, r7
 8004c9a:	d0f9      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x62>
 8004c9c:	4234      	tst	r4, r6
 8004c9e:	d0f7      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ca0:	250e      	movs	r5, #14
 8004ca2:	681c      	ldr	r4, [r3, #0]
 8004ca4:	43ac      	bics	r4, r5
 8004ca6:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	001c      	movs	r4, r3
 8004cac:	408c      	lsls	r4, r1
 8004cae:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004cb0:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cb2:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8004cb4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	18c3      	adds	r3, r0, r3
 8004cba:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8004cbc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004cbe:	e7e5      	b.n	8004c8c <HAL_DMA_IRQHandler+0x5e>

08004cc0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8004cc4:	d101      	bne.n	8004cca <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004cc6:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8004cc8:	4770      	bx	lr
      status = HAL_ERROR;
 8004cca:	2001      	movs	r0, #1
 8004ccc:	e7fc      	b.n	8004cc8 <HAL_EXTI_RegisterCallback+0x8>

08004cce <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004cce:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8004cd0:	2001      	movs	r0, #1
  if (hexti == NULL)
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8004cd6:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8004cd8:	6019      	str	r1, [r3, #0]
  }
}
 8004cda:	4770      	bx	lr

08004cdc <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004cdc:	231f      	movs	r3, #31
 8004cde:	6802      	ldr	r2, [r0, #0]
{
 8004ce0:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	3b1e      	subs	r3, #30
 8004ce6:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8004ce8:	4a04      	ldr	r2, [pc, #16]	@ (8004cfc <HAL_EXTI_IRQHandler+0x20>)
 8004cea:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8004cec:	420b      	tst	r3, r1
 8004cee:	d004      	beq.n	8004cfa <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8004cf0:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004cf2:	6843      	ldr	r3, [r0, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d000      	beq.n	8004cfa <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8004cf8:	4798      	blx	r3
    }
  }
}
 8004cfa:	bd10      	pop	{r4, pc}
 8004cfc:	40010400 	.word	0x40010400

08004d00 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8004d00:	2300      	movs	r3, #0
{
 8004d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d04:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d06:	680a      	ldr	r2, [r1, #0]
 8004d08:	0014      	movs	r4, r2
 8004d0a:	40dc      	lsrs	r4, r3
 8004d0c:	d101      	bne.n	8004d12 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8004d0e:	b007      	add	sp, #28
 8004d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d12:	2501      	movs	r5, #1
 8004d14:	0014      	movs	r4, r2
 8004d16:	409d      	lsls	r5, r3
 8004d18:	402c      	ands	r4, r5
 8004d1a:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8004d1c:	422a      	tst	r2, r5
 8004d1e:	d100      	bne.n	8004d22 <HAL_GPIO_Init+0x22>
 8004d20:	e09c      	b.n	8004e5c <HAL_GPIO_Init+0x15c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d22:	684a      	ldr	r2, [r1, #4]
 8004d24:	005f      	lsls	r7, r3, #1
 8004d26:	4694      	mov	ip, r2
 8004d28:	2203      	movs	r2, #3
 8004d2a:	4664      	mov	r4, ip
 8004d2c:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d2e:	2403      	movs	r4, #3
 8004d30:	40bc      	lsls	r4, r7
 8004d32:	43e4      	mvns	r4, r4
 8004d34:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d36:	1e54      	subs	r4, r2, #1
 8004d38:	2c01      	cmp	r4, #1
 8004d3a:	d82e      	bhi.n	8004d9a <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8004d3c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d3e:	9c01      	ldr	r4, [sp, #4]
 8004d40:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d42:	68cc      	ldr	r4, [r1, #12]
 8004d44:	40bc      	lsls	r4, r7
 8004d46:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8004d48:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8004d4a:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d4c:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d4e:	43ac      	bics	r4, r5
 8004d50:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d52:	4664      	mov	r4, ip
 8004d54:	0924      	lsrs	r4, r4, #4
 8004d56:	4034      	ands	r4, r6
 8004d58:	409c      	lsls	r4, r3
 8004d5a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8004d5c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8004d5e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d60:	9c01      	ldr	r4, [sp, #4]
 8004d62:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d64:	688c      	ldr	r4, [r1, #8]
 8004d66:	40bc      	lsls	r4, r7
 8004d68:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8004d6a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d6c:	2a02      	cmp	r2, #2
 8004d6e:	d116      	bne.n	8004d9e <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d70:	2507      	movs	r5, #7
 8004d72:	260f      	movs	r6, #15
 8004d74:	401d      	ands	r5, r3
 8004d76:	00ad      	lsls	r5, r5, #2
 8004d78:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8004d7a:	08dc      	lsrs	r4, r3, #3
 8004d7c:	00a4      	lsls	r4, r4, #2
 8004d7e:	1904      	adds	r4, r0, r4
 8004d80:	9402      	str	r4, [sp, #8]
 8004d82:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d84:	9603      	str	r6, [sp, #12]
 8004d86:	0026      	movs	r6, r4
 8004d88:	9c03      	ldr	r4, [sp, #12]
 8004d8a:	43a6      	bics	r6, r4
 8004d8c:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d8e:	690e      	ldr	r6, [r1, #16]
 8004d90:	40ae      	lsls	r6, r5
 8004d92:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8004d94:	9c02      	ldr	r4, [sp, #8]
 8004d96:	6226      	str	r6, [r4, #32]
 8004d98:	e001      	b.n	8004d9e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d9a:	2a03      	cmp	r2, #3
 8004d9c:	d1df      	bne.n	8004d5e <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d9e:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8004da0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004da2:	9d01      	ldr	r5, [sp, #4]
 8004da4:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004da6:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004da8:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8004daa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dac:	4662      	mov	r2, ip
 8004dae:	02a4      	lsls	r4, r4, #10
 8004db0:	4222      	tst	r2, r4
 8004db2:	d053      	beq.n	8004e5c <HAL_GPIO_Init+0x15c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db4:	2501      	movs	r5, #1
 8004db6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e60 <HAL_GPIO_Init+0x160>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004db8:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dba:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004dbc:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dbe:	432c      	orrs	r4, r5
 8004dc0:	6194      	str	r4, [r2, #24]
 8004dc2:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004dc4:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dc6:	402a      	ands	r2, r5
 8004dc8:	9205      	str	r2, [sp, #20]
 8004dca:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004dcc:	4a25      	ldr	r2, [pc, #148]	@ (8004e64 <HAL_GPIO_Init+0x164>)
 8004dce:	00a4      	lsls	r4, r4, #2
 8004dd0:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004dd2:	220f      	movs	r2, #15
 8004dd4:	3502      	adds	r5, #2
 8004dd6:	401d      	ands	r5, r3
 8004dd8:	00ad      	lsls	r5, r5, #2
 8004dda:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8004ddc:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004dde:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004de0:	2200      	movs	r2, #0
 8004de2:	42b8      	cmp	r0, r7
 8004de4:	d010      	beq.n	8004e08 <HAL_GPIO_Init+0x108>
 8004de6:	4f20      	ldr	r7, [pc, #128]	@ (8004e68 <HAL_GPIO_Init+0x168>)
 8004de8:	3201      	adds	r2, #1
 8004dea:	42b8      	cmp	r0, r7
 8004dec:	d00c      	beq.n	8004e08 <HAL_GPIO_Init+0x108>
 8004dee:	4f1f      	ldr	r7, [pc, #124]	@ (8004e6c <HAL_GPIO_Init+0x16c>)
 8004df0:	3201      	adds	r2, #1
 8004df2:	42b8      	cmp	r0, r7
 8004df4:	d008      	beq.n	8004e08 <HAL_GPIO_Init+0x108>
 8004df6:	4f1e      	ldr	r7, [pc, #120]	@ (8004e70 <HAL_GPIO_Init+0x170>)
 8004df8:	3201      	adds	r2, #1
 8004dfa:	42b8      	cmp	r0, r7
 8004dfc:	d004      	beq.n	8004e08 <HAL_GPIO_Init+0x108>
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8004e74 <HAL_GPIO_Init+0x174>)
 8004e00:	1882      	adds	r2, r0, r2
 8004e02:	1e57      	subs	r7, r2, #1
 8004e04:	41ba      	sbcs	r2, r7
 8004e06:	3204      	adds	r2, #4
 8004e08:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e0a:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e0c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e0e:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8004e10:	4a19      	ldr	r2, [pc, #100]	@ (8004e78 <HAL_GPIO_Init+0x178>)
        temp &= ~(iocurrent);
 8004e12:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8004e14:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8004e16:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8004e18:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8004e1a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e1c:	02ff      	lsls	r7, r7, #11
 8004e1e:	d401      	bmi.n	8004e24 <HAL_GPIO_Init+0x124>
        temp &= ~(iocurrent);
 8004e20:	0035      	movs	r5, r6
 8004e22:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e24:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8004e26:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8004e28:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8004e2a:	9d00      	ldr	r5, [sp, #0]
 8004e2c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e2e:	02bf      	lsls	r7, r7, #10
 8004e30:	d401      	bmi.n	8004e36 <HAL_GPIO_Init+0x136>
        temp &= ~(iocurrent);
 8004e32:	0035      	movs	r5, r6
 8004e34:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e36:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8004e38:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8004e3a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8004e3c:	9d00      	ldr	r5, [sp, #0]
 8004e3e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e40:	03bf      	lsls	r7, r7, #14
 8004e42:	d401      	bmi.n	8004e48 <HAL_GPIO_Init+0x148>
        temp &= ~(iocurrent);
 8004e44:	0035      	movs	r5, r6
 8004e46:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e48:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8004e4a:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8004e4c:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8004e4e:	9e00      	ldr	r6, [sp, #0]
 8004e50:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e52:	03ff      	lsls	r7, r7, #15
 8004e54:	d401      	bmi.n	8004e5a <HAL_GPIO_Init+0x15a>
        temp &= ~(iocurrent);
 8004e56:	4025      	ands	r5, r4
 8004e58:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8004e5a:	6016      	str	r6, [r2, #0]
    position++;
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	e752      	b.n	8004d06 <HAL_GPIO_Init+0x6>
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40010000 	.word	0x40010000
 8004e68:	48000400 	.word	0x48000400
 8004e6c:	48000800 	.word	0x48000800
 8004e70:	48000c00 	.word	0x48000c00
 8004e74:	b7fff000 	.word	0xb7fff000
 8004e78:	40010400 	.word	0x40010400

08004e7c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e7c:	6900      	ldr	r0, [r0, #16]
 8004e7e:	4008      	ands	r0, r1
 8004e80:	1e43      	subs	r3, r0, #1
 8004e82:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8004e84:	b2c0      	uxtb	r0, r0
  }
 8004e86:	4770      	bx	lr

08004e88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e88:	2a00      	cmp	r2, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e8c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e8e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e90:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8004e92:	e7fc      	b.n	8004e8e <HAL_GPIO_WritePin+0x6>

08004e94 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e94:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e96:	0013      	movs	r3, r2
 8004e98:	400b      	ands	r3, r1
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	4391      	bics	r1, r2
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	6183      	str	r3, [r0, #24]
}
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8004ea8:	2001      	movs	r0, #1
  if (hpcd == NULL)
 8004eaa:	2c00      	cmp	r4, #0
 8004eac:	d02b      	beq.n	8004f06 <HAL_PCD_Init+0x62>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004eae:	4d22      	ldr	r5, [pc, #136]	@ (8004f38 <HAL_PCD_Init+0x94>)
 8004eb0:	5d63      	ldrb	r3, [r4, r5]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d105      	bne.n	8004ec4 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004eb8:	23a4      	movs	r3, #164	@ 0xa4
 8004eba:	009b      	lsls	r3, r3, #2

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ebc:	0020      	movs	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 8004ebe:	54e2      	strb	r2, [r4, r3]
    HAL_PCD_MspInit(hpcd);
 8004ec0:	f7fc fc0e 	bl	80016e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ec8:	6820      	ldr	r0, [r4, #0]
 8004eca:	f002 fd25 	bl	8007918 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	0022      	movs	r2, r4
 8004ed2:	0019      	movs	r1, r3
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ed4:	2601      	movs	r6, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ed6:	7920      	ldrb	r0, [r4, #4]
 8004ed8:	3210      	adds	r2, #16
 8004eda:	4298      	cmp	r0, r3
 8004edc:	d114      	bne.n	8004f08 <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ede:	2100      	movs	r1, #0
 8004ee0:	0022      	movs	r2, r4
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ee2:	0008      	movs	r0, r1
 8004ee4:	3251      	adds	r2, #81	@ 0x51
 8004ee6:	32ff      	adds	r2, #255	@ 0xff
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	d117      	bne.n	8004f1c <HAL_PCD_Init+0x78>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004eec:	6861      	ldr	r1, [r4, #4]
 8004eee:	68a2      	ldr	r2, [r4, #8]
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	f002 fd1b 	bl	800792c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004efa:	3301      	adds	r3, #1
 8004efc:	5563      	strb	r3, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004efe:	7aa3      	ldrb	r3, [r4, #10]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d015      	beq.n	8004f30 <HAL_PCD_Init+0x8c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8004f04:	2000      	movs	r0, #0
}
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].num = i;
 8004f08:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f0a:	3301      	adds	r3, #1
    hpcd->IN_ep[i].is_in = 1U;
 8004f0c:	7056      	strb	r6, [r2, #1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f0e:	70d1      	strb	r1, [r2, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f10:	6111      	str	r1, [r2, #16]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f12:	6151      	str	r1, [r2, #20]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f14:	6191      	str	r1, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	3228      	adds	r2, #40	@ 0x28
 8004f1a:	e7de      	b.n	8004eda <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].num = i;
 8004f1c:	7011      	strb	r1, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f1e:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8004f20:	7050      	strb	r0, [r2, #1]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f22:	70d0      	strb	r0, [r2, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f24:	6110      	str	r0, [r2, #16]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f26:	6150      	str	r0, [r2, #20]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f28:	6190      	str	r0, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f2a:	b2c9      	uxtb	r1, r1
 8004f2c:	3228      	adds	r2, #40	@ 0x28
 8004f2e:	e7db      	b.n	8004ee8 <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f30:	0020      	movs	r0, r4
 8004f32:	f000 fe0e 	bl	8005b52 <HAL_PCDEx_ActivateLPM>
 8004f36:	e7e5      	b.n	8004f04 <HAL_PCD_Init+0x60>
 8004f38:	00000291 	.word	0x00000291

08004f3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f3c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8004f3e:	25a4      	movs	r5, #164	@ 0xa4
 8004f40:	00ad      	lsls	r5, r5, #2
 8004f42:	5d43      	ldrb	r3, [r0, r5]
{
 8004f44:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8004f46:	2002      	movs	r0, #2
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d009      	beq.n	8004f60 <HAL_PCD_Start+0x24>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	f002 fcd7 	bl	8007904 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f56:	6820      	ldr	r0, [r4, #0]
 8004f58:	f002 fee3 	bl	8007d22 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8004f60:	bd70      	pop	{r4, r5, r6, pc}

08004f62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f62:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8004f64:	25a4      	movs	r5, #164	@ 0xa4
 8004f66:	00ad      	lsls	r5, r5, #2
 8004f68:	5d43      	ldrb	r3, [r0, r5]
{
 8004f6a:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8004f6c:	2002      	movs	r0, #2
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d007      	beq.n	8004f82 <HAL_PCD_SetAddress+0x20>
 8004f72:	2301      	movs	r3, #1
 8004f74:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f76:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 8004f78:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f7a:	f002 fecb 	bl	8007d14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f7e:	2000      	movs	r0, #0
 8004f80:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8004f82:	bd70      	pop	{r4, r5, r6, pc}

08004f84 <HAL_PCD_IRQHandler>:
{
 8004f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f86:	0004      	movs	r4, r0
 8004f88:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004f8a:	6800      	ldr	r0, [r0, #0]
 8004f8c:	f002 fed1 	bl	8007d32 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004f90:	2380      	movs	r3, #128	@ 0x80
 8004f92:	0005      	movs	r5, r0
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	401d      	ands	r5, r3
 8004f98:	4218      	tst	r0, r3
 8004f9a:	d101      	bne.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
 8004f9c:	f000 fc27 	bl	80057ee <HAL_PCD_IRQHandler+0x86a>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004fa0:	6820      	ldr	r0, [r4, #0]
 8004fa2:	1d82      	adds	r2, r0, #6
 8004fa4:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8004fa6:	b21b      	sxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	db01      	blt.n	8004fb0 <HAL_PCD_IRQHandler+0x2c>
}
 8004fac:	b005      	add	sp, #20
 8004fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004fb0:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8004fb2:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004fb4:	4019      	ands	r1, r3
 8004fb6:	9100      	str	r1, [sp, #0]

    if (epindex == 0U)
 8004fb8:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8004fba:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 8004fbc:	420b      	tst	r3, r1
 8004fbe:	d000      	beq.n	8004fc2 <HAL_PCD_IRQHandler+0x3e>
 8004fc0:	e0c0      	b.n	8005144 <HAL_PCD_IRQHandler+0x1c0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004fc2:	2310      	movs	r3, #16
 8004fc4:	0011      	movs	r1, r2
 8004fc6:	4019      	ands	r1, r3
 8004fc8:	421a      	tst	r2, r3
 8004fca:	d127      	bne.n	800501c <HAL_PCD_IRQHandler+0x98>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fcc:	8803      	ldrh	r3, [r0, #0]
 8004fce:	4aca      	ldr	r2, [pc, #808]	@ (80052f8 <HAL_PCD_IRQHandler+0x374>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2280      	movs	r2, #128	@ 0x80
 8004fd4:	0212      	lsls	r2, r2, #8
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fda:	0003      	movs	r3, r0
 8004fdc:	3350      	adds	r3, #80	@ 0x50
 8004fde:	881a      	ldrh	r2, [r3, #0]
 8004fe0:	7c23      	ldrb	r3, [r4, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	18c3      	adds	r3, r0, r3
 8004fe6:	189b      	adds	r3, r3, r2
 8004fe8:	4ac4      	ldr	r2, [pc, #784]	@ (80052fc <HAL_PCD_IRQHandler+0x378>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004fea:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fec:	189b      	adds	r3, r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8004ff0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ff2:	059b      	lsls	r3, r3, #22
 8004ff4:	0d9b      	lsrs	r3, r3, #22
 8004ff6:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8004ff8:	18d3      	adds	r3, r2, r3
 8004ffa:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004ffc:	f00a f8fd 	bl	800f1fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005000:	7b23      	ldrb	r3, [r4, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0cc      	beq.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
 8005006:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005008:	6823      	ldr	r3, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800500a:	2900      	cmp	r1, #0
 800500c:	d1c8      	bne.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800500e:	2080      	movs	r0, #128	@ 0x80
 8005010:	7b22      	ldrb	r2, [r4, #12]
 8005012:	334c      	adds	r3, #76	@ 0x4c
 8005014:	4302      	orrs	r2, r0
 8005016:	801a      	strh	r2, [r3, #0]
          hpcd->USB_Address = 0U;
 8005018:	7321      	strb	r1, [r4, #12]
 800501a:	e7c1      	b.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800501c:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800501e:	2180      	movs	r1, #128	@ 0x80
 8005020:	0016      	movs	r6, r2
 8005022:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005024:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005026:	400e      	ands	r6, r1
 8005028:	420a      	tst	r2, r1
 800502a:	d022      	beq.n	8005072 <HAL_PCD_IRQHandler+0xee>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800502c:	0003      	movs	r3, r0
 800502e:	3350      	adds	r3, #80	@ 0x50
 8005030:	881a      	ldrh	r2, [r3, #0]
 8005032:	23a8      	movs	r3, #168	@ 0xa8
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005038:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	18c3      	adds	r3, r0, r3
 800503e:	189b      	adds	r3, r3, r2
 8005040:	4aaf      	ldr	r2, [pc, #700]	@ (8005300 <HAL_PCD_IRQHandler+0x37c>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005042:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005044:	189b      	adds	r3, r3, r2
 8005046:	0022      	movs	r2, r4
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	3251      	adds	r2, #81	@ 0x51
 800504c:	059b      	lsls	r3, r3, #22
 800504e:	0d9b      	lsrs	r3, r3, #22
 8005050:	32ff      	adds	r2, #255	@ 0xff
 8005052:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005054:	1861      	adds	r1, r4, r1
 8005056:	88d2      	ldrh	r2, [r2, #6]
 8005058:	f003 f8b6 	bl	80081c8 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800505c:	6821      	ldr	r1, [r4, #0]
 800505e:	4ba9      	ldr	r3, [pc, #676]	@ (8005304 <HAL_PCD_IRQHandler+0x380>)
 8005060:	880a      	ldrh	r2, [r1, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005062:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005064:	401a      	ands	r2, r3
 8005066:	2380      	movs	r3, #128	@ 0x80
 8005068:	4313      	orrs	r3, r2
 800506a:	800b      	strh	r3, [r1, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800506c:	f00a f8b0 	bl	800f1d0 <HAL_PCD_SetupStageCallback>
 8005070:	e796      	b.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005072:	b21b      	sxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	db00      	blt.n	800507a <HAL_PCD_IRQHandler+0xf6>
 8005078:	e792      	b.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800507a:	8802      	ldrh	r2, [r0, #0]
 800507c:	4ba1      	ldr	r3, [pc, #644]	@ (8005304 <HAL_PCD_IRQHandler+0x380>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800507e:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005080:	401a      	ands	r2, r3
 8005082:	2380      	movs	r3, #128	@ 0x80
 8005084:	4313      	orrs	r3, r2
 8005086:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005088:	0003      	movs	r3, r0
 800508a:	3350      	adds	r3, #80	@ 0x50
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	23a8      	movs	r3, #168	@ 0xa8
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	5ce3      	ldrb	r3, [r4, r3]
 8005094:	3551      	adds	r5, #81	@ 0x51
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	18c3      	adds	r3, r0, r3
 800509a:	189b      	adds	r3, r3, r2
 800509c:	4a98      	ldr	r2, [pc, #608]	@ (8005300 <HAL_PCD_IRQHandler+0x37c>)
 800509e:	35ff      	adds	r5, #255	@ 0xff
 80050a0:	189b      	adds	r3, r3, r2
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	059b      	lsls	r3, r3, #22
 80050a6:	0d9b      	lsrs	r3, r3, #22
 80050a8:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80050aa:	d00d      	beq.n	80050c8 <HAL_PCD_IRQHandler+0x144>
 80050ac:	6969      	ldr	r1, [r5, #20]
 80050ae:	2900      	cmp	r1, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_PCD_IRQHandler+0x144>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80050b2:	88ea      	ldrh	r2, [r5, #6]
 80050b4:	f003 f888 	bl	80081c8 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 80050b8:	696b      	ldr	r3, [r5, #20]
 80050ba:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80050bc:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 80050be:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80050c0:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80050c2:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80050c4:	f00a f88d 	bl	800f1e2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80050c8:	6821      	ldr	r1, [r4, #0]
 80050ca:	880a      	ldrh	r2, [r1, #0]
 80050cc:	b293      	uxth	r3, r2

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80050ce:	0512      	lsls	r2, r2, #20
 80050d0:	d500      	bpl.n	80050d4 <HAL_PCD_IRQHandler+0x150>
 80050d2:	e765      	b.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
 80050d4:	22c0      	movs	r2, #192	@ 0xc0
 80050d6:	0192      	lsls	r2, r2, #6
 80050d8:	4013      	ands	r3, r2
 80050da:	4293      	cmp	r3, r2
 80050dc:	d100      	bne.n	80050e0 <HAL_PCD_IRQHandler+0x15c>
 80050de:	e75f      	b.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80050e0:	000b      	movs	r3, r1
 80050e2:	4a87      	ldr	r2, [pc, #540]	@ (8005300 <HAL_PCD_IRQHandler+0x37c>)
 80050e4:	3350      	adds	r3, #80	@ 0x50
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	188a      	adds	r2, r1, r2
 80050ea:	18d2      	adds	r2, r2, r3
 80050ec:	8813      	ldrh	r3, [r2, #0]
 80050ee:	059b      	lsls	r3, r3, #22
 80050f0:	0d9b      	lsrs	r3, r3, #22
 80050f2:	8013      	strh	r3, [r2, #0]
 80050f4:	692b      	ldr	r3, [r5, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10e      	bne.n	8005118 <HAL_PCD_IRQHandler+0x194>
 80050fa:	2080      	movs	r0, #128	@ 0x80
 80050fc:	8813      	ldrh	r3, [r2, #0]
 80050fe:	0200      	lsls	r0, r0, #8
 8005100:	4303      	orrs	r3, r0
 8005102:	8013      	strh	r3, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005104:	880a      	ldrh	r2, [r1, #0]
 8005106:	4b80      	ldr	r3, [pc, #512]	@ (8005308 <HAL_PCD_IRQHandler+0x384>)
 8005108:	401a      	ands	r2, r3
 800510a:	23c0      	movs	r3, #192	@ 0xc0
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	4053      	eors	r3, r2
 8005110:	4a7e      	ldr	r2, [pc, #504]	@ (800530c <HAL_PCD_IRQHandler+0x388>)
 8005112:	4313      	orrs	r3, r2
 8005114:	800b      	strh	r3, [r1, #0]
 8005116:	e743      	b.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005118:	2b3e      	cmp	r3, #62	@ 0x3e
 800511a:	d808      	bhi.n	800512e <HAL_PCD_IRQHandler+0x1aa>
 800511c:	2501      	movs	r5, #1
 800511e:	0858      	lsrs	r0, r3, #1
 8005120:	402b      	ands	r3, r5
 8005122:	18c0      	adds	r0, r0, r3
 8005124:	8813      	ldrh	r3, [r2, #0]
 8005126:	0280      	lsls	r0, r0, #10
 8005128:	4303      	orrs	r3, r0
 800512a:	b29b      	uxth	r3, r3
 800512c:	e7e9      	b.n	8005102 <HAL_PCD_IRQHandler+0x17e>
 800512e:	251f      	movs	r5, #31
 8005130:	0958      	lsrs	r0, r3, #5
 8005132:	402b      	ands	r3, r5
 8005134:	425d      	negs	r5, r3
 8005136:	416b      	adcs	r3, r5
 8005138:	1ac0      	subs	r0, r0, r3
 800513a:	8813      	ldrh	r3, [r2, #0]
 800513c:	0280      	lsls	r0, r0, #10
 800513e:	4318      	orrs	r0, r3
 8005140:	4b73      	ldr	r3, [pc, #460]	@ (8005310 <HAL_PCD_IRQHandler+0x38c>)
 8005142:	e7f1      	b.n	8005128 <HAL_PCD_IRQHandler+0x1a4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005144:	9b00      	ldr	r3, [sp, #0]
 8005146:	009f      	lsls	r7, r3, #2
 8005148:	19c2      	adds	r2, r0, r7
 800514a:	8813      	ldrh	r3, [r2, #0]
 800514c:	b299      	uxth	r1, r3

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800514e:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005150:	9101      	str	r1, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005152:	2b00      	cmp	r3, #0
 8005154:	db00      	blt.n	8005158 <HAL_PCD_IRQHandler+0x1d4>
 8005156:	e092      	b.n	800527e <HAL_PCD_IRQHandler+0x2fa>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005158:	8813      	ldrh	r3, [r2, #0]
 800515a:	496a      	ldr	r1, [pc, #424]	@ (8005304 <HAL_PCD_IRQHandler+0x380>)
 800515c:	400b      	ands	r3, r1
 800515e:	2180      	movs	r1, #128	@ 0x80
 8005160:	430b      	orrs	r3, r1
 8005162:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005164:	2328      	movs	r3, #40	@ 0x28
 8005166:	9a00      	ldr	r2, [sp, #0]
 8005168:	4353      	muls	r3, r2
 800516a:	18e3      	adds	r3, r4, r3
 800516c:	001a      	movs	r2, r3
 800516e:	001d      	movs	r5, r3
 8005170:	325d      	adds	r2, #93	@ 0x5d
 8005172:	32ff      	adds	r2, #255	@ 0xff
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	3551      	adds	r5, #81	@ 0x51
 8005178:	35ff      	adds	r5, #255	@ 0xff
 800517a:	2a00      	cmp	r2, #0
 800517c:	d114      	bne.n	80051a8 <HAL_PCD_IRQHandler+0x224>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800517e:	0002      	movs	r2, r0
 8005180:	3250      	adds	r2, #80	@ 0x50
 8005182:	8811      	ldrh	r1, [r2, #0]
 8005184:	782a      	ldrb	r2, [r5, #0]
 8005186:	00d2      	lsls	r2, r2, #3
 8005188:	1852      	adds	r2, r2, r1
 800518a:	495d      	ldr	r1, [pc, #372]	@ (8005300 <HAL_PCD_IRQHandler+0x37c>)
 800518c:	1812      	adds	r2, r2, r0
 800518e:	1852      	adds	r2, r2, r1
 8005190:	8812      	ldrh	r2, [r2, #0]
 8005192:	0592      	lsls	r2, r2, #22
 8005194:	0d95      	lsrs	r5, r2, #22

          if (count != 0U)
 8005196:	2a00      	cmp	r2, #0
 8005198:	d056      	beq.n	8005248 <HAL_PCD_IRQHandler+0x2c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800519a:	001a      	movs	r2, r3
 800519c:	3257      	adds	r2, #87	@ 0x57
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

              if (count != 0U)
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800519e:	32ff      	adds	r2, #255	@ 0xff
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80051a0:	33fc      	adds	r3, #252	@ 0xfc
 80051a2:	0019      	movs	r1, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051a4:	8812      	ldrh	r2, [r2, #0]
 80051a6:	e04b      	b.n	8005240 <HAL_PCD_IRQHandler+0x2bc>
          if (ep->type == EP_TYPE_BULK)
 80051a8:	0019      	movs	r1, r3
 80051aa:	3154      	adds	r1, #84	@ 0x54
 80051ac:	31ff      	adds	r1, #255	@ 0xff
 80051ae:	7809      	ldrb	r1, [r1, #0]

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051b0:	782a      	ldrb	r2, [r5, #0]
          if (ep->type == EP_TYPE_BULK)
 80051b2:	2902      	cmp	r1, #2
 80051b4:	d000      	beq.n	80051b8 <HAL_PCD_IRQHandler+0x234>
 80051b6:	e0e3      	b.n	8005380 <HAL_PCD_IRQHandler+0x3fc>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051b8:	2680      	movs	r6, #128	@ 0x80
 80051ba:	01f6      	lsls	r6, r6, #7
 80051bc:	46b4      	mov	ip, r6
 80051be:	4665      	mov	r5, ip
 80051c0:	9e01      	ldr	r6, [sp, #4]

    if (ep->xfer_len >= count)
 80051c2:	33fc      	adds	r3, #252	@ 0xfc
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051c4:	402e      	ands	r6, r5
 80051c6:	9603      	str	r6, [sp, #12]
 80051c8:	0006      	movs	r6, r0
 80051ca:	3650      	adds	r6, #80	@ 0x50
 80051cc:	9602      	str	r6, [sp, #8]
 80051ce:	4666      	mov	r6, ip
 80051d0:	9d01      	ldr	r5, [sp, #4]
    if (ep->xfer_len >= count)
 80051d2:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051d4:	4235      	tst	r5, r6
 80051d6:	d100      	bne.n	80051da <HAL_PCD_IRQHandler+0x256>
 80051d8:	e0a0      	b.n	800531c <HAL_PCD_IRQHandler+0x398>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051da:	9d02      	ldr	r5, [sp, #8]
 80051dc:	882e      	ldrh	r6, [r5, #0]
 80051de:	00d5      	lsls	r5, r2, #3
 80051e0:	1976      	adds	r6, r6, r5
 80051e2:	4d46      	ldr	r5, [pc, #280]	@ (80052fc <HAL_PCD_IRQHandler+0x378>)
 80051e4:	1836      	adds	r6, r6, r0
 80051e6:	1976      	adds	r6, r6, r5
 80051e8:	8835      	ldrh	r5, [r6, #0]
 80051ea:	05ad      	lsls	r5, r5, #22
 80051ec:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 80051ee:	428d      	cmp	r5, r1
 80051f0:	d90d      	bls.n	800520e <HAL_PCD_IRQHandler+0x28a>
 80051f2:	2100      	movs	r1, #0
 80051f4:	66d9      	str	r1, [r3, #108]	@ 0x6c
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80051f6:	0091      	lsls	r1, r2, #2
 80051f8:	1841      	adds	r1, r0, r1
 80051fa:	880e      	ldrh	r6, [r1, #0]
 80051fc:	4b42      	ldr	r3, [pc, #264]	@ (8005308 <HAL_PCD_IRQHandler+0x384>)
 80051fe:	401e      	ands	r6, r3
 8005200:	2380      	movs	r3, #128	@ 0x80
 8005202:	019b      	lsls	r3, r3, #6
 8005204:	4073      	eors	r3, r6
 8005206:	4e41      	ldr	r6, [pc, #260]	@ (800530c <HAL_PCD_IRQHandler+0x388>)
 8005208:	4333      	orrs	r3, r6
 800520a:	800b      	strh	r3, [r1, #0]
 800520c:	e002      	b.n	8005214 <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 800520e:	1b49      	subs	r1, r1, r5
 8005210:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 8005212:	d0f0      	beq.n	80051f6 <HAL_PCD_IRQHandler+0x272>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005214:	9b01      	ldr	r3, [sp, #4]
 8005216:	065b      	lsls	r3, r3, #25
 8005218:	d507      	bpl.n	800522a <HAL_PCD_IRQHandler+0x2a6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800521a:	0092      	lsls	r2, r2, #2
 800521c:	1882      	adds	r2, r0, r2
 800521e:	8813      	ldrh	r3, [r2, #0]
 8005220:	493c      	ldr	r1, [pc, #240]	@ (8005314 <HAL_PCD_IRQHandler+0x390>)
 8005222:	400b      	ands	r3, r1
 8005224:	493c      	ldr	r1, [pc, #240]	@ (8005318 <HAL_PCD_IRQHandler+0x394>)
 8005226:	430b      	orrs	r3, r1
 8005228:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800522a:	2d00      	cmp	r5, #0
 800522c:	d00c      	beq.n	8005248 <HAL_PCD_IRQHandler+0x2c4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800522e:	2328      	movs	r3, #40	@ 0x28
 8005230:	9a00      	ldr	r2, [sp, #0]
 8005232:	4353      	muls	r3, r2
 8005234:	18e1      	adds	r1, r4, r3
 8005236:	000a      	movs	r2, r1
 8005238:	3259      	adds	r2, #89	@ 0x59
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
    }

    if (count != 0U)
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800523a:	32ff      	adds	r2, #255	@ 0xff
 800523c:	8812      	ldrh	r2, [r2, #0]
 800523e:	31fc      	adds	r1, #252	@ 0xfc
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005240:	002b      	movs	r3, r5
 8005242:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005244:	f002 ffc0 	bl	80081c8 <USB_ReadPMA>
        ep->xfer_count += count;
 8005248:	2328      	movs	r3, #40	@ 0x28
 800524a:	9900      	ldr	r1, [sp, #0]
 800524c:	4359      	muls	r1, r3
 800524e:	1862      	adds	r2, r4, r1
 8005250:	32fc      	adds	r2, #252	@ 0xfc
 8005252:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8005254:	1940      	adds	r0, r0, r5
 8005256:	6710      	str	r0, [r2, #112]	@ 0x70
        ep->xfer_buff += count;
 8005258:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800525a:	1940      	adds	r0, r0, r5
 800525c:	6690      	str	r0, [r2, #104]	@ 0x68
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800525e:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8005260:	2800      	cmp	r0, #0
 8005262:	d003      	beq.n	800526c <HAL_PCD_IRQHandler+0x2e8>
 8005264:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8005266:	4295      	cmp	r5, r2
 8005268:	d300      	bcc.n	800526c <HAL_PCD_IRQHandler+0x2e8>
 800526a:	e0b3      	b.n	80053d4 <HAL_PCD_IRQHandler+0x450>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800526c:	9a00      	ldr	r2, [sp, #0]
 800526e:	0020      	movs	r0, r4
 8005270:	4353      	muls	r3, r2
 8005272:	18e3      	adds	r3, r4, r3
 8005274:	3351      	adds	r3, #81	@ 0x51
 8005276:	33ff      	adds	r3, #255	@ 0xff
 8005278:	7819      	ldrb	r1, [r3, #0]
 800527a:	f009 ffb2 	bl	800f1e2 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800527e:	2280      	movs	r2, #128	@ 0x80
 8005280:	9b01      	ldr	r3, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005282:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005284:	4213      	tst	r3, r2
 8005286:	d100      	bne.n	800528a <HAL_PCD_IRQHandler+0x306>
 8005288:	e68a      	b.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800528a:	19c2      	adds	r2, r0, r7
 800528c:	8813      	ldrh	r3, [r2, #0]
 800528e:	491a      	ldr	r1, [pc, #104]	@ (80052f8 <HAL_PCD_IRQHandler+0x374>)
        if (ep->type == EP_TYPE_ISOC)
 8005290:	9e00      	ldr	r6, [sp, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005292:	400b      	ands	r3, r1
 8005294:	491e      	ldr	r1, [pc, #120]	@ (8005310 <HAL_PCD_IRQHandler+0x38c>)
 8005296:	430b      	orrs	r3, r1
 8005298:	b29b      	uxth	r3, r3
 800529a:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 800529c:	2228      	movs	r2, #40	@ 0x28
 800529e:	4356      	muls	r6, r2
 80052a0:	19a3      	adds	r3, r4, r6
 80052a2:	7cd9      	ldrb	r1, [r3, #19]
 80052a4:	2901      	cmp	r1, #1
 80052a6:	d000      	beq.n	80052aa <HAL_PCD_IRQHandler+0x326>
 80052a8:	e0c7      	b.n	800543a <HAL_PCD_IRQHandler+0x4b6>
          ep->xfer_len = 0U;
 80052aa:	9900      	ldr	r1, [sp, #0]
 80052ac:	3101      	adds	r1, #1
 80052ae:	434a      	muls	r2, r1
 80052b0:	2100      	movs	r1, #0
 80052b2:	5111      	str	r1, [r2, r4]
          if (ep->doublebuffer != 0U)
 80052b4:	7f1a      	ldrb	r2, [r3, #28]
 80052b6:	428a      	cmp	r2, r1
 80052b8:	d100      	bne.n	80052bc <HAL_PCD_IRQHandler+0x338>
 80052ba:	e09e      	b.n	80053fa <HAL_PCD_IRQHandler+0x476>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80052bc:	2240      	movs	r2, #64	@ 0x40
 80052be:	9d01      	ldr	r5, [sp, #4]
 80052c0:	9e01      	ldr	r6, [sp, #4]
 80052c2:	4015      	ands	r5, r2
 80052c4:	4216      	tst	r6, r2
 80052c6:	d100      	bne.n	80052ca <HAL_PCD_IRQHandler+0x346>
 80052c8:	e0a0      	b.n	800540c <HAL_PCD_IRQHandler+0x488>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052ca:	7c5a      	ldrb	r2, [r3, #17]
 80052cc:	428a      	cmp	r2, r1
 80052ce:	d000      	beq.n	80052d2 <HAL_PCD_IRQHandler+0x34e>
 80052d0:	e087      	b.n	80053e2 <HAL_PCD_IRQHandler+0x45e>
 80052d2:	0002      	movs	r2, r0
 80052d4:	3250      	adds	r2, #80	@ 0x50
 80052d6:	8811      	ldrh	r1, [r2, #0]
 80052d8:	7c1a      	ldrb	r2, [r3, #16]
 80052da:	4b08      	ldr	r3, [pc, #32]	@ (80052fc <HAL_PCD_IRQHandler+0x378>)
 80052dc:	00d2      	lsls	r2, r2, #3
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052de:	18c0      	adds	r0, r0, r3
 80052e0:	1841      	adds	r1, r0, r1
 80052e2:	1852      	adds	r2, r2, r1
 80052e4:	8813      	ldrh	r3, [r2, #0]
 80052e6:	490a      	ldr	r1, [pc, #40]	@ (8005310 <HAL_PCD_IRQHandler+0x38c>)
 80052e8:	059b      	lsls	r3, r3, #22
 80052ea:	0d9b      	lsrs	r3, r3, #22
 80052ec:	8013      	strh	r3, [r2, #0]
 80052ee:	8813      	ldrh	r3, [r2, #0]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]
 80052f6:	e080      	b.n	80053fa <HAL_PCD_IRQHandler+0x476>
 80052f8:	ffff8f0f 	.word	0xffff8f0f
 80052fc:	00000402 	.word	0x00000402
 8005300:	00000406 	.word	0x00000406
 8005304:	00000f8f 	.word	0x00000f8f
 8005308:	ffffbf8f 	.word	0xffffbf8f
 800530c:	00008080 	.word	0x00008080
 8005310:	ffff8000 	.word	0xffff8000
 8005314:	ffff8f8f 	.word	0xffff8f8f
 8005318:	000080c0 	.word	0x000080c0
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800531c:	9d02      	ldr	r5, [sp, #8]
 800531e:	882e      	ldrh	r6, [r5, #0]
 8005320:	00d5      	lsls	r5, r2, #3
 8005322:	1976      	adds	r6, r6, r5
 8005324:	4dc7      	ldr	r5, [pc, #796]	@ (8005644 <HAL_PCD_IRQHandler+0x6c0>)
 8005326:	1836      	adds	r6, r6, r0
 8005328:	1976      	adds	r6, r6, r5
 800532a:	8835      	ldrh	r5, [r6, #0]
 800532c:	05ad      	lsls	r5, r5, #22
 800532e:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8005330:	428d      	cmp	r5, r1
 8005332:	d90d      	bls.n	8005350 <HAL_PCD_IRQHandler+0x3cc>
 8005334:	9903      	ldr	r1, [sp, #12]
 8005336:	66d9      	str	r1, [r3, #108]	@ 0x6c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005338:	0091      	lsls	r1, r2, #2
 800533a:	1841      	adds	r1, r0, r1
 800533c:	880e      	ldrh	r6, [r1, #0]
 800533e:	4bc2      	ldr	r3, [pc, #776]	@ (8005648 <HAL_PCD_IRQHandler+0x6c4>)
 8005340:	401e      	ands	r6, r3
 8005342:	2380      	movs	r3, #128	@ 0x80
 8005344:	019b      	lsls	r3, r3, #6
 8005346:	4073      	eors	r3, r6
 8005348:	4ec0      	ldr	r6, [pc, #768]	@ (800564c <HAL_PCD_IRQHandler+0x6c8>)
 800534a:	4333      	orrs	r3, r6
 800534c:	800b      	strh	r3, [r1, #0]
 800534e:	e002      	b.n	8005356 <HAL_PCD_IRQHandler+0x3d2>
      ep->xfer_len -= count;
 8005350:	1b49      	subs	r1, r1, r5
 8005352:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 8005354:	d0f0      	beq.n	8005338 <HAL_PCD_IRQHandler+0x3b4>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005356:	9b01      	ldr	r3, [sp, #4]
 8005358:	065b      	lsls	r3, r3, #25
 800535a:	d407      	bmi.n	800536c <HAL_PCD_IRQHandler+0x3e8>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800535c:	0092      	lsls	r2, r2, #2
 800535e:	1882      	adds	r2, r0, r2
 8005360:	8813      	ldrh	r3, [r2, #0]
 8005362:	49bb      	ldr	r1, [pc, #748]	@ (8005650 <HAL_PCD_IRQHandler+0x6cc>)
 8005364:	400b      	ands	r3, r1
 8005366:	49bb      	ldr	r1, [pc, #748]	@ (8005654 <HAL_PCD_IRQHandler+0x6d0>)
 8005368:	430b      	orrs	r3, r1
 800536a:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 800536c:	2d00      	cmp	r5, #0
 800536e:	d100      	bne.n	8005372 <HAL_PCD_IRQHandler+0x3ee>
 8005370:	e76a      	b.n	8005248 <HAL_PCD_IRQHandler+0x2c4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005372:	2328      	movs	r3, #40	@ 0x28
 8005374:	9a00      	ldr	r2, [sp, #0]
 8005376:	4353      	muls	r3, r2
 8005378:	18e1      	adds	r1, r4, r3
 800537a:	000a      	movs	r2, r1
 800537c:	325b      	adds	r2, #91	@ 0x5b
 800537e:	e75c      	b.n	800523a <HAL_PCD_IRQHandler+0x2b6>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005380:	0092      	lsls	r2, r2, #2
 8005382:	1882      	adds	r2, r0, r2
 8005384:	8816      	ldrh	r6, [r2, #0]
 8005386:	49b2      	ldr	r1, [pc, #712]	@ (8005650 <HAL_PCD_IRQHandler+0x6cc>)
 8005388:	4031      	ands	r1, r6
 800538a:	4eb2      	ldr	r6, [pc, #712]	@ (8005654 <HAL_PCD_IRQHandler+0x6d0>)
 800538c:	4331      	orrs	r1, r6
 800538e:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005390:	782a      	ldrb	r2, [r5, #0]
 8005392:	0091      	lsls	r1, r2, #2
 8005394:	1841      	adds	r1, r0, r1
 8005396:	880d      	ldrh	r5, [r1, #0]
 8005398:	0001      	movs	r1, r0
 800539a:	3150      	adds	r1, #80	@ 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800539c:	8809      	ldrh	r1, [r1, #0]
 800539e:	00d2      	lsls	r2, r2, #3
 80053a0:	1852      	adds	r2, r2, r1
 80053a2:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80053a4:	046d      	lsls	r5, r5, #17
 80053a6:	d50a      	bpl.n	80053be <HAL_PCD_IRQHandler+0x43a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053a8:	49ab      	ldr	r1, [pc, #684]	@ (8005658 <HAL_PCD_IRQHandler+0x6d4>)
 80053aa:	1852      	adds	r2, r2, r1
 80053ac:	8812      	ldrh	r2, [r2, #0]
 80053ae:	0592      	lsls	r2, r2, #22
 80053b0:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	d100      	bne.n	80053b8 <HAL_PCD_IRQHandler+0x434>
 80053b6:	e747      	b.n	8005248 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053b8:	001a      	movs	r2, r3
 80053ba:	3259      	adds	r2, #89	@ 0x59
 80053bc:	e6ef      	b.n	800519e <HAL_PCD_IRQHandler+0x21a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053be:	49a1      	ldr	r1, [pc, #644]	@ (8005644 <HAL_PCD_IRQHandler+0x6c0>)
 80053c0:	1852      	adds	r2, r2, r1
 80053c2:	8812      	ldrh	r2, [r2, #0]
 80053c4:	0592      	lsls	r2, r2, #22
 80053c6:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 80053c8:	2a00      	cmp	r2, #0
 80053ca:	d100      	bne.n	80053ce <HAL_PCD_IRQHandler+0x44a>
 80053cc:	e73c      	b.n	8005248 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053ce:	001a      	movs	r2, r3
 80053d0:	325b      	adds	r2, #91	@ 0x5b
 80053d2:	e6e4      	b.n	800519e <HAL_PCD_IRQHandler+0x21a>
        ep = &hpcd->OUT_ep[epindex];
 80053d4:	3151      	adds	r1, #81	@ 0x51
 80053d6:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053d8:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 80053da:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053dc:	f002 fcc2 	bl	8007d64 <USB_EPStartXfer>
 80053e0:	e74d      	b.n	800527e <HAL_PCD_IRQHandler+0x2fa>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053e2:	2a01      	cmp	r2, #1
 80053e4:	d109      	bne.n	80053fa <HAL_PCD_IRQHandler+0x476>
 80053e6:	0002      	movs	r2, r0
 80053e8:	4d9b      	ldr	r5, [pc, #620]	@ (8005658 <HAL_PCD_IRQHandler+0x6d4>)
 80053ea:	3250      	adds	r2, #80	@ 0x50
 80053ec:	8812      	ldrh	r2, [r2, #0]
 80053ee:	7c1b      	ldrb	r3, [r3, #16]
 80053f0:	1940      	adds	r0, r0, r5
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	1880      	adds	r0, r0, r2
 80053f6:	181b      	adds	r3, r3, r0
 80053f8:	8019      	strh	r1, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053fa:	2328      	movs	r3, #40	@ 0x28
 80053fc:	9a00      	ldr	r2, [sp, #0]
 80053fe:	4353      	muls	r3, r2
 8005400:	18e3      	adds	r3, r4, r3
 8005402:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005404:	0020      	movs	r0, r4
 8005406:	f009 fef8 	bl	800f1fa <HAL_PCD_DataInStageCallback>
 800540a:	e5c9      	b.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800540c:	7c5a      	ldrb	r2, [r3, #17]
 800540e:	2a00      	cmp	r2, #0
 8005410:	d106      	bne.n	8005420 <HAL_PCD_IRQHandler+0x49c>
 8005412:	0002      	movs	r2, r0
 8005414:	3250      	adds	r2, #80	@ 0x50
 8005416:	8811      	ldrh	r1, [r2, #0]
 8005418:	7c1a      	ldrb	r2, [r3, #16]
 800541a:	4b8a      	ldr	r3, [pc, #552]	@ (8005644 <HAL_PCD_IRQHandler+0x6c0>)
 800541c:	00d2      	lsls	r2, r2, #3
 800541e:	e75e      	b.n	80052de <HAL_PCD_IRQHandler+0x35a>
 8005420:	2a01      	cmp	r2, #1
 8005422:	d1ea      	bne.n	80053fa <HAL_PCD_IRQHandler+0x476>
 8005424:	0002      	movs	r2, r0
 8005426:	4987      	ldr	r1, [pc, #540]	@ (8005644 <HAL_PCD_IRQHandler+0x6c0>)
 8005428:	3250      	adds	r2, #80	@ 0x50
 800542a:	8812      	ldrh	r2, [r2, #0]
 800542c:	7c1b      	ldrb	r3, [r3, #16]
 800542e:	1840      	adds	r0, r0, r1
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	1880      	adds	r0, r0, r2
 8005434:	181b      	adds	r3, r3, r0
 8005436:	801d      	strh	r5, [r3, #0]
 8005438:	e7df      	b.n	80053fa <HAL_PCD_IRQHandler+0x476>
          if ((wEPVal & USB_EP_KIND) == 0U)
 800543a:	2780      	movs	r7, #128	@ 0x80
 800543c:	9901      	ldr	r1, [sp, #4]
 800543e:	007f      	lsls	r7, r7, #1
 8005440:	4039      	ands	r1, r7
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005442:	7c1a      	ldrb	r2, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005444:	468c      	mov	ip, r1
 8005446:	9901      	ldr	r1, [sp, #4]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005448:	9202      	str	r2, [sp, #8]
            if (ep->xfer_len > TxPctSize)
 800544a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800544c:	00d2      	lsls	r2, r2, #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 800544e:	4239      	tst	r1, r7
 8005450:	d11c      	bne.n	800548c <HAL_PCD_IRQHandler+0x508>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005452:	0007      	movs	r7, r0
 8005454:	3750      	adds	r7, #80	@ 0x50
 8005456:	883f      	ldrh	r7, [r7, #0]
 8005458:	18bf      	adds	r7, r7, r2
 800545a:	4a7f      	ldr	r2, [pc, #508]	@ (8005658 <HAL_PCD_IRQHandler+0x6d4>)
 800545c:	183f      	adds	r7, r7, r0
 800545e:	18bf      	adds	r7, r7, r2
 8005460:	883a      	ldrh	r2, [r7, #0]
 8005462:	0592      	lsls	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 8005464:	0d92      	lsrs	r2, r2, #22
 8005466:	42aa      	cmp	r2, r5
 8005468:	d303      	bcc.n	8005472 <HAL_PCD_IRQHandler+0x4ee>
 800546a:	4662      	mov	r2, ip
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800546c:	9902      	ldr	r1, [sp, #8]
 800546e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005470:	e7c8      	b.n	8005404 <HAL_PCD_IRQHandler+0x480>
              ep->xfer_buff += TxPctSize;
 8005472:	6a59      	ldr	r1, [r3, #36]	@ 0x24
              ep->xfer_len -= TxPctSize;
 8005474:	1aad      	subs	r5, r5, r2
              ep->xfer_buff += TxPctSize;
 8005476:	1889      	adds	r1, r1, r2
 8005478:	6259      	str	r1, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 800547a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 800547c:	3610      	adds	r6, #16
              ep->xfer_count += TxPctSize;
 800547e:	188a      	adds	r2, r1, r2
 8005480:	629d      	str	r5, [r3, #40]	@ 0x28
 8005482:	62da      	str	r2, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8005484:	19a1      	adds	r1, r4, r6
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005486:	f002 fc6d 	bl	8007d64 <USB_EPStartXfer>
 800548a:	e589      	b.n	8004fa0 <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800548c:	2140      	movs	r1, #64	@ 0x40
 800548e:	468c      	mov	ip, r1
 8005490:	9f01      	ldr	r7, [sp, #4]
 8005492:	0006      	movs	r6, r0
 8005494:	400f      	ands	r7, r1
 8005496:	9703      	str	r7, [sp, #12]
 8005498:	4667      	mov	r7, ip
 800549a:	9901      	ldr	r1, [sp, #4]
 800549c:	3650      	adds	r6, #80	@ 0x50
 800549e:	4239      	tst	r1, r7
 80054a0:	d100      	bne.n	80054a4 <HAL_PCD_IRQHandler+0x520>
 80054a2:	e0df      	b.n	8005664 <HAL_PCD_IRQHandler+0x6e0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054a4:	496c      	ldr	r1, [pc, #432]	@ (8005658 <HAL_PCD_IRQHandler+0x6d4>)
 80054a6:	8837      	ldrh	r7, [r6, #0]
 80054a8:	1846      	adds	r6, r0, r1
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 80054aa:	2100      	movs	r1, #0
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054ac:	19f7      	adds	r7, r6, r7
 80054ae:	5abf      	ldrh	r7, [r7, r2]
      ep->xfer_len = 0U;
 80054b0:	468c      	mov	ip, r1
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054b2:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len > TxPctSize)
 80054b4:	0dbf      	lsrs	r7, r7, #22
 80054b6:	42af      	cmp	r7, r5
 80054b8:	d201      	bcs.n	80054be <HAL_PCD_IRQHandler+0x53a>
      ep->xfer_len -= TxPctSize;
 80054ba:	1be9      	subs	r1, r5, r7
 80054bc:	468c      	mov	ip, r1
 80054be:	4661      	mov	r1, ip
 80054c0:	2580      	movs	r5, #128	@ 0x80
 80054c2:	6299      	str	r1, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80054c4:	9901      	ldr	r1, [sp, #4]
 80054c6:	01ed      	lsls	r5, r5, #7
 80054c8:	4029      	ands	r1, r5
 80054ca:	000d      	movs	r5, r1
 80054cc:	4661      	mov	r1, ip
 80054ce:	2900      	cmp	r1, #0
 80054d0:	d147      	bne.n	8005562 <HAL_PCD_IRQHandler+0x5de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054d2:	2328      	movs	r3, #40	@ 0x28
 80054d4:	9900      	ldr	r1, [sp, #0]
 80054d6:	434b      	muls	r3, r1
 80054d8:	18e3      	adds	r3, r4, r3
 80054da:	7c5b      	ldrb	r3, [r3, #17]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d130      	bne.n	8005542 <HAL_PCD_IRQHandler+0x5be>
 80054e0:	0007      	movs	r7, r0
 80054e2:	3750      	adds	r7, #80	@ 0x50
 80054e4:	883b      	ldrh	r3, [r7, #0]
 80054e6:	495d      	ldr	r1, [pc, #372]	@ (800565c <HAL_PCD_IRQHandler+0x6d8>)
 80054e8:	18f3      	adds	r3, r6, r3
 80054ea:	189b      	adds	r3, r3, r2
 80054ec:	881e      	ldrh	r6, [r3, #0]
 80054ee:	05b6      	lsls	r6, r6, #22
 80054f0:	0db6      	lsrs	r6, r6, #22
 80054f2:	801e      	strh	r6, [r3, #0]
 80054f4:	881e      	ldrh	r6, [r3, #0]
 80054f6:	430e      	orrs	r6, r1
 80054f8:	b2b6      	uxth	r6, r6
 80054fa:	801e      	strh	r6, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054fc:	4e51      	ldr	r6, [pc, #324]	@ (8005644 <HAL_PCD_IRQHandler+0x6c0>)
 80054fe:	883b      	ldrh	r3, [r7, #0]
 8005500:	1980      	adds	r0, r0, r6
 8005502:	18c0      	adds	r0, r0, r3
 8005504:	1880      	adds	r0, r0, r2
 8005506:	8803      	ldrh	r3, [r0, #0]
 8005508:	059b      	lsls	r3, r3, #22
 800550a:	0d9b      	lsrs	r3, r3, #22
 800550c:	8003      	strh	r3, [r0, #0]
 800550e:	8803      	ldrh	r3, [r0, #0]
 8005510:	430b      	orrs	r3, r1
 8005512:	b29b      	uxth	r3, r3
 8005514:	8003      	strh	r3, [r0, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005516:	0020      	movs	r0, r4
 8005518:	9902      	ldr	r1, [sp, #8]
 800551a:	f009 fe6e 	bl	800f1fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800551e:	2d00      	cmp	r5, #0
 8005520:	d100      	bne.n	8005524 <HAL_PCD_IRQHandler+0x5a0>
 8005522:	e0dc      	b.n	80056de <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005524:	2328      	movs	r3, #40	@ 0x28
 8005526:	9a00      	ldr	r2, [sp, #0]
 8005528:	4949      	ldr	r1, [pc, #292]	@ (8005650 <HAL_PCD_IRQHandler+0x6cc>)
 800552a:	4353      	muls	r3, r2
 800552c:	18e3      	adds	r3, r4, r3
 800552e:	7c1b      	ldrb	r3, [r3, #16]
 8005530:	6822      	ldr	r2, [r4, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	18d2      	adds	r2, r2, r3
 8005536:	8813      	ldrh	r3, [r2, #0]
 8005538:	400b      	ands	r3, r1
 800553a:	4949      	ldr	r1, [pc, #292]	@ (8005660 <HAL_PCD_IRQHandler+0x6dc>)
 800553c:	430b      	orrs	r3, r1
 800553e:	8013      	strh	r3, [r2, #0]
 8005540:	e0cd      	b.n	80056de <HAL_PCD_IRQHandler+0x75a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005542:	2b01      	cmp	r3, #1
 8005544:	d1e7      	bne.n	8005516 <HAL_PCD_IRQHandler+0x592>
 8005546:	0007      	movs	r7, r0
 8005548:	4661      	mov	r1, ip
 800554a:	3750      	adds	r7, #80	@ 0x50
 800554c:	883b      	ldrh	r3, [r7, #0]
 800554e:	18f3      	adds	r3, r6, r3
 8005550:	189b      	adds	r3, r3, r2
 8005552:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005554:	493b      	ldr	r1, [pc, #236]	@ (8005644 <HAL_PCD_IRQHandler+0x6c0>)
 8005556:	883b      	ldrh	r3, [r7, #0]
 8005558:	1840      	adds	r0, r0, r1
 800555a:	18c0      	adds	r0, r0, r3
 800555c:	1880      	adds	r0, r0, r2
 800555e:	4663      	mov	r3, ip
 8005560:	e7d8      	b.n	8005514 <HAL_PCD_IRQHandler+0x590>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005562:	2d00      	cmp	r5, #0
 8005564:	d00c      	beq.n	8005580 <HAL_PCD_IRQHandler+0x5fc>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005566:	9902      	ldr	r1, [sp, #8]
 8005568:	0089      	lsls	r1, r1, #2
 800556a:	1841      	adds	r1, r0, r1
 800556c:	880d      	ldrh	r5, [r1, #0]
 800556e:	9101      	str	r1, [sp, #4]
 8005570:	46ac      	mov	ip, r5
 8005572:	4661      	mov	r1, ip
 8005574:	4d36      	ldr	r5, [pc, #216]	@ (8005650 <HAL_PCD_IRQHandler+0x6cc>)
 8005576:	400d      	ands	r5, r1
 8005578:	4939      	ldr	r1, [pc, #228]	@ (8005660 <HAL_PCD_IRQHandler+0x6dc>)
 800557a:	430d      	orrs	r5, r1
 800557c:	9901      	ldr	r1, [sp, #4]
 800557e:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 8005580:	2528      	movs	r5, #40	@ 0x28
 8005582:	9900      	ldr	r1, [sp, #0]
 8005584:	434d      	muls	r5, r1
 8005586:	2134      	movs	r1, #52	@ 0x34
 8005588:	468c      	mov	ip, r1
 800558a:	1965      	adds	r5, r4, r5
 800558c:	44ac      	add	ip, r5
 800558e:	4661      	mov	r1, ip
 8005590:	7809      	ldrb	r1, [r1, #0]
 8005592:	2901      	cmp	r1, #1
 8005594:	d000      	beq.n	8005598 <HAL_PCD_IRQHandler+0x614>
 8005596:	e0a2      	b.n	80056de <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 8005598:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800559a:	19c9      	adds	r1, r1, r7
 800559c:	6269      	str	r1, [r5, #36]	@ 0x24
 800559e:	9101      	str	r1, [sp, #4]
        ep->xfer_count += TxPctSize;
 80055a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055a2:	19c9      	adds	r1, r1, r7
 80055a4:	62d9      	str	r1, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80055a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80055a8:	6a29      	ldr	r1, [r5, #32]
 80055aa:	428b      	cmp	r3, r1
 80055ac:	d317      	bcc.n	80055de <HAL_PCD_IRQHandler+0x65a>
          ep->xfer_len_db -= len;
 80055ae:	1a5b      	subs	r3, r3, r1
 80055b0:	632b      	str	r3, [r5, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055b2:	2328      	movs	r3, #40	@ 0x28
 80055b4:	9d00      	ldr	r5, [sp, #0]
 80055b6:	436b      	muls	r3, r5
 80055b8:	18e3      	adds	r3, r4, r3
 80055ba:	7c5d      	ldrb	r5, [r3, #17]
 80055bc:	b28b      	uxth	r3, r1
 80055be:	2d00      	cmp	r5, #0
 80055c0:	d137      	bne.n	8005632 <HAL_PCD_IRQHandler+0x6ae>
 80055c2:	0005      	movs	r5, r0
 80055c4:	3550      	adds	r5, #80	@ 0x50
 80055c6:	882d      	ldrh	r5, [r5, #0]
 80055c8:	1975      	adds	r5, r6, r5
 80055ca:	18aa      	adds	r2, r5, r2
 80055cc:	8815      	ldrh	r5, [r2, #0]
 80055ce:	05ad      	lsls	r5, r5, #22
 80055d0:	0dad      	lsrs	r5, r5, #22
 80055d2:	8015      	strh	r5, [r2, #0]
 80055d4:	2900      	cmp	r1, #0
 80055d6:	d10e      	bne.n	80055f6 <HAL_PCD_IRQHandler+0x672>
 80055d8:	8811      	ldrh	r1, [r2, #0]
 80055da:	4d20      	ldr	r5, [pc, #128]	@ (800565c <HAL_PCD_IRQHandler+0x6d8>)
 80055dc:	e013      	b.n	8005606 <HAL_PCD_IRQHandler+0x682>
        else if (ep->xfer_len_db == 0U)
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <HAL_PCD_IRQHandler+0x666>
          ep->xfer_fill_db = 0U;
 80055e2:	4661      	mov	r1, ip
 80055e4:	700b      	strb	r3, [r1, #0]
          len = TxPctSize;
 80055e6:	0039      	movs	r1, r7
 80055e8:	e7e3      	b.n	80055b2 <HAL_PCD_IRQHandler+0x62e>
          ep->xfer_fill_db = 0U;
 80055ea:	2100      	movs	r1, #0
 80055ec:	4667      	mov	r7, ip
 80055ee:	7039      	strb	r1, [r7, #0]
          ep->xfer_len_db = 0U;
 80055f0:	6329      	str	r1, [r5, #48]	@ 0x30
          len = ep->xfer_len_db;
 80055f2:	0019      	movs	r1, r3
 80055f4:	e7dd      	b.n	80055b2 <HAL_PCD_IRQHandler+0x62e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055f6:	293e      	cmp	r1, #62	@ 0x3e
 80055f8:	d811      	bhi.n	800561e <HAL_PCD_IRQHandler+0x69a>
 80055fa:	2601      	movs	r6, #1
 80055fc:	084d      	lsrs	r5, r1, #1
 80055fe:	400e      	ands	r6, r1
 8005600:	19ad      	adds	r5, r5, r6
 8005602:	8811      	ldrh	r1, [r2, #0]
 8005604:	02ad      	lsls	r5, r5, #10
 8005606:	4329      	orrs	r1, r5
 8005608:	b289      	uxth	r1, r1
 800560a:	8011      	strh	r1, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800560c:	2228      	movs	r2, #40	@ 0x28
 800560e:	9900      	ldr	r1, [sp, #0]
 8005610:	434a      	muls	r2, r1
 8005612:	18a2      	adds	r2, r4, r2
 8005614:	8b12      	ldrh	r2, [r2, #24]
 8005616:	9901      	ldr	r1, [sp, #4]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005618:	f002 fb8f 	bl	8007d3a <USB_WritePMA>
 800561c:	e05f      	b.n	80056de <HAL_PCD_IRQHandler+0x75a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800561e:	261f      	movs	r6, #31
 8005620:	094d      	lsrs	r5, r1, #5
 8005622:	4031      	ands	r1, r6
 8005624:	424e      	negs	r6, r1
 8005626:	4171      	adcs	r1, r6
 8005628:	1a6d      	subs	r5, r5, r1
 800562a:	8811      	ldrh	r1, [r2, #0]
 800562c:	02ad      	lsls	r5, r5, #10
 800562e:	4329      	orrs	r1, r5
 8005630:	e7d3      	b.n	80055da <HAL_PCD_IRQHandler+0x656>
 8005632:	2d01      	cmp	r5, #1
 8005634:	d1ea      	bne.n	800560c <HAL_PCD_IRQHandler+0x688>
 8005636:	0001      	movs	r1, r0
 8005638:	3150      	adds	r1, #80	@ 0x50
 800563a:	8809      	ldrh	r1, [r1, #0]
 800563c:	1876      	adds	r6, r6, r1
 800563e:	18b6      	adds	r6, r6, r2
 8005640:	8033      	strh	r3, [r6, #0]
 8005642:	e7e3      	b.n	800560c <HAL_PCD_IRQHandler+0x688>
 8005644:	00000406 	.word	0x00000406
 8005648:	ffffbf8f 	.word	0xffffbf8f
 800564c:	00008080 	.word	0x00008080
 8005650:	ffff8f8f 	.word	0xffff8f8f
 8005654:	000080c0 	.word	0x000080c0
 8005658:	00000402 	.word	0x00000402
 800565c:	ffff8000 	.word	0xffff8000
 8005660:	0000c080 	.word	0x0000c080
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005664:	49ac      	ldr	r1, [pc, #688]	@ (8005918 <HAL_PCD_IRQHandler+0x994>)
 8005666:	8836      	ldrh	r6, [r6, #0]
 8005668:	468c      	mov	ip, r1
 800566a:	4484      	add	ip, r0
 800566c:	4466      	add	r6, ip
 800566e:	5ab6      	ldrh	r6, [r6, r2]
      ep->xfer_len = 0U;
 8005670:	9f03      	ldr	r7, [sp, #12]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005672:	05b6      	lsls	r6, r6, #22
    if (ep->xfer_len >= TxPctSize)
 8005674:	0db6      	lsrs	r6, r6, #22
 8005676:	42ae      	cmp	r6, r5
 8005678:	d800      	bhi.n	800567c <HAL_PCD_IRQHandler+0x6f8>
      ep->xfer_len -= TxPctSize;
 800567a:	1baf      	subs	r7, r5, r6
 800567c:	2580      	movs	r5, #128	@ 0x80
 800567e:	9901      	ldr	r1, [sp, #4]
 8005680:	01ed      	lsls	r5, r5, #7
 8005682:	4029      	ands	r1, r5
 8005684:	000d      	movs	r5, r1
 8005686:	629f      	str	r7, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8005688:	2f00      	cmp	r7, #0
 800568a:	d149      	bne.n	8005720 <HAL_PCD_IRQHandler+0x79c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800568c:	2328      	movs	r3, #40	@ 0x28
 800568e:	9900      	ldr	r1, [sp, #0]
 8005690:	434b      	muls	r3, r1
 8005692:	18e3      	adds	r3, r4, r3
 8005694:	7c5b      	ldrb	r3, [r3, #17]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d133      	bne.n	8005702 <HAL_PCD_IRQHandler+0x77e>
 800569a:	0003      	movs	r3, r0
 800569c:	499f      	ldr	r1, [pc, #636]	@ (800591c <HAL_PCD_IRQHandler+0x998>)
 800569e:	3350      	adds	r3, #80	@ 0x50
 80056a0:	881e      	ldrh	r6, [r3, #0]
 80056a2:	1840      	adds	r0, r0, r1
 80056a4:	1980      	adds	r0, r0, r6
 80056a6:	1880      	adds	r0, r0, r2
 80056a8:	8806      	ldrh	r6, [r0, #0]
 80056aa:	499d      	ldr	r1, [pc, #628]	@ (8005920 <HAL_PCD_IRQHandler+0x99c>)
 80056ac:	05b6      	lsls	r6, r6, #22
 80056ae:	0db6      	lsrs	r6, r6, #22
 80056b0:	8006      	strh	r6, [r0, #0]
 80056b2:	8806      	ldrh	r6, [r0, #0]
 80056b4:	430e      	orrs	r6, r1
 80056b6:	b2b6      	uxth	r6, r6
 80056b8:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	4463      	add	r3, ip
 80056be:	189b      	adds	r3, r3, r2
 80056c0:	881a      	ldrh	r2, [r3, #0]
 80056c2:	0592      	lsls	r2, r2, #22
 80056c4:	0d92      	lsrs	r2, r2, #22
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	881a      	ldrh	r2, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	b292      	uxth	r2, r2
 80056ce:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056d0:	0020      	movs	r0, r4
 80056d2:	9902      	ldr	r1, [sp, #8]
 80056d4:	f009 fd91 	bl	800f1fa <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80056d8:	2d00      	cmp	r5, #0
 80056da:	d100      	bne.n	80056de <HAL_PCD_IRQHandler+0x75a>
 80056dc:	e722      	b.n	8005524 <HAL_PCD_IRQHandler+0x5a0>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80056de:	2328      	movs	r3, #40	@ 0x28
 80056e0:	9a00      	ldr	r2, [sp, #0]
 80056e2:	4353      	muls	r3, r2
 80056e4:	18e3      	adds	r3, r4, r3
 80056e6:	7c1b      	ldrb	r3, [r3, #16]
 80056e8:	6822      	ldr	r2, [r4, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	18d2      	adds	r2, r2, r3
 80056ee:	8811      	ldrh	r1, [r2, #0]
 80056f0:	4b8c      	ldr	r3, [pc, #560]	@ (8005924 <HAL_PCD_IRQHandler+0x9a0>)
 80056f2:	4019      	ands	r1, r3
 80056f4:	2330      	movs	r3, #48	@ 0x30
 80056f6:	404b      	eors	r3, r1
 80056f8:	498b      	ldr	r1, [pc, #556]	@ (8005928 <HAL_PCD_IRQHandler+0x9a4>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80056fe:	f7ff fc4f 	bl	8004fa0 <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005702:	2b01      	cmp	r3, #1
 8005704:	d1e4      	bne.n	80056d0 <HAL_PCD_IRQHandler+0x74c>
 8005706:	0003      	movs	r3, r0
 8005708:	4984      	ldr	r1, [pc, #528]	@ (800591c <HAL_PCD_IRQHandler+0x998>)
 800570a:	3350      	adds	r3, #80	@ 0x50
 800570c:	881e      	ldrh	r6, [r3, #0]
 800570e:	1840      	adds	r0, r0, r1
 8005710:	1980      	adds	r0, r0, r6
 8005712:	1880      	adds	r0, r0, r2
 8005714:	8007      	strh	r7, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	4463      	add	r3, ip
 800571a:	189b      	adds	r3, r3, r2
 800571c:	801f      	strh	r7, [r3, #0]
 800571e:	e7d7      	b.n	80056d0 <HAL_PCD_IRQHandler+0x74c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005720:	2900      	cmp	r1, #0
 8005722:	d108      	bne.n	8005736 <HAL_PCD_IRQHandler+0x7b2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005724:	9902      	ldr	r1, [sp, #8]
 8005726:	4d81      	ldr	r5, [pc, #516]	@ (800592c <HAL_PCD_IRQHandler+0x9a8>)
 8005728:	0089      	lsls	r1, r1, #2
 800572a:	1841      	adds	r1, r0, r1
 800572c:	880f      	ldrh	r7, [r1, #0]
 800572e:	403d      	ands	r5, r7
 8005730:	4f7f      	ldr	r7, [pc, #508]	@ (8005930 <HAL_PCD_IRQHandler+0x9ac>)
 8005732:	433d      	orrs	r5, r7
 8005734:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 8005736:	2728      	movs	r7, #40	@ 0x28
 8005738:	9900      	ldr	r1, [sp, #0]
 800573a:	434f      	muls	r7, r1
 800573c:	19e7      	adds	r7, r4, r7
 800573e:	0039      	movs	r1, r7
 8005740:	3134      	adds	r1, #52	@ 0x34
 8005742:	9101      	str	r1, [sp, #4]
 8005744:	7809      	ldrb	r1, [r1, #0]
 8005746:	2901      	cmp	r1, #1
 8005748:	d1c9      	bne.n	80056de <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 800574a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800574c:	1989      	adds	r1, r1, r6
 800574e:	6279      	str	r1, [r7, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8005750:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8005752:	19ad      	adds	r5, r5, r6
 8005754:	62dd      	str	r5, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8005756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005758:	6a3d      	ldr	r5, [r7, #32]
 800575a:	42ab      	cmp	r3, r5
 800575c:	d317      	bcc.n	800578e <HAL_PCD_IRQHandler+0x80a>
          ep->xfer_len_db -= len;
 800575e:	1b5b      	subs	r3, r3, r5
 8005760:	633b      	str	r3, [r7, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005762:	2328      	movs	r3, #40	@ 0x28
 8005764:	9e00      	ldr	r6, [sp, #0]
 8005766:	4373      	muls	r3, r6
 8005768:	18e3      	adds	r3, r4, r3
 800576a:	7c5e      	ldrb	r6, [r3, #17]
 800576c:	b2ab      	uxth	r3, r5
 800576e:	2e00      	cmp	r6, #0
 8005770:	d134      	bne.n	80057dc <HAL_PCD_IRQHandler+0x858>
 8005772:	0006      	movs	r6, r0
 8005774:	3650      	adds	r6, #80	@ 0x50
 8005776:	8836      	ldrh	r6, [r6, #0]
 8005778:	4466      	add	r6, ip
 800577a:	18b2      	adds	r2, r6, r2
 800577c:	8816      	ldrh	r6, [r2, #0]
 800577e:	05b6      	lsls	r6, r6, #22
 8005780:	0db6      	lsrs	r6, r6, #22
 8005782:	8016      	strh	r6, [r2, #0]
 8005784:	2d00      	cmp	r5, #0
 8005786:	d10e      	bne.n	80057a6 <HAL_PCD_IRQHandler+0x822>
 8005788:	8815      	ldrh	r5, [r2, #0]
 800578a:	4e65      	ldr	r6, [pc, #404]	@ (8005920 <HAL_PCD_IRQHandler+0x99c>)
 800578c:	e013      	b.n	80057b6 <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <HAL_PCD_IRQHandler+0x816>
          ep->xfer_fill_db = 0U;
 8005792:	9d01      	ldr	r5, [sp, #4]
 8005794:	702b      	strb	r3, [r5, #0]
          len = TxPctSize;
 8005796:	0035      	movs	r5, r6
 8005798:	e7e3      	b.n	8005762 <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db = 0U;
 800579a:	2500      	movs	r5, #0
          ep->xfer_fill_db = 0;
 800579c:	9e01      	ldr	r6, [sp, #4]
          ep->xfer_len_db = 0U;
 800579e:	633d      	str	r5, [r7, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 80057a0:	7035      	strb	r5, [r6, #0]
          len = ep->xfer_len_db;
 80057a2:	001d      	movs	r5, r3
 80057a4:	e7dd      	b.n	8005762 <HAL_PCD_IRQHandler+0x7de>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057a6:	2d3e      	cmp	r5, #62	@ 0x3e
 80057a8:	d80e      	bhi.n	80057c8 <HAL_PCD_IRQHandler+0x844>
 80057aa:	2701      	movs	r7, #1
 80057ac:	086e      	lsrs	r6, r5, #1
 80057ae:	402f      	ands	r7, r5
 80057b0:	19f6      	adds	r6, r6, r7
 80057b2:	8815      	ldrh	r5, [r2, #0]
 80057b4:	02b6      	lsls	r6, r6, #10
 80057b6:	4335      	orrs	r5, r6
 80057b8:	b2ad      	uxth	r5, r5
 80057ba:	8015      	strh	r5, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80057bc:	2228      	movs	r2, #40	@ 0x28
 80057be:	9d00      	ldr	r5, [sp, #0]
 80057c0:	436a      	muls	r2, r5
 80057c2:	18a2      	adds	r2, r4, r2
 80057c4:	8b52      	ldrh	r2, [r2, #26]
 80057c6:	e727      	b.n	8005618 <HAL_PCD_IRQHandler+0x694>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057c8:	271f      	movs	r7, #31
 80057ca:	096e      	lsrs	r6, r5, #5
 80057cc:	403d      	ands	r5, r7
 80057ce:	426f      	negs	r7, r5
 80057d0:	417d      	adcs	r5, r7
 80057d2:	1b76      	subs	r6, r6, r5
 80057d4:	8815      	ldrh	r5, [r2, #0]
 80057d6:	02b6      	lsls	r6, r6, #10
 80057d8:	4335      	orrs	r5, r6
 80057da:	e7d6      	b.n	800578a <HAL_PCD_IRQHandler+0x806>
 80057dc:	2e01      	cmp	r6, #1
 80057de:	d1ed      	bne.n	80057bc <HAL_PCD_IRQHandler+0x838>
 80057e0:	0005      	movs	r5, r0
 80057e2:	3550      	adds	r5, #80	@ 0x50
 80057e4:	882d      	ldrh	r5, [r5, #0]
 80057e6:	4465      	add	r5, ip
 80057e8:	18aa      	adds	r2, r5, r2
 80057ea:	8013      	strh	r3, [r2, #0]
 80057ec:	e7e6      	b.n	80057bc <HAL_PCD_IRQHandler+0x838>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80057ee:	0543      	lsls	r3, r0, #21
 80057f0:	d50e      	bpl.n	8005810 <HAL_PCD_IRQHandler+0x88c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	494f      	ldr	r1, [pc, #316]	@ (8005934 <HAL_PCD_IRQHandler+0x9b0>)
 80057f6:	3306      	adds	r3, #6
 80057f8:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 80057fa:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80057fc:	400a      	ands	r2, r1
 80057fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8005800:	f009 fd0d 	bl	800f21e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005804:	0029      	movs	r1, r5
 8005806:	0020      	movs	r0, r4
 8005808:	f7ff fbab 	bl	8004f62 <HAL_PCD_SetAddress>
    return;
 800580c:	f7ff fbce 	bl	8004fac <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005810:	0443      	lsls	r3, r0, #17
 8005812:	d507      	bpl.n	8005824 <HAL_PCD_IRQHandler+0x8a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	4948      	ldr	r1, [pc, #288]	@ (8005938 <HAL_PCD_IRQHandler+0x9b4>)
 8005818:	3306      	adds	r3, #6
 800581a:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800581c:	400a      	ands	r2, r1
 800581e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    return;
 8005820:	f7ff fbc4 	bl	8004fac <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005824:	2380      	movs	r3, #128	@ 0x80
 8005826:	0001      	movs	r1, r0
 8005828:	019b      	lsls	r3, r3, #6
 800582a:	4019      	ands	r1, r3
 800582c:	4218      	tst	r0, r3
 800582e:	d004      	beq.n	800583a <HAL_PCD_IRQHandler+0x8b6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	4942      	ldr	r1, [pc, #264]	@ (800593c <HAL_PCD_IRQHandler+0x9b8>)
 8005834:	3306      	adds	r3, #6
 8005836:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8005838:	e7f0      	b.n	800581c <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800583a:	04c3      	lsls	r3, r0, #19
 800583c:	d51a      	bpl.n	8005874 <HAL_PCD_IRQHandler+0x8f0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800583e:	2004      	movs	r0, #4
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	3302      	adds	r3, #2
 8005844:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8005846:	4382      	bics	r2, r0
 8005848:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800584a:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 800584c:	1800      	adds	r0, r0, r0
 800584e:	4382      	bics	r2, r0
 8005850:	87da      	strh	r2, [r3, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L1)
 8005852:	23b2      	movs	r3, #178	@ 0xb2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	5ce2      	ldrb	r2, [r4, r3]
 8005858:	2a01      	cmp	r2, #1
 800585a:	d103      	bne.n	8005864 <HAL_PCD_IRQHandler+0x8e0>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800585c:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 800585e:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005860:	f000 f98b 	bl	8005b7a <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8005864:	0020      	movs	r0, r4
 8005866:	f009 fcf2 	bl	800f24e <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	4934      	ldr	r1, [pc, #208]	@ (8005940 <HAL_PCD_IRQHandler+0x9bc>)
 800586e:	3306      	adds	r3, #6
 8005870:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8005872:	e7d3      	b.n	800581c <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005874:	0503      	lsls	r3, r0, #20
 8005876:	d513      	bpl.n	80058a0 <HAL_PCD_IRQHandler+0x91c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005878:	2108      	movs	r1, #8
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005880:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005882:	4301      	orrs	r1, r0
 8005884:	87d1      	strh	r1, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005886:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 8005888:	482e      	ldr	r0, [pc, #184]	@ (8005944 <HAL_PCD_IRQHandler+0x9c0>)
 800588a:	4001      	ands	r1, r0
 800588c:	87d9      	strh	r1, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800588e:	2304      	movs	r3, #4
 8005890:	8fd1      	ldrh	r1, [r2, #62]	@ 0x3e
 8005892:	430b      	orrs	r3, r1
 8005894:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      HAL_PCD_SuspendCallback(hpcd);
 8005896:	0020      	movs	r0, r4
 8005898:	f009 fcd2 	bl	800f240 <HAL_PCD_SuspendCallback>
 800589c:	f7ff fb86 	bl	8004fac <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80058a0:	2580      	movs	r5, #128	@ 0x80
 80058a2:	4228      	tst	r0, r5
 80058a4:	d021      	beq.n	80058ea <HAL_PCD_IRQHandler+0x966>
    if (hpcd->LPM_State == LPM_L0)
 80058a6:	20b2      	movs	r0, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80058a8:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 80058aa:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80058ac:	1d99      	adds	r1, r3, #6
 80058ae:	8fca      	ldrh	r2, [r1, #62]	@ 0x3e
 80058b0:	43aa      	bics	r2, r5
 80058b2:	87ca      	strh	r2, [r1, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L0)
 80058b4:	5c22      	ldrb	r2, [r4, r0]
 80058b6:	2a00      	cmp	r2, #0
 80058b8:	d1ed      	bne.n	8005896 <HAL_PCD_IRQHandler+0x912>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80058ba:	2104      	movs	r1, #4
 80058bc:	1c9a      	adds	r2, r3, #2
 80058be:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80058c0:	3354      	adds	r3, #84	@ 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80058c2:	4329      	orrs	r1, r5
 80058c4:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80058c6:	2108      	movs	r1, #8
 80058c8:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
 80058ca:	4329      	orrs	r1, r5
 80058cc:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->LPM_State = LPM_L1;
 80058ce:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80058d0:	223c      	movs	r2, #60	@ 0x3c
      hpcd->LPM_State = LPM_L1;
 80058d2:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80058d4:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80058d6:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80058d8:	089b      	lsrs	r3, r3, #2
 80058da:	4013      	ands	r3, r2
 80058dc:	22b3      	movs	r2, #179	@ 0xb3
 80058de:	0092      	lsls	r2, r2, #2
 80058e0:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80058e2:	f000 f94a 	bl	8005b7a <HAL_PCDEx_LPM_Callback>
 80058e6:	f7ff fb61 	bl	8004fac <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80058ea:	0583      	lsls	r3, r0, #22
 80058ec:	d50a      	bpl.n	8005904 <HAL_PCD_IRQHandler+0x980>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	4915      	ldr	r1, [pc, #84]	@ (8005948 <HAL_PCD_IRQHandler+0x9c4>)
 80058f2:	3306      	adds	r3, #6
 80058f4:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80058f6:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80058f8:	400a      	ands	r2, r1
 80058fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80058fc:	f009 fc88 	bl	800f210 <HAL_PCD_SOFCallback>
    return;
 8005900:	f7ff fb54 	bl	8004fac <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005904:	05c0      	lsls	r0, r0, #23
 8005906:	d401      	bmi.n	800590c <HAL_PCD_IRQHandler+0x988>
 8005908:	f7ff fb50 	bl	8004fac <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	490f      	ldr	r1, [pc, #60]	@ (800594c <HAL_PCD_IRQHandler+0x9c8>)
 8005910:	3306      	adds	r3, #6
 8005912:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8005914:	e782      	b.n	800581c <HAL_PCD_IRQHandler+0x898>
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	00000406 	.word	0x00000406
 800591c:	00000402 	.word	0x00000402
 8005920:	ffff8000 	.word	0xffff8000
 8005924:	ffff8fbf 	.word	0xffff8fbf
 8005928:	00008080 	.word	0x00008080
 800592c:	ffff8f8f 	.word	0xffff8f8f
 8005930:	0000c080 	.word	0x0000c080
 8005934:	fffffbff 	.word	0xfffffbff
 8005938:	ffffbfff 	.word	0xffffbfff
 800593c:	ffffdfff 	.word	0xffffdfff
 8005940:	ffffefff 	.word	0xffffefff
 8005944:	fffff7ff 	.word	0xfffff7ff
 8005948:	fffffdff 	.word	0xfffffdff
 800594c:	fffffeff 	.word	0xfffffeff

08005950 <HAL_PCD_EP_Open>:
{
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	0004      	movs	r4, r0
 8005954:	2007      	movs	r0, #7
 8005956:	000d      	movs	r5, r1
 8005958:	4008      	ands	r0, r1
 800595a:	2128      	movs	r1, #40	@ 0x28
 800595c:	4341      	muls	r1, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800595e:	b26d      	sxtb	r5, r5
 8005960:	1866      	adds	r6, r4, r1
 8005962:	2d00      	cmp	r5, #0
 8005964:	da18      	bge.n	8005998 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8005966:	2501      	movs	r5, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005968:	3110      	adds	r1, #16
 800596a:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 800596c:	7475      	strb	r5, [r6, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 800596e:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8005970:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8005972:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8005974:	2b02      	cmp	r3, #2
 8005976:	d101      	bne.n	800597c <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800597c:	25a4      	movs	r5, #164	@ 0xa4
 800597e:	00ad      	lsls	r5, r5, #2
 8005980:	5d63      	ldrb	r3, [r4, r5]
 8005982:	2002      	movs	r0, #2
 8005984:	2b01      	cmp	r3, #1
 8005986:	d006      	beq.n	8005996 <HAL_PCD_EP_Open+0x46>
 8005988:	2301      	movs	r3, #1
 800598a:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800598c:	6820      	ldr	r0, [r4, #0]
 800598e:	f001 ffdb 	bl	8007948 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005992:	2000      	movs	r0, #0
 8005994:	5560      	strb	r0, [r4, r5]
}
 8005996:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8005998:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800599a:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 800599c:	3652      	adds	r6, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800599e:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 80059a0:	36ff      	adds	r6, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059a2:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80059a4:	7035      	strb	r5, [r6, #0]
 80059a6:	e7e2      	b.n	800596e <HAL_PCD_EP_Open+0x1e>

080059a8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80059a8:	2207      	movs	r2, #7
{
 80059aa:	000b      	movs	r3, r1
 80059ac:	400a      	ands	r2, r1
 80059ae:	2128      	movs	r1, #40	@ 0x28
 80059b0:	4351      	muls	r1, r2
  if ((ep_addr & 0x80U) == 0x80U)
 80059b2:	b25b      	sxtb	r3, r3
{
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	0004      	movs	r4, r0
 80059b8:	1840      	adds	r0, r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	da12      	bge.n	80059e4 <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
 80059be:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059c0:	3110      	adds	r1, #16
 80059c2:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80059c4:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hpcd);
 80059c6:	25a4      	movs	r5, #164	@ 0xa4
  ep->num = ep_addr & EP_ADDR_MSK;
 80059c8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80059ca:	00ad      	lsls	r5, r5, #2
 80059cc:	5d63      	ldrb	r3, [r4, r5]
 80059ce:	2002      	movs	r0, #2
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d006      	beq.n	80059e2 <HAL_PCD_EP_Close+0x3a>
 80059d4:	2301      	movs	r3, #1
 80059d6:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80059d8:	6820      	ldr	r0, [r4, #0]
 80059da:	f002 f8c5 	bl	8007b68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059de:	2000      	movs	r0, #0
 80059e0:	5560      	strb	r0, [r4, r5]
}
 80059e2:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80059e4:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059e6:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 80059e8:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059ea:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 80059ec:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059ee:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80059f0:	7003      	strb	r3, [r0, #0]
 80059f2:	e7e8      	b.n	80059c6 <HAL_PCD_EP_Close+0x1e>

080059f4 <HAL_PCD_EP_Receive>:
{
 80059f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f6:	2407      	movs	r4, #7
}
 80059f8:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 80059fa:	3421      	adds	r4, #33	@ 0x21
 80059fc:	434c      	muls	r4, r1
 80059fe:	1906      	adds	r6, r0, r4
 8005a00:	0037      	movs	r7, r6
 8005a02:	37fc      	adds	r7, #252	@ 0xfc
  ep->xfer_len = len;
 8005a04:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ep->is_in = 0U;
 8005a06:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8005a08:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8005a0a:	3352      	adds	r3, #82	@ 0x52
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a0c:	3651      	adds	r6, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a0e:	3451      	adds	r4, #81	@ 0x51
  ep->is_in = 0U;
 8005a10:	33ff      	adds	r3, #255	@ 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a12:	36ff      	adds	r6, #255	@ 0xff
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a14:	34ff      	adds	r4, #255	@ 0xff
  ep->xfer_count = 0U;
 8005a16:	673d      	str	r5, [r7, #112]	@ 0x70
  ep->xfer_buff = pBuf;
 8005a18:	66ba      	str	r2, [r7, #104]	@ 0x68
  ep->is_in = 0U;
 8005a1a:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a1c:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a1e:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a20:	6800      	ldr	r0, [r0, #0]
 8005a22:	f002 f99f 	bl	8007d64 <USB_EPStartXfer>
}
 8005a26:	0028      	movs	r0, r5
 8005a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a2a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a2a:	2307      	movs	r3, #7
 8005a2c:	400b      	ands	r3, r1
 8005a2e:	2128      	movs	r1, #40	@ 0x28
 8005a30:	4359      	muls	r1, r3
 8005a32:	1840      	adds	r0, r0, r1
 8005a34:	30fc      	adds	r0, #252	@ 0xfc
 8005a36:	6f00      	ldr	r0, [r0, #112]	@ 0x70
}
 8005a38:	4770      	bx	lr

08005a3a <HAL_PCD_EP_Transmit>:
{
 8005a3a:	b570      	push	{r4, r5, r6, lr}
 8005a3c:	2407      	movs	r4, #7
}
 8005a3e:	4021      	ands	r1, r4
 8005a40:	3421      	adds	r4, #33	@ 0x21
 8005a42:	434c      	muls	r4, r1
  ep->xfer_buff = pBuf;
 8005a44:	1906      	adds	r6, r0, r4
  ep->xfer_fill_db = 1U;
 8005a46:	0035      	movs	r5, r6
  ep->xfer_buff = pBuf;
 8005a48:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	3534      	adds	r5, #52	@ 0x34
  ep->xfer_len = len;
 8005a4e:	62b3      	str	r3, [r6, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 8005a50:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 8005a52:	2500      	movs	r5, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a54:	3410      	adds	r4, #16
  ep->xfer_count = 0U;
 8005a56:	62f5      	str	r5, [r6, #44]	@ 0x2c
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a58:	7431      	strb	r1, [r6, #16]
  ep->xfer_len_db = len;
 8005a5a:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->is_in = 1U;
 8005a5c:	7472      	strb	r2, [r6, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a5e:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a60:	6800      	ldr	r0, [r0, #0]
 8005a62:	f002 f97f 	bl	8007d64 <USB_EPStartXfer>
}
 8005a66:	0028      	movs	r0, r5
 8005a68:	bd70      	pop	{r4, r5, r6, pc}

08005a6a <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a6a:	2207      	movs	r2, #7
{
 8005a6c:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a6e:	7903      	ldrb	r3, [r0, #4]
{
 8005a70:	0004      	movs	r4, r0
 8005a72:	400a      	ands	r2, r1
    return HAL_ERROR;
 8005a74:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d319      	bcc.n	8005aae <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8005a7a:	b248      	sxtb	r0, r1
 8005a7c:	2328      	movs	r3, #40	@ 0x28
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	da16      	bge.n	8005ab0 <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a82:	4353      	muls	r3, r2
 8005a84:	0019      	movs	r1, r3
    ep->is_in = 1U;
 8005a86:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a88:	3110      	adds	r1, #16
    ep->is_in = 1U;
 8005a8a:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a8c:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8005a8e:	7458      	strb	r0, [r3, #17]
  ep->is_stall = 1U;
 8005a90:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8005a92:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 8005a94:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a96:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005a98:	00ad      	lsls	r5, r5, #2
 8005a9a:	5d62      	ldrb	r2, [r4, r5]
 8005a9c:	2002      	movs	r0, #2
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d005      	beq.n	8005aae <HAL_PCD_EP_SetStall+0x44>
 8005aa2:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	f002 f8d9 	bl	8007c5c <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8005aaa:	2000      	movs	r0, #0
 8005aac:	5560      	strb	r0, [r4, r5]
}
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8005ab0:	434b      	muls	r3, r1
 8005ab2:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8005ab8:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8005aba:	3352      	adds	r3, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr];
 8005abc:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8005abe:	33ff      	adds	r3, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8005ac0:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8005ac2:	7018      	strb	r0, [r3, #0]
 8005ac4:	e7e4      	b.n	8005a90 <HAL_PCD_EP_SetStall+0x26>

08005ac6 <HAL_PCD_EP_ClrStall>:
{
 8005ac6:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ac8:	220f      	movs	r2, #15
{
 8005aca:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005acc:	7901      	ldrb	r1, [r0, #4]
{
 8005ace:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ad0:	401a      	ands	r2, r3
    return HAL_ERROR;
 8005ad2:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ad4:	4291      	cmp	r1, r2
 8005ad6:	d31b      	bcc.n	8005b10 <HAL_PCD_EP_ClrStall+0x4a>
  if ((0x80U & ep_addr) == 0x80U)
 8005ad8:	2207      	movs	r2, #7
 8005ada:	2128      	movs	r1, #40	@ 0x28
 8005adc:	401a      	ands	r2, r3
 8005ade:	4351      	muls	r1, r2
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	1860      	adds	r0, r4, r1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	da14      	bge.n	8005b12 <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 1U;
 8005ae8:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aea:	3110      	adds	r1, #16
 8005aec:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8005aee:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 0U;
 8005af0:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8005af2:	26a4      	movs	r6, #164	@ 0xa4
  ep->is_stall = 0U;
 8005af4:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005af6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005af8:	00b6      	lsls	r6, r6, #2
 8005afa:	5da3      	ldrb	r3, [r4, r6]
 8005afc:	2002      	movs	r0, #2
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d006      	beq.n	8005b10 <HAL_PCD_EP_ClrStall+0x4a>
 8005b02:	2301      	movs	r3, #1
 8005b04:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b06:	6820      	ldr	r0, [r4, #0]
 8005b08:	f002 f8ca 	bl	8007ca0 <USB_EPClearStall>
  return HAL_OK;
 8005b0c:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 8005b0e:	55a5      	strb	r5, [r4, r6]
}
 8005b10:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8005b12:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b14:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8005b16:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b18:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8005b1a:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b1c:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8005b1e:	7003      	strb	r3, [r0, #0]
 8005b20:	e7e6      	b.n	8005af0 <HAL_PCD_EP_ClrStall+0x2a>

08005b22 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005b22:	b530      	push	{r4, r5, lr}
 8005b24:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005b26:	060d      	lsls	r5, r1, #24
 8005b28:	d50b      	bpl.n	8005b42 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b2a:	2507      	movs	r5, #7
 8005b2c:	4029      	ands	r1, r5
 8005b2e:	434c      	muls	r4, r1
 8005b30:	3410      	adds	r4, #16
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b32:	1900      	adds	r0, r0, r4
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005b34:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8005b36:	2a00      	cmp	r2, #0
 8005b38:	d107      	bne.n	8005b4a <HAL_PCDEx_PMAConfig+0x28>
    ep->doublebuffer = 0U;
 8005b3a:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8005b3c:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005b3e:	2000      	movs	r0, #0
 8005b40:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8005b42:	434c      	muls	r4, r1
 8005b44:	3451      	adds	r4, #81	@ 0x51
 8005b46:	34ff      	adds	r4, #255	@ 0xff
 8005b48:	e7f3      	b.n	8005b32 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 8005b4a:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005b4c:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8005b4e:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005b50:	e7f5      	b.n	8005b3e <HAL_PCDEx_PMAConfig+0x1c>

08005b52 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8005b52:	6803      	ldr	r3, [r0, #0]
{
 8005b54:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8005b56:	20b4      	movs	r0, #180	@ 0xb4
 8005b58:	2101      	movs	r1, #1
{
 8005b5a:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8005b5c:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8005b5e:	24b2      	movs	r4, #178	@ 0xb2
  hpcd->lpm_active = 1U;
 8005b60:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8005b62:	2000      	movs	r0, #0
 8005b64:	00a4      	lsls	r4, r4, #2
 8005b66:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005b68:	3354      	adds	r3, #84	@ 0x54
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005b6e:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005b70:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005b72:	8819      	ldrh	r1, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8005b78:	bd10      	pop	{r4, pc}

08005b7a <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005b7a:	4770      	bx	lr

08005b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b7e:	0004      	movs	r4, r0
 8005b80:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d102      	bne.n	8005b8c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8005b86:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8005b88:	b005      	add	sp, #20
 8005b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b8c:	6803      	ldr	r3, [r0, #0]
 8005b8e:	07db      	lsls	r3, r3, #31
 8005b90:	d433      	bmi.n	8005bfa <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	079b      	lsls	r3, r3, #30
 8005b96:	d500      	bpl.n	8005b9a <HAL_RCC_OscConfig+0x1e>
 8005b98:	e087      	b.n	8005caa <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	071b      	lsls	r3, r3, #28
 8005b9e:	d500      	bpl.n	8005ba2 <HAL_RCC_OscConfig+0x26>
 8005ba0:	e0c8      	b.n	8005d34 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	075b      	lsls	r3, r3, #29
 8005ba6:	d500      	bpl.n	8005baa <HAL_RCC_OscConfig+0x2e>
 8005ba8:	e0eb      	b.n	8005d82 <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	06db      	lsls	r3, r3, #27
 8005bae:	d51a      	bpl.n	8005be6 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005bb0:	6962      	ldr	r2, [r4, #20]
 8005bb2:	2304      	movs	r3, #4
 8005bb4:	4db9      	ldr	r5, [pc, #740]	@ (8005e9c <HAL_RCC_OscConfig+0x320>)
 8005bb6:	2a01      	cmp	r2, #1
 8005bb8:	d000      	beq.n	8005bbc <HAL_RCC_OscConfig+0x40>
 8005bba:	e154      	b.n	8005e66 <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_HSI14ADC_DISABLE();
 8005bbc:	6b69      	ldr	r1, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005bbe:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8005bc4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8005bca:	f7fe ff57 	bl	8004a7c <HAL_GetTick>
 8005bce:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005bd0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005bd2:	423b      	tst	r3, r7
 8005bd4:	d100      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x5c>
 8005bd6:	e13f      	b.n	8005e58 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005bd8:	21f8      	movs	r1, #248	@ 0xf8
 8005bda:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8005bdc:	69a3      	ldr	r3, [r4, #24]
 8005bde:	438a      	bics	r2, r1
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	4313      	orrs	r3, r2
 8005be4:	636b      	str	r3, [r5, #52]	@ 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	069b      	lsls	r3, r3, #26
 8005bea:	d500      	bpl.n	8005bee <HAL_RCC_OscConfig+0x72>
 8005bec:	e162      	b.n	8005eb4 <HAL_RCC_OscConfig+0x338>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d000      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x7a>
 8005bf4:	e1a1      	b.n	8005f3a <HAL_RCC_OscConfig+0x3be>
  return HAL_OK;
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e7c6      	b.n	8005b88 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005bfa:	220c      	movs	r2, #12
 8005bfc:	4da7      	ldr	r5, [pc, #668]	@ (8005e9c <HAL_RCC_OscConfig+0x320>)
 8005bfe:	686b      	ldr	r3, [r5, #4]
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d00b      	beq.n	8005c1e <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c06:	686b      	ldr	r3, [r5, #4]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d10e      	bne.n	8005c2c <HAL_RCC_OscConfig+0xb0>
 8005c0e:	22c0      	movs	r2, #192	@ 0xc0
 8005c10:	686b      	ldr	r3, [r5, #4]
 8005c12:	0252      	lsls	r2, r2, #9
 8005c14:	4013      	ands	r3, r2
 8005c16:	2280      	movs	r2, #128	@ 0x80
 8005c18:	0252      	lsls	r2, r2, #9
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d106      	bne.n	8005c2c <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c1e:	682b      	ldr	r3, [r5, #0]
 8005c20:	039b      	lsls	r3, r3, #14
 8005c22:	d5b6      	bpl.n	8005b92 <HAL_RCC_OscConfig+0x16>
 8005c24:	6863      	ldr	r3, [r4, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1b3      	bne.n	8005b92 <HAL_RCC_OscConfig+0x16>
 8005c2a:	e7ac      	b.n	8005b86 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c2c:	6863      	ldr	r3, [r4, #4]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d113      	bne.n	8005c5a <HAL_RCC_OscConfig+0xde>
 8005c32:	2380      	movs	r3, #128	@ 0x80
 8005c34:	682a      	ldr	r2, [r5, #0]
 8005c36:	025b      	lsls	r3, r3, #9
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005c3c:	f7fe ff1e 	bl	8004a7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c40:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8005c42:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c44:	02bf      	lsls	r7, r7, #10
 8005c46:	682b      	ldr	r3, [r5, #0]
 8005c48:	423b      	tst	r3, r7
 8005c4a:	d1a2      	bne.n	8005b92 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c4c:	f7fe ff16 	bl	8004a7c <HAL_GetTick>
 8005c50:	1b80      	subs	r0, r0, r6
 8005c52:	2864      	cmp	r0, #100	@ 0x64
 8005c54:	d9f7      	bls.n	8005c46 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8005c56:	2003      	movs	r0, #3
 8005c58:	e796      	b.n	8005b88 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d115      	bne.n	8005c8a <HAL_RCC_OscConfig+0x10e>
 8005c5e:	682b      	ldr	r3, [r5, #0]
 8005c60:	4a8f      	ldr	r2, [pc, #572]	@ (8005ea0 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c62:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c64:	4013      	ands	r3, r2
 8005c66:	602b      	str	r3, [r5, #0]
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	4a8e      	ldr	r2, [pc, #568]	@ (8005ea4 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c6c:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c6e:	4013      	ands	r3, r2
 8005c70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005c72:	f7fe ff03 	bl	8004a7c <HAL_GetTick>
 8005c76:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	423b      	tst	r3, r7
 8005c7c:	d089      	beq.n	8005b92 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c7e:	f7fe fefd 	bl	8004a7c <HAL_GetTick>
 8005c82:	1b80      	subs	r0, r0, r6
 8005c84:	2864      	cmp	r0, #100	@ 0x64
 8005c86:	d9f7      	bls.n	8005c78 <HAL_RCC_OscConfig+0xfc>
 8005c88:	e7e5      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c8a:	2b05      	cmp	r3, #5
 8005c8c:	d105      	bne.n	8005c9a <HAL_RCC_OscConfig+0x11e>
 8005c8e:	2380      	movs	r3, #128	@ 0x80
 8005c90:	682a      	ldr	r2, [r5, #0]
 8005c92:	02db      	lsls	r3, r3, #11
 8005c94:	4313      	orrs	r3, r2
 8005c96:	602b      	str	r3, [r5, #0]
 8005c98:	e7cb      	b.n	8005c32 <HAL_RCC_OscConfig+0xb6>
 8005c9a:	682b      	ldr	r3, [r5, #0]
 8005c9c:	4a80      	ldr	r2, [pc, #512]	@ (8005ea0 <HAL_RCC_OscConfig+0x324>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	682b      	ldr	r3, [r5, #0]
 8005ca4:	4a7f      	ldr	r2, [pc, #508]	@ (8005ea4 <HAL_RCC_OscConfig+0x328>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	e7c7      	b.n	8005c3a <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005caa:	220c      	movs	r2, #12
 8005cac:	4d7b      	ldr	r5, [pc, #492]	@ (8005e9c <HAL_RCC_OscConfig+0x320>)
 8005cae:	686b      	ldr	r3, [r5, #4]
 8005cb0:	4213      	tst	r3, r2
 8005cb2:	d00b      	beq.n	8005ccc <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005cb4:	686b      	ldr	r3, [r5, #4]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d116      	bne.n	8005cea <HAL_RCC_OscConfig+0x16e>
 8005cbc:	22c0      	movs	r2, #192	@ 0xc0
 8005cbe:	686b      	ldr	r3, [r5, #4]
 8005cc0:	0252      	lsls	r2, r2, #9
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2280      	movs	r2, #128	@ 0x80
 8005cc6:	0212      	lsls	r2, r2, #8
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10e      	bne.n	8005cea <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	079b      	lsls	r3, r3, #30
 8005cd0:	d503      	bpl.n	8005cda <HAL_RCC_OscConfig+0x15e>
 8005cd2:	68e3      	ldr	r3, [r4, #12]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d000      	beq.n	8005cda <HAL_RCC_OscConfig+0x15e>
 8005cd8:	e755      	b.n	8005b86 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cda:	21f8      	movs	r1, #248	@ 0xf8
 8005cdc:	682a      	ldr	r2, [r5, #0]
 8005cde:	6923      	ldr	r3, [r4, #16]
 8005ce0:	438a      	bics	r2, r1
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	602b      	str	r3, [r5, #0]
 8005ce8:	e757      	b.n	8005b9a <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cea:	68e2      	ldr	r2, [r4, #12]
 8005cec:	2301      	movs	r3, #1
 8005cee:	2a00      	cmp	r2, #0
 8005cf0:	d00f      	beq.n	8005d12 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8005cf2:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf4:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005cfa:	f7fe febf 	bl	8004a7c <HAL_GetTick>
 8005cfe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	423b      	tst	r3, r7
 8005d04:	d1e9      	bne.n	8005cda <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d06:	f7fe feb9 	bl	8004a7c <HAL_GetTick>
 8005d0a:	1b80      	subs	r0, r0, r6
 8005d0c:	2802      	cmp	r0, #2
 8005d0e:	d9f7      	bls.n	8005d00 <HAL_RCC_OscConfig+0x184>
 8005d10:	e7a1      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8005d12:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d14:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8005d16:	439a      	bics	r2, r3
 8005d18:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8005d1a:	f7fe feaf 	bl	8004a7c <HAL_GetTick>
 8005d1e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	423b      	tst	r3, r7
 8005d24:	d100      	bne.n	8005d28 <HAL_RCC_OscConfig+0x1ac>
 8005d26:	e738      	b.n	8005b9a <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d28:	f7fe fea8 	bl	8004a7c <HAL_GetTick>
 8005d2c:	1b80      	subs	r0, r0, r6
 8005d2e:	2802      	cmp	r0, #2
 8005d30:	d9f6      	bls.n	8005d20 <HAL_RCC_OscConfig+0x1a4>
 8005d32:	e790      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d34:	69e2      	ldr	r2, [r4, #28]
 8005d36:	2301      	movs	r3, #1
 8005d38:	4d58      	ldr	r5, [pc, #352]	@ (8005e9c <HAL_RCC_OscConfig+0x320>)
 8005d3a:	2a00      	cmp	r2, #0
 8005d3c:	d010      	beq.n	8005d60 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8005d3e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d40:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8005d42:	4313      	orrs	r3, r2
 8005d44:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8005d46:	f7fe fe99 	bl	8004a7c <HAL_GetTick>
 8005d4a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d4c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005d4e:	423b      	tst	r3, r7
 8005d50:	d000      	beq.n	8005d54 <HAL_RCC_OscConfig+0x1d8>
 8005d52:	e726      	b.n	8005ba2 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d54:	f7fe fe92 	bl	8004a7c <HAL_GetTick>
 8005d58:	1b80      	subs	r0, r0, r6
 8005d5a:	2802      	cmp	r0, #2
 8005d5c:	d9f6      	bls.n	8005d4c <HAL_RCC_OscConfig+0x1d0>
 8005d5e:	e77a      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8005d60:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d62:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8005d64:	439a      	bics	r2, r3
 8005d66:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8005d68:	f7fe fe88 	bl	8004a7c <HAL_GetTick>
 8005d6c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d6e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005d70:	423b      	tst	r3, r7
 8005d72:	d100      	bne.n	8005d76 <HAL_RCC_OscConfig+0x1fa>
 8005d74:	e715      	b.n	8005ba2 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d76:	f7fe fe81 	bl	8004a7c <HAL_GetTick>
 8005d7a:	1b80      	subs	r0, r0, r6
 8005d7c:	2802      	cmp	r0, #2
 8005d7e:	d9f6      	bls.n	8005d6e <HAL_RCC_OscConfig+0x1f2>
 8005d80:	e769      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d82:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005d84:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d86:	4d45      	ldr	r5, [pc, #276]	@ (8005e9c <HAL_RCC_OscConfig+0x320>)
 8005d88:	0552      	lsls	r2, r2, #21
 8005d8a:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8005d8c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d8e:	4213      	tst	r3, r2
 8005d90:	d108      	bne.n	8005da4 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d92:	69eb      	ldr	r3, [r5, #28]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	61eb      	str	r3, [r5, #28]
 8005d98:	69eb      	ldr	r3, [r5, #28]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	9303      	str	r3, [sp, #12]
 8005d9e:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8005da0:	2301      	movs	r3, #1
 8005da2:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da4:	2780      	movs	r7, #128	@ 0x80
 8005da6:	4e40      	ldr	r6, [pc, #256]	@ (8005ea8 <HAL_RCC_OscConfig+0x32c>)
 8005da8:	007f      	lsls	r7, r7, #1
 8005daa:	6833      	ldr	r3, [r6, #0]
 8005dac:	423b      	tst	r3, r7
 8005dae:	d015      	beq.n	8005ddc <HAL_RCC_OscConfig+0x260>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005db0:	68a3      	ldr	r3, [r4, #8]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d122      	bne.n	8005dfc <HAL_RCC_OscConfig+0x280>
 8005db6:	6a2a      	ldr	r2, [r5, #32]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8005dbc:	f7fe fe5e 	bl	8004a7c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc0:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8005dc2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc4:	6a2b      	ldr	r3, [r5, #32]
 8005dc6:	423b      	tst	r3, r7
 8005dc8:	d03f      	beq.n	8005e4a <HAL_RCC_OscConfig+0x2ce>
    if(pwrclkchanged == SET)
 8005dca:	9b00      	ldr	r3, [sp, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d000      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x256>
 8005dd0:	e6eb      	b.n	8005baa <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd2:	69eb      	ldr	r3, [r5, #28]
 8005dd4:	4a35      	ldr	r2, [pc, #212]	@ (8005eac <HAL_RCC_OscConfig+0x330>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	61eb      	str	r3, [r5, #28]
 8005dda:	e6e6      	b.n	8005baa <HAL_RCC_OscConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	433b      	orrs	r3, r7
 8005de0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005de2:	f7fe fe4b 	bl	8004a7c <HAL_GetTick>
 8005de6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de8:	6833      	ldr	r3, [r6, #0]
 8005dea:	423b      	tst	r3, r7
 8005dec:	d1e0      	bne.n	8005db0 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dee:	f7fe fe45 	bl	8004a7c <HAL_GetTick>
 8005df2:	9b01      	ldr	r3, [sp, #4]
 8005df4:	1ac0      	subs	r0, r0, r3
 8005df6:	2864      	cmp	r0, #100	@ 0x64
 8005df8:	d9f6      	bls.n	8005de8 <HAL_RCC_OscConfig+0x26c>
 8005dfa:	e72c      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d114      	bne.n	8005e2c <HAL_RCC_OscConfig+0x2b0>
 8005e02:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e04:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e06:	4393      	bics	r3, r2
 8005e08:	622b      	str	r3, [r5, #32]
 8005e0a:	6a2b      	ldr	r3, [r5, #32]
 8005e0c:	3203      	adds	r2, #3
 8005e0e:	4393      	bics	r3, r2
 8005e10:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8005e12:	f7fe fe33 	bl	8004a7c <HAL_GetTick>
 8005e16:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e18:	6a2b      	ldr	r3, [r5, #32]
 8005e1a:	423b      	tst	r3, r7
 8005e1c:	d0d5      	beq.n	8005dca <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e1e:	f7fe fe2d 	bl	8004a7c <HAL_GetTick>
 8005e22:	4b23      	ldr	r3, [pc, #140]	@ (8005eb0 <HAL_RCC_OscConfig+0x334>)
 8005e24:	1b80      	subs	r0, r0, r6
 8005e26:	4298      	cmp	r0, r3
 8005e28:	d9f6      	bls.n	8005e18 <HAL_RCC_OscConfig+0x29c>
 8005e2a:	e714      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e2c:	2b05      	cmp	r3, #5
 8005e2e:	d105      	bne.n	8005e3c <HAL_RCC_OscConfig+0x2c0>
 8005e30:	6a29      	ldr	r1, [r5, #32]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	430b      	orrs	r3, r1
 8005e36:	622b      	str	r3, [r5, #32]
 8005e38:	6a2b      	ldr	r3, [r5, #32]
 8005e3a:	e7bd      	b.n	8005db8 <HAL_RCC_OscConfig+0x23c>
 8005e3c:	6a2b      	ldr	r3, [r5, #32]
 8005e3e:	4393      	bics	r3, r2
 8005e40:	2204      	movs	r2, #4
 8005e42:	622b      	str	r3, [r5, #32]
 8005e44:	6a2b      	ldr	r3, [r5, #32]
 8005e46:	4393      	bics	r3, r2
 8005e48:	e7b7      	b.n	8005dba <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e4a:	f7fe fe17 	bl	8004a7c <HAL_GetTick>
 8005e4e:	4b18      	ldr	r3, [pc, #96]	@ (8005eb0 <HAL_RCC_OscConfig+0x334>)
 8005e50:	1b80      	subs	r0, r0, r6
 8005e52:	4298      	cmp	r0, r3
 8005e54:	d9b6      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x248>
 8005e56:	e6fe      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005e58:	f7fe fe10 	bl	8004a7c <HAL_GetTick>
 8005e5c:	1b80      	subs	r0, r0, r6
 8005e5e:	2802      	cmp	r0, #2
 8005e60:	d800      	bhi.n	8005e64 <HAL_RCC_OscConfig+0x2e8>
 8005e62:	e6b5      	b.n	8005bd0 <HAL_RCC_OscConfig+0x54>
 8005e64:	e6f7      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005e66:	3205      	adds	r2, #5
 8005e68:	d103      	bne.n	8005e72 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 8005e6a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8005e6c:	439a      	bics	r2, r3
 8005e6e:	636a      	str	r2, [r5, #52]	@ 0x34
 8005e70:	e6b2      	b.n	8005bd8 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8005e72:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005e74:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8005e76:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8005e78:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8005e7a:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8005e7c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005e7e:	4393      	bics	r3, r2
 8005e80:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8005e82:	f7fe fdfb 	bl	8004a7c <HAL_GetTick>
 8005e86:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005e88:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005e8a:	423b      	tst	r3, r7
 8005e8c:	d100      	bne.n	8005e90 <HAL_RCC_OscConfig+0x314>
 8005e8e:	e6aa      	b.n	8005be6 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005e90:	f7fe fdf4 	bl	8004a7c <HAL_GetTick>
 8005e94:	1b80      	subs	r0, r0, r6
 8005e96:	2802      	cmp	r0, #2
 8005e98:	d9f6      	bls.n	8005e88 <HAL_RCC_OscConfig+0x30c>
 8005e9a:	e6dc      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	fffeffff 	.word	0xfffeffff
 8005ea4:	fffbffff 	.word	0xfffbffff
 8005ea8:	40007000 	.word	0x40007000
 8005eac:	efffffff 	.word	0xefffffff
 8005eb0:	00001388 	.word	0x00001388
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005eb4:	220c      	movs	r2, #12
 8005eb6:	4d55      	ldr	r5, [pc, #340]	@ (800600c <HAL_RCC_OscConfig+0x490>)
 8005eb8:	686b      	ldr	r3, [r5, #4]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d009      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005ec0:	686b      	ldr	r3, [r5, #4]
 8005ec2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d10e      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005ec8:	22c0      	movs	r2, #192	@ 0xc0
 8005eca:	686b      	ldr	r3, [r5, #4]
 8005ecc:	0252      	lsls	r2, r2, #9
 8005ece:	4013      	ands	r3, r2
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d108      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005ed4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005ed6:	039b      	lsls	r3, r3, #14
 8005ed8:	d400      	bmi.n	8005edc <HAL_RCC_OscConfig+0x360>
 8005eda:	e688      	b.n	8005bee <HAL_RCC_OscConfig+0x72>
 8005edc:	6a23      	ldr	r3, [r4, #32]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d000      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x368>
 8005ee2:	e650      	b.n	8005b86 <HAL_RCC_OscConfig+0xa>
 8005ee4:	e683      	b.n	8005bee <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ee6:	6a23      	ldr	r3, [r4, #32]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d013      	beq.n	8005f14 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 8005eec:	2380      	movs	r3, #128	@ 0x80
 8005eee:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8005ef0:	025b      	lsls	r3, r3, #9
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8005ef6:	f7fe fdc1 	bl	8004a7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005efa:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8005efc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005efe:	02bf      	lsls	r7, r7, #10
 8005f00:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005f02:	423b      	tst	r3, r7
 8005f04:	d000      	beq.n	8005f08 <HAL_RCC_OscConfig+0x38c>
 8005f06:	e672      	b.n	8005bee <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f08:	f7fe fdb8 	bl	8004a7c <HAL_GetTick>
 8005f0c:	1b80      	subs	r0, r0, r6
 8005f0e:	2802      	cmp	r0, #2
 8005f10:	d9f6      	bls.n	8005f00 <HAL_RCC_OscConfig+0x384>
 8005f12:	e6a0      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8005f14:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005f16:	4a3e      	ldr	r2, [pc, #248]	@ (8006010 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005f18:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI48_DISABLE();
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8005f1e:	f7fe fdad 	bl	8004a7c <HAL_GetTick>
 8005f22:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005f24:	02bf      	lsls	r7, r7, #10
 8005f26:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005f28:	423b      	tst	r3, r7
 8005f2a:	d100      	bne.n	8005f2e <HAL_RCC_OscConfig+0x3b2>
 8005f2c:	e65f      	b.n	8005bee <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f2e:	f7fe fda5 	bl	8004a7c <HAL_GetTick>
 8005f32:	1b80      	subs	r0, r0, r6
 8005f34:	2802      	cmp	r0, #2
 8005f36:	d9f6      	bls.n	8005f26 <HAL_RCC_OscConfig+0x3aa>
 8005f38:	e68d      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f3a:	210c      	movs	r1, #12
 8005f3c:	4d33      	ldr	r5, [pc, #204]	@ (800600c <HAL_RCC_OscConfig+0x490>)
 8005f3e:	686a      	ldr	r2, [r5, #4]
 8005f40:	400a      	ands	r2, r1
 8005f42:	2a08      	cmp	r2, #8
 8005f44:	d047      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f46:	4a33      	ldr	r2, [pc, #204]	@ (8006014 <HAL_RCC_OscConfig+0x498>)
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d132      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 8005f4c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f4e:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8005f50:	4013      	ands	r3, r2
 8005f52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005f54:	f7fe fd92 	bl	8004a7c <HAL_GetTick>
 8005f58:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f5a:	04bf      	lsls	r7, r7, #18
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	423b      	tst	r3, r7
 8005f60:	d121      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f62:	220f      	movs	r2, #15
 8005f64:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f66:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f68:	4393      	bics	r3, r2
 8005f6a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f6c:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8005f72:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005f74:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005f76:	686a      	ldr	r2, [r5, #4]
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	4927      	ldr	r1, [pc, #156]	@ (8006018 <HAL_RCC_OscConfig+0x49c>)
 8005f7c:	400a      	ands	r2, r1
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005f82:	2380      	movs	r3, #128	@ 0x80
 8005f84:	682a      	ldr	r2, [r5, #0]
 8005f86:	045b      	lsls	r3, r3, #17
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005f8c:	f7fe fd76 	bl	8004a7c <HAL_GetTick>
 8005f90:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f92:	682b      	ldr	r3, [r5, #0]
 8005f94:	4233      	tst	r3, r6
 8005f96:	d000      	beq.n	8005f9a <HAL_RCC_OscConfig+0x41e>
 8005f98:	e62d      	b.n	8005bf6 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f9a:	f7fe fd6f 	bl	8004a7c <HAL_GetTick>
 8005f9e:	1b00      	subs	r0, r0, r4
 8005fa0:	2802      	cmp	r0, #2
 8005fa2:	d9f6      	bls.n	8005f92 <HAL_RCC_OscConfig+0x416>
 8005fa4:	e657      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fa6:	f7fe fd69 	bl	8004a7c <HAL_GetTick>
 8005faa:	1b80      	subs	r0, r0, r6
 8005fac:	2802      	cmp	r0, #2
 8005fae:	d9d5      	bls.n	8005f5c <HAL_RCC_OscConfig+0x3e0>
 8005fb0:	e651      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 8005fb2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fb4:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005fba:	f7fe fd5f 	bl	8004a7c <HAL_GetTick>
 8005fbe:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fc0:	04b6      	lsls	r6, r6, #18
 8005fc2:	682b      	ldr	r3, [r5, #0]
 8005fc4:	4233      	tst	r3, r6
 8005fc6:	d100      	bne.n	8005fca <HAL_RCC_OscConfig+0x44e>
 8005fc8:	e615      	b.n	8005bf6 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fca:	f7fe fd57 	bl	8004a7c <HAL_GetTick>
 8005fce:	1b00      	subs	r0, r0, r4
 8005fd0:	2802      	cmp	r0, #2
 8005fd2:	d9f6      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x446>
 8005fd4:	e63f      	b.n	8005c56 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d100      	bne.n	8005fdc <HAL_RCC_OscConfig+0x460>
 8005fda:	e5d4      	b.n	8005b86 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fdc:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 8005fde:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fe0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005fe2:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8005fe4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fe6:	4002      	ands	r2, r0
 8005fe8:	428a      	cmp	r2, r1
 8005fea:	d000      	beq.n	8005fee <HAL_RCC_OscConfig+0x472>
 8005fec:	e5cb      	b.n	8005b86 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005fee:	220f      	movs	r2, #15
 8005ff0:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d000      	beq.n	8005ffa <HAL_RCC_OscConfig+0x47e>
 8005ff8:	e5c5      	b.n	8005b86 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005ffa:	23f0      	movs	r3, #240	@ 0xf0
 8005ffc:	039b      	lsls	r3, r3, #14
 8005ffe:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006000:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006002:	1ac0      	subs	r0, r0, r3
 8006004:	1e43      	subs	r3, r0, #1
 8006006:	4198      	sbcs	r0, r3
 8006008:	b2c0      	uxtb	r0, r0
 800600a:	e5bd      	b.n	8005b88 <HAL_RCC_OscConfig+0xc>
 800600c:	40021000 	.word	0x40021000
 8006010:	fffeffff 	.word	0xfffeffff
 8006014:	feffffff 	.word	0xfeffffff
 8006018:	ffc27fff 	.word	0xffc27fff

0800601c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800601c:	200c      	movs	r0, #12
{
 800601e:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8006020:	4d13      	ldr	r5, [pc, #76]	@ (8006070 <HAL_RCC_GetSysClockFreq+0x54>)
 8006022:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006024:	4018      	ands	r0, r3
 8006026:	2808      	cmp	r0, #8
 8006028:	d008      	beq.n	800603c <HAL_RCC_GetSysClockFreq+0x20>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800602a:	380c      	subs	r0, #12
 800602c:	4243      	negs	r3, r0
 800602e:	4158      	adcs	r0, r3
 8006030:	4b10      	ldr	r3, [pc, #64]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x58>)
 8006032:	4240      	negs	r0, r0
 8006034:	4018      	ands	r0, r3
 8006036:	4b10      	ldr	r3, [pc, #64]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x5c>)
 8006038:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800603a:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800603c:	200f      	movs	r0, #15
 800603e:	490f      	ldr	r1, [pc, #60]	@ (800607c <HAL_RCC_GetSysClockFreq+0x60>)
 8006040:	0c9a      	lsrs	r2, r3, #18
 8006042:	4002      	ands	r2, r0
 8006044:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006046:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8006048:	490d      	ldr	r1, [pc, #52]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x64>)
 800604a:	4002      	ands	r2, r0
 800604c:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800604e:	22c0      	movs	r2, #192	@ 0xc0
 8006050:	2080      	movs	r0, #128	@ 0x80
 8006052:	0252      	lsls	r2, r2, #9
 8006054:	4013      	ands	r3, r2
 8006056:	0240      	lsls	r0, r0, #9
 8006058:	4283      	cmp	r3, r0
 800605a:	d101      	bne.n	8006060 <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800605c:	4806      	ldr	r0, [pc, #24]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x5c>)
 800605e:	e002      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006060:	4293      	cmp	r3, r2
 8006062:	d1fb      	bne.n	800605c <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006064:	4807      	ldr	r0, [pc, #28]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x68>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006066:	f7fa f87f 	bl	8000168 <__udivsi3>
 800606a:	4360      	muls	r0, r4
 800606c:	e7e5      	b.n	800603a <HAL_RCC_GetSysClockFreq+0x1e>
 800606e:	46c0      	nop			@ (mov r8, r8)
 8006070:	40021000 	.word	0x40021000
 8006074:	02625a00 	.word	0x02625a00
 8006078:	007a1200 	.word	0x007a1200
 800607c:	0801145f 	.word	0x0801145f
 8006080:	0801144f 	.word	0x0801144f
 8006084:	02dc6c00 	.word	0x02dc6c00

08006088 <HAL_RCC_ClockConfig>:
{
 8006088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800608a:	0004      	movs	r4, r0
 800608c:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800608e:	2800      	cmp	r0, #0
 8006090:	d101      	bne.n	8006096 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8006092:	2001      	movs	r0, #1
}
 8006094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006096:	2201      	movs	r2, #1
 8006098:	4d3a      	ldr	r5, [pc, #232]	@ (8006184 <HAL_RCC_ClockConfig+0xfc>)
 800609a:	682b      	ldr	r3, [r5, #0]
 800609c:	4013      	ands	r3, r2
 800609e:	428b      	cmp	r3, r1
 80060a0:	d31c      	bcc.n	80060dc <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	0793      	lsls	r3, r2, #30
 80060a6:	d422      	bmi.n	80060ee <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060a8:	07d2      	lsls	r2, r2, #31
 80060aa:	d42f      	bmi.n	800610c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060ac:	2301      	movs	r3, #1
 80060ae:	682a      	ldr	r2, [r5, #0]
 80060b0:	401a      	ands	r2, r3
 80060b2:	42ba      	cmp	r2, r7
 80060b4:	d857      	bhi.n	8006166 <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	4d33      	ldr	r5, [pc, #204]	@ (8006188 <HAL_RCC_ClockConfig+0x100>)
 80060ba:	075b      	lsls	r3, r3, #29
 80060bc:	d45a      	bmi.n	8006174 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80060be:	f7ff ffad 	bl	800601c <HAL_RCC_GetSysClockFreq>
 80060c2:	686b      	ldr	r3, [r5, #4]
 80060c4:	4a31      	ldr	r2, [pc, #196]	@ (800618c <HAL_RCC_ClockConfig+0x104>)
 80060c6:	061b      	lsls	r3, r3, #24
 80060c8:	0f1b      	lsrs	r3, r3, #28
 80060ca:	5cd3      	ldrb	r3, [r2, r3]
 80060cc:	4930      	ldr	r1, [pc, #192]	@ (8006190 <HAL_RCC_ClockConfig+0x108>)
 80060ce:	40d8      	lsrs	r0, r3
 80060d0:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80060d2:	2003      	movs	r0, #3
 80060d4:	f7fe fc92 	bl	80049fc <HAL_InitTick>
  return HAL_OK;
 80060d8:	2000      	movs	r0, #0
 80060da:	e7db      	b.n	8006094 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	4393      	bics	r3, r2
 80060e0:	430b      	orrs	r3, r1
 80060e2:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	4013      	ands	r3, r2
 80060e8:	428b      	cmp	r3, r1
 80060ea:	d1d2      	bne.n	8006092 <HAL_RCC_ClockConfig+0xa>
 80060ec:	e7d9      	b.n	80060a2 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ee:	4926      	ldr	r1, [pc, #152]	@ (8006188 <HAL_RCC_ClockConfig+0x100>)
 80060f0:	0753      	lsls	r3, r2, #29
 80060f2:	d504      	bpl.n	80060fe <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80060f4:	23e0      	movs	r3, #224	@ 0xe0
 80060f6:	6848      	ldr	r0, [r1, #4]
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	4303      	orrs	r3, r0
 80060fc:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060fe:	20f0      	movs	r0, #240	@ 0xf0
 8006100:	684b      	ldr	r3, [r1, #4]
 8006102:	4383      	bics	r3, r0
 8006104:	68a0      	ldr	r0, [r4, #8]
 8006106:	4303      	orrs	r3, r0
 8006108:	604b      	str	r3, [r1, #4]
 800610a:	e7cd      	b.n	80060a8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800610c:	6862      	ldr	r2, [r4, #4]
 800610e:	4e1e      	ldr	r6, [pc, #120]	@ (8006188 <HAL_RCC_ClockConfig+0x100>)
 8006110:	2a01      	cmp	r2, #1
 8006112:	d103      	bne.n	800611c <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006114:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006116:	039b      	lsls	r3, r3, #14
 8006118:	d405      	bmi.n	8006126 <HAL_RCC_ClockConfig+0x9e>
 800611a:	e7ba      	b.n	8006092 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800611c:	2a02      	cmp	r2, #2
 800611e:	d11a      	bne.n	8006156 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006120:	6833      	ldr	r3, [r6, #0]
 8006122:	019b      	lsls	r3, r3, #6
 8006124:	d5b5      	bpl.n	8006092 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006126:	2103      	movs	r1, #3
 8006128:	6873      	ldr	r3, [r6, #4]
 800612a:	438b      	bics	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006130:	f7fe fca4 	bl	8004a7c <HAL_GetTick>
 8006134:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006136:	230c      	movs	r3, #12
 8006138:	6872      	ldr	r2, [r6, #4]
 800613a:	401a      	ands	r2, r3
 800613c:	6863      	ldr	r3, [r4, #4]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	429a      	cmp	r2, r3
 8006142:	d0b3      	beq.n	80060ac <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006144:	f7fe fc9a 	bl	8004a7c <HAL_GetTick>
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	1ac0      	subs	r0, r0, r3
 800614c:	4b11      	ldr	r3, [pc, #68]	@ (8006194 <HAL_RCC_ClockConfig+0x10c>)
 800614e:	4298      	cmp	r0, r3
 8006150:	d9f1      	bls.n	8006136 <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 8006152:	2003      	movs	r0, #3
 8006154:	e79e      	b.n	8006094 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006156:	2a03      	cmp	r2, #3
 8006158:	d101      	bne.n	800615e <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800615a:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800615c:	e7db      	b.n	8006116 <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800615e:	6833      	ldr	r3, [r6, #0]
 8006160:	079b      	lsls	r3, r3, #30
 8006162:	d4e0      	bmi.n	8006126 <HAL_RCC_ClockConfig+0x9e>
 8006164:	e795      	b.n	8006092 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006166:	682a      	ldr	r2, [r5, #0]
 8006168:	439a      	bics	r2, r3
 800616a:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800616c:	682a      	ldr	r2, [r5, #0]
 800616e:	421a      	tst	r2, r3
 8006170:	d0a1      	beq.n	80060b6 <HAL_RCC_ClockConfig+0x2e>
 8006172:	e78e      	b.n	8006092 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006174:	686b      	ldr	r3, [r5, #4]
 8006176:	4a08      	ldr	r2, [pc, #32]	@ (8006198 <HAL_RCC_ClockConfig+0x110>)
 8006178:	4013      	ands	r3, r2
 800617a:	68e2      	ldr	r2, [r4, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	606b      	str	r3, [r5, #4]
 8006180:	e79d      	b.n	80060be <HAL_RCC_ClockConfig+0x36>
 8006182:	46c0      	nop			@ (mov r8, r8)
 8006184:	40022000 	.word	0x40022000
 8006188:	40021000 	.word	0x40021000
 800618c:	0801143f 	.word	0x0801143f
 8006190:	20000004 	.word	0x20000004
 8006194:	00001388 	.word	0x00001388
 8006198:	fffff8ff 	.word	0xfffff8ff

0800619c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800619c:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800619e:	4a05      	ldr	r2, [pc, #20]	@ (80061b4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4905      	ldr	r1, [pc, #20]	@ (80061b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80061a4:	055b      	lsls	r3, r3, #21
 80061a6:	0f5b      	lsrs	r3, r3, #29
 80061a8:	5ccb      	ldrb	r3, [r1, r3]
 80061aa:	6810      	ldr	r0, [r2, #0]
 80061ac:	40d8      	lsrs	r0, r3
}    
 80061ae:	4770      	bx	lr
 80061b0:	40021000 	.word	0x40021000
 80061b4:	20000004 	.word	0x20000004
 80061b8:	08011437 	.word	0x08011437

080061bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061bc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061be:	6803      	ldr	r3, [r0, #0]
{
 80061c0:	0005      	movs	r5, r0
 80061c2:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061c4:	03db      	lsls	r3, r3, #15
 80061c6:	d52b      	bpl.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061c8:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80061ca:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061cc:	4c46      	ldr	r4, [pc, #280]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80061ce:	0552      	lsls	r2, r2, #21
 80061d0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80061d2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061d4:	4213      	tst	r3, r2
 80061d6:	d108      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80061d8:	69e3      	ldr	r3, [r4, #28]
 80061da:	4313      	orrs	r3, r2
 80061dc:	61e3      	str	r3, [r4, #28]
 80061de:	69e3      	ldr	r3, [r4, #28]
 80061e0:	4013      	ands	r3, r2
 80061e2:	9303      	str	r3, [sp, #12]
 80061e4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80061e6:	2301      	movs	r3, #1
 80061e8:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ea:	2780      	movs	r7, #128	@ 0x80
 80061ec:	4e3f      	ldr	r6, [pc, #252]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ee:	007f      	lsls	r7, r7, #1
 80061f0:	6833      	ldr	r3, [r6, #0]
 80061f2:	423b      	tst	r3, r7
 80061f4:	d03d      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061f6:	6a21      	ldr	r1, [r4, #32]
 80061f8:	22c0      	movs	r2, #192	@ 0xc0
 80061fa:	0008      	movs	r0, r1
 80061fc:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061fe:	686b      	ldr	r3, [r5, #4]
 8006200:	4e3b      	ldr	r6, [pc, #236]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006202:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006204:	4211      	tst	r1, r2
 8006206:	d146      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006208:	6a23      	ldr	r3, [r4, #32]
 800620a:	686a      	ldr	r2, [r5, #4]
 800620c:	4033      	ands	r3, r6
 800620e:	4313      	orrs	r3, r2
 8006210:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006212:	9b00      	ldr	r3, [sp, #0]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d103      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006218:	69e3      	ldr	r3, [r4, #28]
 800621a:	4a36      	ldr	r2, [pc, #216]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800621c:	4013      	ands	r3, r2
 800621e:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	07da      	lsls	r2, r3, #31
 8006224:	d506      	bpl.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006226:	2003      	movs	r0, #3
 8006228:	492f      	ldr	r1, [pc, #188]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800622a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800622c:	4382      	bics	r2, r0
 800622e:	68a8      	ldr	r0, [r5, #8]
 8006230:	4302      	orrs	r2, r0
 8006232:	630a      	str	r2, [r1, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006234:	079a      	lsls	r2, r3, #30
 8006236:	d506      	bpl.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006238:	492b      	ldr	r1, [pc, #172]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800623a:	482f      	ldr	r0, [pc, #188]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800623c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800623e:	4002      	ands	r2, r0
 8006240:	68e8      	ldr	r0, [r5, #12]
 8006242:	4302      	orrs	r2, r0
 8006244:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006246:	069a      	lsls	r2, r3, #26
 8006248:	d506      	bpl.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800624a:	2010      	movs	r0, #16
 800624c:	4926      	ldr	r1, [pc, #152]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800624e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006250:	4382      	bics	r2, r0
 8006252:	6928      	ldr	r0, [r5, #16]
 8006254:	4302      	orrs	r2, r0
 8006256:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006258:	039a      	lsls	r2, r3, #14
 800625a:	d506      	bpl.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800625c:	2080      	movs	r0, #128	@ 0x80
 800625e:	4922      	ldr	r1, [pc, #136]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8006260:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006262:	4382      	bics	r2, r0
 8006264:	69a8      	ldr	r0, [r5, #24]
 8006266:	4302      	orrs	r2, r0
 8006268:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800626a:	055b      	lsls	r3, r3, #21
 800626c:	d433      	bmi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800626e:	2000      	movs	r0, #0
 8006270:	e00f      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006272:	6833      	ldr	r3, [r6, #0]
 8006274:	433b      	orrs	r3, r7
 8006276:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006278:	f7fe fc00 	bl	8004a7c <HAL_GetTick>
 800627c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627e:	6833      	ldr	r3, [r6, #0]
 8006280:	423b      	tst	r3, r7
 8006282:	d1b8      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006284:	f7fe fbfa 	bl	8004a7c <HAL_GetTick>
 8006288:	9b01      	ldr	r3, [sp, #4]
 800628a:	1ac0      	subs	r0, r0, r3
 800628c:	2864      	cmp	r0, #100	@ 0x64
 800628e:	d9f6      	bls.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xc2>
          return HAL_TIMEOUT;
 8006290:	2003      	movs	r0, #3
}
 8006292:	b005      	add	sp, #20
 8006294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006296:	4013      	ands	r3, r2
 8006298:	4283      	cmp	r3, r0
 800629a:	d0b5      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 800629c:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800629e:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80062a0:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062a2:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80062a4:	0252      	lsls	r2, r2, #9
 80062a6:	4302      	orrs	r2, r0
 80062a8:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062aa:	6a22      	ldr	r2, [r4, #32]
 80062ac:	4813      	ldr	r0, [pc, #76]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x140>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062ae:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062b0:	4002      	ands	r2, r0
 80062b2:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 80062b4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062b6:	07db      	lsls	r3, r3, #31
 80062b8:	d5a6      	bpl.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 80062ba:	f7fe fbdf 	bl	8004a7c <HAL_GetTick>
 80062be:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c0:	2202      	movs	r2, #2
 80062c2:	6a23      	ldr	r3, [r4, #32]
 80062c4:	4213      	tst	r3, r2
 80062c6:	d19f      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c8:	f7fe fbd8 	bl	8004a7c <HAL_GetTick>
 80062cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80062ce:	1bc0      	subs	r0, r0, r7
 80062d0:	4298      	cmp	r0, r3
 80062d2:	d9f5      	bls.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80062d4:	e7dc      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062d6:	2140      	movs	r1, #64	@ 0x40
 80062d8:	4a03      	ldr	r2, [pc, #12]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80062da:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80062dc:	438b      	bics	r3, r1
 80062de:	6969      	ldr	r1, [r5, #20]
 80062e0:	430b      	orrs	r3, r1
 80062e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80062e4:	e7c3      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 80062e6:	46c0      	nop			@ (mov r8, r8)
 80062e8:	40021000 	.word	0x40021000
 80062ec:	40007000 	.word	0x40007000
 80062f0:	fffffcff 	.word	0xfffffcff
 80062f4:	efffffff 	.word	0xefffffff
 80062f8:	fffcffff 	.word	0xfffcffff
 80062fc:	fffeffff 	.word	0xfffeffff
 8006300:	00001388 	.word	0x00001388

08006304 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006306:	000e      	movs	r6, r1
 8006308:	b085      	sub	sp, #20
 800630a:	0015      	movs	r5, r2
 800630c:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800630e:	f7fe fbb5 	bl	8004a7c <HAL_GetTick>
 8006312:	19ad      	adds	r5, r5, r6
 8006314:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8006316:	f7fe fbb1 	bl	8004a7c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800631a:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800631c:	4b25      	ldr	r3, [pc, #148]	@ (80063b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 800631e:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	015b      	lsls	r3, r3, #5
 8006324:	0d1b      	lsrs	r3, r3, #20
 8006326:	436b      	muls	r3, r5
 8006328:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800632a:	6822      	ldr	r2, [r4, #0]
 800632c:	6893      	ldr	r3, [r2, #8]
 800632e:	0018      	movs	r0, r3
 8006330:	4038      	ands	r0, r7
 8006332:	423b      	tst	r3, r7
 8006334:	d032      	beq.n	800639c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006336:	1c73      	adds	r3, r6, #1
 8006338:	d0f8      	beq.n	800632c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800633a:	f7fe fb9f 	bl	8004a7c <HAL_GetTick>
 800633e:	9b01      	ldr	r3, [sp, #4]
 8006340:	1ac0      	subs	r0, r0, r3
 8006342:	42a8      	cmp	r0, r5
 8006344:	d32c      	bcc.n	80063a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006346:	21e0      	movs	r1, #224	@ 0xe0
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	438a      	bics	r2, r1
 800634e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006350:	2282      	movs	r2, #130	@ 0x82
 8006352:	6861      	ldr	r1, [r4, #4]
 8006354:	0052      	lsls	r2, r2, #1
 8006356:	4291      	cmp	r1, r2
 8006358:	d10c      	bne.n	8006374 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 800635a:	2180      	movs	r1, #128	@ 0x80
 800635c:	68a2      	ldr	r2, [r4, #8]
 800635e:	0209      	lsls	r1, r1, #8
 8006360:	428a      	cmp	r2, r1
 8006362:	d003      	beq.n	800636c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006364:	2180      	movs	r1, #128	@ 0x80
 8006366:	00c9      	lsls	r1, r1, #3
 8006368:	428a      	cmp	r2, r1
 800636a:	d103      	bne.n	8006374 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800636c:	2140      	movs	r1, #64	@ 0x40
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	438a      	bics	r2, r1
 8006372:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006374:	2180      	movs	r1, #128	@ 0x80
 8006376:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006378:	0189      	lsls	r1, r1, #6
 800637a:	428a      	cmp	r2, r1
 800637c:	d106      	bne.n	800638c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 800637e:	6819      	ldr	r1, [r3, #0]
 8006380:	480d      	ldr	r0, [pc, #52]	@ (80063b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8006382:	4001      	ands	r1, r0
 8006384:	6019      	str	r1, [r3, #0]
 8006386:	6819      	ldr	r1, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800638c:	0023      	movs	r3, r4
 800638e:	2201      	movs	r2, #1
 8006390:	335d      	adds	r3, #93	@ 0x5d
 8006392:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006394:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8006396:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8006398:	345c      	adds	r4, #92	@ 0x5c
 800639a:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 800639c:	b005      	add	sp, #20
 800639e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80063a0:	9b03      	ldr	r3, [sp, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d000      	beq.n	80063a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 80063a6:	002b      	movs	r3, r5
      count--;
 80063a8:	9a03      	ldr	r2, [sp, #12]
 80063aa:	001d      	movs	r5, r3
 80063ac:	3a01      	subs	r2, #1
 80063ae:	9203      	str	r2, [sp, #12]
 80063b0:	e7bb      	b.n	800632a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 80063b2:	46c0      	nop			@ (mov r8, r8)
 80063b4:	20000004 	.word	0x20000004
 80063b8:	ffffdfff 	.word	0xffffdfff

080063bc <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80063bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063be:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063c0:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80063c2:	b085      	sub	sp, #20
 80063c4:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 80063c6:	ab02      	add	r3, sp, #8
 80063c8:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80063ca:	0004      	movs	r4, r0
 80063cc:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063ce:	f7fe fb55 	bl	8004a7c <HAL_GetTick>
 80063d2:	19ed      	adds	r5, r5, r7
 80063d4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80063d6:	f7fe fb51 	bl	8004a7c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063da:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063dc:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 80063de:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063e0:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063e2:	4b2a      	ldr	r3, [pc, #168]	@ (800648c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4353      	muls	r3, r2
 80063e8:	0d1b      	lsrs	r3, r3, #20
 80063ea:	436b      	muls	r3, r5
 80063ec:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063ee:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 80063f0:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 80063f2:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 80063f4:	688b      	ldr	r3, [r1, #8]
 80063f6:	0018      	movs	r0, r3
 80063f8:	4030      	ands	r0, r6
 80063fa:	4233      	tst	r3, r6
 80063fc:	d03b      	beq.n	8006476 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063fe:	23c0      	movs	r3, #192	@ 0xc0
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	429e      	cmp	r6, r3
 8006404:	d104      	bne.n	8006410 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	7b1b      	ldrb	r3, [r3, #12]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800640e:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006410:	1c7b      	adds	r3, r7, #1
 8006412:	d0ef      	beq.n	80063f4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006414:	f7fe fb32 	bl	8004a7c <HAL_GetTick>
 8006418:	9b00      	ldr	r3, [sp, #0]
 800641a:	1ac0      	subs	r0, r0, r3
 800641c:	42a8      	cmp	r0, r5
 800641e:	d32c      	bcc.n	800647a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006420:	21e0      	movs	r1, #224	@ 0xe0
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	438a      	bics	r2, r1
 8006428:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642a:	2282      	movs	r2, #130	@ 0x82
 800642c:	6861      	ldr	r1, [r4, #4]
 800642e:	0052      	lsls	r2, r2, #1
 8006430:	4291      	cmp	r1, r2
 8006432:	d10c      	bne.n	800644e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8006434:	2180      	movs	r1, #128	@ 0x80
 8006436:	68a2      	ldr	r2, [r4, #8]
 8006438:	0209      	lsls	r1, r1, #8
 800643a:	428a      	cmp	r2, r1
 800643c:	d003      	beq.n	8006446 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800643e:	2180      	movs	r1, #128	@ 0x80
 8006440:	00c9      	lsls	r1, r1, #3
 8006442:	428a      	cmp	r2, r1
 8006444:	d103      	bne.n	800644e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006446:	2140      	movs	r1, #64	@ 0x40
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	438a      	bics	r2, r1
 800644c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800644e:	2180      	movs	r1, #128	@ 0x80
 8006450:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006452:	0189      	lsls	r1, r1, #6
 8006454:	428a      	cmp	r2, r1
 8006456:	d106      	bne.n	8006466 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 8006458:	6819      	ldr	r1, [r3, #0]
 800645a:	480d      	ldr	r0, [pc, #52]	@ (8006490 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 800645c:	4001      	ands	r1, r0
 800645e:	6019      	str	r1, [r3, #0]
 8006460:	6819      	ldr	r1, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006466:	0023      	movs	r3, r4
 8006468:	2201      	movs	r2, #1
 800646a:	335d      	adds	r3, #93	@ 0x5d
 800646c:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800646e:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8006470:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8006472:	345c      	adds	r4, #92	@ 0x5c
 8006474:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8006476:	b005      	add	sp, #20
 8006478:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 800647a:	9b03      	ldr	r3, [sp, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d000      	beq.n	8006482 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 8006480:	002b      	movs	r3, r5
      count--;
 8006482:	9a03      	ldr	r2, [sp, #12]
 8006484:	001d      	movs	r5, r3
 8006486:	3a01      	subs	r2, #1
 8006488:	9203      	str	r2, [sp, #12]
 800648a:	e7b0      	b.n	80063ee <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 800648c:	20000004 	.word	0x20000004
 8006490:	ffffdfff 	.word	0xffffdfff

08006494 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006496:	2382      	movs	r3, #130	@ 0x82
{
 8006498:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800649a:	6842      	ldr	r2, [r0, #4]
{
 800649c:	0004      	movs	r4, r0
 800649e:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d10d      	bne.n	80064c2 <SPI_EndRxTransaction+0x2e>
 80064a6:	2280      	movs	r2, #128	@ 0x80
 80064a8:	6883      	ldr	r3, [r0, #8]
 80064aa:	0212      	lsls	r2, r2, #8
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064b0:	2280      	movs	r2, #128	@ 0x80
 80064b2:	00d2      	lsls	r2, r2, #3
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d104      	bne.n	80064c2 <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064b8:	2140      	movs	r1, #64	@ 0x40
 80064ba:	6822      	ldr	r2, [r4, #0]
 80064bc:	6813      	ldr	r3, [r2, #0]
 80064be:	438b      	bics	r3, r1
 80064c0:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064c2:	003a      	movs	r2, r7
 80064c4:	0031      	movs	r1, r6
 80064c6:	0020      	movs	r0, r4
 80064c8:	f7ff ff1c 	bl	8006304 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80064cc:	1e05      	subs	r5, r0, #0
 80064ce:	d005      	beq.n	80064dc <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d0:	2320      	movs	r3, #32
 80064d2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064d4:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d6:	4313      	orrs	r3, r2
 80064d8:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 80064da:	e016      	b.n	800650a <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064dc:	2382      	movs	r3, #130	@ 0x82
 80064de:	6862      	ldr	r2, [r4, #4]
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d111      	bne.n	800650a <SPI_EndRxTransaction+0x76>
 80064e6:	2280      	movs	r2, #128	@ 0x80
 80064e8:	68a3      	ldr	r3, [r4, #8]
 80064ea:	0212      	lsls	r2, r2, #8
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d003      	beq.n	80064f8 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064f0:	2280      	movs	r2, #128	@ 0x80
 80064f2:	00d2      	lsls	r2, r2, #3
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d108      	bne.n	800650a <SPI_EndRxTransaction+0x76>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064f8:	21c0      	movs	r1, #192	@ 0xc0
 80064fa:	003b      	movs	r3, r7
 80064fc:	0032      	movs	r2, r6
 80064fe:	0020      	movs	r0, r4
 8006500:	00c9      	lsls	r1, r1, #3
 8006502:	f7ff ff5b 	bl	80063bc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006506:	2800      	cmp	r0, #0
 8006508:	d1e2      	bne.n	80064d0 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 800650a:	0028      	movs	r0, r5
 800650c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800650e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800650e:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006510:	0013      	movs	r3, r2
{
 8006512:	000d      	movs	r5, r1
 8006514:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006516:	000a      	movs	r2, r1
 8006518:	21c0      	movs	r1, #192	@ 0xc0
 800651a:	0149      	lsls	r1, r1, #5
{
 800651c:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800651e:	f7ff ff4d 	bl	80063bc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006522:	2800      	cmp	r0, #0
 8006524:	d005      	beq.n	8006532 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006526:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8006528:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800652a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800652c:	4313      	orrs	r3, r2
 800652e:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8006530:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006532:	0032      	movs	r2, r6
 8006534:	0029      	movs	r1, r5
 8006536:	0020      	movs	r0, r4
 8006538:	f7ff fee4 	bl	8006304 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800653c:	2800      	cmp	r0, #0
 800653e:	d1f2      	bne.n	8006526 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006540:	21c0      	movs	r1, #192	@ 0xc0
 8006542:	0033      	movs	r3, r6
 8006544:	002a      	movs	r2, r5
 8006546:	0020      	movs	r0, r4
 8006548:	00c9      	lsls	r1, r1, #3
 800654a:	f7ff ff37 	bl	80063bc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800654e:	2800      	cmp	r0, #0
 8006550:	d0ee      	beq.n	8006530 <SPI_EndRxTxTransaction+0x22>
 8006552:	e7e8      	b.n	8006526 <SPI_EndRxTxTransaction+0x18>

08006554 <HAL_SPI_MspInit>:
}
 8006554:	4770      	bx	lr
	...

08006558 <HAL_SPI_Init>:
{
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800655c:	2001      	movs	r0, #1
  if (hspi == NULL)
 800655e:	2c00      	cmp	r4, #0
 8006560:	d067      	beq.n	8006632 <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006562:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d165      	bne.n	8006634 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006568:	2282      	movs	r2, #130	@ 0x82
 800656a:	6861      	ldr	r1, [r4, #4]
 800656c:	0052      	lsls	r2, r2, #1
 800656e:	4291      	cmp	r1, r2
 8006570:	d000      	beq.n	8006574 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006572:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006574:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006576:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006578:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800657a:	355d      	adds	r5, #93	@ 0x5d
 800657c:	782b      	ldrb	r3, [r5, #0]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d105      	bne.n	8006590 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8006584:	0023      	movs	r3, r4
 8006586:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006588:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800658a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 800658c:	f7ff ffe2 	bl	8006554 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006590:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8006592:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8006594:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8006596:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006598:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800659a:	680b      	ldr	r3, [r1, #0]
 800659c:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800659e:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 80065a0:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065a2:	00d2      	lsls	r2, r2, #3
 80065a4:	2300      	movs	r3, #0
 80065a6:	4296      	cmp	r6, r2
 80065a8:	d948      	bls.n	800663c <HAL_SPI_Init+0xe4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80065aa:	22f0      	movs	r2, #240	@ 0xf0
 80065ac:	0018      	movs	r0, r3
 80065ae:	0112      	lsls	r2, r2, #4
 80065b0:	4296      	cmp	r6, r2
 80065b2:	d000      	beq.n	80065b6 <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065b4:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065b6:	2282      	movs	r2, #130	@ 0x82
 80065b8:	2784      	movs	r7, #132	@ 0x84
 80065ba:	6863      	ldr	r3, [r4, #4]
 80065bc:	0052      	lsls	r2, r2, #1
 80065be:	4013      	ands	r3, r2
 80065c0:	68a2      	ldr	r2, [r4, #8]
 80065c2:	023f      	lsls	r7, r7, #8
 80065c4:	403a      	ands	r2, r7
 80065c6:	2702      	movs	r7, #2
 80065c8:	4313      	orrs	r3, r2
 80065ca:	6922      	ldr	r2, [r4, #16]
 80065cc:	69a5      	ldr	r5, [r4, #24]
 80065ce:	403a      	ands	r2, r7
 80065d0:	4313      	orrs	r3, r2
 80065d2:	2201      	movs	r2, #1
 80065d4:	6967      	ldr	r7, [r4, #20]
 80065d6:	4017      	ands	r7, r2
 80065d8:	433b      	orrs	r3, r7
 80065da:	2780      	movs	r7, #128	@ 0x80
 80065dc:	00bf      	lsls	r7, r7, #2
 80065de:	402f      	ands	r7, r5
 80065e0:	433b      	orrs	r3, r7
 80065e2:	69e7      	ldr	r7, [r4, #28]
 80065e4:	3237      	adds	r2, #55	@ 0x37
 80065e6:	4017      	ands	r7, r2
 80065e8:	433b      	orrs	r3, r7
 80065ea:	6a27      	ldr	r7, [r4, #32]
 80065ec:	3248      	adds	r2, #72	@ 0x48
 80065ee:	4017      	ands	r7, r2
 80065f0:	2280      	movs	r2, #128	@ 0x80
 80065f2:	433b      	orrs	r3, r7
 80065f4:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 80065f6:	0192      	lsls	r2, r2, #6
 80065f8:	4017      	ands	r7, r2
 80065fa:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80065fc:	2710      	movs	r7, #16
 80065fe:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006600:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006602:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006604:	0c2d      	lsrs	r5, r5, #16
 8006606:	403b      	ands	r3, r7
 8006608:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 800660a:	4017      	ands	r7, r2
 800660c:	433b      	orrs	r3, r7
 800660e:	27f0      	movs	r7, #240	@ 0xf0
 8006610:	013f      	lsls	r7, r7, #4
 8006612:	403e      	ands	r6, r7
 8006614:	4333      	orrs	r3, r6
 8006616:	2604      	movs	r6, #4
 8006618:	4035      	ands	r5, r6
 800661a:	432b      	orrs	r3, r5
 800661c:	4303      	orrs	r3, r0
 800661e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006620:	69cb      	ldr	r3, [r1, #28]
 8006622:	4808      	ldr	r0, [pc, #32]	@ (8006644 <HAL_SPI_Init+0xec>)
 8006624:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006626:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006628:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800662a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800662c:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800662e:	345d      	adds	r4, #93	@ 0x5d
 8006630:	7023      	strb	r3, [r4, #0]
}
 8006632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006634:	2300      	movs	r3, #0
 8006636:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006638:	6163      	str	r3, [r4, #20]
 800663a:	e79b      	b.n	8006574 <HAL_SPI_Init+0x1c>
 800663c:	2080      	movs	r0, #128	@ 0x80
 800663e:	0140      	lsls	r0, r0, #5
 8006640:	e7b6      	b.n	80065b0 <HAL_SPI_Init+0x58>
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	fffff7ff 	.word	0xfffff7ff

08006648 <HAL_SPI_Transmit>:
{
 8006648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664a:	b085      	sub	sp, #20
 800664c:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hspi);
 800664e:	0003      	movs	r3, r0
 8006650:	335c      	adds	r3, #92	@ 0x5c
{
 8006652:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 8006654:	781a      	ldrb	r2, [r3, #0]
{
 8006656:	0004      	movs	r4, r0
 8006658:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 800665a:	2702      	movs	r7, #2
 800665c:	2a01      	cmp	r2, #1
 800665e:	d100      	bne.n	8006662 <HAL_SPI_Transmit+0x1a>
 8006660:	e082      	b.n	8006768 <HAL_SPI_Transmit+0x120>
 8006662:	2201      	movs	r2, #1
 8006664:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006666:	f7fe fa09 	bl	8004a7c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800666a:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 800666c:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 800666e:	335d      	adds	r3, #93	@ 0x5d
 8006670:	781a      	ldrb	r2, [r3, #0]
 8006672:	b2d7      	uxtb	r7, r2
 8006674:	2a01      	cmp	r2, #1
 8006676:	d000      	beq.n	800667a <HAL_SPI_Transmit+0x32>
 8006678:	e0a6      	b.n	80067c8 <HAL_SPI_Transmit+0x180>
  if ((pData == NULL) || (Size == 0U))
 800667a:	2d00      	cmp	r5, #0
 800667c:	d071      	beq.n	8006762 <HAL_SPI_Transmit+0x11a>
 800667e:	2e00      	cmp	r6, #0
 8006680:	d06f      	beq.n	8006762 <HAL_SPI_Transmit+0x11a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006682:	3202      	adds	r2, #2
 8006684:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006686:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8006688:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800668a:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800668c:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800668e:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006690:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006692:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxXferCount = 0U;
 8006694:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8006696:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006698:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669a:	2280      	movs	r2, #128	@ 0x80
 800669c:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 800669e:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80066a0:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a2:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 80066a4:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a6:	4291      	cmp	r1, r2
 80066a8:	d108      	bne.n	80066bc <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 80066aa:	2140      	movs	r1, #64	@ 0x40
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	438a      	bics	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066b2:	2280      	movs	r2, #128	@ 0x80
 80066b4:	6819      	ldr	r1, [r3, #0]
 80066b6:	01d2      	lsls	r2, r2, #7
 80066b8:	430a      	orrs	r2, r1
 80066ba:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066bc:	2240      	movs	r2, #64	@ 0x40
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	4211      	tst	r1, r2
 80066c2:	d102      	bne.n	80066ca <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 80066c4:	6819      	ldr	r1, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066ca:	21e0      	movs	r1, #224	@ 0xe0
 80066cc:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ce:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066d0:	00c9      	lsls	r1, r1, #3
 80066d2:	4288      	cmp	r0, r1
 80066d4:	d94b      	bls.n	800676e <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066d6:	2a00      	cmp	r2, #0
 80066d8:	d001      	beq.n	80066de <HAL_SPI_Transmit+0x96>
 80066da:	2e01      	cmp	r6, #1
 80066dc:	d107      	bne.n	80066ee <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066de:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e0:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80066e4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e6:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066ee:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80066f0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d119      	bne.n	800672a <HAL_SPI_Transmit+0xe2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066f6:	0020      	movs	r0, r4
 80066f8:	9a01      	ldr	r2, [sp, #4]
 80066fa:	9900      	ldr	r1, [sp, #0]
 80066fc:	f7ff ff07 	bl	800650e <SPI_EndRxTxTransaction>
 8006700:	2800      	cmp	r0, #0
 8006702:	d15e      	bne.n	80067c2 <HAL_SPI_Transmit+0x17a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006704:	68a3      	ldr	r3, [r4, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800670a:	9303      	str	r3, [sp, #12]
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	9203      	str	r2, [sp, #12]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	9303      	str	r3, [sp, #12]
 8006716:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006718:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800671a:	2a00      	cmp	r2, #0
 800671c:	d121      	bne.n	8006762 <HAL_SPI_Transmit+0x11a>
    hspi->State = HAL_SPI_STATE_READY;
 800671e:	0023      	movs	r3, r4
 8006720:	2101      	movs	r1, #1
 8006722:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006724:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8006726:	7019      	strb	r1, [r3, #0]
 8006728:	e01b      	b.n	8006762 <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	6893      	ldr	r3, [r2, #8]
 800672e:	422b      	tst	r3, r5
 8006730:	d009      	beq.n	8006746 <HAL_SPI_Transmit+0xfe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006732:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006734:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006736:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006738:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800673a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800673c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800673e:	3b01      	subs	r3, #1
 8006740:	b29b      	uxth	r3, r3
 8006742:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006744:	e7d4      	b.n	80066f0 <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006746:	f7fe f999 	bl	8004a7c <HAL_GetTick>
 800674a:	9b01      	ldr	r3, [sp, #4]
 800674c:	1ac0      	subs	r0, r0, r3
 800674e:	9b00      	ldr	r3, [sp, #0]
 8006750:	4298      	cmp	r0, r3
 8006752:	d3cd      	bcc.n	80066f0 <HAL_SPI_Transmit+0xa8>
 8006754:	3301      	adds	r3, #1
 8006756:	d0cb      	beq.n	80066f0 <HAL_SPI_Transmit+0xa8>
          hspi->State = HAL_SPI_STATE_READY;
 8006758:	0023      	movs	r3, r4
 800675a:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 800675c:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 800675e:	335d      	adds	r3, #93	@ 0x5d
 8006760:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8006762:	2300      	movs	r3, #0
 8006764:	345c      	adds	r4, #92	@ 0x5c
 8006766:	7023      	strb	r3, [r4, #0]
}
 8006768:	0038      	movs	r0, r7
 800676a:	b005      	add	sp, #20
 800676c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800676e:	2a00      	cmp	r2, #0
 8006770:	d001      	beq.n	8006776 <HAL_SPI_Transmit+0x12e>
 8006772:	2e01      	cmp	r6, #1
 8006774:	d108      	bne.n	8006788 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006776:	782a      	ldrb	r2, [r5, #0]
 8006778:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800677a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800677c:	3301      	adds	r3, #1
 800677e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8006780:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006782:	3b01      	subs	r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006788:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 800678a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0b2      	beq.n	80066f6 <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	422a      	tst	r2, r5
 8006796:	d00a      	beq.n	80067ae <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006798:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800679a:	7812      	ldrb	r2, [r2, #0]
 800679c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800679e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80067a0:	3301      	adds	r3, #1
 80067a2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80067a4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80067ac:	e7ed      	b.n	800678a <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ae:	f7fe f965 	bl	8004a7c <HAL_GetTick>
 80067b2:	9b01      	ldr	r3, [sp, #4]
 80067b4:	1ac0      	subs	r0, r0, r3
 80067b6:	9b00      	ldr	r3, [sp, #0]
 80067b8:	4298      	cmp	r0, r3
 80067ba:	d3e6      	bcc.n	800678a <HAL_SPI_Transmit+0x142>
 80067bc:	3301      	adds	r3, #1
 80067be:	d0e4      	beq.n	800678a <HAL_SPI_Transmit+0x142>
 80067c0:	e7ca      	b.n	8006758 <HAL_SPI_Transmit+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067c2:	2320      	movs	r3, #32
 80067c4:	6623      	str	r3, [r4, #96]	@ 0x60
 80067c6:	e79d      	b.n	8006704 <HAL_SPI_Transmit+0xbc>
    errorcode = HAL_BUSY;
 80067c8:	2702      	movs	r7, #2
 80067ca:	e7ca      	b.n	8006762 <HAL_SPI_Transmit+0x11a>

080067cc <HAL_SPI_TransmitReceive>:
{
 80067cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ce:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80067d0:	0003      	movs	r3, r0
 80067d2:	335c      	adds	r3, #92	@ 0x5c
{
 80067d4:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80067d6:	781a      	ldrb	r2, [r3, #0]
{
 80067d8:	0004      	movs	r4, r0
 80067da:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80067dc:	2002      	movs	r0, #2
 80067de:	2a01      	cmp	r2, #1
 80067e0:	d01b      	beq.n	800681a <HAL_SPI_TransmitReceive+0x4e>
 80067e2:	2201      	movs	r2, #1
 80067e4:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80067e6:	f7fe f949 	bl	8004a7c <HAL_GetTick>
  tmp_state           = hspi->State;
 80067ea:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80067ec:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 80067ee:	335d      	adds	r3, #93	@ 0x5d
 80067f0:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80067f2:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80067f4:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d009      	beq.n	800680e <HAL_SPI_TransmitReceive+0x42>
 80067fa:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 80067fc:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	4299      	cmp	r1, r3
 8006802:	d107      	bne.n	8006814 <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006804:	68a3      	ldr	r3, [r4, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <HAL_SPI_TransmitReceive+0x48>
 800680a:	2a04      	cmp	r2, #4
 800680c:	d102      	bne.n	8006814 <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800680e:	2d00      	cmp	r5, #0
 8006810:	d104      	bne.n	800681c <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 8006812:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8006814:	2300      	movs	r3, #0
 8006816:	345c      	adds	r4, #92	@ 0x5c
 8006818:	7023      	strb	r3, [r4, #0]
}
 800681a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800681c:	2f00      	cmp	r7, #0
 800681e:	d0f8      	beq.n	8006812 <HAL_SPI_TransmitReceive+0x46>
 8006820:	2e00      	cmp	r6, #0
 8006822:	d0f6      	beq.n	8006812 <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006824:	0023      	movs	r3, r4
 8006826:	335d      	adds	r3, #93	@ 0x5d
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	2a04      	cmp	r2, #4
 800682c:	d001      	beq.n	8006832 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800682e:	2205      	movs	r2, #5
 8006830:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 8006832:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006834:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8006836:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006838:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800683a:	6427      	str	r7, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800683c:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800683e:	1da2      	adds	r2, r4, #6
 8006840:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006842:	22e0      	movs	r2, #224	@ 0xe0
 8006844:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8006846:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006848:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800684a:	63a5      	str	r5, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800684c:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 800684e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006850:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006852:	00d2      	lsls	r2, r2, #3
 8006854:	4290      	cmp	r0, r2
 8006856:	d935      	bls.n	80068c4 <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	4f60      	ldr	r7, [pc, #384]	@ (80069dc <HAL_SPI_TransmitReceive+0x210>)
 800685c:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800685e:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006860:	2240      	movs	r2, #64	@ 0x40
 8006862:	681f      	ldr	r7, [r3, #0]
 8006864:	4217      	tst	r7, r2
 8006866:	d102      	bne.n	800686e <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8006868:	681f      	ldr	r7, [r3, #0]
 800686a:	433a      	orrs	r2, r7
 800686c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800686e:	22e0      	movs	r2, #224	@ 0xe0
 8006870:	00d2      	lsls	r2, r2, #3
 8006872:	4290      	cmp	r0, r2
 8006874:	d961      	bls.n	800693a <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006876:	2900      	cmp	r1, #0
 8006878:	d001      	beq.n	800687e <HAL_SPI_TransmitReceive+0xb2>
 800687a:	2e01      	cmp	r6, #1
 800687c:	d107      	bne.n	800688e <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800687e:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006880:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006882:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006884:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006886:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8006888:	3b01      	subs	r3, #1
 800688a:	b29b      	uxth	r3, r3
 800688c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800688e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006890:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006892:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006894:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006896:	2b00      	cmp	r3, #0
 8006898:	d119      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x102>
 800689a:	0023      	movs	r3, r4
 800689c:	3308      	adds	r3, #8
 800689e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d114      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068a4:	0020      	movs	r0, r4
 80068a6:	9a01      	ldr	r2, [sp, #4]
 80068a8:	9908      	ldr	r1, [sp, #32]
 80068aa:	f7ff fe30 	bl	800650e <SPI_EndRxTxTransaction>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d000      	beq.n	80068b4 <HAL_SPI_TransmitReceive+0xe8>
 80068b2:	e08e      	b.n	80069d2 <HAL_SPI_TransmitReceive+0x206>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068b4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1ab      	bne.n	8006812 <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 80068ba:	0023      	movs	r3, r4
 80068bc:	2201      	movs	r2, #1
 80068be:	335d      	adds	r3, #93	@ 0x5d
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e7a7      	b.n	8006814 <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068c4:	2280      	movs	r2, #128	@ 0x80
 80068c6:	685f      	ldr	r7, [r3, #4]
 80068c8:	0152      	lsls	r2, r2, #5
 80068ca:	433a      	orrs	r2, r7
 80068cc:	e7c7      	b.n	800685e <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ce:	6820      	ldr	r0, [r4, #0]
 80068d0:	6883      	ldr	r3, [r0, #8]
 80068d2:	423b      	tst	r3, r7
 80068d4:	d00e      	beq.n	80068f4 <HAL_SPI_TransmitReceive+0x128>
 80068d6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <HAL_SPI_TransmitReceive+0x128>
 80068dc:	2d01      	cmp	r5, #1
 80068de:	d108      	bne.n	80068f2 <HAL_SPI_TransmitReceive+0x126>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068e0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80068e2:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e4:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068e6:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80068ea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 80068f2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068f4:	6883      	ldr	r3, [r0, #8]
 80068f6:	0019      	movs	r1, r3
 80068f8:	4031      	ands	r1, r6
 80068fa:	4233      	tst	r3, r6
 80068fc:	d00e      	beq.n	800691c <HAL_SPI_TransmitReceive+0x150>
 80068fe:	0022      	movs	r2, r4
 8006900:	3208      	adds	r2, #8
 8006902:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8006904:	2b00      	cmp	r3, #0
 8006906:	d009      	beq.n	800691c <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8006908:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800690a:	68c0      	ldr	r0, [r0, #12]
 800690c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800690e:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006910:	3302      	adds	r3, #2
 8006912:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006914:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8006916:	3b01      	subs	r3, #1
 8006918:	b29b      	uxth	r3, r3
 800691a:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800691c:	f7fe f8ae 	bl	8004a7c <HAL_GetTick>
 8006920:	9b01      	ldr	r3, [sp, #4]
 8006922:	1ac0      	subs	r0, r0, r3
 8006924:	9b08      	ldr	r3, [sp, #32]
 8006926:	4298      	cmp	r0, r3
 8006928:	d3b4      	bcc.n	8006894 <HAL_SPI_TransmitReceive+0xc8>
 800692a:	3301      	adds	r3, #1
 800692c:	d0b2      	beq.n	8006894 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 800692e:	0023      	movs	r3, r4
 8006930:	2201      	movs	r2, #1
 8006932:	335d      	adds	r3, #93	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8006934:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8006936:	701a      	strb	r2, [r3, #0]
        goto error;
 8006938:	e76c      	b.n	8006814 <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800693a:	2900      	cmp	r1, #0
 800693c:	d001      	beq.n	8006942 <HAL_SPI_TransmitReceive+0x176>
 800693e:	2e01      	cmp	r6, #1
 8006940:	d108      	bne.n	8006954 <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006942:	782a      	ldrb	r2, [r5, #0]
 8006944:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006946:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006948:	3301      	adds	r3, #1
 800694a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800694c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800694e:	3b01      	subs	r3, #1
 8006950:	b29b      	uxth	r3, r3
 8006952:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006954:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006956:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006958:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800695a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <HAL_SPI_TransmitReceive+0x19e>
 8006960:	0023      	movs	r3, r4
 8006962:	3308      	adds	r3, #8
 8006964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006966:	2b00      	cmp	r3, #0
 8006968:	d09c      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0xd8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	423a      	tst	r2, r7
 8006970:	d00f      	beq.n	8006992 <HAL_SPI_TransmitReceive+0x1c6>
 8006972:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8006974:	2a00      	cmp	r2, #0
 8006976:	d00c      	beq.n	8006992 <HAL_SPI_TransmitReceive+0x1c6>
 8006978:	2d01      	cmp	r5, #1
 800697a:	d109      	bne.n	8006990 <HAL_SPI_TransmitReceive+0x1c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800697c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800697e:	7812      	ldrb	r2, [r2, #0]
 8006980:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006982:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006984:	3301      	adds	r3, #1
 8006986:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006988:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800698a:	3b01      	subs	r3, #1
 800698c:	b29b      	uxth	r3, r3
 800698e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006990:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	0011      	movs	r1, r2
 8006998:	4031      	ands	r1, r6
 800699a:	4232      	tst	r2, r6
 800699c:	d00f      	beq.n	80069be <HAL_SPI_TransmitReceive+0x1f2>
 800699e:	0022      	movs	r2, r4
 80069a0:	3208      	adds	r2, #8
 80069a2:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d00a      	beq.n	80069be <HAL_SPI_TransmitReceive+0x1f2>
        txallowed = 1U;
 80069a8:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069aa:	7b1b      	ldrb	r3, [r3, #12]
 80069ac:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80069ae:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 80069b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069b2:	3301      	adds	r3, #1
 80069b4:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80069b6:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069be:	f7fe f85d 	bl	8004a7c <HAL_GetTick>
 80069c2:	9b01      	ldr	r3, [sp, #4]
 80069c4:	1ac0      	subs	r0, r0, r3
 80069c6:	9b08      	ldr	r3, [sp, #32]
 80069c8:	4298      	cmp	r0, r3
 80069ca:	d3c6      	bcc.n	800695a <HAL_SPI_TransmitReceive+0x18e>
 80069cc:	3301      	adds	r3, #1
 80069ce:	d0c4      	beq.n	800695a <HAL_SPI_TransmitReceive+0x18e>
 80069d0:	e7ad      	b.n	800692e <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069d2:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80069d4:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069d6:	6623      	str	r3, [r4, #96]	@ 0x60
 80069d8:	e76c      	b.n	80068b4 <HAL_SPI_TransmitReceive+0xe8>
 80069da:	46c0      	nop			@ (mov r8, r8)
 80069dc:	ffffefff 	.word	0xffffefff

080069e0 <HAL_SPI_Receive>:
{
 80069e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 80069e2:	0006      	movs	r6, r0
{
 80069e4:	b087      	sub	sp, #28
 80069e6:	9104      	str	r1, [sp, #16]
 80069e8:	9303      	str	r3, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 80069ea:	365d      	adds	r6, #93	@ 0x5d
 80069ec:	7833      	ldrb	r3, [r6, #0]
{
 80069ee:	0004      	movs	r4, r0
 80069f0:	0017      	movs	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 80069f2:	b2dd      	uxtb	r5, r3
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d000      	beq.n	80069fa <HAL_SPI_Receive+0x1a>
 80069f8:	e0aa      	b.n	8006b50 <HAL_SPI_Receive+0x170>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069fa:	3304      	adds	r3, #4
 80069fc:	6842      	ldr	r2, [r0, #4]
 80069fe:	33ff      	adds	r3, #255	@ 0xff
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d10e      	bne.n	8006a22 <HAL_SPI_Receive+0x42>
 8006a04:	6883      	ldr	r3, [r0, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <HAL_SPI_Receive+0x42>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	7033      	strb	r3, [r6, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	000a      	movs	r2, r1
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	003b      	movs	r3, r7
 8006a16:	f7ff fed9 	bl	80067cc <HAL_SPI_TransmitReceive>
 8006a1a:	0005      	movs	r5, r0
}
 8006a1c:	0028      	movs	r0, r5
 8006a1e:	b007      	add	sp, #28
 8006a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8006a22:	0023      	movs	r3, r4
 8006a24:	335c      	adds	r3, #92	@ 0x5c
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	2a01      	cmp	r2, #1
 8006a2a:	d100      	bne.n	8006a2e <HAL_SPI_Receive+0x4e>
 8006a2c:	e092      	b.n	8006b54 <HAL_SPI_Receive+0x174>
 8006a2e:	2201      	movs	r2, #1
 8006a30:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006a32:	f7fe f823 	bl	8004a7c <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8006a36:	9b04      	ldr	r3, [sp, #16]
  tickstart = HAL_GetTick();
 8006a38:	9005      	str	r0, [sp, #20]
  if ((pData == NULL) || (Size == 0U))
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d077      	beq.n	8006b2e <HAL_SPI_Receive+0x14e>
 8006a3e:	2f00      	cmp	r7, #0
 8006a40:	d075      	beq.n	8006b2e <HAL_SPI_Receive+0x14e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a42:	2304      	movs	r3, #4
 8006a44:	7033      	strb	r3, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a46:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a48:	9a04      	ldr	r2, [sp, #16]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a4a:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a4c:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006a4e:	1da2      	adds	r2, r4, #6
 8006a50:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  hspi->RxXferCount = Size;
 8006a52:	3202      	adds	r2, #2
 8006a54:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a56:	22e0      	movs	r2, #224	@ 0xe0
 8006a58:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a5a:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006a5c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006a5e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006a60:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006a62:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a64:	00d2      	lsls	r2, r2, #3
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a66:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a68:	4291      	cmp	r1, r2
 8006a6a:	d92f      	bls.n	8006acc <HAL_SPI_Receive+0xec>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	483a      	ldr	r0, [pc, #232]	@ (8006b58 <HAL_SPI_Receive+0x178>)
 8006a70:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a72:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a74:	2280      	movs	r2, #128	@ 0x80
 8006a76:	68a0      	ldr	r0, [r4, #8]
 8006a78:	0212      	lsls	r2, r2, #8
 8006a7a:	4290      	cmp	r0, r2
 8006a7c:	d107      	bne.n	8006a8e <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8006a7e:	2040      	movs	r0, #64	@ 0x40
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4382      	bics	r2, r0
 8006a84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	4834      	ldr	r0, [pc, #208]	@ (8006b5c <HAL_SPI_Receive+0x17c>)
 8006a8a:	4002      	ands	r2, r0
 8006a8c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a8e:	2240      	movs	r2, #64	@ 0x40
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	4210      	tst	r0, r2
 8006a94:	d102      	bne.n	8006a9c <HAL_SPI_Receive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	4302      	orrs	r2, r0
 8006a9a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006a9c:	23e0      	movs	r3, #224	@ 0xe0
 8006a9e:	0027      	movs	r7, r4
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	4299      	cmp	r1, r3
 8006aa6:	d925      	bls.n	8006af4 <HAL_SPI_Receive+0x114>
    while (hspi->RxXferCount > 0U)
 8006aa8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d025      	beq.n	8006afa <HAL_SPI_Receive+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006aae:	2101      	movs	r1, #1
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	420a      	tst	r2, r1
 8006ab6:	d03e      	beq.n	8006b36 <HAL_SPI_Receive+0x156>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006abc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006abe:	3302      	adds	r3, #2
 8006ac0:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006ac2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006aca:	e7ed      	b.n	8006aa8 <HAL_SPI_Receive+0xc8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006acc:	2280      	movs	r2, #128	@ 0x80
 8006ace:	6858      	ldr	r0, [r3, #4]
 8006ad0:	0152      	lsls	r2, r2, #5
 8006ad2:	4302      	orrs	r2, r0
 8006ad4:	e7cd      	b.n	8006a72 <HAL_SPI_Receive+0x92>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	420a      	tst	r2, r1
 8006ade:	d01a      	beq.n	8006b16 <HAL_SPI_Receive+0x136>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ae0:	7b1b      	ldrb	r3, [r3, #12]
 8006ae2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006ae4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ae6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ae8:	185b      	adds	r3, r3, r1
 8006aea:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006aec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8006af4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1ed      	bne.n	8006ad6 <HAL_SPI_Receive+0xf6>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006afa:	0020      	movs	r0, r4
 8006afc:	9a05      	ldr	r2, [sp, #20]
 8006afe:	9903      	ldr	r1, [sp, #12]
 8006b00:	f7ff fcc8 	bl	8006494 <SPI_EndRxTransaction>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d120      	bne.n	8006b4a <HAL_SPI_Receive+0x16a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b08:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10f      	bne.n	8006b2e <HAL_SPI_Receive+0x14e>
    hspi->State = HAL_SPI_STATE_READY;
 8006b0e:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b10:	001d      	movs	r5, r3
    hspi->State = HAL_SPI_STATE_READY;
 8006b12:	7032      	strb	r2, [r6, #0]
 8006b14:	e00b      	b.n	8006b2e <HAL_SPI_Receive+0x14e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b16:	f7fd ffb1 	bl	8004a7c <HAL_GetTick>
 8006b1a:	9b05      	ldr	r3, [sp, #20]
 8006b1c:	1ac0      	subs	r0, r0, r3
 8006b1e:	9b03      	ldr	r3, [sp, #12]
 8006b20:	4298      	cmp	r0, r3
 8006b22:	d3e7      	bcc.n	8006af4 <HAL_SPI_Receive+0x114>
 8006b24:	3301      	adds	r3, #1
 8006b26:	d0e5      	beq.n	8006af4 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8006b28:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8006b2a:	2503      	movs	r5, #3
          hspi->State = HAL_SPI_STATE_READY;
 8006b2c:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(hspi);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	345c      	adds	r4, #92	@ 0x5c
 8006b32:	7023      	strb	r3, [r4, #0]
  return errorcode;
 8006b34:	e772      	b.n	8006a1c <HAL_SPI_Receive+0x3c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b36:	f7fd ffa1 	bl	8004a7c <HAL_GetTick>
 8006b3a:	9b05      	ldr	r3, [sp, #20]
 8006b3c:	1ac0      	subs	r0, r0, r3
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	4298      	cmp	r0, r3
 8006b42:	d3b1      	bcc.n	8006aa8 <HAL_SPI_Receive+0xc8>
 8006b44:	3301      	adds	r3, #1
 8006b46:	d0af      	beq.n	8006aa8 <HAL_SPI_Receive+0xc8>
 8006b48:	e7ee      	b.n	8006b28 <HAL_SPI_Receive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b4a:	2320      	movs	r3, #32
 8006b4c:	6623      	str	r3, [r4, #96]	@ 0x60
 8006b4e:	e7db      	b.n	8006b08 <HAL_SPI_Receive+0x128>
    errorcode = HAL_BUSY;
 8006b50:	2502      	movs	r5, #2
 8006b52:	e7ec      	b.n	8006b2e <HAL_SPI_Receive+0x14e>
  __HAL_LOCK(hspi);
 8006b54:	2502      	movs	r5, #2
 8006b56:	e761      	b.n	8006a1c <HAL_SPI_Receive+0x3c>
 8006b58:	ffffefff 	.word	0xffffefff
 8006b5c:	ffffbfff 	.word	0xffffbfff

08006b60 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8006b60:	4770      	bx	lr
	...

08006b64 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8006b64:	6803      	ldr	r3, [r0, #0]
{
 8006b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b68:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8006b6a:	6858      	ldr	r0, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8006b6c:	6899      	ldr	r1, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b6e:	2501      	movs	r5, #1
 8006b70:	098a      	lsrs	r2, r1, #6
 8006b72:	0016      	movs	r6, r2
{
 8006b74:	b085      	sub	sp, #20
 8006b76:	402e      	ands	r6, r5
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b78:	422a      	tst	r2, r5
 8006b7a:	d108      	bne.n	8006b8e <HAL_SPI_IRQHandler+0x2a>
 8006b7c:	4229      	tst	r1, r5
 8006b7e:	d006      	beq.n	8006b8e <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b80:	0645      	lsls	r5, r0, #25
 8006b82:	d504      	bpl.n	8006b8e <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8006b84:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    hspi->TxISR(hspi);
 8006b86:	0020      	movs	r0, r4
 8006b88:	4798      	blx	r3
}
 8006b8a:	b005      	add	sp, #20
 8006b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006b8e:	078d      	lsls	r5, r1, #30
 8006b90:	d503      	bpl.n	8006b9a <HAL_SPI_IRQHandler+0x36>
 8006b92:	0605      	lsls	r5, r0, #24
 8006b94:	d501      	bpl.n	8006b9a <HAL_SPI_IRQHandler+0x36>
    hspi->TxISR(hspi);
 8006b96:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006b98:	e7f5      	b.n	8006b86 <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b9a:	2780      	movs	r7, #128	@ 0x80
 8006b9c:	094d      	lsrs	r5, r1, #5
 8006b9e:	007f      	lsls	r7, r7, #1
 8006ba0:	4039      	ands	r1, r7
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ba2:	432a      	orrs	r2, r5
 8006ba4:	3fff      	subs	r7, #255	@ 0xff
 8006ba6:	403a      	ands	r2, r7
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	d0ee      	beq.n	8006b8a <HAL_SPI_IRQHandler+0x26>
 8006bac:	0682      	lsls	r2, r0, #26
 8006bae:	d5ec      	bpl.n	8006b8a <HAL_SPI_IRQHandler+0x26>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bb0:	2e00      	cmp	r6, #0
 8006bb2:	d00f      	beq.n	8006bd4 <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006bb4:	0022      	movs	r2, r4
 8006bb6:	325d      	adds	r2, #93	@ 0x5d
 8006bb8:	7812      	ldrb	r2, [r2, #0]
 8006bba:	2a03      	cmp	r2, #3
 8006bbc:	d050      	beq.n	8006c60 <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8006bc2:	4332      	orrs	r2, r6
 8006bc4:	6622      	str	r2, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	9200      	str	r2, [sp, #0]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	9200      	str	r2, [sp, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	9200      	str	r2, [sp, #0]
 8006bd2:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	4215      	tst	r5, r2
 8006bd8:	d00b      	beq.n	8006bf2 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bda:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8006bdc:	432a      	orrs	r2, r5
 8006bde:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006be0:	2200      	movs	r2, #0
 8006be2:	2540      	movs	r5, #64	@ 0x40
 8006be4:	9202      	str	r2, [sp, #8]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	9202      	str	r2, [sp, #8]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	43aa      	bics	r2, r5
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006bf2:	2900      	cmp	r1, #0
 8006bf4:	d008      	beq.n	8006c08 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006bf6:	2208      	movs	r2, #8
 8006bf8:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006bfe:	2200      	movs	r2, #0
 8006c00:	9203      	str	r2, [sp, #12]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	9203      	str	r2, [sp, #12]
 8006c06:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c08:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	d0bd      	beq.n	8006b8a <HAL_SPI_IRQHandler+0x26>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006c0e:	21e0      	movs	r1, #224	@ 0xe0
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	438a      	bics	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8006c16:	0022      	movs	r2, r4
 8006c18:	39df      	subs	r1, #223	@ 0xdf
 8006c1a:	325d      	adds	r2, #93	@ 0x5d
 8006c1c:	7011      	strb	r1, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006c1e:	3102      	adds	r1, #2
 8006c20:	4208      	tst	r0, r1
 8006c22:	d025      	beq.n	8006c70 <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006c24:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8006c26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006c28:	438a      	bics	r2, r1
 8006c2a:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d009      	beq.n	8006c44 <HAL_SPI_IRQHandler+0xe0>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c30:	4b11      	ldr	r3, [pc, #68]	@ (8006c78 <HAL_SPI_IRQHandler+0x114>)
 8006c32:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c34:	f7fd ffda 	bl	8004bec <HAL_DMA_Abort_IT>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d003      	beq.n	8006c44 <HAL_SPI_IRQHandler+0xe0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c3c:	2340      	movs	r3, #64	@ 0x40
 8006c3e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006c40:	4313      	orrs	r3, r2
 8006c42:	6623      	str	r3, [r4, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006c44:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d09f      	beq.n	8006b8a <HAL_SPI_IRQHandler+0x26>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c78 <HAL_SPI_IRQHandler+0x114>)
 8006c4c:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c4e:	f7fd ffcd 	bl	8004bec <HAL_DMA_Abort_IT>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d099      	beq.n	8006b8a <HAL_SPI_IRQHandler+0x26>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c56:	2340      	movs	r3, #64	@ 0x40
 8006c58:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	6623      	str	r3, [r4, #96]	@ 0x60
 8006c5e:	e794      	b.n	8006b8a <HAL_SPI_IRQHandler+0x26>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c60:	2200      	movs	r2, #0
 8006c62:	9201      	str	r2, [sp, #4]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	9201      	str	r2, [sp, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	9b01      	ldr	r3, [sp, #4]
        return;
 8006c6e:	e78c      	b.n	8006b8a <HAL_SPI_IRQHandler+0x26>
        HAL_SPI_ErrorCallback(hspi);
 8006c70:	0020      	movs	r0, r4
 8006c72:	f7ff ff75 	bl	8006b60 <HAL_SPI_ErrorCallback>
 8006c76:	e788      	b.n	8006b8a <HAL_SPI_IRQHandler+0x26>
 8006c78:	08006c7d 	.word	0x08006c7d

08006c7c <SPI_DMAAbortOnError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c7c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	0002      	movs	r2, r0
{
 8006c82:	b510      	push	{r4, lr}
  hspi->RxXferCount = 0U;
 8006c84:	3208      	adds	r2, #8
 8006c86:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006c88:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8006c8a:	f7ff ff69 	bl	8006b60 <HAL_SPI_ErrorCallback>
}
 8006c8e:	bd10      	pop	{r4, pc}

08006c90 <HAL_SPI_GetState>:
  return hspi->State;
 8006c90:	305d      	adds	r0, #93	@ 0x5d
 8006c92:	7800      	ldrb	r0, [r0, #0]
 8006c94:	b2c0      	uxtb	r0, r0
}
 8006c96:	4770      	bx	lr

08006c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c98:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9a:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8006c9c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9e:	6a02      	ldr	r2, [r0, #32]
 8006ca0:	43a2      	bics	r2, r4
 8006ca2:	6202      	str	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ca4:	2273      	movs	r2, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 8006ca6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006ca8:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006caa:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cac:	680a      	ldr	r2, [r1, #0]
 8006cae:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cb4:	688a      	ldr	r2, [r1, #8]
 8006cb6:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8006cf4 <TIM_OC1_SetConfig+0x5c>)
 8006cba:	4290      	cmp	r0, r2
 8006cbc:	d008      	beq.n	8006cd0 <TIM_OC1_SetConfig+0x38>
 8006cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8006cf8 <TIM_OC1_SetConfig+0x60>)
 8006cc0:	4290      	cmp	r0, r2
 8006cc2:	d005      	beq.n	8006cd0 <TIM_OC1_SetConfig+0x38>
 8006cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8006cfc <TIM_OC1_SetConfig+0x64>)
 8006cc6:	4290      	cmp	r0, r2
 8006cc8:	d002      	beq.n	8006cd0 <TIM_OC1_SetConfig+0x38>
 8006cca:	4a0d      	ldr	r2, [pc, #52]	@ (8006d00 <TIM_OC1_SetConfig+0x68>)
 8006ccc:	4290      	cmp	r0, r2
 8006cce:	d10b      	bne.n	8006ce8 <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cd4:	68ca      	ldr	r2, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cd6:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8006cd8:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cda:	2204      	movs	r2, #4
 8006cdc:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cde:	4a09      	ldr	r2, [pc, #36]	@ (8006d04 <TIM_OC1_SetConfig+0x6c>)
 8006ce0:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ce2:	694c      	ldr	r4, [r1, #20]
 8006ce4:	4334      	orrs	r4, r6
 8006ce6:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ce8:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006cea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006cec:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8006cee:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf0:	6203      	str	r3, [r0, #32]
}
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	40012c00 	.word	0x40012c00
 8006cf8:	40014000 	.word	0x40014000
 8006cfc:	40014400 	.word	0x40014400
 8006d00:	40014800 	.word	0x40014800
 8006d04:	fffffcff 	.word	0xfffffcff

08006d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d0a:	4a18      	ldr	r2, [pc, #96]	@ (8006d6c <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 8006d0c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d0e:	6a03      	ldr	r3, [r0, #32]
 8006d10:	4013      	ands	r3, r2
 8006d12:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d14:	2373      	movs	r3, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 8006d16:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8006d18:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d1a:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d1c:	680b      	ldr	r3, [r1, #0]
 8006d1e:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d20:	4b13      	ldr	r3, [pc, #76]	@ (8006d70 <TIM_OC3_SetConfig+0x68>)
 8006d22:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d24:	688b      	ldr	r3, [r1, #8]
 8006d26:	021b      	lsls	r3, r3, #8
 8006d28:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d2a:	4d12      	ldr	r5, [pc, #72]	@ (8006d74 <TIM_OC3_SetConfig+0x6c>)
 8006d2c:	42a8      	cmp	r0, r5
 8006d2e:	d10e      	bne.n	8006d4e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d30:	4d11      	ldr	r5, [pc, #68]	@ (8006d78 <TIM_OC3_SetConfig+0x70>)
 8006d32:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d34:	68cb      	ldr	r3, [r1, #12]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d3a:	4d10      	ldr	r5, [pc, #64]	@ (8006d7c <TIM_OC3_SetConfig+0x74>)
 8006d3c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d3e:	4d10      	ldr	r5, [pc, #64]	@ (8006d80 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d40:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d42:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d44:	694a      	ldr	r2, [r1, #20]
 8006d46:	4332      	orrs	r2, r6
 8006d48:	0112      	lsls	r2, r2, #4
 8006d4a:	432a      	orrs	r2, r5
 8006d4c:	e008      	b.n	8006d60 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8006d84 <TIM_OC3_SetConfig+0x7c>)
 8006d50:	42a8      	cmp	r0, r5
 8006d52:	d0f4      	beq.n	8006d3e <TIM_OC3_SetConfig+0x36>
 8006d54:	4d0c      	ldr	r5, [pc, #48]	@ (8006d88 <TIM_OC3_SetConfig+0x80>)
 8006d56:	42a8      	cmp	r0, r5
 8006d58:	d0f1      	beq.n	8006d3e <TIM_OC3_SetConfig+0x36>
 8006d5a:	4d0c      	ldr	r5, [pc, #48]	@ (8006d8c <TIM_OC3_SetConfig+0x84>)
 8006d5c:	42a8      	cmp	r0, r5
 8006d5e:	d0ee      	beq.n	8006d3e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d60:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d62:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006d64:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006d66:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d68:	6203      	str	r3, [r0, #32]
}
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
 8006d6c:	fffffeff 	.word	0xfffffeff
 8006d70:	fffffdff 	.word	0xfffffdff
 8006d74:	40012c00 	.word	0x40012c00
 8006d78:	fffff7ff 	.word	0xfffff7ff
 8006d7c:	fffffbff 	.word	0xfffffbff
 8006d80:	ffffcfff 	.word	0xffffcfff
 8006d84:	40014000 	.word	0x40014000
 8006d88:	40014400 	.word	0x40014400
 8006d8c:	40014800 	.word	0x40014800

08006d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d92:	4a14      	ldr	r2, [pc, #80]	@ (8006de4 <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 8006d94:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d98:	4d13      	ldr	r5, [pc, #76]	@ (8006de8 <TIM_OC4_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006d9e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8006da0:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006da2:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da4:	680d      	ldr	r5, [r1, #0]
 8006da6:	022d      	lsls	r5, r5, #8
 8006da8:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006daa:	4a10      	ldr	r2, [pc, #64]	@ (8006dec <TIM_OC4_SetConfig+0x5c>)
 8006dac:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dae:	688a      	ldr	r2, [r1, #8]
 8006db0:	0312      	lsls	r2, r2, #12
 8006db2:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db4:	4c0e      	ldr	r4, [pc, #56]	@ (8006df0 <TIM_OC4_SetConfig+0x60>)
 8006db6:	42a0      	cmp	r0, r4
 8006db8:	d008      	beq.n	8006dcc <TIM_OC4_SetConfig+0x3c>
 8006dba:	4c0e      	ldr	r4, [pc, #56]	@ (8006df4 <TIM_OC4_SetConfig+0x64>)
 8006dbc:	42a0      	cmp	r0, r4
 8006dbe:	d005      	beq.n	8006dcc <TIM_OC4_SetConfig+0x3c>
 8006dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8006df8 <TIM_OC4_SetConfig+0x68>)
 8006dc2:	42a0      	cmp	r0, r4
 8006dc4:	d002      	beq.n	8006dcc <TIM_OC4_SetConfig+0x3c>
 8006dc6:	4c0d      	ldr	r4, [pc, #52]	@ (8006dfc <TIM_OC4_SetConfig+0x6c>)
 8006dc8:	42a0      	cmp	r0, r4
 8006dca:	d104      	bne.n	8006dd6 <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dcc:	4c0c      	ldr	r4, [pc, #48]	@ (8006e00 <TIM_OC4_SetConfig+0x70>)
 8006dce:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dd0:	694b      	ldr	r3, [r1, #20]
 8006dd2:	019b      	lsls	r3, r3, #6
 8006dd4:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd6:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dd8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006dda:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006ddc:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dde:	6202      	str	r2, [r0, #32]
}
 8006de0:	bd30      	pop	{r4, r5, pc}
 8006de2:	46c0      	nop			@ (mov r8, r8)
 8006de4:	ffffefff 	.word	0xffffefff
 8006de8:	ffff8cff 	.word	0xffff8cff
 8006dec:	ffffdfff 	.word	0xffffdfff
 8006df0:	40012c00 	.word	0x40012c00
 8006df4:	40014000 	.word	0x40014000
 8006df8:	40014400 	.word	0x40014400
 8006dfc:	40014800 	.word	0x40014800
 8006e00:	ffffbfff 	.word	0xffffbfff

08006e04 <TIM_Base_SetConfig>:
{
 8006e04:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e06:	4c1f      	ldr	r4, [pc, #124]	@ (8006e84 <TIM_Base_SetConfig+0x80>)
  tmpcr1 = TIMx->CR1;
 8006e08:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e0a:	42a0      	cmp	r0, r4
 8006e0c:	d006      	beq.n	8006e1c <TIM_Base_SetConfig+0x18>
 8006e0e:	2280      	movs	r2, #128	@ 0x80
 8006e10:	05d2      	lsls	r2, r2, #23
 8006e12:	4290      	cmp	r0, r2
 8006e14:	d002      	beq.n	8006e1c <TIM_Base_SetConfig+0x18>
 8006e16:	4a1c      	ldr	r2, [pc, #112]	@ (8006e88 <TIM_Base_SetConfig+0x84>)
 8006e18:	4290      	cmp	r0, r2
 8006e1a:	d108      	bne.n	8006e2e <TIM_Base_SetConfig+0x2a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e1c:	2270      	movs	r2, #112	@ 0x70
 8006e1e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8006e20:	684a      	ldr	r2, [r1, #4]
 8006e22:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e24:	4a19      	ldr	r2, [pc, #100]	@ (8006e8c <TIM_Base_SetConfig+0x88>)
 8006e26:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e28:	68cb      	ldr	r3, [r1, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	e00b      	b.n	8006e46 <TIM_Base_SetConfig+0x42>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e2e:	4a18      	ldr	r2, [pc, #96]	@ (8006e90 <TIM_Base_SetConfig+0x8c>)
 8006e30:	4290      	cmp	r0, r2
 8006e32:	d0f7      	beq.n	8006e24 <TIM_Base_SetConfig+0x20>
 8006e34:	4a17      	ldr	r2, [pc, #92]	@ (8006e94 <TIM_Base_SetConfig+0x90>)
 8006e36:	4290      	cmp	r0, r2
 8006e38:	d0f4      	beq.n	8006e24 <TIM_Base_SetConfig+0x20>
 8006e3a:	4a17      	ldr	r2, [pc, #92]	@ (8006e98 <TIM_Base_SetConfig+0x94>)
 8006e3c:	4290      	cmp	r0, r2
 8006e3e:	d0f1      	beq.n	8006e24 <TIM_Base_SetConfig+0x20>
 8006e40:	4a16      	ldr	r2, [pc, #88]	@ (8006e9c <TIM_Base_SetConfig+0x98>)
 8006e42:	4290      	cmp	r0, r2
 8006e44:	d0ee      	beq.n	8006e24 <TIM_Base_SetConfig+0x20>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e46:	2280      	movs	r2, #128	@ 0x80
 8006e48:	4393      	bics	r3, r2
 8006e4a:	694a      	ldr	r2, [r1, #20]
 8006e4c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e50:	688b      	ldr	r3, [r1, #8]
 8006e52:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e54:	680b      	ldr	r3, [r1, #0]
 8006e56:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e58:	42a0      	cmp	r0, r4
 8006e5a:	d008      	beq.n	8006e6e <TIM_Base_SetConfig+0x6a>
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <TIM_Base_SetConfig+0x90>)
 8006e5e:	4298      	cmp	r0, r3
 8006e60:	d005      	beq.n	8006e6e <TIM_Base_SetConfig+0x6a>
 8006e62:	4b0d      	ldr	r3, [pc, #52]	@ (8006e98 <TIM_Base_SetConfig+0x94>)
 8006e64:	4298      	cmp	r0, r3
 8006e66:	d002      	beq.n	8006e6e <TIM_Base_SetConfig+0x6a>
 8006e68:	4b0c      	ldr	r3, [pc, #48]	@ (8006e9c <TIM_Base_SetConfig+0x98>)
 8006e6a:	4298      	cmp	r0, r3
 8006e6c:	d101      	bne.n	8006e72 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8006e6e:	690b      	ldr	r3, [r1, #16]
 8006e70:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006e72:	2201      	movs	r2, #1
 8006e74:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e76:	6903      	ldr	r3, [r0, #16]
 8006e78:	4213      	tst	r3, r2
 8006e7a:	d002      	beq.n	8006e82 <TIM_Base_SetConfig+0x7e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e7c:	6903      	ldr	r3, [r0, #16]
 8006e7e:	4393      	bics	r3, r2
 8006e80:	6103      	str	r3, [r0, #16]
}
 8006e82:	bd10      	pop	{r4, pc}
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40000400 	.word	0x40000400
 8006e8c:	fffffcff 	.word	0xfffffcff
 8006e90:	40002000 	.word	0x40002000
 8006e94:	40014000 	.word	0x40014000
 8006e98:	40014400 	.word	0x40014400
 8006e9c:	40014800 	.word	0x40014800

08006ea0 <HAL_TIM_PWM_Init>:
{
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006ea4:	2001      	movs	r0, #1
  if (htim == NULL)
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	d021      	beq.n	8006eee <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006eaa:	0025      	movs	r5, r4
 8006eac:	353d      	adds	r5, #61	@ 0x3d
 8006eae:	782b      	ldrb	r3, [r5, #0]
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d105      	bne.n	8006ec2 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8006eb6:	0023      	movs	r3, r4
 8006eb8:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006eba:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8006ebc:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8006ebe:	f7fa fae9 	bl	8001494 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec6:	6820      	ldr	r0, [r4, #0]
 8006ec8:	1d21      	adds	r1, r4, #4
 8006eca:	f7ff ff9b 	bl	8006e04 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ece:	0022      	movs	r2, r4
 8006ed0:	2301      	movs	r3, #1
  return HAL_OK;
 8006ed2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed4:	3246      	adds	r2, #70	@ 0x46
 8006ed6:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed8:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eda:	3a08      	subs	r2, #8
 8006edc:	7013      	strb	r3, [r2, #0]
 8006ede:	7053      	strb	r3, [r2, #1]
 8006ee0:	7093      	strb	r3, [r2, #2]
 8006ee2:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee4:	7113      	strb	r3, [r2, #4]
 8006ee6:	7153      	strb	r3, [r2, #5]
 8006ee8:	7193      	strb	r3, [r2, #6]
 8006eea:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006eec:	702b      	strb	r3, [r5, #0]
}
 8006eee:	bd70      	pop	{r4, r5, r6, pc}

08006ef0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ef0:	2210      	movs	r2, #16
{
 8006ef2:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8006ef4:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ef6:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ef8:	4c17      	ldr	r4, [pc, #92]	@ (8006f58 <TIM_OC2_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006efa:	4393      	bics	r3, r2
 8006efc:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006efe:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006f00:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f02:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f04:	680c      	ldr	r4, [r1, #0]
 8006f06:	0224      	lsls	r4, r4, #8
 8006f08:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8006f0a:	2320      	movs	r3, #32
 8006f0c:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f0e:	688b      	ldr	r3, [r1, #8]
 8006f10:	011b      	lsls	r3, r3, #4
 8006f12:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f14:	4d11      	ldr	r5, [pc, #68]	@ (8006f5c <TIM_OC2_SetConfig+0x6c>)
 8006f16:	42a8      	cmp	r0, r5
 8006f18:	d10f      	bne.n	8006f3a <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f1a:	2580      	movs	r5, #128	@ 0x80
 8006f1c:	43ab      	bics	r3, r5
 8006f1e:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f20:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f22:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f28:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f2a:	4d0d      	ldr	r5, [pc, #52]	@ (8006f60 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f2c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f2e:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f30:	694a      	ldr	r2, [r1, #20]
 8006f32:	4332      	orrs	r2, r6
 8006f34:	0092      	lsls	r2, r2, #2
 8006f36:	432a      	orrs	r2, r5
 8006f38:	e008      	b.n	8006f4c <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3a:	4d0a      	ldr	r5, [pc, #40]	@ (8006f64 <TIM_OC2_SetConfig+0x74>)
 8006f3c:	42a8      	cmp	r0, r5
 8006f3e:	d0f4      	beq.n	8006f2a <TIM_OC2_SetConfig+0x3a>
 8006f40:	4d09      	ldr	r5, [pc, #36]	@ (8006f68 <TIM_OC2_SetConfig+0x78>)
 8006f42:	42a8      	cmp	r0, r5
 8006f44:	d0f1      	beq.n	8006f2a <TIM_OC2_SetConfig+0x3a>
 8006f46:	4d09      	ldr	r5, [pc, #36]	@ (8006f6c <TIM_OC2_SetConfig+0x7c>)
 8006f48:	42a8      	cmp	r0, r5
 8006f4a:	d0ee      	beq.n	8006f2a <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8006f4c:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8006f4e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006f50:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006f52:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8006f54:	6203      	str	r3, [r0, #32]
}
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
 8006f58:	ffff8cff 	.word	0xffff8cff
 8006f5c:	40012c00 	.word	0x40012c00
 8006f60:	fffff3ff 	.word	0xfffff3ff
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800

08006f70 <HAL_TIM_PWM_ConfigChannel>:
{
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8006f72:	0006      	movs	r6, r0
 8006f74:	363c      	adds	r6, #60	@ 0x3c
{
 8006f76:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8006f78:	7832      	ldrb	r2, [r6, #0]
{
 8006f7a:	0003      	movs	r3, r0
 8006f7c:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8006f7e:	2002      	movs	r0, #2
 8006f80:	2a01      	cmp	r2, #1
 8006f82:	d00a      	beq.n	8006f9a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8006f84:	3801      	subs	r0, #1
 8006f86:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 8006f88:	2d08      	cmp	r5, #8
 8006f8a:	d03f      	beq.n	800700c <HAL_TIM_PWM_ConfigChannel+0x9c>
 8006f8c:	d806      	bhi.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x2c>
 8006f8e:	2d00      	cmp	r5, #0
 8006f90:	d019      	beq.n	8006fc6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8006f92:	2d04      	cmp	r5, #4
 8006f94:	d029      	beq.n	8006fea <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 8006f96:	2300      	movs	r3, #0
 8006f98:	7033      	strb	r3, [r6, #0]
}
 8006f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8006f9c:	2d0c      	cmp	r5, #12
 8006f9e:	d1fa      	bne.n	8006f96 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fa0:	681d      	ldr	r5, [r3, #0]
 8006fa2:	0028      	movs	r0, r5
 8006fa4:	f7ff fef4 	bl	8006d90 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fa8:	2380      	movs	r3, #128	@ 0x80
 8006faa:	69ea      	ldr	r2, [r5, #28]
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fb2:	69eb      	ldr	r3, [r5, #28]
 8006fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800702c <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	69ea      	ldr	r2, [r5, #28]
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	61eb      	str	r3, [r5, #28]
      break;
 8006fc4:	e00f      	b.n	8006fe6 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fc6:	681d      	ldr	r5, [r3, #0]
 8006fc8:	0028      	movs	r0, r5
 8006fca:	f7ff fe65 	bl	8006c98 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fce:	2308      	movs	r3, #8
 8006fd0:	69aa      	ldr	r2, [r5, #24]
 8006fd2:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fd4:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fd6:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fd8:	69ab      	ldr	r3, [r5, #24]
 8006fda:	4393      	bics	r3, r2
 8006fdc:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fde:	69ab      	ldr	r3, [r5, #24]
 8006fe0:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e7d5      	b.n	8006f96 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fea:	681d      	ldr	r5, [r3, #0]
 8006fec:	0028      	movs	r0, r5
 8006fee:	f7ff ff7f 	bl	8006ef0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ff2:	2380      	movs	r3, #128	@ 0x80
 8006ff4:	69aa      	ldr	r2, [r5, #24]
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ffc:	69ab      	ldr	r3, [r5, #24]
 8006ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800702c <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8007000:	4013      	ands	r3, r2
 8007002:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007004:	6923      	ldr	r3, [r4, #16]
 8007006:	69aa      	ldr	r2, [r5, #24]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	e7ea      	b.n	8006fe2 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800700c:	681f      	ldr	r7, [r3, #0]
 800700e:	0038      	movs	r0, r7
 8007010:	f7ff fe7a 	bl	8006d08 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007014:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	431d      	orrs	r5, r3
 800701a:	61fd      	str	r5, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4393      	bics	r3, r2
 8007020:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	6922      	ldr	r2, [r4, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	61fb      	str	r3, [r7, #28]
      break;
 800702a:	e7dc      	b.n	8006fe6 <HAL_TIM_PWM_ConfigChannel+0x76>
 800702c:	fffffbff 	.word	0xfffffbff

08007030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007030:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007032:	0004      	movs	r4, r0
 8007034:	2202      	movs	r2, #2
 8007036:	343c      	adds	r4, #60	@ 0x3c
 8007038:	7825      	ldrb	r5, [r4, #0]
{
 800703a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800703c:	0010      	movs	r0, r2
 800703e:	2d01      	cmp	r5, #1
 8007040:	d020      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007042:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007044:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8007046:	353d      	adds	r5, #61	@ 0x3d
 8007048:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800704e:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007050:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007052:	680e      	ldr	r6, [r1, #0]
 8007054:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007056:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007058:	480b      	ldr	r0, [pc, #44]	@ (8007088 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800705a:	4283      	cmp	r3, r0
 800705c:	d009      	beq.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800705e:	2080      	movs	r0, #128	@ 0x80
 8007060:	05c0      	lsls	r0, r0, #23
 8007062:	4283      	cmp	r3, r0
 8007064:	d005      	beq.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8007066:	4809      	ldr	r0, [pc, #36]	@ (800708c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8007068:	4283      	cmp	r3, r0
 800706a:	d002      	beq.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800706c:	4808      	ldr	r0, [pc, #32]	@ (8007090 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800706e:	4283      	cmp	r3, r0
 8007070:	d104      	bne.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007072:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007074:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007076:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007078:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800707a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800707c:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800707e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007080:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8007082:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8007084:	bd70      	pop	{r4, r5, r6, pc}
 8007086:	46c0      	nop			@ (mov r8, r8)
 8007088:	40012c00 	.word	0x40012c00
 800708c:	40000400 	.word	0x40000400
 8007090:	40014000 	.word	0x40014000

08007094 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007094:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007096:	0004      	movs	r4, r0
 8007098:	343c      	adds	r4, #60	@ 0x3c
 800709a:	7823      	ldrb	r3, [r4, #0]
{
 800709c:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 800709e:	2002      	movs	r0, #2
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d01c      	beq.n	80070de <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070a4:	68cb      	ldr	r3, [r1, #12]
 80070a6:	480e      	ldr	r0, [pc, #56]	@ (80070e0 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070a8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070aa:	4003      	ands	r3, r0
 80070ac:	6888      	ldr	r0, [r1, #8]
 80070ae:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070b0:	480c      	ldr	r0, [pc, #48]	@ (80070e4 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 80070b2:	4003      	ands	r3, r0
 80070b4:	6848      	ldr	r0, [r1, #4]
 80070b6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070b8:	480b      	ldr	r0, [pc, #44]	@ (80070e8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 80070ba:	4003      	ands	r3, r0
 80070bc:	6808      	ldr	r0, [r1, #0]
 80070be:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070c0:	480a      	ldr	r0, [pc, #40]	@ (80070ec <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 80070c2:	4003      	ands	r3, r0
 80070c4:	6908      	ldr	r0, [r1, #16]
 80070c6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070c8:	4809      	ldr	r0, [pc, #36]	@ (80070f0 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 80070ca:	4003      	ands	r3, r0
 80070cc:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070ce:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070d0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070d2:	4808      	ldr	r0, [pc, #32]	@ (80070f4 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80070d4:	4003      	ands	r3, r0

  __HAL_UNLOCK(htim);
 80070d6:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070d8:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80070da:	6453      	str	r3, [r2, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80070dc:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80070de:	bd10      	pop	{r4, pc}
 80070e0:	fffffcff 	.word	0xfffffcff
 80070e4:	fffffbff 	.word	0xfffffbff
 80070e8:	fffff7ff 	.word	0xfffff7ff
 80070ec:	ffffefff 	.word	0xffffefff
 80070f0:	ffffdfff 	.word	0xffffdfff
 80070f4:	ffffbfff 	.word	0xffffbfff

080070f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070f8:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070fe:	2201      	movs	r2, #1
 8007100:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007104:	6801      	ldr	r1, [r0, #0]
 8007106:	4d12      	ldr	r5, [pc, #72]	@ (8007150 <UART_EndRxTransfer+0x58>)
 8007108:	680b      	ldr	r3, [r1, #0]
 800710a:	402b      	ands	r3, r5
 800710c:	600b      	str	r3, [r1, #0]
 800710e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007112:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007116:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711a:	6801      	ldr	r1, [r0, #0]
 800711c:	688b      	ldr	r3, [r1, #8]
 800711e:	4393      	bics	r3, r2
 8007120:	608b      	str	r3, [r1, #8]
 8007122:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007126:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007128:	4293      	cmp	r3, r2
 800712a:	d10a      	bne.n	8007142 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800712c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007130:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007134:	2410      	movs	r4, #16
 8007136:	6802      	ldr	r2, [r0, #0]
 8007138:	6813      	ldr	r3, [r2, #0]
 800713a:	43a3      	bics	r3, r4
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007142:	2220      	movs	r2, #32
 8007144:	1d03      	adds	r3, r0, #4
 8007146:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007148:	2300      	movs	r3, #0
 800714a:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800714c:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800714e:	bd30      	pop	{r4, r5, pc}
 8007150:	fffffedf 	.word	0xfffffedf

08007154 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8007154:	4770      	bx	lr

08007156 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007156:	4770      	bx	lr

08007158 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007158:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	0002      	movs	r2, r0
{
 800715e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8007160:	325a      	adds	r2, #90	@ 0x5a
 8007162:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8007164:	3a08      	subs	r2, #8
 8007166:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007168:	f7ff fff5 	bl	8007156 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800716c:	bd10      	pop	{r4, pc}

0800716e <HAL_UARTEx_RxEventCallback>:
}
 800716e:	4770      	bx	lr

08007170 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007170:	6802      	ldr	r2, [r0, #0]
{
 8007172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007174:	69d3      	ldr	r3, [r2, #28]
{
 8007176:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007178:	48a7      	ldr	r0, [pc, #668]	@ (8007418 <HAL_UART_IRQHandler+0x2a8>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800717a:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800717c:	6896      	ldr	r6, [r2, #8]
  if (errorflags == 0U)
 800717e:	4203      	tst	r3, r0
 8007180:	d10b      	bne.n	800719a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007182:	2020      	movs	r0, #32
 8007184:	4203      	tst	r3, r0
 8007186:	d100      	bne.n	800718a <HAL_UART_IRQHandler+0x1a>
 8007188:	e080      	b.n	800728c <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800718a:	4201      	tst	r1, r0
 800718c:	d100      	bne.n	8007190 <HAL_UART_IRQHandler+0x20>
 800718e:	e07d      	b.n	800728c <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 8007190:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
      huart->TxISR(huart);
 8007192:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8007194:	2b00      	cmp	r3, #0
 8007196:	d16f      	bne.n	8007278 <HAL_UART_IRQHandler+0x108>
 8007198:	e06f      	b.n	800727a <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800719a:	2001      	movs	r0, #1
 800719c:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800719e:	4d9f      	ldr	r5, [pc, #636]	@ (800741c <HAL_UART_IRQHandler+0x2ac>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80071a0:	4007      	ands	r7, r0
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80071a2:	400d      	ands	r5, r1
 80071a4:	433d      	orrs	r5, r7
 80071a6:	d100      	bne.n	80071aa <HAL_UART_IRQHandler+0x3a>
 80071a8:	e070      	b.n	800728c <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071aa:	0025      	movs	r5, r4
 80071ac:	3508      	adds	r5, #8
 80071ae:	4203      	tst	r3, r0
 80071b0:	d005      	beq.n	80071be <HAL_UART_IRQHandler+0x4e>
 80071b2:	05ce      	lsls	r6, r1, #23
 80071b4:	d503      	bpl.n	80071be <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071b6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071b8:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 80071ba:	4330      	orrs	r0, r6
 80071bc:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071be:	2002      	movs	r0, #2
 80071c0:	4203      	tst	r3, r0
 80071c2:	d006      	beq.n	80071d2 <HAL_UART_IRQHandler+0x62>
 80071c4:	2f00      	cmp	r7, #0
 80071c6:	d004      	beq.n	80071d2 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071c8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ca:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 80071cc:	1800      	adds	r0, r0, r0
 80071ce:	4330      	orrs	r0, r6
 80071d0:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071d2:	2004      	movs	r0, #4
 80071d4:	4203      	tst	r3, r0
 80071d6:	d006      	beq.n	80071e6 <HAL_UART_IRQHandler+0x76>
 80071d8:	2f00      	cmp	r7, #0
 80071da:	d004      	beq.n	80071e6 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071dc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071de:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 80071e0:	3802      	subs	r0, #2
 80071e2:	4330      	orrs	r0, r6
 80071e4:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071e6:	2008      	movs	r0, #8
 80071e8:	4203      	tst	r3, r0
 80071ea:	d007      	beq.n	80071fc <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071ec:	2620      	movs	r6, #32
 80071ee:	400e      	ands	r6, r1
 80071f0:	433e      	orrs	r6, r7
 80071f2:	d003      	beq.n	80071fc <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071f4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071f6:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 80071f8:	4330      	orrs	r0, r6
 80071fa:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071fc:	2080      	movs	r0, #128	@ 0x80
 80071fe:	0100      	lsls	r0, r0, #4
 8007200:	4203      	tst	r3, r0
 8007202:	d006      	beq.n	8007212 <HAL_UART_IRQHandler+0xa2>
 8007204:	014e      	lsls	r6, r1, #5
 8007206:	d504      	bpl.n	8007212 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007208:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800720a:	2220      	movs	r2, #32
 800720c:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 800720e:	4302      	orrs	r2, r0
 8007210:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007212:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8007214:	2a00      	cmp	r2, #0
 8007216:	d030      	beq.n	800727a <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007218:	2220      	movs	r2, #32
 800721a:	4213      	tst	r3, r2
 800721c:	d006      	beq.n	800722c <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800721e:	4211      	tst	r1, r2
 8007220:	d004      	beq.n	800722c <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8007222:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 8007228:	0020      	movs	r0, r4
 800722a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800722c:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800722e:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007230:	2740      	movs	r7, #64	@ 0x40
 8007232:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007234:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007236:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007238:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 800723a:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800723c:	431e      	orrs	r6, r3
 800723e:	d021      	beq.n	8007284 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8007240:	f7ff ff5a 	bl	80070f8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	423b      	tst	r3, r7
 800724a:	d017      	beq.n	800727c <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800724c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007250:	2301      	movs	r3, #1
 8007252:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007256:	6822      	ldr	r2, [r4, #0]
 8007258:	6893      	ldr	r3, [r2, #8]
 800725a:	43bb      	bics	r3, r7
 800725c:	6093      	str	r3, [r2, #8]
 800725e:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8007262:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8007264:	2800      	cmp	r0, #0
 8007266:	d009      	beq.n	800727c <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007268:	4b6d      	ldr	r3, [pc, #436]	@ (8007420 <HAL_UART_IRQHandler+0x2b0>)
 800726a:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800726c:	f7fd fcbe 	bl	8004bec <HAL_DMA_Abort_IT>
 8007270:	2800      	cmp	r0, #0
 8007272:	d002      	beq.n	800727a <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007274:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8007276:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007278:	4798      	blx	r3
}
 800727a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 800727c:	0020      	movs	r0, r4
 800727e:	f7ff ff6a 	bl	8007156 <HAL_UART_ErrorCallback>
 8007282:	e7fa      	b.n	800727a <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8007284:	f7ff ff67 	bl	8007156 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007288:	67ee      	str	r6, [r5, #124]	@ 0x7c
 800728a:	e7f6      	b.n	800727a <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800728e:	2801      	cmp	r0, #1
 8007290:	d000      	beq.n	8007294 <HAL_UART_IRQHandler+0x124>
 8007292:	e095      	b.n	80073c0 <HAL_UART_IRQHandler+0x250>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007294:	2510      	movs	r5, #16
 8007296:	422b      	tst	r3, r5
 8007298:	d100      	bne.n	800729c <HAL_UART_IRQHandler+0x12c>
 800729a:	e091      	b.n	80073c0 <HAL_UART_IRQHandler+0x250>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800729c:	4229      	tst	r1, r5
 800729e:	d100      	bne.n	80072a2 <HAL_UART_IRQHandler+0x132>
 80072a0:	e08e      	b.n	80073c0 <HAL_UART_IRQHandler+0x250>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072a2:	6215      	str	r5, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a4:	6893      	ldr	r3, [r2, #8]
 80072a6:	2140      	movs	r1, #64	@ 0x40
 80072a8:	001e      	movs	r6, r3
 80072aa:	400e      	ands	r6, r1
 80072ac:	420b      	tst	r3, r1
 80072ae:	d04f      	beq.n	8007350 <HAL_UART_IRQHandler+0x1e0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072b0:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0de      	beq.n	800727a <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072bc:	0026      	movs	r6, r4
 80072be:	3658      	adds	r6, #88	@ 0x58
 80072c0:	8837      	ldrh	r7, [r6, #0]
 80072c2:	429f      	cmp	r7, r3
 80072c4:	d9d9      	bls.n	800727a <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 80072c6:	0027      	movs	r7, r4
 80072c8:	375a      	adds	r7, #90	@ 0x5a
 80072ca:	803b      	strh	r3, [r7, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072cc:	6993      	ldr	r3, [r2, #24]
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	d032      	beq.n	8007338 <HAL_UART_IRQHandler+0x1c8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d6:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	4d51      	ldr	r5, [pc, #324]	@ (8007424 <HAL_UART_IRQHandler+0x2b4>)
 80072de:	6813      	ldr	r3, [r2, #0]
 80072e0:	402b      	ands	r3, r5
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072e8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ec:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f0:	6822      	ldr	r2, [r4, #0]
 80072f2:	6893      	ldr	r3, [r2, #8]
 80072f4:	4383      	bics	r3, r0
 80072f6:	6093      	str	r3, [r2, #8]
 80072f8:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072fc:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007300:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007304:	0023      	movs	r3, r4
 8007306:	cb80      	ldmia	r3!, {r7}
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	438a      	bics	r2, r1
 800730c:	60ba      	str	r2, [r7, #8]
 800730e:	f38c 8810 	msr	PRIMASK, ip
          huart->RxState = HAL_UART_STATE_READY;
 8007312:	2220      	movs	r2, #32
 8007314:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007316:	2300      	movs	r3, #0
 8007318:	6623      	str	r3, [r4, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800731a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731e:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	3512      	adds	r5, #18
 8007326:	6813      	ldr	r3, [r2, #0]
 8007328:	35ff      	adds	r5, #255	@ 0xff
 800732a:	43ab      	bics	r3, r5
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007332:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8007334:	f7fd fc3c 	bl	8004bb0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007338:	2302      	movs	r3, #2
 800733a:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800733c:	0023      	movs	r3, r4
 800733e:	335a      	adds	r3, #90	@ 0x5a
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	8831      	ldrh	r1, [r6, #0]
 8007344:	1ac9      	subs	r1, r1, r3
 8007346:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007348:	0020      	movs	r0, r4
 800734a:	f7ff ff10 	bl	800716e <HAL_UARTEx_RxEventCallback>
 800734e:	e794      	b.n	800727a <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007350:	0023      	movs	r3, r4
 8007352:	0022      	movs	r2, r4
 8007354:	3358      	adds	r3, #88	@ 0x58
 8007356:	325a      	adds	r2, #90	@ 0x5a
 8007358:	8819      	ldrh	r1, [r3, #0]
 800735a:	8813      	ldrh	r3, [r2, #0]
      if ((huart->RxXferCount > 0U)
 800735c:	8812      	ldrh	r2, [r2, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800735e:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8007360:	2a00      	cmp	r2, #0
 8007362:	d100      	bne.n	8007366 <HAL_UART_IRQHandler+0x1f6>
 8007364:	e789      	b.n	800727a <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007366:	1ac9      	subs	r1, r1, r3
 8007368:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800736a:	2900      	cmp	r1, #0
 800736c:	d100      	bne.n	8007370 <HAL_UART_IRQHandler+0x200>
 800736e:	e784      	b.n	800727a <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007370:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007374:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007378:	6822      	ldr	r2, [r4, #0]
 800737a:	4d2b      	ldr	r5, [pc, #172]	@ (8007428 <HAL_UART_IRQHandler+0x2b8>)
 800737c:	6813      	ldr	r3, [r2, #0]
 800737e:	402b      	ands	r3, r5
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007386:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738a:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738e:	0023      	movs	r3, r4
 8007390:	cb80      	ldmia	r3!, {r7}
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	4382      	bics	r2, r0
 8007396:	60ba      	str	r2, [r7, #8]
 8007398:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 800739c:	2220      	movs	r2, #32
 800739e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a0:	6626      	str	r6, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 80073a2:	66a6      	str	r6, [r4, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073a4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a8:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ac:	2010      	movs	r0, #16
 80073ae:	6822      	ldr	r2, [r4, #0]
 80073b0:	6813      	ldr	r3, [r2, #0]
 80073b2:	4383      	bics	r3, r0
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	f386 8810 	msr	PRIMASK, r6
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073ba:	2302      	movs	r3, #2
 80073bc:	6663      	str	r3, [r4, #100]	@ 0x64
 80073be:	e7c3      	b.n	8007348 <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073c0:	2080      	movs	r0, #128	@ 0x80
 80073c2:	0340      	lsls	r0, r0, #13
 80073c4:	4203      	tst	r3, r0
 80073c6:	d006      	beq.n	80073d6 <HAL_UART_IRQHandler+0x266>
 80073c8:	0276      	lsls	r6, r6, #9
 80073ca:	d504      	bpl.n	80073d6 <HAL_UART_IRQHandler+0x266>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073cc:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80073ce:	0020      	movs	r0, r4
 80073d0:	f000 fa96 	bl	8007900 <HAL_UARTEx_WakeupCallback>
    return;
 80073d4:	e751      	b.n	800727a <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80073d6:	2280      	movs	r2, #128	@ 0x80
 80073d8:	4213      	tst	r3, r2
 80073da:	d003      	beq.n	80073e4 <HAL_UART_IRQHandler+0x274>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80073dc:	4211      	tst	r1, r2
 80073de:	d001      	beq.n	80073e4 <HAL_UART_IRQHandler+0x274>
    if (huart->TxISR != NULL)
 80073e0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80073e2:	e6d6      	b.n	8007192 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073e4:	2240      	movs	r2, #64	@ 0x40
 80073e6:	4213      	tst	r3, r2
 80073e8:	d100      	bne.n	80073ec <HAL_UART_IRQHandler+0x27c>
 80073ea:	e746      	b.n	800727a <HAL_UART_IRQHandler+0x10a>
 80073ec:	4211      	tst	r1, r2
 80073ee:	d100      	bne.n	80073f2 <HAL_UART_IRQHandler+0x282>
 80073f0:	e743      	b.n	800727a <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f6:	2301      	movs	r3, #1
 80073f8:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073fc:	6821      	ldr	r1, [r4, #0]
 80073fe:	680b      	ldr	r3, [r1, #0]
 8007400:	4393      	bics	r3, r2
 8007402:	600b      	str	r3, [r1, #0]
 8007404:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007408:	2320      	movs	r3, #32
 800740a:	67e3      	str	r3, [r4, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800740c:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800740e:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8007410:	66e3      	str	r3, [r4, #108]	@ 0x6c
  HAL_UART_TxCpltCallback(huart);
 8007412:	f7ff fe9f 	bl	8007154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007416:	e730      	b.n	800727a <HAL_UART_IRQHandler+0x10a>
 8007418:	0000080f 	.word	0x0000080f
 800741c:	04000120 	.word	0x04000120
 8007420:	08007159 	.word	0x08007159
 8007424:	fffffeff 	.word	0xfffffeff
 8007428:	fffffedf 	.word	0xfffffedf

0800742c <UART_SetConfig>:
{
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007430:	6925      	ldr	r5, [r4, #16]
 8007432:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007434:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007436:	4329      	orrs	r1, r5
 8007438:	6965      	ldr	r5, [r4, #20]
 800743a:	69c3      	ldr	r3, [r0, #28]
 800743c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800743e:	6810      	ldr	r0, [r2, #0]
 8007440:	4d51      	ldr	r5, [pc, #324]	@ (8007588 <UART_SetConfig+0x15c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007442:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007444:	4028      	ands	r0, r5
 8007446:	4301      	orrs	r1, r0
 8007448:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800744a:	6851      	ldr	r1, [r2, #4]
 800744c:	484f      	ldr	r0, [pc, #316]	@ (800758c <UART_SetConfig+0x160>)
  tmpreg |= huart->Init.OneBitSampling;
 800744e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007450:	4001      	ands	r1, r0
 8007452:	68e0      	ldr	r0, [r4, #12]
 8007454:	4301      	orrs	r1, r0
 8007456:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007458:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800745a:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800745c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800745e:	4d4c      	ldr	r5, [pc, #304]	@ (8007590 <UART_SetConfig+0x164>)
 8007460:	4028      	ands	r0, r5
 8007462:	4301      	orrs	r1, r0
 8007464:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007466:	494b      	ldr	r1, [pc, #300]	@ (8007594 <UART_SetConfig+0x168>)
 8007468:	428a      	cmp	r2, r1
 800746a:	d116      	bne.n	800749a <UART_SetConfig+0x6e>
 800746c:	2103      	movs	r1, #3
 800746e:	4a4a      	ldr	r2, [pc, #296]	@ (8007598 <UART_SetConfig+0x16c>)
 8007470:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007472:	400a      	ands	r2, r1
 8007474:	2a02      	cmp	r2, #2
 8007476:	d100      	bne.n	800747a <UART_SetConfig+0x4e>
 8007478:	e081      	b.n	800757e <UART_SetConfig+0x152>
 800747a:	428a      	cmp	r2, r1
 800747c:	d100      	bne.n	8007480 <UART_SetConfig+0x54>
 800747e:	e078      	b.n	8007572 <UART_SetConfig+0x146>
 8007480:	2a01      	cmp	r2, #1
 8007482:	d019      	beq.n	80074b8 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007484:	2280      	movs	r2, #128	@ 0x80
 8007486:	0212      	lsls	r2, r2, #8
 8007488:	4293      	cmp	r3, r2
 800748a:	d100      	bne.n	800748e <UART_SetConfig+0x62>
 800748c:	e06b      	b.n	8007566 <UART_SetConfig+0x13a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800748e:	f7fe fe85 	bl	800619c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007492:	2800      	cmp	r0, #0
 8007494:	d100      	bne.n	8007498 <UART_SetConfig+0x6c>
 8007496:	e06a      	b.n	800756e <UART_SetConfig+0x142>
 8007498:	e052      	b.n	8007540 <UART_SetConfig+0x114>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800749a:	4940      	ldr	r1, [pc, #256]	@ (800759c <UART_SetConfig+0x170>)
 800749c:	428a      	cmp	r2, r1
 800749e:	d119      	bne.n	80074d4 <UART_SetConfig+0xa8>
 80074a0:	21c0      	movs	r1, #192	@ 0xc0
 80074a2:	2080      	movs	r0, #128	@ 0x80
 80074a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007598 <UART_SetConfig+0x16c>)
 80074a6:	0289      	lsls	r1, r1, #10
 80074a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80074aa:	0280      	lsls	r0, r0, #10
 80074ac:	400a      	ands	r2, r1
 80074ae:	4282      	cmp	r2, r0
 80074b0:	d065      	beq.n	800757e <UART_SetConfig+0x152>
 80074b2:	d808      	bhi.n	80074c6 <UART_SetConfig+0x9a>
 80074b4:	2a00      	cmp	r2, #0
 80074b6:	d0e5      	beq.n	8007484 <UART_SetConfig+0x58>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074b8:	2280      	movs	r2, #128	@ 0x80
 80074ba:	0212      	lsls	r2, r2, #8
 80074bc:	4293      	cmp	r3, r2
 80074be:	d14c      	bne.n	800755a <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetSysClockFreq();
 80074c0:	f7fe fdac 	bl	800601c <HAL_RCC_GetSysClockFreq>
 80074c4:	e051      	b.n	800756a <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074c6:	428a      	cmp	r2, r1
 80074c8:	d053      	beq.n	8007572 <UART_SetConfig+0x146>
        ret = HAL_ERROR;
 80074ca:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80074d0:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074d4:	2180      	movs	r1, #128	@ 0x80
 80074d6:	4832      	ldr	r0, [pc, #200]	@ (80075a0 <UART_SetConfig+0x174>)
 80074d8:	0209      	lsls	r1, r1, #8
 80074da:	4282      	cmp	r2, r0
 80074dc:	d040      	beq.n	8007560 <UART_SetConfig+0x134>
 80074de:	4831      	ldr	r0, [pc, #196]	@ (80075a4 <UART_SetConfig+0x178>)
 80074e0:	1812      	adds	r2, r2, r0
 80074e2:	1e50      	subs	r0, r2, #1
 80074e4:	4182      	sbcs	r2, r0
 80074e6:	0110      	lsls	r0, r2, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074e8:	428b      	cmp	r3, r1
 80074ea:	d11e      	bne.n	800752a <UART_SetConfig+0xfe>
    switch (clocksource)
 80074ec:	2808      	cmp	r0, #8
 80074ee:	d8ec      	bhi.n	80074ca <UART_SetConfig+0x9e>
 80074f0:	f7f8 fe12 	bl	8000118 <__gnu_thumb1_case_sqi>
 80074f4:	eb05eb39 	.word	0xeb05eb39
 80074f8:	ebebebe6 	.word	0xebebebe6
 80074fc:	06          	.byte	0x06
 80074fd:	00          	.byte	0x00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074fe:	4b2a      	ldr	r3, [pc, #168]	@ (80075a8 <UART_SetConfig+0x17c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007500:	6861      	ldr	r1, [r4, #4]
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	0848      	lsrs	r0, r1, #1
 8007506:	1818      	adds	r0, r3, r0
 8007508:	f7f8 fe2e 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800750c:	0002      	movs	r2, r0
 800750e:	4b27      	ldr	r3, [pc, #156]	@ (80075ac <UART_SetConfig+0x180>)
 8007510:	3a10      	subs	r2, #16
 8007512:	429a      	cmp	r2, r3
 8007514:	d8d9      	bhi.n	80074ca <UART_SetConfig+0x9e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007516:	230f      	movs	r3, #15
 8007518:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800751a:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800751c:	439a      	bics	r2, r3
 800751e:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007520:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	4303      	orrs	r3, r0
 8007526:	60d3      	str	r3, [r2, #12]
 8007528:	e021      	b.n	800756e <UART_SetConfig+0x142>
    switch (clocksource)
 800752a:	2808      	cmp	r0, #8
 800752c:	d8cd      	bhi.n	80074ca <UART_SetConfig+0x9e>
 800752e:	f7f8 fdf3 	bl	8000118 <__gnu_thumb1_case_sqi>
 8007532:	ccae      	.short	0xccae
 8007534:	cc14cc24 	.word	0xcc14cc24
 8007538:	cccc      	.short	0xcccc
 800753a:	05          	.byte	0x05
 800753b:	00          	.byte	0x00
 800753c:	2080      	movs	r0, #128	@ 0x80
 800753e:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007540:	6861      	ldr	r1, [r4, #4]
 8007542:	084b      	lsrs	r3, r1, #1
 8007544:	1818      	adds	r0, r3, r0
 8007546:	f7f8 fe0f 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800754a:	0002      	movs	r2, r0
 800754c:	4b17      	ldr	r3, [pc, #92]	@ (80075ac <UART_SetConfig+0x180>)
 800754e:	3a10      	subs	r2, #16
 8007550:	429a      	cmp	r2, r3
 8007552:	d8ba      	bhi.n	80074ca <UART_SetConfig+0x9e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	60d8      	str	r0, [r3, #12]
 8007558:	e009      	b.n	800756e <UART_SetConfig+0x142>
        pclk = HAL_RCC_GetSysClockFreq();
 800755a:	f7fe fd5f 	bl	800601c <HAL_RCC_GetSysClockFreq>
        break;
 800755e:	e798      	b.n	8007492 <UART_SetConfig+0x66>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007560:	428b      	cmp	r3, r1
 8007562:	d000      	beq.n	8007566 <UART_SetConfig+0x13a>
 8007564:	e793      	b.n	800748e <UART_SetConfig+0x62>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007566:	f7fe fe19 	bl	800619c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800756a:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 800756c:	d1c8      	bne.n	8007500 <UART_SetConfig+0xd4>
        pclk = (uint32_t) HSI_VALUE;
 800756e:	2000      	movs	r0, #0
 8007570:	e7ac      	b.n	80074cc <UART_SetConfig+0xa0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007572:	2280      	movs	r2, #128	@ 0x80
 8007574:	0212      	lsls	r2, r2, #8
 8007576:	4293      	cmp	r3, r2
 8007578:	d0c1      	beq.n	80074fe <UART_SetConfig+0xd2>
        pclk = (uint32_t) HSI_VALUE;
 800757a:	480b      	ldr	r0, [pc, #44]	@ (80075a8 <UART_SetConfig+0x17c>)
 800757c:	e7e0      	b.n	8007540 <UART_SetConfig+0x114>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800757e:	2080      	movs	r0, #128	@ 0x80
 8007580:	0200      	lsls	r0, r0, #8
 8007582:	4283      	cmp	r3, r0
 8007584:	d1dc      	bne.n	8007540 <UART_SetConfig+0x114>
 8007586:	e7bb      	b.n	8007500 <UART_SetConfig+0xd4>
 8007588:	efff69f3 	.word	0xefff69f3
 800758c:	ffffcfff 	.word	0xffffcfff
 8007590:	fffff4ff 	.word	0xfffff4ff
 8007594:	40013800 	.word	0x40013800
 8007598:	40021000 	.word	0x40021000
 800759c:	40004400 	.word	0x40004400
 80075a0:	40004800 	.word	0x40004800
 80075a4:	bfffb400 	.word	0xbfffb400
 80075a8:	007a1200 	.word	0x007a1200
 80075ac:	0000ffef 	.word	0x0000ffef

080075b0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 80075b2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075b4:	071a      	lsls	r2, r3, #28
 80075b6:	d506      	bpl.n	80075c6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075b8:	6801      	ldr	r1, [r0, #0]
 80075ba:	4c28      	ldr	r4, [pc, #160]	@ (800765c <UART_AdvFeatureConfig+0xac>)
 80075bc:	684a      	ldr	r2, [r1, #4]
 80075be:	4022      	ands	r2, r4
 80075c0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80075c2:	4322      	orrs	r2, r4
 80075c4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075c6:	07da      	lsls	r2, r3, #31
 80075c8:	d506      	bpl.n	80075d8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075ca:	6801      	ldr	r1, [r0, #0]
 80075cc:	4c24      	ldr	r4, [pc, #144]	@ (8007660 <UART_AdvFeatureConfig+0xb0>)
 80075ce:	684a      	ldr	r2, [r1, #4]
 80075d0:	4022      	ands	r2, r4
 80075d2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80075d4:	4322      	orrs	r2, r4
 80075d6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075d8:	079a      	lsls	r2, r3, #30
 80075da:	d506      	bpl.n	80075ea <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075dc:	6801      	ldr	r1, [r0, #0]
 80075de:	4c21      	ldr	r4, [pc, #132]	@ (8007664 <UART_AdvFeatureConfig+0xb4>)
 80075e0:	684a      	ldr	r2, [r1, #4]
 80075e2:	4022      	ands	r2, r4
 80075e4:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80075e6:	4322      	orrs	r2, r4
 80075e8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075ea:	075a      	lsls	r2, r3, #29
 80075ec:	d506      	bpl.n	80075fc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075ee:	6801      	ldr	r1, [r0, #0]
 80075f0:	4c1d      	ldr	r4, [pc, #116]	@ (8007668 <UART_AdvFeatureConfig+0xb8>)
 80075f2:	684a      	ldr	r2, [r1, #4]
 80075f4:	4022      	ands	r2, r4
 80075f6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80075f8:	4322      	orrs	r2, r4
 80075fa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075fc:	06da      	lsls	r2, r3, #27
 80075fe:	d506      	bpl.n	800760e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007600:	6801      	ldr	r1, [r0, #0]
 8007602:	4c1a      	ldr	r4, [pc, #104]	@ (800766c <UART_AdvFeatureConfig+0xbc>)
 8007604:	688a      	ldr	r2, [r1, #8]
 8007606:	4022      	ands	r2, r4
 8007608:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800760a:	4322      	orrs	r2, r4
 800760c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800760e:	069a      	lsls	r2, r3, #26
 8007610:	d506      	bpl.n	8007620 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007612:	6801      	ldr	r1, [r0, #0]
 8007614:	4c16      	ldr	r4, [pc, #88]	@ (8007670 <UART_AdvFeatureConfig+0xc0>)
 8007616:	688a      	ldr	r2, [r1, #8]
 8007618:	4022      	ands	r2, r4
 800761a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800761c:	4322      	orrs	r2, r4
 800761e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007620:	065a      	lsls	r2, r3, #25
 8007622:	d510      	bpl.n	8007646 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007624:	6801      	ldr	r1, [r0, #0]
 8007626:	4d13      	ldr	r5, [pc, #76]	@ (8007674 <UART_AdvFeatureConfig+0xc4>)
 8007628:	684a      	ldr	r2, [r1, #4]
 800762a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800762c:	402a      	ands	r2, r5
 800762e:	4322      	orrs	r2, r4
 8007630:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007632:	2280      	movs	r2, #128	@ 0x80
 8007634:	0352      	lsls	r2, r2, #13
 8007636:	4294      	cmp	r4, r2
 8007638:	d105      	bne.n	8007646 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800763a:	684a      	ldr	r2, [r1, #4]
 800763c:	4c0e      	ldr	r4, [pc, #56]	@ (8007678 <UART_AdvFeatureConfig+0xc8>)
 800763e:	4022      	ands	r2, r4
 8007640:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007642:	4322      	orrs	r2, r4
 8007644:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007646:	061b      	lsls	r3, r3, #24
 8007648:	d506      	bpl.n	8007658 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800764a:	6802      	ldr	r2, [r0, #0]
 800764c:	490b      	ldr	r1, [pc, #44]	@ (800767c <UART_AdvFeatureConfig+0xcc>)
 800764e:	6853      	ldr	r3, [r2, #4]
 8007650:	400b      	ands	r3, r1
 8007652:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007654:	430b      	orrs	r3, r1
 8007656:	6053      	str	r3, [r2, #4]
}
 8007658:	bd30      	pop	{r4, r5, pc}
 800765a:	46c0      	nop			@ (mov r8, r8)
 800765c:	ffff7fff 	.word	0xffff7fff
 8007660:	fffdffff 	.word	0xfffdffff
 8007664:	fffeffff 	.word	0xfffeffff
 8007668:	fffbffff 	.word	0xfffbffff
 800766c:	ffffefff 	.word	0xffffefff
 8007670:	ffffdfff 	.word	0xffffdfff
 8007674:	ffefffff 	.word	0xffefffff
 8007678:	ff9fffff 	.word	0xff9fffff
 800767c:	fff7ffff 	.word	0xfff7ffff

08007680 <UART_WaitOnFlagUntilTimeout>:
{
 8007680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007682:	0004      	movs	r4, r0
 8007684:	000d      	movs	r5, r1
 8007686:	0017      	movs	r7, r2
 8007688:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	69d3      	ldr	r3, [r2, #28]
 800768e:	402b      	ands	r3, r5
 8007690:	1b5b      	subs	r3, r3, r5
 8007692:	4259      	negs	r1, r3
 8007694:	414b      	adcs	r3, r1
 8007696:	42bb      	cmp	r3, r7
 8007698:	d001      	beq.n	800769e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800769a:	2000      	movs	r0, #0
 800769c:	e025      	b.n	80076ea <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800769e:	9b08      	ldr	r3, [sp, #32]
 80076a0:	3301      	adds	r3, #1
 80076a2:	d0f3      	beq.n	800768c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a4:	f7fd f9ea 	bl	8004a7c <HAL_GetTick>
 80076a8:	9b00      	ldr	r3, [sp, #0]
 80076aa:	1ac0      	subs	r0, r0, r3
 80076ac:	9b08      	ldr	r3, [sp, #32]
 80076ae:	4298      	cmp	r0, r3
 80076b0:	d82c      	bhi.n	800770c <UART_WaitOnFlagUntilTimeout+0x8c>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d02a      	beq.n	800770c <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	0752      	lsls	r2, r2, #29
 80076bc:	d5e5      	bpl.n	800768a <UART_WaitOnFlagUntilTimeout+0xa>
 80076be:	002a      	movs	r2, r5
 80076c0:	2140      	movs	r1, #64	@ 0x40
 80076c2:	3a40      	subs	r2, #64	@ 0x40
 80076c4:	438a      	bics	r2, r1
 80076c6:	d0e0      	beq.n	800768a <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076c8:	69da      	ldr	r2, [r3, #28]
 80076ca:	2608      	movs	r6, #8
 80076cc:	0011      	movs	r1, r2
 80076ce:	4031      	ands	r1, r6
 80076d0:	9101      	str	r1, [sp, #4]
 80076d2:	4232      	tst	r2, r6
 80076d4:	d00a      	beq.n	80076ec <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 80076d6:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076d8:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 80076da:	f7ff fd0d 	bl	80070f8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076de:	19a3      	adds	r3, r4, r6
 80076e0:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80076e2:	2300      	movs	r3, #0
          return HAL_ERROR;
 80076e4:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 80076e6:	3478      	adds	r4, #120	@ 0x78
 80076e8:	7023      	strb	r3, [r4, #0]
}
 80076ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076ec:	2280      	movs	r2, #128	@ 0x80
 80076ee:	69d9      	ldr	r1, [r3, #28]
 80076f0:	0112      	lsls	r2, r2, #4
 80076f2:	4211      	tst	r1, r2
 80076f4:	d0c9      	beq.n	800768a <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076f6:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80076f8:	0020      	movs	r0, r4
 80076fa:	f7ff fcfd 	bl	80070f8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076fe:	0023      	movs	r3, r4
 8007700:	2220      	movs	r2, #32
 8007702:	3308      	adds	r3, #8
 8007704:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	3478      	adds	r4, #120	@ 0x78
 800770a:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800770c:	2003      	movs	r0, #3
 800770e:	e7ec      	b.n	80076ea <UART_WaitOnFlagUntilTimeout+0x6a>

08007710 <HAL_UART_Transmit>:
{
 8007710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007712:	b087      	sub	sp, #28
 8007714:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8007716:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8007718:	0004      	movs	r4, r0
 800771a:	000d      	movs	r5, r1
 800771c:	0017      	movs	r7, r2
    return HAL_BUSY;
 800771e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8007720:	2b20      	cmp	r3, #32
 8007722:	d138      	bne.n	8007796 <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 8007724:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8007726:	2900      	cmp	r1, #0
 8007728:	d035      	beq.n	8007796 <HAL_UART_Transmit+0x86>
 800772a:	2a00      	cmp	r2, #0
 800772c:	d033      	beq.n	8007796 <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800772e:	2380      	movs	r3, #128	@ 0x80
 8007730:	68a2      	ldr	r2, [r4, #8]
 8007732:	015b      	lsls	r3, r3, #5
 8007734:	429a      	cmp	r2, r3
 8007736:	d104      	bne.n	8007742 <HAL_UART_Transmit+0x32>
 8007738:	6923      	ldr	r3, [r4, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800773e:	4201      	tst	r1, r0
 8007740:	d129      	bne.n	8007796 <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007742:	0023      	movs	r3, r4
 8007744:	2600      	movs	r6, #0
 8007746:	3308      	adds	r3, #8
 8007748:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800774a:	2321      	movs	r3, #33	@ 0x21
 800774c:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800774e:	f7fd f995 	bl	8004a7c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8007752:	0023      	movs	r3, r4
 8007754:	3350      	adds	r3, #80	@ 0x50
 8007756:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8007758:	3302      	adds	r3, #2
 800775a:	9303      	str	r3, [sp, #12]
 800775c:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800775e:	2380      	movs	r3, #128	@ 0x80
 8007760:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8007762:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007764:	015b      	lsls	r3, r3, #5
 8007766:	429a      	cmp	r2, r3
 8007768:	d104      	bne.n	8007774 <HAL_UART_Transmit+0x64>
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	42b3      	cmp	r3, r6
 800776e:	d101      	bne.n	8007774 <HAL_UART_Transmit+0x64>
      pdata16bits = (const uint16_t *) pData;
 8007770:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8007772:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8007774:	0023      	movs	r3, r4
 8007776:	3352      	adds	r3, #82	@ 0x52
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	b29a      	uxth	r2, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10c      	bne.n	800779a <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007780:	9b05      	ldr	r3, [sp, #20]
 8007782:	2140      	movs	r1, #64	@ 0x40
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	0020      	movs	r0, r4
 8007788:	9b04      	ldr	r3, [sp, #16]
 800778a:	f7ff ff79 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 800778e:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8007790:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007792:	2800      	cmp	r0, #0
 8007794:	d10d      	bne.n	80077b2 <HAL_UART_Transmit+0xa2>
}
 8007796:	b007      	add	sp, #28
 8007798:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800779a:	9b05      	ldr	r3, [sp, #20]
 800779c:	2200      	movs	r2, #0
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	2180      	movs	r1, #128	@ 0x80
 80077a2:	0020      	movs	r0, r4
 80077a4:	9b04      	ldr	r3, [sp, #16]
 80077a6:	f7ff ff6b 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 80077ae:	2320      	movs	r3, #32
 80077b0:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 80077b2:	2003      	movs	r0, #3
 80077b4:	e7ef      	b.n	8007796 <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077b6:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80077b8:	2d00      	cmp	r5, #0
 80077ba:	d10b      	bne.n	80077d4 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077bc:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80077be:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077c0:	05db      	lsls	r3, r3, #23
 80077c2:	0ddb      	lsrs	r3, r3, #23
 80077c4:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80077c6:	9b03      	ldr	r3, [sp, #12]
 80077c8:	9a03      	ldr	r2, [sp, #12]
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	8013      	strh	r3, [r2, #0]
 80077d2:	e7cf      	b.n	8007774 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077d4:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80077d6:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077d8:	8513      	strh	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 80077da:	e7f4      	b.n	80077c6 <HAL_UART_Transmit+0xb6>

080077dc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077dc:	0003      	movs	r3, r0
{
 80077de:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e0:	2500      	movs	r5, #0
{
 80077e2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e4:	3308      	adds	r3, #8
 80077e6:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80077e8:	f7fd f948 	bl	8004a7c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077ec:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80077ee:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	071b      	lsls	r3, r3, #28
 80077f4:	d51d      	bpl.n	8007832 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077f6:	2180      	movs	r1, #128	@ 0x80
 80077f8:	4b26      	ldr	r3, [pc, #152]	@ (8007894 <UART_CheckIdleState+0xb8>)
 80077fa:	002a      	movs	r2, r5
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	0389      	lsls	r1, r1, #14
 8007800:	0003      	movs	r3, r0
 8007802:	0020      	movs	r0, r4
 8007804:	f7ff ff3c 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 8007808:	42a8      	cmp	r0, r5
 800780a:	d012      	beq.n	8007832 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800780c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007810:	2301      	movs	r3, #1
 8007812:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007816:	2080      	movs	r0, #128	@ 0x80
 8007818:	6822      	ldr	r2, [r4, #0]
 800781a:	6813      	ldr	r3, [r2, #0]
 800781c:	4383      	bics	r3, r0
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8007824:	2320      	movs	r3, #32
 8007826:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8007828:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800782a:	2300      	movs	r3, #0
 800782c:	3478      	adds	r4, #120	@ 0x78
 800782e:	7023      	strb	r3, [r4, #0]
}
 8007830:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007832:	0025      	movs	r5, r4
 8007834:	cd08      	ldmia	r5!, {r3}
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	075b      	lsls	r3, r3, #29
 800783a:	d523      	bpl.n	8007884 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800783c:	2180      	movs	r1, #128	@ 0x80
 800783e:	4b15      	ldr	r3, [pc, #84]	@ (8007894 <UART_CheckIdleState+0xb8>)
 8007840:	2200      	movs	r2, #0
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	0020      	movs	r0, r4
 8007846:	0033      	movs	r3, r6
 8007848:	03c9      	lsls	r1, r1, #15
 800784a:	f7ff ff19 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 800784e:	2800      	cmp	r0, #0
 8007850:	d018      	beq.n	8007884 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007852:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007856:	2201      	movs	r2, #1
 8007858:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800785c:	6821      	ldr	r1, [r4, #0]
 800785e:	4e0e      	ldr	r6, [pc, #56]	@ (8007898 <UART_CheckIdleState+0xbc>)
 8007860:	680b      	ldr	r3, [r1, #0]
 8007862:	4033      	ands	r3, r6
 8007864:	600b      	str	r3, [r1, #0]
 8007866:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800786e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007872:	6821      	ldr	r1, [r4, #0]
 8007874:	688b      	ldr	r3, [r1, #8]
 8007876:	4393      	bics	r3, r2
 8007878:	608b      	str	r3, [r1, #8]
 800787a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800787e:	2320      	movs	r3, #32
 8007880:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8007882:	e7d1      	b.n	8007828 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8007884:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007886:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007888:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800788a:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788c:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800788e:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8007890:	e7cb      	b.n	800782a <UART_CheckIdleState+0x4e>
 8007892:	46c0      	nop			@ (mov r8, r8)
 8007894:	01ffffff 	.word	0x01ffffff
 8007898:	fffffedf 	.word	0xfffffedf

0800789c <HAL_UART_Init>:
{
 800789c:	b510      	push	{r4, lr}
 800789e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80078a0:	d101      	bne.n	80078a6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80078a2:	2001      	movs	r0, #1
}
 80078a4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80078a6:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d104      	bne.n	80078b6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80078ac:	0002      	movs	r2, r0
 80078ae:	3278      	adds	r2, #120	@ 0x78
 80078b0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80078b2:	f7f9 fec1 	bl	8001638 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80078b6:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80078b8:	2101      	movs	r1, #1
 80078ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80078bc:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80078be:	6813      	ldr	r3, [r2, #0]
 80078c0:	438b      	bics	r3, r1
 80078c2:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80078ca:	0020      	movs	r0, r4
 80078cc:	f7ff fe70 	bl	80075b0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078d0:	0020      	movs	r0, r4
 80078d2:	f7ff fdab 	bl	800742c <UART_SetConfig>
 80078d6:	2801      	cmp	r0, #1
 80078d8:	d0e3      	beq.n	80078a2 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	4907      	ldr	r1, [pc, #28]	@ (80078fc <HAL_UART_Init+0x60>)
 80078de:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80078e0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078e4:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	438a      	bics	r2, r1
 80078ec:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80078ee:	2201      	movs	r2, #1
 80078f0:	6819      	ldr	r1, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80078f6:	f7ff ff71 	bl	80077dc <UART_CheckIdleState>
 80078fa:	e7d3      	b.n	80078a4 <HAL_UART_Init+0x8>
 80078fc:	ffffb7ff 	.word	0xffffb7ff

08007900 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007900:	4770      	bx	lr
	...

08007904 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007904:	1d82      	adds	r2, r0, #6
{
 8007906:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 8007908:	2000      	movs	r0, #0
 800790a:	87d0      	strh	r0, [r2, #62]	@ 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800790c:	4a01      	ldr	r2, [pc, #4]	@ (8007914 <USB_EnableGlobalInt+0x10>)
 800790e:	3302      	adds	r3, #2
 8007910:	87da      	strh	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
}
 8007912:	4770      	bx	lr
 8007914:	ffffbf80 	.word	0xffffbf80

08007918 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007918:	3002      	adds	r0, #2
 800791a:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 800791c:	4a02      	ldr	r2, [pc, #8]	@ (8007928 <USB_DisableGlobalInt+0x10>)
 800791e:	4013      	ands	r3, r2
 8007920:	87c3      	strh	r3, [r0, #62]	@ 0x3e

  return HAL_OK;
}
 8007922:	2000      	movs	r0, #0
 8007924:	4770      	bx	lr
 8007926:	46c0      	nop			@ (mov r8, r8)
 8007928:	0000407f 	.word	0x0000407f

0800792c <USB_DevInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800792c:	1c82      	adds	r2, r0, #2
{
 800792e:	0003      	movs	r3, r0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007930:	2101      	movs	r1, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007932:	2000      	movs	r0, #0
{
 8007934:	b082      	sub	sp, #8
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007936:	87d1      	strh	r1, [r2, #62]	@ 0x3e
  USBx->CNTR = 0U;
 8007938:	87d0      	strh	r0, [r2, #62]	@ 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800793a:	1d9a      	adds	r2, r3, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800793c:	3350      	adds	r3, #80	@ 0x50
  USBx->ISTR = 0U;
 800793e:	87d0      	strh	r0, [r2, #62]	@ 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 8007940:	8018      	strh	r0, [r3, #0]

  return HAL_OK;
}
 8007942:	b002      	add	sp, #8
 8007944:	4770      	bx	lr
	...

08007948 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800794a:	780e      	ldrb	r6, [r1, #0]
 800794c:	4a7a      	ldr	r2, [pc, #488]	@ (8007b38 <USB_ActivateEndpoint+0x1f0>)
 800794e:	00b3      	lsls	r3, r6, #2
 8007950:	18c3      	adds	r3, r0, r3
 8007952:	881c      	ldrh	r4, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8007954:	78cf      	ldrb	r7, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007956:	4014      	ands	r4, r2
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8007958:	2201      	movs	r2, #1
{
 800795a:	0005      	movs	r5, r0
      ret = HAL_ERROR;
 800795c:	9200      	str	r2, [sp, #0]
  switch (ep->type)
 800795e:	2f03      	cmp	r7, #3
 8007960:	d808      	bhi.n	8007974 <USB_ActivateEndpoint+0x2c>
 8007962:	0038      	movs	r0, r7
 8007964:	f7f8 fbe2 	bl	800012c <__gnu_thumb1_case_uqi>
 8007968:	3c3f4202 	.word	0x3c3f4202
      wEpRegVal |= USB_EP_CONTROL;
 800796c:	2280      	movs	r2, #128	@ 0x80
 800796e:	0092      	lsls	r2, r2, #2
 8007970:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8007972:	9700      	str	r7, [sp, #0]
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007974:	4a71      	ldr	r2, [pc, #452]	@ (8007b3c <USB_ActivateEndpoint+0x1f4>)
 8007976:	4314      	orrs	r4, r2
 8007978:	b2a4      	uxth	r4, r4
 800797a:	801c      	strh	r4, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800797c:	8818      	ldrh	r0, [r3, #0]
 800797e:	4c70      	ldr	r4, [pc, #448]	@ (8007b40 <USB_ActivateEndpoint+0x1f8>)
 8007980:	4020      	ands	r0, r4
 8007982:	4330      	orrs	r0, r6
 8007984:	4310      	orrs	r0, r2
 8007986:	b280      	uxth	r0, r0
 8007988:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800798a:	00f0      	lsls	r0, r6, #3
 800798c:	4684      	mov	ip, r0
  if (ep->doublebuffer == 0U)
 800798e:	7b08      	ldrb	r0, [r1, #12]
 8007990:	44ac      	add	ip, r5
 8007992:	3550      	adds	r5, #80	@ 0x50
 8007994:	9501      	str	r5, [sp, #4]
 8007996:	2800      	cmp	r0, #0
 8007998:	d000      	beq.n	800799c <USB_ActivateEndpoint+0x54>
 800799a:	e06b      	b.n	8007a74 <USB_ActivateEndpoint+0x12c>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800799c:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 800799e:	7848      	ldrb	r0, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079a0:	086d      	lsrs	r5, r5, #1
 80079a2:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d023      	beq.n	80079f0 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079a8:	2080      	movs	r0, #128	@ 0x80
 80079aa:	9901      	ldr	r1, [sp, #4]
 80079ac:	00c0      	lsls	r0, r0, #3
 80079ae:	8809      	ldrh	r1, [r1, #0]
 80079b0:	4461      	add	r1, ip
 80079b2:	1809      	adds	r1, r1, r0
 80079b4:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079b6:	8819      	ldrh	r1, [r3, #0]
 80079b8:	0649      	lsls	r1, r1, #25
 80079ba:	d504      	bpl.n	80079c6 <USB_ActivateEndpoint+0x7e>
 80079bc:	8819      	ldrh	r1, [r3, #0]
 80079be:	4021      	ands	r1, r4
 80079c0:	4c60      	ldr	r4, [pc, #384]	@ (8007b44 <USB_ActivateEndpoint+0x1fc>)
 80079c2:	4321      	orrs	r1, r4
 80079c4:	8019      	strh	r1, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079c6:	4d60      	ldr	r5, [pc, #384]	@ (8007b48 <USB_ActivateEndpoint+0x200>)
 80079c8:	2f01      	cmp	r7, #1
 80079ca:	d100      	bne.n	80079ce <USB_ActivateEndpoint+0x86>
 80079cc:	e0ae      	b.n	8007b2c <USB_ActivateEndpoint+0x1e4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079ce:	2120      	movs	r1, #32
 80079d0:	881c      	ldrh	r4, [r3, #0]
 80079d2:	402c      	ands	r4, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80079d4:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079d6:	430a      	orrs	r2, r1
 80079d8:	b292      	uxth	r2, r2
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80079da:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079dc:	801a      	strh	r2, [r3, #0]
}
 80079de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 80079e0:	22c0      	movs	r2, #192	@ 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80079e2:	00d2      	lsls	r2, r2, #3
 80079e4:	4314      	orrs	r4, r2
  switch (ep->type)
 80079e6:	2200      	movs	r2, #0
 80079e8:	9200      	str	r2, [sp, #0]
 80079ea:	e7c3      	b.n	8007974 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80079ec:	2280      	movs	r2, #128	@ 0x80
 80079ee:	e7f8      	b.n	80079e2 <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079f0:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80079f2:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079f4:	8807      	ldrh	r7, [r0, #0]
 80079f6:	4855      	ldr	r0, [pc, #340]	@ (8007b4c <USB_ActivateEndpoint+0x204>)
 80079f8:	4467      	add	r7, ip
 80079fa:	183f      	adds	r7, r7, r0
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80079fc:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079fe:	803d      	strh	r5, [r7, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007a00:	8805      	ldrh	r5, [r0, #0]
 8007a02:	4853      	ldr	r0, [pc, #332]	@ (8007b50 <USB_ActivateEndpoint+0x208>)
 8007a04:	4465      	add	r5, ip
 8007a06:	182d      	adds	r5, r5, r0
 8007a08:	882f      	ldrh	r7, [r5, #0]
 8007a0a:	05bf      	lsls	r7, r7, #22
 8007a0c:	0dbf      	lsrs	r7, r7, #22
 8007a0e:	802f      	strh	r7, [r5, #0]
 8007a10:	2900      	cmp	r1, #0
 8007a12:	d115      	bne.n	8007a40 <USB_ActivateEndpoint+0xf8>
 8007a14:	2780      	movs	r7, #128	@ 0x80
 8007a16:	8829      	ldrh	r1, [r5, #0]
 8007a18:	023f      	lsls	r7, r7, #8
 8007a1a:	4339      	orrs	r1, r7
 8007a1c:	8029      	strh	r1, [r5, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a1e:	8819      	ldrh	r1, [r3, #0]
 8007a20:	0449      	lsls	r1, r1, #17
 8007a22:	d504      	bpl.n	8007a2e <USB_ActivateEndpoint+0xe6>
 8007a24:	8819      	ldrh	r1, [r3, #0]
 8007a26:	4021      	ands	r1, r4
 8007a28:	4c4a      	ldr	r4, [pc, #296]	@ (8007b54 <USB_ActivateEndpoint+0x20c>)
 8007a2a:	4321      	orrs	r1, r4
 8007a2c:	8019      	strh	r1, [r3, #0]
      if (ep->num == 0U)
 8007a2e:	494a      	ldr	r1, [pc, #296]	@ (8007b58 <USB_ActivateEndpoint+0x210>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a30:	881c      	ldrh	r4, [r3, #0]
 8007a32:	400c      	ands	r4, r1
 8007a34:	21c0      	movs	r1, #192	@ 0xc0
      if (ep->num == 0U)
 8007a36:	2e00      	cmp	r6, #0
 8007a38:	d000      	beq.n	8007a3c <USB_ActivateEndpoint+0xf4>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007a3a:	2180      	movs	r1, #128	@ 0x80
 8007a3c:	0189      	lsls	r1, r1, #6
 8007a3e:	e7c9      	b.n	80079d4 <USB_ActivateEndpoint+0x8c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007a40:	293e      	cmp	r1, #62	@ 0x3e
 8007a42:	d808      	bhi.n	8007a56 <USB_ActivateEndpoint+0x10e>
 8007a44:	2001      	movs	r0, #1
 8007a46:	084f      	lsrs	r7, r1, #1
 8007a48:	4001      	ands	r1, r0
 8007a4a:	187f      	adds	r7, r7, r1
 8007a4c:	8829      	ldrh	r1, [r5, #0]
 8007a4e:	02bf      	lsls	r7, r7, #10
 8007a50:	4339      	orrs	r1, r7
 8007a52:	b289      	uxth	r1, r1
 8007a54:	e7e2      	b.n	8007a1c <USB_ActivateEndpoint+0xd4>
 8007a56:	201f      	movs	r0, #31
 8007a58:	094f      	lsrs	r7, r1, #5
 8007a5a:	4001      	ands	r1, r0
 8007a5c:	0008      	movs	r0, r1
 8007a5e:	4241      	negs	r1, r0
 8007a60:	4141      	adcs	r1, r0
 8007a62:	1a7f      	subs	r7, r7, r1
 8007a64:	8829      	ldrh	r1, [r5, #0]
 8007a66:	02bf      	lsls	r7, r7, #10
 8007a68:	4339      	orrs	r1, r7
 8007a6a:	4f3c      	ldr	r7, [pc, #240]	@ (8007b5c <USB_ActivateEndpoint+0x214>)
 8007a6c:	430f      	orrs	r7, r1
 8007a6e:	b2bf      	uxth	r7, r7
 8007a70:	802f      	strh	r7, [r5, #0]
 8007a72:	e7d4      	b.n	8007a1e <USB_ActivateEndpoint+0xd6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a74:	881d      	ldrh	r5, [r3, #0]
    if (ep->type == EP_TYPE_BULK)
 8007a76:	2f02      	cmp	r7, #2
 8007a78:	d13a      	bne.n	8007af0 <USB_ActivateEndpoint+0x1a8>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a7a:	4e39      	ldr	r6, [pc, #228]	@ (8007b60 <USB_ActivateEndpoint+0x218>)
 8007a7c:	4025      	ands	r5, r4
 8007a7e:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a80:	9801      	ldr	r0, [sp, #4]
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007a82:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a84:	8805      	ldrh	r5, [r0, #0]
 8007a86:	2080      	movs	r0, #128	@ 0x80
 8007a88:	890e      	ldrh	r6, [r1, #8]
 8007a8a:	4465      	add	r5, ip
 8007a8c:	00c0      	lsls	r0, r0, #3
 8007a8e:	0876      	lsrs	r6, r6, #1
 8007a90:	182d      	adds	r5, r5, r0
 8007a92:	0076      	lsls	r6, r6, #1
 8007a94:	9801      	ldr	r0, [sp, #4]
 8007a96:	802e      	strh	r6, [r5, #0]
 8007a98:	8805      	ldrh	r5, [r0, #0]
 8007a9a:	894e      	ldrh	r6, [r1, #10]
 8007a9c:	482b      	ldr	r0, [pc, #172]	@ (8007b4c <USB_ActivateEndpoint+0x204>)
 8007a9e:	4465      	add	r5, ip
 8007aa0:	0876      	lsrs	r6, r6, #1
 8007aa2:	182d      	adds	r5, r5, r0
 8007aa4:	0076      	lsls	r6, r6, #1
 8007aa6:	802e      	strh	r6, [r5, #0]
    if (ep->is_in == 0U)
 8007aa8:	7849      	ldrb	r1, [r1, #1]
 8007aaa:	4e27      	ldr	r6, [pc, #156]	@ (8007b48 <USB_ActivateEndpoint+0x200>)
 8007aac:	468c      	mov	ip, r1
 8007aae:	2180      	movs	r1, #128	@ 0x80
 8007ab0:	4660      	mov	r0, ip
 8007ab2:	4d29      	ldr	r5, [pc, #164]	@ (8007b58 <USB_ActivateEndpoint+0x210>)
 8007ab4:	01c9      	lsls	r1, r1, #7
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d11f      	bne.n	8007afa <USB_ActivateEndpoint+0x1b2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aba:	881f      	ldrh	r7, [r3, #0]
 8007abc:	420f      	tst	r7, r1
 8007abe:	d004      	beq.n	8007aca <USB_ActivateEndpoint+0x182>
 8007ac0:	8819      	ldrh	r1, [r3, #0]
 8007ac2:	4f24      	ldr	r7, [pc, #144]	@ (8007b54 <USB_ActivateEndpoint+0x20c>)
 8007ac4:	4021      	ands	r1, r4
 8007ac6:	4339      	orrs	r1, r7
 8007ac8:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007aca:	8819      	ldrh	r1, [r3, #0]
 8007acc:	0649      	lsls	r1, r1, #25
 8007ace:	d504      	bpl.n	8007ada <USB_ActivateEndpoint+0x192>
 8007ad0:	8819      	ldrh	r1, [r3, #0]
 8007ad2:	4021      	ands	r1, r4
 8007ad4:	4c1b      	ldr	r4, [pc, #108]	@ (8007b44 <USB_ActivateEndpoint+0x1fc>)
 8007ad6:	4321      	orrs	r1, r4
 8007ad8:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ada:	21c0      	movs	r1, #192	@ 0xc0
 8007adc:	881c      	ldrh	r4, [r3, #0]
 8007ade:	0189      	lsls	r1, r1, #6
 8007ae0:	402c      	ands	r4, r5
 8007ae2:	4061      	eors	r1, r4
 8007ae4:	4311      	orrs	r1, r2
 8007ae6:	b289      	uxth	r1, r1
 8007ae8:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007aea:	8819      	ldrh	r1, [r3, #0]
 8007aec:	4031      	ands	r1, r6
 8007aee:	e772      	b.n	80079d6 <USB_ActivateEndpoint+0x8e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007af0:	4e1c      	ldr	r6, [pc, #112]	@ (8007b64 <USB_ActivateEndpoint+0x21c>)
 8007af2:	4035      	ands	r5, r6
 8007af4:	4315      	orrs	r5, r2
 8007af6:	b2ad      	uxth	r5, r5
 8007af8:	e7c2      	b.n	8007a80 <USB_ActivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007afa:	8818      	ldrh	r0, [r3, #0]
 8007afc:	4208      	tst	r0, r1
 8007afe:	d004      	beq.n	8007b0a <USB_ActivateEndpoint+0x1c2>
 8007b00:	8819      	ldrh	r1, [r3, #0]
 8007b02:	4814      	ldr	r0, [pc, #80]	@ (8007b54 <USB_ActivateEndpoint+0x20c>)
 8007b04:	4021      	ands	r1, r4
 8007b06:	4301      	orrs	r1, r0
 8007b08:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b0a:	8819      	ldrh	r1, [r3, #0]
 8007b0c:	0649      	lsls	r1, r1, #25
 8007b0e:	d504      	bpl.n	8007b1a <USB_ActivateEndpoint+0x1d2>
 8007b10:	8819      	ldrh	r1, [r3, #0]
 8007b12:	4021      	ands	r1, r4
 8007b14:	4c0b      	ldr	r4, [pc, #44]	@ (8007b44 <USB_ActivateEndpoint+0x1fc>)
 8007b16:	4321      	orrs	r1, r4
 8007b18:	8019      	strh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8007b1a:	2f01      	cmp	r7, #1
 8007b1c:	d009      	beq.n	8007b32 <USB_ActivateEndpoint+0x1ea>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b1e:	2120      	movs	r1, #32
 8007b20:	881c      	ldrh	r4, [r3, #0]
 8007b22:	4034      	ands	r4, r6
 8007b24:	4061      	eors	r1, r4
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b26:	4311      	orrs	r1, r2
 8007b28:	b289      	uxth	r1, r1
 8007b2a:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b2c:	8819      	ldrh	r1, [r3, #0]
 8007b2e:	4029      	ands	r1, r5
 8007b30:	e751      	b.n	80079d6 <USB_ActivateEndpoint+0x8e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b32:	8819      	ldrh	r1, [r3, #0]
 8007b34:	4031      	ands	r1, r6
 8007b36:	e7f6      	b.n	8007b26 <USB_ActivateEndpoint+0x1de>
 8007b38:	ffff898f 	.word	0xffff898f
 8007b3c:	ffff8080 	.word	0xffff8080
 8007b40:	ffff8f8f 	.word	0xffff8f8f
 8007b44:	000080c0 	.word	0x000080c0
 8007b48:	ffff8fbf 	.word	0xffff8fbf
 8007b4c:	00000404 	.word	0x00000404
 8007b50:	00000406 	.word	0x00000406
 8007b54:	0000c080 	.word	0x0000c080
 8007b58:	ffffbf8f 	.word	0xffffbf8f
 8007b5c:	ffff8000 	.word	0xffff8000
 8007b60:	00008180 	.word	0x00008180
 8007b64:	ffff8e8f 	.word	0xffff8e8f

08007b68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b68:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b6a:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8007b6c:	784a      	ldrb	r2, [r1, #1]
  if (ep->doublebuffer == 0U)
 8007b6e:	7b09      	ldrb	r1, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	18c0      	adds	r0, r0, r3
 8007b74:	4b31      	ldr	r3, [pc, #196]	@ (8007c3c <USB_DeactivateEndpoint+0xd4>)
  if (ep->doublebuffer == 0U)
 8007b76:	2900      	cmp	r1, #0
 8007b78:	d11a      	bne.n	8007bb0 <USB_DeactivateEndpoint+0x48>
    if (ep->is_in != 0U)
 8007b7a:	2a00      	cmp	r2, #0
 8007b7c:	d00c      	beq.n	8007b98 <USB_DeactivateEndpoint+0x30>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b7e:	8802      	ldrh	r2, [r0, #0]
 8007b80:	0652      	lsls	r2, r2, #25
 8007b82:	d505      	bpl.n	8007b90 <USB_DeactivateEndpoint+0x28>
 8007b84:	8802      	ldrh	r2, [r0, #0]
 8007b86:	492e      	ldr	r1, [pc, #184]	@ (8007c40 <USB_DeactivateEndpoint+0xd8>)
 8007b88:	400a      	ands	r2, r1
 8007b8a:	492e      	ldr	r1, [pc, #184]	@ (8007c44 <USB_DeactivateEndpoint+0xdc>)
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	8002      	strh	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b90:	8802      	ldrh	r2, [r0, #0]
 8007b92:	492d      	ldr	r1, [pc, #180]	@ (8007c48 <USB_DeactivateEndpoint+0xe0>)
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b94:	400a      	ands	r2, r1
 8007b96:	e02f      	b.n	8007bf8 <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b98:	8802      	ldrh	r2, [r0, #0]
 8007b9a:	0452      	lsls	r2, r2, #17
 8007b9c:	d505      	bpl.n	8007baa <USB_DeactivateEndpoint+0x42>
 8007b9e:	8802      	ldrh	r2, [r0, #0]
 8007ba0:	4927      	ldr	r1, [pc, #156]	@ (8007c40 <USB_DeactivateEndpoint+0xd8>)
 8007ba2:	400a      	ands	r2, r1
 8007ba4:	4929      	ldr	r1, [pc, #164]	@ (8007c4c <USB_DeactivateEndpoint+0xe4>)
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007baa:	8802      	ldrh	r2, [r0, #0]
 8007bac:	4928      	ldr	r1, [pc, #160]	@ (8007c50 <USB_DeactivateEndpoint+0xe8>)
 8007bae:	e7f1      	b.n	8007b94 <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 8007bb0:	2780      	movs	r7, #128	@ 0x80
 8007bb2:	4e23      	ldr	r6, [pc, #140]	@ (8007c40 <USB_DeactivateEndpoint+0xd8>)
 8007bb4:	4d24      	ldr	r5, [pc, #144]	@ (8007c48 <USB_DeactivateEndpoint+0xe0>)
 8007bb6:	4926      	ldr	r1, [pc, #152]	@ (8007c50 <USB_DeactivateEndpoint+0xe8>)
 8007bb8:	01ff      	lsls	r7, r7, #7
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	d121      	bne.n	8007c02 <USB_DeactivateEndpoint+0x9a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bbe:	8802      	ldrh	r2, [r0, #0]
 8007bc0:	423a      	tst	r2, r7
 8007bc2:	d004      	beq.n	8007bce <USB_DeactivateEndpoint+0x66>
 8007bc4:	8802      	ldrh	r2, [r0, #0]
 8007bc6:	4c21      	ldr	r4, [pc, #132]	@ (8007c4c <USB_DeactivateEndpoint+0xe4>)
 8007bc8:	4032      	ands	r2, r6
 8007bca:	4322      	orrs	r2, r4
 8007bcc:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bce:	8802      	ldrh	r2, [r0, #0]
 8007bd0:	4c20      	ldr	r4, [pc, #128]	@ (8007c54 <USB_DeactivateEndpoint+0xec>)
 8007bd2:	0652      	lsls	r2, r2, #25
 8007bd4:	d504      	bpl.n	8007be0 <USB_DeactivateEndpoint+0x78>
 8007bd6:	8802      	ldrh	r2, [r0, #0]
 8007bd8:	4032      	ands	r2, r6
 8007bda:	4322      	orrs	r2, r4
 8007bdc:	b292      	uxth	r2, r2
 8007bde:	8002      	strh	r2, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8007be0:	8802      	ldrh	r2, [r0, #0]
 8007be2:	4032      	ands	r2, r6
 8007be4:	4314      	orrs	r4, r2
 8007be6:	b2a4      	uxth	r4, r4
 8007be8:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bea:	8802      	ldrh	r2, [r0, #0]
 8007bec:	400a      	ands	r2, r1
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	b292      	uxth	r2, r2
 8007bf2:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bf4:	8802      	ldrh	r2, [r0, #0]
 8007bf6:	402a      	ands	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8007bfe:	2000      	movs	r0, #0
 8007c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c02:	8802      	ldrh	r2, [r0, #0]
 8007c04:	4c14      	ldr	r4, [pc, #80]	@ (8007c58 <USB_DeactivateEndpoint+0xf0>)
 8007c06:	423a      	tst	r2, r7
 8007c08:	d004      	beq.n	8007c14 <USB_DeactivateEndpoint+0xac>
 8007c0a:	8802      	ldrh	r2, [r0, #0]
 8007c0c:	4032      	ands	r2, r6
 8007c0e:	4322      	orrs	r2, r4
 8007c10:	b292      	uxth	r2, r2
 8007c12:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c14:	8802      	ldrh	r2, [r0, #0]
 8007c16:	0652      	lsls	r2, r2, #25
 8007c18:	d504      	bpl.n	8007c24 <USB_DeactivateEndpoint+0xbc>
 8007c1a:	8802      	ldrh	r2, [r0, #0]
 8007c1c:	4f09      	ldr	r7, [pc, #36]	@ (8007c44 <USB_DeactivateEndpoint+0xdc>)
 8007c1e:	4032      	ands	r2, r6
 8007c20:	433a      	orrs	r2, r7
 8007c22:	8002      	strh	r2, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007c24:	8802      	ldrh	r2, [r0, #0]
 8007c26:	4032      	ands	r2, r6
 8007c28:	4314      	orrs	r4, r2
 8007c2a:	b2a4      	uxth	r4, r4
 8007c2c:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c2e:	8802      	ldrh	r2, [r0, #0]
 8007c30:	402a      	ands	r2, r5
 8007c32:	431a      	orrs	r2, r3
 8007c34:	b292      	uxth	r2, r2
 8007c36:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c38:	8802      	ldrh	r2, [r0, #0]
 8007c3a:	e7ab      	b.n	8007b94 <USB_DeactivateEndpoint+0x2c>
 8007c3c:	ffff8080 	.word	0xffff8080
 8007c40:	ffff8f8f 	.word	0xffff8f8f
 8007c44:	000080c0 	.word	0x000080c0
 8007c48:	ffff8fbf 	.word	0xffff8fbf
 8007c4c:	0000c080 	.word	0x0000c080
 8007c50:	ffffbf8f 	.word	0xffffbf8f
 8007c54:	ffff80c0 	.word	0xffff80c0
 8007c58:	ffffc080 	.word	0xffffc080

08007c5c <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c5c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 8007c5e:	7849      	ldrb	r1, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4a0c      	ldr	r2, [pc, #48]	@ (8007c94 <USB_EPSetStall+0x38>)
 8007c64:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8007c66:	2900      	cmp	r1, #0
 8007c68:	d009      	beq.n	8007c7e <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c6a:	8801      	ldrh	r1, [r0, #0]
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <USB_EPSetStall+0x3c>)
 8007c6e:	4019      	ands	r1, r3
 8007c70:	2310      	movs	r3, #16
 8007c72:	404b      	eors	r3, r1
 8007c74:	4313      	orrs	r3, r2
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c7e:	8801      	ldrh	r1, [r0, #0]
 8007c80:	4b06      	ldr	r3, [pc, #24]	@ (8007c9c <USB_EPSetStall+0x40>)
 8007c82:	4019      	ands	r1, r3
 8007c84:	2380      	movs	r3, #128	@ 0x80
 8007c86:	015b      	lsls	r3, r3, #5
 8007c88:	404b      	eors	r3, r1
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	b292      	uxth	r2, r2
 8007c8e:	8002      	strh	r2, [r0, #0]
 8007c90:	e7f3      	b.n	8007c7a <USB_EPSetStall+0x1e>
 8007c92:	46c0      	nop			@ (mov r8, r8)
 8007c94:	ffff8080 	.word	0xffff8080
 8007c98:	ffff8fbf 	.word	0xffff8fbf
 8007c9c:	ffffbf8f 	.word	0xffffbf8f

08007ca0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8007ca0:	7b0b      	ldrb	r3, [r1, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d119      	bne.n	8007cda <USB_EPClearStall+0x3a>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ca6:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8007ca8:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	18c0      	adds	r0, r0, r3
 8007cae:	8803      	ldrh	r3, [r0, #0]
    if (ep->is_in != 0U)
 8007cb0:	2a00      	cmp	r2, #0
 8007cb2:	d014      	beq.n	8007cde <USB_EPClearStall+0x3e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cb4:	065b      	lsls	r3, r3, #25
 8007cb6:	d505      	bpl.n	8007cc4 <USB_EPClearStall+0x24>
 8007cb8:	8803      	ldrh	r3, [r0, #0]
 8007cba:	4a10      	ldr	r2, [pc, #64]	@ (8007cfc <USB_EPClearStall+0x5c>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	4a10      	ldr	r2, [pc, #64]	@ (8007d00 <USB_EPClearStall+0x60>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	8003      	strh	r3, [r0, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cc4:	78cb      	ldrb	r3, [r1, #3]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d007      	beq.n	8007cda <USB_EPClearStall+0x3a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cca:	4b0e      	ldr	r3, [pc, #56]	@ (8007d04 <USB_EPClearStall+0x64>)
 8007ccc:	8802      	ldrh	r2, [r0, #0]
 8007cce:	401a      	ands	r2, r3
 8007cd0:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cd2:	4053      	eors	r3, r2
 8007cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8007d08 <USB_EPClearStall+0x68>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8007cda:	2000      	movs	r0, #0
 8007cdc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cde:	045b      	lsls	r3, r3, #17
 8007ce0:	d505      	bpl.n	8007cee <USB_EPClearStall+0x4e>
 8007ce2:	8803      	ldrh	r3, [r0, #0]
 8007ce4:	4a05      	ldr	r2, [pc, #20]	@ (8007cfc <USB_EPClearStall+0x5c>)
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	4a08      	ldr	r2, [pc, #32]	@ (8007d0c <USB_EPClearStall+0x6c>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cee:	4b08      	ldr	r3, [pc, #32]	@ (8007d10 <USB_EPClearStall+0x70>)
 8007cf0:	8802      	ldrh	r2, [r0, #0]
 8007cf2:	401a      	ands	r2, r3
 8007cf4:	23c0      	movs	r3, #192	@ 0xc0
 8007cf6:	019b      	lsls	r3, r3, #6
 8007cf8:	e7eb      	b.n	8007cd2 <USB_EPClearStall+0x32>
 8007cfa:	46c0      	nop			@ (mov r8, r8)
 8007cfc:	ffff8f8f 	.word	0xffff8f8f
 8007d00:	000080c0 	.word	0x000080c0
 8007d04:	ffff8fbf 	.word	0xffff8fbf
 8007d08:	00008080 	.word	0x00008080
 8007d0c:	0000c080 	.word	0x0000c080
 8007d10:	ffffbf8f 	.word	0xffffbf8f

08007d14 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8007d14:	2900      	cmp	r1, #0
 8007d16:	d102      	bne.n	8007d1e <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d18:	2380      	movs	r3, #128	@ 0x80
 8007d1a:	304c      	adds	r0, #76	@ 0x4c
 8007d1c:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8007d1e:	2000      	movs	r0, #0
 8007d20:	4770      	bx	lr

08007d22 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007d22:	2280      	movs	r2, #128	@ 0x80
 8007d24:	3058      	adds	r0, #88	@ 0x58
 8007d26:	8803      	ldrh	r3, [r0, #0]
 8007d28:	0212      	lsls	r2, r2, #8
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8007d2e:	2000      	movs	r0, #0
 8007d30:	4770      	bx	lr

08007d32 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d32:	3006      	adds	r0, #6
 8007d34:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 8007d36:	b280      	uxth	r0, r0
  return tmpreg;
}
 8007d38:	4770      	bx	lr

08007d3a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d3a:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d3c:	2480      	movs	r4, #128	@ 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d3e:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d40:	00e4      	lsls	r4, r4, #3
 8007d42:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d44:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d46:	1880      	adds	r0, r0, r2

  for (count = n; count != 0U; count--)
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	18cb      	adds	r3, r1, r3
 8007d4c:	1a40      	subs	r0, r0, r1
 8007d4e:	180c      	adds	r4, r1, r0
 8007d50:	428b      	cmp	r3, r1
 8007d52:	d100      	bne.n	8007d56 <USB_WritePMA+0x1c>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8007d54:	bd30      	pop	{r4, r5, pc}
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007d56:	784a      	ldrb	r2, [r1, #1]
 8007d58:	780d      	ldrb	r5, [r1, #0]
 8007d5a:	0212      	lsls	r2, r2, #8
 8007d5c:	432a      	orrs	r2, r5
    *pdwVal = (WrVal & 0xFFFFU);
 8007d5e:	8022      	strh	r2, [r4, #0]
    pBuf++;
 8007d60:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8007d62:	e7f4      	b.n	8007d4e <USB_WritePMA+0x14>

08007d64 <USB_EPStartXfer>:
{
 8007d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d66:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8007d68:	7849      	ldrb	r1, [r1, #1]
{
 8007d6a:	0005      	movs	r5, r0
    if (ep->doublebuffer == 0U)
 8007d6c:	7b22      	ldrb	r2, [r4, #12]
{
 8007d6e:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 8007d70:	2901      	cmp	r1, #1
 8007d72:	d000      	beq.n	8007d76 <USB_EPStartXfer+0x12>
 8007d74:	e11b      	b.n	8007fae <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	69a7      	ldr	r7, [r4, #24]
 8007d7a:	9302      	str	r3, [sp, #8]
 8007d7c:	429f      	cmp	r7, r3
 8007d7e:	d900      	bls.n	8007d82 <USB_EPStartXfer+0x1e>
 8007d80:	001f      	movs	r7, r3
    if (ep->doublebuffer == 0U)
 8007d82:	002b      	movs	r3, r5
 8007d84:	3350      	adds	r3, #80	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007d86:	6961      	ldr	r1, [r4, #20]
 8007d88:	9301      	str	r3, [sp, #4]
    if (ep->doublebuffer == 0U)
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	d11d      	bne.n	8007dca <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007d8e:	b2bf      	uxth	r7, r7
 8007d90:	003b      	movs	r3, r7
 8007d92:	88e2      	ldrh	r2, [r4, #6]
 8007d94:	0028      	movs	r0, r5
 8007d96:	f7ff ffd0 	bl	8007d3a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d9a:	9b01      	ldr	r3, [sp, #4]
 8007d9c:	4abe      	ldr	r2, [pc, #760]	@ (8008098 <USB_EPStartXfer+0x334>)
 8007d9e:	8819      	ldrh	r1, [r3, #0]
 8007da0:	7823      	ldrb	r3, [r4, #0]
 8007da2:	18aa      	adds	r2, r5, r2
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	1852      	adds	r2, r2, r1
 8007da8:	189b      	adds	r3, r3, r2
 8007daa:	801f      	strh	r7, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007dac:	7823      	ldrb	r3, [r4, #0]
 8007dae:	4abb      	ldr	r2, [pc, #748]	@ (800809c <USB_EPStartXfer+0x338>)
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	18eb      	adds	r3, r5, r3
 8007db4:	8819      	ldrh	r1, [r3, #0]
 8007db6:	4011      	ands	r1, r2
 8007db8:	2230      	movs	r2, #48	@ 0x30
 8007dba:	404a      	eors	r2, r1
 8007dbc:	49b8      	ldr	r1, [pc, #736]	@ (80080a0 <USB_EPStartXfer+0x33c>)
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	b292      	uxth	r2, r2
 8007dc2:	801a      	strh	r2, [r3, #0]
  return HAL_OK;
 8007dc4:	2000      	movs	r0, #0
}
 8007dc6:	b007      	add	sp, #28
 8007dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007dca:	7822      	ldrb	r2, [r4, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 8007dcc:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007dce:	0093      	lsls	r3, r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007dd0:	00d2      	lsls	r2, r2, #3
 8007dd2:	9203      	str	r2, [sp, #12]
      if (ep->type == EP_TYPE_BULK)
 8007dd4:	78e0      	ldrb	r0, [r4, #3]
 8007dd6:	18eb      	adds	r3, r5, r3
 8007dd8:	2802      	cmp	r0, #2
 8007dda:	d000      	beq.n	8007dde <USB_EPStartXfer+0x7a>
 8007ddc:	e0d1      	b.n	8007f82 <USB_EPStartXfer+0x21e>
        if (ep->xfer_len_db > ep->maxpacket)
 8007dde:	9a02      	ldr	r2, [sp, #8]
 8007de0:	42b2      	cmp	r2, r6
 8007de2:	d300      	bcc.n	8007de6 <USB_EPStartXfer+0x82>
 8007de4:	e0bb      	b.n	8007f5e <USB_EPStartXfer+0x1fa>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007de6:	881a      	ldrh	r2, [r3, #0]
 8007de8:	48ae      	ldr	r0, [pc, #696]	@ (80080a4 <USB_EPStartXfer+0x340>)
          ep->xfer_len_db -= len;
 8007dea:	1bf6      	subs	r6, r6, r7
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007dec:	4010      	ands	r0, r2
 8007dee:	4aae      	ldr	r2, [pc, #696]	@ (80080a8 <USB_EPStartXfer+0x344>)
 8007df0:	4310      	orrs	r0, r2
 8007df2:	8018      	strh	r0, [r3, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	2040      	movs	r0, #64	@ 0x40
 8007df8:	469c      	mov	ip, r3
 8007dfa:	4662      	mov	r2, ip
 8007dfc:	4002      	ands	r2, r0
 8007dfe:	9205      	str	r2, [sp, #20]
 8007e00:	4662      	mov	r2, ip
            ep->xfer_buff += len;
 8007e02:	19cb      	adds	r3, r1, r7
 8007e04:	9304      	str	r3, [sp, #16]
          ep->xfer_len_db -= len;
 8007e06:	6226      	str	r6, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007e08:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e0a:	4202      	tst	r2, r0
 8007e0c:	d055      	beq.n	8007eba <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e0e:	9a01      	ldr	r2, [sp, #4]
 8007e10:	8812      	ldrh	r2, [r2, #0]
 8007e12:	4694      	mov	ip, r2
 8007e14:	4aa5      	ldr	r2, [pc, #660]	@ (80080ac <USB_EPStartXfer+0x348>)
 8007e16:	18a8      	adds	r0, r5, r2
 8007e18:	9a03      	ldr	r2, [sp, #12]
 8007e1a:	4460      	add	r0, ip
 8007e1c:	1882      	adds	r2, r0, r2
 8007e1e:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e20:	8962      	ldrh	r2, [r4, #10]
 8007e22:	0028      	movs	r0, r5
 8007e24:	f7ff ff89 	bl	8007d3a <USB_WritePMA>
            ep->xfer_buff += len;
 8007e28:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 8007e2a:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8007e2c:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8007e2e:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8007e30:	42b2      	cmp	r2, r6
 8007e32:	d201      	bcs.n	8007e38 <USB_EPStartXfer+0xd4>
              ep->xfer_len_db -= len;
 8007e34:	1bf3      	subs	r3, r6, r7
 8007e36:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e38:	7862      	ldrb	r2, [r4, #1]
 8007e3a:	6223      	str	r3, [r4, #32]
 8007e3c:	b2b3      	uxth	r3, r6
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	d12e      	bne.n	8007ea0 <USB_EPStartXfer+0x13c>
 8007e42:	9a01      	ldr	r2, [sp, #4]
 8007e44:	4994      	ldr	r1, [pc, #592]	@ (8008098 <USB_EPStartXfer+0x334>)
 8007e46:	8810      	ldrh	r0, [r2, #0]
 8007e48:	7822      	ldrb	r2, [r4, #0]
 8007e4a:	1869      	adds	r1, r5, r1
 8007e4c:	1809      	adds	r1, r1, r0
 8007e4e:	00d2      	lsls	r2, r2, #3
 8007e50:	1852      	adds	r2, r2, r1
 8007e52:	8811      	ldrh	r1, [r2, #0]
 8007e54:	0589      	lsls	r1, r1, #22
 8007e56:	0d89      	lsrs	r1, r1, #22
 8007e58:	8011      	strh	r1, [r2, #0]
 8007e5a:	2e00      	cmp	r6, #0
 8007e5c:	d10a      	bne.n	8007e74 <USB_EPStartXfer+0x110>
 8007e5e:	2080      	movs	r0, #128	@ 0x80
 8007e60:	8811      	ldrh	r1, [r2, #0]
 8007e62:	0200      	lsls	r0, r0, #8
 8007e64:	4301      	orrs	r1, r0
 8007e66:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e68:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e6a:	9904      	ldr	r1, [sp, #16]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e6c:	0028      	movs	r0, r5
 8007e6e:	f7ff ff64 	bl	8007d3a <USB_WritePMA>
 8007e72:	e79b      	b.n	8007dac <USB_EPStartXfer+0x48>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e74:	2e3e      	cmp	r6, #62	@ 0x3e
 8007e76:	d808      	bhi.n	8007e8a <USB_EPStartXfer+0x126>
 8007e78:	2101      	movs	r1, #1
 8007e7a:	0870      	lsrs	r0, r6, #1
 8007e7c:	4031      	ands	r1, r6
 8007e7e:	1840      	adds	r0, r0, r1
 8007e80:	8811      	ldrh	r1, [r2, #0]
 8007e82:	0280      	lsls	r0, r0, #10
 8007e84:	4301      	orrs	r1, r0
 8007e86:	b289      	uxth	r1, r1
 8007e88:	e7ed      	b.n	8007e66 <USB_EPStartXfer+0x102>
 8007e8a:	201f      	movs	r0, #31
 8007e8c:	4030      	ands	r0, r6
 8007e8e:	0971      	lsrs	r1, r6, #5
 8007e90:	4246      	negs	r6, r0
 8007e92:	4170      	adcs	r0, r6
 8007e94:	1a09      	subs	r1, r1, r0
 8007e96:	8810      	ldrh	r0, [r2, #0]
 8007e98:	0289      	lsls	r1, r1, #10
 8007e9a:	4308      	orrs	r0, r1
 8007e9c:	4984      	ldr	r1, [pc, #528]	@ (80080b0 <USB_EPStartXfer+0x34c>)
 8007e9e:	e7f1      	b.n	8007e84 <USB_EPStartXfer+0x120>
 8007ea0:	2a01      	cmp	r2, #1
 8007ea2:	d1e1      	bne.n	8007e68 <USB_EPStartXfer+0x104>
 8007ea4:	002a      	movs	r2, r5
 8007ea6:	497c      	ldr	r1, [pc, #496]	@ (8008098 <USB_EPStartXfer+0x334>)
 8007ea8:	3250      	adds	r2, #80	@ 0x50
 8007eaa:	8810      	ldrh	r0, [r2, #0]
 8007eac:	7822      	ldrb	r2, [r4, #0]
 8007eae:	1869      	adds	r1, r5, r1
 8007eb0:	00d2      	lsls	r2, r2, #3
 8007eb2:	1809      	adds	r1, r1, r0
 8007eb4:	1852      	adds	r2, r2, r1
 8007eb6:	8013      	strh	r3, [r2, #0]
 8007eb8:	e7d6      	b.n	8007e68 <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007eba:	9a01      	ldr	r2, [sp, #4]
 8007ebc:	8812      	ldrh	r2, [r2, #0]
 8007ebe:	4694      	mov	ip, r2
 8007ec0:	4a75      	ldr	r2, [pc, #468]	@ (8008098 <USB_EPStartXfer+0x334>)
 8007ec2:	18a8      	adds	r0, r5, r2
 8007ec4:	9a03      	ldr	r2, [sp, #12]
 8007ec6:	4460      	add	r0, ip
 8007ec8:	1882      	adds	r2, r0, r2
 8007eca:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ecc:	8922      	ldrh	r2, [r4, #8]
 8007ece:	0028      	movs	r0, r5
 8007ed0:	f7ff ff33 	bl	8007d3a <USB_WritePMA>
            ep->xfer_buff += len;
 8007ed4:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 8007ed6:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8007ed8:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8007eda:	9b05      	ldr	r3, [sp, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007edc:	42b2      	cmp	r2, r6
 8007ede:	d201      	bcs.n	8007ee4 <USB_EPStartXfer+0x180>
              ep->xfer_len_db -= len;
 8007ee0:	1bf3      	subs	r3, r6, r7
 8007ee2:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ee4:	7862      	ldrb	r2, [r4, #1]
 8007ee6:	6223      	str	r3, [r4, #32]
 8007ee8:	b2b3      	uxth	r3, r6
 8007eea:	2a00      	cmp	r2, #0
 8007eec:	d12a      	bne.n	8007f44 <USB_EPStartXfer+0x1e0>
 8007eee:	9a01      	ldr	r2, [sp, #4]
 8007ef0:	496e      	ldr	r1, [pc, #440]	@ (80080ac <USB_EPStartXfer+0x348>)
 8007ef2:	8810      	ldrh	r0, [r2, #0]
 8007ef4:	7822      	ldrb	r2, [r4, #0]
 8007ef6:	1869      	adds	r1, r5, r1
 8007ef8:	1809      	adds	r1, r1, r0
 8007efa:	00d2      	lsls	r2, r2, #3
 8007efc:	1852      	adds	r2, r2, r1
 8007efe:	8811      	ldrh	r1, [r2, #0]
 8007f00:	0589      	lsls	r1, r1, #22
 8007f02:	0d89      	lsrs	r1, r1, #22
 8007f04:	8011      	strh	r1, [r2, #0]
 8007f06:	2e00      	cmp	r6, #0
 8007f08:	d106      	bne.n	8007f18 <USB_EPStartXfer+0x1b4>
 8007f0a:	2080      	movs	r0, #128	@ 0x80
 8007f0c:	8811      	ldrh	r1, [r2, #0]
 8007f0e:	0200      	lsls	r0, r0, #8
 8007f10:	4301      	orrs	r1, r0
 8007f12:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f14:	8962      	ldrh	r2, [r4, #10]
 8007f16:	e7a8      	b.n	8007e6a <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f18:	2e3e      	cmp	r6, #62	@ 0x3e
 8007f1a:	d808      	bhi.n	8007f2e <USB_EPStartXfer+0x1ca>
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	0870      	lsrs	r0, r6, #1
 8007f20:	4031      	ands	r1, r6
 8007f22:	1840      	adds	r0, r0, r1
 8007f24:	8811      	ldrh	r1, [r2, #0]
 8007f26:	0280      	lsls	r0, r0, #10
 8007f28:	4301      	orrs	r1, r0
 8007f2a:	b289      	uxth	r1, r1
 8007f2c:	e7f1      	b.n	8007f12 <USB_EPStartXfer+0x1ae>
 8007f2e:	201f      	movs	r0, #31
 8007f30:	0971      	lsrs	r1, r6, #5
 8007f32:	4006      	ands	r6, r0
 8007f34:	4270      	negs	r0, r6
 8007f36:	4146      	adcs	r6, r0
 8007f38:	8810      	ldrh	r0, [r2, #0]
 8007f3a:	1b89      	subs	r1, r1, r6
 8007f3c:	0289      	lsls	r1, r1, #10
 8007f3e:	4308      	orrs	r0, r1
 8007f40:	495b      	ldr	r1, [pc, #364]	@ (80080b0 <USB_EPStartXfer+0x34c>)
 8007f42:	e7f1      	b.n	8007f28 <USB_EPStartXfer+0x1c4>
 8007f44:	2a01      	cmp	r2, #1
 8007f46:	d1e5      	bne.n	8007f14 <USB_EPStartXfer+0x1b0>
 8007f48:	002a      	movs	r2, r5
 8007f4a:	4958      	ldr	r1, [pc, #352]	@ (80080ac <USB_EPStartXfer+0x348>)
 8007f4c:	3250      	adds	r2, #80	@ 0x50
 8007f4e:	8810      	ldrh	r0, [r2, #0]
 8007f50:	7822      	ldrb	r2, [r4, #0]
 8007f52:	1869      	adds	r1, r5, r1
 8007f54:	00d2      	lsls	r2, r2, #3
 8007f56:	1809      	adds	r1, r1, r0
 8007f58:	1852      	adds	r2, r2, r1
 8007f5a:	8013      	strh	r3, [r2, #0]
 8007f5c:	e7da      	b.n	8007f14 <USB_EPStartXfer+0x1b0>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007f5e:	8818      	ldrh	r0, [r3, #0]
 8007f60:	4f54      	ldr	r7, [pc, #336]	@ (80080b4 <USB_EPStartXfer+0x350>)
 8007f62:	4a4f      	ldr	r2, [pc, #316]	@ (80080a0 <USB_EPStartXfer+0x33c>)
 8007f64:	4038      	ands	r0, r7
 8007f66:	4310      	orrs	r0, r2
 8007f68:	b280      	uxth	r0, r0
 8007f6a:	8018      	strh	r0, [r3, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007f6c:	9b01      	ldr	r3, [sp, #4]
 8007f6e:	9a03      	ldr	r2, [sp, #12]
 8007f70:	8818      	ldrh	r0, [r3, #0]
 8007f72:	4b49      	ldr	r3, [pc, #292]	@ (8008098 <USB_EPStartXfer+0x334>)
 8007f74:	18eb      	adds	r3, r5, r3
 8007f76:	181b      	adds	r3, r3, r0
 8007f78:	189a      	adds	r2, r3, r2
 8007f7a:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f7c:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f7e:	8922      	ldrh	r2, [r4, #8]
 8007f80:	e774      	b.n	8007e6c <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f82:	8818      	ldrh	r0, [r3, #0]
        ep->xfer_len_db -= len;
 8007f84:	1bf6      	subs	r6, r6, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f86:	9a01      	ldr	r2, [sp, #4]
        ep->xfer_len_db -= len;
 8007f88:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f8a:	8816      	ldrh	r6, [r2, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007f8c:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f8e:	0640      	lsls	r0, r0, #25
 8007f90:	d507      	bpl.n	8007fa2 <USB_EPStartXfer+0x23e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f92:	4a46      	ldr	r2, [pc, #280]	@ (80080ac <USB_EPStartXfer+0x348>)
 8007f94:	18a8      	adds	r0, r5, r2
 8007f96:	9a03      	ldr	r2, [sp, #12]
 8007f98:	1980      	adds	r0, r0, r6
 8007f9a:	1882      	adds	r2, r0, r2
 8007f9c:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f9e:	8962      	ldrh	r2, [r4, #10]
 8007fa0:	e764      	b.n	8007e6c <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8008098 <USB_EPStartXfer+0x334>)
 8007fa4:	18a8      	adds	r0, r5, r2
 8007fa6:	9a03      	ldr	r2, [sp, #12]
 8007fa8:	1980      	adds	r0, r0, r6
 8007faa:	1882      	adds	r2, r0, r2
 8007fac:	e7e6      	b.n	8007f7c <USB_EPStartXfer+0x218>
    if (ep->doublebuffer == 0U)
 8007fae:	2a00      	cmp	r2, #0
 8007fb0:	d11c      	bne.n	8007fec <USB_EPStartXfer+0x288>
      if (ep->xfer_len > ep->maxpacket)
 8007fb2:	69a3      	ldr	r3, [r4, #24]
 8007fb4:	6921      	ldr	r1, [r4, #16]
 8007fb6:	428b      	cmp	r3, r1
 8007fb8:	d901      	bls.n	8007fbe <USB_EPStartXfer+0x25a>
        ep->xfer_len -= len;
 8007fba:	1a5a      	subs	r2, r3, r1
        len = ep->maxpacket;
 8007fbc:	000b      	movs	r3, r1
 8007fbe:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007fc0:	002a      	movs	r2, r5
 8007fc2:	493a      	ldr	r1, [pc, #232]	@ (80080ac <USB_EPStartXfer+0x348>)
 8007fc4:	3250      	adds	r2, #80	@ 0x50
 8007fc6:	8810      	ldrh	r0, [r2, #0]
 8007fc8:	7822      	ldrb	r2, [r4, #0]
 8007fca:	1869      	adds	r1, r5, r1
 8007fcc:	00d2      	lsls	r2, r2, #3
 8007fce:	1809      	adds	r1, r1, r0
 8007fd0:	1852      	adds	r2, r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007fd2:	8811      	ldrh	r1, [r2, #0]
 8007fd4:	0589      	lsls	r1, r1, #22
 8007fd6:	0d89      	lsrs	r1, r1, #22
 8007fd8:	8011      	strh	r1, [r2, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d000      	beq.n	8007fe0 <USB_EPStartXfer+0x27c>
 8007fde:	e0d6      	b.n	800818e <USB_EPStartXfer+0x42a>
 8007fe0:	2180      	movs	r1, #128	@ 0x80
 8007fe2:	8813      	ldrh	r3, [r2, #0]
 8007fe4:	0209      	lsls	r1, r1, #8
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	8013      	strh	r3, [r2, #0]
 8007fea:	e03d      	b.n	8008068 <USB_EPStartXfer+0x304>
      if (ep->type == EP_TYPE_BULK)
 8007fec:	78e3      	ldrb	r3, [r4, #3]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d000      	beq.n	8007ff4 <USB_EPStartXfer+0x290>
 8007ff2:	e08c      	b.n	800810e <USB_EPStartXfer+0x3aa>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ff4:	2900      	cmp	r1, #0
 8007ff6:	d124      	bne.n	8008042 <USB_EPStartXfer+0x2de>
 8007ff8:	0006      	movs	r6, r0
 8007ffa:	4a27      	ldr	r2, [pc, #156]	@ (8008098 <USB_EPStartXfer+0x334>)
 8007ffc:	3650      	adds	r6, #80	@ 0x50
 8007ffe:	8833      	ldrh	r3, [r6, #0]
 8008000:	7820      	ldrb	r0, [r4, #0]
 8008002:	18aa      	adds	r2, r5, r2
 8008004:	18d2      	adds	r2, r2, r3
 8008006:	00c0      	lsls	r0, r0, #3
 8008008:	1812      	adds	r2, r2, r0
 800800a:	8813      	ldrh	r3, [r2, #0]
 800800c:	059b      	lsls	r3, r3, #22
 800800e:	0d9b      	lsrs	r3, r3, #22
 8008010:	8013      	strh	r3, [r2, #0]
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d134      	bne.n	8008082 <USB_EPStartXfer+0x31e>
 8008018:	2780      	movs	r7, #128	@ 0x80
 800801a:	8811      	ldrh	r1, [r2, #0]
 800801c:	023f      	lsls	r7, r7, #8
 800801e:	4339      	orrs	r1, r7
 8008020:	8011      	strh	r1, [r2, #0]
 8008022:	4a22      	ldr	r2, [pc, #136]	@ (80080ac <USB_EPStartXfer+0x348>)
 8008024:	8831      	ldrh	r1, [r6, #0]
 8008026:	18aa      	adds	r2, r5, r2
 8008028:	1852      	adds	r2, r2, r1
 800802a:	1812      	adds	r2, r2, r0
 800802c:	8811      	ldrh	r1, [r2, #0]
 800802e:	0589      	lsls	r1, r1, #22
 8008030:	0d89      	lsrs	r1, r1, #22
 8008032:	8011      	strh	r1, [r2, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d154      	bne.n	80080e2 <USB_EPStartXfer+0x37e>
 8008038:	2180      	movs	r1, #128	@ 0x80
 800803a:	8813      	ldrh	r3, [r2, #0]
 800803c:	0209      	lsls	r1, r1, #8
 800803e:	430b      	orrs	r3, r1
 8008040:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 8008042:	69e3      	ldr	r3, [r4, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00f      	beq.n	8008068 <USB_EPStartXfer+0x304>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008048:	7823      	ldrb	r3, [r4, #0]
 800804a:	491b      	ldr	r1, [pc, #108]	@ (80080b8 <USB_EPStartXfer+0x354>)
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	18eb      	adds	r3, r5, r3
 8008050:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008052:	400a      	ands	r2, r1
 8008054:	428a      	cmp	r2, r1
 8008056:	d001      	beq.n	800805c <USB_EPStartXfer+0x2f8>
 8008058:	2a00      	cmp	r2, #0
 800805a:	d105      	bne.n	8008068 <USB_EPStartXfer+0x304>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800805c:	881a      	ldrh	r2, [r3, #0]
 800805e:	4911      	ldr	r1, [pc, #68]	@ (80080a4 <USB_EPStartXfer+0x340>)
 8008060:	400a      	ands	r2, r1
 8008062:	4916      	ldr	r1, [pc, #88]	@ (80080bc <USB_EPStartXfer+0x358>)
 8008064:	430a      	orrs	r2, r1
 8008066:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008068:	7823      	ldrb	r3, [r4, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	18ed      	adds	r5, r5, r3
 800806e:	882a      	ldrh	r2, [r5, #0]
 8008070:	4b13      	ldr	r3, [pc, #76]	@ (80080c0 <USB_EPStartXfer+0x35c>)
 8008072:	401a      	ands	r2, r3
 8008074:	23c0      	movs	r3, #192	@ 0xc0
 8008076:	019b      	lsls	r3, r3, #6
 8008078:	4053      	eors	r3, r2
 800807a:	4a12      	ldr	r2, [pc, #72]	@ (80080c4 <USB_EPStartXfer+0x360>)
 800807c:	4313      	orrs	r3, r2
 800807e:	802b      	strh	r3, [r5, #0]
 8008080:	e6a0      	b.n	8007dc4 <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008082:	2b3e      	cmp	r3, #62	@ 0x3e
 8008084:	d820      	bhi.n	80080c8 <USB_EPStartXfer+0x364>
 8008086:	2101      	movs	r1, #1
 8008088:	085f      	lsrs	r7, r3, #1
 800808a:	4019      	ands	r1, r3
 800808c:	187f      	adds	r7, r7, r1
 800808e:	8811      	ldrh	r1, [r2, #0]
 8008090:	02bf      	lsls	r7, r7, #10
 8008092:	4339      	orrs	r1, r7
 8008094:	b289      	uxth	r1, r1
 8008096:	e7c3      	b.n	8008020 <USB_EPStartXfer+0x2bc>
 8008098:	00000402 	.word	0x00000402
 800809c:	ffff8fbf 	.word	0xffff8fbf
 80080a0:	ffff8080 	.word	0xffff8080
 80080a4:	ffff8f8f 	.word	0xffff8f8f
 80080a8:	00008180 	.word	0x00008180
 80080ac:	00000406 	.word	0x00000406
 80080b0:	ffff8000 	.word	0xffff8000
 80080b4:	ffff8e8f 	.word	0xffff8e8f
 80080b8:	00004040 	.word	0x00004040
 80080bc:	000080c0 	.word	0x000080c0
 80080c0:	ffffbf8f 	.word	0xffffbf8f
 80080c4:	00008080 	.word	0x00008080
 80080c8:	271f      	movs	r7, #31
 80080ca:	401f      	ands	r7, r3
 80080cc:	0039      	movs	r1, r7
 80080ce:	424f      	negs	r7, r1
 80080d0:	414f      	adcs	r7, r1
 80080d2:	0959      	lsrs	r1, r3, #5
 80080d4:	1bc9      	subs	r1, r1, r7
 80080d6:	8817      	ldrh	r7, [r2, #0]
 80080d8:	9101      	str	r1, [sp, #4]
 80080da:	0289      	lsls	r1, r1, #10
 80080dc:	430f      	orrs	r7, r1
 80080de:	4937      	ldr	r1, [pc, #220]	@ (80081bc <USB_EPStartXfer+0x458>)
 80080e0:	e7d7      	b.n	8008092 <USB_EPStartXfer+0x32e>
 80080e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80080e4:	d808      	bhi.n	80080f8 <USB_EPStartXfer+0x394>
 80080e6:	2001      	movs	r0, #1
 80080e8:	0859      	lsrs	r1, r3, #1
 80080ea:	4003      	ands	r3, r0
 80080ec:	18c9      	adds	r1, r1, r3
 80080ee:	8813      	ldrh	r3, [r2, #0]
 80080f0:	0289      	lsls	r1, r1, #10
 80080f2:	430b      	orrs	r3, r1
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	e7a3      	b.n	8008040 <USB_EPStartXfer+0x2dc>
 80080f8:	201f      	movs	r0, #31
 80080fa:	0959      	lsrs	r1, r3, #5
 80080fc:	4003      	ands	r3, r0
 80080fe:	4258      	negs	r0, r3
 8008100:	4143      	adcs	r3, r0
 8008102:	1ac9      	subs	r1, r1, r3
 8008104:	8813      	ldrh	r3, [r2, #0]
 8008106:	0289      	lsls	r1, r1, #10
 8008108:	4319      	orrs	r1, r3
 800810a:	4b2c      	ldr	r3, [pc, #176]	@ (80081bc <USB_EPStartXfer+0x458>)
 800810c:	e7f1      	b.n	80080f2 <USB_EPStartXfer+0x38e>
        return HAL_ERROR;
 800810e:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8008110:	4283      	cmp	r3, r0
 8008112:	d000      	beq.n	8008116 <USB_EPStartXfer+0x3b2>
 8008114:	e657      	b.n	8007dc6 <USB_EPStartXfer+0x62>
        if (ep->xfer_len > ep->maxpacket)
 8008116:	69a3      	ldr	r3, [r4, #24]
 8008118:	6922      	ldr	r2, [r4, #16]
          ep->xfer_len = 0U;
 800811a:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 800811c:	4293      	cmp	r3, r2
 800811e:	d901      	bls.n	8008124 <USB_EPStartXfer+0x3c0>
          ep->xfer_len -= len;
 8008120:	1a98      	subs	r0, r3, r2
          len = ep->maxpacket;
 8008122:	0013      	movs	r3, r2
 8008124:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008126:	2900      	cmp	r1, #0
 8008128:	d19e      	bne.n	8008068 <USB_EPStartXfer+0x304>
 800812a:	002e      	movs	r6, r5
 800812c:	4a24      	ldr	r2, [pc, #144]	@ (80081c0 <USB_EPStartXfer+0x45c>)
 800812e:	3650      	adds	r6, #80	@ 0x50
 8008130:	8831      	ldrh	r1, [r6, #0]
 8008132:	7820      	ldrb	r0, [r4, #0]
 8008134:	18aa      	adds	r2, r5, r2
 8008136:	1852      	adds	r2, r2, r1
 8008138:	00c0      	lsls	r0, r0, #3
 800813a:	1812      	adds	r2, r2, r0
 800813c:	8811      	ldrh	r1, [r2, #0]
 800813e:	0589      	lsls	r1, r1, #22
 8008140:	0d89      	lsrs	r1, r1, #22
 8008142:	8011      	strh	r1, [r2, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <USB_EPStartXfer+0x3fa>
 8008148:	2780      	movs	r7, #128	@ 0x80
 800814a:	8811      	ldrh	r1, [r2, #0]
 800814c:	023f      	lsls	r7, r7, #8
 800814e:	4339      	orrs	r1, r7
 8008150:	8011      	strh	r1, [r2, #0]
 8008152:	4a1c      	ldr	r2, [pc, #112]	@ (80081c4 <USB_EPStartXfer+0x460>)
 8008154:	8831      	ldrh	r1, [r6, #0]
 8008156:	18aa      	adds	r2, r5, r2
 8008158:	1852      	adds	r2, r2, r1
 800815a:	1812      	adds	r2, r2, r0
 800815c:	e739      	b.n	8007fd2 <USB_EPStartXfer+0x26e>
 800815e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008160:	d808      	bhi.n	8008174 <USB_EPStartXfer+0x410>
 8008162:	2101      	movs	r1, #1
 8008164:	085f      	lsrs	r7, r3, #1
 8008166:	4019      	ands	r1, r3
 8008168:	187f      	adds	r7, r7, r1
 800816a:	8811      	ldrh	r1, [r2, #0]
 800816c:	02bf      	lsls	r7, r7, #10
 800816e:	4339      	orrs	r1, r7
 8008170:	b289      	uxth	r1, r1
 8008172:	e7ed      	b.n	8008150 <USB_EPStartXfer+0x3ec>
 8008174:	271f      	movs	r7, #31
 8008176:	401f      	ands	r7, r3
 8008178:	0039      	movs	r1, r7
 800817a:	424f      	negs	r7, r1
 800817c:	414f      	adcs	r7, r1
 800817e:	0959      	lsrs	r1, r3, #5
 8008180:	1bc9      	subs	r1, r1, r7
 8008182:	8817      	ldrh	r7, [r2, #0]
 8008184:	9101      	str	r1, [sp, #4]
 8008186:	0289      	lsls	r1, r1, #10
 8008188:	430f      	orrs	r7, r1
 800818a:	490c      	ldr	r1, [pc, #48]	@ (80081bc <USB_EPStartXfer+0x458>)
 800818c:	e7ef      	b.n	800816e <USB_EPStartXfer+0x40a>
 800818e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008190:	d808      	bhi.n	80081a4 <USB_EPStartXfer+0x440>
 8008192:	2001      	movs	r0, #1
 8008194:	0859      	lsrs	r1, r3, #1
 8008196:	4003      	ands	r3, r0
 8008198:	18c9      	adds	r1, r1, r3
 800819a:	8813      	ldrh	r3, [r2, #0]
 800819c:	0289      	lsls	r1, r1, #10
 800819e:	430b      	orrs	r3, r1
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	e721      	b.n	8007fe8 <USB_EPStartXfer+0x284>
 80081a4:	201f      	movs	r0, #31
 80081a6:	0959      	lsrs	r1, r3, #5
 80081a8:	4003      	ands	r3, r0
 80081aa:	4258      	negs	r0, r3
 80081ac:	4143      	adcs	r3, r0
 80081ae:	1ac9      	subs	r1, r1, r3
 80081b0:	8813      	ldrh	r3, [r2, #0]
 80081b2:	0289      	lsls	r1, r1, #10
 80081b4:	4319      	orrs	r1, r3
 80081b6:	4b01      	ldr	r3, [pc, #4]	@ (80081bc <USB_EPStartXfer+0x458>)
 80081b8:	e7f1      	b.n	800819e <USB_EPStartXfer+0x43a>
 80081ba:	46c0      	nop			@ (mov r8, r8)
 80081bc:	ffff8000 	.word	0xffff8000
 80081c0:	00000402 	.word	0x00000402
 80081c4:	00000406 	.word	0x00000406

080081c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081ca:	2580      	movs	r5, #128	@ 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 80081cc:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081ce:	00ed      	lsls	r5, r5, #3
 80081d0:	1952      	adds	r2, r2, r5

  for (count = n; count != 0U; count--)
 80081d2:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 80081d4:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081d6:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 80081d8:	1a47      	subs	r7, r0, r1
 80081da:	19ea      	adds	r2, r5, r7
 80081dc:	2e00      	cmp	r6, #0
 80081de:	d106      	bne.n	80081ee <USB_ReadPMA+0x26>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80081e0:	07db      	lsls	r3, r3, #31
 80081e2:	d503      	bpl.n	80081ec <USB_ReadPMA+0x24>
 80081e4:	0064      	lsls	r4, r4, #1
  {
    RdVal = *pdwVal;
 80081e6:	1900      	adds	r0, r0, r4
 80081e8:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80081ea:	550b      	strb	r3, [r1, r4]
  }
}
 80081ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 80081ee:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 80081f0:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 80081f2:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80081f4:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80081f6:	0a12      	lsrs	r2, r2, #8
 80081f8:	706a      	strb	r2, [r5, #1]
    pBuf++;
 80081fa:	3502      	adds	r5, #2
  for (count = n; count != 0U; count--)
 80081fc:	e7ed      	b.n	80081da <USB_ReadPMA+0x12>
	...

08008200 <rfalAnalogConfigInitialize>:
{
    /* Use default Analog configuration settings in Flash by default. */

/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = rfalAnalogConfigCustomSettings;
 8008200:	4b04      	ldr	r3, [pc, #16]	@ (8008214 <rfalAnalogConfigInitialize+0x14>)
 8008202:	4a05      	ldr	r2, [pc, #20]	@ (8008218 <rfalAnalogConfigInitialize+0x18>)
 8008204:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
 8008206:	4a05      	ldr	r2, [pc, #20]	@ (800821c <rfalAnalogConfigInitialize+0x1c>)
 8008208:	8812      	ldrh	r2, [r2, #0]
 800820a:	809a      	strh	r2, [r3, #4]
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = rfalAnalogConfigDefaultSettings;
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 800820c:	2201      	movs	r2, #1
 800820e:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 8008210:	4770      	bx	lr
 8008212:	46c0      	nop			@ (mov r8, r8)
 8008214:	20000de8 	.word	0x20000de8
 8008218:	0801149e 	.word	0x0801149e
 800821c:	0801149c 	.word	0x0801149c

08008220 <rfalSetAnalogConfig>:
    return RFAL_ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 8008220:	b5f0      	push	{r4, r5, r6, r7, lr}
    rfalAnalogConfigNum numConfigSet;
    const rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = RFAL_ERR_NONE;
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 8008222:	4b2f      	ldr	r3, [pc, #188]	@ (80082e0 <rfalSetAnalogConfig+0xc0>)
{
 8008224:	0006      	movs	r6, r0
    if (true != gRfalAnalogConfigMgmt.ready)
 8008226:	799b      	ldrb	r3, [r3, #6]
    {
        return RFAL_ERR_REQUEST;
 8008228:	2005      	movs	r0, #5
{
 800822a:	b085      	sub	sp, #20
    if (true != gRfalAnalogConfigMgmt.ready)
 800822c:	2b00      	cmp	r3, #0
 800822e:	d025      	beq.n	800827c <rfalSetAnalogConfig+0x5c>
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 8008230:	23fe      	movs	r3, #254	@ 0xfe
 8008232:	01db      	lsls	r3, r3, #7
 8008234:	4033      	ands	r3, r6
 8008236:	9303      	str	r3, [sp, #12]
 8008238:	230f      	movs	r3, #15
    rfalAnalogConfigOffset configOffset = 0;
 800823a:	2400      	movs	r4, #0
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800823c:	4033      	ands	r3, r6
 800823e:	9301      	str	r3, [sp, #4]
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 8008240:	4b27      	ldr	r3, [pc, #156]	@ (80082e0 <rfalSetAnalogConfig+0xc0>)
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 8008242:	9a03      	ldr	r2, [sp, #12]
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 8008244:	681d      	ldr	r5, [r3, #0]
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 8008246:	2a00      	cmp	r2, #0
 8008248:	d01a      	beq.n	8008280 <rfalSetAnalogConfig+0x60>
 800824a:	4a26      	ldr	r2, [pc, #152]	@ (80082e4 <rfalSetAnalogConfig+0xc4>)
 800824c:	4332      	orrs	r2, r6
 800824e:	9901      	ldr	r1, [sp, #4]
 8008250:	2900      	cmp	r1, #0
 8008252:	d117      	bne.n	8008284 <rfalSetAnalogConfig+0x64>
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 8008254:	310f      	adds	r1, #15
 8008256:	430a      	orrs	r2, r1
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
    }
    
    
    i = *configOffset;
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8008258:	8899      	ldrh	r1, [r3, #4]
 800825a:	428c      	cmp	r4, r1
 800825c:	d20d      	bcs.n	800827a <rfalSetAnalogConfig+0x5a>
    {
        configTbl = &currentConfigTbl[i];
 800825e:	1928      	adds	r0, r5, r4
        foundConfigId = RFAL_GETU16(configTbl);
        if (configId == (foundConfigId & configIdMaskVal))
 8008260:	7807      	ldrb	r7, [r0, #0]
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
            return configTbl[sizeof(rfalAnalogConfigId)];
 8008262:	7883      	ldrb	r3, [r0, #2]
        if (configId == (foundConfigId & configIdMaskVal))
 8008264:	7840      	ldrb	r0, [r0, #1]
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 8008266:	3403      	adds	r4, #3
        if (configId == (foundConfigId & configIdMaskVal))
 8008268:	0200      	lsls	r0, r0, #8
 800826a:	4338      	orrs	r0, r7
 800826c:	ba40      	rev16	r0, r0
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 800826e:	b2a4      	uxth	r4, r4
        if (configId == (foundConfigId & configIdMaskVal))
 8008270:	4010      	ands	r0, r2
 8008272:	4286      	cmp	r6, r0
 8008274:	d10c      	bne.n	8008290 <rfalSetAnalogConfig+0x70>
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 8008276:	2bff      	cmp	r3, #255	@ 0xff
 8008278:	d10e      	bne.n	8008298 <rfalSetAnalogConfig+0x78>
    return retCode;
 800827a:	2000      	movs	r0, #0
} /* rfalSetAnalogConfig() */
 800827c:	b005      	add	sp, #20
 800827e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 8008280:	4a19      	ldr	r2, [pc, #100]	@ (80082e8 <rfalSetAnalogConfig+0xc8>)
 8008282:	e7e4      	b.n	800824e <rfalSetAnalogConfig+0x2e>
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 8008284:	9901      	ldr	r1, [sp, #4]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 8008286:	4332      	orrs	r2, r6
    if( (RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId) == RFAL_ANALOG_CONFIG_DPO) )
 8008288:	2904      	cmp	r1, #4
 800828a:	d1e5      	bne.n	8008258 <rfalSetAnalogConfig+0x38>
        configIdMaskVal = (RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK | RFAL_ANALOG_CONFIG_DIRECTION_MASK);
 800828c:	4a16      	ldr	r2, [pc, #88]	@ (80082e8 <rfalSetAnalogConfig+0xc8>)
 800828e:	e7e3      	b.n	8008258 <rfalSetAnalogConfig+0x38>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 8008290:	009b      	lsls	r3, r3, #2
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 8008292:	18e4      	adds	r4, r4, r3
 8008294:	b2a4      	uxth	r4, r4
 8008296:	e7e0      	b.n	800825a <rfalSetAnalogConfig+0x3a>
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 8008298:	009b      	lsls	r3, r3, #2
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uintptr_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 800829a:	192d      	adds	r5, r5, r4
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 800829c:	18e4      	adds	r4, r4, r3
 800829e:	b2a4      	uxth	r4, r4
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 80082a0:	3101      	adds	r1, #1
 80082a2:	42a1      	cmp	r1, r4
 80082a4:	d319      	bcc.n	80082da <rfalSetAnalogConfig+0xba>
            if( (RFAL_GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 80082a6:	2780      	movs	r7, #128	@ 0x80
 80082a8:	195b      	adds	r3, r3, r5
 80082aa:	9302      	str	r3, [sp, #8]
        for ( i = 0; i < numConfigSet; i++)
 80082ac:	9b02      	ldr	r3, [sp, #8]
 80082ae:	429d      	cmp	r5, r3
 80082b0:	d0c6      	beq.n	8008240 <rfalSetAnalogConfig+0x20>
            if( (RFAL_GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 80082b2:	786b      	ldrb	r3, [r5, #1]
 80082b4:	782a      	ldrb	r2, [r5, #0]
 80082b6:	021b      	lsls	r3, r3, #8
 80082b8:	4313      	orrs	r3, r2
 80082ba:	ba5b      	rev16	r3, r3
                RFAL_EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (RFAL_GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 80082bc:	78a9      	ldrb	r1, [r5, #2]
 80082be:	78ea      	ldrb	r2, [r5, #3]
 80082c0:	b298      	uxth	r0, r3
            if( (RFAL_GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 80082c2:	421f      	tst	r7, r3
 80082c4:	d006      	beq.n	80082d4 <rfalSetAnalogConfig+0xb4>
                RFAL_EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (RFAL_GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 80082c6:	43b8      	bics	r0, r7
 80082c8:	f7fb fd6d 	bl	8003da6 <rfalChipChangeTestRegBits>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d1d5      	bne.n	800827c <rfalSetAnalogConfig+0x5c>
        for ( i = 0; i < numConfigSet; i++)
 80082d0:	3504      	adds	r5, #4
 80082d2:	e7eb      	b.n	80082ac <rfalSetAnalogConfig+0x8c>
                RFAL_EXIT_ON_ERR(retCode, rfalChipChangeRegBits( RFAL_GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 80082d4:	f7fb fd56 	bl	8003d84 <rfalChipChangeRegBits>
 80082d8:	e7f8      	b.n	80082cc <rfalSetAnalogConfig+0xac>
            return RFAL_ERR_NOMEM;
 80082da:	2001      	movs	r0, #1
 80082dc:	e7ce      	b.n	800827c <rfalSetAnalogConfig+0x5c>
 80082de:	46c0      	nop			@ (mov r8, r8)
 80082e0:	20000de8 	.word	0x20000de8
 80082e4:	000080f0 	.word	0x000080f0
 80082e8:	0000ffff 	.word	0x0000ffff

080082ec <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 80082ec:	b570      	push	{r4, r5, r6, lr}
    uint16_t crc = preloadValue;
    uint16_t index;

    for (index = 0; index < length; index++)
 80082ee:	2400      	movs	r4, #0
 80082f0:	b2a3      	uxth	r3, r4
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d800      	bhi.n	80082f8 <rfalCrcCalculateCcitt+0xc>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
    }

    return crc;
}
 80082f6:	bd70      	pop	{r4, r5, r6, pc}
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
    uint16_t crc = crcSeed;
    uint8_t  dat = dataByte;
    
    dat ^= (uint8_t)(crc & 0xFFU);
 80082f8:	5d0b      	ldrb	r3, [r1, r4]
 80082fa:	3401      	adds	r4, #1
 80082fc:	4043      	eors	r3, r0
 80082fe:	b2db      	uxtb	r3, r3
    dat ^= (dat << 4);
 8008300:	001d      	movs	r5, r3
 8008302:	011e      	lsls	r6, r3, #4
 8008304:	b2f6      	uxtb	r6, r6
 8008306:	4075      	eors	r5, r6

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 8008308:	022e      	lsls	r6, r5, #8
 800830a:	00eb      	lsls	r3, r5, #3
 800830c:	4073      	eors	r3, r6
 800830e:	0a00      	lsrs	r0, r0, #8
 8008310:	4058      	eors	r0, r3
 8008312:	092d      	lsrs	r5, r5, #4
 8008314:	4068      	eors	r0, r5
    for (index = 0; index < length; index++)
 8008316:	e7eb      	b.n	80082f0 <rfalCrcCalculateCcitt+0x4>

08008318 <rfalIso15693PhyVCDCode1Of256>:
 *  \return RFAL_ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode rfalIso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 8008318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t tmp;
    ReturnCode err = RFAL_ERR_NONE;
    uint16_t a;
    uint8_t* outbuf = outbuffer;

    *outBufLen = 0;
 800831a:	2400      	movs	r4, #0
 800831c:	801c      	strh	r4, [r3, #0]

    if (maxOutBufLen < 64U) {
        return RFAL_ERR_NOMEM;
 800831e:	3401      	adds	r4, #1
    if (maxOutBufLen < 64U) {
 8008320:	2a3f      	cmp	r2, #63	@ 0x3f
 8008322:	d91c      	bls.n	800835e <rfalIso15693PhyVCDCode1Of256+0x46>
 8008324:	000a      	movs	r2, r1
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
                break;
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
                break;
 8008326:	2580      	movs	r5, #128	@ 0x80
                break;
 8008328:	2620      	movs	r6, #32
        switch (tmp)
 800832a:	2708      	movs	r7, #8
 800832c:	3240      	adds	r2, #64	@ 0x40
 800832e:	9201      	str	r2, [sp, #4]
 8008330:	3401      	adds	r4, #1
            default:
                *outbuf = 0;
                break;               
 8008332:	2200      	movs	r2, #0
        switch (tmp)
 8008334:	2803      	cmp	r0, #3
 8008336:	d804      	bhi.n	8008342 <rfalIso15693PhyVCDCode1Of256+0x2a>
 8008338:	f7f7 fef8 	bl	800012c <__gnu_thumb1_case_uqi>
 800833c:	15130217 	.word	0x15130217
 8008340:	003a      	movs	r2, r7
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 8008342:	700a      	strb	r2, [r1, #0]
        }
        outbuf++;
        (*outBufLen)++;
 8008344:	881a      	ldrh	r2, [r3, #0]
        tmp -= 4U;     /*  PRQA S 2911 # CERT INT30 - Intentional underflow, part of the coding */
 8008346:	3804      	subs	r0, #4
        (*outBufLen)++;
 8008348:	4694      	mov	ip, r2
 800834a:	2201      	movs	r2, #1
 800834c:	4494      	add	ip, r2
 800834e:	4662      	mov	r2, ip
 8008350:	801a      	strh	r2, [r3, #0]
    for (a = 0; a < 64U; a++)
 8008352:	9a01      	ldr	r2, [sp, #4]
        outbuf++;
 8008354:	3101      	adds	r1, #1
        tmp -= 4U;     /*  PRQA S 2911 # CERT INT30 - Intentional underflow, part of the coding */
 8008356:	b2c0      	uxtb	r0, r0
    for (a = 0; a < 64U; a++)
 8008358:	4291      	cmp	r1, r2
 800835a:	d1ea      	bne.n	8008332 <rfalIso15693PhyVCDCode1Of256+0x1a>
 800835c:	2400      	movs	r4, #0
    }

    return err;
}
 800835e:	0020      	movs	r0, r4
 8008360:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                break;
 8008362:	0032      	movs	r2, r6
 8008364:	e7ed      	b.n	8008342 <rfalIso15693PhyVCDCode1Of256+0x2a>
                break;
 8008366:	002a      	movs	r2, r5
 8008368:	e7eb      	b.n	8008342 <rfalIso15693PhyVCDCode1Of256+0x2a>
        switch (tmp)
 800836a:	0022      	movs	r2, r4
 800836c:	e7e9      	b.n	8008342 <rfalIso15693PhyVCDCode1Of256+0x2a>

0800836e <rfalIso15693PhyVCDCode1Of4>:
{
 800836e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008370:	0004      	movs	r4, r0
    *outBufLen = 0;
 8008372:	2000      	movs	r0, #0
 8008374:	8018      	strh	r0, [r3, #0]
        return RFAL_ERR_NOMEM;
 8008376:	3001      	adds	r0, #1
    if (maxOutBufLen < 4U) {
 8008378:	2a03      	cmp	r2, #3
 800837a:	d917      	bls.n	80083ac <rfalIso15693PhyVCDCode1Of4+0x3e>
 800837c:	2503      	movs	r5, #3
        switch (tmp & 0x3U)
 800837e:	2608      	movs	r6, #8
 8008380:	1d08      	adds	r0, r1, #4
 8008382:	0027      	movs	r7, r4
 8008384:	2220      	movs	r2, #32
 8008386:	402f      	ands	r7, r5
 8008388:	2f02      	cmp	r7, #2
 800838a:	d006      	beq.n	800839a <rfalIso15693PhyVCDCode1Of4+0x2c>
 800838c:	3260      	adds	r2, #96	@ 0x60
 800838e:	2f03      	cmp	r7, #3
 8008390:	d003      	beq.n	800839a <rfalIso15693PhyVCDCode1Of4+0x2c>
 8008392:	0032      	movs	r2, r6
 8008394:	2f01      	cmp	r7, #1
 8008396:	d000      	beq.n	800839a <rfalIso15693PhyVCDCode1Of4+0x2c>
 8008398:	2202      	movs	r2, #2
                *outbuf = ISO15693_DAT_00_1_4;
 800839a:	700a      	strb	r2, [r1, #0]
        (*outBufLen)++;
 800839c:	881a      	ldrh	r2, [r3, #0]
        outbuf++;
 800839e:	3101      	adds	r1, #1
        (*outBufLen)++;
 80083a0:	3201      	adds	r2, #1
 80083a2:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 80083a4:	08a4      	lsrs	r4, r4, #2
    for (a = 0; a < 4U; a++)
 80083a6:	4281      	cmp	r1, r0
 80083a8:	d1eb      	bne.n	8008382 <rfalIso15693PhyVCDCode1Of4+0x14>
 80083aa:	2000      	movs	r0, #0
}
 80083ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080083b0 <rfalIso15693PhyConfigure>:
{
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	0004      	movs	r4, r0
    RFAL_MEMCPY( (uint8_t*)&gIso15693PhyConfig, (const uint8_t*)config, sizeof(rfalIso15693PhyConfig_t));
 80083b4:	2208      	movs	r2, #8
{
 80083b6:	000d      	movs	r5, r1
    RFAL_MEMCPY( (uint8_t*)&gIso15693PhyConfig, (const uint8_t*)config, sizeof(rfalIso15693PhyConfig_t));
 80083b8:	4807      	ldr	r0, [pc, #28]	@ (80083d8 <rfalIso15693PhyConfigure+0x28>)
 80083ba:	0021      	movs	r1, r4
 80083bc:	f007 ffb8 	bl	8010330 <memcpy>
    if ( config->speedMode <= 3U)
 80083c0:	2303      	movs	r3, #3
 80083c2:	6862      	ldr	r2, [r4, #4]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d801      	bhi.n	80083cc <rfalIso15693PhyConfigure+0x1c>
        auxConfig.report_period_length = (3U - (uint8_t)config->speedMode);
 80083c8:	1a9b      	subs	r3, r3, r2
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	4a03      	ldr	r2, [pc, #12]	@ (80083dc <rfalIso15693PhyConfigure+0x2c>)
}
 80083ce:	2000      	movs	r0, #0
 80083d0:	70d3      	strb	r3, [r2, #3]
    *needed_stream_config = &auxConfig;
 80083d2:	602a      	str	r2, [r5, #0]
}
 80083d4:	bd70      	pop	{r4, r5, r6, pc}
 80083d6:	46c0      	nop			@ (mov r8, r8)
 80083d8:	20000df0 	.word	0x20000df0
 80083dc:	2000001c 	.word	0x2000001c

080083e0 <rfalIso15693VCDCode>:
{
 80083e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083e2:	b087      	sub	sp, #28
 80083e4:	9203      	str	r2, [sp, #12]
 80083e6:	aa0c      	add	r2, sp, #48	@ 0x30
 80083e8:	7812      	ldrb	r2, [r2, #0]
 80083ea:	000c      	movs	r4, r1
 80083ec:	9202      	str	r2, [sp, #8]
 80083ee:	aa10      	add	r2, sp, #64	@ 0x40
 80083f0:	8815      	ldrh	r5, [r2, #0]
    *actOutBufSize = 0;
 80083f2:	2200      	movs	r2, #0
{
 80083f4:	9001      	str	r0, [sp, #4]
    *actOutBufSize = 0;
 80083f6:	9811      	ldr	r0, [sp, #68]	@ 0x44
{
 80083f8:	990d      	ldr	r1, [sp, #52]	@ 0x34
    *actOutBufSize = 0;
 80083fa:	8002      	strh	r2, [r0, #0]
    crc_len = (uint8_t)((sendCrc)?2:0);
 80083fc:	9a03      	ldr	r2, [sp, #12]
    if (ISO15693_VCD_CODING_1_4 == gIso15693PhyConfig.coding)
 80083fe:	4863      	ldr	r0, [pc, #396]	@ (800858c <rfalIso15693VCDCode+0x1ac>)
    crc_len = (uint8_t)((sendCrc)?2:0);
 8008400:	0052      	lsls	r2, r2, #1
                  + ((length + (uint16_t)crc_len) * 4U)
 8008402:	b2d2      	uxtb	r2, r2
    if (ISO15693_VCD_CODING_1_4 == gIso15693PhyConfig.coding)
 8008404:	7800      	ldrb	r0, [r0, #0]
                  + ((length + (uint16_t)crc_len) * 4U)
 8008406:	1912      	adds	r2, r2, r4
                  + 1U) /* EOF */
 8008408:	b292      	uxth	r2, r2
    if (ISO15693_VCD_CODING_1_4 == gIso15693PhyConfig.coding)
 800840a:	2800      	cmp	r0, #0
 800840c:	d109      	bne.n	8008422 <rfalIso15693VCDCode+0x42>
                  + 1U) /* EOF */
 800840e:	0092      	lsls	r2, r2, #2
 8008410:	3202      	adds	r2, #2
        *subbit_total_length = (
 8008412:	800a      	strh	r2, [r1, #0]
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 8008414:	2d04      	cmp	r5, #4
 8008416:	d826      	bhi.n	8008466 <rfalIso15693VCDCode+0x86>
            return RFAL_ERR_NOMEM;
 8008418:	2301      	movs	r3, #1
        return RFAL_ERR_AGAIN;
 800841a:	9300      	str	r3, [sp, #0]
}
 800841c:	9800      	ldr	r0, [sp, #0]
 800841e:	b007      	add	sp, #28
 8008420:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  + 1U) /* EOF */
 8008422:	0192      	lsls	r2, r2, #6
 8008424:	3202      	adds	r2, #2
        *subbit_total_length = (
 8008426:	800a      	strh	r2, [r1, #0]
        if (*offset != 0U)
 8008428:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800842a:	8812      	ldrh	r2, [r2, #0]
 800842c:	2a00      	cmp	r2, #0
 800842e:	d005      	beq.n	800843c <rfalIso15693VCDCode+0x5c>
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 8008430:	2d3f      	cmp	r5, #63	@ 0x3f
 8008432:	d9f1      	bls.n	8008418 <rfalIso15693VCDCode+0x38>
    if (length == 0U)
 8008434:	4f56      	ldr	r7, [pc, #344]	@ (8008590 <rfalIso15693VCDCode+0x1b0>)
 8008436:	2c00      	cmp	r4, #0
 8008438:	d022      	beq.n	8008480 <rfalIso15693VCDCode+0xa0>
 800843a:	e01d      	b.n	8008478 <rfalIso15693VCDCode+0x98>
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 800843c:	2d40      	cmp	r5, #64	@ 0x40
 800843e:	d9eb      	bls.n	8008418 <rfalIso15693VCDCode+0x38>
    if (length == 0U)
 8008440:	4f53      	ldr	r7, [pc, #332]	@ (8008590 <rfalIso15693VCDCode+0x1b0>)
 8008442:	2c00      	cmp	r4, #0
 8008444:	d01c      	beq.n	8008480 <rfalIso15693VCDCode+0xa0>
        sof = ISO15693_DAT_SOF_1_256;
 8008446:	2181      	movs	r1, #129	@ 0x81
    if ((length != 0U) && (0U == *offset) && sendFlags && (!picopassMode))
 8008448:	2b00      	cmp	r3, #0
 800844a:	d11c      	bne.n	8008486 <rfalIso15693VCDCode+0xa6>
        *outputBuf = sof; 
 800844c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
        (*actOutBufSize)++;
 800844e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
        *outputBuf = sof; 
 8008450:	7019      	strb	r1, [r3, #0]
        (*actOutBufSize)++;
 8008452:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        outputBufSize--;
 8008454:	3d01      	subs	r5, #1
        (*actOutBufSize)++;
 8008456:	881b      	ldrh	r3, [r3, #0]
        outputBufSize--;
 8008458:	b2ad      	uxth	r5, r5
        (*actOutBufSize)++;
 800845a:	3301      	adds	r3, #1
 800845c:	8013      	strh	r3, [r2, #0]
        outputBuf++;
 800845e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008460:	3301      	adds	r3, #1
 8008462:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008464:	e008      	b.n	8008478 <rfalIso15693VCDCode+0x98>
    if (length == 0U)
 8008466:	4a4b      	ldr	r2, [pc, #300]	@ (8008594 <rfalIso15693VCDCode+0x1b4>)
 8008468:	2c00      	cmp	r4, #0
 800846a:	d008      	beq.n	800847e <rfalIso15693VCDCode+0x9e>
    if ((length != 0U) && (0U == *offset) && sendFlags && (!picopassMode))
 800846c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800846e:	0017      	movs	r7, r2
 8008470:	8808      	ldrh	r0, [r1, #0]
 8008472:	2121      	movs	r1, #33	@ 0x21
 8008474:	2800      	cmp	r0, #0
 8008476:	d0e7      	beq.n	8008448 <rfalIso15693VCDCode+0x68>
        txFunc = rfalIso15693PhyVCDCode1Of256;
 8008478:	2300      	movs	r3, #0
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	e02e      	b.n	80084dc <rfalIso15693VCDCode+0xfc>
 800847e:	0017      	movs	r7, r2
        *subbit_total_length = 1;
 8008480:	2301      	movs	r3, #1
 8008482:	800b      	strh	r3, [r1, #0]
    if ((length != 0U) && (0U == *offset))
 8008484:	e7f8      	b.n	8008478 <rfalIso15693VCDCode+0x98>
    if ((length != 0U) && (0U == *offset) && sendFlags && (!picopassMode))
 8008486:	9b02      	ldr	r3, [sp, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1df      	bne.n	800844c <rfalIso15693VCDCode+0x6c>
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 800848c:	9b01      	ldr	r3, [sp, #4]
 800848e:	781a      	ldrb	r2, [r3, #0]
 8008490:	2301      	movs	r3, #1
 8008492:	439a      	bics	r2, r3
 8008494:	18db      	adds	r3, r3, r3
 8008496:	4313      	orrs	r3, r2
 8008498:	9a01      	ldr	r2, [sp, #4]
 800849a:	7013      	strb	r3, [r2, #0]
    if ((length != 0U) && (0U == *offset))
 800849c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d0d3      	beq.n	800844c <rfalIso15693VCDCode+0x6c>
 80084a4:	e7e8      	b.n	8008478 <rfalIso15693VCDCode+0x98>
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 80084a6:	aa04      	add	r2, sp, #16
 80084a8:	1d96      	adds	r6, r2, #6
 80084aa:	9a01      	ldr	r2, [sp, #4]
 80084ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80084ae:	5cd0      	ldrb	r0, [r2, r3]
 80084b0:	002a      	movs	r2, r5
 80084b2:	0033      	movs	r3, r6
 80084b4:	47b8      	blx	r7
        (*actOutBufSize) += filled_size;
 80084b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80084b8:	8833      	ldrh	r3, [r6, #0]
 80084ba:	8812      	ldrh	r2, [r2, #0]
 80084bc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80084be:	189a      	adds	r2, r3, r2
 80084c0:	800a      	strh	r2, [r1, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 80084c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
        outputBufSize -= filled_size;
 80084c4:	1aed      	subs	r5, r5, r3
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 80084c6:	18d2      	adds	r2, r2, r3
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 80084c8:	9000      	str	r0, [sp, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 80084ca:	920f      	str	r2, [sp, #60]	@ 0x3c
        outputBufSize -= filled_size;
 80084cc:	b2ad      	uxth	r5, r5
        if (err == RFAL_ERR_NONE) {
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d104      	bne.n	80084dc <rfalIso15693VCDCode+0xfc>
            (*offset)++;
 80084d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	3301      	adds	r3, #1
 80084da:	8013      	strh	r3, [r2, #0]
    while ((*offset < length) && (err == RFAL_ERR_NONE))
 80084dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084de:	9a00      	ldr	r2, [sp, #0]
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	d203      	bcs.n	80084ee <rfalIso15693VCDCode+0x10e>
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	d0dd      	beq.n	80084a6 <rfalIso15693VCDCode+0xc6>
        return RFAL_ERR_AGAIN;
 80084ea:	230d      	movs	r3, #13
 80084ec:	e795      	b.n	800841a <rfalIso15693VCDCode+0x3a>
    if (err != RFAL_ERR_NONE) {
 80084ee:	2a00      	cmp	r2, #0
 80084f0:	d1fb      	bne.n	80084ea <rfalIso15693VCDCode+0x10a>
    while ((err == RFAL_ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 80084f2:	9a03      	ldr	r2, [sp, #12]
    uint16_t crc = 0;
 80084f4:	9e00      	ldr	r6, [sp, #0]
    while ((err == RFAL_ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 80084f6:	2a00      	cmp	r2, #0
 80084f8:	d13c      	bne.n	8008574 <rfalIso15693VCDCode+0x194>
    if (((!sendCrc) && (*offset == length))
 80084fa:	42a3      	cmp	r3, r4
 80084fc:	d1f5      	bne.n	80084ea <rfalIso15693VCDCode+0x10a>
        *outputBuf = eof; 
 80084fe:	2304      	movs	r3, #4
 8008500:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008502:	7013      	strb	r3, [r2, #0]
        (*actOutBufSize)++;
 8008504:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008506:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	3301      	adds	r3, #1
 800850c:	8013      	strh	r3, [r2, #0]
    return err;
 800850e:	e785      	b.n	800841c <rfalIso15693VCDCode+0x3c>
        if ((0U==crc) && (length != 0U))
 8008510:	2e00      	cmp	r6, #0
 8008512:	d111      	bne.n	8008538 <rfalIso15693VCDCode+0x158>
 8008514:	2c00      	cmp	r4, #0
 8008516:	d00f      	beq.n	8008538 <rfalIso15693VCDCode+0x158>
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8008518:	9b02      	ldr	r3, [sp, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d031      	beq.n	8008582 <rfalIso15693VCDCode+0x1a2>
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	1e62      	subs	r2, r4, #1
 8008522:	481d      	ldr	r0, [pc, #116]	@ (8008598 <rfalIso15693VCDCode+0x1b8>)
 8008524:	1c59      	adds	r1, r3, #1
 8008526:	b292      	uxth	r2, r2
 8008528:	f7ff fee0 	bl	80082ec <rfalCrcCalculateCcitt>
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800852c:	9b02      	ldr	r3, [sp, #8]
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 800852e:	0006      	movs	r6, r0
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <rfalIso15693VCDCode+0x158>
 8008534:	43c6      	mvns	r6, r0
 8008536:	b2b6      	uxth	r6, r6
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 8008538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800853a:	aa05      	add	r2, sp, #20
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 800853c:	881b      	ldrh	r3, [r3, #0]
        transbuf[0] = (uint8_t)(crc & 0xffU);
 800853e:	8016      	strh	r6, [r2, #0]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 8008540:	1b1b      	subs	r3, r3, r4
 8008542:	5cd0      	ldrb	r0, [r2, r3]
 8008544:	ab04      	add	r3, sp, #16
 8008546:	002a      	movs	r2, r5
 8008548:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800854a:	3306      	adds	r3, #6
 800854c:	47b8      	blx	r7
        (*actOutBufSize) += filled_size;
 800854e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008550:	ab04      	add	r3, sp, #16
 8008552:	88db      	ldrh	r3, [r3, #6]
 8008554:	8812      	ldrh	r2, [r2, #0]
 8008556:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008558:	189a      	adds	r2, r3, r2
 800855a:	800a      	strh	r2, [r1, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800855c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
        outputBufSize -= filled_size;
 800855e:	1aed      	subs	r5, r5, r3
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 8008560:	18d2      	adds	r2, r2, r3
 8008562:	920f      	str	r2, [sp, #60]	@ 0x3c
        outputBufSize -= filled_size;
 8008564:	b2ad      	uxth	r5, r5
        if (err == RFAL_ERR_NONE) {
 8008566:	2800      	cmp	r0, #0
 8008568:	d1bf      	bne.n	80084ea <rfalIso15693VCDCode+0x10a>
            (*offset)++;
 800856a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800856c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	3301      	adds	r3, #1
 8008572:	8013      	strh	r3, [r2, #0]
    while ((err == RFAL_ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 8008574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008576:	881a      	ldrh	r2, [r3, #0]
 8008578:	1ca3      	adds	r3, r4, #2
 800857a:	429a      	cmp	r2, r3
 800857c:	d3c8      	bcc.n	8008510 <rfalIso15693VCDCode+0x130>
            || (sendCrc && (*offset == (length + 2U))))
 800857e:	d0be      	beq.n	80084fe <rfalIso15693VCDCode+0x11e>
 8008580:	e7b3      	b.n	80084ea <rfalIso15693VCDCode+0x10a>
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8008582:	0022      	movs	r2, r4
 8008584:	9901      	ldr	r1, [sp, #4]
 8008586:	4805      	ldr	r0, [pc, #20]	@ (800859c <rfalIso15693VCDCode+0x1bc>)
 8008588:	e7ce      	b.n	8008528 <rfalIso15693VCDCode+0x148>
 800858a:	46c0      	nop			@ (mov r8, r8)
 800858c:	20000df0 	.word	0x20000df0
 8008590:	08008319 	.word	0x08008319
 8008594:	0800836f 	.word	0x0800836f
 8008598:	0000e012 	.word	0x0000e012
 800859c:	0000ffff 	.word	0x0000ffff

080085a0 <rfalIso15693VICCDecode>:
{
 80085a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    *bitsBeforeCol = 0;
 80085a2:	2400      	movs	r4, #0
{
 80085a4:	0017      	movs	r7, r2
    if ((inBuf[0] & 0x1fU) != 0x17U)
 80085a6:	221f      	movs	r2, #31
{
 80085a8:	b087      	sub	sp, #28
 80085aa:	001d      	movs	r5, r3
 80085ac:	ab0e      	add	r3, sp, #56	@ 0x38
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	0006      	movs	r6, r0
 80085b2:	9305      	str	r3, [sp, #20]
 80085b4:	ab0f      	add	r3, sp, #60	@ 0x3c
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	9100      	str	r1, [sp, #0]
 80085ba:	9301      	str	r3, [sp, #4]
    *bitsBeforeCol = 0;
 80085bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085be:	801c      	strh	r4, [r3, #0]
    *outBufPos = 0;
 80085c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085c2:	801c      	strh	r4, [r3, #0]
    if ((inBuf[0] & 0x1fU) != 0x17U)
 80085c4:	7803      	ldrb	r3, [r0, #0]
		return RFAL_ERR_FRAMING;
 80085c6:	2009      	movs	r0, #9
    if ((inBuf[0] & 0x1fU) != 0x17U)
 80085c8:	4013      	ands	r3, r2
 80085ca:	2b17      	cmp	r3, #23
 80085cc:	d102      	bne.n	80085d4 <rfalIso15693VICCDecode+0x34>
    if (outBufLen == 0U)
 80085ce:	42a5      	cmp	r5, r4
 80085d0:	d102      	bne.n	80085d8 <rfalIso15693VICCDecode+0x38>
        return RFAL_ERR_NONE;
 80085d2:	2000      	movs	r0, #0
}
 80085d4:	b007      	add	sp, #28
 80085d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RFAL_MEMSET(outBuf,0,outBufLen);
 80085d8:	002a      	movs	r2, r5
 80085da:	0021      	movs	r1, r4
 80085dc:	0038      	movs	r0, r7
 80085de:	f007 fe73 	bl	80102c8 <memset>
    if (inBufLen == 0U)
 80085e2:	9b00      	ldr	r3, [sp, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d06f      	beq.n	80086c8 <rfalIso15693VICCDecode+0x128>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	3b02      	subs	r3, #2
 80085ec:	9304      	str	r3, [sp, #16]
        if ( (bp >= (outBufLen * 8U)) || (err == RFAL_ERR_RF_COLLISION) || isEOF )        
 80085ee:	00eb      	lsls	r3, r5, #3
    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 80085f0:	2205      	movs	r2, #5
        if ( (bp >= (outBufLen * 8U)) || (err == RFAL_ERR_RF_COLLISION) || isEOF )        
 80085f2:	9302      	str	r3, [sp, #8]
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 80085f4:	2307      	movs	r3, #7
    ReturnCode err = RFAL_ERR_NONE;
 80085f6:	0020      	movs	r0, r4
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 80085f8:	0011      	movs	r1, r2
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 80085fa:	469c      	mov	ip, r3
 80085fc:	08d3      	lsrs	r3, r2, #3
 80085fe:	18f5      	adds	r5, r6, r3
 8008600:	9500      	str	r5, [sp, #0]
 8008602:	4665      	mov	r5, ip
 8008604:	5cf3      	ldrb	r3, [r6, r3]
 8008606:	4015      	ands	r5, r2
 8008608:	412b      	asrs	r3, r5
 800860a:	2501      	movs	r5, #1
 800860c:	402b      	ands	r3, r5
 800860e:	9303      	str	r3, [sp, #12]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 8008610:	4663      	mov	r3, ip
 8008612:	1949      	adds	r1, r1, r5
 8008614:	08cd      	lsrs	r5, r1, #3
 8008616:	5d75      	ldrb	r5, [r6, r5]
 8008618:	4019      	ands	r1, r3
 800861a:	410d      	asrs	r5, r1
 800861c:	2302      	movs	r3, #2
 800861e:	006d      	lsls	r5, r5, #1
 8008620:	401d      	ands	r5, r3
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	432b      	orrs	r3, r5
        if (1U == man)
 8008626:	2b01      	cmp	r3, #1
 8008628:	d150      	bne.n	80086cc <rfalIso15693VICCDecode+0x12c>
            bp++;
 800862a:	3401      	adds	r4, #1
 800862c:	b2a4      	uxth	r4, r4
        if ((bp%8U) == 0U)
 800862e:	4661      	mov	r1, ip
 8008630:	420c      	tst	r4, r1
 8008632:	d165      	bne.n	8008700 <rfalIso15693VICCDecode+0x160>
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 8008634:	251f      	movs	r5, #31
 8008636:	9900      	ldr	r1, [sp, #0]
 8008638:	7809      	ldrb	r1, [r1, #0]
 800863a:	43a9      	bics	r1, r5
 800863c:	29a0      	cmp	r1, #160	@ 0xa0
 800863e:	d15f      	bne.n	8008700 <rfalIso15693VICCDecode+0x160>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 8008640:	9900      	ldr	r1, [sp, #0]
 8008642:	7849      	ldrb	r1, [r1, #1]
        if ( ((0U == man) || (3U == man)) && (!isEOF) )
 8008644:	2b00      	cmp	r3, #0
 8008646:	d04e      	beq.n	80086e6 <rfalIso15693VICCDecode+0x146>
 8008648:	2b03      	cmp	r3, #3
 800864a:	d04c      	beq.n	80086e6 <rfalIso15693VICCDecode+0x146>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 800864c:	1ecb      	subs	r3, r1, #3
 800864e:	4259      	negs	r1, r3
 8008650:	414b      	adcs	r3, r1
 8008652:	b2db      	uxtb	r3, r3
        if ( (bp >= (outBufLen * 8U)) || (err == RFAL_ERR_RF_COLLISION) || isEOF )        
 8008654:	9902      	ldr	r1, [sp, #8]
 8008656:	428c      	cmp	r4, r1
 8008658:	d209      	bcs.n	800866e <rfalIso15693VICCDecode+0xce>
 800865a:	281d      	cmp	r0, #29
 800865c:	d007      	beq.n	800866e <rfalIso15693VICCDecode+0xce>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d105      	bne.n	800866e <rfalIso15693VICCDecode+0xce>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 8008662:	3202      	adds	r2, #2
 8008664:	9b04      	ldr	r3, [sp, #16]
 8008666:	b292      	uxth	r2, r2
 8008668:	0011      	movs	r1, r2
 800866a:	429a      	cmp	r2, r3
 800866c:	d3c6      	bcc.n	80085fc <rfalIso15693VICCDecode+0x5c>
    *outBufPos = (bp / 8U);
 800866e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008670:	08e3      	lsrs	r3, r4, #3
 8008672:	8013      	strh	r3, [r2, #0]
    *bitsBeforeCol = bp;
 8008674:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008676:	801c      	strh	r4, [r3, #0]
    if (err != RFAL_ERR_NONE) 
 8008678:	2800      	cmp	r0, #0
 800867a:	d1ab      	bne.n	80085d4 <rfalIso15693VICCDecode+0x34>
    if ((bp%8U) != 0U)
 800867c:	0764      	lsls	r4, r4, #29
 800867e:	d123      	bne.n	80086c8 <rfalIso15693VICCDecode+0x128>
    if (*outBufPos > 2U)
 8008680:	8812      	ldrh	r2, [r2, #0]
 8008682:	2a02      	cmp	r2, #2
 8008684:	d920      	bls.n	80086c8 <rfalIso15693VICCDecode+0x128>
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	3a02      	subs	r2, #2
 800868a:	4258      	negs	r0, r3
 800868c:	4158      	adcs	r0, r3
 800868e:	4b1f      	ldr	r3, [pc, #124]	@ (800870c <rfalIso15693VICCDecode+0x16c>)
 8008690:	4240      	negs	r0, r0
 8008692:	4018      	ands	r0, r3
 8008694:	4b1e      	ldr	r3, [pc, #120]	@ (8008710 <rfalIso15693VICCDecode+0x170>)
 8008696:	0039      	movs	r1, r7
 8008698:	18c0      	adds	r0, r0, r3
 800869a:	b292      	uxth	r2, r2
 800869c:	f7ff fe26 	bl	80082ec <rfalCrcCalculateCcitt>
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 80086a0:	9b01      	ldr	r3, [sp, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <rfalIso15693VICCDecode+0x10a>
 80086a6:	43c0      	mvns	r0, r0
 80086a8:	b280      	uxth	r0, r0
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 80086aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	18fb      	adds	r3, r7, r3
 80086b0:	1e9a      	subs	r2, r3, #2
 80086b2:	7811      	ldrb	r1, [r2, #0]
 80086b4:	b2c2      	uxtb	r2, r0
 80086b6:	4291      	cmp	r1, r2
 80086b8:	d106      	bne.n	80086c8 <rfalIso15693VICCDecode+0x128>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 80086ba:	3b01      	subs	r3, #1
 80086bc:	0a00      	lsrs	r0, r0, #8
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	b280      	uxth	r0, r0
 80086c2:	4283      	cmp	r3, r0
 80086c4:	d100      	bne.n	80086c8 <rfalIso15693VICCDecode+0x128>
 80086c6:	e784      	b.n	80085d2 <rfalIso15693VICCDecode+0x32>
        return RFAL_ERR_CRC;
 80086c8:	2015      	movs	r0, #21
 80086ca:	e783      	b.n	80085d4 <rfalIso15693VICCDecode+0x34>
        if (2U == man)
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d1ae      	bne.n	800862e <rfalIso15693VICCDecode+0x8e>
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 80086d0:	4661      	mov	r1, ip
 80086d2:	2501      	movs	r5, #1
 80086d4:	4021      	ands	r1, r4
 80086d6:	408d      	lsls	r5, r1
 80086d8:	0029      	movs	r1, r5
 80086da:	08e5      	lsrs	r5, r4, #3
 80086dc:	5d7d      	ldrb	r5, [r7, r5]
 80086de:	4329      	orrs	r1, r5
 80086e0:	08e5      	lsrs	r5, r4, #3
 80086e2:	5579      	strb	r1, [r7, r5]
 80086e4:	e7a1      	b.n	800862a <rfalIso15693VICCDecode+0x8a>
 80086e6:	2301      	movs	r3, #1
        if ( ((0U == man) || (3U == man)) && (!isEOF) )
 80086e8:	2903      	cmp	r1, #3
 80086ea:	d0b3      	beq.n	8008654 <rfalIso15693VICCDecode+0xb4>
            if (bp >= ignoreBits)
 80086ec:	9b05      	ldr	r3, [sp, #20]
 80086ee:	429c      	cmp	r4, r3
 80086f0:	d203      	bcs.n	80086fa <rfalIso15693VICCDecode+0x15a>
                bp++;
 80086f2:	3401      	adds	r4, #1
 80086f4:	b2a4      	uxth	r4, r4
        if ( ((0U == man) || (3U == man)) && (!isEOF) )
 80086f6:	2300      	movs	r3, #0
 80086f8:	e7ac      	b.n	8008654 <rfalIso15693VICCDecode+0xb4>
 80086fa:	2300      	movs	r3, #0
                err = RFAL_ERR_RF_COLLISION;
 80086fc:	201d      	movs	r0, #29
 80086fe:	e7a9      	b.n	8008654 <rfalIso15693VICCDecode+0xb4>
        if ( ((0U == man) || (3U == man)) && (!isEOF) )
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0f3      	beq.n	80086ec <rfalIso15693VICCDecode+0x14c>
 8008704:	2b03      	cmp	r3, #3
 8008706:	d1f6      	bne.n	80086f6 <rfalIso15693VICCDecode+0x156>
 8008708:	e7f0      	b.n	80086ec <rfalIso15693VICCDecode+0x14c>
 800870a:	46c0      	nop			@ (mov r8, r8)
 800870c:	00001fed 	.word	0x00001fed
 8008710:	0000e012 	.word	0x0000e012

08008714 <rfalIsoDepClearCounters>:
 */

/*******************************************************************************/
static void rfalIsoDepClearCounters( void )
{
    gIsoDep.cntIRetrys    = 0;
 8008714:	2200      	movs	r2, #0
 8008716:	4b02      	ldr	r3, [pc, #8]	@ (8008720 <rfalIsoDepClearCounters+0xc>)
 8008718:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys    = 0;
 800871a:	80da      	strh	r2, [r3, #6]
    gIsoDep.cntSDslRetrys = 0;
    gIsoDep.cntSWtxRetrys = 0;
 800871c:	811a      	strh	r2, [r3, #8]
    gIsoDep.cntSWtxNack   = 0;
}
 800871e:	4770      	bx	lr
 8008720:	20000df8 	.word	0x20000df8

08008724 <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 8008724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8008726:	2440      	movs	r4, #64	@ 0x40
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) || (curMaxBR == RFAL_BR_KEEP) )
 8008728:	2608      	movs	r6, #8
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800872a:	400c      	ands	r4, r1
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) || (curMaxBR == RFAL_BR_KEEP) )
 800872c:	400e      	ands	r6, r1
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800872e:	9401      	str	r4, [sp, #4]
        (*dsi) = RFAL_BR_106;
 8008730:	2400      	movs	r4, #0
 8008732:	7014      	strb	r4, [r2, #0]
        (*dri) = RFAL_BR_106;
 8008734:	701c      	strb	r4, [r3, #0]
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) || (curMaxBR == RFAL_BR_KEEP) )
 8008736:	1e34      	subs	r4, r6, #0
 8008738:	d139      	bne.n	80087ae <rfalIsoDepCalcBitRate+0x8a>
 800873a:	2803      	cmp	r0, #3
 800873c:	d837      	bhi.n	80087ae <rfalIsoDepCalcBitRate+0x8a>
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800873e:	9d01      	ldr	r5, [sp, #4]
 8008740:	2d00      	cmp	r5, #0
 8008742:	d001      	beq.n	8008748 <rfalIsoDepCalcBitRate+0x24>
 8008744:	2803      	cmp	r0, #3
 8008746:	d033      	beq.n	80087b0 <rfalIsoDepCalcBitRate+0x8c>
 8008748:	068d      	lsls	r5, r1, #26
 800874a:	d501      	bpl.n	8008750 <rfalIsoDepCalcBitRate+0x2c>
 800874c:	2801      	cmp	r0, #1
 800874e:	d831      	bhi.n	80087b4 <rfalIsoDepCalcBitRate+0x90>
 8008750:	06cd      	lsls	r5, r1, #27
 8008752:	d503      	bpl.n	800875c <rfalIsoDepCalcBitRate+0x38>
 8008754:	2800      	cmp	r0, #0
 8008756:	d001      	beq.n	800875c <rfalIsoDepCalcBitRate+0x38>
            {
                const uint8_t newdsi = ((uint8_t) i) + 1U;
 8008758:	3401      	adds	r4, #1
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 800875a:	7014      	strb	r4, [r2, #0]
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800875c:	2701      	movs	r7, #1
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 800875e:	2407      	movs	r4, #7
 8008760:	2502      	movs	r5, #2
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8008762:	46bc      	mov	ip, r7
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 8008764:	400c      	ands	r4, r1
 8008766:	9400      	str	r4, [sp, #0]
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8008768:	9f00      	ldr	r7, [sp, #0]
 800876a:	4664      	mov	r4, ip
 800876c:	40ef      	lsrs	r7, r5
 800876e:	4227      	tst	r7, r4
 8008770:	d022      	beq.n	80087b8 <rfalIsoDepCalcBitRate+0x94>
 8008772:	1c6f      	adds	r7, r5, #1
 8008774:	42b8      	cmp	r0, r7
 8008776:	d31f      	bcc.n	80087b8 <rfalIsoDepCalcBitRate+0x94>
            {
                const uint8_t newdri = ((uint8_t) i) + 1U;
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8008778:	701f      	strb	r7, [r3, #0]
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 800877a:	b248      	sxtb	r0, r1
 800877c:	2800      	cmp	r0, #0
 800877e:	da16      	bge.n	80087ae <rfalIsoDepCalcBitRate+0x8a>
        {   
            (*dsi) = RFAL_MIN((*dsi), (*dri));
 8008780:	781f      	ldrb	r7, [r3, #0]
 8008782:	7810      	ldrb	r0, [r2, #0]
 8008784:	1c3d      	adds	r5, r7, #0
 8008786:	4287      	cmp	r7, r0
 8008788:	d900      	bls.n	800878c <rfalIsoDepCalcBitRate+0x68>
 800878a:	1c05      	adds	r5, r0, #0
 800878c:	b2e8      	uxtb	r0, r5
 800878e:	7015      	strb	r5, [r2, #0]
            (*dri) = (*dsi);
 8008790:	701d      	strb	r5, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8008792:	2800      	cmp	r0, #0
 8008794:	d00b      	beq.n	80087ae <rfalIsoDepCalcBitRate+0x8a>
 8008796:	2510      	movs	r5, #16
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8008798:	2770      	movs	r7, #112	@ 0x70
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 800879a:	1e44      	subs	r4, r0, #1
 800879c:	40a5      	lsls	r5, r4
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 800879e:	400f      	ands	r7, r1
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 80087a0:	422f      	tst	r7, r5
 80087a2:	d0c5      	beq.n	8008730 <rfalIsoDepCalcBitRate+0xc>
 80087a4:	9d00      	ldr	r5, [sp, #0]
 80087a6:	40e5      	lsrs	r5, r4
 80087a8:	002c      	movs	r4, r5
 80087aa:	07e4      	lsls	r4, r4, #31
 80087ac:	d5c0      	bpl.n	8008730 <rfalIsoDepCalcBitRate+0xc>
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
            }
        }
    } while (!(bitrateFound));
    
}
 80087ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 80087b0:	2402      	movs	r4, #2
 80087b2:	e7d1      	b.n	8008758 <rfalIsoDepCalcBitRate+0x34>
 80087b4:	2401      	movs	r4, #1
 80087b6:	e7cf      	b.n	8008758 <rfalIsoDepCalcBitRate+0x34>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 80087b8:	3d01      	subs	r5, #1
 80087ba:	d2d5      	bcs.n	8008768 <rfalIsoDepCalcBitRate+0x44>
 80087bc:	e7dd      	b.n	800877a <rfalIsoDepCalcBitRate+0x56>
	...

080087c0 <rfalIsoDepTx>:
{
 80087c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087c2:	0006      	movs	r6, r0
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 80087c4:	482c      	ldr	r0, [pc, #176]	@ (8008878 <rfalIsoDepTx+0xb8>)
{
 80087c6:	b089      	sub	sp, #36	@ 0x24
        if ( ((uintptr_t)infBuf - (uintptr_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 80087c8:	0017      	movs	r7, r2
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 80087ca:	4c2c      	ldr	r4, [pc, #176]	@ (800887c <rfalIsoDepTx+0xbc>)
 80087cc:	7006      	strb	r6, [r0, #0]
    if ( infLen > 0U )
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d006      	beq.n	80087e0 <rfalIsoDepTx+0x20>
        if ( ((uintptr_t)infBuf - (uintptr_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 80087d2:	0020      	movs	r0, r4
 80087d4:	302b      	adds	r0, #43	@ 0x2b
 80087d6:	7805      	ldrb	r5, [r0, #0]
 80087d8:	1a51      	subs	r1, r2, r1
            return RFAL_ERR_NOMEM;
 80087da:	2001      	movs	r0, #1
        if ( ((uintptr_t)infBuf - (uintptr_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 80087dc:	42a9      	cmp	r1, r5
 80087de:	d348      	bcc.n	8008872 <rfalIsoDepTx+0xb2>
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && (gIsoDep.lastDID00)) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 80087e0:	78e1      	ldrb	r1, [r4, #3]
 80087e2:	2900      	cmp	r1, #0
 80087e4:	d104      	bne.n	80087f0 <rfalIsoDepTx+0x30>
 80087e6:	0021      	movs	r1, r4
 80087e8:	313c      	adds	r1, #60	@ 0x3c
 80087ea:	7809      	ldrb	r1, [r1, #0]
 80087ec:	2900      	cmp	r1, #0
 80087ee:	d001      	beq.n	80087f4 <rfalIsoDepTx+0x34>
 80087f0:	2108      	movs	r1, #8
 80087f2:	430e      	orrs	r6, r1
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 80087f4:	7921      	ldrb	r1, [r4, #4]
 80087f6:	29ff      	cmp	r1, #255	@ 0xff
 80087f8:	d001      	beq.n	80087fe <rfalIsoDepTx+0x3e>
 80087fa:	2004      	movs	r0, #4
 80087fc:	4306      	orrs	r6, r0
    if ((gIsoDep.isTxChaining) && (rfalIsoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 80087fe:	7da0      	ldrb	r0, [r4, #22]
 8008800:	2800      	cmp	r0, #0
 8008802:	d007      	beq.n	8008814 <rfalIsoDepTx+0x54>
 8008804:	201d      	movs	r0, #29
 8008806:	0035      	movs	r5, r6
 8008808:	4385      	bics	r5, r0
 800880a:	0028      	movs	r0, r5
 800880c:	2d02      	cmp	r5, #2
 800880e:	d101      	bne.n	8008814 <rfalIsoDepTx+0x54>
 8008810:	300e      	adds	r0, #14
 8008812:	4306      	orrs	r6, r0
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 8008814:	29ff      	cmp	r1, #255	@ 0xff
 8008816:	d001      	beq.n	800881c <rfalIsoDepTx+0x5c>
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 8008818:	3a01      	subs	r2, #1
 800881a:	7011      	strb	r1, [r2, #0]
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && (gIsoDep.lastDID00)) )
 800881c:	78e1      	ldrb	r1, [r4, #3]
 800881e:	2900      	cmp	r1, #0
 8008820:	d104      	bne.n	800882c <rfalIsoDepTx+0x6c>
 8008822:	0020      	movs	r0, r4
 8008824:	303c      	adds	r0, #60	@ 0x3c
 8008826:	7800      	ldrb	r0, [r0, #0]
 8008828:	2800      	cmp	r0, #0
 800882a:	d001      	beq.n	8008830 <rfalIsoDepTx+0x70>
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 800882c:	3a01      	subs	r2, #1
 800882e:	7011      	strb	r1, [r2, #0]
    *(--txBlock)      = computedPcb;               /* PCB always present */
 8008830:	3a01      	subs	r2, #1
 8008832:	7016      	strb	r6, [r2, #0]
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 8008834:	8aa1      	ldrh	r1, [r4, #20]
    txBufLen = (infLen + (uint16_t)((uintptr_t)infBuf - (uintptr_t)txBlock)); /* Calculate overall buffer size */
 8008836:	1abf      	subs	r7, r7, r2
 8008838:	19db      	adds	r3, r3, r7
 800883a:	b29b      	uxth	r3, r3
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 800883c:	3902      	subs	r1, #2
        return RFAL_ERR_NOTSUPP;
 800883e:	2018      	movs	r0, #24
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 8008840:	428b      	cmp	r3, r1
 8008842:	d816      	bhi.n	8008872 <rfalIsoDepTx+0xb2>
    rfalCreateByteFlagsTxRxContext( ctx, txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 8008844:	9201      	str	r2, [sp, #4]
 8008846:	466a      	mov	r2, sp
 8008848:	00db      	lsls	r3, r3, #3
 800884a:	8113      	strh	r3, [r2, #8]
 800884c:	69e3      	ldr	r3, [r4, #28]
 800884e:	9303      	str	r3, [sp, #12]
 8008850:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	8213      	strh	r3, [r2, #16]
 8008856:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008858:	9305      	str	r3, [sp, #20]
 800885a:	2300      	movs	r3, #0
 800885c:	9306      	str	r3, [sp, #24]
 800885e:	7863      	ldrb	r3, [r4, #1]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d101      	bne.n	8008868 <rfalIsoDepTx+0xa8>
 8008864:	3b02      	subs	r3, #2
 8008866:	930e      	str	r3, [sp, #56]	@ 0x38
 8008868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    return rfalStartTransceive( &ctx );
 800886a:	a801      	add	r0, sp, #4
    rfalCreateByteFlagsTxRxContext( ctx, txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 800886c:	9307      	str	r3, [sp, #28]
    return rfalStartTransceive( &ctx );
 800886e:	f7f9 fbc1 	bl	8001ff4 <rfalStartTransceive>
}
 8008872:	b009      	add	sp, #36	@ 0x24
 8008874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008876:	46c0      	nop			@ (mov r8, r8)
 8008878:	20000e20 	.word	0x20000e20
 800887c:	20000df8 	.word	0x20000df8

08008880 <rfalIsoDepHandleControlMsg>:
{
 8008880:	b5f0      	push	{r4, r5, r6, r7, lr}
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 8008882:	4c35      	ldr	r4, [pc, #212]	@ (8008958 <rfalIsoDepHandleControlMsg+0xd8>)
{
 8008884:	b087      	sub	sp, #28
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 8008886:	68e3      	ldr	r3, [r4, #12]
{
 8008888:	0005      	movs	r5, r0
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 800888a:	9303      	str	r3, [sp, #12]
 800888c:	6923      	ldr	r3, [r4, #16]
{
 800888e:	000e      	movs	r6, r1
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	9a04      	ldr	r2, [sp, #16]
 8008894:	9b03      	ldr	r3, [sp, #12]
    RFAL_MEMSET( gIsoDep.ctrlBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 8008896:	2100      	movs	r1, #0
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 8008898:	189f      	adds	r7, r3, r2
    RFAL_MEMSET( gIsoDep.ctrlBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 800889a:	4b30      	ldr	r3, [pc, #192]	@ (800895c <rfalIsoDepHandleControlMsg+0xdc>)
 800889c:	2204      	movs	r2, #4
 800889e:	0018      	movs	r0, r3
 80088a0:	9305      	str	r3, [sp, #20]
 80088a2:	f007 fd11 	bl	80102c8 <memset>
    switch( controlMsg )
 80088a6:	2d02      	cmp	r5, #2
 80088a8:	d026      	beq.n	80088f8 <rfalIsoDepHandleControlMsg+0x78>
 80088aa:	2d03      	cmp	r5, #3
 80088ac:	d041      	beq.n	8008932 <rfalIsoDepHandleControlMsg+0xb2>
 80088ae:	0022      	movs	r2, r4
 80088b0:	79a3      	ldrb	r3, [r4, #6]
 80088b2:	3240      	adds	r2, #64	@ 0x40
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 80088b4:	1c59      	adds	r1, r3, #1
 80088b6:	71a1      	strb	r1, [r4, #6]
 80088b8:	7812      	ldrb	r2, [r2, #0]
    switch( controlMsg )
 80088ba:	2d01      	cmp	r5, #1
 80088bc:	d010      	beq.n	80088e0 <rfalIsoDepHandleControlMsg+0x60>
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 80088be:	429a      	cmp	r2, r3
 80088c0:	d202      	bcs.n	80088c8 <rfalIsoDepHandleControlMsg+0x48>
                return RFAL_ERR_TIMEOUT; /* NFC Forum mandates timeout or transmission error depending on previous errors */
 80088c2:	2004      	movs	r0, #4
}
 80088c4:	b007      	add	sp, #28
 80088c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pcb = rfalIsoDep_PCBRACK( gIsoDep.blockNumber );
 80088c8:	2301      	movs	r3, #1
 80088ca:	78a0      	ldrb	r0, [r4, #2]
 80088cc:	4018      	ands	r0, r3
 80088ce:	33a1      	adds	r3, #161	@ 0xa1
            pcb = rfalIsoDep_PCBRNAK( gIsoDep.blockNumber );
 80088d0:	4318      	orrs	r0, r3
    infLen  = 0;
 80088d2:	2300      	movs	r3, #0
    return rfalIsoDepTx( pcb, gIsoDep.ctrlBuf, &gIsoDep.ctrlBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 80088d4:	4a22      	ldr	r2, [pc, #136]	@ (8008960 <rfalIsoDepHandleControlMsg+0xe0>)
 80088d6:	9905      	ldr	r1, [sp, #20]
 80088d8:	9700      	str	r7, [sp, #0]
 80088da:	f7ff ff71 	bl	80087c0 <rfalIsoDepTx>
 80088de:	e7f1      	b.n	80088c4 <rfalIsoDepHandleControlMsg+0x44>
            if( ( gIsoDep.cntRRetrys++ >  gIsoDep.maxRetriesR   )   ||      /* Max R Block retries reached */
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d3ee      	bcc.n	80088c2 <rfalIsoDepHandleControlMsg+0x42>
                ( gIsoDep.cntSWtxNack  >= gIsoDep.maxRetriesSnWTX )   )     /* Max number PICC is allowed to respond with S(WTX) to R(NAK) */
 80088e4:	0023      	movs	r3, r4
 80088e6:	3343      	adds	r3, #67	@ 0x43
            if( ( gIsoDep.cntRRetrys++ >  gIsoDep.maxRetriesR   )   ||      /* Max R Block retries reached */
 80088e8:	7a62      	ldrb	r2, [r4, #9]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d2e8      	bcs.n	80088c2 <rfalIsoDepHandleControlMsg+0x42>
            pcb = rfalIsoDep_PCBRNAK( gIsoDep.blockNumber );
 80088f0:	78a0      	ldrb	r0, [r4, #2]
 80088f2:	23b2      	movs	r3, #178	@ 0xb2
 80088f4:	4028      	ands	r0, r5
 80088f6:	e7eb      	b.n	80088d0 <rfalIsoDepHandleControlMsg+0x50>
            if( (gIsoDep.cntSWtxRetrys++ > gIsoDep.maxRetriesSWTX) && (gIsoDep.maxRetriesSWTX != RFAL_ISODEP_MAX_WTX_RETRYS_ULTD) )
 80088f8:	7a23      	ldrb	r3, [r4, #8]
                return RFAL_ERR_PROTO;
 80088fa:	200b      	movs	r0, #11
            if( (gIsoDep.cntSWtxRetrys++ > gIsoDep.maxRetriesSWTX) && (gIsoDep.maxRetriesSWTX != RFAL_ISODEP_MAX_WTX_RETRYS_ULTD) )
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	7222      	strb	r2, [r4, #8]
 8008900:	0022      	movs	r2, r4
 8008902:	3242      	adds	r2, #66	@ 0x42
 8008904:	7812      	ldrb	r2, [r2, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d3dc      	bcc.n	80088c4 <rfalIsoDepHandleControlMsg+0x44>
            if( ! rfalIsoDep_isWTXMValid(param) )
 800890a:	1e73      	subs	r3, r6, #1
 800890c:	2b3a      	cmp	r3, #58	@ 0x3a
 800890e:	d8d9      	bhi.n	80088c4 <rfalIsoDepHandleControlMsg+0x44>
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 8008910:	7863      	ldrb	r3, [r4, #1]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d108      	bne.n	8008928 <rfalIsoDepHandleControlMsg+0xa8>
                fwtTemp = RFAL_MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 8008916:	2280      	movs	r2, #128	@ 0x80
                fwtTemp = (gIsoDep.fwt * param);
 8008918:	9f03      	ldr	r7, [sp, #12]
                fwtTemp = RFAL_MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 800891a:	04d2      	lsls	r2, r2, #19
                fwtTemp = (gIsoDep.fwt * param);
 800891c:	4377      	muls	r7, r6
                fwtTemp = RFAL_MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 800891e:	4297      	cmp	r7, r2
 8008920:	d900      	bls.n	8008924 <rfalIsoDepHandleControlMsg+0xa4>
 8008922:	0017      	movs	r7, r2
                fwtTemp += gIsoDep.dFwt;
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	19df      	adds	r7, r3, r7
            gIsoDep.ctrlBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 8008928:	3448      	adds	r4, #72	@ 0x48
 800892a:	2301      	movs	r3, #1
            pcb = ISODEP_PCB_SWTX;
 800892c:	20f2      	movs	r0, #242	@ 0xf2
            gIsoDep.ctrlBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 800892e:	7026      	strb	r6, [r4, #0]
            break;
 8008930:	e7d0      	b.n	80088d4 <rfalIsoDepHandleControlMsg+0x54>
            if( gIsoDep.cntSDslRetrys++ > gIsoDep.maxRetriesSDSL )
 8008932:	79e3      	ldrb	r3, [r4, #7]
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	71e2      	strb	r2, [r4, #7]
 8008938:	0022      	movs	r2, r4
 800893a:	3241      	adds	r2, #65	@ 0x41
 800893c:	7812      	ldrb	r2, [r2, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d3bf      	bcc.n	80088c2 <rfalIsoDepHandleControlMsg+0x42>
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 8008942:	7863      	ldrb	r3, [r4, #1]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d104      	bne.n	8008952 <rfalIsoDepHandleControlMsg+0xd2>
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 8008948:	278c      	movs	r7, #140	@ 0x8c
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 800894a:	7025      	strb	r5, [r4, #0]
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 800894c:	027f      	lsls	r7, r7, #9
            pcb = ISODEP_PCB_SDSL;
 800894e:	20c2      	movs	r0, #194	@ 0xc2
 8008950:	e7c0      	b.n	80088d4 <rfalIsoDepHandleControlMsg+0x54>
    infLen  = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	e7fb      	b.n	800894e <rfalIsoDepHandleControlMsg+0xce>
 8008956:	46c0      	nop			@ (mov r8, r8)
 8008958:	20000df8 	.word	0x20000df8
 800895c:	20000e3e 	.word	0x20000e3e
 8008960:	20000e40 	.word	0x20000e40

08008964 <rfalIsoDepStartRATS>:
{
 8008964:	b530      	push	{r4, r5, lr}
 8008966:	0005      	movs	r5, r0
 8008968:	b089      	sub	sp, #36	@ 0x24
        return RFAL_ERR_PARAM;
 800896a:	2007      	movs	r0, #7
    if( ats == NULL)
 800896c:	2a00      	cmp	r2, #0
 800896e:	d01d      	beq.n	80089ac <rfalIsoDepStartRATS+0x48>
    gIsoDep.rxBuf   = (uint8_t*) ats;
 8008970:	4c0f      	ldr	r4, [pc, #60]	@ (80089b0 <rfalIsoDepStartRATS+0x4c>)
    gIsoDep.actv.ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 8008972:	30d9      	adds	r0, #217	@ 0xd9
    gIsoDep.rxLen8  = atsLen;
 8008974:	67a3      	str	r3, [r4, #120]	@ 0x78
    gIsoDep.actv.ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 8008976:	0023      	movs	r3, r4
 8008978:	334c      	adds	r3, #76	@ 0x4c
 800897a:	7018      	strb	r0, [r3, #0]
    gIsoDep.actv.ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 800897c:	38d1      	subs	r0, #209	@ 0xd1
    gIsoDep.did     = DID;
 800897e:	70e1      	strb	r1, [r4, #3]
    gIsoDep.actv.ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 8008980:	012d      	lsls	r5, r5, #4
 8008982:	4001      	ands	r1, r0
 8008984:	430d      	orrs	r5, r1
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	4669      	mov	r1, sp
 800898a:	2310      	movs	r3, #16
 800898c:	810b      	strh	r3, [r1, #8]
 800898e:	3390      	adds	r3, #144	@ 0x90
 8008990:	820b      	strh	r3, [r1, #16]
 8008992:	4b08      	ldr	r3, [pc, #32]	@ (80089b4 <rfalIsoDepStartRATS+0x50>)
    gIsoDep.rxBuf   = (uint8_t*) ats;
 8008994:	61e2      	str	r2, [r4, #28]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8008996:	9305      	str	r3, [sp, #20]
 8008998:	2300      	movs	r3, #0
 800899a:	9306      	str	r3, [sp, #24]
 800899c:	4b06      	ldr	r3, [pc, #24]	@ (80089b8 <rfalIsoDepStartRATS+0x54>)
    gIsoDep.actv.ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 800899e:	344d      	adds	r4, #77	@ 0x4d
    return rfalStartTransceive( &ctx );
 80089a0:	a801      	add	r0, sp, #4
    gIsoDep.actv.ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 80089a2:	7025      	strb	r5, [r4, #0]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 80089a4:	9203      	str	r2, [sp, #12]
 80089a6:	9307      	str	r3, [sp, #28]
    return rfalStartTransceive( &ctx );
 80089a8:	f7f9 fb24 	bl	8001ff4 <rfalStartTransceive>
}
 80089ac:	b009      	add	sp, #36	@ 0x24
 80089ae:	bd30      	pop	{r4, r5, pc}
 80089b0:	20000df8 	.word	0x20000df8
 80089b4:	20000e1a 	.word	0x20000e1a
 80089b8:	00046780 	.word	0x00046780

080089bc <rfalIsoDepGetPPSSTatus>:
{
 80089bc:	b510      	push	{r4, lr}
    ret = rfalGetTransceiveStatus();
 80089be:	f7f9 fbff 	bl	80021c0 <rfalGetTransceiveStatus>
    if( ret == RFAL_ERR_NONE )
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d10d      	bne.n	80089e2 <rfalIsoDepGetPPSSTatus+0x26>
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 80089c6:	4b07      	ldr	r3, [pc, #28]	@ (80089e4 <rfalIsoDepGetPPSSTatus+0x28>)
 80089c8:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 80089ca:	3207      	adds	r2, #7
 80089cc:	08d2      	lsrs	r2, r2, #3
 80089ce:	845a      	strh	r2, [r3, #34]	@ 0x22
        if( (gIsoDep.rxBufLen != RFAL_ISODEP_PPS_RES_LEN) || (*gIsoDep.rxBuf != gIsoDep.actv.ppsReq.PPSS) ) 
 80089d0:	2a01      	cmp	r2, #1
 80089d2:	d105      	bne.n	80089e0 <rfalIsoDepGetPPSSTatus+0x24>
 80089d4:	69da      	ldr	r2, [r3, #28]
 80089d6:	334c      	adds	r3, #76	@ 0x4c
 80089d8:	7812      	ldrb	r2, [r2, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d000      	beq.n	80089e2 <rfalIsoDepGetPPSSTatus+0x26>
            return RFAL_ERR_PROTO;
 80089e0:	200b      	movs	r0, #11
}
 80089e2:	bd10      	pop	{r4, pc}
 80089e4:	20000df8 	.word	0x20000df8

080089e8 <rfalIsoDepStartATTRIB>:
{
 80089e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ea:	b08f      	sub	sp, #60	@ 0x3c
 80089ec:	9103      	str	r1, [sp, #12]
 80089ee:	a914      	add	r1, sp, #80	@ 0x50
 80089f0:	7809      	ldrb	r1, [r1, #0]
 80089f2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80089f4:	9104      	str	r1, [sp, #16]
 80089f6:	a915      	add	r1, sp, #84	@ 0x54
 80089f8:	7809      	ldrb	r1, [r1, #0]
 80089fa:	9002      	str	r0, [sp, #8]
 80089fc:	9105      	str	r1, [sp, #20]
 80089fe:	a818      	add	r0, sp, #96	@ 0x60
 8008a00:	a916      	add	r1, sp, #88	@ 0x58
 8008a02:	7804      	ldrb	r4, [r0, #0]
 8008a04:	7809      	ldrb	r1, [r1, #0]
        return RFAL_ERR_NONE;
 8008a06:	1e28      	subs	r0, r5, #0
{
 8008a08:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8008a0a:	d046      	beq.n	8008a9a <rfalIsoDepStartATTRIB+0xb2>
        return RFAL_ERR_NONE;
 8008a0c:	1e30      	subs	r0, r6, #0
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8008a0e:	d044      	beq.n	8008a9a <rfalIsoDepStartATTRIB+0xb2>
 8008a10:	0017      	movs	r7, r2
        return RFAL_ERR_NONE;
 8008a12:	2000      	movs	r0, #0
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8008a14:	431f      	orrs	r7, r3
 8008a16:	2f03      	cmp	r7, #3
 8008a18:	d83f      	bhi.n	8008a9a <rfalIsoDepStartATTRIB+0xb2>
 8008a1a:	290e      	cmp	r1, #14
 8008a1c:	d83d      	bhi.n	8008a9a <rfalIsoDepStartATTRIB+0xb2>
    gIsoDep.rxBuf   = (uint8_t*)  attribRes;
 8008a1e:	4828      	ldr	r0, [pc, #160]	@ (8008ac0 <rfalIsoDepStartATTRIB+0xd8>)
    gIsoDep.actv.attribReq.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 8008a20:	271d      	movs	r7, #29
    gIsoDep.rxLen8  = attribResLen;
 8008a22:	6786      	str	r6, [r0, #120]	@ 0x78
    gIsoDep.actv.attribReq.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 8008a24:	0006      	movs	r6, r0
 8008a26:	364c      	adds	r6, #76	@ 0x4c
 8008a28:	7037      	strb	r7, [r6, #0]
    gIsoDep.actv.attribReq.Param.PARAM1 = PARAM1;
 8008a2a:	3734      	adds	r7, #52	@ 0x34
 8008a2c:	46bc      	mov	ip, r7
 8008a2e:	4484      	add	ip, r0
 8008a30:	4667      	mov	r7, ip
    gIsoDep.actv.attribReq.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8008a32:	0192      	lsls	r2, r2, #6
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	4313      	orrs	r3, r2
 8008a38:	220f      	movs	r2, #15
    gIsoDep.actv.attribReq.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 8008a3a:	9601      	str	r6, [sp, #4]
    gIsoDep.actv.attribReq.Param.PARAM1 = PARAM1;
 8008a3c:	9e03      	ldr	r6, [sp, #12]
    gIsoDep.did     = DID;
 8008a3e:	70c1      	strb	r1, [r0, #3]
    gIsoDep.actv.attribReq.Param.PARAM1 = PARAM1;
 8008a40:	703e      	strb	r6, [r7, #0]
    gIsoDep.actv.attribReq.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8008a42:	9f04      	ldr	r7, [sp, #16]
    gIsoDep.rxBuf   = (uint8_t*)  attribRes;
 8008a44:	61c5      	str	r5, [r0, #28]
    gIsoDep.actv.attribReq.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8008a46:	4017      	ands	r7, r2
 8008a48:	0002      	movs	r2, r0
 8008a4a:	433b      	orrs	r3, r7
 8008a4c:	3252      	adds	r2, #82	@ 0x52
 8008a4e:	7013      	strb	r3, [r2, #0]
    gIsoDep.actv.attribReq.Param.PARAM3 = PARAM3;
 8008a50:	0003      	movs	r3, r0
 8008a52:	9a05      	ldr	r2, [sp, #20]
 8008a54:	3353      	adds	r3, #83	@ 0x53
 8008a56:	701a      	strb	r2, [r3, #0]
    gIsoDep.actv.attribReq.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 8008a58:	0003      	movs	r3, r0
 8008a5a:	3354      	adds	r3, #84	@ 0x54
 8008a5c:	7019      	strb	r1, [r3, #0]
    RFAL_MEMCPY(gIsoDep.actv.attribReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 8008a5e:	2204      	movs	r2, #4
 8008a60:	9902      	ldr	r1, [sp, #8]
 8008a62:	304d      	adds	r0, #77	@ 0x4d
 8008a64:	f007 fc64 	bl	8010330 <memcpy>
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 8008a68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d020      	beq.n	8008ab0 <rfalIsoDepStartATTRIB+0xc8>
 8008a6e:	2c00      	cmp	r4, #0
 8008a70:	d115      	bne.n	8008a9e <rfalIsoDepStartATTRIB+0xb6>
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.attribReq, (uint16_t)(RFAL_ISODEP_ATTRIB_HDR_LEN + RFAL_MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)gIsoDep.rxBuf, sizeof(rfalIsoDepAttribRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8008a72:	9b01      	ldr	r3, [sp, #4]
 8008a74:	9307      	str	r3, [sp, #28]
 8008a76:	3409      	adds	r4, #9
 8008a78:	00e4      	lsls	r4, r4, #3
 8008a7a:	ab06      	add	r3, sp, #24
 8008a7c:	811c      	strh	r4, [r3, #8]
 8008a7e:	2384      	movs	r3, #132	@ 0x84
 8008a80:	aa06      	add	r2, sp, #24
 8008a82:	005b      	lsls	r3, r3, #1
 8008a84:	8213      	strh	r3, [r2, #16]
 8008a86:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac4 <rfalIsoDepStartATTRIB+0xdc>)
    return rfalStartTransceive( &ctx );
 8008a88:	a807      	add	r0, sp, #28
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.attribReq, (uint16_t)(RFAL_ISODEP_ATTRIB_HDR_LEN + RFAL_MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)gIsoDep.rxBuf, sizeof(rfalIsoDepAttribRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8008a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a92:	9509      	str	r5, [sp, #36]	@ 0x24
 8008a94:	930d      	str	r3, [sp, #52]	@ 0x34
    return rfalStartTransceive( &ctx );
 8008a96:	f7f9 faad 	bl	8001ff4 <rfalStartTransceive>
}
 8008a9a:	b00f      	add	sp, #60	@ 0x3c
 8008a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        RFAL_MEMCPY(gIsoDep.actv.attribReq.HLInfo, HLInfo, RFAL_MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 8008a9e:	480a      	ldr	r0, [pc, #40]	@ (8008ac8 <rfalIsoDepStartATTRIB+0xe0>)
 8008aa0:	1c22      	adds	r2, r4, #0
 8008aa2:	2c20      	cmp	r4, #32
 8008aa4:	d900      	bls.n	8008aa8 <rfalIsoDepStartATTRIB+0xc0>
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	f007 fc40 	bl	8010330 <memcpy>
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.attribReq, (uint16_t)(RFAL_ISODEP_ATTRIB_HDR_LEN + RFAL_MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)gIsoDep.rxBuf, sizeof(rfalIsoDepAttribRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 8008ab0:	4b06      	ldr	r3, [pc, #24]	@ (8008acc <rfalIsoDepStartATTRIB+0xe4>)
 8008ab2:	9307      	str	r3, [sp, #28]
 8008ab4:	2c1f      	cmp	r4, #31
 8008ab6:	d9de      	bls.n	8008a76 <rfalIsoDepStartATTRIB+0x8e>
 8008ab8:	24a4      	movs	r4, #164	@ 0xa4
 8008aba:	0064      	lsls	r4, r4, #1
 8008abc:	e7dd      	b.n	8008a7a <rfalIsoDepStartATTRIB+0x92>
 8008abe:	46c0      	nop			@ (mov r8, r8)
 8008ac0:	20000df8 	.word	0x20000df8
 8008ac4:	20000e1a 	.word	0x20000e1a
 8008ac8:	20000e4d 	.word	0x20000e4d
 8008acc:	20000e44 	.word	0x20000e44

08008ad0 <rfalIsoDepStartPPS>:
{
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	0005      	movs	r5, r0
 8008ad4:	b088      	sub	sp, #32
        return RFAL_ERR_PARAM;
 8008ad6:	2007      	movs	r0, #7
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d024      	beq.n	8008b26 <rfalIsoDepStartPPS+0x56>
 8008adc:	000c      	movs	r4, r1
 8008ade:	4314      	orrs	r4, r2
 8008ae0:	2c03      	cmp	r4, #3
 8008ae2:	d820      	bhi.n	8008b26 <rfalIsoDepStartPPS+0x56>
 8008ae4:	2d0e      	cmp	r5, #14
 8008ae6:	d81e      	bhi.n	8008b26 <rfalIsoDepStartPPS+0x56>
    gIsoDep.rxBuf   = (uint8_t*) ppsRes;
 8008ae8:	4c10      	ldr	r4, [pc, #64]	@ (8008b2c <rfalIsoDepStartPPS+0x5c>)
    gIsoDep.actv.ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 8008aea:	0089      	lsls	r1, r1, #2
 8008aec:	430a      	orrs	r2, r1
    gIsoDep.rxBuf   = (uint8_t*) ppsRes;
 8008aee:	61e3      	str	r3, [r4, #28]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8008af0:	4669      	mov	r1, sp
    gIsoDep.actv.ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 8008af2:	3837      	subs	r0, #55	@ 0x37
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8008af4:	9303      	str	r3, [sp, #12]
 8008af6:	2308      	movs	r3, #8
    gIsoDep.actv.ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 8008af8:	4328      	orrs	r0, r5
 8008afa:	0025      	movs	r5, r4
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8008afc:	820b      	strh	r3, [r1, #16]
 8008afe:	4b0c      	ldr	r3, [pc, #48]	@ (8008b30 <rfalIsoDepStartPPS+0x60>)
    gIsoDep.actv.ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 8008b00:	354c      	adds	r5, #76	@ 0x4c
 8008b02:	7028      	strb	r0, [r5, #0]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8008b04:	9305      	str	r3, [sp, #20]
    gIsoDep.actv.ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8008b06:	0020      	movs	r0, r4
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8008b08:	2300      	movs	r3, #0
    gIsoDep.actv.ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8008b0a:	2611      	movs	r6, #17
    gIsoDep.actv.ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 8008b0c:	344e      	adds	r4, #78	@ 0x4e
 8008b0e:	7022      	strb	r2, [r4, #0]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8008b10:	2218      	movs	r2, #24
    gIsoDep.actv.ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8008b12:	304d      	adds	r0, #77	@ 0x4d
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8008b14:	9306      	str	r3, [sp, #24]
 8008b16:	4b07      	ldr	r3, [pc, #28]	@ (8008b34 <rfalIsoDepStartPPS+0x64>)
    gIsoDep.actv.ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 8008b18:	7006      	strb	r6, [r0, #0]
    return rfalStartTransceive( &ctx );
 8008b1a:	a801      	add	r0, sp, #4
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gIsoDep.actv.ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &gIsoDep.rxBufLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8008b1c:	9501      	str	r5, [sp, #4]
 8008b1e:	810a      	strh	r2, [r1, #8]
 8008b20:	9307      	str	r3, [sp, #28]
    return rfalStartTransceive( &ctx );
 8008b22:	f7f9 fa67 	bl	8001ff4 <rfalStartTransceive>
}
 8008b26:	b008      	add	sp, #32
 8008b28:	bd70      	pop	{r4, r5, r6, pc}
 8008b2a:	46c0      	nop			@ (mov r8, r8)
 8008b2c:	20000df8 	.word	0x20000df8
 8008b30:	20000e1a 	.word	0x20000e1a
 8008b34:	00046780 	.word	0x00046780

08008b38 <rfalIsoDepReSendControlMsg.isra.0>:
static ReturnCode rfalIsoDepReSendControlMsg( void )
 8008b38:	b510      	push	{r4, lr}
    if( rfalIsoDep_PCBisRACK( gIsoDep.lastPCB ) )
 8008b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008b78 <rfalIsoDepReSendControlMsg.isra.0+0x40>)
 8008b3c:	2109      	movs	r1, #9
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	4a0e      	ldr	r2, [pc, #56]	@ (8008b7c <rfalIsoDepReSendControlMsg.isra.0+0x44>)
 8008b42:	0018      	movs	r0, r3
 8008b44:	4388      	bics	r0, r1
 8008b46:	28a2      	cmp	r0, #162	@ 0xa2
 8008b48:	d104      	bne.n	8008b54 <rfalIsoDepReSendControlMsg.isra.0+0x1c>
        return rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM );
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	0008      	movs	r0, r1
        return rfalIsoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM );
 8008b4e:	f7ff fe97 	bl	8008880 <rfalIsoDepHandleControlMsg>
}
 8008b52:	bd10      	pop	{r4, pc}
    if( rfalIsoDep_PCBisRNAK( gIsoDep.lastPCB ) )
 8008b54:	28b2      	cmp	r0, #178	@ 0xb2
 8008b56:	d102      	bne.n	8008b5e <rfalIsoDepReSendControlMsg.isra.0+0x26>
        return rfalIsoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM );
 8008b58:	2100      	movs	r1, #0
 8008b5a:	2001      	movs	r0, #1
 8008b5c:	e7f7      	b.n	8008b4e <rfalIsoDepReSendControlMsg.isra.0+0x16>
    if( rfalIsoDep_PCBisSDeselect( gIsoDep.lastPCB ) )
 8008b5e:	2108      	movs	r1, #8
 8008b60:	438b      	bics	r3, r1
 8008b62:	2bc2      	cmp	r3, #194	@ 0xc2
 8008b64:	d102      	bne.n	8008b6c <rfalIsoDepReSendControlMsg.isra.0+0x34>
        return rfalIsoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM );
 8008b66:	2100      	movs	r1, #0
 8008b68:	2003      	movs	r0, #3
 8008b6a:	e7f0      	b.n	8008b4e <rfalIsoDepReSendControlMsg.isra.0+0x16>
    if( rfalIsoDep_PCBisSWTX( gIsoDep.lastPCB ) )
 8008b6c:	2bf2      	cmp	r3, #242	@ 0xf2
 8008b6e:	d1f0      	bne.n	8008b52 <rfalIsoDepReSendControlMsg.isra.0+0x1a>
        return rfalIsoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM );
 8008b70:	3229      	adds	r2, #41	@ 0x29
 8008b72:	2002      	movs	r0, #2
 8008b74:	7811      	ldrb	r1, [r2, #0]
 8008b76:	e7ea      	b.n	8008b4e <rfalIsoDepReSendControlMsg.isra.0+0x16>
 8008b78:	20000e20 	.word	0x20000e20
 8008b7c:	20000df8 	.word	0x20000df8

08008b80 <rfalIsoDepInitialize>:
{
 8008b80:	b570      	push	{r4, r5, r6, lr}
    gIsoDep.state        = ISODEP_ST_IDLE;
 8008b82:	4c15      	ldr	r4, [pc, #84]	@ (8008bd8 <rfalIsoDepInitialize+0x58>)
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 8008b84:	23ff      	movs	r3, #255	@ 0xff
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 8008b86:	0022      	movs	r2, r4
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 8008b88:	7123      	strb	r3, [r4, #4]
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 8008b8a:	3bef      	subs	r3, #239	@ 0xef
 8008b8c:	6163      	str	r3, [r4, #20]
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 8008b8e:	322b      	adds	r2, #43	@ 0x2b
 8008b90:	3b0f      	subs	r3, #15
 8008b92:	7013      	strb	r3, [r2, #0]
    gIsoDep.txBufInfPos  = 0U;
 8008b94:	2280      	movs	r2, #128	@ 0x80
 8008b96:	0352      	lsls	r2, r2, #13
 8008b98:	6262      	str	r2, [r4, #36]	@ 0x24
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 8008b9a:	0022      	movs	r2, r4
 8008b9c:	2140      	movs	r1, #64	@ 0x40
 8008b9e:	3228      	adds	r2, #40	@ 0x28
 8008ba0:	7011      	strb	r1, [r2, #0]
    gIsoDep.lastDID00    = false;
 8008ba2:	2280      	movs	r2, #128	@ 0x80
 8008ba4:	0492      	lsls	r2, r2, #18
 8008ba6:	63e2      	str	r2, [r4, #60]	@ 0x3c
    gIsoDep.maxRetriesR      = RFAL_ISODEP_MAX_R_RETRYS;
 8008ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8008bdc <rfalIsoDepInitialize+0x5c>)
    gIsoDep.state        = ISODEP_ST_IDLE;
 8008baa:	2500      	movs	r5, #0
    gIsoDep.maxRetriesR      = RFAL_ISODEP_MAX_R_RETRYS;
 8008bac:	6422      	str	r2, [r4, #64]	@ 0x40
    gIsoDep.maxRetriesRATS   = RFAL_ISODEP_RATS_RETRIES;
 8008bae:	1da2      	adds	r2, r4, #6
 8008bb0:	87d3      	strh	r3, [r2, #62]	@ 0x3e
    gIsoDep.APDUTxPos       = 0;
 8008bb2:	0023      	movs	r3, r4
 8008bb4:	33b4      	adds	r3, #180	@ 0xb4
 8008bb6:	601d      	str	r5, [r3, #0]
    gIsoDep.APDUParam.rxLen = NULL;
 8008bb8:	0023      	movs	r3, r4
 8008bba:	339c      	adds	r3, #156	@ 0x9c
 8008bbc:	601d      	str	r5, [r3, #0]
    gIsoDep.APDUParam.rxBuf = NULL;
 8008bbe:	0023      	movs	r3, r4
 8008bc0:	3398      	adds	r3, #152	@ 0x98
 8008bc2:	601d      	str	r5, [r3, #0]
    gIsoDep.APDUParam.txBuf = NULL;
 8008bc4:	0023      	movs	r3, r4
 8008bc6:	3390      	adds	r3, #144	@ 0x90
    gIsoDep.state        = ISODEP_ST_IDLE;
 8008bc8:	6025      	str	r5, [r4, #0]
    gIsoDep.rxLen        = NULL;
 8008bca:	6325      	str	r5, [r4, #48]	@ 0x30
    gIsoDep.rxBuf        = NULL;
 8008bcc:	61e5      	str	r5, [r4, #28]
    gIsoDep.APDUParam.txBuf = NULL;
 8008bce:	601d      	str	r5, [r3, #0]
    rfalIsoDepClearCounters();
 8008bd0:	f7ff fda0 	bl	8008714 <rfalIsoDepClearCounters>
    gIsoDep.WTXTimer = 0U;
 8008bd4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}
 8008bd8:	20000df8 	.word	0x20000df8
 8008bdc:	03140003 	.word	0x03140003

08008be0 <rfalIsoDepDataExchangePCD>:
{
 8008be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be2:	b087      	sub	sp, #28
 8008be4:	1e05      	subs	r5, r0, #0
 8008be6:	9102      	str	r1, [sp, #8]
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 8008be8:	d102      	bne.n	8008bf0 <rfalIsoDepDataExchangePCD+0x10>
        return RFAL_ERR_PARAM;
 8008bea:	2007      	movs	r0, #7
}
 8008bec:	b007      	add	sp, #28
 8008bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 8008bf0:	9b02      	ldr	r3, [sp, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0f9      	beq.n	8008bea <rfalIsoDepDataExchangePCD+0xa>
    *outIsChaining = false;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9a02      	ldr	r2, [sp, #8]
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 8008bfa:	4c8f      	ldr	r4, [pc, #572]	@ (8008e38 <rfalIsoDepDataExchangePCD+0x258>)
    *outIsChaining = false;
 8008bfc:	7013      	strb	r3, [r2, #0]
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 8008bfe:	78e3      	ldrb	r3, [r4, #3]
 8008c00:	1e5a      	subs	r2, r3, #1
 8008c02:	4193      	sbcs	r3, r2
 8008c04:	0022      	movs	r2, r4
 8008c06:	3301      	adds	r3, #1
 8008c08:	322b      	adds	r2, #43	@ 0x2b
 8008c0a:	7013      	strb	r3, [r2, #0]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 8008c0c:	7921      	ldrb	r1, [r4, #4]
 8008c0e:	29ff      	cmp	r1, #255	@ 0xff
 8008c10:	d001      	beq.n	8008c16 <rfalIsoDepDataExchangePCD+0x36>
 8008c12:	3301      	adds	r3, #1
 8008c14:	7013      	strb	r3, [r2, #0]
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 8008c16:	0023      	movs	r3, r4
 8008c18:	1da2      	adds	r2, r4, #6
 8008c1a:	332b      	adds	r3, #43	@ 0x2b
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	7fd2      	ldrb	r2, [r2, #31]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d3e2      	bcc.n	8008bea <rfalIsoDepDataExchangePCD+0xa>
 8008c24:	1d62      	adds	r2, r4, #5
 8008c26:	7fd2      	ldrb	r2, [r2, #31]
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d8de      	bhi.n	8008bea <rfalIsoDepDataExchangePCD+0xa>
    switch( gIsoDep.state )
 8008c2c:	7826      	ldrb	r6, [r4, #0]
 8008c2e:	2e01      	cmp	r6, #1
 8008c30:	d019      	beq.n	8008c66 <rfalIsoDepDataExchangePCD+0x86>
 8008c32:	d800      	bhi.n	8008c36 <rfalIsoDepDataExchangePCD+0x56>
 8008c34:	e080      	b.n	8008d38 <rfalIsoDepDataExchangePCD+0x158>
 8008c36:	3e02      	subs	r6, #2
    return RFAL_ERR_INTERNAL;
 8008c38:	200c      	movs	r0, #12
    switch( gIsoDep.state )
 8008c3a:	2e01      	cmp	r6, #1
 8008c3c:	d8d6      	bhi.n	8008bec <rfalIsoDepDataExchangePCD+0xc>
            ret = rfalGetTransceiveStatus();
 8008c3e:	f7f9 fabf 	bl	80021c0 <rfalGetTransceiveStatus>
            switch( ret )
 8008c42:	2809      	cmp	r0, #9
 8008c44:	d923      	bls.n	8008c8e <rfalIsoDepDataExchangePCD+0xae>
 8008c46:	0003      	movs	r3, r0
 8008c48:	3b15      	subs	r3, #21
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	2b13      	cmp	r3, #19
 8008c4e:	d8cd      	bhi.n	8008bec <rfalIsoDepDataExchangePCD+0xc>
 8008c50:	4a7a      	ldr	r2, [pc, #488]	@ (8008e3c <rfalIsoDepDataExchangePCD+0x25c>)
 8008c52:	40da      	lsrs	r2, r3
 8008c54:	07d2      	lsls	r2, r2, #31
 8008c56:	d5c9      	bpl.n	8008bec <rfalIsoDepDataExchangePCD+0xc>
                    if( gIsoDep.isRxChaining )
 8008c58:	4b77      	ldr	r3, [pc, #476]	@ (8008e38 <rfalIsoDepDataExchangePCD+0x258>)
 8008c5a:	7dd9      	ldrb	r1, [r3, #23]
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	d01d      	beq.n	8008c9c <rfalIsoDepDataExchangePCD+0xbc>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 8008c60:	2100      	movs	r1, #0
 8008c62:	0008      	movs	r0, r1
 8008c64:	e01d      	b.n	8008ca2 <rfalIsoDepDataExchangePCD+0xc2>
            ret = rfalIsoDepTx( rfalIsoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 8008c66:	8c23      	ldrh	r3, [r4, #32]
 8008c68:	68e7      	ldr	r7, [r4, #12]
 8008c6a:	9303      	str	r3, [sp, #12]
 8008c6c:	6923      	ldr	r3, [r4, #16]
 8008c6e:	78a0      	ldrb	r0, [r4, #2]
 8008c70:	469c      	mov	ip, r3
 8008c72:	4030      	ands	r0, r6
 8008c74:	2602      	movs	r6, #2
 8008c76:	69a1      	ldr	r1, [r4, #24]
 8008c78:	4467      	add	r7, ip
 8008c7a:	9b03      	ldr	r3, [sp, #12]
 8008c7c:	188a      	adds	r2, r1, r2
 8008c7e:	4330      	orrs	r0, r6
 8008c80:	9700      	str	r7, [sp, #0]
 8008c82:	f7ff fd9d 	bl	80087c0 <rfalIsoDepTx>
            switch( ret )
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d1b0      	bne.n	8008bec <rfalIsoDepDataExchangePCD+0xc>
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 8008c8a:	7026      	strb	r6, [r4, #0]
                  break;
 8008c8c:	e7d7      	b.n	8008c3e <rfalIsoDepDataExchangePCD+0x5e>
            switch( ret )
 8008c8e:	f7f7 fa43 	bl	8000118 <__gnu_thumb1_case_sqi>
 8008c92:	ad0f      	.short	0xad0f
 8008c94:	ade3ad79 	.word	0xade3ad79
 8008c98:	e3adadad 	.word	0xe3adadad
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 8008c9c:	7818      	ldrb	r0, [r3, #0]
 8008c9e:	2803      	cmp	r0, #3
 8008ca0:	d104      	bne.n	8008cac <rfalIsoDepDataExchangePCD+0xcc>
                    RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8008ca2:	f7ff fded 	bl	8008880 <rfalIsoDepHandleControlMsg>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d1a0      	bne.n	8008bec <rfalIsoDepDataExchangePCD+0xc>
 8008caa:	e06b      	b.n	8008d84 <rfalIsoDepDataExchangePCD+0x1a4>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8008cac:	2001      	movs	r0, #1
 8008cae:	e7f8      	b.n	8008ca2 <rfalIsoDepDataExchangePCD+0xc2>
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 8008cb0:	882a      	ldrh	r2, [r5, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 8008cb2:	4b63      	ldr	r3, [pc, #396]	@ (8008e40 <rfalIsoDepDataExchangePCD+0x260>)
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 8008cb4:	3207      	adds	r2, #7
 8008cb6:	08d2      	lsrs	r2, r2, #3
 8008cb8:	802a      	strh	r2, [r5, #0]
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 8008cba:	781f      	ldrb	r7, [r3, #0]
 8008cbc:	495e      	ldr	r1, [pc, #376]	@ (8008e38 <rfalIsoDepDataExchangePCD+0x258>)
 8008cbe:	42ba      	cmp	r2, r7
 8008cc0:	d201      	bcs.n	8008cc6 <rfalIsoDepDataExchangePCD+0xe6>
                return RFAL_ERR_PROTO;
 8008cc2:	200b      	movs	r0, #11
 8008cc4:	e792      	b.n	8008bec <rfalIsoDepDataExchangePCD+0xc>
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 8008cc6:	8ccb      	ldrh	r3, [r1, #38]	@ 0x26
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d9fa      	bls.n	8008cc2 <rfalIsoDepDataExchangePCD+0xe2>
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( rfalIsoDep_PCBhasDID(rxPCB) || rfalIsoDep_PCBhasNAD(rxPCB)) )
 8008ccc:	0008      	movs	r0, r1
 8008cce:	3045      	adds	r0, #69	@ 0x45
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 8008cd0:	69ce      	ldr	r6, [r1, #28]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( rfalIsoDep_PCBhasDID(rxPCB) || rfalIsoDep_PCBhasNAD(rxPCB)) )
 8008cd2:	7800      	ldrb	r0, [r0, #0]
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 8008cd4:	7833      	ldrb	r3, [r6, #0]
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( rfalIsoDep_PCBhasDID(rxPCB) || rfalIsoDep_PCBhasNAD(rxPCB)) )
 8008cd6:	9003      	str	r0, [sp, #12]
 8008cd8:	2801      	cmp	r0, #1
 8008cda:	d102      	bne.n	8008ce2 <rfalIsoDepDataExchangePCD+0x102>
 8008cdc:	300b      	adds	r0, #11
 8008cde:	4203      	tst	r3, r0
 8008ce0:	d1ef      	bne.n	8008cc2 <rfalIsoDepDataExchangePCD+0xe2>
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( (!rfalIsoDep_PCBhasDID(rxPCB)) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 8008ce2:	78c8      	ldrb	r0, [r1, #3]
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d004      	beq.n	8008cf2 <rfalIsoDepDataExchangePCD+0x112>
 8008ce8:	071c      	lsls	r4, r3, #28
 8008cea:	d5ea      	bpl.n	8008cc2 <rfalIsoDepDataExchangePCD+0xe2>
 8008cec:	7874      	ldrb	r4, [r6, #1]
 8008cee:	4284      	cmp	r4, r0
 8008cf0:	d1e7      	bne.n	8008cc2 <rfalIsoDepDataExchangePCD+0xe2>
            if( rfalIsoDep_PCBisSBlock(rxPCB) )
 8008cf2:	2038      	movs	r0, #56	@ 0x38
 8008cf4:	001c      	movs	r4, r3
 8008cf6:	4384      	bics	r4, r0
 8008cf8:	2cc2      	cmp	r4, #194	@ 0xc2
 8008cfa:	d11f      	bne.n	8008d3c <rfalIsoDepDataExchangePCD+0x15c>
                if( rfalIsoDep_PCBisSWTX(rxPCB) )
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	4393      	bics	r3, r2
 8008d00:	2bf2      	cmp	r3, #242	@ 0xf2
 8008d02:	d112      	bne.n	8008d2a <rfalIsoDepDataExchangePCD+0x14a>
                    if( rfalIsoDep_PCBisRNAK( gIsoDep.lastPCB ) )
 8008d04:	000b      	movs	r3, r1
 8008d06:	3328      	adds	r3, #40	@ 0x28
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	3201      	adds	r2, #1
 8008d0c:	4393      	bics	r3, r2
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2bb2      	cmp	r3, #178	@ 0xb2
 8008d12:	d108      	bne.n	8008d26 <rfalIsoDepDataExchangePCD+0x146>
                        gIsoDep.cntSWtxNack++;        /* Count S(WTX) upon R(NAK) */
 8008d14:	7a4b      	ldrb	r3, [r1, #9]
                        gIsoDep.cntRRetrys = 0;       /* Reset R-Block counter has PICC has responded */
 8008d16:	718a      	strb	r2, [r1, #6]
                        gIsoDep.cntSWtxNack++;        /* Count S(WTX) upon R(NAK) */
 8008d18:	3301      	adds	r3, #1
 8008d1a:	724b      	strb	r3, [r1, #9]
                    RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_S_WTX, rfalIsoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 8008d1c:	233f      	movs	r3, #63	@ 0x3f
 8008d1e:	5df1      	ldrb	r1, [r6, r7]
 8008d20:	2002      	movs	r0, #2
 8008d22:	4019      	ands	r1, r3
 8008d24:	e7bd      	b.n	8008ca2 <rfalIsoDepDataExchangePCD+0xc2>
                        gIsoDep.cntSWtxNack = 0;      /* Reset R(NACK)->S(WTX) counter */
 8008d26:	724a      	strb	r2, [r1, #9]
 8008d28:	e7f8      	b.n	8008d1c <rfalIsoDepDataExchangePCD+0x13c>
                if( rfalIsoDep_PCBisSDeselect(rxPCB) )
 8008d2a:	2bc2      	cmp	r3, #194	@ 0xc2
 8008d2c:	d1c9      	bne.n	8008cc2 <rfalIsoDepDataExchangePCD+0xe2>
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 8008d2e:	780b      	ldrb	r3, [r1, #0]
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d1c6      	bne.n	8008cc2 <rfalIsoDepDataExchangePCD+0xe2>
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 8008d34:	f7ff ff24 	bl	8008b80 <rfalIsoDepInitialize>
            return RFAL_ERR_NONE;
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e757      	b.n	8008bec <rfalIsoDepDataExchangePCD+0xc>
            else if( rfalIsoDep_PCBisRBlock(rxPCB) )
 8008d3c:	2019      	movs	r0, #25
 8008d3e:	001c      	movs	r4, r3
 8008d40:	4384      	bics	r4, r0
 8008d42:	2ca2      	cmp	r4, #162	@ 0xa2
 8008d44:	d120      	bne.n	8008d88 <rfalIsoDepDataExchangePCD+0x1a8>
                if( rfalIsoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 8008d46:	2209      	movs	r2, #9
 8008d48:	0018      	movs	r0, r3
 8008d4a:	4390      	bics	r0, r2
 8008d4c:	28a2      	cmp	r0, #162	@ 0xa2
 8008d4e:	d1b8      	bne.n	8008cc2 <rfalIsoDepDataExchangePCD+0xe2>
                    if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 8008d50:	2401      	movs	r4, #1
 8008d52:	788a      	ldrb	r2, [r1, #2]
 8008d54:	4023      	ands	r3, r4
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d107      	bne.n	8008d6a <rfalIsoDepDataExchangePCD+0x18a>
                        if( !gIsoDep.isTxChaining )
 8008d5a:	7d8b      	ldrb	r3, [r1, #22]
                        gIsoDep.blockNumber = rfalIsoDep_PCBNextBN( gIsoDep.blockNumber );
 8008d5c:	4062      	eors	r2, r4
 8008d5e:	708a      	strb	r2, [r1, #2]
                        if( !gIsoDep.isTxChaining )
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0ae      	beq.n	8008cc2 <rfalIsoDepDataExchangePCD+0xe2>
                    rfalIsoDepClearCounters();
 8008d64:	f7ff fcd6 	bl	8008714 <rfalIsoDepClearCounters>
                    return RFAL_ERR_NONE;
 8008d68:	e7e6      	b.n	8008d38 <rfalIsoDepDataExchangePCD+0x158>
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 8008d6a:	794b      	ldrb	r3, [r1, #5]
                        return RFAL_ERR_TIMEOUT; /* NFC Forum mandates timeout or transmission error depending on previous errors */
 8008d6c:	2004      	movs	r0, #4
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	714a      	strb	r2, [r1, #5]
 8008d72:	000a      	movs	r2, r1
 8008d74:	323f      	adds	r2, #63	@ 0x3f
 8008d76:	7812      	ldrb	r2, [r2, #0]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d800      	bhi.n	8008d7e <rfalIsoDepDataExchangePCD+0x19e>
 8008d7c:	e736      	b.n	8008bec <rfalIsoDepDataExchangePCD+0xc>
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 8008d7e:	2300      	movs	r3, #0
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 8008d80:	700c      	strb	r4, [r1, #0]
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 8008d82:	718b      	strb	r3, [r1, #6]
                    return RFAL_ERR_BUSY;
 8008d84:	2002      	movs	r0, #2
 8008d86:	e731      	b.n	8008bec <rfalIsoDepDataExchangePCD+0xc>
            else if( rfalIsoDep_PCBisIBlock(rxPCB) )
 8008d88:	211d      	movs	r1, #29
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	4388      	bics	r0, r1
 8008d8e:	2802      	cmp	r0, #2
 8008d90:	d197      	bne.n	8008cc2 <rfalIsoDepDataExchangePCD+0xe2>
                if( rfalIsoDep_PCBisChaining(rxPCB) )
 8008d92:	2001      	movs	r0, #1
 8008d94:	0019      	movs	r1, r3
 8008d96:	4001      	ands	r1, r0
 8008d98:	9104      	str	r1, [sp, #16]
 8008d9a:	2110      	movs	r1, #16
 8008d9c:	468c      	mov	ip, r1
 8008d9e:	4019      	ands	r1, r3
 8008da0:	9105      	str	r1, [sp, #20]
 8008da2:	4661      	mov	r1, ip
 8008da4:	4c24      	ldr	r4, [pc, #144]	@ (8008e38 <rfalIsoDepDataExchangePCD+0x258>)
 8008da6:	420b      	tst	r3, r1
 8008da8:	d028      	beq.n	8008dfc <rfalIsoDepDataExchangePCD+0x21c>
                    *outIsChaining       = true;
 8008daa:	9b02      	ldr	r3, [sp, #8]
                    gIsoDep.isRxChaining = true;
 8008dac:	75e0      	strb	r0, [r4, #23]
                    *outIsChaining       = true;
 8008dae:	7018      	strb	r0, [r3, #0]
                    if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8008db0:	78a3      	ldrb	r3, [r4, #2]
 8008db2:	9a04      	ldr	r2, [sp, #16]
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d000      	beq.n	8008dba <rfalIsoDepDataExchangePCD+0x1da>
 8008db8:	e752      	b.n	8008c60 <rfalIsoDepDataExchangePCD+0x80>
                        rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 8008dba:	4043      	eors	r3, r0
 8008dbc:	70a3      	strb	r3, [r4, #2]
                        rfalIsoDepClearCounters();  /* Clear counters in case R counter is already at max */
 8008dbe:	f7ff fca9 	bl	8008714 <rfalIsoDepClearCounters>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	0008      	movs	r0, r1
 8008dc6:	f7ff fd5b 	bl	8008880 <rfalIsoDepHandleControlMsg>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d000      	beq.n	8008dd0 <rfalIsoDepDataExchangePCD+0x1f0>
 8008dce:	e70d      	b.n	8008bec <rfalIsoDepDataExchangePCD+0xc>
                        *outActRxLen -= gIsoDep.hdrLen;
 8008dd0:	0023      	movs	r3, r4
 8008dd2:	332b      	adds	r3, #43	@ 0x2b
 8008dd4:	7819      	ldrb	r1, [r3, #0]
 8008dd6:	882a      	ldrh	r2, [r5, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8008dd8:	1da3      	adds	r3, r4, #6
                        *outActRxLen -= gIsoDep.hdrLen;
 8008dda:	1a52      	subs	r2, r2, r1
 8008ddc:	b292      	uxth	r2, r2
 8008dde:	802a      	strh	r2, [r5, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8008de0:	7fdb      	ldrb	r3, [r3, #31]
 8008de2:	4299      	cmp	r1, r3
 8008de4:	d006      	beq.n	8008df4 <rfalIsoDepDataExchangePCD+0x214>
 8008de6:	2a00      	cmp	r2, #0
 8008de8:	d004      	beq.n	8008df4 <rfalIsoDepDataExchangePCD+0x214>
                            RFAL_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 8008dea:	69e0      	ldr	r0, [r4, #28]
 8008dec:	1841      	adds	r1, r0, r1
 8008dee:	18c0      	adds	r0, r0, r3
 8008df0:	f007 fa58 	bl	80102a4 <memmove>
                        rfalIsoDepClearCounters();
 8008df4:	f7ff fc8e 	bl	8008714 <rfalIsoDepClearCounters>
                        return RFAL_ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 8008df8:	200d      	movs	r0, #13
 8008dfa:	e6f7      	b.n	8008bec <rfalIsoDepDataExchangePCD+0xc>
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 8008dfc:	9b05      	ldr	r3, [sp, #20]
                if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8008dfe:	9904      	ldr	r1, [sp, #16]
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 8008e00:	75e3      	strb	r3, [r4, #23]
                if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8008e02:	78a3      	ldrb	r3, [r4, #2]
 8008e04:	428b      	cmp	r3, r1
 8008e06:	d111      	bne.n	8008e2c <rfalIsoDepDataExchangePCD+0x24c>
                    *outActRxLen -= gIsoDep.hdrLen;
 8008e08:	1bd2      	subs	r2, r2, r7
                    rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 8008e0a:	4043      	eors	r3, r0
                    *outActRxLen -= gIsoDep.hdrLen;
 8008e0c:	b292      	uxth	r2, r2
                    rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 8008e0e:	70a3      	strb	r3, [r4, #2]
                    *outActRxLen -= gIsoDep.hdrLen;
 8008e10:	802a      	strh	r2, [r5, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8008e12:	1da3      	adds	r3, r4, #6
 8008e14:	7fd8      	ldrb	r0, [r3, #31]
 8008e16:	4287      	cmp	r7, r0
 8008e18:	d005      	beq.n	8008e26 <rfalIsoDepDataExchangePCD+0x246>
 8008e1a:	2a00      	cmp	r2, #0
 8008e1c:	d003      	beq.n	8008e26 <rfalIsoDepDataExchangePCD+0x246>
                        RFAL_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 8008e1e:	19f1      	adds	r1, r6, r7
 8008e20:	1830      	adds	r0, r6, r0
 8008e22:	f007 fa3f 	bl	80102a4 <memmove>
                    gIsoDep.state = ISODEP_ST_IDLE;
 8008e26:	2300      	movs	r3, #0
 8008e28:	7023      	strb	r3, [r4, #0]
 8008e2a:	e79b      	b.n	8008d64 <rfalIsoDepDataExchangePCD+0x184>
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 8008e2c:	9b03      	ldr	r3, [sp, #12]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d000      	beq.n	8008e34 <rfalIsoDepDataExchangePCD+0x254>
 8008e32:	e746      	b.n	8008cc2 <rfalIsoDepDataExchangePCD+0xe2>
                    RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8008e34:	9905      	ldr	r1, [sp, #20]
 8008e36:	e734      	b.n	8008ca2 <rfalIsoDepDataExchangePCD+0xc2>
 8008e38:	20000df8 	.word	0x20000df8
 8008e3c:	00080041 	.word	0x00080041
 8008e40:	20000e23 	.word	0x20000e23

08008e44 <rfalIsoDepInitializeWithParams>:
{
 8008e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e46:	0007      	movs	r7, r0
 8008e48:	b085      	sub	sp, #20
 8008e4a:	001c      	movs	r4, r3
 8008e4c:	ab0a      	add	r3, sp, #40	@ 0x28
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	000e      	movs	r6, r1
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	ab0b      	add	r3, sp, #44	@ 0x2c
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	0015      	movs	r5, r2
 8008e5a:	9302      	str	r3, [sp, #8]
 8008e5c:	ab0c      	add	r3, sp, #48	@ 0x30
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	9303      	str	r3, [sp, #12]
    rfalIsoDepInitialize();
 8008e62:	f7ff fe8d 	bl	8008b80 <rfalIsoDepInitialize>
    gIsoDep.compMode        = compMode;
 8008e66:	4b0c      	ldr	r3, [pc, #48]	@ (8008e98 <rfalIsoDepInitializeWithParams+0x54>)
 8008e68:	4a0c      	ldr	r2, [pc, #48]	@ (8008e9c <rfalIsoDepInitializeWithParams+0x58>)
    gIsoDep.maxRetriesSDSL  = maxRetriesSDSL;
 8008e6a:	9901      	ldr	r1, [sp, #4]
    gIsoDep.compMode        = compMode;
 8008e6c:	7017      	strb	r7, [r2, #0]
    gIsoDep.maxRetriesR     = maxRetriesR;
 8008e6e:	001a      	movs	r2, r3
 8008e70:	3240      	adds	r2, #64	@ 0x40
 8008e72:	7016      	strb	r6, [r2, #0]
    gIsoDep.maxRetriesSnWTX = maxRetriesSnWTX;
 8008e74:	001a      	movs	r2, r3
 8008e76:	3243      	adds	r2, #67	@ 0x43
 8008e78:	7015      	strb	r5, [r2, #0]
    gIsoDep.maxRetriesSWTX  = maxRetriesSWTX;
 8008e7a:	001a      	movs	r2, r3
 8008e7c:	3242      	adds	r2, #66	@ 0x42
 8008e7e:	7014      	strb	r4, [r2, #0]
    gIsoDep.maxRetriesSDSL  = maxRetriesSDSL;
 8008e80:	001a      	movs	r2, r3
 8008e82:	3241      	adds	r2, #65	@ 0x41
 8008e84:	7011      	strb	r1, [r2, #0]
    gIsoDep.maxRetriesI     = maxRetriesI;
 8008e86:	001a      	movs	r2, r3
 8008e88:	9902      	ldr	r1, [sp, #8]
 8008e8a:	323f      	adds	r2, #63	@ 0x3f
 8008e8c:	7011      	strb	r1, [r2, #0]
    gIsoDep.maxRetriesRATS  = maxRetriesRATS;
 8008e8e:	9a03      	ldr	r2, [sp, #12]
 8008e90:	3344      	adds	r3, #68	@ 0x44
 8008e92:	701a      	strb	r2, [r3, #0]
}
 8008e94:	b005      	add	sp, #20
 8008e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e98:	20000df8 	.word	0x20000df8
 8008e9c:	20000e3d 	.word	0x20000e3d

08008ea0 <rfalIsoDepStartDeselect>:
    gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 8008ea0:	4b07      	ldr	r3, [pc, #28]	@ (8008ec0 <rfalIsoDepStartDeselect+0x20>)
 8008ea2:	4a08      	ldr	r2, [pc, #32]	@ (8008ec4 <rfalIsoDepStartDeselect+0x24>)
{
 8008ea4:	b510      	push	{r4, lr}
    gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 8008ea6:	631a      	str	r2, [r3, #48]	@ 0x30
    gIsoDep.rxBuf       = gIsoDep.ctrlBuf;
 8008ea8:	4a07      	ldr	r2, [pc, #28]	@ (8008ec8 <rfalIsoDepStartDeselect+0x28>)
    return rfalIsoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM );
 8008eaa:	2100      	movs	r1, #0
    gIsoDep.rxBuf       = gIsoDep.ctrlBuf;
 8008eac:	61da      	str	r2, [r3, #28]
    gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN - (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8008eae:	2202      	movs	r2, #2
 8008eb0:	845a      	strh	r2, [r3, #34]	@ 0x22
    gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8008eb2:	4a06      	ldr	r2, [pc, #24]	@ (8008ecc <rfalIsoDepStartDeselect+0x2c>)
    return rfalIsoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM );
 8008eb4:	2003      	movs	r0, #3
    gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8008eb6:	849a      	strh	r2, [r3, #36]	@ 0x24
    return rfalIsoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM );
 8008eb8:	f7ff fce2 	bl	8008880 <rfalIsoDepHandleControlMsg>
}
 8008ebc:	bd10      	pop	{r4, pc}
 8008ebe:	46c0      	nop			@ (mov r8, r8)
 8008ec0:	20000df8 	.word	0x20000df8
 8008ec4:	20000e42 	.word	0x20000e42
 8008ec8:	20000e3e 	.word	0x20000e3e
 8008ecc:	00000202 	.word	0x00000202

08008ed0 <rfalIsoDepGetDeselectStatus>:
{
 8008ed0:	b513      	push	{r0, r1, r4, lr}
    RFAL_EXIT_ON_BUSY( ret, rfalIsoDepDataExchangePCD( gIsoDep.rxLen, &dummyB ) );
 8008ed2:	466a      	mov	r2, sp
 8008ed4:	4b05      	ldr	r3, [pc, #20]	@ (8008eec <rfalIsoDepGetDeselectStatus+0x1c>)
 8008ed6:	1dd1      	adds	r1, r2, #7
 8008ed8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008eda:	f7ff fe81 	bl	8008be0 <rfalIsoDepDataExchangePCD>
 8008ede:	0004      	movs	r4, r0
 8008ee0:	2802      	cmp	r0, #2
 8008ee2:	d001      	beq.n	8008ee8 <rfalIsoDepGetDeselectStatus+0x18>
    rfalIsoDepInitialize();
 8008ee4:	f7ff fe4c 	bl	8008b80 <rfalIsoDepInitialize>
}
 8008ee8:	0020      	movs	r0, r4
 8008eea:	bd16      	pop	{r1, r2, r4, pc}
 8008eec:	20000df8 	.word	0x20000df8

08008ef0 <rfalIsoDepFWI2FWT>:
    if( tmpFWI > ISODEP_FWI_MAX )
 8008ef0:	280e      	cmp	r0, #14
 8008ef2:	d900      	bls.n	8008ef6 <rfalIsoDepFWI2FWT+0x6>
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 8008ef4:	2004      	movs	r0, #4
    result = ((uint32_t)1U << (tmpFWI + 12U));
 8008ef6:	300c      	adds	r0, #12
 8008ef8:	b2c3      	uxtb	r3, r0
 8008efa:	2001      	movs	r0, #1
 8008efc:	4098      	lsls	r0, r3
}
 8008efe:	4770      	bx	lr

08008f00 <rfalIsoDepFSxI2FSx>:
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? RFAL_MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : RFAL_MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8008f00:	4b0b      	ldr	r3, [pc, #44]	@ (8008f30 <rfalIsoDepFSxI2FSx+0x30>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d10d      	bne.n	8008f24 <rfalIsoDepFSxI2FSx+0x24>
 8008f08:	1c03      	adds	r3, r0, #0
 8008f0a:	280c      	cmp	r0, #12
 8008f0c:	d900      	bls.n	8008f10 <rfalIsoDepFSxI2FSx+0x10>
 8008f0e:	230c      	movs	r3, #12
 8008f10:	b2db      	uxtb	r3, r3
    switch( fsi )
 8008f12:	3b01      	subs	r3, #1
 8008f14:	b2db      	uxtb	r3, r3
{
 8008f16:	2010      	movs	r0, #16
 8008f18:	2b0b      	cmp	r3, #11
 8008f1a:	d802      	bhi.n	8008f22 <rfalIsoDepFSxI2FSx+0x22>
 8008f1c:	4a05      	ldr	r2, [pc, #20]	@ (8008f34 <rfalIsoDepFSxI2FSx+0x34>)
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	5a98      	ldrh	r0, [r3, r2]
}
 8008f22:	4770      	bx	lr
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? RFAL_MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : RFAL_MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 8008f24:	1c03      	adds	r3, r0, #0
 8008f26:	2808      	cmp	r0, #8
 8008f28:	d9f2      	bls.n	8008f10 <rfalIsoDepFSxI2FSx+0x10>
 8008f2a:	2308      	movs	r3, #8
 8008f2c:	e7f0      	b.n	8008f10 <rfalIsoDepFSxI2FSx+0x10>
 8008f2e:	46c0      	nop			@ (mov r8, r8)
 8008f30:	20000e3d 	.word	0x20000e3d
 8008f34:	08011470 	.word	0x08011470

08008f38 <rfalIsoDepGetRATSStatus>:
{
 8008f38:	b570      	push	{r4, r5, r6, lr}
    ret = rfalGetTransceiveStatus();
 8008f3a:	f7f9 f941 	bl	80021c0 <rfalGetTransceiveStatus>
 8008f3e:	1e04      	subs	r4, r0, #0
    if( ret == RFAL_ERR_NONE )
 8008f40:	d116      	bne.n	8008f70 <rfalIsoDepGetRATSStatus+0x38>
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 8008f42:	4d0d      	ldr	r5, [pc, #52]	@ (8008f78 <rfalIsoDepGetRATSStatus+0x40>)
 8008f44:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8008f46:	3307      	adds	r3, #7
 8008f48:	08de      	lsrs	r6, r3, #3
        if( (gIsoDep.rxBufLen < RFAL_ISODEP_ATS_MIN_LEN) || (gIsoDep.rxBufLen > RFAL_ISODEP_ATS_MAX_LEN) || ( gIsoDep.rxBuf[RFAL_ISODEP_ATS_TL_POS] != gIsoDep.rxBufLen) )
 8008f4a:	1e72      	subs	r2, r6, #1
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 8008f4c:	846e      	strh	r6, [r5, #34]	@ 0x22
        if( (gIsoDep.rxBufLen < RFAL_ISODEP_ATS_MIN_LEN) || (gIsoDep.rxBufLen > RFAL_ISODEP_ATS_MAX_LEN) || ( gIsoDep.rxBuf[RFAL_ISODEP_ATS_TL_POS] != gIsoDep.rxBufLen) )
 8008f4e:	2a13      	cmp	r2, #19
 8008f50:	d810      	bhi.n	8008f74 <rfalIsoDepGetRATSStatus+0x3c>
 8008f52:	69ea      	ldr	r2, [r5, #28]
 8008f54:	7812      	ldrb	r2, [r2, #0]
 8008f56:	42b2      	cmp	r2, r6
 8008f58:	d10c      	bne.n	8008f74 <rfalIsoDepGetRATSStatus+0x3c>
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t) (gIsoDep.actv.ratsReq.PARAM >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 8008f5a:	002b      	movs	r3, r5
 8008f5c:	334d      	adds	r3, #77	@ 0x4d
 8008f5e:	7818      	ldrb	r0, [r3, #0]
 8008f60:	0900      	lsrs	r0, r0, #4
 8008f62:	f7ff ffcd 	bl	8008f00 <rfalIsoDepFSxI2FSx>
        if( gIsoDep.rxLen8 != NULL )
 8008f66:	6fab      	ldr	r3, [r5, #120]	@ 0x78
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t) (gIsoDep.actv.ratsReq.PARAM >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 8008f68:	84e8      	strh	r0, [r5, #38]	@ 0x26
        if( gIsoDep.rxLen8 != NULL )
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d000      	beq.n	8008f70 <rfalIsoDepGetRATSStatus+0x38>
            *gIsoDep.rxLen8 = (uint8_t)gIsoDep.rxBufLen;
 8008f6e:	701e      	strb	r6, [r3, #0]
}
 8008f70:	0020      	movs	r0, r4
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
            return RFAL_ERR_PROTO;
 8008f74:	240b      	movs	r4, #11
 8008f76:	e7fb      	b.n	8008f70 <rfalIsoDepGetRATSStatus+0x38>
 8008f78:	20000df8 	.word	0x20000df8

08008f7c <rfalIsoDepGetATTRIBStatus>:
{
 8008f7c:	b570      	push	{r4, r5, r6, lr}
    ret = rfalGetTransceiveStatus();
 8008f7e:	f7f9 f91f 	bl	80021c0 <rfalGetTransceiveStatus>
 8008f82:	1e05      	subs	r5, r0, #0
    if( ret == RFAL_ERR_NONE )
 8008f84:	d118      	bne.n	8008fb8 <rfalIsoDepGetATTRIBStatus+0x3c>
        gIsoDep.rxBufLen = rfalConvBitsToBytes(gIsoDep.rxBufLen);
 8008f86:	4c0e      	ldr	r4, [pc, #56]	@ (8008fc0 <rfalIsoDepGetATTRIBStatus+0x44>)
 8008f88:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008f8a:	3307      	adds	r3, #7
 8008f8c:	08db      	lsrs	r3, r3, #3
 8008f8e:	8463      	strh	r3, [r4, #34]	@ 0x22
        if( (gIsoDep.rxBufLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((gIsoDep.rxBuf[RFAL_ISODEP_ATTRIB_RES_MBLIDID_POS] & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != gIsoDep.did) )
 8008f90:	d014      	beq.n	8008fbc <rfalIsoDepGetATTRIBStatus+0x40>
 8008f92:	200f      	movs	r0, #15
 8008f94:	69e2      	ldr	r2, [r4, #28]
 8008f96:	78e1      	ldrb	r1, [r4, #3]
 8008f98:	7812      	ldrb	r2, [r2, #0]
 8008f9a:	4002      	ands	r2, r0
 8008f9c:	4291      	cmp	r1, r2
 8008f9e:	d10d      	bne.n	8008fbc <rfalIsoDepGetATTRIBStatus+0x40>
        if( gIsoDep.rxLen8 != NULL )
 8008fa0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8008fa2:	2a00      	cmp	r2, #0
 8008fa4:	d000      	beq.n	8008fa8 <rfalIsoDepGetATTRIBStatus+0x2c>
            *gIsoDep.rxLen8 = (uint8_t)gIsoDep.rxBufLen;
 8008fa6:	7013      	strb	r3, [r2, #0]
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)(gIsoDep.actv.attribReq.Param.PARAM2 & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8008fa8:	0023      	movs	r3, r4
 8008faa:	3352      	adds	r3, #82	@ 0x52
 8008fac:	7818      	ldrb	r0, [r3, #0]
 8008fae:	230f      	movs	r3, #15
 8008fb0:	4018      	ands	r0, r3
 8008fb2:	f7ff ffa5 	bl	8008f00 <rfalIsoDepFSxI2FSx>
 8008fb6:	84e0      	strh	r0, [r4, #38]	@ 0x26
}
 8008fb8:	0028      	movs	r0, r5
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
           return RFAL_ERR_PROTO;
 8008fbc:	250b      	movs	r5, #11
 8008fbe:	e7fb      	b.n	8008fb8 <rfalIsoDepGetATTRIBStatus+0x3c>
 8008fc0:	20000df8 	.word	0x20000df8

08008fc4 <rfalIsoDepIsRats>:
    if(buf != NULL)
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d007      	beq.n	8008fd8 <rfalIsoDepIsRats+0x14>
        if ((RFAL_ISODEP_CMD_RATS == (uint8_t)*buf) && (sizeof(rfalIsoDepRats) == bufLen))
 8008fc8:	7803      	ldrb	r3, [r0, #0]
    return false;
 8008fca:	2000      	movs	r0, #0
        if ((RFAL_ISODEP_CMD_RATS == (uint8_t)*buf) && (sizeof(rfalIsoDepRats) == bufLen))
 8008fcc:	2be0      	cmp	r3, #224	@ 0xe0
 8008fce:	d103      	bne.n	8008fd8 <rfalIsoDepIsRats+0x14>
 8008fd0:	3902      	subs	r1, #2
 8008fd2:	424b      	negs	r3, r1
 8008fd4:	4159      	adcs	r1, r3
 8008fd6:	b2c8      	uxtb	r0, r1
}
 8008fd8:	4770      	bx	lr
	...

08008fdc <rfalIsoDepListenStartActivation>:
    gIsoDep.txBR = RFAL_BR_106;
 8008fdc:	2300      	movs	r3, #0
{
 8008fde:	b5f0      	push	{r4, r5, r6, r7, lr}
    gIsoDep.txBR = RFAL_BR_106;
 8008fe0:	4d4e      	ldr	r5, [pc, #312]	@ (800911c <rfalIsoDepListenStartActivation+0x140>)
{
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	0004      	movs	r4, r0
 8008fe6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
        return RFAL_ERR_PARAM;
 8008fe8:	2007      	movs	r0, #7
 8008fea:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
{
 8008fec:	9205      	str	r2, [sp, #20]
    gIsoDep.txBR = RFAL_BR_106;
 8008fee:	85ab      	strh	r3, [r5, #44]	@ 0x2c
    if( buffer == NULL )
 8008ff0:	2a00      	cmp	r2, #0
 8008ff2:	d07e      	beq.n	80090f2 <rfalIsoDepListenStartActivation+0x116>
    if( *buffer == RFAL_ISODEP_CMD_RATS )
 8008ff4:	7813      	ldrb	r3, [r2, #0]
 8008ff6:	2be0      	cmp	r3, #224	@ 0xe0
 8008ff8:	d175      	bne.n	80090e6 <rfalIsoDepListenStartActivation+0x10a>
        if( atsParam == NULL )
 8008ffa:	2c00      	cmp	r4, #0
 8008ffc:	d079      	beq.n	80090f2 <rfalIsoDepListenStartActivation+0x116>
        if( actParam.isoDepDev != NULL )
 8008ffe:	2e00      	cmp	r6, #0
 8009000:	d004      	beq.n	800900c <rfalIsoDepListenStartActivation+0x30>
            RFAL_MEMCPY( (uint8_t*)&actParam.isoDepDev->activation.A.Poller.RATS, buffer, sizeof(rfalIsoDepRats) );	/* Copy RATS' CMD + PARAM */
 8009002:	2202      	movs	r2, #2
 8009004:	0030      	movs	r0, r6
 8009006:	9905      	ldr	r1, [sp, #20]
 8009008:	f007 f992 	bl	8010330 <memcpy>
        gIsoDep.fsx = rfalIsoDepFSxI2FSx( (((*buffer) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 800900c:	9b05      	ldr	r3, [sp, #20]
 800900e:	7858      	ldrb	r0, [r3, #1]
 8009010:	0900      	lsrs	r0, r0, #4
 8009012:	f7ff ff75 	bl	8008f00 <rfalIsoDepFSxI2FSx>
        gIsoDep.did = (*buffer & RFAL_ISODEP_DID_MASK);
 8009016:	220f      	movs	r2, #15
 8009018:	9b05      	ldr	r3, [sp, #20]
        gIsoDep.fsx = rfalIsoDepFSxI2FSx( (((*buffer) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) );
 800901a:	82a8      	strh	r0, [r5, #20]
        gIsoDep.did = (*buffer & RFAL_ISODEP_DID_MASK);
 800901c:	785b      	ldrb	r3, [r3, #1]
            return RFAL_ERR_PROTO;
 800901e:	200b      	movs	r0, #11
        gIsoDep.did = (*buffer & RFAL_ISODEP_DID_MASK);
 8009020:	4013      	ands	r3, r2
 8009022:	70eb      	strb	r3, [r5, #3]
        if( gIsoDep.did > RFAL_ISODEP_DID_MAX )
 8009024:	4293      	cmp	r3, r2
 8009026:	d064      	beq.n	80090f2 <rfalIsoDepListenStartActivation+0x116>
        if( (gIsoDep.did != RFAL_ISODEP_DID_00) && (!atsParam->didSupport) )
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <rfalIsoDepListenStartActivation+0x58>
 800902c:	78e3      	ldrb	r3, [r4, #3]
            return RFAL_ERR_NOTSUPP;
 800902e:	300d      	adds	r0, #13
        if( (gIsoDep.did != RFAL_ISODEP_DID_00) && (!atsParam->didSupport) )
 8009030:	2b00      	cmp	r3, #0
 8009032:	d05e      	beq.n	80090f2 <rfalIsoDepListenStartActivation+0x116>
        if( ((!RFAL_SUPPORT_BR_CE_A_212) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_212) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_212) != 0U)))  ||
 8009034:	2377      	movs	r3, #119	@ 0x77
 8009036:	7922      	ldrb	r2, [r4, #4]
            return RFAL_ERR_NOTSUPP;
 8009038:	2018      	movs	r0, #24
        if( ((!RFAL_SUPPORT_BR_CE_A_212) && (((atsParam->ta & RFAL_ISODEP_ATS_TA_DPL_212) != 0U) || ((atsParam->ta & RFAL_ISODEP_ATS_TA_DLP_212) != 0U)))  ||
 800903a:	421a      	tst	r2, r3
 800903c:	d159      	bne.n	80090f2 <rfalIsoDepListenStartActivation+0x116>
        if( atsParam->fwi > ISODEP_FWI_LIS_MAX)
 800903e:	0029      	movs	r1, r5
 8009040:	3145      	adds	r1, #69	@ 0x45
 8009042:	7809      	ldrb	r1, [r1, #0]
 8009044:	7863      	ldrb	r3, [r4, #1]
 8009046:	2901      	cmp	r1, #1
 8009048:	d164      	bne.n	8009114 <rfalIsoDepListenStartActivation+0x138>
 800904a:	2b07      	cmp	r3, #7
 800904c:	dd01      	ble.n	8009052 <rfalIsoDepListenStartActivation+0x76>
            atsParam->fwi = ISODEP_FWI_LIS_MAX;
 800904e:	2307      	movs	r3, #7
 8009050:	7063      	strb	r3, [r4, #1]
        gIsoDep.atsTA  = atsParam->ta;
 8009052:	002b      	movs	r3, r5
 8009054:	332a      	adds	r3, #42	@ 0x2a
 8009056:	701a      	strb	r2, [r3, #0]
        gIsoDep.fwt    = rfalIsoDepFWI2FWT(atsParam->fwi);
 8009058:	7860      	ldrb	r0, [r4, #1]
 800905a:	f7ff ff49 	bl	8008ef0 <rfalIsoDepFWI2FWT>
 800905e:	60e8      	str	r0, [r5, #12]
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx(atsParam->fsci);
 8009060:	7820      	ldrb	r0, [r4, #0]
 8009062:	f7ff ff4d 	bl	8008f00 <rfalIsoDepFSxI2FSx>
 8009066:	84e8      	strh	r0, [r5, #38]	@ 0x26
        atsParam->hbLen = RFAL_MIN( RFAL_ISODEP_ATS_HB_MAX_LEN, atsParam->hbLen );
 8009068:	7b22      	ldrb	r2, [r4, #12]
 800906a:	1c13      	adds	r3, r2, #0
 800906c:	2a0f      	cmp	r2, #15
 800906e:	d900      	bls.n	8009072 <rfalIsoDepListenStartActivation+0x96>
 8009070:	230f      	movs	r3, #15
 8009072:	7323      	strb	r3, [r4, #12]
        txBuf[ bufIt++ ] = (RFAL_ISODEP_ATS_HIST_OFFSET + atsParam->hbLen);                                  /* TL */
 8009074:	3305      	adds	r3, #5
 8009076:	703b      	strb	r3, [r7, #0]
        txBuf[ bufIt++ ] = ( (RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK | RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK | 
 8009078:	2370      	movs	r3, #112	@ 0x70
                             (atsParam->sfgi & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) );                          /* TB */
 800907a:	210f      	movs	r1, #15
        txBuf[ bufIt++ ] = ( (RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK | RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK | 
 800907c:	7822      	ldrb	r2, [r4, #0]
 800907e:	4313      	orrs	r3, r2
 8009080:	707b      	strb	r3, [r7, #1]
        txBuf[ bufIt++ ] = atsParam->ta;                                                                     /* TA */
 8009082:	7923      	ldrb	r3, [r4, #4]
 8009084:	70bb      	strb	r3, [r7, #2]
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 8009086:	7863      	ldrb	r3, [r4, #1]
                             (atsParam->sfgi & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) );                          /* TB */
 8009088:	78a2      	ldrb	r2, [r4, #2]
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 800908a:	011b      	lsls	r3, r3, #4
                             (atsParam->sfgi & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) );                          /* TB */
 800908c:	438a      	bics	r2, r1
        txBuf[ bufIt++ ] = ( (atsParam->fwi << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) | 
 800908e:	4313      	orrs	r3, r2
 8009090:	70fb      	strb	r3, [r7, #3]
        txBuf[ bufIt++ ] = (uint8_t)((atsParam->didSupport) ? RFAL_ISODEP_ATS_TC_DID : 0U);                  /* TC */
 8009092:	78e3      	ldrb	r3, [r4, #3]
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	713b      	strb	r3, [r7, #4]
 8009098:	2305      	movs	r3, #5
        if( atsParam->hbLen > 0U )             /* MISRA 21.18 */
 800909a:	7b22      	ldrb	r2, [r4, #12]
        txBuf[ bufIt++ ] = (uint8_t)((atsParam->didSupport) ? RFAL_ISODEP_ATS_TC_DID : 0U);                  /* TC */
 800909c:	469c      	mov	ip, r3
        if( atsParam->hbLen > 0U )             /* MISRA 21.18 */
 800909e:	2a00      	cmp	r2, #0
 80090a0:	d007      	beq.n	80090b2 <rfalIsoDepListenStartActivation+0xd6>
            RFAL_MEMCPY( &txBuf[bufIt], atsParam->hb, atsParam->hbLen );                                       /* T1-Tk */
 80090a2:	68a1      	ldr	r1, [r4, #8]
 80090a4:	18f8      	adds	r0, r7, r3
 80090a6:	f007 f943 	bl	8010330 <memcpy>
            bufIt += atsParam->hbLen;
 80090aa:	7b21      	ldrb	r1, [r4, #12]
 80090ac:	3105      	adds	r1, #5
 80090ae:	b2cb      	uxtb	r3, r1
 80090b0:	469c      	mov	ip, r3
        gIsoDep.state = ISODEP_ST_PICC_ACT_ATS;
 80090b2:	2304      	movs	r3, #4
 80090b4:	702b      	strb	r3, [r5, #0]
    gIsoDep.actvParam = actParam;
 80090b6:	002b      	movs	r3, r5
 80090b8:	aa0c      	add	r2, sp, #48	@ 0x30
 80090ba:	3380      	adds	r3, #128	@ 0x80
 80090bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80090be:	c313      	stmia	r3!, {r0, r1, r4}
 80090c0:	6812      	ldr	r2, [r2, #0]
 80090c2:	601a      	str	r2, [r3, #0]
    if( actParam.isoDepDev != NULL )
 80090c4:	2e00      	cmp	r6, #0
 80090c6:	d116      	bne.n	80090f6 <rfalIsoDepListenStartActivation+0x11a>
    return rfalTransceiveBlockingTx( txBuf, bufIt, (uint8_t*)actParam.rxBuf, sizeof( rfalIsoDepBufFormat ), actParam.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FWT_NONE );
 80090c8:	2301      	movs	r3, #1
 80090ca:	425b      	negs	r3, r3
 80090cc:	9302      	str	r3, [sp, #8]
 80090ce:	2300      	movs	r3, #0
 80090d0:	9301      	str	r3, [sp, #4]
 80090d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090d4:	003a      	movs	r2, r7
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	2304      	movs	r3, #4
 80090da:	4661      	mov	r1, ip
 80090dc:	0038      	movs	r0, r7
 80090de:	33ff      	adds	r3, #255	@ 0xff
 80090e0:	f7fa fa62 	bl	80035a8 <rfalTransceiveBlockingTx>
 80090e4:	e005      	b.n	80090f2 <rfalIsoDepListenStartActivation+0x116>
        return RFAL_ERR_PARAM;
 80090e6:	2007      	movs	r0, #7
    else if( *buffer == RFAL_ISODEP_CMD_ATTRIB )
 80090e8:	2b1d      	cmp	r3, #29
 80090ea:	d102      	bne.n	80090f2 <rfalIsoDepListenStartActivation+0x116>
        if( attribResParam == NULL )
 80090ec:	2900      	cmp	r1, #0
 80090ee:	d000      	beq.n	80090f2 <rfalIsoDepListenStartActivation+0x116>
        return RFAL_ERR_NOT_IMPLEMENTED;
 80090f0:	3008      	adds	r0, #8
}
 80090f2:	b007      	add	sp, #28
 80090f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        actParam.isoDepDev->info.DID  = gIsoDep.did;
 80090f6:	0033      	movs	r3, r6
 80090f8:	78ea      	ldrb	r2, [r5, #3]
 80090fa:	334a      	adds	r3, #74	@ 0x4a
 80090fc:	701a      	strb	r2, [r3, #0]
        actParam.isoDepDev->info.FSx  = gIsoDep.fsx;
 80090fe:	8aaa      	ldrh	r2, [r5, #20]
 8009100:	1d33      	adds	r3, r6, #4
 8009102:	87da      	strh	r2, [r3, #62]	@ 0x3e
        actParam.isoDepDev->info.FWT  = gIsoDep.fwt;
 8009104:	68eb      	ldr	r3, [r5, #12]
 8009106:	6333      	str	r3, [r6, #48]	@ 0x30
        actParam.isoDepDev->info.dFWT = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	6373      	str	r3, [r6, #52]	@ 0x34
        actParam.isoDepDev->info.DSI  = gIsoDep.txBR;
 800910c:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 800910e:	3648      	adds	r6, #72	@ 0x48
 8009110:	8033      	strh	r3, [r6, #0]
 8009112:	e7d9      	b.n	80090c8 <rfalIsoDepListenStartActivation+0xec>
        if( atsParam->fwi > ISODEP_FWI_LIS_MAX)
 8009114:	2b08      	cmp	r3, #8
 8009116:	dd9c      	ble.n	8009052 <rfalIsoDepListenStartActivation+0x76>
            atsParam->fwi = ISODEP_FWI_LIS_MAX;
 8009118:	2308      	movs	r3, #8
 800911a:	e799      	b.n	8009050 <rfalIsoDepListenStartActivation+0x74>
 800911c:	20000df8 	.word	0x20000df8

08009120 <rfalIsoDepListenGetActivationStatus>:
{
 8009120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if( gIsoDep.state < ISODEP_ST_PICC_ACT_ATS )
 8009122:	4c50      	ldr	r4, [pc, #320]	@ (8009264 <rfalIsoDepListenGetActivationStatus+0x144>)
        return RFAL_ERR_WRONG_STATE;
 8009124:	2121      	movs	r1, #33	@ 0x21
    if( gIsoDep.state < ISODEP_ST_PICC_ACT_ATS )
 8009126:	7823      	ldrb	r3, [r4, #0]
 8009128:	2b03      	cmp	r3, #3
 800912a:	d91c      	bls.n	8009166 <rfalIsoDepListenGetActivationStatus+0x46>
    if( gIsoDep.state >= ISODEP_ST_PICC_RX )
 800912c:	2b05      	cmp	r3, #5
 800912e:	d900      	bls.n	8009132 <rfalIsoDepListenGetActivationStatus+0x12>
 8009130:	e093      	b.n	800925a <rfalIsoDepListenGetActivationStatus+0x13a>
    err = rfalGetTransceiveStatus();
 8009132:	f7f9 f845 	bl	80021c0 <rfalGetTransceiveStatus>
 8009136:	0001      	movs	r1, r0
    switch( err )
 8009138:	2809      	cmp	r0, #9
 800913a:	d01d      	beq.n	8009178 <rfalIsoDepListenGetActivationStatus+0x58>
 800913c:	d816      	bhi.n	800916c <rfalIsoDepListenGetActivationStatus+0x4c>
 800913e:	2800      	cmp	r0, #0
 8009140:	d01f      	beq.n	8009182 <rfalIsoDepListenGetActivationStatus+0x62>
 8009142:	2802      	cmp	r0, #2
 8009144:	d00e      	beq.n	8009164 <rfalIsoDepListenGetActivationStatus+0x44>
            rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 8009146:	2301      	movs	r3, #1
 8009148:	2000      	movs	r0, #0
 800914a:	425b      	negs	r3, r3
 800914c:	1d22      	adds	r2, r4, #4
 800914e:	9302      	str	r3, [sp, #8]
 8009150:	9001      	str	r0, [sp, #4]
 8009152:	3408      	adds	r4, #8
 8009154:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	2304      	movs	r3, #4
 800915a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 800915c:	33ff      	adds	r3, #255	@ 0xff
                rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800915e:	0001      	movs	r1, r0
 8009160:	f7fa fa22 	bl	80035a8 <rfalTransceiveBlockingTx>
            return RFAL_ERR_BUSY;
 8009164:	2102      	movs	r1, #2
}
 8009166:	0008      	movs	r0, r1
 8009168:	b004      	add	sp, #16
 800916a:	bd70      	pop	{r4, r5, r6, pc}
    switch( err )
 800916c:	281b      	cmp	r0, #27
 800916e:	d003      	beq.n	8009178 <rfalIsoDepListenGetActivationStatus+0x58>
 8009170:	2825      	cmp	r0, #37	@ 0x25
 8009172:	d0f8      	beq.n	8009166 <rfalIsoDepListenGetActivationStatus+0x46>
 8009174:	2815      	cmp	r0, #21
 8009176:	d1e6      	bne.n	8009146 <rfalIsoDepListenGetActivationStatus+0x26>
            if( gIsoDep.state == ISODEP_ST_PICC_ACT_ATS )
 8009178:	7823      	ldrb	r3, [r4, #0]
 800917a:	2b04      	cmp	r3, #4
 800917c:	d1e3      	bne.n	8009146 <rfalIsoDepListenGetActivationStatus+0x26>
               gIsoDep.state = ISODEP_ST_PICC_RX;
 800917e:	3302      	adds	r3, #2
 8009180:	7023      	strb	r3, [r4, #0]
    txBuf = (uint8_t*)gIsoDep.actvParam.rxBuf;   /* Use the rxBuf as TxBuf as well, the struct enforces a size enough  RFAL_MAX(NFCA_PPS_RES_LEN, ISODEP_DSL_MAX_LEN) */    
 8009182:	1d23      	adds	r3, r4, #4
 8009184:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
    gIsoDep.role  = ISODEP_ROLE_PICC;
 8009186:	2301      	movs	r3, #1
 8009188:	7063      	strb	r3, [r4, #1]
    if( gIsoDep.state == ISODEP_ST_PICC_ACT_ATS )
 800918a:	7823      	ldrb	r3, [r4, #0]
 800918c:	2b04      	cmp	r3, #4
 800918e:	d147      	bne.n	8009220 <rfalIsoDepListenGetActivationStatus+0x100>
        if( ( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_PPS_MASK) == RFAL_ISODEP_PPS_SB )
 8009190:	7813      	ldrb	r3, [r2, #0]
 8009192:	210f      	movs	r1, #15
 8009194:	0018      	movs	r0, r3
 8009196:	4388      	bics	r0, r1
 8009198:	28d0      	cmp	r0, #208	@ 0xd0
 800919a:	d141      	bne.n	8009220 <rfalIsoDepListenGetActivationStatus+0x100>
            if( (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_DID_MASK) != gIsoDep.did)                         ||
 800919c:	78e0      	ldrb	r0, [r4, #3]
 800919e:	400b      	ands	r3, r1
 80091a0:	4298      	cmp	r0, r3
 80091a2:	d105      	bne.n	80091b0 <rfalIsoDepListenGetActivationStatus+0x90>
                (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS0_POS] & RFAL_ISODEP_PPS0_VALID_MASK) != RFAL_ISODEP_PPS0_PPS1_NOT_PRESENT)   )
 80091a4:	7853      	ldrb	r3, [r2, #1]
            if( (( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_STARTBYTE_POS] & RFAL_ISODEP_DID_MASK) != gIsoDep.did)                         ||
 80091a6:	3101      	adds	r1, #1
 80091a8:	0018      	movs	r0, r3
 80091aa:	4388      	bics	r0, r1
 80091ac:	2801      	cmp	r0, #1
 80091ae:	d00a      	beq.n	80091c6 <rfalIsoDepListenGetActivationStatus+0xa6>
                rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 80091b0:	2301      	movs	r3, #1
 80091b2:	2000      	movs	r0, #0
 80091b4:	425b      	negs	r3, r3
 80091b6:	9302      	str	r3, [sp, #8]
 80091b8:	9001      	str	r0, [sp, #4]
 80091ba:	3408      	adds	r4, #8
 80091bc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	2304      	movs	r3, #4
 80091c2:	33ff      	adds	r3, #255	@ 0xff
 80091c4:	e7cb      	b.n	800915e <rfalIsoDepListenGetActivationStatus+0x3e>
            if( ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS0_POS] == RFAL_ISODEP_PPS0_PPS1_PRESENT )
 80091c6:	2b11      	cmp	r3, #17
 80091c8:	d149      	bne.n	800925e <rfalIsoDepListenGetActivationStatus+0x13e>
                uint8_t newdri = ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] & RFAL_ISODEP_PPS1_DxI_MASK;                                 /* MISRA 10.8 */
 80091ca:	2103      	movs	r1, #3
 80091cc:	7893      	ldrb	r3, [r2, #2]
 80091ce:	0018      	movs	r0, r3
                uint8_t newdsi = (((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] >> RFAL_ISODEP_PPS1_DSI_SHIFT) & RFAL_ISODEP_PPS1_DxI_MASK; /* MISRA 10.8 */
 80091d0:	089b      	lsrs	r3, r3, #2
 80091d2:	400b      	ands	r3, r1
                if( ((!(RFAL_SUPPORT_BR_CE_A_106)) && (( dsi == RFAL_BR_106 ) || ( dri == RFAL_BR_106 )))  ||
 80091d4:	3b01      	subs	r3, #1
                uint8_t newdri = ((uint8_t*)gIsoDep.actvParam.rxBuf)[RFAL_ISODEP_PPS_PPS1_POS] & RFAL_ISODEP_PPS1_DxI_MASK;                                 /* MISRA 10.8 */
 80091d6:	4008      	ands	r0, r1
                    return RFAL_ERR_PROTO;
 80091d8:	3108      	adds	r1, #8
                if( ((!(RFAL_SUPPORT_BR_CE_A_106)) && (( dsi == RFAL_BR_106 ) || ( dri == RFAL_BR_106 )))  ||
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d9c3      	bls.n	8009166 <rfalIsoDepListenGetActivationStatus+0x46>
 80091de:	3801      	subs	r0, #1
                dsi = (rfalBitRate) (newdsi);
 80091e0:	2600      	movs	r6, #0
                if( ((!(RFAL_SUPPORT_BR_CE_A_106)) && (( dsi == RFAL_BR_106 ) || ( dri == RFAL_BR_106 )))  ||
 80091e2:	2802      	cmp	r0, #2
 80091e4:	d9bf      	bls.n	8009166 <rfalIsoDepListenGetActivationStatus+0x46>
            rfalTransceiveBlockingTx( txBuf, bufIt, (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FWT_NONE );
 80091e6:	2301      	movs	r3, #1
 80091e8:	425b      	negs	r3, r3
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	2500      	movs	r5, #0
 80091ee:	0023      	movs	r3, r4
 80091f0:	9501      	str	r5, [sp, #4]
 80091f2:	3308      	adds	r3, #8
 80091f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091f6:	2101      	movs	r1, #1
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	2304      	movs	r3, #4
 80091fc:	0010      	movs	r0, r2
 80091fe:	33ff      	adds	r3, #255	@ 0xff
 8009200:	f7fa f9d2 	bl	80035a8 <rfalTransceiveBlockingTx>
            if( dri != RFAL_BR_KEEP )
 8009204:	2eff      	cmp	r6, #255	@ 0xff
 8009206:	d00b      	beq.n	8009220 <rfalIsoDepListenGetActivationStatus+0x100>
                rfalSetBitRate( dsi, dri );
 8009208:	0029      	movs	r1, r5
 800920a:	0028      	movs	r0, r5
 800920c:	f7f8 fc1a 	bl	8001a44 <rfalSetBitRate>
                if(gIsoDep.actvParam.isoDepDev != NULL)
 8009210:	0023      	movs	r3, r4
 8009212:	338c      	adds	r3, #140	@ 0x8c
 8009214:	681b      	ldr	r3, [r3, #0]
                gIsoDep.txBR = dsi;  /* DSI codes the divisor from PICC to PCD */
 8009216:	85a5      	strh	r5, [r4, #44]	@ 0x2c
                if(gIsoDep.actvParam.isoDepDev != NULL)
 8009218:	42ab      	cmp	r3, r5
 800921a:	d001      	beq.n	8009220 <rfalIsoDepListenGetActivationStatus+0x100>
                    gIsoDep.actvParam.isoDepDev->info.DSI =  dsi;
 800921c:	3348      	adds	r3, #72	@ 0x48
 800921e:	801d      	strh	r5, [r3, #0]
     gIsoDep.hdrLen  += (uint8_t)((gIsoDep.nad != RFAL_ISODEP_NO_NAD) ? RFAL_ISODEP_NAD_LEN : 0U);
 8009220:	7923      	ldrb	r3, [r4, #4]
 8009222:	3bff      	subs	r3, #255	@ 0xff
 8009224:	1e5a      	subs	r2, r3, #1
 8009226:	4193      	sbcs	r3, r2
 8009228:	0022      	movs	r2, r4
 800922a:	3302      	adds	r3, #2
 800922c:	322b      	adds	r2, #43	@ 0x2b
 800922e:	7013      	strb	r3, [r2, #0]
     gIsoDep.blockNumber = 1;
 8009230:	2301      	movs	r3, #1
 8009232:	70a3      	strb	r3, [r4, #2]
    gIsoDep.rxBuf       = (uint8_t*)gIsoDep.actvParam.rxBuf;
 8009234:	1d23      	adds	r3, r4, #4
 8009236:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    gIsoDep.rxBufInfPos = (uint8_t)((uint32_t)gIsoDep.actvParam.rxBuf->inf - (uint32_t)gIsoDep.actvParam.rxBuf->prologue);
 8009238:	2203      	movs	r2, #3
    gIsoDep.rxBuf       = (uint8_t*)gIsoDep.actvParam.rxBuf;
 800923a:	61e3      	str	r3, [r4, #28]
    gIsoDep.rxBufLen    = sizeof( rfalIsoDepBufFormat );
 800923c:	2304      	movs	r3, #4
 800923e:	33ff      	adds	r3, #255	@ 0xff
 8009240:	8463      	strh	r3, [r4, #34]	@ 0x22
    gIsoDep.rxBufInfPos = (uint8_t)((uint32_t)gIsoDep.actvParam.rxBuf->inf - (uint32_t)gIsoDep.actvParam.rxBuf->prologue);
 8009242:	1da3      	adds	r3, r4, #6
 8009244:	77da      	strb	r2, [r3, #31]
    gIsoDep.rxLen       = gIsoDep.actvParam.rxLen;
 8009246:	0023      	movs	r3, r4
 8009248:	3308      	adds	r3, #8
 800924a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800924c:	6323      	str	r3, [r4, #48]	@ 0x30
    gIsoDep.rxChaining  = gIsoDep.actvParam.isRxChaining;
 800924e:	0023      	movs	r3, r4
 8009250:	3388      	adds	r3, #136	@ 0x88
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6363      	str	r3, [r4, #52]	@ 0x34
    gIsoDep.state = ISODEP_ST_PICC_RX;
 8009256:	2306      	movs	r3, #6
 8009258:	7023      	strb	r3, [r4, #0]
        return RFAL_ERR_NONE;
 800925a:	2100      	movs	r1, #0
 800925c:	e783      	b.n	8009166 <rfalIsoDepListenGetActivationStatus+0x46>
    dsi   = RFAL_BR_KEEP;                        /* MISRA 9.1 */
 800925e:	26ff      	movs	r6, #255	@ 0xff
 8009260:	e7c1      	b.n	80091e6 <rfalIsoDepListenGetActivationStatus+0xc6>
 8009262:	46c0      	nop			@ (mov r8, r8)
 8009264:	20000df8 	.word	0x20000df8

08009268 <rfalIsoDepGetMaxInfLen>:
{
 8009268:	b510      	push	{r4, lr}
    if( (gIsoDep.fsx < (uint16_t)RFAL_ISODEP_FSX_16) || (gIsoDep.fsx > (uint16_t)RFAL_ISODEP_FSX_4096) || (gIsoDep.hdrLen > ISODEP_HDR_MAX_LEN) )
 800926a:	4a09      	ldr	r2, [pc, #36]	@ (8009290 <rfalIsoDepGetMaxInfLen+0x28>)
 800926c:	24ff      	movs	r4, #255	@ 0xff
 800926e:	8a93      	ldrh	r3, [r2, #20]
        return (aux - RFAL_ISODEP_PCB_LEN - ISODEP_CRC_LEN);
 8009270:	200d      	movs	r0, #13
    if( (gIsoDep.fsx < (uint16_t)RFAL_ISODEP_FSX_16) || (gIsoDep.fsx > (uint16_t)RFAL_ISODEP_FSX_4096) || (gIsoDep.hdrLen > ISODEP_HDR_MAX_LEN) )
 8009272:	0019      	movs	r1, r3
 8009274:	3910      	subs	r1, #16
 8009276:	b289      	uxth	r1, r1
 8009278:	0124      	lsls	r4, r4, #4
 800927a:	42a1      	cmp	r1, r4
 800927c:	d806      	bhi.n	800928c <rfalIsoDepGetMaxInfLen+0x24>
 800927e:	322b      	adds	r2, #43	@ 0x2b
 8009280:	7812      	ldrb	r2, [r2, #0]
 8009282:	2a03      	cmp	r2, #3
 8009284:	d802      	bhi.n	800928c <rfalIsoDepGetMaxInfLen+0x24>
    return (gIsoDep.fsx - gIsoDep.hdrLen - ISODEP_CRC_LEN);
 8009286:	3b02      	subs	r3, #2
 8009288:	1a9b      	subs	r3, r3, r2
 800928a:	b298      	uxth	r0, r3
}
 800928c:	bd10      	pop	{r4, pc}
 800928e:	46c0      	nop			@ (mov r8, r8)
 8009290:	20000df8 	.word	0x20000df8

08009294 <rfalIsoDepStartTransceive>:
{
 8009294:	b084      	sub	sp, #16
 8009296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    gIsoDep.txBuf        = param.txBuf->prologue;
 8009298:	4c1e      	ldr	r4, [pc, #120]	@ (8009314 <rfalIsoDepStartTransceive+0x80>)
{
 800929a:	9208      	str	r2, [sp, #32]
 800929c:	9309      	str	r3, [sp, #36]	@ 0x24
 800929e:	9006      	str	r0, [sp, #24]
 80092a0:	9107      	str	r1, [sp, #28]
 80092a2:	af06      	add	r7, sp, #24
 80092a4:	8bbd      	ldrh	r5, [r7, #28]
    gIsoDep.rxBuf        = param.rxBuf->prologue;
 80092a6:	61e2      	str	r2, [r4, #28]
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 80092a8:	2204      	movs	r2, #4
    gIsoDep.rxLen        = param.rxLen;
 80092aa:	6323      	str	r3, [r4, #48]	@ 0x30
    gIsoDep.rxChaining   = param.isRxChaining;
 80092ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 80092ae:	32ff      	adds	r2, #255	@ 0xff
    gIsoDep.rxChaining   = param.isRxChaining;
 80092b0:	6363      	str	r3, [r4, #52]	@ 0x34
    gIsoDep.fwt          = param.FWT;
 80092b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    gIsoDep.rxBufLen     = sizeof(rfalIsoDepBufFormat);
 80092b4:	8462      	strh	r2, [r4, #34]	@ 0x22
    gIsoDep.fwt          = param.FWT;
 80092b6:	60e3      	str	r3, [r4, #12]
    gIsoDep.txBufInfPos  = (uint8_t)((uintptr_t)param.txBuf->inf - (uintptr_t)param.txBuf->prologue);
 80092b8:	4a17      	ldr	r2, [pc, #92]	@ (8009318 <rfalIsoDepStartTransceive+0x84>)
    gIsoDep.dFwt         = param.dFWT;
 80092ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
{
 80092bc:	0c0e      	lsrs	r6, r1, #16
    gIsoDep.txBuf        = param.txBuf->prologue;
 80092be:	61a0      	str	r0, [r4, #24]
    gIsoDep.txBufLen     = param.txBufLen;
 80092c0:	8421      	strh	r1, [r4, #32]
    gIsoDep.isTxChaining = param.isTxChaining;
 80092c2:	75a6      	strb	r6, [r4, #22]
    gIsoDep.txBufInfPos  = (uint8_t)((uintptr_t)param.txBuf->inf - (uintptr_t)param.txBuf->prologue);
 80092c4:	84a2      	strh	r2, [r4, #36]	@ 0x24
    gIsoDep.dFwt         = param.dFWT;
 80092c6:	6123      	str	r3, [r4, #16]
    gIsoDep.fsx          = param.FSx;
 80092c8:	8bfb      	ldrh	r3, [r7, #30]
 80092ca:	82a3      	strh	r3, [r4, #20]
    gIsoDep.did          = param.DID;
 80092cc:	2319      	movs	r3, #25
 80092ce:	446b      	add	r3, sp
 80092d0:	7fdb      	ldrb	r3, [r3, #31]
 80092d2:	70e3      	strb	r3, [r4, #3]
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 80092d4:	2dff      	cmp	r5, #255	@ 0xff
 80092d6:	d100      	bne.n	80092da <rfalIsoDepStartTransceive+0x46>
 80092d8:	8ce5      	ldrh	r5, [r4, #38]	@ 0x26
    gIsoDep.isRxChaining  = false;
 80092da:	2300      	movs	r3, #0
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 80092dc:	84e5      	strh	r5, [r4, #38]	@ 0x26
    gIsoDep.isRxChaining  = false;
 80092de:	75e3      	strb	r3, [r4, #23]
    rfalIsoDepClearCounters();
 80092e0:	f7ff fa18 	bl	8008714 <rfalIsoDepClearCounters>
    if(gIsoDep.role == ISODEP_ROLE_PICC)
 80092e4:	2301      	movs	r3, #1
 80092e6:	7862      	ldrb	r2, [r4, #1]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d10c      	bne.n	8009306 <rfalIsoDepStartTransceive+0x72>
       if(gIsoDep.txBufLen > 0U)
 80092ec:	8c23      	ldrh	r3, [r4, #32]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d008      	beq.n	8009304 <rfalIsoDepStartTransceive+0x70>
           if( !gIsoDep.isWait4WTX )
 80092f2:	0023      	movs	r3, r4
 80092f4:	333e      	adds	r3, #62	@ 0x3e
 80092f6:	7819      	ldrb	r1, [r3, #0]
 80092f8:	2309      	movs	r3, #9
 80092fa:	2900      	cmp	r1, #0
 80092fc:	d003      	beq.n	8009306 <rfalIsoDepStartTransceive+0x72>
               gIsoDep.isTxPending = true;
 80092fe:	0023      	movs	r3, r4
 8009300:	333d      	adds	r3, #61	@ 0x3d
 8009302:	701a      	strb	r2, [r3, #0]
       return RFAL_ERR_NONE;
 8009304:	2306      	movs	r3, #6
}
 8009306:	2000      	movs	r0, #0
               gIsoDep.state = ISODEP_ST_PICC_TX;
 8009308:	7023      	strb	r3, [r4, #0]
}
 800930a:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930c:	bc08      	pop	{r3}
 800930e:	b004      	add	sp, #16
 8009310:	4718      	bx	r3
 8009312:	46c0      	nop			@ (mov r8, r8)
 8009314:	20000df8 	.word	0x20000df8
 8009318:	00000303 	.word	0x00000303

0800931c <rfalIsoDepGetTransceiveStatus>:
{
 800931c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 800931e:	4cb9      	ldr	r4, [pc, #740]	@ (8009604 <rfalIsoDepGetTransceiveStatus+0x2e8>)
{
 8009320:	b089      	sub	sp, #36	@ 0x24
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 8009322:	7863      	ldrb	r3, [r4, #1]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d000      	beq.n	800932a <rfalIsoDepGetTransceiveStatus+0xe>
 8009328:	e1b9      	b.n	800969e <rfalIsoDepGetTransceiveStatus+0x382>
    switch( gIsoDep.state )
 800932a:	7825      	ldrb	r5, [r4, #0]
 800932c:	2d09      	cmp	r5, #9
 800932e:	d900      	bls.n	8009332 <rfalIsoDepGetTransceiveStatus+0x16>
 8009330:	e1ba      	b.n	80096a8 <rfalIsoDepGetTransceiveStatus+0x38c>
 8009332:	0028      	movs	r0, r5
 8009334:	f7f6 ff0e 	bl	8000154 <__gnu_thumb1_case_uhi>
 8009338:	01b80139 	.word	0x01b80139
 800933c:	01b801b8 	.word	0x01b801b8
 8009340:	01b801b8 	.word	0x01b801b8
 8009344:	00760023 	.word	0x00760023
 8009348:	000a009b 	.word	0x000a009b
            ret = rfalIsoDepTx( rfalIsoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, RFAL_FWT_NONE );
 800934c:	2001      	movs	r0, #1
 800934e:	78a5      	ldrb	r5, [r4, #2]
 8009350:	1d62      	adds	r2, r4, #5
 8009352:	4005      	ands	r5, r0
 8009354:	1800      	adds	r0, r0, r0
 8009356:	4328      	orrs	r0, r5
 8009358:	2501      	movs	r5, #1
 800935a:	69a1      	ldr	r1, [r4, #24]
 800935c:	7fd2      	ldrb	r2, [r2, #31]
 800935e:	426d      	negs	r5, r5
 8009360:	8c23      	ldrh	r3, [r4, #32]
 8009362:	188a      	adds	r2, r1, r2
 8009364:	9500      	str	r5, [sp, #0]
 8009366:	f7ff fa2b 	bl	80087c0 <rfalIsoDepTx>
            gIsoDep.isTxPending = false;
 800936a:	0023      	movs	r3, r4
 800936c:	2200      	movs	r2, #0
 800936e:	333d      	adds	r3, #61	@ 0x3d
 8009370:	701a      	strb	r2, [r3, #0]
            switch( ret )
 8009372:	4290      	cmp	r0, r2
 8009374:	d110      	bne.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
            gIsoDep.state = ISODEP_ST_PICC_RX;                    /* Go back to Rx to process WTX ack        */
 8009376:	2306      	movs	r3, #6
 8009378:	7023      	strb	r3, [r4, #0]
                 return RFAL_ERR_BUSY;
 800937a:	2002      	movs	r0, #2
 800937c:	e00c      	b.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
            ret = rfalGetTransceiveStatus();
 800937e:	f7f8 ff1f 	bl	80021c0 <rfalGetTransceiveStatus>
            switch( ret )
 8009382:	281b      	cmp	r0, #27
 8009384:	d808      	bhi.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
 8009386:	2501      	movs	r5, #1
 8009388:	002a      	movs	r2, r5
 800938a:	4082      	lsls	r2, r0
 800938c:	0013      	movs	r3, r2
 800938e:	4a9e      	ldr	r2, [pc, #632]	@ (8009608 <rfalIsoDepGetTransceiveStatus+0x2ec>)
 8009390:	4213      	tst	r3, r2
 8009392:	d103      	bne.n	800939c <rfalIsoDepGetTransceiveStatus+0x80>
 8009394:	422b      	tst	r3, r5
 8009396:	d10f      	bne.n	80093b8 <rfalIsoDepGetTransceiveStatus+0x9c>
}
 8009398:	b009      	add	sp, #36	@ 0x24
 800939a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 800939c:	2301      	movs	r3, #1
 800939e:	2000      	movs	r0, #0
 80093a0:	425b      	negs	r3, r3
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	9001      	str	r0, [sp, #4]
 80093a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	2304      	movs	r3, #4
 80093ac:	69e2      	ldr	r2, [r4, #28]
 80093ae:	33ff      	adds	r3, #255	@ 0xff
        rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 80093b0:	0001      	movs	r1, r0
 80093b2:	f7fa f8f9 	bl	80035a8 <rfalTransceiveBlockingTx>
        return RFAL_ERR_BUSY;  /* RFAL_ERR_PROTO Ignore this protocol request */
 80093b6:	e7e0      	b.n	800937a <rfalIsoDepGetTransceiveStatus+0x5e>
                    *gIsoDep.rxLen = rfalConvBitsToBytes( *gIsoDep.rxLen );
 80093b8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80093ba:	8813      	ldrh	r3, [r2, #0]
 80093bc:	3307      	adds	r3, #7
 80093be:	08db      	lsrs	r3, r3, #3
 80093c0:	8013      	strh	r3, [r2, #0]
    rfalIsoDepClearCounters();
 80093c2:	f7ff f9a7 	bl	8008714 <rfalIsoDepClearCounters>
    rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 80093c6:	2008      	movs	r0, #8
 80093c8:	2104      	movs	r1, #4
 80093ca:	69e2      	ldr	r2, [r4, #28]
 80093cc:	7813      	ldrb	r3, [r2, #0]
    gIsoDep.hdrLen  += (uint8_t)( (rfalIsoDep_PCBhasDID(rxPCB)) ? RFAL_ISODEP_DID_LEN : 0U );
 80093ce:	4019      	ands	r1, r3
 80093d0:	4018      	ands	r0, r3
    gIsoDep.hdrLen  += (uint8_t)( (rfalIsoDep_PCBhasNAD(rxPCB)) ? RFAL_ISODEP_NAD_LEN : 0U );
 80093d2:	468c      	mov	ip, r1
    gIsoDep.hdrLen  += (uint8_t)( (rfalIsoDep_PCBhasDID(rxPCB)) ? RFAL_ISODEP_DID_LEN : 0U );
 80093d4:	0006      	movs	r6, r0
 80093d6:	1e71      	subs	r1, r6, #1
 80093d8:	418e      	sbcs	r6, r1
    gIsoDep.hdrLen  += (uint8_t)( (rfalIsoDep_PCBhasNAD(rxPCB)) ? RFAL_ISODEP_NAD_LEN : 0U );
 80093da:	4661      	mov	r1, ip
 80093dc:	1e4f      	subs	r7, r1, #1
 80093de:	41b9      	sbcs	r1, r7
 80093e0:	1876      	adds	r6, r6, r1
 80093e2:	0021      	movs	r1, r4
 80093e4:	3601      	adds	r6, #1
 80093e6:	312b      	adds	r1, #43	@ 0x2b
 80093e8:	700e      	strb	r6, [r1, #0]
    if( gIsoDep.did == RFAL_ISODEP_DID_00 )
 80093ea:	78e1      	ldrb	r1, [r4, #3]
 80093ec:	9107      	str	r1, [sp, #28]
 80093ee:	2900      	cmp	r1, #0
 80093f0:	d046      	beq.n	8009480 <rfalIsoDepGetTransceiveStatus+0x164>
    if( ((*gIsoDep.rxLen) < gIsoDep.hdrLen) || ((*gIsoDep.rxLen) > (gIsoDep.ourFsx - ISODEP_CRC_LEN)) )
 80093f2:	4d84      	ldr	r5, [pc, #528]	@ (8009604 <rfalIsoDepGetTransceiveStatus+0x2e8>)
 80093f4:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80093f6:	9706      	str	r7, [sp, #24]
 80093f8:	883f      	ldrh	r7, [r7, #0]
 80093fa:	9705      	str	r7, [sp, #20]
 80093fc:	42b7      	cmp	r7, r6
 80093fe:	d304      	bcc.n	800940a <rfalIsoDepGetTransceiveStatus+0xee>
 8009400:	8cef      	ldrh	r7, [r5, #38]	@ 0x26
 8009402:	9905      	ldr	r1, [sp, #20]
 8009404:	3f02      	subs	r7, #2
 8009406:	42b9      	cmp	r1, r7
 8009408:	d940      	bls.n	800948c <rfalIsoDepGetTransceiveStatus+0x170>
        rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.actvParam.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.actvParam.rxLen );
 800940a:	2301      	movs	r3, #1
 800940c:	2000      	movs	r0, #0
 800940e:	425b      	negs	r3, r3
 8009410:	1d22      	adds	r2, r4, #4
 8009412:	9302      	str	r3, [sp, #8]
 8009414:	9001      	str	r0, [sp, #4]
 8009416:	3408      	adds	r4, #8
 8009418:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	2304      	movs	r3, #4
 800941e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8009420:	33ff      	adds	r3, #255	@ 0xff
 8009422:	e7c5      	b.n	80093b0 <rfalIsoDepGetTransceiveStatus+0x94>
            if( !rfalIsoDepTimerisExpired( gIsoDep.WTXTimer ) )       /* Do nothing until WTX timer has expired */
 8009424:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8009426:	f7fb fa47 	bl	80048b8 <timerIsExpired>
 800942a:	2800      	cmp	r0, #0
 800942c:	d0a5      	beq.n	800937a <rfalIsoDepGetTransceiveStatus+0x5e>
            gIsoDep.isWait4WTX = true;
 800942e:	0023      	movs	r3, r4
 8009430:	2201      	movs	r2, #1
 8009432:	333e      	adds	r3, #62	@ 0x3e
 8009434:	701a      	strb	r2, [r3, #0]
            gIsoDep.lastWTXM = (uint8_t)rfalIsoDep_WTXMListenerMax( gIsoDep.fwt );
 8009436:	0023      	movs	r3, r4
 8009438:	3345      	adds	r3, #69	@ 0x45
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	4293      	cmp	r3, r2
 800943e:	d000      	beq.n	8009442 <rfalIsoDepGetTransceiveStatus+0x126>
 8009440:	2508      	movs	r5, #8
 8009442:	0028      	movs	r0, r5
 8009444:	f7ff fd54 	bl	8008ef0 <rfalIsoDepFWI2FWT>
 8009448:	68e1      	ldr	r1, [r4, #12]
 800944a:	f7f6 fe8d 	bl	8000168 <__udivsi3>
 800944e:	1c03      	adds	r3, r0, #0
 8009450:	b2c0      	uxtb	r0, r0
 8009452:	283b      	cmp	r0, #59	@ 0x3b
 8009454:	d900      	bls.n	8009458 <rfalIsoDepGetTransceiveStatus+0x13c>
 8009456:	233b      	movs	r3, #59	@ 0x3b
 8009458:	0022      	movs	r2, r4
            RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM ) );
 800945a:	2002      	movs	r0, #2
            gIsoDep.lastWTXM = (uint8_t)rfalIsoDep_WTXMListenerMax( gIsoDep.fwt );
 800945c:	3229      	adds	r2, #41	@ 0x29
 800945e:	b2d9      	uxtb	r1, r3
 8009460:	7013      	strb	r3, [r2, #0]
            RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_S_WTX, gIsoDep.lastWTXM ) );
 8009462:	f7ff fa0d 	bl	8008880 <rfalIsoDepHandleControlMsg>
 8009466:	2800      	cmp	r0, #0
 8009468:	d100      	bne.n	800946c <rfalIsoDepGetTransceiveStatus+0x150>
 800946a:	e784      	b.n	8009376 <rfalIsoDepGetTransceiveStatus+0x5a>
 800946c:	e794      	b.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
            if( !rfalIsTransceiveInTx() )       /* Wait until DSL response has been sent */
 800946e:	f7f8 fe9b 	bl	80021a8 <rfalIsTransceiveInTx>
 8009472:	2800      	cmp	r0, #0
 8009474:	d000      	beq.n	8009478 <rfalIsoDepGetTransceiveStatus+0x15c>
 8009476:	e780      	b.n	800937a <rfalIsoDepGetTransceiveStatus+0x5e>
                rfalIsoDepInitialize();         /* Session finished reInit vars, go back to ISODEP_ST_IDLE */
 8009478:	f7ff fb82 	bl	8008b80 <rfalIsoDepInitialize>
                return RFAL_ERR_SLEEP_REQ;           /* Notify Deselect request      */
 800947c:	2020      	movs	r0, #32
 800947e:	e78b      	b.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
        gIsoDep.lastDID00 = ( (rfalIsoDep_PCBhasDID(rxPCB)) ? true : false );
 8009480:	08df      	lsrs	r7, r3, #3
 8009482:	403d      	ands	r5, r7
 8009484:	0027      	movs	r7, r4
 8009486:	373c      	adds	r7, #60	@ 0x3c
 8009488:	703d      	strb	r5, [r7, #0]
 800948a:	e7b2      	b.n	80093f2 <rfalIsoDepGetTransceiveStatus+0xd6>
    if( ((gIsoDep.did != RFAL_ISODEP_DID_00) && ( (!rfalIsoDep_PCBhasDID(rxPCB)) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])))   ||
 800948c:	9907      	ldr	r1, [sp, #28]
 800948e:	2900      	cmp	r1, #0
 8009490:	d034      	beq.n	80094fc <rfalIsoDepGetTransceiveStatus+0x1e0>
 8009492:	2800      	cmp	r0, #0
 8009494:	d0b9      	beq.n	800940a <rfalIsoDepGetTransceiveStatus+0xee>
 8009496:	7850      	ldrb	r0, [r2, #1]
 8009498:	4288      	cmp	r0, r1
 800949a:	d1b6      	bne.n	800940a <rfalIsoDepGetTransceiveStatus+0xee>
    if( (gIsoDep.nad == RFAL_ISODEP_NO_NAD) && rfalIsoDep_PCBhasNAD(rxPCB) )
 800949c:	7929      	ldrb	r1, [r5, #4]
 800949e:	29ff      	cmp	r1, #255	@ 0xff
 80094a0:	d102      	bne.n	80094a8 <rfalIsoDepGetTransceiveStatus+0x18c>
 80094a2:	4661      	mov	r1, ip
 80094a4:	2900      	cmp	r1, #0
 80094a6:	d1b0      	bne.n	800940a <rfalIsoDepGetTransceiveStatus+0xee>
    if( rfalIsoDep_PCBisSBlock(rxPCB) )
 80094a8:	2138      	movs	r1, #56	@ 0x38
 80094aa:	0018      	movs	r0, r3
 80094ac:	4388      	bics	r0, r1
 80094ae:	0001      	movs	r1, r0
 80094b0:	28c2      	cmp	r0, #194	@ 0xc2
 80094b2:	d144      	bne.n	800953e <rfalIsoDepGetTransceiveStatus+0x222>
       if( rfalIsoDep_PCBisSWTX(rxPCB) )
 80094b4:	2408      	movs	r4, #8
 80094b6:	43a3      	bics	r3, r4
 80094b8:	2bf2      	cmp	r3, #242	@ 0xf2
 80094ba:	d132      	bne.n	8009522 <rfalIsoDepGetTransceiveStatus+0x206>
            if( rfalIsoDep_PCBisWTX( gIsoDep.lastPCB ) )
 80094bc:	002b      	movs	r3, r5
 80094be:	3328      	adds	r3, #40	@ 0x28
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	3992      	subs	r1, #146	@ 0x92
 80094c4:	400b      	ands	r3, r1
 80094c6:	428b      	cmp	r3, r1
 80094c8:	d000      	beq.n	80094cc <rfalIsoDepGetTransceiveStatus+0x1b0>
 80094ca:	e095      	b.n	80095f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
                if( ( gIsoDep.rxBuf[ gIsoDep.hdrLen ] == gIsoDep.lastWTXM) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_SWTX_INF_LEN) )
 80094cc:	002b      	movs	r3, r5
 80094ce:	3329      	adds	r3, #41	@ 0x29
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	5d94      	ldrb	r4, [r2, r6]
 80094d4:	429c      	cmp	r4, r3
 80094d6:	d000      	beq.n	80094da <rfalIsoDepGetTransceiveStatus+0x1be>
 80094d8:	e08e      	b.n	80095f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
 80094da:	9b05      	ldr	r3, [sp, #20]
 80094dc:	1b9e      	subs	r6, r3, r6
 80094de:	2e01      	cmp	r6, #1
 80094e0:	d000      	beq.n	80094e4 <rfalIsoDepGetTransceiveStatus+0x1c8>
 80094e2:	e089      	b.n	80095f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
                    gIsoDep.isWait4WTX = false;
 80094e4:	002b      	movs	r3, r5
 80094e6:	2200      	movs	r2, #0
 80094e8:	333e      	adds	r3, #62	@ 0x3e
 80094ea:	701a      	strb	r2, [r3, #0]
                    if( gIsoDep.isTxPending )
 80094ec:	002b      	movs	r3, r5
 80094ee:	333d      	adds	r3, #61	@ 0x3d
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d008      	beq.n	8009508 <rfalIsoDepGetTransceiveStatus+0x1ec>
                        gIsoDep.state = ISODEP_ST_PICC_TX;
 80094f6:	2309      	movs	r3, #9
                    gIsoDep.state = ISODEP_ST_PICC_SWTX;
 80094f8:	702b      	strb	r3, [r5, #0]
                    return RFAL_ERR_BUSY;
 80094fa:	e73e      	b.n	800937a <rfalIsoDepGetTransceiveStatus+0x5e>
        ((gIsoDep.did == RFAL_ISODEP_DID_00) &&    rfalIsoDep_PCBhasDID(rxPCB) && (RFAL_ISODEP_DID_00 != gIsoDep.rxBuf[ ISODEP_DID_POS ]) )     )
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d0cd      	beq.n	800949c <rfalIsoDepGetTransceiveStatus+0x180>
 8009500:	7851      	ldrb	r1, [r2, #1]
 8009502:	2900      	cmp	r1, #0
 8009504:	d0ca      	beq.n	800949c <rfalIsoDepGetTransceiveStatus+0x180>
 8009506:	e780      	b.n	800940a <rfalIsoDepGetTransceiveStatus+0xee>
                    rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( (gIsoDep.lastWTXM * rfalConv1fcToMs( gIsoDep.fwt )) ) );
 8009508:	68e8      	ldr	r0, [r5, #12]
 800950a:	4940      	ldr	r1, [pc, #256]	@ (800960c <rfalIsoDepGetTransceiveStatus+0x2f0>)
 800950c:	f7f6 fe2c 	bl	8000168 <__udivsi3>
 8009510:	4360      	muls	r0, r4
 8009512:	08c3      	lsrs	r3, r0, #3
 8009514:	1ac0      	subs	r0, r0, r3
 8009516:	b280      	uxth	r0, r0
 8009518:	f7fb f9c8 	bl	80048ac <timerCalculateTimer>
                    gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800951c:	2307      	movs	r3, #7
                    rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( (gIsoDep.lastWTXM * rfalConv1fcToMs( gIsoDep.fwt )) ) );
 800951e:	63a8      	str	r0, [r5, #56]	@ 0x38
                    gIsoDep.state = ISODEP_ST_PICC_SWTX;
 8009520:	e7ea      	b.n	80094f8 <rfalIsoDepGetTransceiveStatus+0x1dc>
       if( rfalIsoDep_PCBisSDeselect(rxPCB) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_SDSL_INF_LEN) )
 8009522:	2bc2      	cmp	r3, #194	@ 0xc2
 8009524:	d168      	bne.n	80095f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
 8009526:	9b05      	ldr	r3, [sp, #20]
 8009528:	42b3      	cmp	r3, r6
 800952a:	d165      	bne.n	80095f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
           RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 800952c:	2100      	movs	r1, #0
 800952e:	2003      	movs	r0, #3
 8009530:	f7ff f9a6 	bl	8008880 <rfalIsoDepHandleControlMsg>
 8009534:	2800      	cmp	r0, #0
 8009536:	d000      	beq.n	800953a <rfalIsoDepGetTransceiveStatus+0x21e>
 8009538:	e72e      	b.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
           gIsoDep.state = ISODEP_ST_PICC_SDSL;
 800953a:	702c      	strb	r4, [r5, #0]
           return RFAL_ERR_BUSY;
 800953c:	e71d      	b.n	800937a <rfalIsoDepGetTransceiveStatus+0x5e>
    else if( rfalIsoDep_PCBisRBlock(rxPCB) && ((*gIsoDep.rxLen - gIsoDep.hdrLen) == ISODEP_RBLOCK_INF_LEN))
 800953e:	2119      	movs	r1, #25
 8009540:	0018      	movs	r0, r3
 8009542:	4388      	bics	r0, r1
 8009544:	28a2      	cmp	r0, #162	@ 0xa2
 8009546:	d141      	bne.n	80095cc <rfalIsoDepGetTransceiveStatus+0x2b0>
 8009548:	9905      	ldr	r1, [sp, #20]
 800954a:	42b1      	cmp	r1, r6
 800954c:	d154      	bne.n	80095f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
        if( rfalIsoDep_PCBisRACK(rxPCB) )                             /* Check if is a R-ACK */
 800954e:	2109      	movs	r1, #9
 8009550:	0018      	movs	r0, r3
 8009552:	4388      	bics	r0, r1
 8009554:	28a2      	cmp	r0, #162	@ 0xa2
 8009556:	d12a      	bne.n	80095ae <rfalIsoDepGetTransceiveStatus+0x292>
            if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )      /* Check block number  */
 8009558:	2401      	movs	r4, #1
 800955a:	78a9      	ldrb	r1, [r5, #2]
 800955c:	4023      	ands	r3, r4
 800955e:	428b      	cmp	r3, r1
 8009560:	d109      	bne.n	8009576 <rfalIsoDepGetTransceiveStatus+0x25a>
                if( !rfalIsoDep_PCBisIBlock(gIsoDep.lastPCB) )
 8009562:	002b      	movs	r3, r5
 8009564:	221d      	movs	r2, #29
 8009566:	3328      	adds	r3, #40	@ 0x28
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	4393      	bics	r3, r2
 800956c:	2b02      	cmp	r3, #2
 800956e:	d0c2      	beq.n	80094f6 <rfalIsoDepGetTransceiveStatus+0x1da>
                    rfalIsoDepReSendControlMsg();
 8009570:	f7ff fae2 	bl	8008b38 <rfalIsoDepReSendControlMsg.isra.0>
 8009574:	e701      	b.n	800937a <rfalIsoDepGetTransceiveStatus+0x5e>
                if( !gIsoDep.isTxChaining )
 8009576:	7da8      	ldrb	r0, [r5, #22]
 8009578:	2800      	cmp	r0, #0
 800957a:	d108      	bne.n	800958e <rfalIsoDepGetTransceiveStatus+0x272>
                    rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 800957c:	2301      	movs	r3, #1
 800957e:	425b      	negs	r3, r3
 8009580:	9302      	str	r3, [sp, #8]
    rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 8009582:	9b06      	ldr	r3, [sp, #24]
 8009584:	9001      	str	r0, [sp, #4]
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	2304      	movs	r3, #4
 800958a:	33ff      	adds	r3, #255	@ 0xff
 800958c:	e710      	b.n	80093b0 <rfalIsoDepGetTransceiveStatus+0x94>
                rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 800958e:	438c      	bics	r4, r1
                rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 8009590:	68e8      	ldr	r0, [r5, #12]
 8009592:	491e      	ldr	r1, [pc, #120]	@ (800960c <rfalIsoDepGetTransceiveStatus+0x2f0>)
                rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 8009594:	70ac      	strb	r4, [r5, #2]
                rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 8009596:	f7f6 fde7 	bl	8000168 <__udivsi3>
 800959a:	08c3      	lsrs	r3, r0, #3
 800959c:	1ac0      	subs	r0, r0, r3
 800959e:	b280      	uxth	r0, r0
 80095a0:	f7fb f984 	bl	80048ac <timerCalculateTimer>
                gIsoDep.state = ISODEP_ST_PICC_SWTX;
 80095a4:	2307      	movs	r3, #7
                rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 80095a6:	63a8      	str	r0, [r5, #56]	@ 0x38
                gIsoDep.state = ISODEP_ST_PICC_SWTX;
 80095a8:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_NONE;
 80095aa:	2000      	movs	r0, #0
 80095ac:	e6f4      	b.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
        else if( rfalIsoDep_PCBisRNAK(rxPCB) )                       /* Check if is a R-NACK */
 80095ae:	28b2      	cmp	r0, #178	@ 0xb2
 80095b0:	d122      	bne.n	80095f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
            if( rfalIsoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Check block number  */
 80095b2:	2201      	movs	r2, #1
 80095b4:	78a9      	ldrb	r1, [r5, #2]
 80095b6:	4013      	ands	r3, r2
 80095b8:	4299      	cmp	r1, r3
 80095ba:	d0d2      	beq.n	8009562 <rfalIsoDepGetTransceiveStatus+0x246>
                RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 80095bc:	2100      	movs	r1, #0
 80095be:	0008      	movs	r0, r1
 80095c0:	f7ff f95e 	bl	8008880 <rfalIsoDepHandleControlMsg>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d000      	beq.n	80095ca <rfalIsoDepGetTransceiveStatus+0x2ae>
 80095c8:	e6e6      	b.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
 80095ca:	e6d6      	b.n	800937a <rfalIsoDepGetTransceiveStatus+0x5e>
    else if( rfalIsoDep_PCBisIBlock(rxPCB) )
 80095cc:	211d      	movs	r1, #29
 80095ce:	0018      	movs	r0, r3
 80095d0:	4388      	bics	r0, r1
 80095d2:	2802      	cmp	r0, #2
 80095d4:	d110      	bne.n	80095f8 <rfalIsoDepGetTransceiveStatus+0x2dc>
        rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 80095d6:	2701      	movs	r7, #1
 80095d8:	0038      	movs	r0, r7
 80095da:	4c0a      	ldr	r4, [pc, #40]	@ (8009604 <rfalIsoDepGetTransceiveStatus+0x2e8>)
 80095dc:	78a1      	ldrb	r1, [r4, #2]
 80095de:	4388      	bics	r0, r1
 80095e0:	9107      	str	r1, [sp, #28]
        if( (rfalIsoDep_GetBN(rxPCB) != gIsoDep.blockNumber) || (gIsoDep.isTxChaining) )
 80095e2:	0019      	movs	r1, r3
        rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 80095e4:	70a0      	strb	r0, [r4, #2]
        if( (rfalIsoDep_GetBN(rxPCB) != gIsoDep.blockNumber) || (gIsoDep.isTxChaining) )
 80095e6:	4039      	ands	r1, r7
 80095e8:	4288      	cmp	r0, r1
 80095ea:	d102      	bne.n	80095f2 <rfalIsoDepGetTransceiveStatus+0x2d6>
 80095ec:	7da0      	ldrb	r0, [r4, #22]
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d00e      	beq.n	8009610 <rfalIsoDepGetTransceiveStatus+0x2f4>
            rfalIsoDep_ToggleBN( gIsoDep.blockNumber );
 80095f2:	9907      	ldr	r1, [sp, #28]
 80095f4:	4039      	ands	r1, r7
 80095f6:	70a9      	strb	r1, [r5, #2]
    rfalIsoDepReEnableRx( (uint8_t*)gIsoDep.rxBuf, sizeof( rfalIsoDepBufFormat ), gIsoDep.rxLen );
 80095f8:	2301      	movs	r3, #1
 80095fa:	425b      	negs	r3, r3
 80095fc:	2000      	movs	r0, #0
 80095fe:	9302      	str	r3, [sp, #8]
 8009600:	e7bf      	b.n	8009582 <rfalIsoDepGetTransceiveStatus+0x266>
 8009602:	46c0      	nop			@ (mov r8, r8)
 8009604:	20000df8 	.word	0x20000df8
 8009608:	08200210 	.word	0x08200210
 800960c:	000034f8 	.word	0x000034f8
        if( rfalIsoDep_PCBisChaining(rxPCB) )
 8009610:	2510      	movs	r5, #16
 8009612:	46ac      	mov	ip, r5
            *gIsoDep.rxChaining   = true; /* Output Parameter*/            
 8009614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
        if( rfalIsoDep_PCBisChaining(rxPCB) )
 8009616:	401d      	ands	r5, r3
            *gIsoDep.rxChaining   = true; /* Output Parameter*/            
 8009618:	9107      	str	r1, [sp, #28]
        if( rfalIsoDep_PCBisChaining(rxPCB) )
 800961a:	4661      	mov	r1, ip
 800961c:	420b      	tst	r3, r1
 800961e:	d01e      	beq.n	800965e <rfalIsoDepGetTransceiveStatus+0x342>
            *gIsoDep.rxChaining   = true; /* Output Parameter*/            
 8009620:	9b07      	ldr	r3, [sp, #28]
            gIsoDep.isRxChaining  = true;
 8009622:	75e7      	strb	r7, [r4, #23]
            RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8009624:	0001      	movs	r1, r0
            *gIsoDep.rxChaining   = true; /* Output Parameter*/            
 8009626:	701f      	strb	r7, [r3, #0]
            RFAL_EXIT_ON_ERR( ret, rfalIsoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8009628:	f7ff f92a 	bl	8008880 <rfalIsoDepHandleControlMsg>
 800962c:	2800      	cmp	r0, #0
 800962e:	d000      	beq.n	8009632 <rfalIsoDepGetTransceiveStatus+0x316>
 8009630:	e6b2      	b.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
            *gIsoDep.rxLen -= gIsoDep.hdrLen;
 8009632:	0022      	movs	r2, r4
 8009634:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009636:	322b      	adds	r2, #43	@ 0x2b
 8009638:	7811      	ldrb	r1, [r2, #0]
 800963a:	881a      	ldrh	r2, [r3, #0]
 800963c:	1a52      	subs	r2, r2, r1
 800963e:	b292      	uxth	r2, r2
 8009640:	801a      	strh	r2, [r3, #0]
            if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*gIsoDep.rxLen > 0U) )
 8009642:	1da3      	adds	r3, r4, #6
 8009644:	7fdb      	ldrb	r3, [r3, #31]
 8009646:	4299      	cmp	r1, r3
 8009648:	d001      	beq.n	800964e <rfalIsoDepGetTransceiveStatus+0x332>
 800964a:	2a00      	cmp	r2, #0
 800964c:	d101      	bne.n	8009652 <rfalIsoDepGetTransceiveStatus+0x336>
            return RFAL_ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/            
 800964e:	200d      	movs	r0, #13
 8009650:	e6a2      	b.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
                RFAL_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *gIsoDep.rxLen );
 8009652:	69e0      	ldr	r0, [r4, #28]
 8009654:	1841      	adds	r1, r0, r1
 8009656:	18c0      	adds	r0, r0, r3
 8009658:	f006 fe24 	bl	80102a4 <memmove>
 800965c:	e7f7      	b.n	800964e <rfalIsoDepGetTransceiveStatus+0x332>
        *gIsoDep.rxChaining   = false; /* Output Parameter        */
 800965e:	9b07      	ldr	r3, [sp, #28]
        gIsoDep.isRxChaining  = false; /* clear PCD chaining flag */
 8009660:	75e5      	strb	r5, [r4, #23]
        *gIsoDep.rxChaining   = false; /* Output Parameter        */
 8009662:	701d      	strb	r5, [r3, #0]
        *gIsoDep.rxLen -= gIsoDep.hdrLen;
 8009664:	9b05      	ldr	r3, [sp, #20]
 8009666:	9906      	ldr	r1, [sp, #24]
 8009668:	1b9b      	subs	r3, r3, r6
 800966a:	b29b      	uxth	r3, r3
 800966c:	800b      	strh	r3, [r1, #0]
        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*gIsoDep.rxLen > 0U) )
 800966e:	1da1      	adds	r1, r4, #6
 8009670:	7fc8      	ldrb	r0, [r1, #31]
 8009672:	4286      	cmp	r6, r0
 8009674:	d006      	beq.n	8009684 <rfalIsoDepGetTransceiveStatus+0x368>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d004      	beq.n	8009684 <rfalIsoDepGetTransceiveStatus+0x368>
            RFAL_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *gIsoDep.rxLen );
 800967a:	1991      	adds	r1, r2, r6
 800967c:	1810      	adds	r0, r2, r0
 800967e:	001a      	movs	r2, r3
 8009680:	f006 fe10 	bl	80102a4 <memmove>
        rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 8009684:	68e0      	ldr	r0, [r4, #12]
 8009686:	4909      	ldr	r1, [pc, #36]	@ (80096ac <rfalIsoDepGetTransceiveStatus+0x390>)
 8009688:	f7f6 fd6e 	bl	8000168 <__udivsi3>
 800968c:	08c3      	lsrs	r3, r0, #3
 800968e:	1ac0      	subs	r0, r0, r3
 8009690:	b280      	uxth	r0, r0
 8009692:	f7fb f90b 	bl	80048ac <timerCalculateTimer>
        gIsoDep.state = ISODEP_ST_PICC_SWTX;
 8009696:	2307      	movs	r3, #7
        rfalIsoDepTimerStart( gIsoDep.WTXTimer, rfalIsoDep_WTXAdjust( rfalConv1fcToMs( gIsoDep.fwt )) );
 8009698:	63a0      	str	r0, [r4, #56]	@ 0x38
        gIsoDep.state = ISODEP_ST_PICC_SWTX;
 800969a:	7023      	strb	r3, [r4, #0]
        return RFAL_ERR_NONE;
 800969c:	e785      	b.n	80095aa <rfalIsoDepGetTransceiveStatus+0x28e>
        return rfalIsoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 800969e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096a0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80096a2:	f7ff fa9d 	bl	8008be0 <rfalIsoDepDataExchangePCD>
 80096a6:	e677      	b.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
            return RFAL_ERR_INTERNAL;
 80096a8:	200c      	movs	r0, #12
 80096aa:	e675      	b.n	8009398 <rfalIsoDepGetTransceiveStatus+0x7c>
 80096ac:	000034f8 	.word	0x000034f8

080096b0 <rfalIsoDepPollAStartActivation>:
{
 80096b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b2:	0006      	movs	r6, r0
 80096b4:	000f      	movs	r7, r1
 80096b6:	0015      	movs	r5, r2
 80096b8:	001c      	movs	r4, r3
        return RFAL_ERR_PARAM;
 80096ba:	2007      	movs	r0, #7
    if( rfalIsoDepDev == NULL )
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d016      	beq.n	80096ee <rfalIsoDepPollAStartActivation+0x3e>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMD );
 80096c0:	3806      	subs	r0, #6
 80096c2:	f7f8 fbe1 	bl	8001e88 <rfalSetErrorHandling>
    RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartRATS( FSDI, DID, &rfalIsoDepDev->activation.A.Listener.ATS, &rfalIsoDepDev->activation.A.Listener.ATSLen ) );
 80096c6:	0023      	movs	r3, r4
 80096c8:	0022      	movs	r2, r4
 80096ca:	0039      	movs	r1, r7
 80096cc:	0030      	movs	r0, r6
 80096ce:	3314      	adds	r3, #20
 80096d0:	f7ff f948 	bl	8008964 <rfalIsoDepStartRATS>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d10a      	bne.n	80096ee <rfalIsoDepPollAStartActivation+0x3e>
    rfalIsoDepDev->info.DSI = maxBR;
 80096d8:	0023      	movs	r3, r4
 80096da:	3348      	adds	r3, #72	@ 0x48
 80096dc:	701d      	strb	r5, [r3, #0]
    gIsoDep.actvDev     = rfalIsoDepDev;
 80096de:	4b04      	ldr	r3, [pc, #16]	@ (80096f0 <rfalIsoDepPollAStartActivation+0x40>)
    gIsoDep.cntRRetrys  = gIsoDep.maxRetriesRATS;
 80096e0:	001a      	movs	r2, r3
    gIsoDep.actvDev     = rfalIsoDepDev;
 80096e2:	67dc      	str	r4, [r3, #124]	@ 0x7c
    gIsoDep.cntRRetrys  = gIsoDep.maxRetriesRATS;
 80096e4:	3244      	adds	r2, #68	@ 0x44
 80096e6:	7812      	ldrb	r2, [r2, #0]
 80096e8:	719a      	strb	r2, [r3, #6]
    gIsoDep.state       = ISODEP_ST_PCD_ACT_RATS;
 80096ea:	220a      	movs	r2, #10
 80096ec:	701a      	strb	r2, [r3, #0]
}
 80096ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096f0:	20000df8 	.word	0x20000df8

080096f4 <rfalIsoDepPollAGetActivationStatus>:
{
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( gIsoDep.state )
 80096f6:	4c6b      	ldr	r4, [pc, #428]	@ (80098a4 <rfalIsoDepPollAGetActivationStatus+0x1b0>)
 80096f8:	7823      	ldrb	r3, [r4, #0]
 80096fa:	2b0a      	cmp	r3, #10
 80096fc:	d00b      	beq.n	8009716 <rfalIsoDepPollAGetActivationStatus+0x22>
 80096fe:	2b0b      	cmp	r3, #11
 8009700:	d100      	bne.n	8009704 <rfalIsoDepPollAGetActivationStatus+0x10>
 8009702:	e0bb      	b.n	800987c <rfalIsoDepPollAGetActivationStatus+0x188>
 8009704:	2021      	movs	r0, #33	@ 0x21
 8009706:	2b03      	cmp	r3, #3
 8009708:	d133      	bne.n	8009772 <rfalIsoDepPollAGetActivationStatus+0x7e>
            ret = rfalIsoDepGetDeselectStatus();
 800970a:	f7ff fbe1 	bl	8008ed0 <rfalIsoDepGetDeselectStatus>
            if( ret != RFAL_ERR_BUSY )
 800970e:	2802      	cmp	r0, #2
 8009710:	d027      	beq.n	8009762 <rfalIsoDepPollAGetActivationStatus+0x6e>
                ret = RFAL_ERR_FRAMING;
 8009712:	2009      	movs	r0, #9
 8009714:	e02d      	b.n	8009772 <rfalIsoDepPollAGetActivationStatus+0x7e>
            ret = rfalIsoDepGetRATSStatus();
 8009716:	f7ff fc0f 	bl	8008f38 <rfalIsoDepGetRATSStatus>
 800971a:	0003      	movs	r3, r0
            if( ret != RFAL_ERR_BUSY )
 800971c:	2802      	cmp	r0, #2
 800971e:	d020      	beq.n	8009762 <rfalIsoDepPollAGetActivationStatus+0x6e>
                if( ret != RFAL_ERR_NONE )
 8009720:	2800      	cmp	r0, #0
 8009722:	d027      	beq.n	8009774 <rfalIsoDepPollAGetActivationStatus+0x80>
                    if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != RFAL_ERR_TIMEOUT) )
 8009724:	0023      	movs	r3, r4
 8009726:	3345      	adds	r3, #69	@ 0x45
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d101      	bne.n	8009732 <rfalIsoDepPollAGetActivationStatus+0x3e>
 800972e:	2804      	cmp	r0, #4
 8009730:	d11f      	bne.n	8009772 <rfalIsoDepPollAGetActivationStatus+0x7e>
                    if( gIsoDep.cntRRetrys != 0U )
 8009732:	79a2      	ldrb	r2, [r4, #6]
 8009734:	2a00      	cmp	r2, #0
 8009736:	d016      	beq.n	8009766 <rfalIsoDepPollAGetActivationStatus+0x72>
                        rfalSetGT( rfalGetFDTPoll() );
 8009738:	f7f8 fbc8 	bl	8001ecc <rfalGetFDTPoll>
 800973c:	f7f8 fbd6 	bl	8001eec <rfalSetGT>
                        rfalFieldOnAndStartGT();
 8009740:	f7f8 fbec 	bl	8001f1c <rfalFieldOnAndStartGT>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartRATS( (rfalIsoDepFSxI)(uint8_t)(gIsoDep.actv.ratsReq.PARAM >> RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT), 
 8009744:	0020      	movs	r0, r4
 8009746:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8009748:	304d      	adds	r0, #77	@ 0x4d
 800974a:	0013      	movs	r3, r2
 800974c:	7800      	ldrb	r0, [r0, #0]
 800974e:	78e1      	ldrb	r1, [r4, #3]
 8009750:	3314      	adds	r3, #20
 8009752:	0900      	lsrs	r0, r0, #4
 8009754:	f7ff f906 	bl	8008964 <rfalIsoDepStartRATS>
 8009758:	2800      	cmp	r0, #0
 800975a:	d10a      	bne.n	8009772 <rfalIsoDepPollAGetActivationStatus+0x7e>
                        gIsoDep.cntRRetrys--;
 800975c:	79a3      	ldrb	r3, [r4, #6]
 800975e:	3b01      	subs	r3, #1
 8009760:	71a3      	strb	r3, [r4, #6]
                        return RFAL_ERR_BUSY;
 8009762:	2002      	movs	r0, #2
 8009764:	e005      	b.n	8009772 <rfalIsoDepPollAGetActivationStatus+0x7e>
                    else if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 8009766:	2b02      	cmp	r3, #2
 8009768:	d103      	bne.n	8009772 <rfalIsoDepPollAGetActivationStatus+0x7e>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartDeselect() );
 800976a:	f7ff fb99 	bl	8008ea0 <rfalIsoDepStartDeselect>
 800976e:	2800      	cmp	r0, #0
 8009770:	d0f7      	beq.n	8009762 <rfalIsoDepPollAGetActivationStatus+0x6e>
}
 8009772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    maxBR = gIsoDep.actvDev->info.DSI;             /* Retrieve requested max bitrate */
 8009774:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
                    gIsoDep.actvDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 8009776:	2604      	movs	r6, #4
                    maxBR = gIsoDep.actvDev->info.DSI;             /* Retrieve requested max bitrate */
 8009778:	002a      	movs	r2, r5
                    gIsoDep.actvDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 800977a:	0029      	movs	r1, r5
                    maxBR = gIsoDep.actvDev->info.DSI;             /* Retrieve requested max bitrate */
 800977c:	3248      	adds	r2, #72	@ 0x48
                    gIsoDep.actvDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 800977e:	312c      	adds	r1, #44	@ 0x2c
                    gIsoDep.actvDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 8009780:	002f      	movs	r7, r5
                    maxBR = gIsoDep.actvDev->info.DSI;             /* Retrieve requested max bitrate */
 8009782:	7810      	ldrb	r0, [r2, #0]
                    gIsoDep.actvDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 8009784:	700e      	strb	r6, [r1, #0]
                    gIsoDep.actvDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 8009786:	2102      	movs	r1, #2
 8009788:	3740      	adds	r7, #64	@ 0x40
                    gIsoDep.actvDev->info.SFGI = 0U;
 800978a:	63ab      	str	r3, [r5, #56]	@ 0x38
                    gIsoDep.actvDev->info.MBL  = 0U;
 800978c:	646b      	str	r3, [r5, #68]	@ 0x44
                    gIsoDep.actvDev->info.DSI  = RFAL_BR_106;
 800978e:	8013      	strh	r3, [r2, #0]
                    gIsoDep.actvDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 8009790:	7039      	strb	r1, [r7, #0]
                    if( gIsoDep.actvDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 8009792:	782b      	ldrb	r3, [r5, #0]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d92b      	bls.n	80097f0 <rfalIsoDepPollAGetActivationStatus+0xfc>
                        gIsoDep.actvDev->info.FSxI = (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 8009798:	786b      	ldrb	r3, [r5, #1]
 800979a:	360b      	adds	r6, #11
 800979c:	401e      	ands	r6, r3
 800979e:	703e      	strb	r6, [r7, #0]
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 80097a0:	06db      	lsls	r3, r3, #27
 80097a2:	d505      	bpl.n	80097b0 <rfalIsoDepPollAGetActivationStatus+0xbc>
                            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++], &gIsoDep.actvDev->info.DSI, &gIsoDep.actvDev->info.DRI );
 80097a4:	002b      	movs	r3, r5
 80097a6:	78a9      	ldrb	r1, [r5, #2]
 80097a8:	3349      	adds	r3, #73	@ 0x49
 80097aa:	f7fe ffbb 	bl	8008724 <rfalIsoDepCalcBitRate>
 80097ae:	2103      	movs	r1, #3
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 80097b0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80097b2:	7858      	ldrb	r0, [r3, #1]
 80097b4:	0682      	lsls	r2, r0, #26
 80097b6:	d509      	bpl.n	80097cc <rfalIsoDepPollAGetActivationStatus+0xd8>
                            gIsoDep.actvDev->info.SFGI  = ((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++];
 80097b8:	5c5a      	ldrb	r2, [r3, r1]
 80097ba:	1c4d      	adds	r5, r1, #1
                            gIsoDep.actvDev->info.FWI   = (uint8_t)((gIsoDep.actvDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 80097bc:	0019      	movs	r1, r3
 80097be:	0916      	lsrs	r6, r2, #4
 80097c0:	312c      	adds	r1, #44	@ 0x2c
 80097c2:	700e      	strb	r6, [r1, #0]
                            gIsoDep.actvDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 80097c4:	210f      	movs	r1, #15
 80097c6:	400a      	ands	r2, r1
 80097c8:	639a      	str	r2, [r3, #56]	@ 0x38
                            gIsoDep.actvDev->info.SFGI  = ((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++];
 80097ca:	b2e9      	uxtb	r1, r5
                        if( (gIsoDep.actvDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 80097cc:	0640      	lsls	r0, r0, #25
 80097ce:	d50f      	bpl.n	80097f0 <rfalIsoDepPollAGetActivationStatus+0xfc>
                            gIsoDep.actvDev->info.supAdFt = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 80097d0:	2001      	movs	r0, #1
 80097d2:	001d      	movs	r5, r3
 80097d4:	5c5a      	ldrb	r2, [r3, r1]
 80097d6:	354e      	adds	r5, #78	@ 0x4e
 80097d8:	0912      	lsrs	r2, r2, #4
 80097da:	4002      	ands	r2, r0
 80097dc:	702a      	strb	r2, [r5, #0]
                            gIsoDep.actvDev->info.supDID  = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 80097de:	5c5a      	ldrb	r2, [r3, r1]
 80097e0:	3d02      	subs	r5, #2
 80097e2:	40c2      	lsrs	r2, r0
 80097e4:	4002      	ands	r2, r0
 80097e6:	702a      	strb	r2, [r5, #0]
                            gIsoDep.actvDev->info.supNAD  = (((((uint8_t*)&gIsoDep.actvDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 80097e8:	5c5a      	ldrb	r2, [r3, r1]
 80097ea:	334d      	adds	r3, #77	@ 0x4d
 80097ec:	4002      	ands	r2, r0
 80097ee:	701a      	strb	r2, [r3, #0]
                    gIsoDep.actvDev->info.FSx  = rfalIsoDepFSxI2FSx(gIsoDep.actvDev->info.FSxI);
 80097f0:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
 80097f2:	002b      	movs	r3, r5
 80097f4:	3340      	adds	r3, #64	@ 0x40
 80097f6:	7818      	ldrb	r0, [r3, #0]
 80097f8:	f7ff fb82 	bl	8008f00 <rfalIsoDepFSxI2FSx>
 80097fc:	1d2b      	adds	r3, r5, #4
 80097fe:	87d8      	strh	r0, [r3, #62]	@ 0x3e
                    gIsoDep.actvDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)gIsoDep.actvDev->info.SFGI );
 8009800:	6bab      	ldr	r3, [r5, #56]	@ 0x38
                    gIsoDep.fsx                = gIsoDep.actvDev->info.FSx;
 8009802:	82a0      	strh	r0, [r4, #20]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 8009804:	1e5a      	subs	r2, r3, #1
 8009806:	b2d2      	uxtb	r2, r2
 8009808:	2a0d      	cmp	r2, #13
 800980a:	d835      	bhi.n	8009878 <rfalIsoDepPollAGetActivationStatus+0x184>
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = rfalIsoDepCalcSGFT(sfgi) + rfalIsoDepCalcdSGFT(sfgi);
 800980c:	208c      	movs	r0, #140	@ 0x8c
 800980e:	b2db      	uxtb	r3, r3
 8009810:	0140      	lsls	r0, r0, #5
 8009812:	4098      	lsls	r0, r3
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 8009814:	4924      	ldr	r1, [pc, #144]	@ (80098a8 <rfalIsoDepPollAGetActivationStatus+0x1b4>)
 8009816:	f7f6 fca7 	bl	8000168 <__udivsi3>
                    rfalSetGT( rfalConvMsTo1fc(gIsoDep.actvDev->info.SFGT) );
 800981a:	4b23      	ldr	r3, [pc, #140]	@ (80098a8 <rfalIsoDepPollAGetActivationStatus+0x1b4>)
    return (rfalConv1fcToMs(sfgt) + 1U);
 800981c:	3001      	adds	r0, #1
                    gIsoDep.actvDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)gIsoDep.actvDev->info.SFGI );
 800981e:	63e8      	str	r0, [r5, #60]	@ 0x3c
                    rfalSetGT( rfalConvMsTo1fc(gIsoDep.actvDev->info.SFGT) );
 8009820:	4358      	muls	r0, r3
 8009822:	f7f8 fb63 	bl	8001eec <rfalSetGT>
                    rfalFieldOnAndStartGT();
 8009826:	f7f8 fb79 	bl	8001f1c <rfalFieldOnAndStartGT>
                    gIsoDep.actvDev->info.FWT  = rfalIsoDepFWI2FWT( gIsoDep.actvDev->info.FWI );
 800982a:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
 800982c:	002b      	movs	r3, r5
 800982e:	332c      	adds	r3, #44	@ 0x2c
 8009830:	7818      	ldrb	r0, [r3, #0]
 8009832:	f7ff fb5d 	bl	8008ef0 <rfalIsoDepFWI2FWT>
                    gIsoDep.actvDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 8009836:	23c0      	movs	r3, #192	@ 0xc0
 8009838:	021b      	lsls	r3, r3, #8
 800983a:	636b      	str	r3, [r5, #52]	@ 0x34
                    gIsoDep.actvDev->info.DID = ( (gIsoDep.actvDev->info.supDID) ? gIsoDep.did : RFAL_ISODEP_NO_DID);
 800983c:	002b      	movs	r3, r5
                    gIsoDep.actvDev->info.FWT  = rfalIsoDepFWI2FWT( gIsoDep.actvDev->info.FWI );
 800983e:	6328      	str	r0, [r5, #48]	@ 0x30
                    gIsoDep.actvDev->info.DID = ( (gIsoDep.actvDev->info.supDID) ? gIsoDep.did : RFAL_ISODEP_NO_DID);
 8009840:	2000      	movs	r0, #0
 8009842:	334c      	adds	r3, #76	@ 0x4c
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	4283      	cmp	r3, r0
 8009848:	d000      	beq.n	800984c <rfalIsoDepPollAGetActivationStatus+0x158>
 800984a:	78e0      	ldrb	r0, [r4, #3]
 800984c:	002b      	movs	r3, r5
                    gIsoDep.actvDev->info.NAD = RFAL_ISODEP_NO_NAD;
 800984e:	22ff      	movs	r2, #255	@ 0xff
                    if( (gIsoDep.actvDev->info.DSI != RFAL_BR_106) || (gIsoDep.actvDev->info.DRI != RFAL_BR_106) )
 8009850:	0029      	movs	r1, r5
                    gIsoDep.actvDev->info.DID = ( (gIsoDep.actvDev->info.supDID) ? gIsoDep.did : RFAL_ISODEP_NO_DID);
 8009852:	334a      	adds	r3, #74	@ 0x4a
 8009854:	7018      	strb	r0, [r3, #0]
                    gIsoDep.actvDev->info.NAD = RFAL_ISODEP_NO_NAD;
 8009856:	705a      	strb	r2, [r3, #1]
                    if( (gIsoDep.actvDev->info.DSI != RFAL_BR_106) || (gIsoDep.actvDev->info.DRI != RFAL_BR_106) )
 8009858:	3148      	adds	r1, #72	@ 0x48
 800985a:	880b      	ldrh	r3, [r1, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d01c      	beq.n	800989a <rfalIsoDepPollAGetActivationStatus+0x1a6>
                        RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartPPS( gIsoDep.actvDev->info.DID, gIsoDep.actvDev->info.DSI, gIsoDep.actvDev->info.DRI, (rfalIsoDepPpsRes*)&gIsoDep.ctrlBuf ));
 8009860:	3549      	adds	r5, #73	@ 0x49
 8009862:	4b12      	ldr	r3, [pc, #72]	@ (80098ac <rfalIsoDepPollAGetActivationStatus+0x1b8>)
 8009864:	782a      	ldrb	r2, [r5, #0]
 8009866:	7809      	ldrb	r1, [r1, #0]
 8009868:	f7ff f932 	bl	8008ad0 <rfalIsoDepStartPPS>
 800986c:	2800      	cmp	r0, #0
 800986e:	d000      	beq.n	8009872 <rfalIsoDepPollAGetActivationStatus+0x17e>
 8009870:	e77f      	b.n	8009772 <rfalIsoDepPollAGetActivationStatus+0x7e>
                        gIsoDep.state = ISODEP_ST_PCD_ACT_PPS;
 8009872:	230b      	movs	r3, #11
 8009874:	7023      	strb	r3, [r4, #0]
                        return RFAL_ERR_BUSY;
 8009876:	e774      	b.n	8009762 <rfalIsoDepPollAGetActivationStatus+0x6e>
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 8009878:	480d      	ldr	r0, [pc, #52]	@ (80098b0 <rfalIsoDepPollAGetActivationStatus+0x1bc>)
 800987a:	e7cb      	b.n	8009814 <rfalIsoDepPollAGetActivationStatus+0x120>
            ret = rfalIsoDepGetPPSSTatus();
 800987c:	f7ff f89e 	bl	80089bc <rfalIsoDepGetPPSSTatus>
            if( ret != RFAL_ERR_BUSY )
 8009880:	2802      	cmp	r0, #2
 8009882:	d100      	bne.n	8009886 <rfalIsoDepPollAGetActivationStatus+0x192>
 8009884:	e76d      	b.n	8009762 <rfalIsoDepPollAGetActivationStatus+0x6e>
                    rfalSetBitRate( gIsoDep.actvDev->info.DRI, gIsoDep.actvDev->info.DSI );
 8009886:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8009888:	001a      	movs	r2, r3
 800988a:	3248      	adds	r2, #72	@ 0x48
                if( ret == RFAL_ERR_NONE )
 800988c:	2800      	cmp	r0, #0
 800988e:	d106      	bne.n	800989e <rfalIsoDepPollAGetActivationStatus+0x1aa>
                    rfalSetBitRate( gIsoDep.actvDev->info.DRI, gIsoDep.actvDev->info.DSI );
 8009890:	3349      	adds	r3, #73	@ 0x49
 8009892:	7811      	ldrb	r1, [r2, #0]
 8009894:	7818      	ldrb	r0, [r3, #0]
 8009896:	f7f8 f8d5 	bl	8001a44 <rfalSetBitRate>
                    return RFAL_ERR_NONE;
 800989a:	2000      	movs	r0, #0
 800989c:	e769      	b.n	8009772 <rfalIsoDepPollAGetActivationStatus+0x7e>
                    gIsoDep.actvDev->info.DSI = RFAL_BR_106;
 800989e:	2300      	movs	r3, #0
 80098a0:	8013      	strh	r3, [r2, #0]
                    ret = RFAL_ERR_NONE;
 80098a2:	e7fa      	b.n	800989a <rfalIsoDepPollAGetActivationStatus+0x1a6>
 80098a4:	20000df8 	.word	0x20000df8
 80098a8:	000034f8 	.word	0x000034f8
 80098ac:	20000e3e 	.word	0x20000e3e
 80098b0:	00001a7c 	.word	0x00001a7c

080098b4 <rfalIsoDepPollBStartActivation>:
{
 80098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b6:	b08f      	sub	sp, #60	@ 0x3c
 80098b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80098ba:	ab16      	add	r3, sp, #88	@ 0x58
 80098bc:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80098c2:	930d      	str	r3, [sp, #52]	@ 0x34
    rfalIsoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 80098c4:	0023      	movs	r3, r4
{
 80098c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80098c8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80098ca:	9109      	str	r1, [sp, #36]	@ 0x24
    rfalIsoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 80098cc:	7b2e      	ldrb	r6, [r5, #12]
 80098ce:	332c      	adds	r3, #44	@ 0x2c
 80098d0:	0930      	lsrs	r0, r6, #4
 80098d2:	7018      	strb	r0, [r3, #0]
    rfalIsoDepDev->info.FWT     = rfalIsoDepFWI2FWT( rfalIsoDepDev->info.FWI );
 80098d4:	f7ff fb0c 	bl	8008ef0 <rfalIsoDepFWI2FWT>
    rfalIsoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 80098d8:	23c0      	movs	r3, #192	@ 0xc0
 80098da:	021b      	lsls	r3, r3, #8
    rfalIsoDepDev->info.FWT     = rfalIsoDepFWI2FWT( rfalIsoDepDev->info.FWI );
 80098dc:	6320      	str	r0, [r4, #48]	@ 0x30
    rfalIsoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 80098de:	6363      	str	r3, [r4, #52]	@ 0x34
    rfalIsoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 80098e0:	7b6b      	ldrb	r3, [r5, #13]
    if (tmpSFGI != ISODEP_SFGI_MIN)
 80098e2:	4a38      	ldr	r2, [pc, #224]	@ (80099c4 <rfalIsoDepPollBStartActivation+0x110>)
    rfalIsoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 80098e4:	091b      	lsrs	r3, r3, #4
    if (tmpSFGI != ISODEP_SFGI_MIN)
 80098e6:	40da      	lsrs	r2, r3
    rfalIsoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 80098e8:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (tmpSFGI != ISODEP_SFGI_MIN)
 80098ea:	07d2      	lsls	r2, r2, #31
 80098ec:	d462      	bmi.n	80099b4 <rfalIsoDepPollBStartActivation+0x100>
        sfgt  = rfalIsoDepCalcSGFT(sfgi) + rfalIsoDepCalcdSGFT(sfgi);
 80098ee:	208c      	movs	r0, #140	@ 0x8c
 80098f0:	0140      	lsls	r0, r0, #5
 80098f2:	4098      	lsls	r0, r3
    return (rfalConv1fcToMs(sfgt) + 1U);
 80098f4:	4934      	ldr	r1, [pc, #208]	@ (80099c8 <rfalIsoDepPollBStartActivation+0x114>)
 80098f6:	f7f6 fc37 	bl	8000168 <__udivsi3>
    rfalIsoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 80098fa:	0023      	movs	r3, r4
    return (rfalConv1fcToMs(sfgt) + 1U);
 80098fc:	3001      	adds	r0, #1
    rfalIsoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)rfalIsoDepDev->info.SFGI );
 80098fe:	63e0      	str	r0, [r4, #60]	@ 0x3c
    rfalIsoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 8009900:	7ae8      	ldrb	r0, [r5, #11]
 8009902:	3340      	adds	r3, #64	@ 0x40
 8009904:	0900      	lsrs	r0, r0, #4
 8009906:	7018      	strb	r0, [r3, #0]
    rfalIsoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(rfalIsoDepDev->info.FSxI);
 8009908:	f7ff fafa 	bl	8008f00 <rfalIsoDepFSxI2FSx>
    rfalIsoDepDev->info.DID     = DID;
 800990c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    rfalIsoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(rfalIsoDepDev->info.FSxI);
 800990e:	1d23      	adds	r3, r4, #4
 8009910:	87d8      	strh	r0, [r3, #62]	@ 0x3e
    rfalIsoDepDev->info.DID     = DID;
 8009912:	3346      	adds	r3, #70	@ 0x46
 8009914:	701a      	strb	r2, [r3, #0]
    rfalIsoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 8009916:	2201      	movs	r2, #1
 8009918:	0033      	movs	r3, r6
    rfalIsoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 800991a:	40d6      	lsrs	r6, r2
    rfalIsoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 800991c:	4013      	ands	r3, r2
    rfalIsoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 800991e:	4016      	ands	r6, r2
    rfalIsoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 8009920:	0021      	movs	r1, r4
    rfalIsoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 8009922:	0022      	movs	r2, r4
    rfalIsoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 8009924:	314c      	adds	r1, #76	@ 0x4c
    rfalIsoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 8009926:	324d      	adds	r2, #77	@ 0x4d
    rfalIsoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 8009928:	700b      	strb	r3, [r1, #0]
    rfalIsoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 800992a:	7016      	strb	r6, [r2, #0]
    if( (DID != RFAL_ISODEP_NO_DID) && (!rfalIsoDepDev->info.supDID) )
 800992c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800992e:	2a00      	cmp	r2, #0
 8009930:	d002      	beq.n	8009938 <rfalIsoDepPollBStartActivation+0x84>
        return RFAL_ERR_PARAM;
 8009932:	2007      	movs	r0, #7
    if( (DID != RFAL_ISODEP_NO_DID) && (!rfalIsoDepDev->info.supDID) )
 8009934:	2b00      	cmp	r3, #0
 8009936:	d03b      	beq.n	80099b0 <rfalIsoDepPollBStartActivation+0xfc>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMD );
 8009938:	2001      	movs	r0, #1
 800993a:	f7f8 faa5 	bl	8001e88 <rfalSetErrorHandling>
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 800993e:	4b23      	ldr	r3, [pc, #140]	@ (80099cc <rfalIsoDepPollBStartActivation+0x118>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d138      	bne.n	80099b8 <rfalIsoDepPollBStartActivation+0x104>
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 8009946:	4822      	ldr	r0, [pc, #136]	@ (80099d0 <rfalIsoDepPollBStartActivation+0x11c>)
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &rfalIsoDepDev->info.DSI, &rfalIsoDepDev->info.DRI );
 8009948:	0026      	movs	r6, r4
 800994a:	0027      	movs	r7, r4
 800994c:	3649      	adds	r6, #73	@ 0x49
 800994e:	3748      	adds	r7, #72	@ 0x48
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 8009950:	f7f8 fab0 	bl	8001eb4 <rfalSetFDTPoll>
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &rfalIsoDepDev->info.DSI, &rfalIsoDepDev->info.DRI );
 8009954:	0033      	movs	r3, r6
 8009956:	003a      	movs	r2, r7
 8009958:	7aa9      	ldrb	r1, [r5, #10]
 800995a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800995c:	f7fe fee2 	bl	8008724 <rfalIsoDepCalcBitRate>
    RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8009960:	7b2a      	ldrb	r2, [r5, #12]
 8009962:	2308      	movs	r3, #8
 8009964:	0011      	movs	r1, r2
 8009966:	1ca8      	adds	r0, r5, #2
 8009968:	4019      	ands	r1, r3
 800996a:	421a      	tst	r2, r3
 800996c:	d000      	beq.n	8009970 <rfalIsoDepPollBStartActivation+0xbc>
 800996e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009970:	7833      	ldrb	r3, [r6, #0]
 8009972:	4e16      	ldr	r6, [pc, #88]	@ (80099cc <rfalIsoDepPollBStartActivation+0x118>)
 8009974:	783a      	ldrb	r2, [r7, #0]
 8009976:	7836      	ldrb	r6, [r6, #0]
 8009978:	2e01      	cmp	r6, #1
 800997a:	d002      	beq.n	8009982 <rfalIsoDepPollBStartActivation+0xce>
 800997c:	7aee      	ldrb	r6, [r5, #11]
 800997e:	2507      	movs	r5, #7
 8009980:	402e      	ands	r6, r5
 8009982:	0025      	movs	r5, r4
 8009984:	3521      	adds	r5, #33	@ 0x21
 8009986:	9507      	str	r5, [sp, #28]
 8009988:	9406      	str	r4, [sp, #24]
 800998a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800998c:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 800998e:	9601      	str	r6, [sp, #4]
 8009990:	19ed      	adds	r5, r5, r7
 8009992:	9505      	str	r5, [sp, #20]
 8009994:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009996:	9504      	str	r5, [sp, #16]
 8009998:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 800999a:	9503      	str	r5, [sp, #12]
 800999c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800999e:	9502      	str	r5, [sp, #8]
 80099a0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80099a2:	9500      	str	r5, [sp, #0]
 80099a4:	f7ff f820 	bl	80089e8 <rfalIsoDepStartATTRIB>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d101      	bne.n	80099b0 <rfalIsoDepPollBStartActivation+0xfc>
    gIsoDep.actvDev = rfalIsoDepDev;
 80099ac:	4b09      	ldr	r3, [pc, #36]	@ (80099d4 <rfalIsoDepPollBStartActivation+0x120>)
 80099ae:	67dc      	str	r4, [r3, #124]	@ 0x7c
}
 80099b0:	b00f      	add	sp, #60	@ 0x3c
 80099b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 80099b4:	4806      	ldr	r0, [pc, #24]	@ (80099d0 <rfalIsoDepPollBStartActivation+0x11c>)
 80099b6:	e79d      	b.n	80098f4 <rfalIsoDepPollBStartActivation+0x40>
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 80099b8:	7ae8      	ldrb	r0, [r5, #11]
 80099ba:	0740      	lsls	r0, r0, #29
 80099bc:	0f80      	lsrs	r0, r0, #30
 80099be:	f003 fc63 	bl	800d288 <rfalNfcbTR2ToFDT>
 80099c2:	e7c1      	b.n	8009948 <rfalIsoDepPollBStartActivation+0x94>
 80099c4:	00008001 	.word	0x00008001
 80099c8:	000034f8 	.word	0x000034f8
 80099cc:	20000e3d 	.word	0x20000e3d
 80099d0:	00001a7c 	.word	0x00001a7c
 80099d4:	20000df8 	.word	0x20000df8

080099d8 <rfalIsoDepPollBGetActivationStatus>:
{
 80099d8:	b570      	push	{r4, r5, r6, lr}
    ret = rfalIsoDepGetATTRIBStatus();
 80099da:	f7ff facf 	bl	8008f7c <rfalIsoDepGetATTRIBStatus>
 80099de:	0004      	movs	r4, r0
    if( ret != RFAL_ERR_BUSY)
 80099e0:	2802      	cmp	r0, #2
 80099e2:	d023      	beq.n	8009a2c <rfalIsoDepPollBGetActivationStatus+0x54>
            if( (gIsoDep.actvDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != gIsoDep.did )
 80099e4:	4d15      	ldr	r5, [pc, #84]	@ (8009a3c <rfalIsoDepPollBGetActivationStatus+0x64>)
 80099e6:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
        if( ret == RFAL_ERR_NONE )
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d121      	bne.n	8009a30 <rfalIsoDepPollBGetActivationStatus+0x58>
            if( (gIsoDep.actvDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != gIsoDep.did )
 80099ec:	210f      	movs	r1, #15
 80099ee:	781a      	ldrb	r2, [r3, #0]
 80099f0:	78e8      	ldrb	r0, [r5, #3]
 80099f2:	4011      	ands	r1, r2
 80099f4:	4288      	cmp	r0, r1
 80099f6:	d11f      	bne.n	8009a38 <rfalIsoDepPollBGetActivationStatus+0x60>
            mbli = ((gIsoDep.actvDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 80099f8:	0912      	lsrs	r2, r2, #4
            if( mbli > 0U)
 80099fa:	d004      	beq.n	8009a06 <rfalIsoDepPollBGetActivationStatus+0x2e>
                gIsoDep.actvDev->info.MBL = (gIsoDep.actvDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 80099fc:	1d19      	adds	r1, r3, #4
 80099fe:	8fc9      	ldrh	r1, [r1, #62]	@ 0x3e
 8009a00:	3a01      	subs	r2, #1
 8009a02:	4091      	lsls	r1, r2
 8009a04:	6459      	str	r1, [r3, #68]	@ 0x44
            rfalSetBitRate( gIsoDep.actvDev->info.DRI, gIsoDep.actvDev->info.DSI );
 8009a06:	001a      	movs	r2, r3
 8009a08:	3349      	adds	r3, #73	@ 0x49
 8009a0a:	3248      	adds	r2, #72	@ 0x48
 8009a0c:	7811      	ldrb	r1, [r2, #0]
 8009a0e:	7818      	ldrb	r0, [r3, #0]
 8009a10:	f7f8 f818 	bl	8001a44 <rfalSetBitRate>
            rfalSetGT( rfalConvMsTo1fc(gIsoDep.actvDev->info.SFGT) );
 8009a14:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8009a16:	480a      	ldr	r0, [pc, #40]	@ (8009a40 <rfalIsoDepPollBGetActivationStatus+0x68>)
 8009a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a1a:	4358      	muls	r0, r3
 8009a1c:	f7f8 fa66 	bl	8001eec <rfalSetGT>
            rfalFieldOnAndStartGT();
 8009a20:	f7f8 fa7c 	bl	8001f1c <rfalFieldOnAndStartGT>
        gIsoDep.fsx    = gIsoDep.actvDev->info.FSx;
 8009a24:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8009a26:	3304      	adds	r3, #4
 8009a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a2a:	82ab      	strh	r3, [r5, #20]
}
 8009a2c:	0020      	movs	r0, r4
 8009a2e:	bd70      	pop	{r4, r5, r6, pc}
            gIsoDep.actvDev->info.DSI = RFAL_BR_106;
 8009a30:	2200      	movs	r2, #0
 8009a32:	3348      	adds	r3, #72	@ 0x48
 8009a34:	801a      	strh	r2, [r3, #0]
 8009a36:	e7f5      	b.n	8009a24 <rfalIsoDepPollBGetActivationStatus+0x4c>
                return RFAL_ERR_PROTO;
 8009a38:	240b      	movs	r4, #11
 8009a3a:	e7f7      	b.n	8009a2c <rfalIsoDepPollBGetActivationStatus+0x54>
 8009a3c:	20000df8 	.word	0x20000df8
 8009a40:	000034f8 	.word	0x000034f8

08009a44 <rfalIsoDepStartApduTransceive>:
}
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepStartApduTransceive( rfalIsoDepApduTxRxParam param )
{
 8009a44:	b084      	sub	sp, #16
 8009a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a48:	b095      	sub	sp, #84	@ 0x54
 8009a4a:	911b      	str	r1, [sp, #108]	@ 0x6c
    rfalIsoDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gIsoDep.APDUParam = param;
 8009a4c:	4933      	ldr	r1, [pc, #204]	@ (8009b1c <rfalIsoDepStartApduTransceive+0xd8>)
{
 8009a4e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a50:	921c      	str	r2, [sp, #112]	@ 0x70
 8009a52:	931d      	str	r3, [sp, #116]	@ 0x74
 8009a54:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a56:	8bdc      	ldrh	r4, [r3, #30]
    gIsoDep.APDUParam = param;
 8009a58:	000b      	movs	r3, r1
 8009a5a:	aa1a      	add	r2, sp, #104	@ 0x68
 8009a5c:	cae0      	ldmia	r2!, {r5, r6, r7}
 8009a5e:	c3e0      	stmia	r3!, {r5, r6, r7}
 8009a60:	ca62      	ldmia	r2!, {r1, r5, r6}
 8009a62:	c362      	stmia	r3!, {r1, r5, r6}
 8009a64:	482e      	ldr	r0, [pc, #184]	@ (8009b20 <rfalIsoDepStartApduTransceive+0xdc>)
 8009a66:	ca62      	ldmia	r2!, {r1, r5, r6}
 8009a68:	c362      	stmia	r3!, {r1, r5, r6}
    gIsoDep.APDUTxPos = 0;
 8009a6a:	0003      	movs	r3, r0
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	33b4      	adds	r3, #180	@ 0xb4
 8009a70:	601a      	str	r2, [r3, #0]
    gIsoDep.APDURxPos = 0;
    
    /* Assign current FSx to calculate INF length (only change the FSx from activation if no to Keep) */
    gIsoDep.ourFsx = (( param.ourFSx != RFAL_ISODEP_FSX_KEEP ) ? param.ourFSx : gIsoDep.ourFsx);
 8009a72:	2cff      	cmp	r4, #255	@ 0xff
 8009a74:	d100      	bne.n	8009a78 <rfalIsoDepStartApduTransceive+0x34>
 8009a76:	8cc4      	ldrh	r4, [r0, #38]	@ 0x26
 8009a78:	84c4      	strh	r4, [r0, #38]	@ 0x26
    gIsoDep.fsx    = param.FSx;
 8009a7a:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a7c:	8b9b      	ldrh	r3, [r3, #28]
 8009a7e:	0002      	movs	r2, r0
 8009a80:	8283      	strh	r3, [r0, #20]
    
    /* Convert APDU TxRxParams to I-Block TxRxParams */
    rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 8009a82:	0003      	movs	r3, r0
 8009a84:	3390      	adds	r3, #144	@ 0x90
 8009a86:	681f      	ldr	r7, [r3, #0]
 8009a88:	0003      	movs	r3, r0
 8009a8a:	3394      	adds	r3, #148	@ 0x94
 8009a8c:	881d      	ldrh	r5, [r3, #0]
 8009a8e:	0003      	movs	r3, r0
 8009a90:	339c      	adds	r3, #156	@ 0x9c
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	32a8      	adds	r2, #168	@ 0xa8
 8009a96:	6812      	ldr	r2, [r2, #0]
 8009a98:	9307      	str	r3, [sp, #28]
 8009a9a:	0003      	movs	r3, r0
 8009a9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a9e:	0002      	movs	r2, r0
 8009aa0:	33a0      	adds	r3, #160	@ 0xa0
 8009aa2:	32ac      	adds	r2, #172	@ 0xac
 8009aa4:	681e      	ldr	r6, [r3, #0]
 8009aa6:	0003      	movs	r3, r0
 8009aa8:	8811      	ldrh	r1, [r2, #0]
 8009aaa:	0002      	movs	r2, r0
     iBlockParam->DID    = apduParam.DID;
 8009aac:	30b0      	adds	r0, #176	@ 0xb0
 8009aae:	7800      	ldrb	r0, [r0, #0]
 8009ab0:	33a4      	adds	r3, #164	@ 0xa4
 8009ab2:	4684      	mov	ip, r0
 8009ab4:	201d      	movs	r0, #29
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	ac0b      	add	r4, sp, #44	@ 0x2c
 8009aba:	9308      	str	r3, [sp, #32]
 8009abc:	ab04      	add	r3, sp, #16
 8009abe:	18c0      	adds	r0, r0, r3
 8009ac0:	4663      	mov	r3, ip
 8009ac2:	77c3      	strb	r3, [r0, #31]
     iBlockParam->FWT    = apduParam.FWT;
 8009ac4:	9b08      	ldr	r3, [sp, #32]
 8009ac6:	32ae      	adds	r2, #174	@ 0xae
 8009ac8:	8812      	ldrh	r2, [r2, #0]
 8009aca:	6163      	str	r3, [r4, #20]
     iBlockParam->dFWT   = apduParam.dFWT;
 8009acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
     iBlockParam->FSx    = apduParam.FSx;
 8009ace:	83e1      	strh	r1, [r4, #30]
     iBlockParam->ourFSx = apduParam.ourFSx;
 8009ad0:	83a2      	strh	r2, [r4, #28]
     iBlockParam->dFWT   = apduParam.dFWT;
 8009ad2:	61a3      	str	r3, [r4, #24]
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 8009ad4:	f7ff fbc8 	bl	8009268 <rfalIsoDepGetMaxInfLen>
 8009ad8:	4285      	cmp	r5, r0
 8009ada:	d91c      	bls.n	8009b16 <rfalIsoDepStartApduTransceive+0xd2>
         iBlockParam->isTxChaining = true;
 8009adc:	2301      	movs	r3, #1
 8009ade:	71a3      	strb	r3, [r4, #6]
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 8009ae0:	f7ff fbc2 	bl	8009268 <rfalIsoDepGetMaxInfLen>
 8009ae4:	0005      	movs	r5, r0
    
    return rfalIsoDepStartTransceive( txRxParam );
 8009ae6:	466a      	mov	r2, sp
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 8009ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b24 <rfalIsoDepStartApduTransceive+0xe0>)
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 8009aea:	80a5      	strh	r5, [r4, #4]
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 8009aec:	6123      	str	r3, [r4, #16]
     iBlockParam->rxLen        = apduParam.rxLen;
 8009aee:	9b07      	ldr	r3, [sp, #28]
     iBlockParam->txBuf        = (rfalIsoDepBufFormat*)apduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 8009af0:	970b      	str	r7, [sp, #44]	@ 0x2c
     iBlockParam->rxLen        = apduParam.rxLen;
 8009af2:	60e3      	str	r3, [r4, #12]
     iBlockParam->rxBuf        = apduParam.tmpBuf;                        /* Simply using the apdu buffer is not possible because of current ACK handling */
 8009af4:	60a6      	str	r6, [r4, #8]
    return rfalIsoDepStartTransceive( txRxParam );
 8009af6:	ab0f      	add	r3, sp, #60	@ 0x3c
 8009af8:	cb23      	ldmia	r3!, {r0, r1, r5}
 8009afa:	c223      	stmia	r2!, {r0, r1, r5}
 8009afc:	cb03      	ldmia	r3!, {r0, r1}
 8009afe:	c203      	stmia	r2!, {r0, r1}
 8009b00:	0038      	movs	r0, r7
 8009b02:	0032      	movs	r2, r6
 8009b04:	6861      	ldr	r1, [r4, #4]
 8009b06:	9b07      	ldr	r3, [sp, #28]
 8009b08:	f7ff fbc4 	bl	8009294 <rfalIsoDepStartTransceive>
}
 8009b0c:	b015      	add	sp, #84	@ 0x54
 8009b0e:	bcf0      	pop	{r4, r5, r6, r7}
 8009b10:	bc08      	pop	{r3}
 8009b12:	b004      	add	sp, #16
 8009b14:	4718      	bx	r3
         iBlockParam->isTxChaining = false;
 8009b16:	2300      	movs	r3, #0
 8009b18:	71a3      	strb	r3, [r4, #6]
         iBlockParam->txBufLen     = (apduParam.txBufLen - txPos);
 8009b1a:	e7e4      	b.n	8009ae6 <rfalIsoDepStartApduTransceive+0xa2>
 8009b1c:	20000e88 	.word	0x20000e88
 8009b20:	20000df8 	.word	0x20000df8
 8009b24:	20000eb0 	.word	0x20000eb0

08009b28 <rfalIsoDepGetApduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalIsoDepGetApduTransceiveStatus( void )
{
 8009b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b2a:	b097      	sub	sp, #92	@ 0x5c
    ReturnCode          ret;
    rfalIsoDepTxRxParam txRxParam;
    
    ret = rfalIsoDepGetTransceiveStatus();
 8009b2c:	f7ff fbf6 	bl	800931c <rfalIsoDepGetTransceiveStatus>
 8009b30:	1e05      	subs	r5, r0, #0
    switch( ret )
 8009b32:	d004      	beq.n	8009b3e <rfalIsoDepGetApduTransceiveStatus+0x16>
 8009b34:	280d      	cmp	r0, #13
 8009b36:	d100      	bne.n	8009b3a <rfalIsoDepGetApduTransceiveStatus+0x12>
 8009b38:	e066      	b.n	8009c08 <rfalIsoDepGetApduTransceiveStatus+0xe0>
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
    }
    
    return ret;
 }
 8009b3a:	b017      	add	sp, #92	@ 0x5c
 8009b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( gIsoDep.isTxChaining )
 8009b3e:	484c      	ldr	r0, [pc, #304]	@ (8009c70 <rfalIsoDepGetApduTransceiveStatus+0x148>)
 8009b40:	7d83      	ldrb	r3, [r0, #22]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d060      	beq.n	8009c08 <rfalIsoDepGetApduTransceiveStatus+0xe0>
                gIsoDep.APDUTxPos += gIsoDep.txBufLen;
 8009b46:	0003      	movs	r3, r0
 8009b48:	33b4      	adds	r3, #180	@ 0xb4
 8009b4a:	881f      	ldrh	r7, [r3, #0]
 8009b4c:	8c02      	ldrh	r2, [r0, #32]
     iBlockParam->DID    = apduParam.DID;
 8009b4e:	ac0d      	add	r4, sp, #52	@ 0x34
                gIsoDep.APDUTxPos += gIsoDep.txBufLen;
 8009b50:	18bf      	adds	r7, r7, r2
 8009b52:	b2bf      	uxth	r7, r7
 8009b54:	801f      	strh	r7, [r3, #0]
                rfalIsoDepApdu2IBLockParam( gIsoDep.APDUParam, &txRxParam, gIsoDep.APDUTxPos, gIsoDep.APDURxPos );
 8009b56:	0003      	movs	r3, r0
 8009b58:	3390      	adds	r3, #144	@ 0x90
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	0002      	movs	r2, r0
 8009b5e:	9308      	str	r3, [sp, #32]
 8009b60:	0003      	movs	r3, r0
 8009b62:	3394      	adds	r3, #148	@ 0x94
 8009b64:	881e      	ldrh	r6, [r3, #0]
 8009b66:	0003      	movs	r3, r0
 8009b68:	339c      	adds	r3, #156	@ 0x9c
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	32a8      	adds	r2, #168	@ 0xa8
 8009b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b70:	0003      	movs	r3, r0
 8009b72:	6812      	ldr	r2, [r2, #0]
 8009b74:	33a0      	adds	r3, #160	@ 0xa0
 8009b76:	4694      	mov	ip, r2
 8009b78:	0002      	movs	r2, r0
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	32ac      	adds	r2, #172	@ 0xac
 8009b7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b80:	0003      	movs	r3, r0
 8009b82:	8811      	ldrh	r1, [r2, #0]
 8009b84:	0002      	movs	r2, r0
     iBlockParam->DID    = apduParam.DID;
 8009b86:	30b0      	adds	r0, #176	@ 0xb0
 8009b88:	7800      	ldrb	r0, [r0, #0]
 8009b8a:	33a4      	adds	r3, #164	@ 0xa4
 8009b8c:	9007      	str	r0, [sp, #28]
 8009b8e:	201d      	movs	r0, #29
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	32ae      	adds	r2, #174	@ 0xae
 8009b94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b96:	ab06      	add	r3, sp, #24
 8009b98:	18c0      	adds	r0, r0, r3
 8009b9a:	9b07      	ldr	r3, [sp, #28]
 8009b9c:	8812      	ldrh	r2, [r2, #0]
 8009b9e:	77c3      	strb	r3, [r0, #31]
     iBlockParam->FWT    = apduParam.FWT;
 8009ba0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 8009ba2:	1bf6      	subs	r6, r6, r7
     iBlockParam->FWT    = apduParam.FWT;
 8009ba4:	6163      	str	r3, [r4, #20]
     iBlockParam->dFWT   = apduParam.dFWT;
 8009ba6:	4663      	mov	r3, ip
     iBlockParam->FSx    = apduParam.FSx;
 8009ba8:	83e1      	strh	r1, [r4, #30]
     iBlockParam->ourFSx = apduParam.ourFSx;
 8009baa:	83a2      	strh	r2, [r4, #28]
     iBlockParam->dFWT   = apduParam.dFWT;
 8009bac:	61a3      	str	r3, [r4, #24]
     if( (apduParam.txBufLen - txPos) > rfalIsoDepGetMaxInfLen() )
 8009bae:	f7ff fb5b 	bl	8009268 <rfalIsoDepGetMaxInfLen>
 8009bb2:	4286      	cmp	r6, r0
 8009bb4:	dd25      	ble.n	8009c02 <rfalIsoDepGetApduTransceiveStatus+0xda>
         iBlockParam->isTxChaining = true;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	71a3      	strb	r3, [r4, #6]
         iBlockParam->txBufLen     = rfalIsoDepGetMaxInfLen();
 8009bba:	f7ff fb55 	bl	8009268 <rfalIsoDepGetMaxInfLen>
 8009bbe:	0006      	movs	r6, r0
     iBlockParam->txBuf        = (rfalIsoDepBufFormat*)apduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 8009bc0:	9b08      	ldr	r3, [sp, #32]
 8009bc2:	930d      	str	r3, [sp, #52]	@ 0x34
     iBlockParam->rxBuf        = apduParam.tmpBuf;                        /* Simply using the apdu buffer is not possible because of current ACK handling */
 8009bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bc6:	60a3      	str	r3, [r4, #8]
     iBlockParam->isRxChaining = &gIsoDep.isAPDURxChaining;
 8009bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8009c74 <rfalIsoDepGetApduTransceiveStatus+0x14c>)
 8009bca:	6123      	str	r3, [r4, #16]
     iBlockParam->rxLen        = apduParam.rxLen;
 8009bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bce:	60e3      	str	r3, [r4, #12]
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 8009bd0:	2e00      	cmp	r6, #0
 8009bd2:	d006      	beq.n	8009be2 <rfalIsoDepGetApduTransceiveStatus+0xba>
                    RFAL_MEMCPY( gIsoDep.APDUParam.txBuf->apdu, &gIsoDep.APDUParam.txBuf->apdu[gIsoDep.APDUTxPos], txRxParam.txBufLen );
 8009bd4:	9b08      	ldr	r3, [sp, #32]
 8009bd6:	3703      	adds	r7, #3
 8009bd8:	0032      	movs	r2, r6
 8009bda:	1cd8      	adds	r0, r3, #3
 8009bdc:	19d9      	adds	r1, r3, r7
 8009bde:	f006 fba7 	bl	8010330 <memcpy>
                RFAL_EXIT_ON_ERR( ret, rfalIsoDepStartTransceive( txRxParam ) );
 8009be2:	466a      	mov	r2, sp
 8009be4:	80a6      	strh	r6, [r4, #4]
 8009be6:	ab11      	add	r3, sp, #68	@ 0x44
 8009be8:	cb23      	ldmia	r3!, {r0, r1, r5}
 8009bea:	c223      	stmia	r2!, {r0, r1, r5}
 8009bec:	cb03      	ldmia	r3!, {r0, r1}
 8009bee:	c203      	stmia	r2!, {r0, r1}
 8009bf0:	3404      	adds	r4, #4
 8009bf2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009bf4:	cc0e      	ldmia	r4!, {r1, r2, r3}
 8009bf6:	f7ff fb4d 	bl	8009294 <rfalIsoDepStartTransceive>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d19d      	bne.n	8009b3a <rfalIsoDepGetApduTransceiveStatus+0x12>
                return RFAL_ERR_BUSY;
 8009bfe:	2002      	movs	r0, #2
 8009c00:	e79b      	b.n	8009b3a <rfalIsoDepGetApduTransceiveStatus+0x12>
         iBlockParam->isTxChaining = false;
 8009c02:	71a5      	strb	r5, [r4, #6]
         iBlockParam->txBufLen     = (apduParam.txBufLen - txPos);
 8009c04:	b2b6      	uxth	r6, r6
 8009c06:	e7db      	b.n	8009bc0 <rfalIsoDepGetApduTransceiveStatus+0x98>
            if( gIsoDep.APDUParam.rxLen == NULL )
 8009c08:	4f1b      	ldr	r7, [pc, #108]	@ (8009c78 <rfalIsoDepGetApduTransceiveStatus+0x150>)
 8009c0a:	4c19      	ldr	r4, [pc, #100]	@ (8009c70 <rfalIsoDepGetApduTransceiveStatus+0x148>)
 8009c0c:	6838      	ldr	r0, [r7, #0]
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d104      	bne.n	8009c1c <rfalIsoDepGetApduTransceiveStatus+0xf4>
                if( ret == RFAL_ERR_AGAIN  )
 8009c12:	2d0d      	cmp	r5, #13
 8009c14:	d000      	beq.n	8009c18 <rfalIsoDepGetApduTransceiveStatus+0xf0>
 8009c16:	e790      	b.n	8009b3a <rfalIsoDepGetApduTransceiveStatus+0x12>
                    return RFAL_ERR_NOTSUPP;
 8009c18:	3018      	adds	r0, #24
 8009c1a:	e78e      	b.n	8009b3a <rfalIsoDepGetApduTransceiveStatus+0x12>
                if( (gIsoDep.APDURxPos + (*gIsoDep.APDUParam.rxLen)) > (uint16_t)RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 8009c1c:	0026      	movs	r6, r4
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 8009c1e:	8802      	ldrh	r2, [r0, #0]
                if( (gIsoDep.APDURxPos + (*gIsoDep.APDUParam.rxLen)) > (uint16_t)RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 8009c20:	36b6      	adds	r6, #182	@ 0xb6
 8009c22:	8833      	ldrh	r3, [r6, #0]
            if( *gIsoDep.APDUParam.rxLen > 0U )    /* MISRA 21.18 */
 8009c24:	2a00      	cmp	r2, #0
 8009c26:	d017      	beq.n	8009c58 <rfalIsoDepGetApduTransceiveStatus+0x130>
                if( (gIsoDep.APDURxPos + (*gIsoDep.APDUParam.rxLen)) > (uint16_t)RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 8009c28:	2080      	movs	r0, #128	@ 0x80
 8009c2a:	0080      	lsls	r0, r0, #2
 8009c2c:	4684      	mov	ip, r0
 8009c2e:	1899      	adds	r1, r3, r2
                    return RFAL_ERR_NOMEM;
 8009c30:	2001      	movs	r0, #1
                if( (gIsoDep.APDURxPos + (*gIsoDep.APDUParam.rxLen)) > (uint16_t)RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN )
 8009c32:	4561      	cmp	r1, ip
 8009c34:	dd00      	ble.n	8009c38 <rfalIsoDepGetApduTransceiveStatus+0x110>
 8009c36:	e780      	b.n	8009b3a <rfalIsoDepGetApduTransceiveStatus+0x12>
                RFAL_MEMCPY( &gIsoDep.APDUParam.rxBuf->apdu[gIsoDep.APDURxPos], gIsoDep.APDUParam.tmpBuf->inf, *gIsoDep.APDUParam.rxLen );
 8009c38:	0021      	movs	r1, r4
 8009c3a:	3198      	adds	r1, #152	@ 0x98
 8009c3c:	6808      	ldr	r0, [r1, #0]
 8009c3e:	3303      	adds	r3, #3
 8009c40:	18c0      	adds	r0, r0, r3
 8009c42:	0023      	movs	r3, r4
 8009c44:	33a0      	adds	r3, #160	@ 0xa0
 8009c46:	6819      	ldr	r1, [r3, #0]
 8009c48:	3103      	adds	r1, #3
 8009c4a:	f006 fb71 	bl	8010330 <memcpy>
                gIsoDep.APDURxPos += *gIsoDep.APDUParam.rxLen;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	8832      	ldrh	r2, [r6, #0]
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	189b      	adds	r3, r3, r2
 8009c56:	8033      	strh	r3, [r6, #0]
            *gIsoDep.APDUParam.rxLen = gIsoDep.APDURxPos;
 8009c58:	0023      	movs	r3, r4
 8009c5a:	349c      	adds	r4, #156	@ 0x9c
 8009c5c:	33b6      	adds	r3, #182	@ 0xb6
 8009c5e:	881a      	ldrh	r2, [r3, #0]
 8009c60:	6823      	ldr	r3, [r4, #0]
            return ((ret == RFAL_ERR_AGAIN) ? RFAL_ERR_BUSY : RFAL_ERR_NONE);
 8009c62:	3d0d      	subs	r5, #13
            *gIsoDep.APDUParam.rxLen = gIsoDep.APDURxPos;
 8009c64:	801a      	strh	r2, [r3, #0]
            return ((ret == RFAL_ERR_AGAIN) ? RFAL_ERR_BUSY : RFAL_ERR_NONE);
 8009c66:	426b      	negs	r3, r5
 8009c68:	415d      	adcs	r5, r3
 8009c6a:	0068      	lsls	r0, r5, #1
 8009c6c:	e765      	b.n	8009b3a <rfalIsoDepGetApduTransceiveStatus+0x12>
 8009c6e:	46c0      	nop			@ (mov r8, r8)
 8009c70:	20000df8 	.word	0x20000df8
 8009c74:	20000eb0 	.word	0x20000eb0
 8009c78:	20000e94 	.word	0x20000e94

08009c7c <rfalNfcDeactivation>:
 * \return  RFAL_ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Suppress warning when specific RFAL features have been disabled */
    RFAL_NO_WARNING( ret );
    
    
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 8009c7e:	4c3a      	ldr	r4, [pc, #232]	@ (8009d68 <rfalNfcDeactivation+0xec>)
 8009c80:	68e3      	ldr	r3, [r4, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d118      	bne.n	8009cb8 <rfalNfcDeactivation+0x3c>
    aux = false;
 8009c86:	2200      	movs	r2, #0
            }
        }
    }
    
    /* If deactivation type is only to Sleep, mark it and keep Field On  */
    if( (gNfcDev.deactType == RFAL_NFC_DEACTIVATE_SLEEP) && (gNfcDev.activeDev != NULL) && (aux) )
 8009c88:	4b38      	ldr	r3, [pc, #224]	@ (8009d6c <rfalNfcDeactivation+0xf0>)
 8009c8a:	4d39      	ldr	r5, [pc, #228]	@ (8009d70 <rfalNfcDeactivation+0xf4>)
 8009c8c:	5ce1      	ldrb	r1, [r4, r3]
 8009c8e:	2901      	cmp	r1, #1
 8009c90:	d13d      	bne.n	8009d0e <rfalNfcDeactivation+0x92>
 8009c92:	68e3      	ldr	r3, [r4, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d03a      	beq.n	8009d0e <rfalNfcDeactivation+0x92>
 8009c98:	2a00      	cmp	r2, #0
 8009c9a:	d038      	beq.n	8009d0e <rfalNfcDeactivation+0x92>
    {
        gNfcDev.isOperOngoing = false;
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	4a35      	ldr	r2, [pc, #212]	@ (8009d74 <rfalNfcDeactivation+0xf8>)
 8009ca0:	54a0      	strb	r0, [r4, r2]
        
        
        if( gNfcDev.activeDev->type == RFAL_NFC_LISTEN_TYPE_NFCA )
 8009ca2:	781a      	ldrb	r2, [r3, #0]
 8009ca4:	4282      	cmp	r2, r0
 8009ca6:	d12e      	bne.n	8009d06 <rfalNfcDeactivation+0x8a>
        {
            gNfcDev.activeDev->dev.nfca.isSleep = true;
 8009ca8:	7599      	strb	r1, [r3, #22]
    }
    
    gNfcDev.activeDev      = NULL;                                                               /* Clear Active Device info */
    gNfcDev.isDeactivating = false;
    gNfcDev.isTechInit     = false;
    gNfcDev.isFieldOn      = false;
 8009caa:	23ca      	movs	r3, #202	@ 0xca
    gNfcDev.activeDev      = NULL;                                                               /* Clear Active Device info */
 8009cac:	2000      	movs	r0, #0
    gNfcDev.isFieldOn      = false;
 8009cae:	009b      	lsls	r3, r3, #2
    gNfcDev.activeDev      = NULL;                                                               /* Clear Active Device info */
 8009cb0:	60e0      	str	r0, [r4, #12]
    gNfcDev.isDeactivating = false;
 8009cb2:	5560      	strb	r0, [r4, r5]
    gNfcDev.isFieldOn      = false;
 8009cb4:	52e0      	strh	r0, [r4, r3]
    return RFAL_ERR_NONE;
 8009cb6:	e00a      	b.n	8009cce <rfalNfcDeactivation+0x52>
        if( rfalNfcIsRemDevListener( gNfcDev.activeDev->type ) )                          /* Listen mode no additional deactivation to be performed*/
 8009cb8:	781a      	ldrb	r2, [r3, #0]
 8009cba:	2a05      	cmp	r2, #5
 8009cbc:	d8e3      	bhi.n	8009c86 <rfalNfcDeactivation+0xa>
            switch( gNfcDev.activeDev->rfInterface )
 8009cbe:	7f5d      	ldrb	r5, [r3, #29]
 8009cc0:	2d01      	cmp	r5, #1
 8009cc2:	d005      	beq.n	8009cd0 <rfalNfcDeactivation+0x54>
 8009cc4:	2d02      	cmp	r5, #2
 8009cc6:	d016      	beq.n	8009cf6 <rfalNfcDeactivation+0x7a>
 8009cc8:	2005      	movs	r0, #5
 8009cca:	2d00      	cmp	r5, #0
 8009ccc:	d0db      	beq.n	8009c86 <rfalNfcDeactivation+0xa>
}
 8009cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if( !gNfcDev.isOperOngoing )
 8009cd0:	4e28      	ldr	r6, [pc, #160]	@ (8009d74 <rfalNfcDeactivation+0xf8>)
 8009cd2:	5da3      	ldrb	r3, [r4, r6]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d106      	bne.n	8009ce6 <rfalNfcDeactivation+0x6a>
                        ret = rfalIsoDepStartDeselect();
 8009cd8:	f7ff f8e2 	bl	8008ea0 <rfalIsoDepStartDeselect>
                        if( ret == RFAL_ERR_NONE )                                        /* Send a Deselect to device */
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d1d2      	bne.n	8009c86 <rfalNfcDeactivation+0xa>
                            gNfcDev.isOperOngoing = true;
 8009ce0:	55a5      	strb	r5, [r4, r6]
                            return RFAL_ERR_BUSY;
 8009ce2:	2002      	movs	r0, #2
 8009ce4:	e7f3      	b.n	8009cce <rfalNfcDeactivation+0x52>
                        RFAL_EXIT_ON_BUSY( ret, rfalIsoDepGetDeselectStatus() );          /* Check if deselection has finished */
 8009ce6:	f7ff f8f3 	bl	8008ed0 <rfalIsoDepGetDeselectStatus>
 8009cea:	2802      	cmp	r0, #2
 8009cec:	d0f9      	beq.n	8009ce2 <rfalNfcDeactivation+0x66>
                        gNfcDev.isOperOngoing = false;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	55a3      	strb	r3, [r4, r6]
                        aux                   = true;                                     /* Mark device as deselected */
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	e7c8      	b.n	8009c88 <rfalNfcDeactivation+0xc>
                    switch ( gNfcDev.activeDev->type )
 8009cf6:	2a05      	cmp	r2, #5
 8009cf8:	d102      	bne.n	8009d00 <rfalNfcDeactivation+0x84>
                            rfalNfcDepRLS();                                              /* Send a Release to device */
 8009cfa:	f001 fd5f 	bl	800b7bc <rfalNfcDepRLS>
                            break;
 8009cfe:	e7c2      	b.n	8009c86 <rfalNfcDeactivation+0xa>
                            rfalNfcDepDSL();                                              /* Send a Deselect to device */
 8009d00:	f001 fd2c 	bl	800b75c <rfalNfcDepDSL>
                            break;
 8009d04:	e7f5      	b.n	8009cf2 <rfalNfcDeactivation+0x76>
        else if( gNfcDev.activeDev->type == RFAL_NFC_LISTEN_TYPE_NFCB )
 8009d06:	2a01      	cmp	r2, #1
 8009d08:	d1cf      	bne.n	8009caa <rfalNfcDeactivation+0x2e>
            gNfcDev.activeDev->dev.nfcb.isSleep = true;
 8009d0a:	73da      	strb	r2, [r3, #15]
 8009d0c:	e7cd      	b.n	8009caa <rfalNfcDeactivation+0x2e>
        if( !gNfcDev.isDeactivating )                                                            /* Check if the Field deactivation has not started */
 8009d0e:	5d63      	ldrb	r3, [r4, r5]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d120      	bne.n	8009d56 <rfalNfcDeactivation+0xda>
            rfalWakeUpModeStop();
 8009d14:	f7fa f814 	bl	8003d40 <rfalWakeUpModeStop>
            rfalListenStop();
 8009d18:	f7f8 fb48 	bl	80023ac <rfalListenStop>
            if( (gNfcDev.isFieldOn) && rfalNfcHasPollerTechs() )                                 /* Check if configured to Poll modes and the Field is On */
 8009d1c:	23ca      	movs	r3, #202	@ 0xca
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	5ce3      	ldrb	r3, [r4, r3]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0c1      	beq.n	8009caa <rfalNfcDeactivation+0x2e>
 8009d26:	8a63      	ldrh	r3, [r4, #18]
 8009d28:	065b      	lsls	r3, r3, #25
 8009d2a:	d0be      	beq.n	8009caa <rfalNfcDeactivation+0x2e>
                aux = platformTimerIsExpired(gNfcDev.discTmr);                                   /* Check total duration timer is already expired */
 8009d2c:	26c7      	movs	r6, #199	@ 0xc7
 8009d2e:	00b6      	lsls	r6, r6, #2
 8009d30:	59a0      	ldr	r0, [r4, r6]
 8009d32:	f7fa fdc1 	bl	80048b8 <timerIsExpired>
 8009d36:	0007      	movs	r7, r0
                if( ((platformGetSysTick() + RFAL_NFC_T_FIELD_OFF) > gNfcDev.discTmr) || (aux) ) /* In case Total Duration has expired or expring in less than tFIELD_OFF */
 8009d38:	f7f6 fba4 	bl	8000484 <BSP_GetTick>
 8009d3c:	59a3      	ldr	r3, [r4, r6]
 8009d3e:	3005      	adds	r0, #5
 8009d40:	4298      	cmp	r0, r3
 8009d42:	d801      	bhi.n	8009d48 <rfalNfcDeactivation+0xcc>
 8009d44:	2f00      	cmp	r7, #0
 8009d46:	d003      	beq.n	8009d50 <rfalNfcDeactivation+0xd4>
                    gNfcDev.discTmr = (uint32_t)platformTimerCreate( RFAL_NFC_T_FIELD_OFF );     /* Ensure that Operating Field is in Off condition at least tFIELD_OFF */
 8009d48:	2005      	movs	r0, #5
 8009d4a:	f7fa fdaf 	bl	80048ac <timerCalculateTimer>
 8009d4e:	51a0      	str	r0, [r4, r6]
                gNfcDev.isDeactivating = true;
 8009d50:	2301      	movs	r3, #1
 8009d52:	5563      	strb	r3, [r4, r5]
                return RFAL_ERR_BUSY;
 8009d54:	e7c5      	b.n	8009ce2 <rfalNfcDeactivation+0x66>
            if( !platformTimerIsExpired(gNfcDev.discTmr) )
 8009d56:	23c7      	movs	r3, #199	@ 0xc7
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	58e0      	ldr	r0, [r4, r3]
 8009d5c:	f7fa fdac 	bl	80048b8 <timerIsExpired>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d1a2      	bne.n	8009caa <rfalNfcDeactivation+0x2e>
 8009d64:	e7bd      	b.n	8009ce2 <rfalNfcDeactivation+0x66>
 8009d66:	46c0      	nop			@ (mov r8, r8)
 8009d68:	20000fd4 	.word	0x20000fd4
 8009d6c:	00000322 	.word	0x00000322
 8009d70:	0000032b 	.word	0x0000032b
 8009d74:	0000032a 	.word	0x0000032a

08009d78 <rfalNfcNfcDepActivate>:
{
 8009d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( rfalNfcIsRemDevListener( device->type ) )
 8009d7a:	7805      	ldrb	r5, [r0, #0]
{
 8009d7c:	b09d      	sub	sp, #116	@ 0x74
 8009d7e:	0004      	movs	r4, r0
 8009d80:	000e      	movs	r6, r1
 8009d82:	9204      	str	r2, [sp, #16]
 8009d84:	9305      	str	r3, [sp, #20]
    if( rfalNfcIsRemDevListener( device->type ) )
 8009d86:	2d05      	cmp	r5, #5
 8009d88:	d824      	bhi.n	8009dd4 <rfalNfcNfcDepActivate+0x5c>
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 8009d8a:	2d02      	cmp	r5, #2
 8009d8c:	d11f      	bne.n	8009dce <rfalNfcNfcDepActivate+0x56>
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 8009d8e:	2308      	movs	r3, #8
 8009d90:	1cc2      	adds	r2, r0, #3
 8009d92:	ad0b      	add	r5, sp, #44	@ 0x2c
 8009d94:	920c      	str	r2, [sp, #48]	@ 0x30
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8009d96:	722b      	strb	r3, [r5, #8]
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	726b      	strb	r3, [r5, #9]
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 8009d9c:	816b      	strh	r3, [r5, #10]
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8009d9e:	732b      	strb	r3, [r5, #12]
        initParam.LR        = gNfcDev.disc.nfcDepLR;
 8009da0:	4b32      	ldr	r3, [pc, #200]	@ (8009e6c <rfalNfcNfcDepActivate+0xf4>)
 8009da2:	4f33      	ldr	r7, [pc, #204]	@ (8009e70 <rfalNfcNfcDepActivate+0xf8>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	736b      	strb	r3, [r5, #13]
        initParam.GB        = gNfcDev.disc.GB;
 8009da8:	4b32      	ldr	r3, [pc, #200]	@ (8009e74 <rfalNfcNfcDepActivate+0xfc>)
 8009daa:	930f      	str	r3, [sp, #60]	@ 0x3c
        initParam.GBLen     = gNfcDev.disc.GBLen;
 8009dac:	003b      	movs	r3, r7
 8009dae:	3355      	adds	r3, #85	@ 0x55
 8009db0:	781b      	ldrb	r3, [r3, #0]
        initParam.commMode  = commMode;
 8009db2:	702e      	strb	r6, [r5, #0]
        initParam.GBLen     = gNfcDev.disc.GBLen;
 8009db4:	752b      	strb	r3, [r5, #20]
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8009db6:	230e      	movs	r3, #14
 8009db8:	706b      	strb	r3, [r5, #1]
        rfalNfcDepInitialize();
 8009dba:	f001 fbdd 	bl	800b578 <rfalNfcDepInitialize>
        return rfalNfcDepInitiatorHandleActivation( &initParam, gNfcDev.disc.maxBR, &device->proto.nfcDep );
 8009dbe:	0022      	movs	r2, r4
 8009dc0:	0028      	movs	r0, r5
 8009dc2:	7e79      	ldrb	r1, [r7, #25]
 8009dc4:	3220      	adds	r2, #32
 8009dc6:	f001 fd29 	bl	800b81c <rfalNfcDepInitiatorHandleActivation>
}
 8009dca:	b01d      	add	sp, #116	@ 0x74
 8009dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dce:	230a      	movs	r3, #10
 8009dd0:	4a29      	ldr	r2, [pc, #164]	@ (8009e78 <rfalNfcNfcDepActivate+0x100>)
 8009dd2:	e7de      	b.n	8009d92 <rfalNfcNfcDepActivate+0x1a>
    else if( rfalNfcIsRemDevPoller( device->type ) )
 8009dd4:	002b      	movs	r3, r5
 8009dd6:	3b0a      	subs	r3, #10
        return RFAL_ERR_INTERNAL;
 8009dd8:	200c      	movs	r0, #12
    else if( rfalNfcIsRemDevPoller( device->type ) )
 8009dda:	2b05      	cmp	r3, #5
 8009ddc:	d8f5      	bhi.n	8009dca <rfalNfcNfcDepActivate+0x52>
        RFAL_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 8009dde:	ab02      	add	r3, sp, #8
 8009de0:	3019      	adds	r0, #25
 8009de2:	220a      	movs	r2, #10
 8009de4:	4924      	ldr	r1, [pc, #144]	@ (8009e78 <rfalNfcNfcDepActivate+0x100>)
 8009de6:	18c0      	adds	r0, r0, r3
 8009de8:	4f21      	ldr	r7, [pc, #132]	@ (8009e70 <rfalNfcNfcDepActivate+0xf8>)
 8009dea:	f006 faa1 	bl	8010330 <memcpy>
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8009dee:	2300      	movs	r3, #0
        RFAL_MEMCPY(targetParam.nfcid3, (uint8_t*)gNfcDev.disc.nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 8009df0:	ac0b      	add	r4, sp, #44	@ 0x2c
        targetParam.bst       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8009df2:	72e3      	strb	r3, [r4, #11]
        targetParam.brt       = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 8009df4:	23a0      	movs	r3, #160	@ 0xa0
 8009df6:	011b      	lsls	r3, r3, #4
 8009df8:	81a3      	strh	r3, [r4, #12]
        targetParam.ppt       = rfalNfcDepLR2PP(gNfcDev.disc.nfcDepLR);
 8009dfa:	003b      	movs	r3, r7
 8009dfc:	2130      	movs	r1, #48	@ 0x30
 8009dfe:	003a      	movs	r2, r7
 8009e00:	3371      	adds	r3, #113	@ 0x71
 8009e02:	781b      	ldrb	r3, [r3, #0]
        if( gNfcDev.disc.GBLen >= RFAL_NFCDEP_GB_MAX_LEN )
 8009e04:	3255      	adds	r2, #85	@ 0x55
        targetParam.ppt       = rfalNfcDepLR2PP(gNfcDev.disc.nfcDepLR);
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	400b      	ands	r3, r1
 8009e0a:	73a3      	strb	r3, [r4, #14]
        if( gNfcDev.disc.GBLen >= RFAL_NFCDEP_GB_MAX_LEN )
 8009e0c:	7812      	ldrb	r2, [r2, #0]
            return RFAL_ERR_PARAM;
 8009e0e:	2007      	movs	r0, #7
        if( gNfcDev.disc.GBLen >= RFAL_NFCDEP_GB_MAX_LEN )
 8009e10:	2a2f      	cmp	r2, #47	@ 0x2f
 8009e12:	d8da      	bhi.n	8009dca <rfalNfcNfcDepActivate+0x52>
        targetParam.GBtLen    = gNfcDev.disc.GBLen;
 8009e14:	2363      	movs	r3, #99	@ 0x63
 8009e16:	a902      	add	r1, sp, #8
 8009e18:	185b      	adds	r3, r3, r1
 8009e1a:	701a      	strb	r2, [r3, #0]
        if( gNfcDev.disc.GBLen > 0U )
 8009e1c:	2a00      	cmp	r2, #0
 8009e1e:	d005      	beq.n	8009e2c <rfalNfcNfcDepActivate+0xb4>
            RFAL_MEMCPY(targetParam.GBt, gNfcDev.disc.GB, gNfcDev.disc.GBLen);
 8009e20:	302c      	adds	r0, #44	@ 0x2c
 8009e22:	ab02      	add	r3, sp, #8
 8009e24:	4913      	ldr	r1, [pc, #76]	@ (8009e74 <rfalNfcNfcDepActivate+0xfc>)
 8009e26:	18c0      	adds	r0, r0, r3
 8009e28:	f006 fa82 	bl	8010330 <memcpy>
        targetParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 8009e2c:	220e      	movs	r2, #14
 8009e2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009e30:	701a      	strb	r2, [r3, #0]
        actvParams.rxBuf        = (rfalNfcDepBufFormat*) &gNfcDev.rxBuf.nfcDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 8009e32:	4b12      	ldr	r3, [pc, #72]	@ (8009e7c <rfalNfcNfcDepActivate+0x104>)
        targetParam.commMode  = commMode;
 8009e34:	7026      	strb	r6, [r4, #0]
        actvParams.rxBuf        = (rfalNfcDepBufFormat*) &gNfcDev.rxBuf.nfcDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 8009e36:	9307      	str	r3, [sp, #28]
        actvParams.rxLen        = &gNfcDev.rxLen;
 8009e38:	4b11      	ldr	r3, [pc, #68]	@ (8009e80 <rfalNfcNfcDepActivate+0x108>)
 8009e3a:	9308      	str	r3, [sp, #32]
        actvParams.isRxChaining = &gNfcDev.isRxChaining;
 8009e3c:	4b11      	ldr	r3, [pc, #68]	@ (8009e84 <rfalNfcNfcDepActivate+0x10c>)
 8009e3e:	9309      	str	r3, [sp, #36]	@ 0x24
        actvParams.nfcDepDev    = &gNfcDev.devList->proto.nfcDep;
 8009e40:	4b11      	ldr	r3, [pc, #68]	@ (8009e88 <rfalNfcNfcDepActivate+0x110>)
 8009e42:	930a      	str	r3, [sp, #40]	@ 0x28
        rfalListenSetState( ((device->type == RFAL_NFC_POLL_TYPE_NFCA) ? RFAL_LM_STATE_TARGET_A : RFAL_LM_STATE_TARGET_F) );
 8009e44:	2d0a      	cmp	r5, #10
 8009e46:	d000      	beq.n	8009e4a <rfalNfcNfcDepActivate+0xd2>
 8009e48:	250b      	movs	r5, #11
 8009e4a:	0028      	movs	r0, r5
 8009e4c:	f7f8 fb3e 	bl	80024cc <rfalListenSetState>
        rfalNfcDepInitialize();
 8009e50:	f001 fb92 	bl	800b578 <rfalNfcDepInitialize>
        return rfalNfcDepListenStartActivation( &targetParam, atrReq, atrReqLen, actvParams );
 8009e54:	466a      	mov	r2, sp
 8009e56:	ab08      	add	r3, sp, #32
 8009e58:	cb23      	ldmia	r3!, {r0, r1, r5}
 8009e5a:	c223      	stmia	r2!, {r0, r1, r5}
 8009e5c:	0020      	movs	r0, r4
 8009e5e:	9b07      	ldr	r3, [sp, #28]
 8009e60:	9a05      	ldr	r2, [sp, #20]
 8009e62:	9904      	ldr	r1, [sp, #16]
 8009e64:	f001 fd6a 	bl	800b93c <rfalNfcDepListenStartActivation>
 8009e68:	e7af      	b.n	8009dca <rfalNfcNfcDepActivate+0x52>
 8009e6a:	46c0      	nop			@ (mov r8, r8)
 8009e6c:	20001045 	.word	0x20001045
 8009e70:	20000fd4 	.word	0x20000fd4
 8009e74:	20000ff9 	.word	0x20000ff9
 8009e78:	20000fef 	.word	0x20000fef
 8009e7c:	20001515 	.word	0x20001515
 8009e80:	2000171a 	.word	0x2000171a
 8009e84:	200012f7 	.word	0x200012f7
 8009e88:	200010b4 	.word	0x200010b4

08009e8c <rfalNfcInitialize>:
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 8009e8c:	2300      	movs	r3, #0
{
 8009e8e:	b570      	push	{r4, r5, r6, lr}
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 8009e90:	4d08      	ldr	r5, [pc, #32]	@ (8009eb4 <rfalNfcInitialize+0x28>)
 8009e92:	702b      	strb	r3, [r5, #0]
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 8009e94:	f7fe f9b4 	bl	8008200 <rfalAnalogConfigInitialize>
    RFAL_EXIT_ON_ERR( err, rfalInitialize() ); /* Initialize RFAL */
 8009e98:	f7f7 fd98 	bl	80019cc <rfalInitialize>
 8009e9c:	1e04      	subs	r4, r0, #0
 8009e9e:	d106      	bne.n	8009eae <rfalNfcInitialize+0x22>
    RFAL_MEMSET( &gNfcDev, 0x00, sizeof(gNfcDev) );
 8009ea0:	0001      	movs	r1, r0
 8009ea2:	4a05      	ldr	r2, [pc, #20]	@ (8009eb8 <rfalNfcInitialize+0x2c>)
 8009ea4:	0028      	movs	r0, r5
 8009ea6:	f006 fa0f 	bl	80102c8 <memset>
    gNfcDev.state = RFAL_NFC_STATE_IDLE;       /* Go to initialized */
 8009eaa:	2301      	movs	r3, #1
 8009eac:	702b      	strb	r3, [r5, #0]
}
 8009eae:	0020      	movs	r0, r4
 8009eb0:	bd70      	pop	{r4, r5, r6, pc}
 8009eb2:	46c0      	nop			@ (mov r8, r8)
 8009eb4:	20000fd4 	.word	0x20000fd4
 8009eb8:	0000084c 	.word	0x0000084c

08009ebc <rfalNfcDiscover>:
{
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 8009ebe:	4d28      	ldr	r5, [pc, #160]	@ (8009f60 <rfalNfcDiscover+0xa4>)
{
 8009ec0:	0001      	movs	r1, r0
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 8009ec2:	782b      	ldrb	r3, [r5, #0]
        return RFAL_ERR_WRONG_STATE;
 8009ec4:	2421      	movs	r4, #33	@ 0x21
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d145      	bne.n	8009f56 <rfalNfcDiscover+0x9a>
        return RFAL_ERR_PARAM;
 8009eca:	3c1a      	subs	r4, #26
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                 || 
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d042      	beq.n	8009f56 <rfalNfcDiscover+0x9a>
 8009ed0:	7a03      	ldrb	r3, [r0, #8]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	d83e      	bhi.n	8009f56 <rfalNfcDiscover+0x9a>
        ( (disParams->maxBR > RFAL_BR_1695) && (disParams->maxBR != RFAL_BR_KEEP) )                                                                        ||
 8009ed8:	7a43      	ldrb	r3, [r0, #9]
 8009eda:	3b05      	subs	r3, #5
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                 || 
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2bf9      	cmp	r3, #249	@ 0xf9
 8009ee0:	d939      	bls.n	8009f56 <rfalNfcDiscover+0x9a>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )         ||
 8009ee2:	8843      	ldrh	r3, [r0, #2]
        ( (disParams->maxBR > RFAL_BR_1695) && (disParams->maxBR != RFAL_BR_KEEP) )                                                                        ||
 8009ee4:	075a      	lsls	r2, r3, #29
 8009ee6:	d503      	bpl.n	8009ef0 <rfalNfcDiscover+0x34>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )         ||
 8009ee8:	7a82      	ldrb	r2, [r0, #10]
 8009eea:	3a01      	subs	r2, #1
 8009eec:	2a01      	cmp	r2, #1
 8009eee:	d832      	bhi.n	8009f56 <rfalNfcDiscover+0x9a>
 8009ef0:	06da      	lsls	r2, r3, #27
 8009ef2:	d505      	bpl.n	8009f00 <rfalNfcDiscover+0x44>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN) )  )
 8009ef4:	000a      	movs	r2, r1
 8009ef6:	3246      	adds	r2, #70	@ 0x46
 8009ef8:	7812      	ldrb	r2, [r2, #0]
        return RFAL_ERR_PARAM;
 8009efa:	2407      	movs	r4, #7
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN) )  )
 8009efc:	2a02      	cmp	r2, #2
 8009efe:	d82a      	bhi.n	8009f56 <rfalNfcDiscover+0x9a>
 8009f00:	000a      	movs	r2, r1
 8009f02:	3245      	adds	r2, #69	@ 0x45
 8009f04:	7812      	ldrb	r2, [r2, #0]
        return RFAL_ERR_PARAM;
 8009f06:	2407      	movs	r4, #7
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN) )  )
 8009f08:	2a30      	cmp	r2, #48	@ 0x30
 8009f0a:	d824      	bhi.n	8009f56 <rfalNfcDiscover+0x9a>
    if( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_A) != 0U)      && (!((bool)RFAL_SUPPORT_MODE_POLL_NFCA)))         ||
 8009f0c:	2680      	movs	r6, #128	@ 0x80
 8009f0e:	001c      	movs	r4, r3
 8009f10:	01b6      	lsls	r6, r6, #6
 8009f12:	4034      	ands	r4, r6
 8009f14:	4233      	tst	r3, r6
 8009f16:	d120      	bne.n	8009f5a <rfalNfcDiscover+0x9e>
    gNfcDev.devCnt          = 0;
 8009f18:	23c6      	movs	r3, #198	@ 0xc6
    gNfcDev.deactType       = RFAL_NFC_DEACTIVATE_DISCOVERY;
 8009f1a:	2702      	movs	r7, #2
    gNfcDev.disc            = *disParams;
 8009f1c:	0028      	movs	r0, r5
    gNfcDev.devCnt          = 0;
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	54ec      	strb	r4, [r5, r3]
    gNfcDev.deactType       = RFAL_NFC_DEACTIVATE_DISCOVERY;
 8009f22:	4b10      	ldr	r3, [pc, #64]	@ (8009f64 <rfalNfcDiscover+0xa8>)
    gNfcDev.disc            = *disParams;
 8009f24:	22b0      	movs	r2, #176	@ 0xb0
    gNfcDev.deactType       = RFAL_NFC_DEACTIVATE_DISCOVERY;
 8009f26:	54ef      	strb	r7, [r5, r3]
    gNfcDev.isFieldOn       = false;
 8009f28:	3306      	adds	r3, #6
 8009f2a:	52ec      	strh	r4, [r5, r3]
    gNfcDev.isDeactivating  = false;
 8009f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8009f68 <rfalNfcDiscover+0xac>)
    gNfcDev.disc            = *disParams;
 8009f2e:	3010      	adds	r0, #16
    gNfcDev.isDeactivating  = false;
 8009f30:	54ec      	strb	r4, [r5, r3]
    gNfcDev.activeDev       = NULL;
 8009f32:	60ec      	str	r4, [r5, #12]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 8009f34:	806c      	strh	r4, [r5, #2]
    gNfcDev.techDctCnt      = 0;
 8009f36:	80ec      	strh	r4, [r5, #6]
    gNfcDev.disc            = *disParams;
 8009f38:	f006 f9fa 	bl	8010330 <memcpy>
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 8009f3c:	8a6b      	ldrh	r3, [r5, #18]
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 8009f3e:	21e0      	movs	r1, #224	@ 0xe0
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 8009f40:	089a      	lsrs	r2, r3, #2
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 8009f42:	b21b      	sxth	r3, r3
 8009f44:	413b      	asrs	r3, r7
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 8009f46:	0149      	lsls	r1, r1, #5
 8009f48:	400a      	ands	r2, r1
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 8009f4a:	4033      	ands	r3, r6
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	22c9      	movs	r2, #201	@ 0xc9
 8009f50:	0092      	lsls	r2, r2, #2
 8009f52:	50ab      	str	r3, [r5, r2]
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 8009f54:	702f      	strb	r7, [r5, #0]
}
 8009f56:	0020      	movs	r0, r4
 8009f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return RFAL_ERR_NOTSUPP;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
 8009f5a:	2418      	movs	r4, #24
 8009f5c:	e7fb      	b.n	8009f56 <rfalNfcDiscover+0x9a>
 8009f5e:	46c0      	nop			@ (mov r8, r8)
 8009f60:	20000fd4 	.word	0x20000fd4
 8009f64:	00000322 	.word	0x00000322
 8009f68:	0000032b 	.word	0x0000032b

08009f6c <rfalNfcDeactivate>:
{
 8009f6c:	b570      	push	{r4, r5, r6, lr}
    if( (gNfcDev.state <= RFAL_NFC_STATE_IDLE) || ((deactType == RFAL_NFC_DEACTIVATE_SLEEP) && ((gNfcDev.state < RFAL_NFC_STATE_ACTIVATED) || (gNfcDev.activeDev == NULL))) )
 8009f6e:	4c15      	ldr	r4, [pc, #84]	@ (8009fc4 <rfalNfcDeactivate+0x58>)
{
 8009f70:	0003      	movs	r3, r0
    if( (gNfcDev.state <= RFAL_NFC_STATE_IDLE) || ((deactType == RFAL_NFC_DEACTIVATE_SLEEP) && ((gNfcDev.state < RFAL_NFC_STATE_ACTIVATED) || (gNfcDev.activeDev == NULL))) )
 8009f72:	7822      	ldrb	r2, [r4, #0]
        return RFAL_ERR_WRONG_STATE;
 8009f74:	2021      	movs	r0, #33	@ 0x21
    if( (gNfcDev.state <= RFAL_NFC_STATE_IDLE) || ((deactType == RFAL_NFC_DEACTIVATE_SLEEP) && ((gNfcDev.state < RFAL_NFC_STATE_ACTIVATED) || (gNfcDev.activeDev == NULL))) )
 8009f76:	2a01      	cmp	r2, #1
 8009f78:	d90b      	bls.n	8009f92 <rfalNfcDeactivate+0x26>
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d10a      	bne.n	8009f94 <rfalNfcDeactivate+0x28>
 8009f7e:	2a1d      	cmp	r2, #29
 8009f80:	d907      	bls.n	8009f92 <rfalNfcDeactivate+0x26>
 8009f82:	68e2      	ldr	r2, [r4, #12]
 8009f84:	2a00      	cmp	r2, #0
 8009f86:	d004      	beq.n	8009f92 <rfalNfcDeactivate+0x26>
    if( ( (deactType == RFAL_NFC_DEACTIVATE_SLEEP) && rfalNfcIsRemDevPoller(gNfcDev.activeDev->type) )       || 
 8009f88:	7812      	ldrb	r2, [r2, #0]
        return RFAL_ERR_PARAM;
 8009f8a:	381a      	subs	r0, #26
    if( ( (deactType == RFAL_NFC_DEACTIVATE_SLEEP) && rfalNfcIsRemDevPoller(gNfcDev.activeDev->type) )       || 
 8009f8c:	3a0a      	subs	r2, #10
 8009f8e:	2a05      	cmp	r2, #5
 8009f90:	d806      	bhi.n	8009fa0 <rfalNfcDeactivate+0x34>
}
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
    if( ( (deactType == RFAL_NFC_DEACTIVATE_SLEEP) && rfalNfcIsRemDevPoller(gNfcDev.activeDev->type) )       || 
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d103      	bne.n	8009fa0 <rfalNfcDeactivate+0x34>
        ( (deactType == RFAL_NFC_DEACTIVATE_DISCOVERY)  && (gNfcDev.disc.techs2Find == RFAL_NFC_TECH_NONE) )    )
 8009f98:	8a62      	ldrh	r2, [r4, #18]
        return RFAL_ERR_PARAM;
 8009f9a:	2007      	movs	r0, #7
        ( (deactType == RFAL_NFC_DEACTIVATE_DISCOVERY)  && (gNfcDev.disc.techs2Find == RFAL_NFC_TECH_NONE) )    )
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	d0f8      	beq.n	8009f92 <rfalNfcDeactivate+0x26>
    gNfcDev.deactType = deactType;
 8009fa0:	4a09      	ldr	r2, [pc, #36]	@ (8009fc8 <rfalNfcDeactivate+0x5c>)
 8009fa2:	54a3      	strb	r3, [r4, r2]
    if( (deactType == RFAL_NFC_DEACTIVATE_DISCOVERY) || (deactType == RFAL_NFC_DEACTIVATE_SLEEP) )
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	2222      	movs	r2, #34	@ 0x22
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d907      	bls.n	8009fbc <rfalNfcDeactivate+0x50>
        rfalRunBlocking( ret, rfalNfcDeactivation() );
 8009fac:	f7ff fe66 	bl	8009c7c <rfalNfcDeactivation>
 8009fb0:	0005      	movs	r5, r0
 8009fb2:	f7f8 fc8d 	bl	80028d0 <rfalWorker>
 8009fb6:	2d02      	cmp	r5, #2
 8009fb8:	d0f8      	beq.n	8009fac <rfalNfcDeactivate+0x40>
 8009fba:	2201      	movs	r2, #1
    return RFAL_ERR_NONE;
 8009fbc:	2000      	movs	r0, #0
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 8009fbe:	7022      	strb	r2, [r4, #0]
 8009fc0:	e7e7      	b.n	8009f92 <rfalNfcDeactivate+0x26>
 8009fc2:	46c0      	nop			@ (mov r8, r8)
 8009fc4:	20000fd4 	.word	0x20000fd4
 8009fc8:	00000322 	.word	0x00000322

08009fcc <rfalNfcSelect>:
    if( gNfcDev.state != RFAL_NFC_STATE_POLL_SELECT )
 8009fcc:	4b06      	ldr	r3, [pc, #24]	@ (8009fe8 <rfalNfcSelect+0x1c>)
{
 8009fce:	0002      	movs	r2, r0
    if( gNfcDev.state != RFAL_NFC_STATE_POLL_SELECT )
 8009fd0:	7819      	ldrb	r1, [r3, #0]
        return RFAL_ERR_WRONG_STATE;
 8009fd2:	2021      	movs	r0, #33	@ 0x21
    if( gNfcDev.state != RFAL_NFC_STATE_POLL_SELECT )
 8009fd4:	290c      	cmp	r1, #12
 8009fd6:	d105      	bne.n	8009fe4 <rfalNfcSelect+0x18>
    gNfcDev.isTechInit = false;
 8009fd8:	2000      	movs	r0, #0
    gNfcDev.selDevIdx  = devIdx;
 8009fda:	725a      	strb	r2, [r3, #9]
    gNfcDev.state      = RFAL_NFC_STATE_POLL_ACTIVATION;
 8009fdc:	220d      	movs	r2, #13
    gNfcDev.isTechInit = false;
 8009fde:	4903      	ldr	r1, [pc, #12]	@ (8009fec <rfalNfcSelect+0x20>)
    gNfcDev.state      = RFAL_NFC_STATE_POLL_ACTIVATION;
 8009fe0:	701a      	strb	r2, [r3, #0]
    gNfcDev.isTechInit = false;
 8009fe2:	5458      	strb	r0, [r3, r1]
}
 8009fe4:	4770      	bx	lr
 8009fe6:	46c0      	nop			@ (mov r8, r8)
 8009fe8:	20000fd4 	.word	0x20000fd4
 8009fec:	00000329 	.word	0x00000329

08009ff0 <rfalNfcGetState>:
    return gNfcDev.state;
 8009ff0:	4b01      	ldr	r3, [pc, #4]	@ (8009ff8 <rfalNfcGetState+0x8>)
 8009ff2:	7818      	ldrb	r0, [r3, #0]
}
 8009ff4:	4770      	bx	lr
 8009ff6:	46c0      	nop			@ (mov r8, r8)
 8009ff8:	20000fd4 	.word	0x20000fd4

08009ffc <rfalNfcGetDevicesFound>:
    if( gNfcDev.state < RFAL_NFC_STATE_POLL_SELECT )
 8009ffc:	4a09      	ldr	r2, [pc, #36]	@ (800a024 <rfalNfcGetDevicesFound+0x28>)
{
 8009ffe:	b510      	push	{r4, lr}
    if( gNfcDev.state < RFAL_NFC_STATE_POLL_SELECT )
 800a000:	7814      	ldrb	r4, [r2, #0]
{
 800a002:	0003      	movs	r3, r0
        return RFAL_ERR_WRONG_STATE;
 800a004:	2021      	movs	r0, #33	@ 0x21
    if( gNfcDev.state < RFAL_NFC_STATE_POLL_SELECT )
 800a006:	2c0b      	cmp	r4, #11
 800a008:	d90b      	bls.n	800a022 <rfalNfcGetDevicesFound+0x26>
        return RFAL_ERR_PARAM;
 800a00a:	381a      	subs	r0, #26
    if( (devList == NULL) || (devCnt == NULL) )
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d008      	beq.n	800a022 <rfalNfcGetDevicesFound+0x26>
 800a010:	2900      	cmp	r1, #0
 800a012:	d006      	beq.n	800a022 <rfalNfcGetDevicesFound+0x26>
    *devCnt  = gNfcDev.devCnt;
 800a014:	20c6      	movs	r0, #198	@ 0xc6
 800a016:	0080      	lsls	r0, r0, #2
 800a018:	5c12      	ldrb	r2, [r2, r0]
    return RFAL_ERR_NONE;
 800a01a:	2000      	movs	r0, #0
    *devCnt  = gNfcDev.devCnt;
 800a01c:	700a      	strb	r2, [r1, #0]
    *devList = gNfcDev.devList;
 800a01e:	4a02      	ldr	r2, [pc, #8]	@ (800a028 <rfalNfcGetDevicesFound+0x2c>)
 800a020:	601a      	str	r2, [r3, #0]
}
 800a022:	bd10      	pop	{r4, pc}
 800a024:	20000fd4 	.word	0x20000fd4
 800a028:	20001094 	.word	0x20001094

0800a02c <rfalNfcGetActiveDevice>:
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 800a02c:	4a0a      	ldr	r2, [pc, #40]	@ (800a058 <rfalNfcGetActiveDevice+0x2c>)
{
 800a02e:	0003      	movs	r3, r0
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 800a030:	7811      	ldrb	r1, [r2, #0]
        return RFAL_ERR_WRONG_STATE;
 800a032:	2021      	movs	r0, #33	@ 0x21
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 800a034:	291d      	cmp	r1, #29
 800a036:	d90d      	bls.n	800a054 <rfalNfcGetActiveDevice+0x28>
        return RFAL_ERR_PARAM;
 800a038:	381a      	subs	r0, #26
    if( dev == NULL )
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00a      	beq.n	800a054 <rfalNfcGetActiveDevice+0x28>
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 800a03e:	21c6      	movs	r1, #198	@ 0xc6
 800a040:	0089      	lsls	r1, r1, #2
 800a042:	5c51      	ldrb	r1, [r2, r1]
        return RFAL_ERR_REQUEST;
 800a044:	3802      	subs	r0, #2
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 800a046:	2900      	cmp	r1, #0
 800a048:	d004      	beq.n	800a054 <rfalNfcGetActiveDevice+0x28>
 800a04a:	68d2      	ldr	r2, [r2, #12]
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	d001      	beq.n	800a054 <rfalNfcGetActiveDevice+0x28>
    return RFAL_ERR_NONE;
 800a050:	2000      	movs	r0, #0
    *dev = gNfcDev.activeDev;
 800a052:	601a      	str	r2, [r3, #0]
}
 800a054:	4770      	bx	lr
 800a056:	46c0      	nop			@ (mov r8, r8)
 800a058:	20000fd4 	.word	0x20000fd4

0800a05c <rfalNfcDataExchangeStart>:
{
 800a05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a05e:	001e      	movs	r6, r3
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 800a060:	4b60      	ldr	r3, [pc, #384]	@ (800a1e4 <rfalNfcDataExchangeStart+0x188>)
{
 800a062:	b093      	sub	sp, #76	@ 0x4c
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 800a064:	9306      	str	r3, [sp, #24]
 800a066:	781b      	ldrb	r3, [r3, #0]
{
 800a068:	000c      	movs	r4, r1
 800a06a:	0017      	movs	r7, r2
    if( (gNfcDev.state >= RFAL_NFC_STATE_ACTIVATED) && (gNfcDev.activeDev != NULL) )
 800a06c:	2b1d      	cmp	r3, #29
 800a06e:	d800      	bhi.n	800a072 <rfalNfcDataExchangeStart+0x16>
 800a070:	e0b3      	b.n	800a1da <rfalNfcDataExchangeStart+0x17e>
 800a072:	9a06      	ldr	r2, [sp, #24]
 800a074:	68d5      	ldr	r5, [r2, #12]
 800a076:	2d00      	cmp	r5, #0
 800a078:	d100      	bne.n	800a07c <rfalNfcDataExchangeStart+0x20>
 800a07a:	e0ae      	b.n	800a1da <rfalNfcDataExchangeStart+0x17e>
        if( (gNfcDev.state == RFAL_NFC_STATE_ACTIVATED) && rfalNfcIsRemDevPoller( gNfcDev.activeDev->type ) )
 800a07c:	2b1e      	cmp	r3, #30
 800a07e:	d114      	bne.n	800a0aa <rfalNfcDataExchangeStart+0x4e>
 800a080:	782b      	ldrb	r3, [r5, #0]
 800a082:	3b0a      	subs	r3, #10
 800a084:	2b05      	cmp	r3, #5
 800a086:	d810      	bhi.n	800a0aa <rfalNfcDataExchangeStart+0x4e>
            if( txDataLen > 0U )
 800a088:	2900      	cmp	r1, #0
 800a08a:	d000      	beq.n	800a08e <rfalNfcDataExchangeStart+0x32>
 800a08c:	e0a5      	b.n	800a1da <rfalNfcDataExchangeStart+0x17e>
            *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 800a08e:	4b56      	ldr	r3, [pc, #344]	@ (800a1e8 <rfalNfcDataExchangeStart+0x18c>)
 800a090:	6033      	str	r3, [r6, #0]
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.apdu : 
 800a092:	7f6a      	ldrb	r2, [r5, #29]
 800a094:	4b55      	ldr	r3, [pc, #340]	@ (800a1ec <rfalNfcDataExchangeStart+0x190>)
 800a096:	2a01      	cmp	r2, #1
 800a098:	d003      	beq.n	800a0a2 <rfalNfcDataExchangeStart+0x46>
                                  ((gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_NFCDEP) ? gNfcDev.rxBuf.nfcDepBuf.pdu  : gNfcDev.rxBuf.rfBuf));
 800a09a:	4b55      	ldr	r3, [pc, #340]	@ (800a1f0 <rfalNfcDataExchangeStart+0x194>)
 800a09c:	2a02      	cmp	r2, #2
 800a09e:	d100      	bne.n	800a0a2 <rfalNfcDataExchangeStart+0x46>
 800a0a0:	4b54      	ldr	r3, [pc, #336]	@ (800a1f4 <rfalNfcDataExchangeStart+0x198>)
            *rxData = (uint8_t*)(  (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_ISODEP) ? gNfcDev.rxBuf.isoDepBuf.apdu : 
 800a0a2:	603b      	str	r3, [r7, #0]
}
 800a0a4:	0020      	movs	r0, r4
 800a0a6:	b013      	add	sp, #76	@ 0x4c
 800a0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 800a0aa:	7f6b      	ldrb	r3, [r5, #29]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d020      	beq.n	800a0f2 <rfalNfcDataExchangeStart+0x96>
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d054      	beq.n	800a15e <rfalNfcDataExchangeStart+0x102>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d000      	beq.n	800a0ba <rfalNfcDataExchangeStart+0x5e>
 800a0b8:	e091      	b.n	800a1de <rfalNfcDataExchangeStart+0x182>
                rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)txData, txDataLen, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 800a0ba:	2281      	movs	r2, #129	@ 0x81
 800a0bc:	494c      	ldr	r1, [pc, #304]	@ (800a1f0 <rfalNfcDataExchangeStart+0x194>)
 800a0be:	9009      	str	r0, [sp, #36]	@ 0x24
 800a0c0:	0112      	lsls	r2, r2, #4
 800a0c2:	a802      	add	r0, sp, #8
 800a0c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a0c6:	8502      	strh	r2, [r0, #40]	@ 0x28
 800a0c8:	4a47      	ldr	r2, [pc, #284]	@ (800a1e8 <rfalNfcDataExchangeStart+0x18c>)
 800a0ca:	930e      	str	r3, [sp, #56]	@ 0x38
 800a0cc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800a0ce:	920d      	str	r2, [sp, #52]	@ 0x34
 800a0d0:	930f      	str	r3, [sp, #60]	@ 0x3c
                *rxData = (uint8_t*)gNfcDev.rxBuf.rfBuf;
 800a0d2:	6039      	str	r1, [r7, #0]
                ctx.txBufLen = txDataLen;    /* RF interface uses number of bits */
 800a0d4:	8404      	strh	r4, [r0, #32]
                *rvdLen = (uint16_t*)&gNfcDev.rxLen;
 800a0d6:	6032      	str	r2, [r6, #0]
                err = rfalStartTransceive( &ctx );
 800a0d8:	a809      	add	r0, sp, #36	@ 0x24
 800a0da:	f7f7 ff8b 	bl	8001ff4 <rfalStartTransceive>
                err = rfalNfcDepStartPduTransceive( rfalNfcDepTxRx );                          
 800a0de:	1e04      	subs	r4, r0, #0
        if( err == RFAL_ERR_NONE )
 800a0e0:	d1e0      	bne.n	800a0a4 <rfalNfcDataExchangeStart+0x48>
            gNfcDev.dataExErr = RFAL_ERR_BUSY;
 800a0e2:	23c8      	movs	r3, #200	@ 0xc8
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	9906      	ldr	r1, [sp, #24]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	52ca      	strh	r2, [r1, r3]
            gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800a0ec:	231f      	movs	r3, #31
 800a0ee:	700b      	strb	r3, [r1, #0]
 800a0f0:	e7d8      	b.n	800a0a4 <rfalNfcDataExchangeStart+0x48>
                if( txDataLen > sizeof(gNfcDev.txBuf.isoDepBuf.apdu) )
 800a0f2:	2380      	movs	r3, #128	@ 0x80
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	429c      	cmp	r4, r3
 800a0f8:	d901      	bls.n	800a0fe <rfalNfcDataExchangeStart+0xa2>
                    return RFAL_ERR_NOMEM;
 800a0fa:	2401      	movs	r4, #1
 800a0fc:	e7d2      	b.n	800a0a4 <rfalNfcDataExchangeStart+0x48>
                if( txDataLen > 0U )
 800a0fe:	2c00      	cmp	r4, #0
 800a100:	d005      	beq.n	800a10e <rfalNfcDataExchangeStart+0xb2>
                    RFAL_MEMCPY( (uint8_t*)gNfcDev.txBuf.isoDepBuf.apdu, txData, txDataLen );
 800a102:	4b3d      	ldr	r3, [pc, #244]	@ (800a1f8 <rfalNfcDataExchangeStart+0x19c>)
 800a104:	0001      	movs	r1, r0
 800a106:	0022      	movs	r2, r4
 800a108:	0018      	movs	r0, r3
 800a10a:	f006 f911 	bl	8010330 <memcpy>
                rfalIsoDepTxRx.DID       = RFAL_ISODEP_NO_DID;
 800a10e:	231d      	movs	r3, #29
 800a110:	a902      	add	r1, sp, #8
 800a112:	185b      	adds	r3, r3, r1
 800a114:	2100      	movs	r1, #0
 800a116:	77d9      	strb	r1, [r3, #31]
                rfalIsoDepTxRx.ourFSx    = RFAL_ISODEP_FSX_KEEP;
 800a118:	23ff      	movs	r3, #255	@ 0xff
                rfalIsoDepTxRx.DID       = RFAL_ISODEP_NO_DID;
 800a11a:	aa09      	add	r2, sp, #36	@ 0x24
                rfalIsoDepTxRx.ourFSx    = RFAL_ISODEP_FSX_KEEP;
 800a11c:	83d3      	strh	r3, [r2, #30]
                rfalIsoDepTxRx.FSx       = gNfcDev.activeDev->proto.isoDep.info.FSx;
 800a11e:	002b      	movs	r3, r5
 800a120:	3362      	adds	r3, #98	@ 0x62
 800a122:	881b      	ldrh	r3, [r3, #0]
                rfalIsoDepTxRx.txBuf     = &gNfcDev.txBuf.isoDepBuf;
 800a124:	4835      	ldr	r0, [pc, #212]	@ (800a1fc <rfalNfcDataExchangeStart+0x1a0>)
                rfalIsoDepTxRx.FSx       = gNfcDev.activeDev->proto.isoDep.info.FSx;
 800a126:	8393      	strh	r3, [r2, #28]
                rfalIsoDepTxRx.dFWT      = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 800a128:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
                rfalIsoDepTxRx.tmpBuf    = &gNfcDev.tmpBuf.isoDepBuf;
 800a12a:	4935      	ldr	r1, [pc, #212]	@ (800a200 <rfalNfcDataExchangeStart+0x1a4>)
                rfalIsoDepTxRx.dFWT      = gNfcDev.activeDev->proto.isoDep.info.dFWT;
 800a12c:	930f      	str	r3, [sp, #60]	@ 0x3c
                rfalIsoDepTxRx.FWT       = gNfcDev.activeDev->proto.isoDep.info.FWT;
 800a12e:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
                rfalIsoDepTxRx.txBuf     = &gNfcDev.txBuf.isoDepBuf;
 800a130:	9009      	str	r0, [sp, #36]	@ 0x24
                rfalIsoDepTxRx.FWT       = gNfcDev.activeDev->proto.isoDep.info.FWT;
 800a132:	930e      	str	r3, [sp, #56]	@ 0x38
                rfalIsoDepTxRx.txBufLen  = txDataLen;
 800a134:	8094      	strh	r4, [r2, #4]
                err = rfalIsoDepStartApduTransceive( rfalIsoDepTxRx );
 800a136:	466c      	mov	r4, sp
                rfalIsoDepTxRx.rxBuf     = &gNfcDev.rxBuf.isoDepBuf;
 800a138:	4b2d      	ldr	r3, [pc, #180]	@ (800a1f0 <rfalNfcDataExchangeStart+0x194>)
                rfalIsoDepTxRx.tmpBuf    = &gNfcDev.tmpBuf.isoDepBuf;
 800a13a:	910d      	str	r1, [sp, #52]	@ 0x34
                rfalIsoDepTxRx.rxBuf     = &gNfcDev.rxBuf.isoDepBuf;
 800a13c:	469c      	mov	ip, r3
 800a13e:	930b      	str	r3, [sp, #44]	@ 0x2c
                *rxData                  = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.apdu;
 800a140:	492a      	ldr	r1, [pc, #168]	@ (800a1ec <rfalNfcDataExchangeStart+0x190>)
                rfalIsoDepTxRx.rxLen     = &gNfcDev.rxLen;
 800a142:	4b29      	ldr	r3, [pc, #164]	@ (800a1e8 <rfalNfcDataExchangeStart+0x18c>)
                *rxData                  = (uint8_t*)gNfcDev.rxBuf.isoDepBuf.apdu;
 800a144:	6039      	str	r1, [r7, #0]
                rfalIsoDepTxRx.rxLen     = &gNfcDev.rxLen;
 800a146:	930c      	str	r3, [sp, #48]	@ 0x30
                *rvdLen                  = (uint16_t*)&gNfcDev.rxLen;
 800a148:	6033      	str	r3, [r6, #0]
                err = rfalIsoDepStartApduTransceive( rfalIsoDepTxRx );
 800a14a:	a90d      	add	r1, sp, #52	@ 0x34
 800a14c:	c9e0      	ldmia	r1!, {r5, r6, r7}
 800a14e:	c4e0      	stmia	r4!, {r5, r6, r7}
 800a150:	c960      	ldmia	r1!, {r5, r6}
 800a152:	c460      	stmia	r4!, {r5, r6}
 800a154:	4662      	mov	r2, ip
 800a156:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a158:	f7ff fc74 	bl	8009a44 <rfalIsoDepStartApduTransceive>
 800a15c:	e7bf      	b.n	800a0de <rfalNfcDataExchangeStart+0x82>
                if( txDataLen > sizeof(gNfcDev.txBuf.nfcDepBuf.pdu) )
 800a15e:	2380      	movs	r3, #128	@ 0x80
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	429c      	cmp	r4, r3
 800a164:	d8c9      	bhi.n	800a0fa <rfalNfcDataExchangeStart+0x9e>
                if( txDataLen > 0U)
 800a166:	2c00      	cmp	r4, #0
 800a168:	d005      	beq.n	800a176 <rfalNfcDataExchangeStart+0x11a>
                    RFAL_MEMCPY( (uint8_t*)gNfcDev.txBuf.nfcDepBuf.pdu, txData, txDataLen );
 800a16a:	4b26      	ldr	r3, [pc, #152]	@ (800a204 <rfalNfcDataExchangeStart+0x1a8>)
 800a16c:	0001      	movs	r1, r0
 800a16e:	0022      	movs	r2, r4
 800a170:	0018      	movs	r0, r3
 800a172:	f006 f8dd 	bl	8010330 <memcpy>
                rfalNfcDepTxRx.DID       = RFAL_NFCDEP_DID_KEEP;
 800a176:	23ff      	movs	r3, #255	@ 0xff
 800a178:	a909      	add	r1, sp, #36	@ 0x24
 800a17a:	778b      	strb	r3, [r1, #30]
                rfalNfcDepTxRx.FSx       = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 800a17c:	782b      	ldrb	r3, [r5, #0]
 800a17e:	2203      	movs	r2, #3
 800a180:	2b05      	cmp	r3, #5
 800a182:	d827      	bhi.n	800a1d4 <rfalNfcDataExchangeStart+0x178>
                                           rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Target.ATR_RES.PPt ) ) :
 800a184:	002b      	movs	r3, r5
 800a186:	3330      	adds	r3, #48	@ 0x30
                                           rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Initiator.ATR_REQ.PPi ) );
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	091b      	lsrs	r3, r3, #4
 800a18c:	4013      	ands	r3, r2
 800a18e:	3301      	adds	r3, #1
                rfalNfcDepTxRx.FSx       = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 800a190:	22fe      	movs	r2, #254	@ 0xfe
                                           rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Initiator.ATR_REQ.PPi ) );
 800a192:	019b      	lsls	r3, r3, #6
                rfalNfcDepTxRx.FSx       = rfalNfcIsRemDevListener(gNfcDev.activeDev->type) ?
 800a194:	2bfd      	cmp	r3, #253	@ 0xfd
 800a196:	d800      	bhi.n	800a19a <rfalNfcDataExchangeStart+0x13e>
 800a198:	b29a      	uxth	r2, r3
 800a19a:	838a      	strh	r2, [r1, #28]
                err = rfalNfcDepStartPduTransceive( rfalNfcDepTxRx );                          
 800a19c:	466a      	mov	r2, sp
                rfalNfcDepTxRx.dFWT      = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 800a19e:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
                rfalNfcDepTxRx.txBuf     = &gNfcDev.txBuf.nfcDepBuf;
 800a1a0:	4816      	ldr	r0, [pc, #88]	@ (800a1fc <rfalNfcDataExchangeStart+0x1a0>)
                rfalNfcDepTxRx.dFWT      = gNfcDev.activeDev->proto.nfcDep.info.dFWT;
 800a1a2:	618b      	str	r3, [r1, #24]
                rfalNfcDepTxRx.FWT       = gNfcDev.activeDev->proto.nfcDep.info.FWT;
 800a1a4:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800a1a6:	614b      	str	r3, [r1, #20]
                rfalNfcDepTxRx.txBuf     = &gNfcDev.txBuf.nfcDepBuf;
 800a1a8:	9009      	str	r0, [sp, #36]	@ 0x24
                rfalNfcDepTxRx.rxBuf     = &gNfcDev.rxBuf.nfcDepBuf;
 800a1aa:	4b11      	ldr	r3, [pc, #68]	@ (800a1f0 <rfalNfcDataExchangeStart+0x194>)
                rfalNfcDepTxRx.txBufLen  = txDataLen;
 800a1ac:	808c      	strh	r4, [r1, #4]
                rfalNfcDepTxRx.tmpBuf    = &gNfcDev.tmpBuf.nfcDepBuf;
 800a1ae:	4c14      	ldr	r4, [pc, #80]	@ (800a200 <rfalNfcDataExchangeStart+0x1a4>)
                rfalNfcDepTxRx.rxBuf     = &gNfcDev.rxBuf.nfcDepBuf;
 800a1b0:	9307      	str	r3, [sp, #28]
 800a1b2:	608b      	str	r3, [r1, #8]
                rfalNfcDepTxRx.tmpBuf    = &gNfcDev.tmpBuf.nfcDepBuf;
 800a1b4:	610c      	str	r4, [r1, #16]
                rfalNfcDepTxRx.rxLen     = &gNfcDev.rxLen;
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e8 <rfalNfcDataExchangeStart+0x18c>)
                *rxData                  = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.pdu;
 800a1b8:	4c0e      	ldr	r4, [pc, #56]	@ (800a1f4 <rfalNfcDataExchangeStart+0x198>)
                rfalNfcDepTxRx.rxLen     = &gNfcDev.rxLen;
 800a1ba:	60cb      	str	r3, [r1, #12]
                *rxData                  = (uint8_t*)gNfcDev.rxBuf.nfcDepBuf.pdu;
 800a1bc:	603c      	str	r4, [r7, #0]
                *rvdLen                  = (uint16_t*)&gNfcDev.rxLen;
 800a1be:	6033      	str	r3, [r6, #0]
                err = rfalNfcDepStartPduTransceive( rfalNfcDepTxRx );                          
 800a1c0:	ac0d      	add	r4, sp, #52	@ 0x34
 800a1c2:	cce0      	ldmia	r4!, {r5, r6, r7}
 800a1c4:	c2e0      	stmia	r2!, {r5, r6, r7}
 800a1c6:	6824      	ldr	r4, [r4, #0]
 800a1c8:	6014      	str	r4, [r2, #0]
 800a1ca:	6849      	ldr	r1, [r1, #4]
 800a1cc:	9a07      	ldr	r2, [sp, #28]
 800a1ce:	f002 f951 	bl	800c474 <rfalNfcDepStartPduTransceive>
 800a1d2:	e784      	b.n	800a0de <rfalNfcDataExchangeStart+0x82>
                                           rfalNfcDepLR2FS( (uint8_t)rfalNfcDepPP2LR( gNfcDev.activeDev->proto.nfcDep.activation.Initiator.ATR_REQ.PPi ) );
 800a1d4:	002b      	movs	r3, r5
 800a1d6:	332f      	adds	r3, #47	@ 0x2f
 800a1d8:	e7d6      	b.n	800a188 <rfalNfcDataExchangeStart+0x12c>
                return RFAL_ERR_WRONG_STATE;
 800a1da:	2421      	movs	r4, #33	@ 0x21
 800a1dc:	e762      	b.n	800a0a4 <rfalNfcDataExchangeStart+0x48>
        switch( gNfcDev.activeDev->rfInterface )                                      /* Check which RF interface shall be used/has been activated */
 800a1de:	2407      	movs	r4, #7
 800a1e0:	e760      	b.n	800a0a4 <rfalNfcDataExchangeStart+0x48>
 800a1e2:	46c0      	nop			@ (mov r8, r8)
 800a1e4:	20000fd4 	.word	0x20000fd4
 800a1e8:	2000171a 	.word	0x2000171a
 800a1ec:	20001518 	.word	0x20001518
 800a1f0:	20001515 	.word	0x20001515
 800a1f4:	2000151a 	.word	0x2000151a
 800a1f8:	20001313 	.word	0x20001313
 800a1fc:	20001310 	.word	0x20001310
 800a200:	2000171c 	.word	0x2000171c
 800a204:	20001315 	.word	0x20001315

0800a208 <rfalNfcDataExchangeGetStatus>:
{
 800a208:	b570      	push	{r4, r5, r6, lr}
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 800a20a:	4c24      	ldr	r4, [pc, #144]	@ (800a29c <rfalNfcDataExchangeGetStatus+0x94>)
 800a20c:	7823      	ldrb	r3, [r4, #0]
 800a20e:	2b1e      	cmp	r3, #30
 800a210:	d10d      	bne.n	800a22e <rfalNfcDataExchangeGetStatus+0x26>
        gNfcDev.dataExErr = RFAL_ERR_BUSY;
 800a212:	23c8      	movs	r3, #200	@ 0xc8
 800a214:	2202      	movs	r2, #2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	52e2      	strh	r2, [r4, r3]
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 800a21a:	321d      	adds	r2, #29
 800a21c:	7022      	strb	r2, [r4, #0]
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 800a21e:	68e2      	ldr	r2, [r4, #12]
 800a220:	7811      	ldrb	r1, [r2, #0]
 800a222:	290c      	cmp	r1, #12
 800a224:	d103      	bne.n	800a22e <rfalNfcDataExchangeGetStatus+0x26>
 800a226:	7f52      	ldrb	r2, [r2, #29]
 800a228:	2a00      	cmp	r2, #0
 800a22a:	d100      	bne.n	800a22e <rfalNfcDataExchangeGetStatus+0x26>
            gNfcDev.dataExErr = RFAL_ERR_NONE;
 800a22c:	52e2      	strh	r2, [r4, r3]
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 800a22e:	7823      	ldrb	r3, [r4, #0]
 800a230:	2b17      	cmp	r3, #23
 800a232:	d103      	bne.n	800a23c <rfalNfcDataExchangeGetStatus+0x34>
    return gNfcDev.dataExErr;
 800a234:	23c8      	movs	r3, #200	@ 0xc8
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	5ae0      	ldrh	r0, [r4, r3]
 800a23a:	e023      	b.n	800a284 <rfalNfcDataExchangeGetStatus+0x7c>
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE) )
 800a23c:	22fd      	movs	r2, #253	@ 0xfd
 800a23e:	3b1f      	subs	r3, #31
        return RFAL_ERR_WRONG_STATE;
 800a240:	2021      	movs	r0, #33	@ 0x21
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE) )
 800a242:	4213      	tst	r3, r2
 800a244:	d11e      	bne.n	800a284 <rfalNfcDataExchangeGetStatus+0x7c>
    if( gNfcDev.dataExErr == RFAL_ERR_BUSY )
 800a246:	22c8      	movs	r2, #200	@ 0xc8
 800a248:	0092      	lsls	r2, r2, #2
 800a24a:	5aa3      	ldrh	r3, [r4, r2]
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d1f1      	bne.n	800a234 <rfalNfcDataExchangeGetStatus+0x2c>
        switch( gNfcDev.activeDev->rfInterface )
 800a250:	68e3      	ldr	r3, [r4, #12]
 800a252:	7f5b      	ldrb	r3, [r3, #29]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d016      	beq.n	800a286 <rfalNfcDataExchangeGetStatus+0x7e>
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d017      	beq.n	800a28c <rfalNfcDataExchangeGetStatus+0x84>
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d118      	bne.n	800a292 <rfalNfcDataExchangeGetStatus+0x8a>
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 800a260:	f7f7 ffae 	bl	80021c0 <rfalGetTransceiveStatus>
 800a264:	26c8      	movs	r6, #200	@ 0xc8
 800a266:	00b6      	lsls	r6, r6, #2
                gNfcDev.dataExErr = rfalNfcDepGetPduTransceiveStatus();
 800a268:	0005      	movs	r5, r0
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 800a26a:	53a0      	strh	r0, [r4, r6]
        if( gNfcDev.dataExErr == RFAL_ERR_SLEEP_REQ )
 800a26c:	2820      	cmp	r0, #32
 800a26e:	d1e1      	bne.n	800a234 <rfalNfcDataExchangeGetStatus+0x2c>
            RFAL_EXIT_ON_ERR( gNfcDev.dataExErr, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 800a270:	2281      	movs	r2, #129	@ 0x81
 800a272:	200c      	movs	r0, #12
 800a274:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a0 <rfalNfcDataExchangeGetStatus+0x98>)
 800a276:	490b      	ldr	r1, [pc, #44]	@ (800a2a4 <rfalNfcDataExchangeGetStatus+0x9c>)
 800a278:	0052      	lsls	r2, r2, #1
 800a27a:	f7f8 f8c5 	bl	8002408 <rfalListenSleepStart>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d00a      	beq.n	800a298 <rfalNfcDataExchangeGetStatus+0x90>
 800a282:	53a0      	strh	r0, [r4, r6]
}
 800a284:	bd70      	pop	{r4, r5, r6, pc}
                gNfcDev.dataExErr = rfalIsoDepGetApduTransceiveStatus();
 800a286:	f7ff fc4f 	bl	8009b28 <rfalIsoDepGetApduTransceiveStatus>
 800a28a:	e7eb      	b.n	800a264 <rfalNfcDataExchangeGetStatus+0x5c>
                gNfcDev.dataExErr = rfalNfcDepGetPduTransceiveStatus();
 800a28c:	f002 f942 	bl	800c514 <rfalNfcDepGetPduTransceiveStatus>
 800a290:	e7e8      	b.n	800a264 <rfalNfcDataExchangeGetStatus+0x5c>
                gNfcDev.dataExErr = RFAL_ERR_PARAM;
 800a292:	2307      	movs	r3, #7
 800a294:	52a3      	strh	r3, [r4, r2]
        if( gNfcDev.dataExErr == RFAL_ERR_SLEEP_REQ )
 800a296:	e7cd      	b.n	800a234 <rfalNfcDataExchangeGetStatus+0x2c>
            gNfcDev.dataExErr = RFAL_ERR_SLEEP_REQ;
 800a298:	53a5      	strh	r5, [r4, r6]
 800a29a:	e7cb      	b.n	800a234 <rfalNfcDataExchangeGetStatus+0x2c>
 800a29c:	20000fd4 	.word	0x20000fd4
 800a2a0:	2000171a 	.word	0x2000171a
 800a2a4:	20001515 	.word	0x20001515

0800a2a8 <rfalNfcWorker>:
{
 800a2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2aa:	b09d      	sub	sp, #116	@ 0x74
    rfalWorker();                                                                     /* Execute RFAL process  */
 800a2ac:	f7f8 fb10 	bl	80028d0 <rfalWorker>
    switch( gNfcDev.state )
 800a2b0:	4ca6      	ldr	r4, [pc, #664]	@ (800a54c <rfalNfcWorker+0x2a4>)
 800a2b2:	7820      	ldrb	r0, [r4, #0]
 800a2b4:	3802      	subs	r0, #2
 800a2b6:	2820      	cmp	r0, #32
 800a2b8:	d900      	bls.n	800a2bc <rfalNfcWorker+0x14>
 800a2ba:	e0bc      	b.n	800a436 <rfalNfcWorker+0x18e>
 800a2bc:	f7f5 ff4a 	bl	8000154 <__gnu_thumb1_case_uhi>
 800a2c0:	00590021 	.word	0x00590021
 800a2c4:	00bb00bb 	.word	0x00bb00bb
 800a2c8:	00bb00bb 	.word	0x00bb00bb
 800a2cc:	00bb00bb 	.word	0x00bb00bb
 800a2d0:	021e006a 	.word	0x021e006a
 800a2d4:	043000bb 	.word	0x043000bb
 800a2d8:	00bb00bb 	.word	0x00bb00bb
 800a2dc:	00bb00bb 	.word	0x00bb00bb
 800a2e0:	00bb00bb 	.word	0x00bb00bb
 800a2e4:	0672064a 	.word	0x0672064a
 800a2e8:	06870687 	.word	0x06870687
 800a2ec:	00bb00bb 	.word	0x00bb00bb
 800a2f0:	00bb00bb 	.word	0x00bb00bb
 800a2f4:	00bb00bb 	.word	0x00bb00bb
 800a2f8:	060a00bb 	.word	0x060a00bb
 800a2fc:	00bb00bb 	.word	0x00bb00bb
 800a300:	063a      	.short	0x063a
            gNfcDev.devCnt         = 0;
 800a302:	22c6      	movs	r2, #198	@ 0xc6
 800a304:	2300      	movs	r3, #0
 800a306:	0092      	lsls	r2, r2, #2
 800a308:	54a3      	strb	r3, [r4, r2]
            gNfcDev.techs2do       = gNfcDev.disc.techs2Find;
 800a30a:	8a62      	ldrh	r2, [r4, #18]
            gNfcDev.selDevIdx      = 0;
 800a30c:	7263      	strb	r3, [r4, #9]
            gNfcDev.techs2do       = gNfcDev.disc.techs2Find;
 800a30e:	80a2      	strh	r2, [r4, #4]
            gNfcDev.state          = RFAL_NFC_STATE_POLL_TECHDETECT;
 800a310:	220a      	movs	r2, #10
 800a312:	7022      	strb	r2, [r4, #0]
            gNfcDev.isDeactivating = false;
 800a314:	4a8e      	ldr	r2, [pc, #568]	@ (800a550 <rfalNfcWorker+0x2a8>)
            gNfcDev.techsFound     = RFAL_NFC_TECH_NONE;
 800a316:	8063      	strh	r3, [r4, #2]
            gNfcDev.isDeactivating = false;
 800a318:	54a3      	strb	r3, [r4, r2]
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 800a31a:	8ae0      	ldrh	r0, [r4, #22]
 800a31c:	f7fa fac6 	bl	80048ac <timerCalculateTimer>
 800a320:	23c7      	movs	r3, #199	@ 0xc7
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	50e0      	str	r0, [r4, r3]
            if( (gNfcDev.disc.wakeupEnabled) && ((gNfcDev.techDctCnt == 0U) || (gNfcDev.techDctCnt >= gNfcDev.disc.wakeupNPolls)) )
 800a326:	0023      	movs	r3, r4
 800a328:	339c      	adds	r3, #156	@ 0x9c
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d015      	beq.n	800a35c <rfalNfcWorker+0xb4>
 800a330:	88e3      	ldrh	r3, [r4, #6]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d004      	beq.n	800a340 <rfalNfcWorker+0x98>
 800a336:	0022      	movs	r2, r4
 800a338:	32be      	adds	r2, #190	@ 0xbe
 800a33a:	8812      	ldrh	r2, [r2, #0]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d80d      	bhi.n	800a35c <rfalNfcWorker+0xb4>
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 800a340:	0023      	movs	r3, r4
 800a342:	339d      	adds	r3, #157	@ 0x9d
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	4883      	ldr	r0, [pc, #524]	@ (800a554 <rfalNfcWorker+0x2ac>)
 800a348:	425a      	negs	r2, r3
 800a34a:	4153      	adcs	r3, r2
 800a34c:	425b      	negs	r3, r3
 800a34e:	4018      	ands	r0, r3
 800a350:	f7f9 fb6c 	bl	8003a2c <rfalWakeUpModeStart>
                if( err == RFAL_ERR_NONE )
 800a354:	2800      	cmp	r0, #0
 800a356:	d101      	bne.n	800a35c <rfalNfcWorker+0xb4>
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 800a358:	2303      	movs	r3, #3
 800a35a:	7023      	strb	r3, [r4, #0]
            gNfcDev.techDctCnt++;
 800a35c:	88e3      	ldrh	r3, [r4, #6]
 800a35e:	3301      	adds	r3, #1
 800a360:	80e3      	strh	r3, [r4, #6]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 800a362:	0023      	movs	r3, r4
 800a364:	3398      	adds	r3, #152	@ 0x98
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d064      	beq.n	800a436 <rfalNfcWorker+0x18e>
 800a36c:	7820      	ldrb	r0, [r4, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller             */
 800a36e:	4798      	blx	r3
 800a370:	e061      	b.n	800a436 <rfalNfcWorker+0x18e>
            if( rfalWakeUpModeHasWoke() )
 800a372:	f7f9 fcdb 	bl	8003d2c <rfalWakeUpModeHasWoke>
 800a376:	2800      	cmp	r0, #0
 800a378:	d05d      	beq.n	800a436 <rfalNfcWorker+0x18e>
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 800a37a:	f7f9 fce1 	bl	8003d40 <rfalWakeUpModeStop>
                gNfcDev.state      = RFAL_NFC_STATE_POLL_TECHDETECT;                  /* Go to Technology detection     */
 800a37e:	230a      	movs	r3, #10
                gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 800a380:	8ae0      	ldrh	r0, [r4, #22]
                gNfcDev.state      = RFAL_NFC_STATE_POLL_TECHDETECT;                  /* Go to Technology detection     */
 800a382:	7023      	strb	r3, [r4, #0]
                gNfcDev.techDctCnt = 1;                                               /* Tech Detect counter (1 woke)   */
 800a384:	3b09      	subs	r3, #9
 800a386:	80e3      	strh	r3, [r4, #6]
                gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 800a388:	f7fa fa90 	bl	80048ac <timerCalculateTimer>
 800a38c:	23c7      	movs	r3, #199	@ 0xc7
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	50e0      	str	r0, [r4, r3]
 800a392:	e7e6      	b.n	800a362 <rfalNfcWorker+0xba>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 800a394:	2210      	movs	r2, #16
 800a396:	8a63      	ldrh	r3, [r4, #18]
 800a398:	4213      	tst	r3, r2
 800a39a:	d04e      	beq.n	800a43a <rfalNfcWorker+0x192>
 800a39c:	88a1      	ldrh	r1, [r4, #4]
 800a39e:	4211      	tst	r1, r2
 800a3a0:	d04b      	beq.n	800a43a <rfalNfcWorker+0x192>
        if( !gNfcDev.isTechInit )
 800a3a2:	4d6d      	ldr	r5, [pc, #436]	@ (800a558 <rfalNfcWorker+0x2b0>)
 800a3a4:	5d63      	ldrb	r3, [r4, r5]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d11b      	bne.n	800a3e2 <rfalNfcWorker+0x13a>
            RFAL_EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 800a3aa:	0023      	movs	r3, r4
 800a3ac:	3356      	adds	r3, #86	@ 0x56
 800a3ae:	7819      	ldrb	r1, [r3, #0]
 800a3b0:	2009      	movs	r0, #9
 800a3b2:	000a      	movs	r2, r1
 800a3b4:	f7f7 fc5e 	bl	8001c74 <rfalSetMode>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d000      	beq.n	800a3be <rfalNfcWorker+0x116>
 800a3bc:	e19b      	b.n	800a6f6 <rfalNfcWorker+0x44e>
            rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 800a3be:	f7f7 fd63 	bl	8001e88 <rfalSetErrorHandling>
            rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 800a3c2:	2040      	movs	r0, #64	@ 0x40
 800a3c4:	f7f7 fd88 	bl	8001ed8 <rfalSetFDTListen>
            rfalSetFDTPoll( RFAL_FDT_POLL_AP2P_POLLER );
 800a3c8:	4864      	ldr	r0, [pc, #400]	@ (800a55c <rfalNfcWorker+0x2b4>)
 800a3ca:	f7f7 fd73 	bl	8001eb4 <rfalSetFDTPoll>
            rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 800a3ce:	4864      	ldr	r0, [pc, #400]	@ (800a560 <rfalNfcWorker+0x2b8>)
 800a3d0:	f7f7 fd8c 	bl	8001eec <rfalSetGT>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                /* Turns the Field On and starts GT timer */
 800a3d4:	f7f7 fda2 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d000      	beq.n	800a3de <rfalNfcWorker+0x136>
 800a3dc:	e18b      	b.n	800a6f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit = true;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	5563      	strb	r3, [r4, r5]
        if( rfalIsGTExpired() )                                                              /* Wait until Guard Time is fulfilled */
 800a3e2:	f7f7 fd8f 	bl	8001f04 <rfalIsGTExpired>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d025      	beq.n	800a436 <rfalNfcWorker+0x18e>
            gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 800a3ea:	2610      	movs	r6, #16
 800a3ec:	88a3      	ldrh	r3, [r4, #4]
            err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 800a3ee:	4f5d      	ldr	r7, [pc, #372]	@ (800a564 <rfalNfcWorker+0x2bc>)
            gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 800a3f0:	43b3      	bics	r3, r6
 800a3f2:	80a3      	strh	r3, [r4, #4]
            err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	001a      	movs	r2, r3
 800a3fa:	0038      	movs	r0, r7
 800a3fc:	f7ff fcbc 	bl	8009d78 <rfalNfcNfcDepActivate>
            if( err == RFAL_ERR_NONE )
 800a400:	2800      	cmp	r0, #0
 800a402:	d114      	bne.n	800a42e <rfalNfcWorker+0x186>
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 800a404:	8863      	ldrh	r3, [r4, #2]
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 800a406:	2202      	movs	r2, #2
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 800a408:	431e      	orrs	r6, r3
                gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 800a40a:	2305      	movs	r3, #5
 800a40c:	703b      	strb	r3, [r7, #0]
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 800a40e:	0023      	movs	r3, r4
 800a410:	33dd      	adds	r3, #221	@ 0xdd
 800a412:	701a      	strb	r2, [r3, #0]
                gNfcDev.devCnt++;
 800a414:	22c6      	movs	r2, #198	@ 0xc6
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 800a416:	8066      	strh	r6, [r4, #2]
                gNfcDev.devCnt++;
 800a418:	0092      	lsls	r2, r2, #2
 800a41a:	5ca3      	ldrb	r3, [r4, r2]
 800a41c:	3301      	adds	r3, #1
 800a41e:	54a3      	strb	r3, [r4, r2]
                if( ( err != RFAL_ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 800a420:	8863      	ldrh	r3, [r4, #2]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d100      	bne.n	800a428 <rfalNfcWorker+0x180>
 800a426:	e140      	b.n	800a6aa <rfalNfcWorker+0x402>
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 800a428:	80a3      	strh	r3, [r4, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 800a42a:	230b      	movs	r3, #11
 800a42c:	e144      	b.n	800a6b8 <rfalNfcWorker+0x410>
            gNfcDev.isTechInit = false;
 800a42e:	2300      	movs	r3, #0
 800a430:	5563      	strb	r3, [r4, r5]
            rfalFieldOff();
 800a432:	f7f7 fdcb 	bl	8001fcc <rfalFieldOff>
}
 800a436:	b01d      	add	sp, #116	@ 0x74
 800a438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( (!gNfcDev.isFieldOn) && ( (gNfcDev.disc.techs2Find & (RFAL_NFC_POLL_TECH_A | RFAL_NFC_POLL_TECH_B | RFAL_NFC_POLL_TECH_F | RFAL_NFC_POLL_TECH_V | RFAL_NFC_POLL_TECH_ST25TB | RFAL_NFC_POLL_TECH_PROP)) != 0U) )
 800a43a:	25ca      	movs	r5, #202	@ 0xca
 800a43c:	00ad      	lsls	r5, r5, #2
 800a43e:	5d62      	ldrb	r2, [r4, r5]
 800a440:	2a00      	cmp	r2, #0
 800a442:	d10a      	bne.n	800a45a <rfalNfcWorker+0x1b2>
 800a444:	326f      	adds	r2, #111	@ 0x6f
 800a446:	4213      	tst	r3, r2
 800a448:	d0ea      	beq.n	800a420 <rfalNfcWorker+0x178>
        RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* Turns the Field On  */
 800a44a:	f7f7 fd67 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d000      	beq.n	800a454 <rfalNfcWorker+0x1ac>
 800a452:	e150      	b.n	800a6f6 <rfalNfcWorker+0x44e>
        gNfcDev.isFieldOn = true;
 800a454:	2301      	movs	r3, #1
 800a456:	5563      	strb	r3, [r4, r5]
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800a458:	e7ed      	b.n	800a436 <rfalNfcWorker+0x18e>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 800a45a:	2601      	movs	r6, #1
 800a45c:	4233      	tst	r3, r6
 800a45e:	d039      	beq.n	800a4d4 <rfalNfcWorker+0x22c>
 800a460:	88a2      	ldrh	r2, [r4, #4]
 800a462:	4232      	tst	r2, r6
 800a464:	d036      	beq.n	800a4d4 <rfalNfcWorker+0x22c>
        if( !gNfcDev.isTechInit )
 800a466:	4d3c      	ldr	r5, [pc, #240]	@ (800a558 <rfalNfcWorker+0x2b0>)
 800a468:	5d63      	ldrb	r3, [r4, r5]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10c      	bne.n	800a488 <rfalNfcWorker+0x1e0>
            RFAL_EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                       /* Initialize RFAL for NFC-A */
 800a46e:	f002 f915 	bl	800c69c <rfalNfcaPollerInitialize>
 800a472:	2800      	cmp	r0, #0
 800a474:	d000      	beq.n	800a478 <rfalNfcWorker+0x1d0>
 800a476:	e13e      	b.n	800a6f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                          /* As field is already On only starts GT timer */
 800a478:	f7f7 fd50 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d000      	beq.n	800a482 <rfalNfcWorker+0x1da>
 800a480:	e139      	b.n	800a6f6 <rfalNfcWorker+0x44e>
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800a482:	4a39      	ldr	r2, [pc, #228]	@ (800a568 <rfalNfcWorker+0x2c0>)
            gNfcDev.isTechInit    = true;
 800a484:	5566      	strb	r6, [r4, r5]
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800a486:	54a0      	strb	r0, [r4, r2]
        if( rfalIsGTExpired() )                                                        /* Wait until Guard Time is fulfilled */
 800a488:	f7f7 fd3c 	bl	8001f04 <rfalIsGTExpired>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d0d2      	beq.n	800a436 <rfalNfcWorker+0x18e>
            if( !gNfcDev.isOperOngoing )
 800a490:	4e35      	ldr	r6, [pc, #212]	@ (800a568 <rfalNfcWorker+0x2c0>)
 800a492:	5da3      	ldrb	r3, [r4, r6]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d106      	bne.n	800a4a6 <rfalNfcWorker+0x1fe>
                rfalNfcaPollerStartTechnologyDetection( gNfcDev.disc.compMode, &gNfcDev.sensRes );/* Poll for NFC-A devices */
 800a498:	4934      	ldr	r1, [pc, #208]	@ (800a56c <rfalNfcWorker+0x2c4>)
 800a49a:	7c20      	ldrb	r0, [r4, #16]
 800a49c:	f002 fbea 	bl	800cc74 <rfalNfcaPollerStartTechnologyDetection>
                gNfcDev.isOperOngoing = true;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	55a3      	strb	r3, [r4, r6]
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800a4a4:	e7c7      	b.n	800a436 <rfalNfcWorker+0x18e>
            err = rfalNfcaPollerGetTechnologyDetectionStatus();
 800a4a6:	f002 fc05 	bl	800ccb4 <rfalNfcaPollerGetTechnologyDetectionStatus>
            if( err != RFAL_ERR_BUSY )
 800a4aa:	2802      	cmp	r0, #2
 800a4ac:	d00b      	beq.n	800a4c6 <rfalNfcWorker+0x21e>
                if( err == RFAL_ERR_NONE )
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d103      	bne.n	800a4ba <rfalNfcWorker+0x212>
                    gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	8862      	ldrh	r2, [r4, #2]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	8063      	strh	r3, [r4, #2]
                gNfcDev.isTechInit = false;
 800a4ba:	2300      	movs	r3, #0
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 800a4bc:	2201      	movs	r2, #1
                gNfcDev.isTechInit = false;
 800a4be:	5563      	strb	r3, [r4, r5]
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 800a4c0:	88a3      	ldrh	r3, [r4, #4]
 800a4c2:	4393      	bics	r3, r2
 800a4c4:	80a3      	strh	r3, [r4, #4]
            if( ((gNfcDev.disc.techs2Bail & RFAL_NFC_POLL_TECH_A) != 0U) && (gNfcDev.techsFound != 0U) )
 800a4c6:	8aa3      	ldrh	r3, [r4, #20]
 800a4c8:	07db      	lsls	r3, r3, #31
 800a4ca:	d5b4      	bpl.n	800a436 <rfalNfcWorker+0x18e>
            if( ((gNfcDev.disc.techs2Bail & RFAL_NFC_POLL_TECH_F) != 0U) && (gNfcDev.techsFound != 0U) )
 800a4cc:	8863      	ldrh	r3, [r4, #2]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1a6      	bne.n	800a420 <rfalNfcWorker+0x178>
 800a4d2:	e7b0      	b.n	800a436 <rfalNfcWorker+0x18e>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	4213      	tst	r3, r2
 800a4d8:	d04e      	beq.n	800a578 <rfalNfcWorker+0x2d0>
 800a4da:	88a1      	ldrh	r1, [r4, #4]
 800a4dc:	4211      	tst	r1, r2
 800a4de:	d04b      	beq.n	800a578 <rfalNfcWorker+0x2d0>
        if( !gNfcDev.isTechInit )
 800a4e0:	4d1d      	ldr	r5, [pc, #116]	@ (800a558 <rfalNfcWorker+0x2b0>)
 800a4e2:	5d63      	ldrb	r3, [r4, r5]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10d      	bne.n	800a504 <rfalNfcWorker+0x25c>
            RFAL_EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                      /* Initialize RFAL for NFC-B */
 800a4e8:	f002 fca4 	bl	800ce34 <rfalNfcbPollerInitialize>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d000      	beq.n	800a4f2 <rfalNfcWorker+0x24a>
 800a4f0:	e101      	b.n	800a6f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* As field is already On only starts GT timer */
 800a4f2:	f7f7 fd13 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d000      	beq.n	800a4fc <rfalNfcWorker+0x254>
 800a4fa:	e0fc      	b.n	800a6f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit    = true;
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	5562      	strb	r2, [r4, r5]
            gNfcDev.isOperOngoing = false;                                            /* No operation currently ongoing  */
 800a500:	4a19      	ldr	r2, [pc, #100]	@ (800a568 <rfalNfcWorker+0x2c0>)
 800a502:	54a0      	strb	r0, [r4, r2]
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 800a504:	f7f7 fcfe 	bl	8001f04 <rfalIsGTExpired>
 800a508:	2800      	cmp	r0, #0
 800a50a:	d100      	bne.n	800a50e <rfalNfcWorker+0x266>
 800a50c:	e793      	b.n	800a436 <rfalNfcWorker+0x18e>
            if( !gNfcDev.isOperOngoing )
 800a50e:	4e16      	ldr	r6, [pc, #88]	@ (800a568 <rfalNfcWorker+0x2c0>)
 800a510:	5da3      	ldrb	r3, [r4, r6]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d105      	bne.n	800a522 <rfalNfcWorker+0x27a>
                rfalNfcbPollerStartTechnologyDetection( gNfcDev.disc.compMode, &gNfcDev.sensbRes, &gNfcDev.sensbResLen );/* Poll for NFC-B devices */
 800a516:	4a16      	ldr	r2, [pc, #88]	@ (800a570 <rfalNfcWorker+0x2c8>)
 800a518:	4916      	ldr	r1, [pc, #88]	@ (800a574 <rfalNfcWorker+0x2cc>)
 800a51a:	7c20      	ldrb	r0, [r4, #16]
 800a51c:	f002 fd6a 	bl	800cff4 <rfalNfcbPollerStartTechnologyDetection>
 800a520:	e7be      	b.n	800a4a0 <rfalNfcWorker+0x1f8>
            err = rfalNfcbPollerGetTechnologyDetectionStatus();
 800a522:	f002 fd72 	bl	800d00a <rfalNfcbPollerGetTechnologyDetectionStatus>
            if( err != RFAL_ERR_BUSY )
 800a526:	2802      	cmp	r0, #2
 800a528:	d00b      	beq.n	800a542 <rfalNfcWorker+0x29a>
                if( err == RFAL_ERR_NONE )
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d103      	bne.n	800a536 <rfalNfcWorker+0x28e>
                    gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 800a52e:	2302      	movs	r3, #2
 800a530:	8862      	ldrh	r2, [r4, #2]
 800a532:	4313      	orrs	r3, r2
 800a534:	8063      	strh	r3, [r4, #2]
                gNfcDev.isTechInit = false;
 800a536:	2300      	movs	r3, #0
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 800a538:	2202      	movs	r2, #2
                gNfcDev.isTechInit = false;
 800a53a:	5563      	strb	r3, [r4, r5]
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 800a53c:	88a3      	ldrh	r3, [r4, #4]
 800a53e:	4393      	bics	r3, r2
 800a540:	80a3      	strh	r3, [r4, #4]
            if( ((gNfcDev.disc.techs2Bail & RFAL_NFC_POLL_TECH_B) != 0U) && (gNfcDev.techsFound != 0U) )
 800a542:	8aa3      	ldrh	r3, [r4, #20]
 800a544:	079b      	lsls	r3, r3, #30
 800a546:	d4c1      	bmi.n	800a4cc <rfalNfcWorker+0x224>
 800a548:	e775      	b.n	800a436 <rfalNfcWorker+0x18e>
 800a54a:	46c0      	nop			@ (mov r8, r8)
 800a54c:	20000fd4 	.word	0x20000fd4
 800a550:	0000032b 	.word	0x0000032b
 800a554:	20001072 	.word	0x20001072
 800a558:	00000329 	.word	0x00000329
 800a55c:	00001a90 	.word	0x00001a90
 800a560:	00063510 	.word	0x00063510
 800a564:	20001094 	.word	0x20001094
 800a568:	0000032a 	.word	0x0000032a
 800a56c:	20001300 	.word	0x20001300
 800a570:	2000130f 	.word	0x2000130f
 800a574:	20001302 	.word	0x20001302
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 800a578:	2204      	movs	r2, #4
 800a57a:	4213      	tst	r3, r2
 800a57c:	d036      	beq.n	800a5ec <rfalNfcWorker+0x344>
 800a57e:	88a1      	ldrh	r1, [r4, #4]
 800a580:	4211      	tst	r1, r2
 800a582:	d033      	beq.n	800a5ec <rfalNfcWorker+0x344>
        if( !gNfcDev.isTechInit )
 800a584:	4dbd      	ldr	r5, [pc, #756]	@ (800a87c <rfalNfcWorker+0x5d4>)
 800a586:	5d63      	ldrb	r3, [r4, r5]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10e      	bne.n	800a5aa <rfalNfcWorker+0x302>
            RFAL_EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );/* Initialize RFAL for NFC-F */
 800a58c:	7ea0      	ldrb	r0, [r4, #26]
 800a58e:	f002 fee5 	bl	800d35c <rfalNfcfPollerInitialize>
 800a592:	2800      	cmp	r0, #0
 800a594:	d000      	beq.n	800a598 <rfalNfcWorker+0x2f0>
 800a596:	e0ae      	b.n	800a6f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                        /* As field is already On only starts GT timer */
 800a598:	f7f7 fcc0 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d000      	beq.n	800a5a2 <rfalNfcWorker+0x2fa>
 800a5a0:	e0a9      	b.n	800a6f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit    = true;
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	5562      	strb	r2, [r4, r5]
            gNfcDev.isOperOngoing = false;                                           /* No operation currently ongoing  */
 800a5a6:	4ab6      	ldr	r2, [pc, #728]	@ (800a880 <rfalNfcWorker+0x5d8>)
 800a5a8:	54a0      	strb	r0, [r4, r2]
        if( rfalIsGTExpired() )                                                      /* Wait until Guard Time is fulfilled */
 800a5aa:	f7f7 fcab 	bl	8001f04 <rfalIsGTExpired>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d100      	bne.n	800a5b4 <rfalNfcWorker+0x30c>
 800a5b2:	e740      	b.n	800a436 <rfalNfcWorker+0x18e>
            if( !gNfcDev.isOperOngoing )
 800a5b4:	4eb2      	ldr	r6, [pc, #712]	@ (800a880 <rfalNfcWorker+0x5d8>)
 800a5b6:	5da3      	ldrb	r3, [r4, r6]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d102      	bne.n	800a5c2 <rfalNfcWorker+0x31a>
                rfalNfcfPollerStartCheckPresence();
 800a5bc:	f002 feec 	bl	800d398 <rfalNfcfPollerStartCheckPresence>
                gNfcDev.isOperOngoing = true;
 800a5c0:	e76e      	b.n	800a4a0 <rfalNfcWorker+0x1f8>
            err = rfalNfcfPollerGetCheckPresenceStatus();                            /* Poll for NFC-F devices */
 800a5c2:	f002 ff01 	bl	800d3c8 <rfalNfcfPollerGetCheckPresenceStatus>
            if( err != RFAL_ERR_BUSY )
 800a5c6:	2802      	cmp	r0, #2
 800a5c8:	d00b      	beq.n	800a5e2 <rfalNfcWorker+0x33a>
                if( err == RFAL_ERR_NONE )
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d103      	bne.n	800a5d6 <rfalNfcWorker+0x32e>
                    gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 800a5ce:	2304      	movs	r3, #4
 800a5d0:	8862      	ldrh	r2, [r4, #2]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	8063      	strh	r3, [r4, #2]
                gNfcDev.isTechInit = false;
 800a5d6:	2300      	movs	r3, #0
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 800a5d8:	2204      	movs	r2, #4
                gNfcDev.isTechInit = false;
 800a5da:	5563      	strb	r3, [r4, r5]
                gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 800a5dc:	88a3      	ldrh	r3, [r4, #4]
 800a5de:	4393      	bics	r3, r2
 800a5e0:	80a3      	strh	r3, [r4, #4]
            if( ((gNfcDev.disc.techs2Bail & RFAL_NFC_POLL_TECH_F) != 0U) && (gNfcDev.techsFound != 0U) )
 800a5e2:	8aa3      	ldrh	r3, [r4, #20]
 800a5e4:	075b      	lsls	r3, r3, #29
 800a5e6:	d500      	bpl.n	800a5ea <rfalNfcWorker+0x342>
 800a5e8:	e770      	b.n	800a4cc <rfalNfcWorker+0x224>
 800a5ea:	e724      	b.n	800a436 <rfalNfcWorker+0x18e>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	4213      	tst	r3, r2
 800a5f0:	d025      	beq.n	800a63e <rfalNfcWorker+0x396>
 800a5f2:	88a1      	ldrh	r1, [r4, #4]
 800a5f4:	4211      	tst	r1, r2
 800a5f6:	d022      	beq.n	800a63e <rfalNfcWorker+0x396>
        if( !gNfcDev.isTechInit )
 800a5f8:	4da0      	ldr	r5, [pc, #640]	@ (800a87c <rfalNfcWorker+0x5d4>)
 800a5fa:	5d63      	ldrb	r3, [r4, r5]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d109      	bne.n	800a614 <rfalNfcWorker+0x36c>
            RFAL_EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                      /* Initialize RFAL for NFC-V */
 800a600:	f002 fff0 	bl	800d5e4 <rfalNfcvPollerInitialize>
 800a604:	2800      	cmp	r0, #0
 800a606:	d176      	bne.n	800a6f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* As field is already On only starts GT timer */
 800a608:	f7f7 fc88 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d172      	bne.n	800a6f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit = true;
 800a610:	2301      	movs	r3, #1
 800a612:	5563      	strb	r3, [r4, r5]
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 800a614:	f7f7 fc76 	bl	8001f04 <rfalIsGTExpired>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d100      	bne.n	800a61e <rfalNfcWorker+0x376>
 800a61c:	e70b      	b.n	800a436 <rfalNfcWorker+0x18e>
            err = rfalNfcvPollerCheckPresence( &invRes );                             /* Poll for NFC-V devices */
 800a61e:	a80b      	add	r0, sp, #44	@ 0x2c
 800a620:	f003 f83e 	bl	800d6a0 <rfalNfcvPollerCheckPresence>
            if( err == RFAL_ERR_NONE )
 800a624:	2800      	cmp	r0, #0
 800a626:	d103      	bne.n	800a630 <rfalNfcWorker+0x388>
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 800a628:	2308      	movs	r3, #8
 800a62a:	8862      	ldrh	r2, [r4, #2]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	8063      	strh	r3, [r4, #2]
            gNfcDev.isTechInit = false;
 800a630:	2300      	movs	r3, #0
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 800a632:	2208      	movs	r2, #8
            gNfcDev.isTechInit = false;
 800a634:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 800a636:	88a3      	ldrh	r3, [r4, #4]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800a638:	4393      	bics	r3, r2
 800a63a:	80a3      	strh	r3, [r4, #4]
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800a63c:	e6fb      	b.n	800a436 <rfalNfcWorker+0x18e>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 800a63e:	2220      	movs	r2, #32
 800a640:	4213      	tst	r3, r2
 800a642:	d023      	beq.n	800a68c <rfalNfcWorker+0x3e4>
 800a644:	88a1      	ldrh	r1, [r4, #4]
 800a646:	4211      	tst	r1, r2
 800a648:	d020      	beq.n	800a68c <rfalNfcWorker+0x3e4>
        if( !gNfcDev.isTechInit )
 800a64a:	4d8c      	ldr	r5, [pc, #560]	@ (800a87c <rfalNfcWorker+0x5d4>)
 800a64c:	5d63      	ldrb	r3, [r4, r5]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d109      	bne.n	800a666 <rfalNfcWorker+0x3be>
            RFAL_EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                    /* Initialize RFAL for NFC-V */
 800a652:	f003 f9cd 	bl	800d9f0 <rfalSt25tbPollerInitialize>
 800a656:	2800      	cmp	r0, #0
 800a658:	d14d      	bne.n	800a6f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* As field is already On only starts GT timer */
 800a65a:	f7f7 fc5f 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d149      	bne.n	800a6f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit = true;
 800a662:	2301      	movs	r3, #1
 800a664:	5563      	strb	r3, [r4, r5]
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 800a666:	f7f7 fc4d 	bl	8001f04 <rfalIsGTExpired>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d100      	bne.n	800a670 <rfalNfcWorker+0x3c8>
 800a66e:	e6e2      	b.n	800a436 <rfalNfcWorker+0x18e>
            err = rfalSt25tbPollerCheckPresence( NULL );                              /* Poll for ST25TB devices */
 800a670:	2000      	movs	r0, #0
 800a672:	f003 f9e3 	bl	800da3c <rfalSt25tbPollerCheckPresence>
            if( err == RFAL_ERR_NONE )
 800a676:	2800      	cmp	r0, #0
 800a678:	d103      	bne.n	800a682 <rfalNfcWorker+0x3da>
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 800a67a:	2320      	movs	r3, #32
 800a67c:	8862      	ldrh	r2, [r4, #2]
 800a67e:	4313      	orrs	r3, r2
 800a680:	8063      	strh	r3, [r4, #2]
            gNfcDev.isTechInit = false;
 800a682:	2300      	movs	r3, #0
 800a684:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800a686:	2220      	movs	r2, #32
 800a688:	88a3      	ldrh	r3, [r4, #4]
 800a68a:	e7d5      	b.n	800a638 <rfalNfcWorker+0x390>
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_PROP) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_PROP) != 0U) )
 800a68c:	2240      	movs	r2, #64	@ 0x40
 800a68e:	4213      	tst	r3, r2
 800a690:	d100      	bne.n	800a694 <rfalNfcWorker+0x3ec>
 800a692:	e6c5      	b.n	800a420 <rfalNfcWorker+0x178>
 800a694:	88a3      	ldrh	r3, [r4, #4]
 800a696:	4213      	tst	r3, r2
 800a698:	d100      	bne.n	800a69c <rfalNfcWorker+0x3f4>
 800a69a:	e6c1      	b.n	800a420 <rfalNfcWorker+0x178>
        if( !gNfcDev.isTechInit )
 800a69c:	4d77      	ldr	r5, [pc, #476]	@ (800a87c <rfalNfcWorker+0x5d4>)
 800a69e:	5d63      	ldrb	r3, [r4, r5]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d114      	bne.n	800a6ce <rfalNfcWorker+0x426>
            RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerInitialize() );                    /* Initialize RFAL for Proprietary NFC */
 800a6a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d108      	bne.n	800a6bc <rfalNfcWorker+0x414>
                    rfalFieldOff();
 800a6aa:	f7f7 fc8f 	bl	8001fcc <rfalFieldOff>
                    gNfcDev.isFieldOn = false;
 800a6ae:	23ca      	movs	r3, #202	@ 0xca
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	54e2      	strb	r2, [r4, r3]
                    gNfcDev.state     = RFAL_NFC_STATE_LISTEN_TECHDETECT;             /* Nothing found as poller, go to listener */
 800a6b6:	2314      	movs	r3, #20
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 800a6b8:	7023      	strb	r3, [r4, #0]
 800a6ba:	e6bc      	b.n	800a436 <rfalNfcWorker+0x18e>
            RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerInitialize() );                    /* Initialize RFAL for Proprietary NFC */
 800a6bc:	4798      	blx	r3
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d119      	bne.n	800a6f6 <rfalNfcWorker+0x44e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* As field may already be On only starts GT timer */
 800a6c2:	f7f7 fc2b 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d115      	bne.n	800a6f6 <rfalNfcWorker+0x44e>
            gNfcDev.isTechInit = true;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	5563      	strb	r3, [r4, r5]
        if( rfalIsGTExpired() )                                                       /* Wait until Guard Time is fulfilled */
 800a6ce:	f7f7 fc19 	bl	8001f04 <rfalIsGTExpired>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d100      	bne.n	800a6d8 <rfalNfcWorker+0x430>
 800a6d6:	e6ae      	b.n	800a436 <rfalNfcWorker+0x18e>
            err = rfalNfcpCbPollerTechnologyDetection();                              /* Poll for devices */
 800a6d8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d006      	beq.n	800a6ec <rfalNfcWorker+0x444>
 800a6de:	4798      	blx	r3
            if( err == RFAL_ERR_NONE )
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d103      	bne.n	800a6ec <rfalNfcWorker+0x444>
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_PROP;
 800a6e4:	2340      	movs	r3, #64	@ 0x40
 800a6e6:	8862      	ldrh	r2, [r4, #2]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	8063      	strh	r3, [r4, #2]
            gNfcDev.isTechInit = false;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_PROP;
 800a6f0:	2240      	movs	r2, #64	@ 0x40
 800a6f2:	88a3      	ldrh	r3, [r4, #4]
 800a6f4:	e7a0      	b.n	800a638 <rfalNfcWorker+0x390>
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800a6f6:	2802      	cmp	r0, #2
 800a6f8:	d1d7      	bne.n	800a6aa <rfalNfcWorker+0x402>
 800a6fa:	e69c      	b.n	800a436 <rfalNfcWorker+0x18e>
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 800a6fc:	23c6      	movs	r3, #198	@ 0xc6
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	5ce2      	ldrb	r2, [r4, r3]
 800a702:	7e23      	ldrb	r3, [r4, #24]
 800a704:	4293      	cmp	r3, r2
 800a706:	d800      	bhi.n	800a70a <rfalNfcWorker+0x462>
 800a708:	e1f9      	b.n	800aafe <rfalNfcWorker+0x856>
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 800a70a:	2601      	movs	r6, #1
 800a70c:	8863      	ldrh	r3, [r4, #2]
 800a70e:	4233      	tst	r3, r6
 800a710:	d05c      	beq.n	800a7cc <rfalNfcWorker+0x524>
 800a712:	88a1      	ldrh	r1, [r4, #4]
 800a714:	4231      	tst	r1, r6
 800a716:	d059      	beq.n	800a7cc <rfalNfcWorker+0x524>
        if( !gNfcDev.isTechInit )
 800a718:	4d58      	ldr	r5, [pc, #352]	@ (800a87c <rfalNfcWorker+0x5d4>)
 800a71a:	5d63      	ldrb	r3, [r4, r5]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10c      	bne.n	800a73a <rfalNfcWorker+0x492>
            RFAL_EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                       /* Initialize RFAL for NFC-A */
 800a720:	f001 ffbc 	bl	800c69c <rfalNfcaPollerInitialize>
 800a724:	2800      	cmp	r0, #0
 800a726:	d000      	beq.n	800a72a <rfalNfcWorker+0x482>
 800a728:	e1e5      	b.n	800aaf6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                          /* Turns the Field On and starts GT timer */
 800a72a:	f7f7 fbf7 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d000      	beq.n	800a734 <rfalNfcWorker+0x48c>
 800a732:	e1e0      	b.n	800aaf6 <rfalNfcWorker+0x84e>
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800a734:	4a52      	ldr	r2, [pc, #328]	@ (800a880 <rfalNfcWorker+0x5d8>)
            gNfcDev.isTechInit    = true;                                              /* Technology has been initialized */
 800a736:	5566      	strb	r6, [r4, r5]
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800a738:	54a0      	strb	r0, [r4, r2]
        if( !rfalIsGTExpired() )
 800a73a:	f7f7 fbe3 	bl	8001f04 <rfalIsGTExpired>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d100      	bne.n	800a744 <rfalNfcWorker+0x49c>
 800a742:	e678      	b.n	800a436 <rfalNfcWorker+0x18e>
        if( !gNfcDev.isOperOngoing )
 800a744:	4b4e      	ldr	r3, [pc, #312]	@ (800a880 <rfalNfcWorker+0x5d8>)
 800a746:	5ce3      	ldrb	r3, [r4, r3]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d111      	bne.n	800a770 <rfalNfcWorker+0x4c8>
            RFAL_EXIT_ON_ERR( err, rfalNfcaPollerStartFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt ) );
 800a74c:	20c6      	movs	r0, #198	@ 0xc6
 800a74e:	0080      	lsls	r0, r0, #2
 800a750:	5c20      	ldrb	r0, [r4, r0]
 800a752:	7e21      	ldrb	r1, [r4, #24]
 800a754:	4b4b      	ldr	r3, [pc, #300]	@ (800a884 <rfalNfcWorker+0x5dc>)
 800a756:	1a09      	subs	r1, r1, r0
 800a758:	4a4b      	ldr	r2, [pc, #300]	@ (800a888 <rfalNfcWorker+0x5e0>)
 800a75a:	7c20      	ldrb	r0, [r4, #16]
 800a75c:	b2c9      	uxtb	r1, r1
 800a75e:	f002 f963 	bl	800ca28 <rfalNfcaPollerStartFullCollisionResolution>
 800a762:	2800      	cmp	r0, #0
 800a764:	d000      	beq.n	800a768 <rfalNfcWorker+0x4c0>
 800a766:	e1c6      	b.n	800aaf6 <rfalNfcWorker+0x84e>
            gNfcDev.isOperOngoing = true;
 800a768:	2201      	movs	r2, #1
 800a76a:	4b45      	ldr	r3, [pc, #276]	@ (800a880 <rfalNfcWorker+0x5d8>)
                    gNfcDev.isOperOngoing = false;
 800a76c:	54e2      	strb	r2, [r4, r3]
            if( err != RFAL_ERR_BUSY )                                                     /* Wait until all Activation is complete */
 800a76e:	e662      	b.n	800a436 <rfalNfcWorker+0x18e>
        err = rfalNfcaPollerGetFullCollisionResolutionStatus();
 800a770:	f002 fab2 	bl	800ccd8 <rfalNfcaPollerGetFullCollisionResolutionStatus>
        if( err != RFAL_ERR_BUSY )
 800a774:	2802      	cmp	r0, #2
 800a776:	d100      	bne.n	800a77a <rfalNfcWorker+0x4d2>
 800a778:	e65d      	b.n	800a436 <rfalNfcWorker+0x18e>
            gNfcDev.isTechInit = false;
 800a77a:	2300      	movs	r3, #0
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 800a77c:	2201      	movs	r2, #1
            gNfcDev.isTechInit = false;
 800a77e:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_A;
 800a780:	88a3      	ldrh	r3, [r4, #4]
 800a782:	4393      	bics	r3, r2
 800a784:	80a3      	strh	r3, [r4, #4]
            if( (err == RFAL_ERR_NONE) && (devCnt != 0U) )
 800a786:	2800      	cmp	r0, #0
 800a788:	d000      	beq.n	800a78c <rfalNfcWorker+0x4e4>
 800a78a:	e654      	b.n	800a436 <rfalNfcWorker+0x18e>
 800a78c:	4b3d      	ldr	r3, [pc, #244]	@ (800a884 <rfalNfcWorker+0x5dc>)
 800a78e:	781d      	ldrb	r5, [r3, #0]
 800a790:	2d00      	cmp	r5, #0
 800a792:	d100      	bne.n	800a796 <rfalNfcWorker+0x4ee>
 800a794:	e64f      	b.n	800a436 <rfalNfcWorker+0x18e>
 800a796:	23c6      	movs	r3, #198	@ 0xc6
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	5ce6      	ldrb	r6, [r4, r3]
 800a79c:	4f3a      	ldr	r7, [pc, #232]	@ (800a888 <rfalNfcWorker+0x5e0>)
 800a79e:	19ad      	adds	r5, r5, r6
 800a7a0:	b2ed      	uxtb	r5, r5
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 800a7a2:	2078      	movs	r0, #120	@ 0x78
 800a7a4:	4370      	muls	r0, r6
 800a7a6:	1820      	adds	r0, r4, r0
 800a7a8:	0003      	movs	r3, r0
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	33c0      	adds	r3, #192	@ 0xc0
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 800a7ae:	3601      	adds	r6, #1
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 800a7b0:	0039      	movs	r1, r7
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 800a7b2:	701a      	strb	r2, [r3, #0]
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 800a7b4:	30c1      	adds	r0, #193	@ 0xc1
 800a7b6:	3216      	adds	r2, #22
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 800a7b8:	b2f6      	uxtb	r6, r6
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 800a7ba:	f005 fdb9 	bl	8010330 <memcpy>
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 800a7be:	3716      	adds	r7, #22
 800a7c0:	42ae      	cmp	r6, r5
 800a7c2:	d1ee      	bne.n	800a7a2 <rfalNfcWorker+0x4fa>
 800a7c4:	23c6      	movs	r3, #198	@ 0xc6
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	54e5      	strb	r5, [r4, r3]
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800a7ca:	e634      	b.n	800a436 <rfalNfcWorker+0x18e>
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 800a7cc:	2102      	movs	r1, #2
 800a7ce:	420b      	tst	r3, r1
 800a7d0:	d05e      	beq.n	800a890 <rfalNfcWorker+0x5e8>
 800a7d2:	88a0      	ldrh	r0, [r4, #4]
 800a7d4:	4208      	tst	r0, r1
 800a7d6:	d05b      	beq.n	800a890 <rfalNfcWorker+0x5e8>
        if( !gNfcDev.isTechInit )
 800a7d8:	4d28      	ldr	r5, [pc, #160]	@ (800a87c <rfalNfcWorker+0x5d4>)
 800a7da:	5d63      	ldrb	r3, [r4, r5]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10d      	bne.n	800a7fc <rfalNfcWorker+0x554>
            RFAL_EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                        /* Initialize RFAL for NFC-B */
 800a7e0:	f002 fb28 	bl	800ce34 <rfalNfcbPollerInitialize>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d000      	beq.n	800a7ea <rfalNfcWorker+0x542>
 800a7e8:	e185      	b.n	800aaf6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                          /* Ensure GT again as other technologies have also been polled */
 800a7ea:	f7f7 fb97 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d000      	beq.n	800a7f4 <rfalNfcWorker+0x54c>
 800a7f2:	e180      	b.n	800aaf6 <rfalNfcWorker+0x84e>
            gNfcDev.isTechInit    = true;
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	5562      	strb	r2, [r4, r5]
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800a7f8:	4a21      	ldr	r2, [pc, #132]	@ (800a880 <rfalNfcWorker+0x5d8>)
 800a7fa:	54a0      	strb	r0, [r4, r2]
        if( !rfalIsGTExpired() )
 800a7fc:	f7f7 fb82 	bl	8001f04 <rfalIsGTExpired>
 800a800:	2800      	cmp	r0, #0
 800a802:	d100      	bne.n	800a806 <rfalNfcWorker+0x55e>
 800a804:	e617      	b.n	800a436 <rfalNfcWorker+0x18e>
        if( !gNfcDev.isOperOngoing )
 800a806:	4b1e      	ldr	r3, [pc, #120]	@ (800a880 <rfalNfcWorker+0x5d8>)
 800a808:	5ce3      	ldrb	r3, [r4, r3]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10b      	bne.n	800a826 <rfalNfcWorker+0x57e>
            RFAL_EXIT_ON_ERR( err, rfalNfcbPollerStartCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt ) );
 800a80e:	20c6      	movs	r0, #198	@ 0xc6
 800a810:	0080      	lsls	r0, r0, #2
 800a812:	5c20      	ldrb	r0, [r4, r0]
 800a814:	7e21      	ldrb	r1, [r4, #24]
 800a816:	4b1b      	ldr	r3, [pc, #108]	@ (800a884 <rfalNfcWorker+0x5dc>)
 800a818:	1a09      	subs	r1, r1, r0
 800a81a:	4a1c      	ldr	r2, [pc, #112]	@ (800a88c <rfalNfcWorker+0x5e4>)
 800a81c:	7c20      	ldrb	r0, [r4, #16]
 800a81e:	b2c9      	uxtb	r1, r1
 800a820:	f002 fc20 	bl	800d064 <rfalNfcbPollerStartCollisionResolution>
 800a824:	e79d      	b.n	800a762 <rfalNfcWorker+0x4ba>
        err = rfalNfcbPollerGetCollisionResolutionStatus();
 800a826:	f002 fc2b 	bl	800d080 <rfalNfcbPollerGetCollisionResolutionStatus>
        if( err != RFAL_ERR_BUSY )
 800a82a:	2802      	cmp	r0, #2
 800a82c:	d100      	bne.n	800a830 <rfalNfcWorker+0x588>
 800a82e:	e602      	b.n	800a436 <rfalNfcWorker+0x18e>
            gNfcDev.isTechInit = false;
 800a830:	2300      	movs	r3, #0
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 800a832:	2202      	movs	r2, #2
            gNfcDev.isTechInit = false;
 800a834:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_B;
 800a836:	88a3      	ldrh	r3, [r4, #4]
 800a838:	4393      	bics	r3, r2
 800a83a:	80a3      	strh	r3, [r4, #4]
            if( (err == RFAL_ERR_NONE) && (devCnt != 0U) )
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d000      	beq.n	800a842 <rfalNfcWorker+0x59a>
 800a840:	e5f9      	b.n	800a436 <rfalNfcWorker+0x18e>
 800a842:	4b10      	ldr	r3, [pc, #64]	@ (800a884 <rfalNfcWorker+0x5dc>)
 800a844:	781d      	ldrb	r5, [r3, #0]
 800a846:	2d00      	cmp	r5, #0
 800a848:	d100      	bne.n	800a84c <rfalNfcWorker+0x5a4>
 800a84a:	e5f4      	b.n	800a436 <rfalNfcWorker+0x18e>
 800a84c:	23c6      	movs	r3, #198	@ 0xc6
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	5ce6      	ldrb	r6, [r4, r3]
 800a852:	4f0e      	ldr	r7, [pc, #56]	@ (800a88c <rfalNfcWorker+0x5e4>)
 800a854:	19ad      	adds	r5, r5, r6
 800a856:	b2ed      	uxtb	r5, r5
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 800a858:	2078      	movs	r0, #120	@ 0x78
 800a85a:	4370      	muls	r0, r6
 800a85c:	1820      	adds	r0, r4, r0
 800a85e:	0003      	movs	r3, r0
 800a860:	2201      	movs	r2, #1
 800a862:	33c0      	adds	r3, #192	@ 0xc0
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 800a864:	3601      	adds	r6, #1
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 800a866:	0039      	movs	r1, r7
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 800a868:	701a      	strb	r2, [r3, #0]
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 800a86a:	30c1      	adds	r0, #193	@ 0xc1
 800a86c:	320e      	adds	r2, #14
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 800a86e:	b2f6      	uxtb	r6, r6
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 800a870:	f005 fd5e 	bl	8010330 <memcpy>
                for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 800a874:	370f      	adds	r7, #15
 800a876:	42ae      	cmp	r6, r5
 800a878:	d1ee      	bne.n	800a858 <rfalNfcWorker+0x5b0>
 800a87a:	e7a3      	b.n	800a7c4 <rfalNfcWorker+0x51c>
 800a87c:	00000329 	.word	0x00000329
 800a880:	0000032a 	.word	0x0000032a
 800a884:	20000f63 	.word	0x20000f63
 800a888:	20000f64 	.word	0x20000f64
 800a88c:	20000f18 	.word	0x20000f18
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 800a890:	2104      	movs	r1, #4
 800a892:	420b      	tst	r3, r1
 800a894:	d055      	beq.n	800a942 <rfalNfcWorker+0x69a>
 800a896:	88a0      	ldrh	r0, [r4, #4]
 800a898:	4208      	tst	r0, r1
 800a89a:	d052      	beq.n	800a942 <rfalNfcWorker+0x69a>
        if( !gNfcDev.isTechInit )
 800a89c:	4dc1      	ldr	r5, [pc, #772]	@ (800aba4 <rfalNfcWorker+0x8fc>)
 800a89e:	5d63      	ldrb	r3, [r4, r5]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10e      	bne.n	800a8c2 <rfalNfcWorker+0x61a>
            RFAL_EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));   /* Initialize RFAL for NFC-F */
 800a8a4:	7ea0      	ldrb	r0, [r4, #26]
 800a8a6:	f002 fd59 	bl	800d35c <rfalNfcfPollerInitialize>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d000      	beq.n	800a8b0 <rfalNfcWorker+0x608>
 800a8ae:	e122      	b.n	800aaf6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                          /* Ensure GT again as other technologies have also been polled */
 800a8b0:	f7f7 fb34 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d000      	beq.n	800a8ba <rfalNfcWorker+0x612>
 800a8b8:	e11d      	b.n	800aaf6 <rfalNfcWorker+0x84e>
            gNfcDev.isTechInit    = true;
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	5562      	strb	r2, [r4, r5]
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800a8be:	4aba      	ldr	r2, [pc, #744]	@ (800aba8 <rfalNfcWorker+0x900>)
 800a8c0:	54a0      	strb	r0, [r4, r2]
        if( !rfalIsGTExpired() )
 800a8c2:	f7f7 fb1f 	bl	8001f04 <rfalIsGTExpired>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d100      	bne.n	800a8cc <rfalNfcWorker+0x624>
 800a8ca:	e5b4      	b.n	800a436 <rfalNfcWorker+0x18e>
        if( !gNfcDev.isOperOngoing )
 800a8cc:	4bb6      	ldr	r3, [pc, #728]	@ (800aba8 <rfalNfcWorker+0x900>)
 800a8ce:	5ce3      	ldrb	r3, [r4, r3]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d10b      	bne.n	800a8ec <rfalNfcWorker+0x644>
            RFAL_EXIT_ON_ERR( err, rfalNfcfPollerStartCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt ) );
 800a8d4:	20c6      	movs	r0, #198	@ 0xc6
 800a8d6:	0080      	lsls	r0, r0, #2
 800a8d8:	5c20      	ldrb	r0, [r4, r0]
 800a8da:	7e21      	ldrb	r1, [r4, #24]
 800a8dc:	4bb3      	ldr	r3, [pc, #716]	@ (800abac <rfalNfcWorker+0x904>)
 800a8de:	1a09      	subs	r1, r1, r0
 800a8e0:	4ab3      	ldr	r2, [pc, #716]	@ (800abb0 <rfalNfcWorker+0x908>)
 800a8e2:	7c20      	ldrb	r0, [r4, #16]
 800a8e4:	b2c9      	uxtb	r1, r1
 800a8e6:	f002 fd73 	bl	800d3d0 <rfalNfcfPollerStartCollisionResolution>
 800a8ea:	e73a      	b.n	800a762 <rfalNfcWorker+0x4ba>
        err = rfalNfcfPollerGetCollisionResolutionStatus();
 800a8ec:	f002 fd96 	bl	800d41c <rfalNfcfPollerGetCollisionResolutionStatus>
        if( err != RFAL_ERR_BUSY )
 800a8f0:	2802      	cmp	r0, #2
 800a8f2:	d100      	bne.n	800a8f6 <rfalNfcWorker+0x64e>
 800a8f4:	e59f      	b.n	800a436 <rfalNfcWorker+0x18e>
            gNfcDev.isTechInit = false;
 800a8f6:	2300      	movs	r3, #0
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 800a8f8:	2204      	movs	r2, #4
            gNfcDev.isTechInit = false;
 800a8fa:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_F;
 800a8fc:	88a3      	ldrh	r3, [r4, #4]
 800a8fe:	4393      	bics	r3, r2
 800a900:	80a3      	strh	r3, [r4, #4]
            if( (err == RFAL_ERR_NONE) && (devCnt != 0U) )
 800a902:	2800      	cmp	r0, #0
 800a904:	d000      	beq.n	800a908 <rfalNfcWorker+0x660>
 800a906:	e596      	b.n	800a436 <rfalNfcWorker+0x18e>
 800a908:	4ba8      	ldr	r3, [pc, #672]	@ (800abac <rfalNfcWorker+0x904>)
 800a90a:	781d      	ldrb	r5, [r3, #0]
 800a90c:	2d00      	cmp	r5, #0
 800a90e:	d100      	bne.n	800a912 <rfalNfcWorker+0x66a>
 800a910:	e591      	b.n	800a436 <rfalNfcWorker+0x18e>
 800a912:	23c6      	movs	r3, #198	@ 0xc6
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	5ce6      	ldrb	r6, [r4, r3]
 800a918:	4fa5      	ldr	r7, [pc, #660]	@ (800abb0 <rfalNfcWorker+0x908>)
 800a91a:	19ad      	adds	r5, r5, r6
 800a91c:	b2ed      	uxtb	r5, r5
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 800a91e:	2078      	movs	r0, #120	@ 0x78
 800a920:	4370      	muls	r0, r6
 800a922:	1820      	adds	r0, r4, r0
 800a924:	0003      	movs	r3, r0
 800a926:	2202      	movs	r2, #2
 800a928:	33c0      	adds	r3, #192	@ 0xc0
                for( i=0; i<devCnt; i++ )                                              /* Copy devices found form local Nfcf list into global device list */
 800a92a:	3601      	adds	r6, #1
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 800a92c:	0039      	movs	r1, r7
                    gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 800a92e:	701a      	strb	r2, [r3, #0]
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 800a930:	30c1      	adds	r0, #193	@ 0xc1
 800a932:	3212      	adds	r2, #18
                for( i=0; i<devCnt; i++ )                                              /* Copy devices found form local Nfcf list into global device list */
 800a934:	b2f6      	uxtb	r6, r6
                    gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 800a936:	f005 fcfb 	bl	8010330 <memcpy>
                for( i=0; i<devCnt; i++ )                                              /* Copy devices found form local Nfcf list into global device list */
 800a93a:	3714      	adds	r7, #20
 800a93c:	42b5      	cmp	r5, r6
 800a93e:	d1ee      	bne.n	800a91e <rfalNfcWorker+0x676>
 800a940:	e740      	b.n	800a7c4 <rfalNfcWorker+0x51c>
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 800a942:	2108      	movs	r1, #8
 800a944:	420b      	tst	r3, r1
 800a946:	d049      	beq.n	800a9dc <rfalNfcWorker+0x734>
 800a948:	88a0      	ldrh	r0, [r4, #4]
 800a94a:	4208      	tst	r0, r1
 800a94c:	d046      	beq.n	800a9dc <rfalNfcWorker+0x734>
        if( !gNfcDev.isTechInit )
 800a94e:	4d95      	ldr	r5, [pc, #596]	@ (800aba4 <rfalNfcWorker+0x8fc>)
 800a950:	5d63      	ldrb	r3, [r4, r5]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10b      	bne.n	800a96e <rfalNfcWorker+0x6c6>
            RFAL_EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                       /* Initialize RFAL for NFC-V */
 800a956:	f002 fe45 	bl	800d5e4 <rfalNfcvPollerInitialize>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d000      	beq.n	800a960 <rfalNfcWorker+0x6b8>
 800a95e:	e0ca      	b.n	800aaf6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* Ensure GT again as other technologies have also been polled */
 800a960:	f7f7 fadc 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a964:	2800      	cmp	r0, #0
 800a966:	d000      	beq.n	800a96a <rfalNfcWorker+0x6c2>
 800a968:	e0c5      	b.n	800aaf6 <rfalNfcWorker+0x84e>
            gNfcDev.isTechInit = true;
 800a96a:	2301      	movs	r3, #1
 800a96c:	5563      	strb	r3, [r4, r5]
        if( !rfalIsGTExpired() )
 800a96e:	f7f7 fac9 	bl	8001f04 <rfalIsGTExpired>
 800a972:	2800      	cmp	r0, #0
 800a974:	d100      	bne.n	800a978 <rfalNfcWorker+0x6d0>
 800a976:	e55e      	b.n	800a436 <rfalNfcWorker+0x18e>
        devCnt             = 0;
 800a978:	2000      	movs	r0, #0
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 800a97a:	2208      	movs	r2, #8
        gNfcDev.isTechInit = false;
 800a97c:	5560      	strb	r0, [r4, r5]
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 800a97e:	25c6      	movs	r5, #198	@ 0xc6
        devCnt             = 0;
 800a980:	4e8a      	ldr	r6, [pc, #552]	@ (800abac <rfalNfcWorker+0x904>)
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 800a982:	00ad      	lsls	r5, r5, #2
        devCnt             = 0;
 800a984:	7030      	strb	r0, [r6, #0]
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 800a986:	88a3      	ldrh	r3, [r4, #4]
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 800a988:	7e21      	ldrb	r1, [r4, #24]
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_V;
 800a98a:	4393      	bics	r3, r2
 800a98c:	80a3      	strh	r3, [r4, #4]
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 800a98e:	5d63      	ldrb	r3, [r4, r5]
 800a990:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a992:	1ac9      	subs	r1, r1, r3
 800a994:	b2c9      	uxtb	r1, r1
 800a996:	0033      	movs	r3, r6
 800a998:	f002 fe96 	bl	800d6c8 <rfalNfcvPollerCollisionResolution>
        if( (err == RFAL_ERR_NONE) && (devCnt != 0U) )
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d000      	beq.n	800a9a2 <rfalNfcWorker+0x6fa>
 800a9a0:	e549      	b.n	800a436 <rfalNfcWorker+0x18e>
 800a9a2:	7833      	ldrb	r3, [r6, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d100      	bne.n	800a9aa <rfalNfcWorker+0x702>
 800a9a8:	e545      	b.n	800a436 <rfalNfcWorker+0x18e>
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 800a9aa:	2778      	movs	r7, #120	@ 0x78
 800a9ac:	5d65      	ldrb	r5, [r4, r5]
 800a9ae:	ae0b      	add	r6, sp, #44	@ 0x2c
 800a9b0:	195b      	adds	r3, r3, r5
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	9305      	str	r3, [sp, #20]
 800a9b6:	0038      	movs	r0, r7
 800a9b8:	4368      	muls	r0, r5
 800a9ba:	1820      	adds	r0, r4, r0
 800a9bc:	0003      	movs	r3, r0
 800a9be:	2203      	movs	r2, #3
 800a9c0:	33c0      	adds	r3, #192	@ 0xc0
 800a9c2:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 800a9c4:	0031      	movs	r1, r6
 800a9c6:	30c1      	adds	r0, #193	@ 0xc1
 800a9c8:	320a      	adds	r2, #10
 800a9ca:	f005 fcb1 	bl	8010330 <memcpy>
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 800a9ce:	3501      	adds	r5, #1
 800a9d0:	9b05      	ldr	r3, [sp, #20]
 800a9d2:	b2ed      	uxtb	r5, r5
 800a9d4:	360d      	adds	r6, #13
 800a9d6:	429d      	cmp	r5, r3
 800a9d8:	d1ed      	bne.n	800a9b6 <rfalNfcWorker+0x70e>
 800a9da:	e6f3      	b.n	800a7c4 <rfalNfcWorker+0x51c>
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 800a9dc:	2120      	movs	r1, #32
 800a9de:	420b      	tst	r3, r1
 800a9e0:	d045      	beq.n	800aa6e <rfalNfcWorker+0x7c6>
 800a9e2:	88a0      	ldrh	r0, [r4, #4]
 800a9e4:	4208      	tst	r0, r1
 800a9e6:	d042      	beq.n	800aa6e <rfalNfcWorker+0x7c6>
        if( !gNfcDev.isTechInit )
 800a9e8:	4d6e      	ldr	r5, [pc, #440]	@ (800aba4 <rfalNfcWorker+0x8fc>)
 800a9ea:	5d63      	ldrb	r3, [r4, r5]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10a      	bne.n	800aa06 <rfalNfcWorker+0x75e>
            RFAL_EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                    /* Initialize RFAL for ST25TB */
 800a9f0:	f002 fffe 	bl	800d9f0 <rfalSt25tbPollerInitialize>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d000      	beq.n	800a9fa <rfalNfcWorker+0x752>
 800a9f8:	e07d      	b.n	800aaf6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                         /* Ensure GT again as other technologies have also been polled */
 800a9fa:	f7f7 fa8f 	bl	8001f1c <rfalFieldOnAndStartGT>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d179      	bne.n	800aaf6 <rfalNfcWorker+0x84e>
            gNfcDev.isTechInit = true;
 800aa02:	2301      	movs	r3, #1
 800aa04:	5563      	strb	r3, [r4, r5]
        if( !rfalIsGTExpired() )
 800aa06:	f7f7 fa7d 	bl	8001f04 <rfalIsGTExpired>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d100      	bne.n	800aa10 <rfalNfcWorker+0x768>
 800aa0e:	e512      	b.n	800a436 <rfalNfcWorker+0x18e>
        devCnt             = 0;
 800aa10:	2300      	movs	r3, #0
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800aa12:	2220      	movs	r2, #32
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 800aa14:	27c6      	movs	r7, #198	@ 0xc6
        devCnt             = 0;
 800aa16:	4e65      	ldr	r6, [pc, #404]	@ (800abac <rfalNfcWorker+0x904>)
        gNfcDev.isTechInit = false;
 800aa18:	5563      	strb	r3, [r4, r5]
        devCnt             = 0;
 800aa1a:	7033      	strb	r3, [r6, #0]
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800aa1c:	88a3      	ldrh	r3, [r4, #4]
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 800aa1e:	00bf      	lsls	r7, r7, #2
        gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800aa20:	4393      	bics	r3, r2
 800aa22:	80a3      	strh	r3, [r4, #4]
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 800aa24:	7e20      	ldrb	r0, [r4, #24]
 800aa26:	5de3      	ldrb	r3, [r4, r7]
 800aa28:	0032      	movs	r2, r6
 800aa2a:	1ac0      	subs	r0, r0, r3
 800aa2c:	b2c0      	uxtb	r0, r0
 800aa2e:	a90b      	add	r1, sp, #44	@ 0x2c
 800aa30:	f003 f89a 	bl	800db68 <rfalSt25tbPollerCollisionResolution>
        if( (err == RFAL_ERR_NONE) && (devCnt != 0U) )
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d000      	beq.n	800aa3a <rfalNfcWorker+0x792>
 800aa38:	e4fd      	b.n	800a436 <rfalNfcWorker+0x18e>
 800aa3a:	7835      	ldrb	r5, [r6, #0]
 800aa3c:	2d00      	cmp	r5, #0
 800aa3e:	d100      	bne.n	800aa42 <rfalNfcWorker+0x79a>
 800aa40:	e4f9      	b.n	800a436 <rfalNfcWorker+0x18e>
 800aa42:	5de6      	ldrb	r6, [r4, r7]
 800aa44:	af0b      	add	r7, sp, #44	@ 0x2c
 800aa46:	19ad      	adds	r5, r5, r6
 800aa48:	b2ed      	uxtb	r5, r5
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 800aa4a:	2078      	movs	r0, #120	@ 0x78
 800aa4c:	4370      	muls	r0, r6
 800aa4e:	1820      	adds	r0, r4, r0
 800aa50:	0003      	movs	r3, r0
 800aa52:	2204      	movs	r2, #4
 800aa54:	33c0      	adds	r3, #192	@ 0xc0
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 800aa56:	3601      	adds	r6, #1
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 800aa58:	0039      	movs	r1, r7
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 800aa5a:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 800aa5c:	30c1      	adds	r0, #193	@ 0xc1
 800aa5e:	3206      	adds	r2, #6
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 800aa60:	b2f6      	uxtb	r6, r6
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 800aa62:	f005 fc65 	bl	8010330 <memcpy>
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 800aa66:	370a      	adds	r7, #10
 800aa68:	42b5      	cmp	r5, r6
 800aa6a:	d1ee      	bne.n	800aa4a <rfalNfcWorker+0x7a2>
 800aa6c:	e6aa      	b.n	800a7c4 <rfalNfcWorker+0x51c>
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_PROP) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_PROP) != 0U) )   /* If a device was found/detected, perform Collision Resolution */
 800aa6e:	2140      	movs	r1, #64	@ 0x40
 800aa70:	420b      	tst	r3, r1
 800aa72:	d044      	beq.n	800aafe <rfalNfcWorker+0x856>
 800aa74:	88a3      	ldrh	r3, [r4, #4]
 800aa76:	420b      	tst	r3, r1
 800aa78:	d041      	beq.n	800aafe <rfalNfcWorker+0x856>
        if( !gNfcDev.isTechInit )
 800aa7a:	4d4a      	ldr	r5, [pc, #296]	@ (800aba4 <rfalNfcWorker+0x8fc>)
 800aa7c:	5d63      	ldrb	r3, [r4, r5]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d112      	bne.n	800aaa8 <rfalNfcWorker+0x800>
            RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerInitialize() );                     /* Initialize RFAL for Proprietary NFC */
 800aa82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d104      	bne.n	800aa92 <rfalNfcWorker+0x7ea>
                    gNfcDev.deactType = RFAL_NFC_DEACTIVATE_DISCOVERY;
 800aa88:	2202      	movs	r2, #2
 800aa8a:	4b4a      	ldr	r3, [pc, #296]	@ (800abb4 <rfalNfcWorker+0x90c>)
 800aa8c:	54e2      	strb	r2, [r4, r3]
                    gNfcDev.state     = RFAL_NFC_STATE_DEACTIVATION;
 800aa8e:	2322      	movs	r3, #34	@ 0x22
 800aa90:	e612      	b.n	800a6b8 <rfalNfcWorker+0x410>
            RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerInitialize() );                     /* Initialize RFAL for Proprietary NFC */
 800aa92:	4798      	blx	r3
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d12e      	bne.n	800aaf6 <rfalNfcWorker+0x84e>
            RFAL_EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                          /* Turns the Field On and starts GT timer */
 800aa98:	f7f7 fa40 	bl	8001f1c <rfalFieldOnAndStartGT>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d12a      	bne.n	800aaf6 <rfalNfcWorker+0x84e>
            gNfcDev.isTechInit    = true;                                              /* Technology has been initialized */
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	5562      	strb	r2, [r4, r5]
            gNfcDev.isOperOngoing = false;                                             /* No operation currently ongoing  */
 800aaa4:	4a40      	ldr	r2, [pc, #256]	@ (800aba8 <rfalNfcWorker+0x900>)
 800aaa6:	54a0      	strb	r0, [r4, r2]
        if( !rfalIsGTExpired() )
 800aaa8:	f7f7 fa2c 	bl	8001f04 <rfalIsGTExpired>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d100      	bne.n	800aab2 <rfalNfcWorker+0x80a>
 800aab0:	e4c1      	b.n	800a436 <rfalNfcWorker+0x18e>
        if( !gNfcDev.isOperOngoing )
 800aab2:	4b3d      	ldr	r3, [pc, #244]	@ (800aba8 <rfalNfcWorker+0x900>)
 800aab4:	5ce3      	ldrb	r3, [r4, r3]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d104      	bne.n	800aac4 <rfalNfcWorker+0x81c>
            RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerStartCollisionResolution() );
 800aaba:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d0e3      	beq.n	800aa88 <rfalNfcWorker+0x7e0>
 800aac0:	4798      	blx	r3
 800aac2:	e64e      	b.n	800a762 <rfalNfcWorker+0x4ba>
        err = rfalNfcpCbPollerGetCollisionResolutionStatus();
 800aac4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d013      	beq.n	800aaf2 <rfalNfcWorker+0x84a>
 800aaca:	4798      	blx	r3
        if( err != RFAL_ERR_BUSY )
 800aacc:	2802      	cmp	r0, #2
 800aace:	d100      	bne.n	800aad2 <rfalNfcWorker+0x82a>
 800aad0:	e4b1      	b.n	800a436 <rfalNfcWorker+0x18e>
            gNfcDev.isTechInit = false;
 800aad2:	2300      	movs	r3, #0
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_PROP;
 800aad4:	2240      	movs	r2, #64	@ 0x40
            gNfcDev.isTechInit = false;
 800aad6:	5563      	strb	r3, [r4, r5]
            gNfcDev.techs2do  &= ~RFAL_NFC_POLL_TECH_PROP;
 800aad8:	88a3      	ldrh	r3, [r4, #4]
 800aada:	4393      	bics	r3, r2
 800aadc:	80a3      	strh	r3, [r4, #4]
            if( err == RFAL_ERR_NONE )
 800aade:	2800      	cmp	r0, #0
 800aae0:	d000      	beq.n	800aae4 <rfalNfcWorker+0x83c>
 800aae2:	e4a8      	b.n	800a436 <rfalNfcWorker+0x18e>
                gNfcDev.devCnt = 1;                                                   /* Device list held by caller */
 800aae4:	23c6      	movs	r3, #198	@ 0xc6
 800aae6:	3a3f      	subs	r2, #63	@ 0x3f
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	54e2      	strb	r2, [r4, r3]
                gNfcDev.devList[0].type = RFAL_NFC_LISTEN_TYPE_PROP;
 800aaec:	2306      	movs	r3, #6
 800aaee:	34c0      	adds	r4, #192	@ 0xc0
 800aaf0:	e5e2      	b.n	800a6b8 <rfalNfcWorker+0x410>
        err = rfalNfcpCbPollerGetCollisionResolutionStatus();
 800aaf2:	2018      	movs	r0, #24
 800aaf4:	e7ed      	b.n	800aad2 <rfalNfcWorker+0x82a>
            if( err != RFAL_ERR_BUSY )                                                /* Wait until all technologies are performed            */
 800aaf6:	2802      	cmp	r0, #2
 800aaf8:	d100      	bne.n	800aafc <rfalNfcWorker+0x854>
 800aafa:	e49c      	b.n	800a436 <rfalNfcWorker+0x18e>
 800aafc:	e7c4      	b.n	800aa88 <rfalNfcWorker+0x7e0>
                if( (err != RFAL_ERR_NONE) || (gNfcDev.devCnt == 0U) )                /* Check if any error occurred or no devices were found */
 800aafe:	2a00      	cmp	r2, #0
 800ab00:	d0c2      	beq.n	800aa88 <rfalNfcWorker+0x7e0>
                if( gNfcDev.devCnt > 1U )
 800ab02:	2a01      	cmp	r2, #1
 800ab04:	d008      	beq.n	800ab18 <rfalNfcWorker+0x870>
                    if( gNfcDev.disc.notifyCb != NULL )
 800ab06:	0023      	movs	r3, r4
 800ab08:	3398      	adds	r3, #152	@ 0x98
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d003      	beq.n	800ab18 <rfalNfcWorker+0x870>
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 800ab10:	200c      	movs	r0, #12
 800ab12:	7020      	strb	r0, [r4, #0]
                        rfalNfcNfcNotify( gNfcDev.state );
 800ab14:	f7ff fc2b 	bl	800a36e <rfalNfcWorker+0xc6>
                gNfcDev.selDevIdx = 0U;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	7263      	strb	r3, [r4, #9]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 800ab1c:	330d      	adds	r3, #13
 800ab1e:	e5cb      	b.n	800a6b8 <rfalNfcWorker+0x410>
    if( devIt > gNfcDev.devCnt )
 800ab20:	23c6      	movs	r3, #198	@ 0xc6
 800ab22:	009b      	lsls	r3, r3, #2
            err = rfalNfcPollActivation( gNfcDev.selDevIdx );
 800ab24:	7a66      	ldrb	r6, [r4, #9]
    if( devIt > gNfcDev.devCnt )
 800ab26:	5ce3      	ldrb	r3, [r4, r3]
 800ab28:	42b3      	cmp	r3, r6
 800ab2a:	d200      	bcs.n	800ab2e <rfalNfcWorker+0x886>
 800ab2c:	e0bb      	b.n	800aca6 <rfalNfcWorker+0x9fe>
    switch( gNfcDev.devList[devIt].type )
 800ab2e:	2378      	movs	r3, #120	@ 0x78
 800ab30:	001a      	movs	r2, r3
 800ab32:	4372      	muls	r2, r6
 800ab34:	18a2      	adds	r2, r4, r2
 800ab36:	32c0      	adds	r2, #192	@ 0xc0
 800ab38:	7812      	ldrb	r2, [r2, #0]
 800ab3a:	9205      	str	r2, [sp, #20]
 800ab3c:	2a06      	cmp	r2, #6
 800ab3e:	d900      	bls.n	800ab42 <rfalNfcWorker+0x89a>
 800ab40:	e0b1      	b.n	800aca6 <rfalNfcWorker+0x9fe>
 800ab42:	0010      	movs	r0, r2
 800ab44:	f7f5 fb06 	bl	8000154 <__gnu_thumb1_case_uhi>
 800ab48:	00e90022 	.word	0x00e90022
 800ab4c:	01830154 	.word	0x01830154
 800ab50:	00070191 	.word	0x00070191
 800ab54:	019a      	.short	0x019a
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 800ab56:	4373      	muls	r3, r6
 800ab58:	18e2      	adds	r2, r4, r3
 800ab5a:	0011      	movs	r1, r2
 800ab5c:	33e2      	adds	r3, #226	@ 0xe2
 800ab5e:	18e3      	adds	r3, r4, r3
 800ab60:	31d8      	adds	r1, #216	@ 0xd8
 800ab62:	600b      	str	r3, [r1, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 800ab64:	230a      	movs	r3, #10
 800ab66:	32dc      	adds	r2, #220	@ 0xdc
 800ab68:	7013      	strb	r3, [r2, #0]
    gNfcDev.activeDev     = &gNfcDev.devList[devIt];                                  /* Assign active device to be used further on */
 800ab6a:	2378      	movs	r3, #120	@ 0x78
    gNfcDev.isOperOngoing = false;
 800ab6c:	2200      	movs	r2, #0
                gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                             /* Device has been properly activated    */
 800ab6e:	201e      	movs	r0, #30
    gNfcDev.activeDev     = &gNfcDev.devList[devIt];                                  /* Assign active device to be used further on */
 800ab70:	4373      	muls	r3, r6
 800ab72:	33c0      	adds	r3, #192	@ 0xc0
 800ab74:	18e3      	adds	r3, r4, r3
 800ab76:	60e3      	str	r3, [r4, #12]
    gNfcDev.isOperOngoing = false;
 800ab78:	4b0b      	ldr	r3, [pc, #44]	@ (800aba8 <rfalNfcWorker+0x900>)
 800ab7a:	54e2      	strb	r2, [r4, r3]
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800ab7c:	7020      	strb	r0, [r4, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller             */
 800ab7e:	3498      	adds	r4, #152	@ 0x98
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d001      	beq.n	800ab8a <rfalNfcWorker+0x8e2>
 800ab86:	f7ff fbf2 	bl	800a36e <rfalNfcWorker+0xc6>
 800ab8a:	e454      	b.n	800a436 <rfalNfcWorker+0x18e>
            if( !gNfcDev.isTechInit )
 800ab8c:	4d05      	ldr	r5, [pc, #20]	@ (800aba4 <rfalNfcWorker+0x8fc>)
 800ab8e:	5d67      	ldrb	r7, [r4, r5]
 800ab90:	2f00      	cmp	r7, #0
 800ab92:	d111      	bne.n	800abb8 <rfalNfcWorker+0x910>
                rfalNfcaPollerInitialize();
 800ab94:	f001 fd82 	bl	800c69c <rfalNfcaPollerInitialize>
                gNfcDev.isTechInit    = true;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	5563      	strb	r3, [r4, r5]
                gNfcDev.isOperOngoing = false;
 800ab9c:	4b02      	ldr	r3, [pc, #8]	@ (800aba8 <rfalNfcWorker+0x900>)
 800ab9e:	54e7      	strb	r7, [r4, r3]
            if( err != RFAL_ERR_BUSY )                                                     /* Wait until all Activation is complete */
 800aba0:	e449      	b.n	800a436 <rfalNfcWorker+0x18e>
 800aba2:	46c0      	nop			@ (mov r8, r8)
 800aba4:	00000329 	.word	0x00000329
 800aba8:	0000032a 	.word	0x0000032a
 800abac:	20000f63 	.word	0x20000f63
 800abb0:	20000eb4 	.word	0x20000eb4
 800abb4:	00000322 	.word	0x00000322
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 800abb8:	2578      	movs	r5, #120	@ 0x78
 800abba:	4375      	muls	r5, r6
 800abbc:	1967      	adds	r7, r4, r5
 800abbe:	003b      	movs	r3, r7
 800abc0:	33d6      	adds	r3, #214	@ 0xd6
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d038      	beq.n	800ac3a <rfalNfcWorker+0x992>
                if( !gNfcDev.isOperOngoing )
 800abc8:	4bd3      	ldr	r3, [pc, #844]	@ (800af18 <rfalNfcWorker+0xc70>)
 800abca:	5ce3      	ldrb	r3, [r4, r3]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d116      	bne.n	800abfe <rfalNfcWorker+0x956>
                    RFAL_EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &gNfcDev.sensRes ) );
 800abd0:	2052      	movs	r0, #82	@ 0x52
 800abd2:	49d2      	ldr	r1, [pc, #840]	@ (800af1c <rfalNfcWorker+0xc74>)
 800abd4:	f001 fd7e 	bl	800c6d4 <rfalNfcaPollerCheckPresence>
 800abd8:	2800      	cmp	r0, #0
 800abda:	d10b      	bne.n	800abf4 <rfalNfcWorker+0x94c>
                    RFAL_EXIT_ON_ERR( err, rfalNfcaPollerStartSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &gNfcDev.devList[devIt].dev.nfca.selRes ) ); 
 800abdc:	002a      	movs	r2, r5
 800abde:	37c5      	adds	r7, #197	@ 0xc5
 800abe0:	32c4      	adds	r2, #196	@ 0xc4
 800abe2:	35c6      	adds	r5, #198	@ 0xc6
 800abe4:	7839      	ldrb	r1, [r7, #0]
 800abe6:	18a2      	adds	r2, r4, r2
 800abe8:	1960      	adds	r0, r4, r5
 800abea:	f001 ff9f 	bl	800cb2c <rfalNfcaPollerStartSelect>
                RFAL_EXIT_ON_ERR( err, rfalNfcpCbStartActivation() );
 800abee:	2800      	cmp	r0, #0
 800abf0:	d100      	bne.n	800abf4 <rfalNfcWorker+0x94c>
 800abf2:	e5b9      	b.n	800a768 <rfalNfcWorker+0x4c0>
            if( err != RFAL_ERR_BUSY )                                                     /* Wait until all Activation is complete */
 800abf4:	2802      	cmp	r0, #2
 800abf6:	d101      	bne.n	800abfc <rfalNfcWorker+0x954>
 800abf8:	f7ff fc1d 	bl	800a436 <rfalNfcWorker+0x18e>
 800abfc:	e053      	b.n	800aca6 <rfalNfcWorker+0x9fe>
                    RFAL_EXIT_ON_ERR( err, rfalNfcaPollerGetSelectStatus() ); 
 800abfe:	f001 ffb5 	bl	800cb6c <rfalNfcaPollerGetSelectStatus>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d1f6      	bne.n	800abf4 <rfalNfcWorker+0x94c>
                    for( devIdx = 0; devIdx < gNfcDev.devCnt; devIdx++ )
 800ac06:	23c6      	movs	r3, #198	@ 0xc6
                            gNfcDev.devList[devIdx].dev.nfca.isSleep = true;
 800ac08:	2101      	movs	r1, #1
                    for( devIdx = 0; devIdx < gNfcDev.devCnt; devIdx++ )
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	5ce2      	ldrb	r2, [r4, r3]
 800ac0e:	4bc4      	ldr	r3, [pc, #784]	@ (800af20 <rfalNfcWorker+0xc78>)
 800ac10:	9805      	ldr	r0, [sp, #20]
 800ac12:	4290      	cmp	r0, r2
 800ac14:	d107      	bne.n	800ac26 <rfalNfcWorker+0x97e>
                    gNfcDev.devList[devIt].dev.nfca.isSleep = false;
 800ac16:	2378      	movs	r3, #120	@ 0x78
 800ac18:	2200      	movs	r2, #0
 800ac1a:	4373      	muls	r3, r6
 800ac1c:	18e3      	adds	r3, r4, r3
 800ac1e:	33d6      	adds	r3, #214	@ 0xd6
 800ac20:	701a      	strb	r2, [r3, #0]
                    gNfcDev.isOperOngoing = false;
 800ac22:	4bbd      	ldr	r3, [pc, #756]	@ (800af18 <rfalNfcWorker+0xc70>)
 800ac24:	e5a2      	b.n	800a76c <rfalNfcWorker+0x4c4>
                        if( gNfcDev.devList[devIdx].type == RFAL_NFC_LISTEN_TYPE_NFCA )
 800ac26:	7818      	ldrb	r0, [r3, #0]
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d100      	bne.n	800ac2e <rfalNfcWorker+0x986>
                            gNfcDev.devList[devIdx].dev.nfca.isSleep = true;
 800ac2c:	7599      	strb	r1, [r3, #22]
                    for( devIdx = 0; devIdx < gNfcDev.devCnt; devIdx++ )
 800ac2e:	9805      	ldr	r0, [sp, #20]
 800ac30:	3378      	adds	r3, #120	@ 0x78
 800ac32:	3001      	adds	r0, #1
 800ac34:	b2c0      	uxtb	r0, r0
 800ac36:	9005      	str	r0, [sp, #20]
 800ac38:	e7ea      	b.n	800ac10 <rfalNfcWorker+0x968>
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 800ac3a:	002b      	movs	r3, r5
 800ac3c:	003a      	movs	r2, r7
 800ac3e:	33c6      	adds	r3, #198	@ 0xc6
 800ac40:	18e3      	adds	r3, r4, r3
 800ac42:	32d8      	adds	r2, #216	@ 0xd8
 800ac44:	6013      	str	r3, [r2, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 800ac46:	003b      	movs	r3, r7
 800ac48:	0039      	movs	r1, r7
 800ac4a:	33c5      	adds	r3, #197	@ 0xc5
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	31dc      	adds	r1, #220	@ 0xdc
 800ac50:	700b      	strb	r3, [r1, #0]
            nfcaType = gNfcDev.devList[devIt].dev.nfca.type;
 800ac52:	003b      	movs	r3, r7
 800ac54:	33c1      	adds	r3, #193	@ 0xc1
 800ac56:	781b      	ldrb	r3, [r3, #0]
            if( nfcaType == RFAL_NFCA_T4T_NFCDEP )
 800ac58:	2b60      	cmp	r3, #96	@ 0x60
 800ac5a:	d11d      	bne.n	800ac98 <rfalNfcWorker+0x9f0>
                nfcaType = ( (gNfcDev.disc.p2pNfcaPrio) ? RFAL_NFCA_NFCDEP : RFAL_NFCA_T4T);
 800ac5c:	0023      	movs	r3, r4
 800ac5e:	3357      	adds	r3, #87	@ 0x57
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d12e      	bne.n	800acc4 <rfalNfcWorker+0xa1c>
                    if( !gNfcDev.isOperOngoing )
 800ac66:	4bac      	ldr	r3, [pc, #688]	@ (800af18 <rfalNfcWorker+0xc70>)
 800ac68:	5ce7      	ldrb	r7, [r4, r3]
 800ac6a:	2f00      	cmp	r7, #0
 800ac6c:	d149      	bne.n	800ad02 <rfalNfcWorker+0xa5a>
                        rfalIsoDepInitializeWithParams( gNfcDev.disc.compMode, RFAL_ISODEP_MAX_R_RETRYS, RFAL_ISODEP_MAX_WTX_NACK_RETRYS, RFAL_ISODEP_MAX_WTX_RETRYS, RFAL_ISODEP_MAX_DSL_RETRYS, RFAL_ISODEP_MAX_I_RETRYS, RFAL_ISODEP_RATS_RETRIES);
 800ac6e:	2301      	movs	r3, #1
 800ac70:	2203      	movs	r2, #3
 800ac72:	7c20      	ldrb	r0, [r4, #16]
 800ac74:	9302      	str	r3, [sp, #8]
 800ac76:	18db      	adds	r3, r3, r3
 800ac78:	0011      	movs	r1, r2
 800ac7a:	9301      	str	r3, [sp, #4]
 800ac7c:	9700      	str	r7, [sp, #0]
 800ac7e:	3312      	adds	r3, #18
 800ac80:	f7fe f8e0 	bl	8008e44 <rfalIsoDepInitializeWithParams>
                        RFAL_EXIT_ON_ERR( err, rfalIsoDepPollAStartActivation( gNfcDev.disc.isoDepFS, RFAL_ISODEP_NO_DID, gNfcDev.disc.maxBR, &gNfcDev.devList[devIt].proto.isoDep ) );
 800ac84:	0021      	movs	r1, r4
 800ac86:	35e0      	adds	r5, #224	@ 0xe0
 800ac88:	3170      	adds	r1, #112	@ 0x70
 800ac8a:	7e62      	ldrb	r2, [r4, #25]
 800ac8c:	7808      	ldrb	r0, [r1, #0]
 800ac8e:	1963      	adds	r3, r4, r5
 800ac90:	0039      	movs	r1, r7
 800ac92:	f7fe fd0d 	bl	80096b0 <rfalIsoDepPollAStartActivation>
 800ac96:	e7aa      	b.n	800abee <rfalNfcWorker+0x946>
            switch( nfcaType )
 800ac98:	2b20      	cmp	r3, #32
 800ac9a:	d0e4      	beq.n	800ac66 <rfalNfcWorker+0x9be>
 800ac9c:	d810      	bhi.n	800acc0 <rfalNfcWorker+0xa18>
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d02c      	beq.n	800acfc <rfalNfcWorker+0xa54>
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d024      	beq.n	800acf0 <rfalNfcWorker+0xa48>
                    if( (gNfcDev.devCnt > 1U) && (gNfcDev.disc.notifyCb != NULL) )
 800aca6:	23c6      	movs	r3, #198	@ 0xc6
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	5ce3      	ldrb	r3, [r4, r3]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d800      	bhi.n	800acb2 <rfalNfcWorker+0xa0a>
 800acb0:	e6ea      	b.n	800aa88 <rfalNfcWorker+0x7e0>
 800acb2:	0023      	movs	r3, r4
 800acb4:	3398      	adds	r3, #152	@ 0x98
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d000      	beq.n	800acbe <rfalNfcWorker+0xa16>
 800acbc:	e728      	b.n	800ab10 <rfalNfcWorker+0x868>
 800acbe:	e6e3      	b.n	800aa88 <rfalNfcWorker+0x7e0>
            switch( nfcaType )
 800acc0:	2b40      	cmp	r3, #64	@ 0x40
 800acc2:	d1f0      	bne.n	800aca6 <rfalNfcWorker+0x9fe>
                    RFAL_EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 800acc4:	0028      	movs	r0, r5
 800acc6:	2300      	movs	r3, #0
 800acc8:	30c0      	adds	r0, #192	@ 0xc0
 800acca:	001a      	movs	r2, r3
 800accc:	0019      	movs	r1, r3
 800acce:	1820      	adds	r0, r4, r0
 800acd0:	f7ff f852 	bl	8009d78 <rfalNfcNfcDepActivate>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d18d      	bne.n	800abf4 <rfalNfcWorker+0x94c>
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 800acd8:	2378      	movs	r3, #120	@ 0x78
 800acda:	4373      	muls	r3, r6
 800acdc:	18e3      	adds	r3, r4, r3
 800acde:	001a      	movs	r2, r3
 800ace0:	35e2      	adds	r5, #226	@ 0xe2
 800ace2:	32d8      	adds	r2, #216	@ 0xd8
 800ace4:	1965      	adds	r5, r4, r5
 800ace6:	6015      	str	r5, [r2, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800ace8:	4a8e      	ldr	r2, [pc, #568]	@ (800af24 <rfalNfcWorker+0xc7c>)
 800acea:	33dc      	adds	r3, #220	@ 0xdc
            gNfcDev.devList[devIt].nfcidLen = 0;
 800acec:	801a      	strh	r2, [r3, #0]
            break;
 800acee:	e73c      	b.n	800ab6a <rfalNfcWorker+0x8c2>
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 800acf0:	2304      	movs	r3, #4
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 800acf2:	35d2      	adds	r5, #210	@ 0xd2
 800acf4:	1965      	adds	r5, r4, r5
 800acf6:	6015      	str	r5, [r2, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 800acf8:	800b      	strh	r3, [r1, #0]
                    break;
 800acfa:	e736      	b.n	800ab6a <rfalNfcWorker+0x8c2>
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 800acfc:	37dd      	adds	r7, #221	@ 0xdd
 800acfe:	703b      	strb	r3, [r7, #0]
                    break;
 800ad00:	e733      	b.n	800ab6a <rfalNfcWorker+0x8c2>
                    err = rfalIsoDepPollAGetActivationStatus();
 800ad02:	f7fe fcf7 	bl	80096f4 <rfalIsoDepPollAGetActivationStatus>
                    if( err != RFAL_ERR_NONE )
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d000      	beq.n	800ad0c <rfalNfcWorker+0xa64>
 800ad0a:	e773      	b.n	800abf4 <rfalNfcWorker+0x94c>
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 800ad0c:	2378      	movs	r3, #120	@ 0x78
 800ad0e:	2201      	movs	r2, #1
 800ad10:	4373      	muls	r3, r6
 800ad12:	18e3      	adds	r3, r4, r3
 800ad14:	33dd      	adds	r3, #221	@ 0xdd
 800ad16:	701a      	strb	r2, [r3, #0]
                    break;
 800ad18:	e727      	b.n	800ab6a <rfalNfcWorker+0x8c2>
            if( !gNfcDev.isTechInit )
 800ad1a:	4f83      	ldr	r7, [pc, #524]	@ (800af28 <rfalNfcWorker+0xc80>)
 800ad1c:	5de5      	ldrb	r5, [r4, r7]
 800ad1e:	2d00      	cmp	r5, #0
 800ad20:	d116      	bne.n	800ad50 <rfalNfcWorker+0xaa8>
                rfalNfcbPollerInitialize();
 800ad22:	f002 f887 	bl	800ce34 <rfalNfcbPollerInitialize>
                gNfcDev.isTechInit    = true;
 800ad26:	2301      	movs	r3, #1
 800ad28:	55e3      	strb	r3, [r4, r7]
                gNfcDev.isOperOngoing = false;
 800ad2a:	4b7b      	ldr	r3, [pc, #492]	@ (800af18 <rfalNfcWorker+0xc70>)
 800ad2c:	54e5      	strb	r5, [r4, r3]
                if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                         /* Check if desired device is in Sleep */
 800ad2e:	2378      	movs	r3, #120	@ 0x78
 800ad30:	4373      	muls	r3, r6
 800ad32:	18e3      	adds	r3, r4, r3
 800ad34:	33cf      	adds	r3, #207	@ 0xcf
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d101      	bne.n	800ad40 <rfalNfcWorker+0xa98>
 800ad3c:	f7ff fb7b 	bl	800a436 <rfalNfcWorker+0x18e>
                    rfalNfcbPollerStartCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &gNfcDev.sensbRes, &gNfcDev.sensbResLen );
 800ad40:	0029      	movs	r1, r5
 800ad42:	4b7a      	ldr	r3, [pc, #488]	@ (800af2c <rfalNfcWorker+0xc84>)
 800ad44:	4a7a      	ldr	r2, [pc, #488]	@ (800af30 <rfalNfcWorker+0xc88>)
 800ad46:	2008      	movs	r0, #8
 800ad48:	f002 f892 	bl	800ce70 <rfalNfcbPollerStartCheckPresence>
            if( err != RFAL_ERR_BUSY )                                                     /* Wait until all Activation is complete */
 800ad4c:	f7ff fb73 	bl	800a436 <rfalNfcWorker+0x18e>
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is still in Sleep */
 800ad50:	2578      	movs	r5, #120	@ 0x78
 800ad52:	4375      	muls	r5, r6
 800ad54:	1965      	adds	r5, r4, r5
 800ad56:	35cf      	adds	r5, #207	@ 0xcf
 800ad58:	782b      	ldrb	r3, [r5, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d007      	beq.n	800ad6e <rfalNfcWorker+0xac6>
                RFAL_EXIT_ON_BUSY( err, rfalNfcbPollerGetCheckPresenceStatus() );
 800ad5e:	f002 f8bf 	bl	800cee0 <rfalNfcbPollerGetCheckPresenceStatus>
 800ad62:	2802      	cmp	r0, #2
 800ad64:	d101      	bne.n	800ad6a <rfalNfcWorker+0xac2>
 800ad66:	f7ff fb66 	bl	800a436 <rfalNfcWorker+0x18e>
                gNfcDev.devList[devIt].dev.nfcb.isSleep = false;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	702b      	strb	r3, [r5, #0]
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 800ad6e:	2378      	movs	r3, #120	@ 0x78
 800ad70:	4373      	muls	r3, r6
 800ad72:	18e5      	adds	r5, r4, r3
 800ad74:	002a      	movs	r2, r5
 800ad76:	9305      	str	r3, [sp, #20]
 800ad78:	33c3      	adds	r3, #195	@ 0xc3
 800ad7a:	32d8      	adds	r2, #216	@ 0xd8
 800ad7c:	18e3      	adds	r3, r4, r3
 800ad7e:	6013      	str	r3, [r2, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 800ad80:	002b      	movs	r3, r5
 800ad82:	2204      	movs	r2, #4
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 800ad84:	2101      	movs	r1, #1
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 800ad86:	33dc      	adds	r3, #220	@ 0xdc
 800ad88:	701a      	strb	r2, [r3, #0]
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 800ad8a:	3b10      	subs	r3, #16
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	3a03      	subs	r2, #3
 800ad90:	401a      	ands	r2, r3
 800ad92:	420b      	tst	r3, r1
 800ad94:	d029      	beq.n	800adea <rfalNfcWorker+0xb42>
                if( !gNfcDev.isOperOngoing )
 800ad96:	4b60      	ldr	r3, [pc, #384]	@ (800af18 <rfalNfcWorker+0xc70>)
 800ad98:	5ce7      	ldrb	r7, [r4, r3]
 800ad9a:	2f00      	cmp	r7, #0
 800ad9c:	d11c      	bne.n	800add8 <rfalNfcWorker+0xb30>
                    rfalIsoDepInitializeWithParams( gNfcDev.disc.compMode, RFAL_ISODEP_MAX_R_RETRYS, RFAL_ISODEP_MAX_WTX_NACK_RETRYS, RFAL_ISODEP_MAX_WTX_RETRYS, RFAL_ISODEP_MAX_DSL_RETRYS, RFAL_ISODEP_MAX_I_RETRYS, RFAL_ISODEP_RATS_RETRIES);
 800ad9e:	2203      	movs	r2, #3
 800ada0:	2302      	movs	r3, #2
 800ada2:	7c20      	ldrb	r0, [r4, #16]
 800ada4:	9102      	str	r1, [sp, #8]
 800ada6:	9301      	str	r3, [sp, #4]
 800ada8:	0011      	movs	r1, r2
 800adaa:	9700      	str	r7, [sp, #0]
 800adac:	3312      	adds	r3, #18
 800adae:	f7fe f849 	bl	8008e44 <rfalIsoDepInitializeWithParams>
                    RFAL_EXIT_ON_ERR( err, rfalIsoDepPollBStartActivation( gNfcDev.disc.isoDepFS, RFAL_ISODEP_NO_DID, gNfcDev.disc.maxBR, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 800adb2:	0023      	movs	r3, r4
 800adb4:	3370      	adds	r3, #112	@ 0x70
 800adb6:	7818      	ldrb	r0, [r3, #0]
 800adb8:	9b05      	ldr	r3, [sp, #20]
 800adba:	7e62      	ldrb	r2, [r4, #25]
 800adbc:	33e0      	adds	r3, #224	@ 0xe0
 800adbe:	18e3      	adds	r3, r4, r3
 800adc0:	9303      	str	r3, [sp, #12]
 800adc2:	9b05      	ldr	r3, [sp, #20]
 800adc4:	0039      	movs	r1, r7
 800adc6:	33c1      	adds	r3, #193	@ 0xc1
 800adc8:	18e3      	adds	r3, r4, r3
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	9702      	str	r7, [sp, #8]
 800adce:	003b      	movs	r3, r7
 800add0:	9701      	str	r7, [sp, #4]
 800add2:	f7fe fd6f 	bl	80098b4 <rfalIsoDepPollBStartActivation>
 800add6:	e70a      	b.n	800abee <rfalNfcWorker+0x946>
                err = rfalIsoDepPollBGetActivationStatus();
 800add8:	f7fe fdfe 	bl	80099d8 <rfalIsoDepPollBGetActivationStatus>
                if( err != RFAL_ERR_NONE )
 800addc:	2800      	cmp	r0, #0
 800adde:	d000      	beq.n	800ade2 <rfalNfcWorker+0xb3a>
 800ade0:	e708      	b.n	800abf4 <rfalNfcWorker+0x94c>
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 800ade2:	2301      	movs	r3, #1
 800ade4:	35dd      	adds	r5, #221	@ 0xdd
 800ade6:	702b      	strb	r3, [r5, #0]
                break;
 800ade8:	e6bf      	b.n	800ab6a <rfalNfcWorker+0x8c2>
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 800adea:	35dd      	adds	r5, #221	@ 0xdd
 800adec:	702a      	strb	r2, [r5, #0]
            break;
 800adee:	e6bc      	b.n	800ab6a <rfalNfcWorker+0x8c2>
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 800adf0:	2578      	movs	r5, #120	@ 0x78
 800adf2:	4375      	muls	r5, r6
 800adf4:	7ea0      	ldrb	r0, [r4, #26]
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 800adf6:	1967      	adds	r7, r4, r5
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 800adf8:	f002 fab0 	bl	800d35c <rfalNfcfPollerInitialize>
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 800adfc:	003b      	movs	r3, r7
 800adfe:	33c3      	adds	r3, #195	@ 0xc3
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d118      	bne.n	800ae38 <rfalNfcWorker+0xb90>
 800ae06:	003b      	movs	r3, r7
 800ae08:	33c4      	adds	r3, #196	@ 0xc4
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	2bfe      	cmp	r3, #254	@ 0xfe
 800ae0e:	d113      	bne.n	800ae38 <rfalNfcWorker+0xb90>
                RFAL_EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 800ae10:	0028      	movs	r0, r5
 800ae12:	2300      	movs	r3, #0
 800ae14:	30c0      	adds	r0, #192	@ 0xc0
 800ae16:	001a      	movs	r2, r3
 800ae18:	0019      	movs	r1, r3
 800ae1a:	1820      	adds	r0, r4, r0
 800ae1c:	f7fe ffac 	bl	8009d78 <rfalNfcNfcDepActivate>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d000      	beq.n	800ae26 <rfalNfcWorker+0xb7e>
 800ae24:	e6e6      	b.n	800abf4 <rfalNfcWorker+0x94c>
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 800ae26:	003b      	movs	r3, r7
 800ae28:	35e2      	adds	r5, #226	@ 0xe2
 800ae2a:	33d8      	adds	r3, #216	@ 0xd8
 800ae2c:	1965      	adds	r5, r4, r5
 800ae2e:	601d      	str	r5, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800ae30:	4b3c      	ldr	r3, [pc, #240]	@ (800af24 <rfalNfcWorker+0xc7c>)
 800ae32:	37dc      	adds	r7, #220	@ 0xdc
 800ae34:	803b      	strh	r3, [r7, #0]
                break;
 800ae36:	e698      	b.n	800ab6a <rfalNfcWorker+0x8c2>
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 800ae38:	2378      	movs	r3, #120	@ 0x78
 800ae3a:	4373      	muls	r3, r6
 800ae3c:	18e3      	adds	r3, r4, r3
 800ae3e:	001a      	movs	r2, r3
 800ae40:	35c3      	adds	r5, #195	@ 0xc3
 800ae42:	32d8      	adds	r2, #216	@ 0xd8
 800ae44:	1965      	adds	r5, r4, r5
 800ae46:	6015      	str	r5, [r2, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 800ae48:	33dc      	adds	r3, #220	@ 0xdc
 800ae4a:	2208      	movs	r2, #8
 800ae4c:	e74e      	b.n	800acec <rfalNfcWorker+0xa44>
            rfalNfcvPollerInitialize();
 800ae4e:	f002 fbc9 	bl	800d5e4 <rfalNfcvPollerInitialize>
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 800ae52:	2378      	movs	r3, #120	@ 0x78
 800ae54:	4373      	muls	r3, r6
 800ae56:	18e2      	adds	r2, r4, r3
 800ae58:	0011      	movs	r1, r2
 800ae5a:	33c3      	adds	r3, #195	@ 0xc3
 800ae5c:	31d8      	adds	r1, #216	@ 0xd8
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 800ae5e:	18e3      	adds	r3, r4, r3
 800ae60:	600b      	str	r3, [r1, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 800ae62:	2308      	movs	r3, #8
 800ae64:	32dc      	adds	r2, #220	@ 0xdc
 800ae66:	8013      	strh	r3, [r2, #0]
            break;
 800ae68:	e67f      	b.n	800ab6a <rfalNfcWorker+0x8c2>
            rfalSt25tbPollerInitialize();
 800ae6a:	f002 fdc1 	bl	800d9f0 <rfalSt25tbPollerInitialize>
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 800ae6e:	2378      	movs	r3, #120	@ 0x78
 800ae70:	4373      	muls	r3, r6
 800ae72:	18e2      	adds	r2, r4, r3
 800ae74:	0011      	movs	r1, r2
 800ae76:	33c2      	adds	r3, #194	@ 0xc2
 800ae78:	31d8      	adds	r1, #216	@ 0xd8
 800ae7a:	e7f0      	b.n	800ae5e <rfalNfcWorker+0xbb6>
            if( !gNfcDev.isTechInit )
 800ae7c:	4d2a      	ldr	r5, [pc, #168]	@ (800af28 <rfalNfcWorker+0xc80>)
 800ae7e:	5d63      	ldrb	r3, [r4, r5]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10d      	bne.n	800aea0 <rfalNfcWorker+0xbf8>
                RFAL_EXIT_ON_ERR( err, rfalNfcpCbPollerInitialize() );
 800ae84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d100      	bne.n	800ae8c <rfalNfcWorker+0xbe4>
 800ae8a:	e70c      	b.n	800aca6 <rfalNfcWorker+0x9fe>
 800ae8c:	4798      	blx	r3
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d000      	beq.n	800ae94 <rfalNfcWorker+0xbec>
 800ae92:	e6af      	b.n	800abf4 <rfalNfcWorker+0x94c>
                gNfcDev.isTechInit    = true;
 800ae94:	2201      	movs	r2, #1
 800ae96:	5562      	strb	r2, [r4, r5]
                gNfcDev.isOperOngoing = false;
 800ae98:	4a1f      	ldr	r2, [pc, #124]	@ (800af18 <rfalNfcWorker+0xc70>)
 800ae9a:	54a0      	strb	r0, [r4, r2]
            if( err != RFAL_ERR_BUSY )                                                     /* Wait until all Activation is complete */
 800ae9c:	f7ff facb 	bl	800a436 <rfalNfcWorker+0x18e>
            if( !gNfcDev.isOperOngoing )
 800aea0:	4b1d      	ldr	r3, [pc, #116]	@ (800af18 <rfalNfcWorker+0xc70>)
 800aea2:	5ce3      	ldrb	r3, [r4, r3]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d105      	bne.n	800aeb4 <rfalNfcWorker+0xc0c>
                RFAL_EXIT_ON_ERR( err, rfalNfcpCbStartActivation() );
 800aea8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d100      	bne.n	800aeb0 <rfalNfcWorker+0xc08>
 800aeae:	e6fa      	b.n	800aca6 <rfalNfcWorker+0x9fe>
 800aeb0:	4798      	blx	r3
 800aeb2:	e69c      	b.n	800abee <rfalNfcWorker+0x946>
            err = rfalNfcpCbGetActivationStatus();
 800aeb4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d100      	bne.n	800aebc <rfalNfcWorker+0xc14>
 800aeba:	e6f4      	b.n	800aca6 <rfalNfcWorker+0x9fe>
 800aebc:	4798      	blx	r3
 800aebe:	1e02      	subs	r2, r0, #0
            if( err != RFAL_ERR_NONE )
 800aec0:	d000      	beq.n	800aec4 <rfalNfcWorker+0xc1c>
 800aec2:	e697      	b.n	800abf4 <rfalNfcWorker+0x94c>
            gNfcDev.devList[devIt].nfcid = NULL;
 800aec4:	2378      	movs	r3, #120	@ 0x78
 800aec6:	4373      	muls	r3, r6
 800aec8:	18e3      	adds	r3, r4, r3
 800aeca:	0019      	movs	r1, r3
 800aecc:	31d8      	adds	r1, #216	@ 0xd8
 800aece:	6008      	str	r0, [r1, #0]
            gNfcDev.devList[devIt].nfcidLen = 0;
 800aed0:	33dc      	adds	r3, #220	@ 0xdc
 800aed2:	e70b      	b.n	800acec <rfalNfcWorker+0xa44>
            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 800aed4:	f7ff f998 	bl	800a208 <rfalNfcDataExchangeGetStatus>
            if( gNfcDev.dataExErr != RFAL_ERR_BUSY )                                  /* If Dataexchange has terminated */
 800aed8:	23c8      	movs	r3, #200	@ 0xc8
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	5ae3      	ldrh	r3, [r4, r3]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d101      	bne.n	800aee6 <rfalNfcWorker+0xc3e>
 800aee2:	f7ff faa8 	bl	800a436 <rfalNfcWorker+0x18e>
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800aee6:	0023      	movs	r3, r4
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 800aee8:	2021      	movs	r0, #33	@ 0x21
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800aeea:	3398      	adds	r3, #152	@ 0x98
 800aeec:	681b      	ldr	r3, [r3, #0]
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 800aeee:	7020      	strb	r0, [r4, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d000      	beq.n	800aef6 <rfalNfcWorker+0xc4e>
 800aef4:	4798      	blx	r3
            if( gNfcDev.dataExErr == RFAL_ERR_SLEEP_REQ )                             /* Check if Listen mode has to go to Sleep */
 800aef6:	23c8      	movs	r3, #200	@ 0xc8
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	5ae3      	ldrh	r3, [r4, r3]
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 800aefc:	2017      	movs	r0, #23
            if( gNfcDev.dataExErr == RFAL_ERR_SLEEP_REQ )                             /* Check if Listen mode has to go to Sleep */
 800aefe:	2b20      	cmp	r3, #32
 800af00:	d001      	beq.n	800af06 <rfalNfcWorker+0xc5e>
 800af02:	f7ff fa98 	bl	800a436 <rfalNfcWorker+0x18e>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 800af06:	7020      	strb	r0, [r4, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller             */
 800af08:	3498      	adds	r4, #152	@ 0x98
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <rfalNfcWorker+0xc6c>
 800af10:	f7ff fa2d 	bl	800a36e <rfalNfcWorker+0xc6>
 800af14:	f7ff fa8f 	bl	800a436 <rfalNfcWorker+0x18e>
 800af18:	0000032a 	.word	0x0000032a
 800af1c:	20001300 	.word	0x20001300
 800af20:	20001094 	.word	0x20001094
 800af24:	0000020a 	.word	0x0000020a
 800af28:	00000329 	.word	0x00000329
 800af2c:	2000130f 	.word	0x2000130f
 800af30:	20001302 	.word	0x20001302
            err = rfalNfcDeactivation();                                              /* Deactivate current device */
 800af34:	f7fe fea2 	bl	8009c7c <rfalNfcDeactivation>
            if( err != RFAL_ERR_BUSY )
 800af38:	2802      	cmp	r0, #2
 800af3a:	d101      	bne.n	800af40 <rfalNfcWorker+0xc98>
 800af3c:	f7ff fa7b 	bl	800a436 <rfalNfcWorker+0x18e>
                if( gNfcDev.deactType == RFAL_NFC_DEACTIVATE_SLEEP )
 800af40:	4bb9      	ldr	r3, [pc, #740]	@ (800b228 <rfalNfcWorker+0xf80>)
 800af42:	5ce0      	ldrb	r0, [r4, r3]
 800af44:	2801      	cmp	r0, #1
 800af46:	d003      	beq.n	800af50 <rfalNfcWorker+0xca8>
                    gNfcDev.state = ( (gNfcDev.deactType == RFAL_NFC_DEACTIVATE_DISCOVERY) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE );
 800af48:	2802      	cmp	r0, #2
 800af4a:	d0dc      	beq.n	800af06 <rfalNfcWorker+0xc5e>
 800af4c:	2001      	movs	r0, #1
 800af4e:	e7da      	b.n	800af06 <rfalNfcWorker+0xc5e>
 800af50:	200c      	movs	r0, #12
 800af52:	e7d8      	b.n	800af06 <rfalNfcWorker+0xc5e>
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 800af54:	23c7      	movs	r3, #199	@ 0xc7
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	58e0      	ldr	r0, [r4, r3]
 800af5a:	f7f9 fcad 	bl	80048b8 <timerIsExpired>
 800af5e:	1e02      	subs	r2, r0, #0
 800af60:	d007      	beq.n	800af72 <rfalNfcWorker+0xcca>
                    rfalListenStop();
 800af62:	f7f7 fa23 	bl	80023ac <rfalListenStop>
                gNfcDev.isFieldOn = false;
 800af66:	23ca      	movs	r3, #202	@ 0xca
 800af68:	2200      	movs	r2, #0
 800af6a:	009b      	lsls	r3, r3, #2
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800af6c:	2002      	movs	r0, #2
                gNfcDev.isFieldOn = false;
 800af6e:	54e2      	strb	r2, [r4, r3]
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 800af70:	e604      	b.n	800ab7c <rfalNfcWorker+0x8d4>
            if( gNfcDev.lmMask != 0U )                                                /* Check if configured to perform Listen mode */
 800af72:	23c9      	movs	r3, #201	@ 0xc9
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	58e0      	ldr	r0, [r4, r3]
 800af78:	2800      	cmp	r0, #0
 800af7a:	d101      	bne.n	800af80 <rfalNfcWorker+0xcd8>
 800af7c:	f7ff fa5b 	bl	800a436 <rfalNfcWorker+0x18e>
                err = rfalListenStart( gNfcDev.lmMask, &gNfcDev.disc.lmConfigPA, NULL, &gNfcDev.disc.lmConfigPF, (uint8_t*)&gNfcDev.rxBuf.rfBuf, (uint16_t)rfalConvBytesToBits(sizeof(gNfcDev.rxBuf.rfBuf)), &gNfcDev.rxLen );
 800af80:	4daa      	ldr	r5, [pc, #680]	@ (800b22c <rfalNfcWorker+0xf84>)
 800af82:	4bab      	ldr	r3, [pc, #684]	@ (800b230 <rfalNfcWorker+0xf88>)
 800af84:	9502      	str	r5, [sp, #8]
 800af86:	2581      	movs	r5, #129	@ 0x81
 800af88:	012d      	lsls	r5, r5, #4
 800af8a:	9501      	str	r5, [sp, #4]
 800af8c:	4da9      	ldr	r5, [pc, #676]	@ (800b234 <rfalNfcWorker+0xf8c>)
 800af8e:	49aa      	ldr	r1, [pc, #680]	@ (800b238 <rfalNfcWorker+0xf90>)
 800af90:	9500      	str	r5, [sp, #0]
 800af92:	f7f7 fbaf 	bl	80026f4 <rfalListenStart>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_COLAVOIDANCE;               /* Wait for listen mode to be activated */
 800af96:	2315      	movs	r3, #21
                if( err == RFAL_ERR_NONE )
 800af98:	2800      	cmp	r0, #0
 800af9a:	d101      	bne.n	800afa0 <rfalNfcWorker+0xcf8>
 800af9c:	f7ff fb8c 	bl	800a6b8 <rfalNfcWorker+0x410>
 800afa0:	f7ff fa49 	bl	800a436 <rfalNfcWorker+0x18e>
            if( platformTimerIsExpired( gNfcDev.discTmr ) )                           /* Check if the total duration has been reached */
 800afa4:	23c7      	movs	r3, #199	@ 0xc7
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	58e0      	ldr	r0, [r4, r3]
 800afaa:	f7f9 fc85 	bl	80048b8 <timerIsExpired>
 800afae:	2800      	cmp	r0, #0
 800afb0:	d003      	beq.n	800afba <rfalNfcWorker+0xd12>
                    rfalListenStop();
 800afb2:	f7f7 f9fb 	bl	80023ac <rfalListenStop>
                    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                   /* Restart the discovery loop */
 800afb6:	2002      	movs	r0, #2
 800afb8:	e7a5      	b.n	800af06 <rfalNfcWorker+0xc5e>
            if( rfalListenGetState( NULL, NULL ) >= RFAL_LM_STATE_IDLE )
 800afba:	0001      	movs	r1, r0
 800afbc:	f7f7 fa74 	bl	80024a8 <rfalListenGetState>
 800afc0:	2801      	cmp	r0, #1
 800afc2:	d801      	bhi.n	800afc8 <rfalNfcWorker+0xd20>
 800afc4:	f7ff fa37 	bl	800a436 <rfalNfcWorker+0x18e>
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_ACTIVATION;                     /* Wait for listen mode to be activated */
 800afc8:	2316      	movs	r3, #22
 800afca:	f7ff fb75 	bl	800a6b8 <rfalNfcWorker+0x410>
    lmSt = rfalListenGetState( &isDataRcvd, &bitRate );
 800afce:	2612      	movs	r6, #18
 800afd0:	ab02      	add	r3, sp, #8
 800afd2:	18f6      	adds	r6, r6, r3
 800afd4:	2313      	movs	r3, #19
 800afd6:	aa02      	add	r2, sp, #8
 800afd8:	189b      	adds	r3, r3, r2
 800afda:	0019      	movs	r1, r3
 800afdc:	0030      	movs	r0, r6
 800afde:	f7f7 fa63 	bl	80024a8 <rfalListenGetState>
 800afe2:	0005      	movs	r5, r0
    switch(lmSt)
 800afe4:	3801      	subs	r0, #1
 800afe6:	280f      	cmp	r0, #15
 800afe8:	d900      	bls.n	800afec <rfalNfcWorker+0xd44>
 800afea:	e119      	b.n	800b220 <rfalNfcWorker+0xf78>
 800afec:	f7f5 f8a8 	bl	8000140 <__gnu_thumb1_case_shi>
 800aff0:	00e0011a 	.word	0x00e0011a
 800aff4:	0118fa23 	.word	0x0118fa23
 800aff8:	001000aa 	.word	0x001000aa
 800affc:	0118008b 	.word	0x0118008b
 800b000:	00d700cf 	.word	0x00d700cf
 800b004:	fa2300d7 	.word	0xfa2300d7
 800b008:	fa230118 	.word	0xfa230118
 800b00c:	fa230010 	.word	0xfa230010
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 800b010:	7833      	ldrb	r3, [r6, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <rfalNfcWorker+0xd72>
 800b016:	f7ff fa0e 	bl	800a436 <rfalNfcWorker+0x18e>
                if( rfalNfcaListenerIsSleepReq( gNfcDev.rxBuf.rfBuf, rfalConvBitsToBytes(gNfcDev.rxLen)) )     /* Check if received data is a SLP_REQ */
 800b01a:	4e88      	ldr	r6, [pc, #544]	@ (800b23c <rfalNfcWorker+0xf94>)
 800b01c:	4f85      	ldr	r7, [pc, #532]	@ (800b234 <rfalNfcWorker+0xf8c>)
 800b01e:	5ba1      	ldrh	r1, [r4, r6]
 800b020:	0038      	movs	r0, r7
 800b022:	3107      	adds	r1, #7
 800b024:	08c9      	lsrs	r1, r1, #3
 800b026:	f001 fecd 	bl	800cdc4 <rfalNfcaListenerIsSleepReq>
 800b02a:	9005      	str	r0, [sp, #20]
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d00e      	beq.n	800b04e <rfalNfcWorker+0xda6>
                    RFAL_EXIT_ON_ERR( ret, rfalListenSleepStart( RFAL_LM_STATE_SLEEP_A, gNfcDev.rxBuf.rfBuf, sizeof(gNfcDev.rxBuf.rfBuf), &gNfcDev.rxLen ) );
 800b030:	2281      	movs	r2, #129	@ 0x81
 800b032:	0039      	movs	r1, r7
 800b034:	200c      	movs	r0, #12
 800b036:	4b7d      	ldr	r3, [pc, #500]	@ (800b22c <rfalNfcWorker+0xf84>)
 800b038:	0052      	lsls	r2, r2, #1
 800b03a:	f7f7 f9e5 	bl	8002408 <rfalListenSleepStart>
                    RFAL_EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800b03e:	1e05      	subs	r5, r0, #0
 800b040:	d101      	bne.n	800b046 <rfalNfcWorker+0xd9e>
 800b042:	f7ff f9f8 	bl	800a436 <rfalNfcWorker+0x18e>
            if( err != RFAL_ERR_BUSY )
 800b046:	2d02      	cmp	r5, #2
 800b048:	d13e      	bne.n	800b0c8 <rfalNfcWorker+0xe20>
 800b04a:	f7ff f9f4 	bl	800a436 <rfalNfcWorker+0x18e>
                else if( rfalIsoDepIsRats( gNfcDev.rxBuf.rfBuf, (uint8_t)rfalConvBitsToBytes(gNfcDev.rxLen) ) )
 800b04e:	5ba1      	ldrh	r1, [r4, r6]
 800b050:	0038      	movs	r0, r7
 800b052:	3107      	adds	r1, #7
 800b054:	08c9      	lsrs	r1, r1, #3
 800b056:	b2c9      	uxtb	r1, r1
 800b058:	f7fd ffb4 	bl	8008fc4 <rfalIsoDepIsRats>
 800b05c:	1e05      	subs	r5, r0, #0
 800b05e:	d024      	beq.n	800b0aa <rfalNfcWorker+0xe02>
                    atsParam.fsci       = (uint8_t)RFAL_ISODEP_DEFAULT_FSCI;
 800b060:	4b77      	ldr	r3, [pc, #476]	@ (800b240 <rfalNfcWorker+0xf98>)
                    atsParam.ta         = RFAL_ISODEP_ATS_TA_SAME_D;
 800b062:	aa02      	add	r2, sp, #8
                    atsParam.fsci       = (uint8_t)RFAL_ISODEP_DEFAULT_FSCI;
 800b064:	9307      	str	r3, [sp, #28]
                    atsParam.ta         = RFAL_ISODEP_ATS_TA_SAME_D;
 800b066:	2380      	movs	r3, #128	@ 0x80
 800b068:	7613      	strb	r3, [r2, #24]
                    atsParam.hb         = NULL;
 800b06a:	9b05      	ldr	r3, [sp, #20]
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_4A );                   /* Set next state CE T4T */
 800b06c:	2007      	movs	r0, #7
                    atsParam.hb         = NULL;
 800b06e:	9309      	str	r3, [sp, #36]	@ 0x24
                    atsParam.hbLen      = 0;
 800b070:	0013      	movs	r3, r2
 800b072:	2220      	movs	r2, #32
 800b074:	189b      	adds	r3, r3, r2
 800b076:	9a05      	ldr	r2, [sp, #20]
                    rxParam.rxBuf        = (rfalIsoDepBufFormat*) &gNfcDev.rxBuf.isoDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800b078:	970b      	str	r7, [sp, #44]	@ 0x2c
                    atsParam.hbLen      = 0;
 800b07a:	701a      	strb	r2, [r3, #0]
                    rxParam.rxLen        = &gNfcDev.rxLen;
 800b07c:	4b6b      	ldr	r3, [pc, #428]	@ (800b22c <rfalNfcWorker+0xf84>)
                    rxParam.rxBuf        = (rfalIsoDepBufFormat*) &gNfcDev.rxBuf.isoDepBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800b07e:	ad0b      	add	r5, sp, #44	@ 0x2c
                    rxParam.rxLen        = &gNfcDev.rxLen;
 800b080:	930c      	str	r3, [sp, #48]	@ 0x30
                    rxParam.isoDepDev    = &gNfcDev.devList->proto.isoDep;
 800b082:	4b70      	ldr	r3, [pc, #448]	@ (800b244 <rfalNfcWorker+0xf9c>)
 800b084:	930e      	str	r3, [sp, #56]	@ 0x38
                    rxParam.isRxChaining = &gNfcDev.isRxChaining;
 800b086:	4b70      	ldr	r3, [pc, #448]	@ (800b248 <rfalNfcWorker+0xfa0>)
 800b088:	930d      	str	r3, [sp, #52]	@ 0x34
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_4A );                   /* Set next state CE T4T */
 800b08a:	f7f7 fa1f 	bl	80024cc <rfalListenSetState>
                    rfalIsoDepInitialize();                                           /* Initialize ISO-DEP layer to handle ISO14443-a activation / RATS */
 800b08e:	f7fd fd77 	bl	8008b80 <rfalIsoDepInitialize>
                    RFAL_EXIT_ON_ERR( ret, rfalIsoDepListenStartActivation( &atsParam, NULL, gNfcDev.rxBuf.rfBuf, gNfcDev.rxLen, rxParam ) );
 800b092:	466a      	mov	r2, sp
 800b094:	5ba3      	ldrh	r3, [r4, r6]
 800b096:	cd43      	ldmia	r5!, {r0, r1, r6}
 800b098:	c243      	stmia	r2!, {r0, r1, r6}
 800b09a:	6829      	ldr	r1, [r5, #0]
 800b09c:	a807      	add	r0, sp, #28
 800b09e:	6011      	str	r1, [r2, #0]
 800b0a0:	9905      	ldr	r1, [sp, #20]
 800b0a2:	003a      	movs	r2, r7
 800b0a4:	f7fd ff9a 	bl	8008fdc <rfalIsoDepListenStartActivation>
 800b0a8:	e7c9      	b.n	800b03e <rfalNfcWorker+0xd96>
                else if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 800b0aa:	0023      	movs	r3, r4
 800b0ac:	5ba1      	ldrh	r1, [r4, r6]
 800b0ae:	4f67      	ldr	r7, [pc, #412]	@ (800b24c <rfalNfcWorker+0xfa4>)
 800b0b0:	3107      	adds	r1, #7
 800b0b2:	08c9      	lsrs	r1, r1, #3
 800b0b4:	33d8      	adds	r3, #216	@ 0xd8
 800b0b6:	3902      	subs	r1, #2
 800b0b8:	0038      	movs	r0, r7
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	b289      	uxth	r1, r1
 800b0be:	f000 fa8b 	bl	800b5d8 <rfalNfcDepIsAtrReq>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d111      	bne.n	800b0ea <rfalNfcWorker+0xe42>
                    return RFAL_ERR_PROTO;
 800b0c6:	250b      	movs	r5, #11
                else if( (!platformTimerIsExpired( gNfcDev.discTmr )) && (err == RFAL_ERR_LINK_LOSS) && (gNfcDev.state == RFAL_NFC_STATE_LISTEN_ACTIVATION) )
 800b0c8:	23c7      	movs	r3, #199	@ 0xc7
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	58e0      	ldr	r0, [r4, r3]
 800b0ce:	f7f9 fbf3 	bl	80048b8 <timerIsExpired>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d000      	beq.n	800b0d8 <rfalNfcWorker+0xe30>
 800b0d6:	e76c      	b.n	800afb2 <rfalNfcWorker+0xd0a>
 800b0d8:	2d25      	cmp	r5, #37	@ 0x25
 800b0da:	d000      	beq.n	800b0de <rfalNfcWorker+0xe36>
 800b0dc:	e769      	b.n	800afb2 <rfalNfcWorker+0xd0a>
 800b0de:	7823      	ldrb	r3, [r4, #0]
 800b0e0:	2b16      	cmp	r3, #22
 800b0e2:	d000      	beq.n	800b0e6 <rfalNfcWorker+0xe3e>
 800b0e4:	e765      	b.n	800afb2 <rfalNfcWorker+0xd0a>
 800b0e6:	f7ff f9a6 	bl	800a436 <rfalNfcWorker+0x18e>
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 800b0ea:	0020      	movs	r0, r4
 800b0ec:	230a      	movs	r3, #10
                    RFAL_EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800b0ee:	003a      	movs	r2, r7
 800b0f0:	0029      	movs	r1, r5
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCA;
 800b0f2:	30c0      	adds	r0, #192	@ 0xc0
 800b0f4:	7003      	strb	r3, [r0, #0]
                    RFAL_EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800b0f6:	5ba3      	ldrh	r3, [r4, r6]
 800b0f8:	3307      	adds	r3, #7
 800b0fa:	08db      	lsrs	r3, r3, #3
 800b0fc:	3b02      	subs	r3, #2
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	f7fe fe3a 	bl	8009d78 <rfalNfcNfcDepActivate>
 800b104:	e79b      	b.n	800b03e <rfalNfcWorker+0xd96>
            ret = rfalIsoDepListenGetActivationStatus();
 800b106:	f7fe f80b 	bl	8009120 <rfalIsoDepListenGetActivationStatus>
 800b10a:	1e05      	subs	r5, r0, #0
            if( ret == RFAL_ERR_NONE )
 800b10c:	d117      	bne.n	800b13e <rfalNfcWorker+0xe96>
                gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCA;
 800b10e:	0023      	movs	r3, r4
 800b110:	220a      	movs	r2, #10
 800b112:	33c0      	adds	r3, #192	@ 0xc0
 800b114:	701a      	strb	r2, [r3, #0]
 800b116:	2301      	movs	r3, #1
 800b118:	0002      	movs	r2, r0
                gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_ISODEP;
 800b11a:	0021      	movs	r1, r4
 800b11c:	31dd      	adds	r1, #221	@ 0xdd
 800b11e:	700b      	strb	r3, [r1, #0]
                gNfcDev.devList->nfcid       = NULL;
 800b120:	0023      	movs	r3, r4
 800b122:	33d8      	adds	r3, #216	@ 0xd8
 800b124:	601d      	str	r5, [r3, #0]
                gNfcDev.devList->nfcidLen    = 0;
 800b126:	0023      	movs	r3, r4
 800b128:	33dc      	adds	r3, #220	@ 0xdc
 800b12a:	701a      	strb	r2, [r3, #0]
                    gNfcDev.devCnt++;
 800b12c:	22c6      	movs	r2, #198	@ 0xc6
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 800b12e:	4b48      	ldr	r3, [pc, #288]	@ (800b250 <rfalNfcWorker+0xfa8>)
                    gNfcDev.devCnt++;
 800b130:	0092      	lsls	r2, r2, #2
                    gNfcDev.activeDev = gNfcDev.devList;                              /* Assign the active device to be used further on */
 800b132:	60e3      	str	r3, [r4, #12]
                    gNfcDev.devCnt++;
 800b134:	5ca3      	ldrb	r3, [r4, r2]
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 800b136:	201e      	movs	r0, #30
                    gNfcDev.devCnt++;
 800b138:	3301      	adds	r3, #1
 800b13a:	54a3      	strb	r3, [r4, r2]
                    gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                         /* Device has been properly activated */
 800b13c:	e6e3      	b.n	800af06 <rfalNfcWorker+0xc5e>
            return ( (ret == RFAL_ERR_LINK_LOSS) ? RFAL_ERR_PROTO : ret);             /* Link loss during protocol activation, reMap error */
 800b13e:	2825      	cmp	r0, #37	@ 0x25
 800b140:	d0c1      	beq.n	800b0c6 <rfalNfcWorker+0xe1e>
 800b142:	e780      	b.n	800b046 <rfalNfcWorker+0xd9e>
            if( isDataRcvd )                                                          /* Wait for the first received data */
 800b144:	7833      	ldrb	r3, [r6, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d101      	bne.n	800b14e <rfalNfcWorker+0xea6>
 800b14a:	f7ff f974 	bl	800a436 <rfalNfcWorker+0x18e>
                if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), gNfcDev.devList->nfcid ) )
 800b14e:	0023      	movs	r3, r4
 800b150:	4e3a      	ldr	r6, [pc, #232]	@ (800b23c <rfalNfcWorker+0xf94>)
 800b152:	4d40      	ldr	r5, [pc, #256]	@ (800b254 <rfalNfcWorker+0xfac>)
 800b154:	5ba1      	ldrh	r1, [r4, r6]
 800b156:	33d8      	adds	r3, #216	@ 0xd8
 800b158:	3107      	adds	r1, #7
 800b15a:	08c9      	lsrs	r1, r1, #3
 800b15c:	3901      	subs	r1, #1
 800b15e:	0028      	movs	r0, r5
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	b289      	uxth	r1, r1
 800b164:	f000 fa38 	bl	800b5d8 <rfalNfcDepIsAtrReq>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d00b      	beq.n	800b184 <rfalNfcWorker+0xedc>
                    gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_NFCF;
 800b16c:	0020      	movs	r0, r4
 800b16e:	230c      	movs	r3, #12
 800b170:	30c0      	adds	r0, #192	@ 0xc0
 800b172:	7003      	strb	r3, [r0, #0]
                    RFAL_EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_PASSIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800b174:	5ba3      	ldrh	r3, [r4, r6]
 800b176:	002a      	movs	r2, r5
 800b178:	3307      	adds	r3, #7
 800b17a:	08db      	lsrs	r3, r3, #3
 800b17c:	3b01      	subs	r3, #1
 800b17e:	2100      	movs	r1, #0
 800b180:	b29b      	uxth	r3, r3
 800b182:	e7bd      	b.n	800b100 <rfalNfcWorker+0xe58>
                    rfalListenSetState( RFAL_LM_STATE_CARDEMU_3 );                    /* First data already received - set T3T CE */
 800b184:	2009      	movs	r0, #9
 800b186:	f7f7 f9a1 	bl	80024cc <rfalListenSetState>
            if( err != RFAL_ERR_BUSY )
 800b18a:	f7ff f954 	bl	800a436 <rfalNfcWorker+0x18e>
            gNfcDev.devList->type        = RFAL_NFC_POLL_TYPE_NFCF;
 800b18e:	0023      	movs	r3, r4
 800b190:	220c      	movs	r2, #12
 800b192:	33c0      	adds	r3, #192	@ 0xc0
 800b194:	701a      	strb	r2, [r3, #0]
 800b196:	2300      	movs	r3, #0
 800b198:	001d      	movs	r5, r3
 800b19a:	001a      	movs	r2, r3
 800b19c:	e7bd      	b.n	800b11a <rfalNfcWorker+0xe72>
            ret = rfalNfcDepListenGetActivationStatus();
 800b19e:	f000 fc7f 	bl	800baa0 <rfalNfcDepListenGetActivationStatus>
 800b1a2:	1e05      	subs	r5, r0, #0
            if( ret == RFAL_ERR_NONE )
 800b1a4:	d000      	beq.n	800b1a8 <rfalNfcWorker+0xf00>
 800b1a6:	e74e      	b.n	800b046 <rfalNfcWorker+0xd9e>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	220a      	movs	r2, #10
 800b1ac:	4d2a      	ldr	r5, [pc, #168]	@ (800b258 <rfalNfcWorker+0xfb0>)
 800b1ae:	e7b4      	b.n	800b11a <rfalNfcWorker+0xe72>
            if( isDataRcvd )                                                          /* Check if Reader/Initator has sent some data */
 800b1b0:	7833      	ldrb	r3, [r6, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <rfalNfcWorker+0xf12>
 800b1b6:	f7ff f93e 	bl	800a436 <rfalNfcWorker+0x18e>
                if( (gNfcDev.lmMask & RFAL_LM_MASK_ACTIVE_P2P) != 0U )                /* Check if AP2P is enabled */
 800b1ba:	23c9      	movs	r3, #201	@ 0xc9
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	58e3      	ldr	r3, [r4, r3]
 800b1c0:	049b      	lsls	r3, r3, #18
 800b1c2:	d401      	bmi.n	800b1c8 <rfalNfcWorker+0xf20>
 800b1c4:	f7ff f937 	bl	800a436 <rfalNfcWorker+0x18e>
                    hdrLen = ( (bitRate == RFAL_BR_106) ? (RFAL_NFCDEP_SB_LEN + RFAL_NFCDEP_LEN_LEN) : RFAL_NFCDEP_LEN_LEN );
 800b1c8:	ab02      	add	r3, sp, #8
 800b1ca:	7cdb      	ldrb	r3, [r3, #19]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d000      	beq.n	800b1d2 <rfalNfcWorker+0xf2a>
 800b1d0:	2501      	movs	r5, #1
                    if( rfalNfcDepIsAtrReq( &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen), NULL) )
 800b1d2:	4b22      	ldr	r3, [pc, #136]	@ (800b25c <rfalNfcWorker+0xfb4>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	18ee      	adds	r6, r5, r3
 800b1d8:	19a3      	adds	r3, r4, r6
 800b1da:	4e18      	ldr	r6, [pc, #96]	@ (800b23c <rfalNfcWorker+0xf94>)
 800b1dc:	9305      	str	r3, [sp, #20]
 800b1de:	5ba1      	ldrh	r1, [r4, r6]
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	3107      	adds	r1, #7
 800b1e4:	08c9      	lsrs	r1, r1, #3
 800b1e6:	1b49      	subs	r1, r1, r5
 800b1e8:	b289      	uxth	r1, r1
 800b1ea:	f000 f9f5 	bl	800b5d8 <rfalNfcDepIsAtrReq>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d100      	bne.n	800b1f4 <rfalNfcWorker+0xf4c>
 800b1f2:	e768      	b.n	800b0c6 <rfalNfcWorker+0xe1e>
                        gNfcDev.devList->type = RFAL_NFC_POLL_TYPE_AP2P;
 800b1f4:	0027      	movs	r7, r4
 800b1f6:	230f      	movs	r3, #15
 800b1f8:	37c0      	adds	r7, #192	@ 0xc0
 800b1fa:	703b      	strb	r3, [r7, #0]
                        rfalSetMode( (RFAL_MODE_LISTEN_ACTIVE_P2P), bitRate, bitRate );
 800b1fc:	ab02      	add	r3, sp, #8
 800b1fe:	7cd9      	ldrb	r1, [r3, #19]
 800b200:	200d      	movs	r0, #13
 800b202:	000a      	movs	r2, r1
 800b204:	f7f6 fd36 	bl	8001c74 <rfalSetMode>
                        rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_LISTENER );
 800b208:	2040      	movs	r0, #64	@ 0x40
 800b20a:	f7f6 fe65 	bl	8001ed8 <rfalSetFDTListen>
                        RFAL_EXIT_ON_ERR( ret, rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, &gNfcDev.rxBuf.rfBuf[hdrLen], (rfalConvBitsToBytes(gNfcDev.rxLen) - hdrLen) ) );
 800b20e:	5ba3      	ldrh	r3, [r4, r6]
 800b210:	2101      	movs	r1, #1
 800b212:	3307      	adds	r3, #7
 800b214:	08db      	lsrs	r3, r3, #3
 800b216:	1b5b      	subs	r3, r3, r5
 800b218:	0038      	movs	r0, r7
 800b21a:	9a05      	ldr	r2, [sp, #20]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	e76f      	b.n	800b100 <rfalNfcWorker+0xe58>
    return RFAL_ERR_INTERNAL;
 800b220:	250c      	movs	r5, #12
 800b222:	e751      	b.n	800b0c8 <rfalNfcWorker+0xe20>
            return RFAL_ERR_LINK_LOSS;
 800b224:	2525      	movs	r5, #37	@ 0x25
 800b226:	e74f      	b.n	800b0c8 <rfalNfcWorker+0xe20>
 800b228:	00000322 	.word	0x00000322
 800b22c:	2000171a 	.word	0x2000171a
 800b230:	20001054 	.word	0x20001054
 800b234:	20001515 	.word	0x20001515
 800b238:	20001046 	.word	0x20001046
 800b23c:	00000746 	.word	0x00000746
 800b240:	00000808 	.word	0x00000808
 800b244:	200010b4 	.word	0x200010b4
 800b248:	200012f7 	.word	0x200012f7
 800b24c:	20001517 	.word	0x20001517
 800b250:	20001094 	.word	0x20001094
 800b254:	20001516 	.word	0x20001516
 800b258:	200010b6 	.word	0x200010b6
 800b25c:	00000541 	.word	0x00000541

0800b260 <nfcipClearCounters>:
static void nfcipClearCounters( void )
{
    gNfcip.cntATNRetrys  = 0;
    gNfcip.cntNACKRetrys = 0;
    gNfcip.cntTORetrys   = 0;
    gNfcip.cntTxRetrys   = 0;
 800b260:	2200      	movs	r2, #0
 800b262:	4b04      	ldr	r3, [pc, #16]	@ (800b274 <nfcipClearCounters+0x14>)
 800b264:	4904      	ldr	r1, [pc, #16]	@ (800b278 <nfcipClearCounters+0x18>)
 800b266:	800a      	strh	r2, [r1, #0]
    gNfcip.cntRTOXRetrys = 0;
 800b268:	0019      	movs	r1, r3
    gNfcip.cntATNRetrys  = 0;
 800b26a:	335a      	adds	r3, #90	@ 0x5a
    gNfcip.cntRTOXRetrys = 0;
 800b26c:	3158      	adds	r1, #88	@ 0x58
 800b26e:	800a      	strh	r2, [r1, #0]
    gNfcip.cntATNRetrys  = 0;
 800b270:	701a      	strb	r2, [r3, #0]
}
 800b272:	4770      	bx	lr
 800b274:	20001820 	.word	0x20001820
 800b278:	20001876 	.word	0x20001876

0800b27c <nfcipTx>:
}


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 800b27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b27e:	b087      	sub	sp, #28
 800b280:	9305      	str	r3, [sp, #20]
 800b282:	ab0c      	add	r3, sp, #48	@ 0x30
 800b284:	0007      	movs	r7, r0
 800b286:	0014      	movs	r4, r2
 800b288:	781b      	ldrb	r3, [r3, #0]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 800b28a:	2900      	cmp	r1, #0
 800b28c:	d103      	bne.n	800b296 <nfcipTx+0x1a>
    {
        return RFAL_ERR_PARAM;
 800b28e:	2307      	movs	r3, #7
        return RFAL_ERR_NOTSUPP;
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
}
 800b290:	0018      	movs	r0, r3
 800b292:	b007      	add	sp, #28
 800b294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 800b296:	9a05      	ldr	r2, [sp, #20]
 800b298:	2a00      	cmp	r2, #0
 800b29a:	d001      	beq.n	800b2a0 <nfcipTx+0x24>
 800b29c:	2c00      	cmp	r4, #0
 800b29e:	d100      	bne.n	800b2a2 <nfcipTx+0x26>
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 800b2a0:	1d4c      	adds	r4, r1, #5
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 800b2a2:	4a5e      	ldr	r2, [pc, #376]	@ (800b41c <nfcipTx+0x1a0>)
 800b2a4:	4e5e      	ldr	r6, [pc, #376]	@ (800b420 <nfcipTx+0x1a4>)
 800b2a6:	7017      	strb	r7, [r2, #0]
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 800b2a8:	0032      	movs	r2, r6
 800b2aa:	21ff      	movs	r1, #255	@ 0xff
 800b2ac:	3253      	adds	r2, #83	@ 0x53
    switch( cmd )
 800b2ae:	1eb8      	subs	r0, r7, #2
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 800b2b0:	7011      	strb	r1, [r2, #0]
    switch( cmd )
 800b2b2:	2809      	cmp	r0, #9
 800b2b4:	d806      	bhi.n	800b2c4 <nfcipTx+0x48>
 800b2b6:	f7f4 ff39 	bl	800012c <__gnu_thumb1_case_uqi>
 800b2ba:	705f      	.short	0x705f
 800b2bc:	7b7b7070 	.word	0x7b7b7070
 800b2c0:	75757575 	.word	0x75757575
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 800b2c4:	220a      	movs	r2, #10
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	0020      	movs	r0, r4
 800b2ca:	f004 fffd 	bl	80102c8 <memset>
 800b2ce:	7c72      	ldrb	r2, [r6, #17]
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	d003      	beq.n	800b2dc <nfcipTx+0x60>
 800b2d4:	0020      	movs	r0, r4
 800b2d6:	4953      	ldr	r1, [pc, #332]	@ (800b424 <nfcipTx+0x1a8>)
 800b2d8:	f005 f82a 	bl	8010330 <memcpy>
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 800b2dc:	78f3      	ldrb	r3, [r6, #3]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 800b2de:	250d      	movs	r5, #13
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 800b2e0:	72a3      	strb	r3, [r4, #10]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 800b2e2:	7973      	ldrb	r3, [r6, #5]
 800b2e4:	72e3      	strb	r3, [r4, #11]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 800b2e6:	79b3      	ldrb	r3, [r6, #6]
 800b2e8:	7323      	strb	r3, [r4, #12]
            if( cmd == NFCIP_CMD_ATR_RES )
 800b2ea:	2f01      	cmp	r7, #1
 800b2ec:	d104      	bne.n	800b2f8 <nfcipTx+0x7c>
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 800b2ee:	0033      	movs	r3, r6
 800b2f0:	3344      	adds	r3, #68	@ 0x44
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	3501      	adds	r5, #1
 800b2f6:	7363      	strb	r3, [r4, #13]
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 800b2f8:	0033      	movs	r3, r6
 800b2fa:	2130      	movs	r1, #48	@ 0x30
 800b2fc:	3343      	adds	r3, #67	@ 0x43
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	1962      	adds	r2, r4, r5
 800b302:	011b      	lsls	r3, r3, #4
 800b304:	400b      	ands	r3, r1
            if( gNfcip.cfg.gbLen > 0U)
 800b306:	4948      	ldr	r1, [pc, #288]	@ (800b428 <nfcipTx+0x1ac>)
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 800b308:	3501      	adds	r5, #1
            if( gNfcip.cfg.gbLen > 0U)
 800b30a:	7809      	ldrb	r1, [r1, #0]
 800b30c:	2900      	cmp	r1, #0
 800b30e:	d031      	beq.n	800b374 <nfcipTx+0xf8>
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 800b310:	2102      	movs	r1, #2
 800b312:	430b      	orrs	r3, r1
 800b314:	7013      	strb	r3, [r2, #0]
                RFAL_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 800b316:	4b44      	ldr	r3, [pc, #272]	@ (800b428 <nfcipTx+0x1ac>)
 800b318:	1960      	adds	r0, r4, r5
 800b31a:	781a      	ldrb	r2, [r3, #0]
 800b31c:	4943      	ldr	r1, [pc, #268]	@ (800b42c <nfcipTx+0x1b0>)
 800b31e:	f005 f807 	bl	8010330 <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 800b322:	4b41      	ldr	r3, [pc, #260]	@ (800b428 <nfcipTx+0x1ac>)
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	18ed      	adds	r5, r5, r3
 800b328:	b2ad      	uxth	r5, r5
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 800b32a:	1cab      	adds	r3, r5, #2
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	2b40      	cmp	r3, #64	@ 0x40
 800b330:	d8ad      	bhi.n	800b28e <nfcipTx+0x12>
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 800b332:	0020      	movs	r0, r4
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 800b334:	1e43      	subs	r3, r0, #1
 800b336:	701f      	strb	r7, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 800b338:	2301      	movs	r3, #1
 800b33a:	401f      	ands	r7, r3
 800b33c:	9b05      	ldr	r3, [sp, #20]
 800b33e:	3802      	subs	r0, #2
 800b340:	18ed      	adds	r5, r5, r3
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800b342:	0033      	movs	r3, r6
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 800b344:	3f2c      	subs	r7, #44	@ 0x2c
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800b346:	335c      	adds	r3, #92	@ 0x5c
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 800b348:	7007      	strb	r7, [r0, #0]
    txBufIt += paylLen + (uint16_t)((uintptr_t)payloadBuf - (uintptr_t)txBlock);         /* Calculate overall buffer size */
 800b34a:	1a24      	subs	r4, r4, r0
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800b34c:	881a      	ldrh	r2, [r3, #0]
    txBufIt += paylLen + (uint16_t)((uintptr_t)payloadBuf - (uintptr_t)txBlock);         /* Calculate overall buffer size */
 800b34e:	192d      	adds	r5, r5, r4
 800b350:	b2a9      	uxth	r1, r5
        return RFAL_ERR_NOTSUPP;
 800b352:	2318      	movs	r3, #24
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800b354:	428a      	cmp	r2, r1
 800b356:	d39b      	bcc.n	800b290 <nfcipTx+0x14>


/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 800b358:	0033      	movs	r3, r6
 800b35a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b35c:	336a      	adds	r3, #106	@ 0x6a
 800b35e:	881b      	ldrh	r3, [r3, #0]
 800b360:	9202      	str	r2, [sp, #8]
 800b362:	2204      	movs	r2, #4
 800b364:	9201      	str	r2, [sp, #4]
 800b366:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
 800b368:	9200      	str	r2, [sp, #0]
 800b36a:	6e72      	ldr	r2, [r6, #100]	@ 0x64
 800b36c:	f7f8 f91c 	bl	80035a8 <rfalTransceiveBlockingTx>
 800b370:	0003      	movs	r3, r0
    return nfcipDataTx( txBlock, txBufIt, fwt );
 800b372:	e78d      	b.n	800b290 <nfcipTx+0x14>
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 800b374:	7013      	strb	r3, [r2, #0]
 800b376:	e7dc      	b.n	800b332 <nfcipTx+0xb6>
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 800b378:	220a      	movs	r2, #10
 800b37a:	2100      	movs	r1, #0
 800b37c:	0020      	movs	r0, r4
 800b37e:	f004 ffa3 	bl	80102c8 <memset>
 800b382:	7c72      	ldrb	r2, [r6, #17]
 800b384:	2a00      	cmp	r2, #0
 800b386:	d003      	beq.n	800b390 <nfcipTx+0x114>
 800b388:	0020      	movs	r0, r4
 800b38a:	4926      	ldr	r1, [pc, #152]	@ (800b424 <nfcipTx+0x1a8>)
 800b38c:	f004 ffd0 	bl	8010330 <memcpy>
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800b390:	78f3      	ldrb	r3, [r6, #3]
 800b392:	1e60      	subs	r0, r4, #1
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 800b394:	250a      	movs	r5, #10
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800b396:	7003      	strb	r3, [r0, #0]
            break;
 800b398:	e7cc      	b.n	800b334 <nfcipTx+0xb8>
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800b39a:	78f3      	ldrb	r3, [r6, #3]
 800b39c:	1e60      	subs	r0, r4, #1
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 800b39e:	7003      	strb	r3, [r0, #0]
    txBufIt  = 0;
 800b3a0:	2500      	movs	r5, #0
 800b3a2:	e7c7      	b.n	800b334 <nfcipTx+0xb8>
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 800b3a4:	78f3      	ldrb	r3, [r6, #3]
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 800b3a6:	0020      	movs	r0, r4
    txBufIt  = 0;
 800b3a8:	1e1d      	subs	r5, r3, #0
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 800b3aa:	d0c3      	beq.n	800b334 <nfcipTx+0xb8>
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 800b3ac:	1e60      	subs	r0, r4, #1
 800b3ae:	e7f6      	b.n	800b39e <nfcipTx+0x122>
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 800b3b0:	78f2      	ldrb	r2, [r6, #3]
 800b3b2:	2a00      	cmp	r2, #0
 800b3b4:	d001      	beq.n	800b3ba <nfcipTx+0x13e>
 800b3b6:	2204      	movs	r2, #4
 800b3b8:	4313      	orrs	r3, r2
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 800b3ba:	7932      	ldrb	r2, [r6, #4]
 800b3bc:	2a00      	cmp	r2, #0
 800b3be:	d001      	beq.n	800b3c4 <nfcipTx+0x148>
 800b3c0:	2108      	movs	r1, #8
 800b3c2:	430b      	orrs	r3, r1
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 800b3c4:	0031      	movs	r1, r6
 800b3c6:	315e      	adds	r1, #94	@ 0x5e
 800b3c8:	7809      	ldrb	r1, [r1, #0]
 800b3ca:	2900      	cmp	r1, #0
 800b3cc:	d003      	beq.n	800b3d6 <nfcipTx+0x15a>
 800b3ce:	2b1f      	cmp	r3, #31
 800b3d0:	d801      	bhi.n	800b3d6 <nfcipTx+0x15a>
 800b3d2:	2110      	movs	r1, #16
 800b3d4:	430b      	orrs	r3, r1
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 800b3d6:	0031      	movs	r1, r6
 800b3d8:	3153      	adds	r1, #83	@ 0x53
            if( !nfcip_PFBisSATN(pfb) )
 800b3da:	0018      	movs	r0, r3
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 800b3dc:	700b      	strb	r3, [r1, #0]
            if( !nfcip_PFBisSATN(pfb) )
 800b3de:	210f      	movs	r1, #15
 800b3e0:	4388      	bics	r0, r1
 800b3e2:	2880      	cmp	r0, #128	@ 0x80
 800b3e4:	d002      	beq.n	800b3ec <nfcipTx+0x170>
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 800b3e6:	0031      	movs	r1, r6
 800b3e8:	3154      	adds	r1, #84	@ 0x54
 800b3ea:	700b      	strb	r3, [r1, #0]
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 800b3ec:	0020      	movs	r0, r4
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 800b3ee:	2a00      	cmp	r2, #0
 800b3f0:	d001      	beq.n	800b3f6 <nfcipTx+0x17a>
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800b3f2:	1e60      	subs	r0, r4, #1
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 800b3f4:	7002      	strb	r2, [r0, #0]
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 800b3f6:	78f2      	ldrb	r2, [r6, #3]
 800b3f8:	2a00      	cmp	r2, #0
 800b3fa:	d001      	beq.n	800b400 <nfcipTx+0x184>
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 800b3fc:	3801      	subs	r0, #1
 800b3fe:	7002      	strb	r2, [r0, #0]
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 800b400:	9a05      	ldr	r2, [sp, #20]
            *(--txBlock) = pfb;                                                          /* PFB */
 800b402:	3801      	subs	r0, #1
 800b404:	7003      	strb	r3, [r0, #0]
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 800b406:	2a00      	cmp	r2, #0
 800b408:	d1ca      	bne.n	800b3a0 <nfcipTx+0x124>
 800b40a:	78b2      	ldrb	r2, [r6, #2]
 800b40c:	0752      	lsls	r2, r2, #29
 800b40e:	d502      	bpl.n	800b416 <nfcipTx+0x19a>
 800b410:	2b1f      	cmp	r3, #31
 800b412:	d800      	bhi.n	800b416 <nfcipTx+0x19a>
 800b414:	e73b      	b.n	800b28e <nfcipTx+0x12>
    txBufIt  = 0;
 800b416:	9d05      	ldr	r5, [sp, #20]
 800b418:	e78c      	b.n	800b334 <nfcipTx+0xb8>
 800b41a:	46c0      	nop			@ (mov r8, r8)
 800b41c:	20001872 	.word	0x20001872
 800b420:	20001820 	.word	0x20001820
 800b424:	20001827 	.word	0x20001827
 800b428:	20001862 	.word	0x20001862
 800b42c:	20001832 	.word	0x20001832

0800b430 <nfcipDEPControlMsg>:
{
 800b430:	b530      	push	{r4, r5, lr}
 800b432:	230f      	movs	r3, #15
 800b434:	0005      	movs	r5, r0
 800b436:	0002      	movs	r2, r0
    const rfalNfcDepCmd depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);
 800b438:	4814      	ldr	r0, [pc, #80]	@ (800b48c <nfcipDEPControlMsg+0x5c>)
 800b43a:	439d      	bics	r5, r3
 800b43c:	7803      	ldrb	r3, [r0, #0]
{
 800b43e:	b089      	sub	sp, #36	@ 0x24
 800b440:	000c      	movs	r4, r1
 800b442:	a903      	add	r1, sp, #12
    const rfalNfcDepCmd depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);
 800b444:	2b01      	cmp	r3, #1
 800b446:	d108      	bne.n	800b45a <nfcipDEPControlMsg+0x2a>
    if( nfcip_PFBisSTO( pfb ) )
 800b448:	2d90      	cmp	r5, #144	@ 0x90
 800b44a:	d01b      	beq.n	800b484 <nfcipDEPControlMsg+0x54>
    const rfalNfcDepCmd depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);
 800b44c:	2007      	movs	r0, #7
 800b44e:	3b02      	subs	r3, #2
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 800b450:	9301      	str	r3, [sp, #4]
 800b452:	2300      	movs	r3, #0
 800b454:	9200      	str	r2, [sp, #0]
 800b456:	001a      	movs	r2, r3
 800b458:	e00d      	b.n	800b476 <nfcipDEPControlMsg+0x46>
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 800b45a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800b45c:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800b45e:	2d90      	cmp	r5, #144	@ 0x90
 800b460:	d10d      	bne.n	800b47e <nfcipDEPControlMsg+0x4e>
 800b462:	4363      	muls	r3, r4
 800b464:	181b      	adds	r3, r3, r0
    const rfalNfcDepCmd depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);
 800b466:	2006      	movs	r0, #6
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 800b468:	714c      	strb	r4, [r1, #5]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 800b46a:	2211      	movs	r2, #17
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	2390      	movs	r3, #144	@ 0x90
 800b470:	446a      	add	r2, sp
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	3b8f      	subs	r3, #143	@ 0x8f
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 800b476:	f7ff ff01 	bl	800b27c <nfcipTx>
}
 800b47a:	b009      	add	sp, #36	@ 0x24
 800b47c:	bd30      	pop	{r4, r5, pc}
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 800b47e:	181b      	adds	r3, r3, r0
    const rfalNfcDepCmd depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);
 800b480:	2006      	movs	r0, #6
 800b482:	e7e5      	b.n	800b450 <nfcipDEPControlMsg+0x20>
 800b484:	2301      	movs	r3, #1
 800b486:	2007      	movs	r0, #7
 800b488:	425b      	negs	r3, r3
 800b48a:	e7ed      	b.n	800b468 <nfcipDEPControlMsg+0x38>
 800b48c:	20001820 	.word	0x20001820

0800b490 <nfcipDataRx>:
}


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 800b490:	b510      	push	{r4, lr}
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 800b492:	2800      	cmp	r0, #0
 800b494:	d017      	beq.n	800b4c6 <nfcipDataRx+0x36>
    {
        ret = rfalTransceiveBlockingRx();
 800b496:	f7f8 f953 	bl	8003740 <rfalTransceiveBlockingRx>
    else
    {
        ret = rfalGetTransceiveStatus();
    }
    
    if( ret != RFAL_ERR_BUSY )
 800b49a:	2802      	cmp	r0, #2
 800b49c:	d012      	beq.n	800b4c4 <nfcipDataRx+0x34>
    {
        if( gNfcip.rxRcvdLen != NULL )
 800b49e:	490b      	ldr	r1, [pc, #44]	@ (800b4cc <nfcipDataRx+0x3c>)
 800b4a0:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 800b4a2:	2a00      	cmp	r2, #0
 800b4a4:	d00e      	beq.n	800b4c4 <nfcipDataRx+0x34>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 800b4a6:	8813      	ldrh	r3, [r2, #0]
 800b4a8:	3307      	adds	r3, #7
 800b4aa:	08dc      	lsrs	r4, r3, #3
 800b4ac:	8014      	strh	r4, [r2, #0]
                        
            if( (ret == RFAL_ERR_NONE) && (gNfcip.rxBuf != NULL) )
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d108      	bne.n	800b4c4 <nfcipDataRx+0x34>
 800b4b2:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 800b4b4:	2a00      	cmp	r2, #0
 800b4b6:	d005      	beq.n	800b4c4 <nfcipDataRx+0x34>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 800b4b8:	7812      	ldrb	r2, [r2, #0]
 800b4ba:	42a2      	cmp	r2, r4
 800b4bc:	d101      	bne.n	800b4c2 <nfcipDataRx+0x32>
 800b4be:	2c02      	cmp	r4, #2
 800b4c0:	d800      	bhi.n	800b4c4 <nfcipDataRx+0x34>
                {
                    return RFAL_ERR_FRAMING;
 800b4c2:	2009      	movs	r0, #9
            }
        }
    }
    
    return ret;
}
 800b4c4:	bd10      	pop	{r4, pc}
        ret = rfalGetTransceiveStatus();
 800b4c6:	f7f6 fe7b 	bl	80021c0 <rfalGetTransceiveStatus>
 800b4ca:	e7e6      	b.n	800b49a <nfcipDataRx+0xa>
 800b4cc:	20001820 	.word	0x20001820

0800b4d0 <nfcipConfig.part.0>:
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
 800b4d0:	b510      	push	{r4, lr}
    RFAL_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 800b4d2:	4c14      	ldr	r4, [pc, #80]	@ (800b524 <nfcipConfig.part.0+0x54>)
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
 800b4d4:	0001      	movs	r1, r0
    RFAL_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 800b4d6:	2250      	movs	r2, #80	@ 0x50
 800b4d8:	0020      	movs	r0, r4
 800b4da:	f004 ff29 	bl	8010330 <memcpy>
    gNfcip.cfg.to   = RFAL_MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 800b4de:	0023      	movs	r3, r4
 800b4e0:	3344      	adds	r3, #68	@ 0x44
 800b4e2:	7819      	ldrb	r1, [r3, #0]
 800b4e4:	1c0a      	adds	r2, r1, #0
 800b4e6:	290e      	cmp	r1, #14
 800b4e8:	d900      	bls.n	800b4ec <nfcipConfig.part.0+0x1c>
 800b4ea:	220e      	movs	r2, #14
 800b4ec:	701a      	strb	r2, [r3, #0]
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 800b4ee:	78e2      	ldrb	r2, [r4, #3]
 800b4f0:	1c13      	adds	r3, r2, #0
 800b4f2:	2a0e      	cmp	r2, #14
 800b4f4:	d900      	bls.n	800b4f8 <nfcipConfig.part.0+0x28>
 800b4f6:	230e      	movs	r3, #14
 800b4f8:	70e3      	strb	r3, [r4, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 800b4fa:	0023      	movs	r3, r4
 800b4fc:	3343      	adds	r3, #67	@ 0x43
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	22fe      	movs	r2, #254	@ 0xfe
 800b502:	3301      	adds	r3, #1
 800b504:	019b      	lsls	r3, r3, #6
 800b506:	2bfd      	cmp	r3, #253	@ 0xfd
 800b508:	d800      	bhi.n	800b50c <nfcipConfig.part.0+0x3c>
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	0023      	movs	r3, r4
 800b50e:	335c      	adds	r3, #92	@ 0x5c
 800b510:	801a      	strh	r2, [r3, #0]
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 800b512:	2301      	movs	r3, #1
 800b514:	7822      	ldrb	r2, [r4, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d100      	bne.n	800b51c <nfcipConfig.part.0+0x4c>
 800b51a:	3309      	adds	r3, #9
 800b51c:	3450      	adds	r4, #80	@ 0x50
 800b51e:	7023      	strb	r3, [r4, #0]
}
 800b520:	bd10      	pop	{r4, pc}
 800b522:	46c0      	nop			@ (mov r8, r8)
 800b524:	20001820 	.word	0x20001820

0800b528 <nfcipTxRx>:
{
 800b528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b52a:	0004      	movs	r4, r0
 800b52c:	0016      	movs	r6, r2
 800b52e:	a80a      	add	r0, sp, #40	@ 0x28
 800b530:	001a      	movs	r2, r3
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 800b532:	1fa5      	subs	r5, r4, #6
{
 800b534:	ab08      	add	r3, sp, #32
 800b536:	8807      	ldrh	r7, [r0, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
        return RFAL_ERR_PARAM;
 800b53a:	2007      	movs	r0, #7
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 800b53c:	2d01      	cmp	r5, #1
 800b53e:	d918      	bls.n	800b572 <nfcipTxRx+0x4a>
    gNfcip.rxBuf       = rxBuf;
 800b540:	480c      	ldr	r0, [pc, #48]	@ (800b574 <nfcipTxRx+0x4c>)
 800b542:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b544:	6645      	str	r5, [r0, #100]	@ 0x64
    gNfcip.rxBufLen    = rxBufLen;
 800b546:	0005      	movs	r5, r0
 800b548:	356a      	adds	r5, #106	@ 0x6a
 800b54a:	802f      	strh	r7, [r5, #0]
    gNfcip.rxRcvdLen   = rxActLen;
 800b54c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b54e:	66c5      	str	r5, [r0, #108]	@ 0x6c
        RFAL_EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 800b550:	2000      	movs	r0, #0
 800b552:	9601      	str	r6, [sp, #4]
 800b554:	9000      	str	r0, [sp, #0]
 800b556:	0020      	movs	r0, r4
 800b558:	f7ff fe90 	bl	800b27c <nfcipTx>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d108      	bne.n	800b572 <nfcipTxRx+0x4a>
    ret = nfcipDataRx( true );
 800b560:	3001      	adds	r0, #1
 800b562:	f7ff ff95 	bl	800b490 <nfcipDataRx>
    if( ret != RFAL_ERR_NONE )
 800b566:	2800      	cmp	r0, #0
 800b568:	d103      	bne.n	800b572 <nfcipTxRx+0x4a>
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 800b56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b56c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	8013      	strh	r3, [r2, #0]
}
 800b572:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b574:	20001820 	.word	0x20001820

0800b578 <rfalNfcDepInitialize>:
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800b578:	4b15      	ldr	r3, [pc, #84]	@ (800b5d0 <rfalNfcDepInitialize+0x58>)
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800b57a:	20fe      	movs	r0, #254	@ 0xfe
 800b57c:	0019      	movs	r1, r3
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800b57e:	2202      	movs	r2, #2
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800b580:	315c      	adds	r1, #92	@ 0x5c
{
 800b582:	b510      	push	{r4, lr}
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800b584:	8008      	strh	r0, [r1, #0]
    gNfcip.cfg.gbLen = 0;
 800b586:	20c0      	movs	r0, #192	@ 0xc0
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800b588:	805a      	strh	r2, [r3, #2]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 800b58a:	2200      	movs	r2, #0
    gNfcip.cfg.gbLen = 0;
 800b58c:	1d19      	adds	r1, r3, #4
 800b58e:	0080      	lsls	r0, r0, #2
 800b590:	87c8      	strh	r0, [r1, #62]	@ 0x3e
    gNfcip.isDeactivating = NULL;
 800b592:	67ca      	str	r2, [r1, #124]	@ 0x7c
    gNfcip.isReqPending   = false;
 800b594:	0019      	movs	r1, r3
 800b596:	3184      	adds	r1, #132	@ 0x84
 800b598:	800a      	strh	r2, [r1, #0]
    gNfcip.isWait4RTOX    = false;
 800b59a:	0019      	movs	r1, r3
 800b59c:	3186      	adds	r1, #134	@ 0x86
 800b59e:	700a      	strb	r2, [r1, #0]
    gNfcip.PDUTxPos = 0;
 800b5a0:	0019      	movs	r1, r3
    gNfcip.cfg.fwt   = NFCIP_RWT_ACTIVATION;
 800b5a2:	480c      	ldr	r0, [pc, #48]	@ (800b5d4 <rfalNfcDepInitialize+0x5c>)
    gNfcip.PDUTxPos = 0;
 800b5a4:	31a8      	adds	r1, #168	@ 0xa8
 800b5a6:	600a      	str	r2, [r1, #0]
    gNfcip.PDUParam.rxLen = NULL;
 800b5a8:	0019      	movs	r1, r3
    gNfcip.cfg.fwt   = NFCIP_RWT_ACTIVATION;
 800b5aa:	6498      	str	r0, [r3, #72]	@ 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_WT_DELTA;
 800b5ac:	200c      	movs	r0, #12
    gNfcip.PDUParam.rxLen = NULL;
 800b5ae:	3194      	adds	r1, #148	@ 0x94
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_WT_DELTA;
 800b5b0:	64d8      	str	r0, [r3, #76]	@ 0x4c
    gNfcip.PDUParam.rxLen = NULL;
 800b5b2:	600a      	str	r2, [r1, #0]
    gNfcip.state          = NFCIP_ST_IDLE;
 800b5b4:	0018      	movs	r0, r3
    gNfcip.PDUParam.rxBuf = NULL;
 800b5b6:	0019      	movs	r1, r3
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 800b5b8:	809a      	strh	r2, [r3, #4]
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800b5ba:	719a      	strb	r2, [r3, #6]
    gNfcip.state          = NFCIP_ST_IDLE;
 800b5bc:	3050      	adds	r0, #80	@ 0x50
    gNfcip.RTOXTimer = 0U;
 800b5be:	67da      	str	r2, [r3, #124]	@ 0x7c
    gNfcip.PDUParam.rxBuf = NULL;
 800b5c0:	3190      	adds	r1, #144	@ 0x90
    gNfcip.PDUParam.txBuf = NULL;
 800b5c2:	3388      	adds	r3, #136	@ 0x88
    gNfcip.state          = NFCIP_ST_IDLE;
 800b5c4:	8002      	strh	r2, [r0, #0]
    gNfcip.PDUParam.rxBuf = NULL;
 800b5c6:	600a      	str	r2, [r1, #0]
    gNfcip.PDUParam.txBuf = NULL;
 800b5c8:	601a      	str	r2, [r3, #0]
    nfcipClearCounters();
 800b5ca:	f7ff fe49 	bl	800b260 <nfcipClearCounters>
}
 800b5ce:	bd10      	pop	{r4, pc}
 800b5d0:	20001820 	.word	0x20001820
 800b5d4:	01000c01 	.word	0x01000c01

0800b5d8 <rfalNfcDepIsAtrReq>:
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 800b5d8:	3910      	subs	r1, #16
{
 800b5da:	0003      	movs	r3, r0
 800b5dc:	b510      	push	{r4, lr}
 800b5de:	0010      	movs	r0, r2
        return false;
 800b5e0:	2200      	movs	r2, #0
    if ( (bufLen < RFAL_NFCDEP_ATRREQ_MIN_LEN) || (bufLen > RFAL_NFCDEP_ATRREQ_MAX_LEN) )
 800b5e2:	2930      	cmp	r1, #48	@ 0x30
 800b5e4:	d808      	bhi.n	800b5f8 <rfalNfcDepIsAtrReq+0x20>
    if ( buf[msgIt++] != NFCIP_REQ )
 800b5e6:	7819      	ldrb	r1, [r3, #0]
 800b5e8:	29d4      	cmp	r1, #212	@ 0xd4
 800b5ea:	d105      	bne.n	800b5f8 <rfalNfcDepIsAtrReq+0x20>
    if( buf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_REQ )
 800b5ec:	7859      	ldrb	r1, [r3, #1]
 800b5ee:	4291      	cmp	r1, r2
 800b5f0:	d102      	bne.n	800b5f8 <rfalNfcDepIsAtrReq+0x20>
    if( nfcid3 != NULL )
 800b5f2:	4290      	cmp	r0, r2
 800b5f4:	d102      	bne.n	800b5fc <rfalNfcDepIsAtrReq+0x24>
{
 800b5f6:	2201      	movs	r2, #1
}
 800b5f8:	0010      	movs	r0, r2
 800b5fa:	bd10      	pop	{r4, pc}
        RFAL_MEMCPY( nfcid3, &buf[RFAL_NFCDEP_ATR_REQ_NFCID3_POS], RFAL_NFCDEP_NFCID3_LEN );
 800b5fc:	220a      	movs	r2, #10
 800b5fe:	1c99      	adds	r1, r3, #2
 800b600:	f004 fe96 	bl	8010330 <memcpy>
 800b604:	e7f7      	b.n	800b5f6 <rfalNfcDepIsAtrReq+0x1e>
	...

0800b608 <rfalNfcDepATR>:
{
 800b608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b60a:	b0bd      	sub	sp, #244	@ 0xf4
 800b60c:	0006      	movs	r6, r0
 800b60e:	0015      	movs	r5, r2
        return RFAL_ERR_PARAM;
 800b610:	2407      	movs	r4, #7
{
 800b612:	9104      	str	r1, [sp, #16]
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 800b614:	2800      	cmp	r0, #0
 800b616:	d06d      	beq.n	800b6f4 <rfalNfcDepATR+0xec>
 800b618:	2900      	cmp	r1, #0
 800b61a:	d06b      	beq.n	800b6f4 <rfalNfcDepATR+0xec>
 800b61c:	2a00      	cmp	r2, #0
 800b61e:	d069      	beq.n	800b6f4 <rfalNfcDepATR+0xec>
    RFAL_MEMSET( &cfg, 0x00, sizeof(rfalNfcDepConfigs) );
 800b620:	ac28      	add	r4, sp, #160	@ 0xa0
 800b622:	2248      	movs	r2, #72	@ 0x48
 800b624:	2100      	movs	r1, #0
 800b626:	0020      	movs	r0, r4
 800b628:	f004 fe4e 	bl	80102c8 <memset>
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 800b62c:	2380      	movs	r3, #128	@ 0x80
 800b62e:	035b      	lsls	r3, r3, #13
    cfg.did  = param->DID;
 800b630:	7a72      	ldrb	r2, [r6, #9]
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 800b632:	64a3      	str	r3, [r4, #72]	@ 0x48
    cfg.dFwt = RFAL_NFCDEP_WT_DELTA;
 800b634:	230c      	movs	r3, #12
 800b636:	64e3      	str	r3, [r4, #76]	@ 0x4c
    cfg.br   = param->BR;
 800b638:	7b33      	ldrb	r3, [r6, #12]
    cfg.did  = param->DID;
 800b63a:	70e2      	strb	r2, [r4, #3]
    cfg.br   = param->BR;
 800b63c:	71a3      	strb	r3, [r4, #6]
    cfg.lr   = param->LR;
 800b63e:	23db      	movs	r3, #219	@ 0xdb
    cfg.nad  = param->NAD;
 800b640:	8972      	ldrh	r2, [r6, #10]
    cfg.lr   = param->LR;
 800b642:	a902      	add	r1, sp, #8
    cfg.nad  = param->NAD;
 800b644:	80a2      	strh	r2, [r4, #4]
    cfg.lr   = param->LR;
 800b646:	7b72      	ldrb	r2, [r6, #13]
 800b648:	185b      	adds	r3, r3, r1
 800b64a:	701a      	strb	r2, [r3, #0]
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 800b64c:	220e      	movs	r2, #14
 800b64e:	ab39      	add	r3, sp, #228	@ 0xe4
 800b650:	701a      	strb	r2, [r3, #0]
    cfg.gbLen = param->GBLen;
 800b652:	23da      	movs	r3, #218	@ 0xda
 800b654:	7d32      	ldrb	r2, [r6, #20]
 800b656:	185b      	adds	r3, r3, r1
 800b658:	701a      	strb	r2, [r3, #0]
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 800b65a:	2a00      	cmp	r2, #0
 800b65c:	d005      	beq.n	800b66a <rfalNfcDepATR+0x62>
        RFAL_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 800b65e:	20aa      	movs	r0, #170	@ 0xaa
 800b660:	ab02      	add	r3, sp, #8
 800b662:	6931      	ldr	r1, [r6, #16]
 800b664:	18c0      	adds	r0, r0, r3
 800b666:	f004 fe63 	bl	8010330 <memcpy>
    cfg.nfcidLen = param->nfcidLen;
 800b66a:	7a32      	ldrb	r2, [r6, #8]
 800b66c:	7462      	strb	r2, [r4, #17]
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 800b66e:	2a00      	cmp	r2, #0
 800b670:	d005      	beq.n	800b67e <rfalNfcDepATR+0x76>
        RFAL_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 800b672:	209f      	movs	r0, #159	@ 0x9f
 800b674:	ab02      	add	r3, sp, #8
 800b676:	6871      	ldr	r1, [r6, #4]
 800b678:	18c0      	adds	r0, r0, r3
 800b67a:	f004 fe59 	bl	8010330 <memcpy>
    cfg.oper     = param->operParam;
 800b67e:	7873      	ldrb	r3, [r6, #1]
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 800b680:	2712      	movs	r7, #18
    cfg.oper     = param->operParam;
 800b682:	70a3      	strb	r3, [r4, #2]
    cfg.commMode = param->commMode;
 800b684:	7833      	ldrb	r3, [r6, #0]
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 800b686:	ae17      	add	r6, sp, #92	@ 0x5c
    cfg.commMode = param->commMode;
 800b688:	7063      	strb	r3, [r4, #1]
    rfalNfcDepInitialize();
 800b68a:	f7ff ff75 	bl	800b578 <rfalNfcDepInitialize>
    if (cfg == NULL) 
 800b68e:	0020      	movs	r0, r4
 800b690:	f7ff ff1e 	bl	800b4d0 <nfcipConfig.part.0>
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 800b694:	4b1a      	ldr	r3, [pc, #104]	@ (800b700 <rfalNfcDepATR+0xf8>)
 800b696:	2000      	movs	r0, #0
 800b698:	785a      	ldrb	r2, [r3, #1]
 800b69a:	a907      	add	r1, sp, #28
 800b69c:	3a01      	subs	r2, #1
 800b69e:	1e53      	subs	r3, r2, #1
 800b6a0:	419a      	sbcs	r2, r3
 800b6a2:	23e0      	movs	r3, #224	@ 0xe0
 800b6a4:	4252      	negs	r2, r2
 800b6a6:	041b      	lsls	r3, r3, #16
 800b6a8:	401a      	ands	r2, r3
 800b6aa:	4b16      	ldr	r3, [pc, #88]	@ (800b704 <rfalNfcDepATR+0xfc>)
 800b6ac:	9601      	str	r6, [sp, #4]
 800b6ae:	18d2      	adds	r2, r2, r3
 800b6b0:	ab02      	add	r3, sp, #8
 800b6b2:	18ff      	adds	r7, r7, r3
 800b6b4:	2341      	movs	r3, #65	@ 0x41
 800b6b6:	9703      	str	r7, [sp, #12]
 800b6b8:	9302      	str	r3, [sp, #8]
 800b6ba:	9000      	str	r0, [sp, #0]
 800b6bc:	0003      	movs	r3, r0
 800b6be:	f7ff ff33 	bl	800b528 <nfcipTxRx>
 800b6c2:	1e04      	subs	r4, r0, #0
 800b6c4:	d116      	bne.n	800b6f4 <rfalNfcDepATR+0xec>
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 800b6c6:	7833      	ldrb	r3, [r6, #0]
 800b6c8:	1e5a      	subs	r2, r3, #1
 800b6ca:	9205      	str	r2, [sp, #20]
 800b6cc:	466a      	mov	r2, sp
 800b6ce:	8a92      	ldrh	r2, [r2, #20]
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 800b6d0:	3b12      	subs	r3, #18
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 800b6d2:	803a      	strh	r2, [r7, #0]
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 800b6d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800b6d6:	d810      	bhi.n	800b6fa <rfalNfcDepATR+0xf2>
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 800b6d8:	7873      	ldrb	r3, [r6, #1]
 800b6da:	2bd5      	cmp	r3, #213	@ 0xd5
 800b6dc:	d10d      	bne.n	800b6fa <rfalNfcDepATR+0xf2>
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 800b6de:	78b3      	ldrb	r3, [r6, #2]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d10a      	bne.n	800b6fa <rfalNfcDepATR+0xf2>
    RFAL_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 800b6e4:	2155      	movs	r1, #85	@ 0x55
 800b6e6:	ab02      	add	r3, sp, #8
 800b6e8:	18c9      	adds	r1, r1, r3
 800b6ea:	9804      	ldr	r0, [sp, #16]
 800b6ec:	f004 fe20 	bl	8010330 <memcpy>
    *atrResLen = (uint8_t)rxLen;
 800b6f0:	9b05      	ldr	r3, [sp, #20]
 800b6f2:	702b      	strb	r3, [r5, #0]
}
 800b6f4:	0020      	movs	r0, r4
 800b6f6:	b03d      	add	sp, #244	@ 0xf4
 800b6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return RFAL_ERR_PROTO;
 800b6fa:	240b      	movs	r4, #11
 800b6fc:	e7fa      	b.n	800b6f4 <rfalNfcDepATR+0xec>
 800b6fe:	46c0      	nop			@ (mov r8, r8)
 800b700:	20001820 	.word	0x20001820
 800b704:	00200c01 	.word	0x00200c01

0800b708 <rfalNfcDepPSL>:
{
 800b708:	b530      	push	{r4, r5, lr}
 800b70a:	b089      	sub	sp, #36	@ 0x24
    txBuf[msgIt++] = BRS;
 800b70c:	466b      	mov	r3, sp
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, (gNfcip.cfg.fwt + gNfcip.cfg.dFwt), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 800b70e:	4d12      	ldr	r5, [pc, #72]	@ (800b758 <rfalNfcDepPSL+0x50>)
    txBuf[msgIt++] = BRS;
 800b710:	7718      	strb	r0, [r3, #28]
    txBuf[msgIt++] = FSL;
 800b712:	7759      	strb	r1, [r3, #29]
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, (gNfcip.cfg.fwt + gNfcip.cfg.dFwt), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 800b714:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 800b716:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b718:	2004      	movs	r0, #4
 800b71a:	18d2      	adds	r2, r2, r3
 800b71c:	2312      	movs	r3, #18
 800b71e:	446b      	add	r3, sp
 800b720:	9303      	str	r3, [sp, #12]
 800b722:	2302      	movs	r3, #2
 800b724:	ac05      	add	r4, sp, #20
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	9002      	str	r0, [sp, #8]
 800b72a:	9401      	str	r4, [sp, #4]
 800b72c:	ab07      	add	r3, sp, #28
 800b72e:	a906      	add	r1, sp, #24
 800b730:	f7ff fefa 	bl	800b528 <nfcipTxRx>
 800b734:	2800      	cmp	r0, #0
 800b736:	d10d      	bne.n	800b754 <rfalNfcDepPSL+0x4c>
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 800b738:	7823      	ldrb	r3, [r4, #0]
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d909      	bls.n	800b752 <rfalNfcDepPSL+0x4a>
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 800b73e:	7863      	ldrb	r3, [r4, #1]
 800b740:	2bd5      	cmp	r3, #213	@ 0xd5
 800b742:	d106      	bne.n	800b752 <rfalNfcDepPSL+0x4a>
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 800b744:	78a3      	ldrb	r3, [r4, #2]
 800b746:	2b05      	cmp	r3, #5
 800b748:	d103      	bne.n	800b752 <rfalNfcDepPSL+0x4a>
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 800b74a:	78e2      	ldrb	r2, [r4, #3]
 800b74c:	78eb      	ldrb	r3, [r5, #3]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d000      	beq.n	800b754 <rfalNfcDepPSL+0x4c>
        return RFAL_ERR_PROTO;
 800b752:	200b      	movs	r0, #11
}
 800b754:	b009      	add	sp, #36	@ 0x24
 800b756:	bd30      	pop	{r4, r5, pc}
 800b758:	20001820 	.word	0x20001820

0800b75c <rfalNfcDepDSL>:
    uint16_t rxLen = 0;
 800b75c:	2112      	movs	r1, #18
 800b75e:	2300      	movs	r3, #0
{   
 800b760:	b530      	push	{r4, r5, lr}
    if( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )
 800b762:	4d15      	ldr	r5, [pc, #84]	@ (800b7b8 <rfalNfcDepDSL+0x5c>)
{   
 800b764:	b089      	sub	sp, #36	@ 0x24
    if( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )
 800b766:	782a      	ldrb	r2, [r5, #0]
    uint16_t rxLen = 0;
 800b768:	4469      	add	r1, sp
 800b76a:	800b      	strh	r3, [r1, #0]
    if( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )
 800b76c:	2a01      	cmp	r2, #1
 800b76e:	d102      	bne.n	800b776 <rfalNfcDepDSL+0x1a>
        return RFAL_ERR_NONE;                                  /* Target has no deselect procedure */
 800b770:	2000      	movs	r0, #0
}
 800b772:	b009      	add	sp, #36	@ 0x24
 800b774:	bd30      	pop	{r4, r5, pc}
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_DSL_REQ, txBuf, (gNfcip.cfg.fwt + gNfcip.cfg.dFwt), NULL, 0, rxBuf, (uint16_t)sizeof(rxBuf), &rxLen  ) );
 800b776:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b778:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 800b77a:	9103      	str	r1, [sp, #12]
 800b77c:	2104      	movs	r1, #4
 800b77e:	ac05      	add	r4, sp, #20
 800b780:	1812      	adds	r2, r2, r0
 800b782:	9102      	str	r1, [sp, #8]
 800b784:	2008      	movs	r0, #8
 800b786:	9401      	str	r4, [sp, #4]
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	a906      	add	r1, sp, #24
 800b78c:	f7ff fecc 	bl	800b528 <nfcipTxRx>
 800b790:	2800      	cmp	r0, #0
 800b792:	d1ee      	bne.n	800b772 <rfalNfcDepDSL+0x16>
    if( rxBuf[rxMsgIt++] < NFCIP_DSLRES_MIN )             /* Checking length: LEN + DSL_RES */
 800b794:	7823      	ldrb	r3, [r4, #0]
        return RFAL_ERR_PROTO;
 800b796:	300b      	adds	r0, #11
    if( rxBuf[rxMsgIt++] < NFCIP_DSLRES_MIN )             /* Checking length: LEN + DSL_RES */
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d9ea      	bls.n	800b772 <rfalNfcDepDSL+0x16>
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 800b79c:	7863      	ldrb	r3, [r4, #1]
 800b79e:	2bd5      	cmp	r3, #213	@ 0xd5
 800b7a0:	d1e7      	bne.n	800b772 <rfalNfcDepDSL+0x16>
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DSL_RES )  /* Checking if is DSL RES          */
 800b7a2:	78a3      	ldrb	r3, [r4, #2]
 800b7a4:	2b09      	cmp	r3, #9
 800b7a6:	d1e4      	bne.n	800b772 <rfalNfcDepDSL+0x16>
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800b7a8:	78eb      	ldrb	r3, [r5, #3]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d0e0      	beq.n	800b770 <rfalNfcDepDSL+0x14>
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 800b7ae:	78e2      	ldrb	r2, [r4, #3]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d0dd      	beq.n	800b770 <rfalNfcDepDSL+0x14>
 800b7b4:	e7dd      	b.n	800b772 <rfalNfcDepDSL+0x16>
 800b7b6:	46c0      	nop			@ (mov r8, r8)
 800b7b8:	20001820 	.word	0x20001820

0800b7bc <rfalNfcDepRLS>:
    uint16_t   rxLen = 0;
 800b7bc:	2112      	movs	r1, #18
 800b7be:	2300      	movs	r3, #0
{   
 800b7c0:	b530      	push	{r4, r5, lr}
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 800b7c2:	4d15      	ldr	r5, [pc, #84]	@ (800b818 <rfalNfcDepRLS+0x5c>)
{   
 800b7c4:	b089      	sub	sp, #36	@ 0x24
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 800b7c6:	782a      	ldrb	r2, [r5, #0]
    uint16_t   rxLen = 0;
 800b7c8:	4469      	add	r1, sp
 800b7ca:	800b      	strh	r3, [r1, #0]
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 800b7cc:	2a01      	cmp	r2, #1
 800b7ce:	d102      	bne.n	800b7d6 <rfalNfcDepRLS+0x1a>
        return RFAL_ERR_NONE;
 800b7d0:	2000      	movs	r0, #0
}
 800b7d2:	b009      	add	sp, #36	@ 0x24
 800b7d4:	bd30      	pop	{r4, r5, pc}
    RFAL_EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, (gNfcip.cfg.fwt + gNfcip.cfg.dFwt), NULL, 0, rxBuf, (uint16_t)sizeof(rxBuf), &rxLen  ) );
 800b7d6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b7d8:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 800b7da:	9103      	str	r1, [sp, #12]
 800b7dc:	2104      	movs	r1, #4
 800b7de:	ac05      	add	r4, sp, #20
 800b7e0:	1812      	adds	r2, r2, r0
 800b7e2:	9102      	str	r1, [sp, #8]
 800b7e4:	200a      	movs	r0, #10
 800b7e6:	9401      	str	r4, [sp, #4]
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	a906      	add	r1, sp, #24
 800b7ec:	f7ff fe9c 	bl	800b528 <nfcipTxRx>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d1ee      	bne.n	800b7d2 <rfalNfcDepRLS+0x16>
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 800b7f4:	7823      	ldrb	r3, [r4, #0]
        return RFAL_ERR_PROTO;
 800b7f6:	300b      	adds	r0, #11
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d9ea      	bls.n	800b7d2 <rfalNfcDepRLS+0x16>
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 800b7fc:	7863      	ldrb	r3, [r4, #1]
 800b7fe:	2bd5      	cmp	r3, #213	@ 0xd5
 800b800:	d1e7      	bne.n	800b7d2 <rfalNfcDepRLS+0x16>
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 800b802:	78a3      	ldrb	r3, [r4, #2]
 800b804:	4283      	cmp	r3, r0
 800b806:	d1e4      	bne.n	800b7d2 <rfalNfcDepRLS+0x16>
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800b808:	78ea      	ldrb	r2, [r5, #3]
 800b80a:	2a00      	cmp	r2, #0
 800b80c:	d0e0      	beq.n	800b7d0 <rfalNfcDepRLS+0x14>
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 800b80e:	78e1      	ldrb	r1, [r4, #3]
 800b810:	4291      	cmp	r1, r2
 800b812:	d0dd      	beq.n	800b7d0 <rfalNfcDepRLS+0x14>
        return RFAL_ERR_PROTO;
 800b814:	0018      	movs	r0, r3
 800b816:	e7dc      	b.n	800b7d2 <rfalNfcDepRLS+0x16>
 800b818:	20001820 	.word	0x20001820

0800b81c <rfalNfcDepInitiatorHandleActivation>:
{
 800b81c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b81e:	000d      	movs	r5, r1
 800b820:	0014      	movs	r4, r2
        return RFAL_ERR_PARAM;
 800b822:	2607      	movs	r6, #7
{
 800b824:	9000      	str	r0, [sp, #0]
    if( (param == NULL) || (nfcDepDev == NULL) )
 800b826:	2800      	cmp	r0, #0
 800b828:	d100      	bne.n	800b82c <rfalNfcDepInitiatorHandleActivation+0x10>
 800b82a:	e07f      	b.n	800b92c <rfalNfcDepInitiatorHandleActivation+0x110>
 800b82c:	2a00      	cmp	r2, #0
 800b82e:	d07d      	beq.n	800b92c <rfalNfcDepInitiatorHandleActivation+0x110>
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 800b830:	2300      	movs	r3, #0
 800b832:	2703      	movs	r7, #3
 800b834:	7283      	strb	r3, [r0, #10]
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 800b836:	0023      	movs	r3, r4
 800b838:	3341      	adds	r3, #65	@ 0x41
 800b83a:	001a      	movs	r2, r3
 800b83c:	0021      	movs	r1, r4
 800b83e:	9800      	ldr	r0, [sp, #0]
 800b840:	9301      	str	r3, [sp, #4]
 800b842:	f7ff fee1 	bl	800b608 <rfalNfcDepATR>
 800b846:	0006      	movs	r6, r0
         if( nfcipIsTransmissionError(ret) )
 800b848:	281b      	cmp	r0, #27
 800b84a:	d86f      	bhi.n	800b92c <rfalNfcDepInitiatorHandleActivation+0x110>
 800b84c:	4b39      	ldr	r3, [pc, #228]	@ (800b934 <rfalNfcDepInitiatorHandleActivation+0x118>)
 800b84e:	40c3      	lsrs	r3, r0
 800b850:	07db      	lsls	r3, r3, #31
 800b852:	d503      	bpl.n	800b85c <rfalNfcDepInitiatorHandleActivation+0x40>
    while( (maxRetyrs--) != 0U );
 800b854:	3f01      	subs	r7, #1
 800b856:	b2ff      	uxtb	r7, r7
 800b858:	2f00      	cmp	r7, #0
 800b85a:	d1ec      	bne.n	800b836 <rfalNfcDepInitiatorHandleActivation+0x1a>
    if( ret != RFAL_ERR_NONE )
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d165      	bne.n	800b92c <rfalNfcDepInitiatorHandleActivation+0x110>
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 800b860:	0022      	movs	r2, r4
 800b862:	9b01      	ldr	r3, [sp, #4]
 800b864:	3244      	adds	r2, #68	@ 0x44
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	3b11      	subs	r3, #17
 800b86a:	7013      	strb	r3, [r2, #0]
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 800b86c:	0023      	movs	r3, r4
 800b86e:	7b22      	ldrb	r2, [r4, #12]
 800b870:	3356      	adds	r3, #86	@ 0x56
 800b872:	701a      	strb	r2, [r3, #0]
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 800b874:	0022      	movs	r2, r4
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 800b876:	7058      	strb	r0, [r3, #1]
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 800b878:	7c23      	ldrb	r3, [r4, #16]
 800b87a:	3250      	adds	r2, #80	@ 0x50
 800b87c:	069b      	lsls	r3, r3, #26
 800b87e:	0f9b      	lsrs	r3, r3, #30
 800b880:	7013      	strb	r3, [r2, #0]
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 800b882:	3301      	adds	r3, #1
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 800b884:	9200      	str	r2, [sp, #0]
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 800b886:	019b      	lsls	r3, r3, #6
 800b888:	22fe      	movs	r2, #254	@ 0xfe
 800b88a:	2bfd      	cmp	r3, #253	@ 0xfd
 800b88c:	d800      	bhi.n	800b890 <rfalNfcDepInitiatorHandleActivation+0x74>
 800b88e:	b29a      	uxth	r2, r3
 800b890:	0023      	movs	r3, r4
 800b892:	3352      	adds	r3, #82	@ 0x52
 800b894:	801a      	strh	r2, [r3, #0]
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 800b896:	230f      	movs	r3, #15
 800b898:	7be2      	ldrb	r2, [r4, #15]
 800b89a:	401a      	ands	r2, r3
 800b89c:	0023      	movs	r3, r4
 800b89e:	3345      	adds	r3, #69	@ 0x45
 800b8a0:	701a      	strb	r2, [r3, #0]
    const uint8_t responseWaitTime = RFAL_MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 800b8a2:	1c13      	adds	r3, r2, #0
 800b8a4:	2a0e      	cmp	r2, #14
 800b8a6:	d900      	bls.n	800b8aa <rfalNfcDepInitiatorHandleActivation+0x8e>
 800b8a8:	230e      	movs	r3, #14
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	330c      	adds	r3, #12
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	409a      	lsls	r2, r3
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 800b8b2:	230c      	movs	r3, #12
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 800b8b4:	0027      	movs	r7, r4
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 800b8b6:	64e3      	str	r3, [r4, #76]	@ 0x4c
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 800b8b8:	0023      	movs	r3, r4
 800b8ba:	3754      	adds	r7, #84	@ 0x54
 800b8bc:	3355      	adds	r3, #85	@ 0x55
 800b8be:	0019      	movs	r1, r3
 800b8c0:	0038      	movs	r0, r7
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 800b8c2:	64a2      	str	r2, [r4, #72]	@ 0x48
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 800b8c4:	9301      	str	r3, [sp, #4]
 800b8c6:	f7f6 fac9 	bl	8001e5c <rfalGetBitRate>
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 800b8ca:	9b00      	ldr	r3, [sp, #0]
 800b8cc:	7819      	ldrb	r1, [r3, #0]
    if( (nfcDepDev->info.DSI != desiredBR) && (desiredBR != RFAL_BR_KEEP) )    /* if desired BR is different    */
 800b8ce:	783b      	ldrb	r3, [r7, #0]
 800b8d0:	42ab      	cmp	r3, r5
 800b8d2:	d02b      	beq.n	800b92c <rfalNfcDepInitiatorHandleActivation+0x110>
 800b8d4:	2dff      	cmp	r5, #255	@ 0xff
 800b8d6:	d029      	beq.n	800b92c <rfalNfcDepInitiatorHandleActivation+0x110>
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 800b8d8:	7ba0      	ldrb	r0, [r4, #14]
 800b8da:	7b62      	ldrb	r2, [r4, #13]
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 800b8dc:	2d02      	cmp	r5, #2
 800b8de:	d908      	bls.n	800b8f2 <rfalNfcDepInitiatorHandleActivation+0xd6>
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 800b8e0:	2d03      	cmp	r5, #3
 800b8e2:	d123      	bne.n	800b92c <rfalNfcDepInitiatorHandleActivation+0x110>
	Bx = RFAL_MIN(BRx, BSx);
 800b8e4:	1c03      	adds	r3, r0, #0
 800b8e6:	4290      	cmp	r0, r2
 800b8e8:	d900      	bls.n	800b8ec <rfalNfcDepInitiatorHandleActivation+0xd0>
 800b8ea:	1c13      	adds	r3, r2, #0
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d01c      	beq.n	800b92c <rfalNfcDepInitiatorHandleActivation+0x110>
        gNfcip.cfg.fwt = nfcDepDev->info.FWT;
 800b8f2:	4b11      	ldr	r3, [pc, #68]	@ (800b938 <rfalNfcDepInitiatorHandleActivation+0x11c>)
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 800b8f4:	00e8      	lsls	r0, r5, #3
        gNfcip.cfg.fwt = nfcDepDev->info.FWT;
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	9a00      	ldr	r2, [sp, #0]
 800b8fa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 800b8fc:	4328      	orrs	r0, r5
        RFAL_EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 800b8fe:	b2c0      	uxtb	r0, r0
        gNfcip.cfg.fwt = nfcDepDev->info.FWT;
 800b900:	6493      	str	r3, [r2, #72]	@ 0x48
        RFAL_EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 800b902:	f7ff ff01 	bl	800b708 <rfalNfcDepPSL>
 800b906:	2800      	cmp	r0, #0
 800b908:	d112      	bne.n	800b930 <rfalNfcDepInitiatorHandleActivation+0x114>
        if( nfcDepDev->info.DSI != desiredBR )
 800b90a:	783b      	ldrb	r3, [r7, #0]
 800b90c:	42ab      	cmp	r3, r5
 800b90e:	d00d      	beq.n	800b92c <rfalNfcDepInitiatorHandleActivation+0x110>
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 800b910:	9a00      	ldr	r2, [sp, #0]
 800b912:	7852      	ldrb	r2, [r2, #1]
 800b914:	4313      	orrs	r3, r2
 800b916:	d102      	bne.n	800b91e <rfalNfcDepInitiatorHandleActivation+0x102>
                rfalNfcfPollerInitialize( desiredBR );
 800b918:	0028      	movs	r0, r5
 800b91a:	f001 fd1f 	bl	800d35c <rfalNfcfPollerInitialize>
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 800b91e:	9b01      	ldr	r3, [sp, #4]
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 800b920:	0029      	movs	r1, r5
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 800b922:	701d      	strb	r5, [r3, #0]
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 800b924:	0028      	movs	r0, r5
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 800b926:	703d      	strb	r5, [r7, #0]
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 800b928:	f7f6 f88c 	bl	8001a44 <rfalSetBitRate>
}
 800b92c:	0030      	movs	r0, r6
 800b92e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        RFAL_EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 800b930:	0006      	movs	r6, r0
 800b932:	e7fb      	b.n	800b92c <rfalNfcDepInitiatorHandleActivation+0x110>
 800b934:	08200200 	.word	0x08200200
 800b938:	20001820 	.word	0x20001820

0800b93c <rfalNfcDepListenStartActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenStartActivation( const rfalNfcDepTargetParam *param, const uint8_t *atrReq, uint16_t atrReqLength, rfalNfcDepListenActvParam rxParam )
{
 800b93c:	b082      	sub	sp, #8
 800b93e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b940:	b099      	sub	sp, #100	@ 0x64
 800b942:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b944:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b946:	0005      	movs	r5, r0
 800b948:	000f      	movs	r7, r1
 800b94a:	0016      	movs	r6, r2
 800b94c:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 800b94e:	9302      	str	r3, [sp, #8]
    ReturnCode        ret;
    rfalNfcDepConfigs cfg;
    
    
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 800b950:	2800      	cmp	r0, #0
 800b952:	d105      	bne.n	800b960 <rfalNfcDepListenStartActivation+0x24>
    {
        return RFAL_ERR_PARAM;
 800b954:	2007      	movs	r0, #7
    RFAL_EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
    
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
    
    return RFAL_ERR_NONE;
}
 800b956:	b019      	add	sp, #100	@ 0x64
 800b958:	bcf0      	pop	{r4, r5, r6, r7}
 800b95a:	bc08      	pop	{r3}
 800b95c:	b002      	add	sp, #8
 800b95e:	4718      	bx	r3
    if( (param == NULL) || (atrReq == NULL) || (rxParam.rxLen == NULL) )
 800b960:	2900      	cmp	r1, #0
 800b962:	d0f7      	beq.n	800b954 <rfalNfcDepListenStartActivation+0x18>
 800b964:	9b02      	ldr	r3, [sp, #8]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d0f4      	beq.n	800b954 <rfalNfcDepListenStartActivation+0x18>
    if( !rfalNfcDepIsAtrReq( atrReq, atrReqLength, NULL ) )
 800b96a:	2200      	movs	r2, #0
 800b96c:	0031      	movs	r1, r6
 800b96e:	0038      	movs	r0, r7
 800b970:	f7ff fe32 	bl	800b5d8 <rfalNfcDepIsAtrReq>
 800b974:	2800      	cmp	r0, #0
 800b976:	d0ed      	beq.n	800b954 <rfalNfcDepListenStartActivation+0x18>
    rxParam.nfcDepDev->activation.Initiator.ATR_REQLen = (uint8_t)atrReqLength;                   /* nfcipIsAtrReq() is already checking Min and Max buffer lengths */ 
 800b978:	b2f3      	uxtb	r3, r6
 800b97a:	9303      	str	r3, [sp, #12]
 800b97c:	0023      	movs	r3, r4
 800b97e:	b2f2      	uxtb	r2, r6
 800b980:	3340      	adds	r3, #64	@ 0x40
 800b982:	701a      	strb	r2, [r3, #0]
    if( atrReqLength > 0U )                                                                       /* MISRA 21.18 */
 800b984:	2e00      	cmp	r6, #0
 800b986:	d004      	beq.n	800b992 <rfalNfcDepListenStartActivation+0x56>
        RFAL_MEMCPY( (uint8_t*)&rxParam.nfcDepDev->activation.Initiator.ATR_REQ, atrReq, atrReqLength );
 800b988:	0032      	movs	r2, r6
 800b98a:	0039      	movs	r1, r7
 800b98c:	0020      	movs	r0, r4
 800b98e:	f004 fccf 	bl	8010330 <memcpy>
    rxParam.nfcDepDev->info.GBLen = (uint8_t)(atrReqLength - RFAL_NFCDEP_ATRREQ_MIN_LEN);
 800b992:	0023      	movs	r3, r4
 800b994:	9f03      	ldr	r7, [sp, #12]
 800b996:	3344      	adds	r3, #68	@ 0x44
 800b998:	3f10      	subs	r7, #16
 800b99a:	701f      	strb	r7, [r3, #0]
    rxParam.nfcDepDev->info.DID   = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800b99c:	7b22      	ldrb	r2, [r4, #12]
 800b99e:	749a      	strb	r2, [r3, #18]
    rxParam.nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                        /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	74da      	strb	r2, [r3, #19]
    rxParam.nfcDepDev->info.LR    = rfalNfcDepPP2LR( rxParam.nfcDepDev->activation.Initiator.ATR_REQ.PPi );
 800b9a4:	0022      	movs	r2, r4
 800b9a6:	7be3      	ldrb	r3, [r4, #15]
 800b9a8:	3250      	adds	r2, #80	@ 0x50
 800b9aa:	069b      	lsls	r3, r3, #26
 800b9ac:	0f9b      	lsrs	r3, r3, #30
 800b9ae:	7013      	strb	r3, [r2, #0]
    rxParam.nfcDepDev->info.FS    = rfalNfcDepLR2FS( rxParam.nfcDepDev->info.LR );
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	22fe      	movs	r2, #254	@ 0xfe
 800b9b4:	019b      	lsls	r3, r3, #6
 800b9b6:	2bfd      	cmp	r3, #253	@ 0xfd
 800b9b8:	d800      	bhi.n	800b9bc <rfalNfcDepListenStartActivation+0x80>
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	0023      	movs	r3, r4
 800b9be:	3352      	adds	r3, #82	@ 0x52
 800b9c0:	801a      	strh	r2, [r3, #0]
    rxParam.nfcDepDev->info.WT    = 0;
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	3b0d      	subs	r3, #13
 800b9c6:	701a      	strb	r2, [r3, #0]
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 800b9c8:	2301      	movs	r3, #1
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 800b9ca:	0021      	movs	r1, r4
 800b9cc:	0020      	movs	r0, r4
    rxParam.nfcDepDev->info.FWT   = NFCIP_NO_FWT;
 800b9ce:	425b      	negs	r3, r3
 800b9d0:	64a3      	str	r3, [r4, #72]	@ 0x48
    rxParam.nfcDepDev->info.dFWT  = NFCIP_NO_FWT;
 800b9d2:	64e3      	str	r3, [r4, #76]	@ 0x4c
    rfalGetBitRate( &rxParam.nfcDepDev->info.DSI, &rxParam.nfcDepDev->info.DRI );
 800b9d4:	3155      	adds	r1, #85	@ 0x55
 800b9d6:	3054      	adds	r0, #84	@ 0x54
 800b9d8:	f7f6 fa40 	bl	8001e5c <rfalGetBitRate>
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 800b9dc:	4f2e      	ldr	r7, [pc, #184]	@ (800ba98 <rfalNfcDepListenStartActivation+0x15c>)
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800b9de:	ae04      	add	r6, sp, #16
    gNfcip.nfcDepDev = rxParam.nfcDepDev;
 800b9e0:	67bc      	str	r4, [r7, #120]	@ 0x78
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800b9e2:	7b23      	ldrb	r3, [r4, #12]
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 800b9e4:	2200      	movs	r2, #0
    cfg.did = rxParam.nfcDepDev->activation.Initiator.ATR_REQ.DID;
 800b9e6:	70f3      	strb	r3, [r6, #3]
    cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 800b9e8:	2380      	movs	r3, #128	@ 0x80
 800b9ea:	035b      	lsls	r3, r3, #13
 800b9ec:	64b3      	str	r3, [r6, #72]	@ 0x48
    cfg.dFwt  = RFAL_NFCDEP_WT_DELTA;
 800b9ee:	230c      	movs	r3, #12
    cfg.nad = RFAL_NFCDEP_NAD_NO;
 800b9f0:	7132      	strb	r2, [r6, #4]
    cfg.dFwt  = RFAL_NFCDEP_WT_DELTA;
 800b9f2:	64f3      	str	r3, [r6, #76]	@ 0x4c
    cfg.br = param->brt;
 800b9f4:	7b2b      	ldrb	r3, [r5, #12]
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 800b9f6:	a902      	add	r1, sp, #8
    cfg.br = param->brt;
 800b9f8:	71b3      	strb	r3, [r6, #6]
    cfg.bs = param->bst;
 800b9fa:	7aeb      	ldrb	r3, [r5, #11]
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 800b9fc:	324b      	adds	r2, #75	@ 0x4b
    cfg.bs = param->bst;
 800b9fe:	7173      	strb	r3, [r6, #5]
    cfg.lr = rfalNfcDepPP2LR(param->ppt);
 800ba00:	7bab      	ldrb	r3, [r5, #14]
 800ba02:	1852      	adds	r2, r2, r1
 800ba04:	069b      	lsls	r3, r3, #26
 800ba06:	0f9b      	lsrs	r3, r3, #30
 800ba08:	7013      	strb	r3, [r2, #0]
    cfg.gbLen = param->GBtLen;
 800ba0a:	002b      	movs	r3, r5
 800ba0c:	333f      	adds	r3, #63	@ 0x3f
 800ba0e:	781a      	ldrb	r2, [r3, #0]
 800ba10:	234a      	movs	r3, #74	@ 0x4a
 800ba12:	185b      	adds	r3, r3, r1
 800ba14:	701a      	strb	r2, [r3, #0]
    if( cfg.gbLen > 0U )          /* MISRA 21.18 */
 800ba16:	2a00      	cmp	r2, #0
 800ba18:	d006      	beq.n	800ba28 <rfalNfcDepListenStartActivation+0xec>
        RFAL_MEMCPY(cfg.gb, param->GBt, cfg.gbLen);
 800ba1a:	0029      	movs	r1, r5
 800ba1c:	201a      	movs	r0, #26
 800ba1e:	ab02      	add	r3, sp, #8
 800ba20:	310f      	adds	r1, #15
 800ba22:	18c0      	adds	r0, r0, r3
 800ba24:	f004 fc84 	bl	8010330 <memcpy>
    RFAL_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 800ba28:	200f      	movs	r0, #15
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800ba2a:	220a      	movs	r2, #10
    RFAL_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 800ba2c:	ab02      	add	r3, sp, #8
 800ba2e:	1c69      	adds	r1, r5, #1
 800ba30:	18c0      	adds	r0, r0, r3
    cfg.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800ba32:	7472      	strb	r2, [r6, #17]
    RFAL_MEMCPY(cfg.nfcid, param->nfcid3, RFAL_NFCDEP_NFCID3_LEN);
 800ba34:	f004 fc7c 	bl	8010330 <memcpy>
    cfg.to = param->to;
 800ba38:	7b6a      	ldrb	r2, [r5, #13]
 800ba3a:	ab15      	add	r3, sp, #84	@ 0x54
 800ba3c:	701a      	strb	r2, [r3, #0]
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 800ba3e:	2401      	movs	r4, #1
    cfg.oper     = param->operParam;
 800ba40:	002b      	movs	r3, r5
    cfg.role     = RFAL_NFCDEP_ROLE_TARGET;
 800ba42:	7034      	strb	r4, [r6, #0]
    cfg.oper     = param->operParam;
 800ba44:	3340      	adds	r3, #64	@ 0x40
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	70b3      	strb	r3, [r6, #2]
    cfg.commMode = param->commMode;
 800ba4a:	782b      	ldrb	r3, [r5, #0]
 800ba4c:	7073      	strb	r3, [r6, #1]
    rfalNfcDepInitialize();
 800ba4e:	f7ff fd93 	bl	800b578 <rfalNfcDepInitialize>
    if (cfg == NULL) 
 800ba52:	0030      	movs	r0, r6
 800ba54:	f7ff fd3c 	bl	800b4d0 <nfcipConfig.part.0>
    gNfcip.rxBufLen     = sizeof(rfalNfcDepBufFormat);
 800ba58:	003b      	movs	r3, r7
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	336a      	adds	r3, #106	@ 0x6a
 800ba5e:	32ff      	adds	r2, #255	@ 0xff
 800ba60:	801a      	strh	r2, [r3, #0]
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 800ba62:	9b02      	ldr	r3, [sp, #8]
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 800ba64:	4a0d      	ldr	r2, [pc, #52]	@ (800ba9c <rfalNfcDepListenStartActivation+0x160>)
    gNfcip.rxRcvdLen    = rxParam.rxLen;
 800ba66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    gNfcip.isChaining   = rxParam.isRxChaining;
 800ba68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 800ba6a:	991f      	ldr	r1, [sp, #124]	@ 0x7c
    gNfcip.isChaining   = rxParam.isRxChaining;
 800ba6c:	677b      	str	r3, [r7, #116]	@ 0x74
    gNfcip.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
 800ba6e:	003b      	movs	r3, r7
 800ba70:	3370      	adds	r3, #112	@ 0x70
 800ba72:	801a      	strh	r2, [r3, #0]
    RFAL_EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 800ba74:	2301      	movs	r3, #1
 800ba76:	2200      	movs	r2, #0
 800ba78:	425b      	negs	r3, r3
    gNfcip.rxBuf        = (uint8_t*)rxParam.rxBuf;
 800ba7a:	6679      	str	r1, [r7, #100]	@ 0x64
    RFAL_EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_ATR_RES, (uint8_t*) gNfcip.rxBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 800ba7c:	0020      	movs	r0, r4
 800ba7e:	9301      	str	r3, [sp, #4]
 800ba80:	9200      	str	r2, [sp, #0]
 800ba82:	0013      	movs	r3, r2
 800ba84:	f7ff fbfa 	bl	800b27c <nfcipTx>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d000      	beq.n	800ba8e <rfalNfcDepListenStartActivation+0x152>
 800ba8c:	e763      	b.n	800b956 <rfalNfcDepListenStartActivation+0x1a>
    gNfcip.state = NFCIP_ST_TARG_WAIT_ACTV;
 800ba8e:	230b      	movs	r3, #11
 800ba90:	3750      	adds	r7, #80	@ 0x50
 800ba92:	703b      	strb	r3, [r7, #0]
    return RFAL_ERR_NONE;
 800ba94:	e75f      	b.n	800b956 <rfalNfcDepListenStartActivation+0x1a>
 800ba96:	46c0      	nop			@ (mov r8, r8)
 800ba98:	20001820 	.word	0x20001820
 800ba9c:	00000505 	.word	0x00000505

0800baa0 <rfalNfcDepListenGetActivationStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepListenGetActivationStatus( void )
{
 800baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ReturnCode err;
    uint8_t    BRS;
    
    BRS = RFAL_NFCDEP_BRS_MAINTAIN;
    
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 800baa2:	4d4d      	ldr	r5, [pc, #308]	@ (800bbd8 <rfalNfcDepListenGetActivationStatus+0x138>)
        return RFAL_ERR_WRONG_STATE;
 800baa4:	2421      	movs	r4, #33	@ 0x21
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 800baa6:	002b      	movs	r3, r5
 800baa8:	3350      	adds	r3, #80	@ 0x50
 800baaa:	781b      	ldrb	r3, [r3, #0]
    err = nfcipTargetHandleActivation( gNfcip.nfcDepDev, &BRS );
 800baac:	6faf      	ldr	r7, [r5, #120]	@ 0x78
{
 800baae:	b087      	sub	sp, #28
    if( gNfcip.state != NFCIP_ST_TARG_WAIT_ACTV )
 800bab0:	2b0b      	cmp	r3, #11
 800bab2:	d10c      	bne.n	800bace <rfalNfcDepListenGetActivationStatus+0x2e>
    ret = nfcipDataRx( false );
 800bab4:	2000      	movs	r0, #0
 800bab6:	f7ff fceb 	bl	800b490 <nfcipDataRx>
 800baba:	1e04      	subs	r4, r0, #0
    if( ret != RFAL_ERR_NONE )
 800babc:	d157      	bne.n	800bb6e <rfalNfcDepListenGetActivationStatus+0xce>
    if( gNfcip.rxBuf == NULL )
 800babe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
        return RFAL_ERR_IO;
 800bac0:	3403      	adds	r4, #3
    if( gNfcip.rxBuf == NULL )
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d003      	beq.n	800bace <rfalNfcDepListenGetActivationStatus+0x2e>
    if ( gNfcip.rxBuf[msgIt++] != NFCIP_REQ )
 800bac6:	785a      	ldrb	r2, [r3, #1]
 800bac8:	2ad4      	cmp	r2, #212	@ 0xd4
 800baca:	d010      	beq.n	800baee <rfalNfcDepListenGetActivationStatus+0x4e>
        return RFAL_ERR_PROTO;
 800bacc:	240b      	movs	r4, #11
            break;
            
        case RFAL_ERR_PROTO:
        default:
            // re-enable receiving of data
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800bace:	002b      	movs	r3, r5
 800bad0:	2201      	movs	r2, #1
 800bad2:	2100      	movs	r1, #0
 800bad4:	4252      	negs	r2, r2
 800bad6:	336a      	adds	r3, #106	@ 0x6a
 800bad8:	881b      	ldrh	r3, [r3, #0]
 800bada:	9202      	str	r2, [sp, #8]
 800badc:	3205      	adds	r2, #5
 800bade:	9201      	str	r2, [sp, #4]
 800bae0:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800bae2:	0008      	movs	r0, r1
 800bae4:	9200      	str	r2, [sp, #0]
 800bae6:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 800bae8:	f7f7 fd5e 	bl	80035a8 <rfalTransceiveBlockingTx>
            break;
 800baec:	e055      	b.n	800bb9a <rfalNfcDepListenGetActivationStatus+0xfa>
    if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_PSL_REQ )
 800baee:	789a      	ldrb	r2, [r3, #2]
 800baf0:	2a04      	cmp	r2, #4
 800baf2:	d13f      	bne.n	800bb74 <rfalNfcDepListenGetActivationStatus+0xd4>
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 800baf4:	78d9      	ldrb	r1, [r3, #3]
 800baf6:	78ea      	ldrb	r2, [r5, #3]
 800baf8:	4291      	cmp	r1, r2
 800bafa:	d1e7      	bne.n	800bacc <rfalNfcDepListenGetActivationStatus+0x2c>
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 800bafc:	2103      	movs	r1, #3
        *outBRS = gNfcip.rxBuf[msgIt++];                  /* assign output BRS value      */
 800bafe:	791e      	ldrb	r6, [r3, #4]
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 800bb00:	795b      	ldrb	r3, [r3, #5]
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800bb02:	22fe      	movs	r2, #254	@ 0xfe
        gNfcip.cfg.lr = (gNfcip.rxBuf[msgIt++] & RFAL_NFCDEP_LR_VAL_MASK);
 800bb04:	4019      	ands	r1, r3
 800bb06:	002b      	movs	r3, r5
 800bb08:	3343      	adds	r3, #67	@ 0x43
 800bb0a:	7019      	strb	r1, [r3, #0]
        gNfcip.fsc    = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800bb0c:	1c4b      	adds	r3, r1, #1
 800bb0e:	019b      	lsls	r3, r3, #6
 800bb10:	2bfd      	cmp	r3, #253	@ 0xfd
 800bb12:	d800      	bhi.n	800bb16 <rfalNfcDepListenGetActivationStatus+0x76>
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	002b      	movs	r3, r5
 800bb18:	335c      	adds	r3, #92	@ 0x5c
 800bb1a:	801a      	strh	r2, [r3, #0]
        if( nfcDepDev != NULL )
 800bb1c:	2f00      	cmp	r7, #0
 800bb1e:	d014      	beq.n	800bb4a <rfalNfcDepListenGetActivationStatus+0xaa>
            nfcDepDev->info.DSI = (rfalBitRate)rfalNfcDepBRS2DSI( *outBRS );   /* DSI codes the bit rate from Initiator to Target */
 800bb20:	2307      	movs	r3, #7
 800bb22:	003c      	movs	r4, r7
 800bb24:	08f0      	lsrs	r0, r6, #3
 800bb26:	4018      	ands	r0, r3
 800bb28:	3454      	adds	r4, #84	@ 0x54
 800bb2a:	7020      	strb	r0, [r4, #0]
            nfcDepDev->info.DRI = (rfalBitRate)rfalNfcDepBRS2DRI( *outBRS );   /* DRI codes the bit rate from Target to Initiator */
 800bb2c:	0038      	movs	r0, r7
 800bb2e:	4033      	ands	r3, r6
 800bb30:	3055      	adds	r0, #85	@ 0x55
 800bb32:	7003      	strb	r3, [r0, #0]
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 800bb34:	003b      	movs	r3, r7
 800bb36:	3350      	adds	r3, #80	@ 0x50
            nfcDepDev->info.FS = gNfcip.fsc;
 800bb38:	805a      	strh	r2, [r3, #2]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 800bb3a:	2230      	movs	r2, #48	@ 0x30
            nfcDepDev->info.LR = gNfcip.cfg.lr;
 800bb3c:	7019      	strb	r1, [r3, #0]
            nfcDepDev->activation.Initiator.ATR_REQ.PPi &= ~RFAL_NFCDEP_PP_LR_MASK;
 800bb3e:	7bfb      	ldrb	r3, [r7, #15]
 800bb40:	4393      	bics	r3, r2
 800bb42:	001a      	movs	r2, r3
            nfcDepDev->activation.Initiator.ATR_REQ.PPi |= rfalNfcDepLR2PP( gNfcip.cfg.lr );
 800bb44:	010b      	lsls	r3, r1, #4
 800bb46:	4313      	orrs	r3, r2
 800bb48:	73fb      	strb	r3, [r7, #15]
        rfalSetBitRate( RFAL_BR_KEEP, gNfcip.nfcDepDev->info.DSI );
 800bb4a:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800bb4c:	20ff      	movs	r0, #255	@ 0xff
 800bb4e:	3354      	adds	r3, #84	@ 0x54
 800bb50:	7819      	ldrb	r1, [r3, #0]
 800bb52:	f7f5 ff77 	bl	8001a44 <rfalSetBitRate>
        RFAL_EXIT_ON_ERR( ret, nfcipTx( NFCIP_CMD_PSL_RES, txBuf, NULL, 0, 0, NFCIP_NO_FWT ) );
 800bb56:	2301      	movs	r3, #1
 800bb58:	2200      	movs	r2, #0
 800bb5a:	425b      	negs	r3, r3
 800bb5c:	9301      	str	r3, [sp, #4]
 800bb5e:	2005      	movs	r0, #5
 800bb60:	0013      	movs	r3, r2
 800bb62:	9200      	str	r2, [sp, #0]
 800bb64:	a904      	add	r1, sp, #16
 800bb66:	f7ff fb89 	bl	800b27c <nfcipTx>
 800bb6a:	1e04      	subs	r4, r0, #0
 800bb6c:	d01b      	beq.n	800bba6 <rfalNfcDepListenGetActivationStatus+0x106>
    switch (err)
 800bb6e:	2c02      	cmp	r4, #2
 800bb70:	d013      	beq.n	800bb9a <rfalNfcDepListenGetActivationStatus+0xfa>
 800bb72:	e7ac      	b.n	800bace <rfalNfcDepListenGetActivationStatus+0x2e>
        if( gNfcip.rxBuf[msgIt] == (uint8_t)NFCIP_CMD_DEP_REQ )
 800bb74:	2a06      	cmp	r2, #6
 800bb76:	d108      	bne.n	800bb8a <rfalNfcDepListenGetActivationStatus+0xea>
            if( nfcip_PBF_PNI( gNfcip.rxBuf[msgIt] ) != 0U )
 800bb78:	78da      	ldrb	r2, [r3, #3]
 800bb7a:	0791      	lsls	r1, r2, #30
 800bb7c:	d1a6      	bne.n	800bacc <rfalNfcDepListenGetActivationStatus+0x2c>
        if( gNfcip.rxBuf[msgIt++] != gNfcip.cfg.did )     /* Checking DID                 */
 800bb7e:	78e9      	ldrb	r1, [r5, #3]
            if( nfcip_PFBhasDID( gNfcip.rxBuf[ msgIt] ) ) 
 800bb80:	0752      	lsls	r2, r2, #29
 800bb82:	d50d      	bpl.n	800bba0 <rfalNfcDepListenGetActivationStatus+0x100>
                if( gNfcip.rxBuf[++msgIt] != gNfcip.cfg.did )
 800bb84:	791b      	ldrb	r3, [r3, #4]
 800bb86:	428b      	cmp	r3, r1
 800bb88:	d1a0      	bne.n	800bacc <rfalNfcDepListenGetActivationStatus+0x2c>
        gNfcip.isReqPending = true;
 800bb8a:	002b      	movs	r3, r5
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	3384      	adds	r3, #132	@ 0x84
 800bb90:	701a      	strb	r2, [r3, #0]
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 800bb92:	230d      	movs	r3, #13
 800bb94:	3550      	adds	r5, #80	@ 0x50
 800bb96:	702b      	strb	r3, [r5, #0]
                    RFAL_EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 800bb98:	2400      	movs	r4, #0
    }
    
    return err;
}
 800bb9a:	0020      	movs	r0, r4
 800bb9c:	b007      	add	sp, #28
 800bb9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )          /* DID expected but not rcv */
 800bba0:	2900      	cmp	r1, #0
 800bba2:	d0f2      	beq.n	800bb8a <rfalNfcDepListenGetActivationStatus+0xea>
 800bba4:	e792      	b.n	800bacc <rfalNfcDepListenGetActivationStatus+0x2c>
    gNfcip.state = NFCIP_ST_TARG_DEP_RX;
 800bba6:	002b      	movs	r3, r5
 800bba8:	200d      	movs	r0, #13
 800bbaa:	3350      	adds	r3, #80	@ 0x50
 800bbac:	7018      	strb	r0, [r3, #0]
            if( BRS != RFAL_NFCDEP_BRS_MAINTAIN )
 800bbae:	2ec0      	cmp	r6, #192	@ 0xc0
 800bbb0:	d0f2      	beq.n	800bb98 <rfalNfcDepListenGetActivationStatus+0xf8>
                    RFAL_EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_LISTEN_ACTIVE_P2P, gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 800bbb2:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800bbb4:	001a      	movs	r2, r3
 800bbb6:	3354      	adds	r3, #84	@ 0x54
 800bbb8:	3255      	adds	r2, #85	@ 0x55
 800bbba:	7811      	ldrb	r1, [r2, #0]
 800bbbc:	781a      	ldrb	r2, [r3, #0]
                if( gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_ACTIVE )
 800bbbe:	786b      	ldrb	r3, [r5, #1]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d103      	bne.n	800bbcc <rfalNfcDepListenGetActivationStatus+0x12c>
                    RFAL_EXIT_ON_ERR( err, rfalSetMode( ((RFAL_BR_106 == gNfcip.nfcDepDev->info.DRI) ? RFAL_MODE_LISTEN_NFCA : RFAL_MODE_LISTEN_NFCF), gNfcip.nfcDepDev->info.DRI, gNfcip.nfcDepDev->info.DSI ));
 800bbc4:	f7f6 f856 	bl	8001c74 <rfalSetMode>
 800bbc8:	0004      	movs	r4, r0
 800bbca:	e7e6      	b.n	800bb9a <rfalNfcDepListenGetActivationStatus+0xfa>
 800bbcc:	200c      	movs	r0, #12
 800bbce:	2900      	cmp	r1, #0
 800bbd0:	d1f8      	bne.n	800bbc4 <rfalNfcDepListenGetActivationStatus+0x124>
 800bbd2:	3802      	subs	r0, #2
 800bbd4:	e7f6      	b.n	800bbc4 <rfalNfcDepListenGetActivationStatus+0x124>
 800bbd6:	46c0      	nop			@ (mov r8, r8)
 800bbd8:	20001820 	.word	0x20001820

0800bbdc <rfalNfcDepStartTransceive>:


/*******************************************************************************/
ReturnCode rfalNfcDepStartTransceive( const rfalNfcDepTxRxParam *param )
{
 800bbdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    nfcDepParams.txBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;  /* position in txBuf where actual outgoing data is located */
    nfcDepParams.did          = RFAL_NFCDEP_DID_KEEP;
    nfcDepParams.rxBufPaylPos = RFAL_NFCDEP_DEPREQ_HEADER_LEN;
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
    nfcDepParams.rxBufLen     = sizeof(rfalNfcDepBufFormat);
    nfcDepParams.fsc          = param->FSx;
 800bbde:	8b82      	ldrh	r2, [r0, #28]
    nfcDepParams.txBufLen     = param->txBufLen;
 800bbe0:	8883      	ldrh	r3, [r0, #4]
    nfcDepParams.txChaining   = param->isTxChaining;
 800bbe2:	7987      	ldrb	r7, [r0, #6]
    nfcDepParams.fsc          = param->FSx;
 800bbe4:	9200      	str	r2, [sp, #0]
    nfcDepParams.fwt          = param->FWT;
    nfcDepParams.dFwt         = param->dFWT;
 800bbe6:	6982      	ldr	r2, [r0, #24]
    nfcDepParams.txBuf        = (uint8_t *)param->txBuf;
 800bbe8:	6806      	ldr	r6, [r0, #0]

    gNfcip.rxRcvdLen          = param->rxLen;
 800bbea:	4c1b      	ldr	r4, [pc, #108]	@ (800bc58 <rfalNfcDepStartTransceive+0x7c>)
    nfcDepParams.rxBuf        = (uint8_t *)param->rxBuf;
 800bbec:	6885      	ldr	r5, [r0, #8]
    nfcDepParams.fwt          = param->FWT;
 800bbee:	6941      	ldr	r1, [r0, #20]
    nfcDepParams.dFwt         = param->dFWT;
 800bbf0:	9201      	str	r2, [sp, #4]
    gNfcip.rxRcvdLen          = param->rxLen;
 800bbf2:	68c2      	ldr	r2, [r0, #12]
    gNfcip.isChaining         = param->isRxChaining;
 800bbf4:	6900      	ldr	r0, [r0, #16]
    gNfcip.rxBuf        = DEPParams->rxBuf;
 800bbf6:	6665      	str	r5, [r4, #100]	@ 0x64
    gNfcip.isChaining         = param->isRxChaining;
 800bbf8:	6760      	str	r0, [r4, #116]	@ 0x74
    gNfcip.isTxChaining = DEPParams->txChaining;
 800bbfa:	0020      	movs	r0, r4
 800bbfc:	305e      	adds	r0, #94	@ 0x5e
 800bbfe:	7007      	strb	r7, [r0, #0]
    gNfcip.txBufLen     = DEPParams->txBufLen;
 800bc00:	0020      	movs	r0, r4
 800bc02:	3068      	adds	r0, #104	@ 0x68
 800bc04:	8003      	strh	r3, [r0, #0]
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 800bc06:	2504      	movs	r5, #4
 800bc08:	0020      	movs	r0, r4
 800bc0a:	35ff      	adds	r5, #255	@ 0xff
 800bc0c:	306a      	adds	r0, #106	@ 0x6a
    gNfcip.rxRcvdLen          = param->rxLen;
 800bc0e:	66e2      	str	r2, [r4, #108]	@ 0x6c
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 800bc10:	9a01      	ldr	r2, [sp, #4]
    gNfcip.rxBufLen     = DEPParams->rxBufLen;
 800bc12:	8005      	strh	r5, [r0, #0]
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 800bc14:	0020      	movs	r0, r4
    gNfcip.cfg.dFwt     = DEPParams->dFwt;
 800bc16:	64e2      	str	r2, [r4, #76]	@ 0x4c
    gNfcip.fsc          = DEPParams->fsc;
 800bc18:	0022      	movs	r2, r4
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 800bc1a:	4d10      	ldr	r5, [pc, #64]	@ (800bc5c <rfalNfcDepStartTransceive+0x80>)
 800bc1c:	3070      	adds	r0, #112	@ 0x70
    gNfcip.cfg.fwt      = DEPParams->fwt;
 800bc1e:	64a1      	str	r1, [r4, #72]	@ 0x48
    gNfcip.fsc          = DEPParams->fsc;
 800bc20:	9900      	ldr	r1, [sp, #0]
 800bc22:	325c      	adds	r2, #92	@ 0x5c
    gNfcip.txBufPaylPos = DEPParams->txBufPaylPos;
 800bc24:	8005      	strh	r5, [r0, #0]
    gNfcip.fsc          = DEPParams->fsc;
 800bc26:	8011      	strh	r1, [r2, #0]
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 800bc28:	7822      	ldrb	r2, [r4, #0]
    gNfcip.txBuf        = DEPParams->txBuf;
 800bc2a:	6626      	str	r6, [r4, #96]	@ 0x60
    if(gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET)
 800bc2c:	2a01      	cmp	r2, #1
 800bc2e:	d10f      	bne.n	800bc50 <rfalNfcDepStartTransceive+0x74>
        if(DEPParams->txBufLen > 0U)
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d008      	beq.n	800bc46 <rfalNfcDepStartTransceive+0x6a>
            if( !gNfcip.isWait4RTOX )
 800bc34:	0023      	movs	r3, r4
 800bc36:	3386      	adds	r3, #134	@ 0x86
 800bc38:	7819      	ldrb	r1, [r3, #0]
 800bc3a:	230f      	movs	r3, #15
 800bc3c:	2900      	cmp	r1, #0
 800bc3e:	d003      	beq.n	800bc48 <rfalNfcDepStartTransceive+0x6c>
                gNfcip.isTxPending = true;
 800bc40:	0023      	movs	r3, r4
 800bc42:	3385      	adds	r3, #133	@ 0x85
 800bc44:	701a      	strb	r2, [r3, #0]
        return;
 800bc46:	230d      	movs	r3, #13
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800bc48:	3450      	adds	r4, #80	@ 0x50

    nfcipSetDEPParams(&nfcDepParams);
    
    return RFAL_ERR_NONE;
}
 800bc4a:	2000      	movs	r0, #0
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800bc4c:	7023      	strb	r3, [r4, #0]
}
 800bc4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    nfcipClearCounters();
 800bc50:	f7ff fb06 	bl	800b260 <nfcipClearCounters>
 800bc54:	2305      	movs	r3, #5
 800bc56:	e7f7      	b.n	800bc48 <rfalNfcDepStartTransceive+0x6c>
 800bc58:	20001820 	.word	0x20001820
 800bc5c:	00000505 	.word	0x00000505

0800bc60 <rfalNfcDepGetTransceiveStatus>:


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 800bc60:	b5f0      	push	{r4, r5, r6, r7, lr}
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 800bc62:	4da3      	ldr	r5, [pc, #652]	@ (800bef0 <rfalNfcDepGetTransceiveStatus+0x290>)
{
 800bc64:	b08f      	sub	sp, #60	@ 0x3c
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 800bc66:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800bc68:	9307      	str	r3, [sp, #28]
 800bc6a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800bc6c:	9309      	str	r3, [sp, #36]	@ 0x24
    switch( gNfcip.state )
 800bc6e:	002b      	movs	r3, r5
 800bc70:	3350      	adds	r3, #80	@ 0x50
 800bc72:	7818      	ldrb	r0, [r3, #0]
 800bc74:	2810      	cmp	r0, #16
 800bc76:	d901      	bls.n	800bc7c <rfalNfcDepGetTransceiveStatus+0x1c>
 800bc78:	f000 fbf1 	bl	800c45e <rfalNfcDepGetTransceiveStatus+0x7fe>
 800bc7c:	f7f4 fa6a 	bl	8000154 <__gnu_thumb1_case_uhi>
 800bc80:	03ef00d8 	.word	0x03ef00d8
 800bc84:	03ef03ef 	.word	0x03ef03ef
 800bc88:	001100d8 	.word	0x001100d8
 800bc8c:	03ef002d 	.word	0x03ef002d
 800bc90:	03ef03ef 	.word	0x03ef03ef
 800bc94:	03ef03ef 	.word	0x03ef03ef
 800bc98:	01d400d8 	.word	0x01d400d8
 800bc9c:	01af0180 	.word	0x01af0180
 800bca0:	00d8      	.short	0x00d8
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 800bca2:	002b      	movs	r3, r5
 800bca4:	002a      	movs	r2, r5
 800bca6:	6cec      	ldr	r4, [r5, #76]	@ 0x4c
 800bca8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800bcaa:	3368      	adds	r3, #104	@ 0x68
 800bcac:	1900      	adds	r0, r0, r4
 800bcae:	3270      	adds	r2, #112	@ 0x70
 800bcb0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bcb2:	881b      	ldrh	r3, [r3, #0]
 800bcb4:	7812      	ldrb	r2, [r2, #0]
 800bcb6:	9001      	str	r0, [sp, #4]
 800bcb8:	0028      	movs	r0, r5
 800bcba:	2403      	movs	r4, #3
 800bcbc:	3051      	adds	r0, #81	@ 0x51
 800bcbe:	7800      	ldrb	r0, [r0, #0]
 800bcc0:	188a      	adds	r2, r1, r2
 800bcc2:	4020      	ands	r0, r4
 800bcc4:	9000      	str	r0, [sp, #0]
 800bcc6:	2006      	movs	r0, #6
 800bcc8:	f7ff fad8 	bl	800b27c <nfcipTx>
 800bccc:	002b      	movs	r3, r5
 800bcce:	0004      	movs	r4, r0
            switch( ret )
 800bcd0:	3350      	adds	r3, #80	@ 0x50
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d124      	bne.n	800bd20 <rfalNfcDepGetTransceiveStatus+0xc0>
                    gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 800bcd6:	2206      	movs	r2, #6
 800bcd8:	701a      	strb	r2, [r3, #0]
            ret = nfcipDataRx( false );
 800bcda:	2000      	movs	r0, #0
 800bcdc:	f7ff fbd8 	bl	800b490 <nfcipDataRx>
 800bce0:	0004      	movs	r4, r0
            if( ret != RFAL_ERR_BUSY )
 800bce2:	2802      	cmp	r0, #2
 800bce4:	d100      	bne.n	800bce8 <rfalNfcDepGetTransceiveStatus+0x88>
 800bce6:	e101      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
    *outActRxLen    = 0;
 800bce8:	2100      	movs	r1, #0
 800bcea:	9b07      	ldr	r3, [sp, #28]
 800bcec:	8019      	strh	r1, [r3, #0]
    *outIsChaining  = false;
 800bcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf0:	7019      	strb	r1, [r3, #0]
    switch( rxRes )
 800bcf2:	281d      	cmp	r0, #29
 800bcf4:	d900      	bls.n	800bcf8 <rfalNfcDepGetTransceiveStatus+0x98>
 800bcf6:	e09c      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	001a      	movs	r2, r3
 800bcfc:	4082      	lsls	r2, r0
 800bcfe:	487d      	ldr	r0, [pc, #500]	@ (800bef4 <rfalNfcDepGetTransceiveStatus+0x294>)
 800bd00:	4202      	tst	r2, r0
 800bd02:	d13b      	bne.n	800bd7c <rfalNfcDepGetTransceiveStatus+0x11c>
 800bd04:	421a      	tst	r2, r3
 800bd06:	d148      	bne.n	800bd9a <rfalNfcDepGetTransceiveStatus+0x13a>
 800bd08:	2c04      	cmp	r4, #4
 800bd0a:	d000      	beq.n	800bd0e <rfalNfcDepGetTransceiveStatus+0xae>
 800bd0c:	e091      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            if( gNfcip.cntTORetrys++ >= RFAL_NFCDEP_TO_RETRYS )
 800bd0e:	002a      	movs	r2, r5
 800bd10:	3257      	adds	r2, #87	@ 0x57
 800bd12:	7813      	ldrb	r3, [r2, #0]
 800bd14:	1c59      	adds	r1, r3, #1
 800bd16:	7011      	strb	r1, [r2, #0]
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d904      	bls.n	800bd26 <rfalNfcDepGetTransceiveStatus+0xc6>
                return RFAL_ERR_PROTO;
 800bd1c:	240b      	movs	r4, #11
 800bd1e:	e088      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
                    gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 800bd20:	2204      	movs	r2, #4
            gNfcip.isRxChaining = false;
 800bd22:	701a      	strb	r2, [r3, #0]
            ret = RFAL_ERR_NONE;                            /* Data exchange done */
 800bd24:	e085      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            if( nfcipIsDeactivationPending() )
 800bd26:	1d2b      	adds	r3, r5, #4
 800bd28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d118      	bne.n	800bd60 <rfalNfcDepGetTransceiveStatus+0x100>
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 800bd2e:	002b      	movs	r3, r5
 800bd30:	3353      	adds	r3, #83	@ 0x53
 800bd32:	7818      	ldrb	r0, [r3, #0]
 800bd34:	230f      	movs	r3, #15
 800bd36:	4398      	bics	r0, r3
 800bd38:	2850      	cmp	r0, #80	@ 0x50
 800bd3a:	d116      	bne.n	800bd6a <rfalNfcDepGetTransceiveStatus+0x10a>
                if( gNfcip.cntNACKRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 800bd3c:	002a      	movs	r2, r5
 800bd3e:	3259      	adds	r2, #89	@ 0x59
 800bd40:	7813      	ldrb	r3, [r2, #0]
 800bd42:	1c59      	adds	r1, r3, #1
 800bd44:	7011      	strb	r1, [r2, #0]
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d8e8      	bhi.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
                RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 800bd4a:	2203      	movs	r2, #3
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	3551      	adds	r5, #81	@ 0x51
 800bd50:	782b      	ldrb	r3, [r5, #0]
 800bd52:	4013      	ands	r3, r2
 800bd54:	4318      	orrs	r0, r3
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 800bd56:	f7ff fb6b 	bl	800b430 <nfcipDEPControlMsg>
 800bd5a:	1e04      	subs	r4, r0, #0
 800bd5c:	d169      	bne.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
 800bd5e:	e0c5      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
            if( nfcipIsDeactivationPending() )
 800bd60:	4798      	blx	r3
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d0e3      	beq.n	800bd2e <rfalNfcDepGetTransceiveStatus+0xce>
                return RFAL_ERR_TIMEOUT;
 800bd66:	2404      	movs	r4, #4
 800bd68:	e063      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            if( gNfcip.cntATNRetrys++ >= RFAL_NFCDEP_MAX_ATN_RETRYS )
 800bd6a:	355a      	adds	r5, #90	@ 0x5a
 800bd6c:	782b      	ldrb	r3, [r5, #0]
 800bd6e:	1c5a      	adds	r2, r3, #1
 800bd70:	702a      	strb	r2, [r5, #0]
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d8d2      	bhi.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 800bd76:	2100      	movs	r1, #0
 800bd78:	2080      	movs	r0, #128	@ 0x80
 800bd7a:	e7ec      	b.n	800bd56 <rfalNfcDepGetTransceiveStatus+0xf6>
            if( gNfcip.cntNACKRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 800bd7c:	002a      	movs	r2, r5
 800bd7e:	3259      	adds	r2, #89	@ 0x59
 800bd80:	7813      	ldrb	r3, [r2, #0]
                return RFAL_ERR_FRAMING;
 800bd82:	2409      	movs	r4, #9
            if( gNfcip.cntNACKRetrys++ >= RFAL_NFCDEP_MAX_NACK_RETRYS )
 800bd84:	1c58      	adds	r0, r3, #1
 800bd86:	7010      	strb	r0, [r2, #0]
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d852      	bhi.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 800bd8c:	2203      	movs	r2, #3
 800bd8e:	2050      	movs	r0, #80	@ 0x50
 800bd90:	3551      	adds	r5, #81	@ 0x51
 800bd92:	782b      	ldrb	r3, [r5, #0]
 800bd94:	4013      	ands	r3, r2
 800bd96:	4318      	orrs	r0, r3
 800bd98:	e7dd      	b.n	800bd56 <rfalNfcDepGetTransceiveStatus+0xf6>
    if( gNfcip.rxBuf == NULL )
 800bd9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
        return RFAL_ERR_IO;
 800bd9c:	2403      	movs	r4, #3
    if( gNfcip.rxBuf == NULL )
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d047      	beq.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 800bda2:	781a      	ldrb	r2, [r3, #0]
 800bda4:	9205      	str	r2, [sp, #20]
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 800bda6:	785a      	ldrb	r2, [r3, #1]
 800bda8:	2ad5      	cmp	r2, #213	@ 0xd5
 800bdaa:	d1b7      	bne.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 800bdac:	789a      	ldrb	r2, [r3, #2]
 800bdae:	2a07      	cmp	r2, #7
 800bdb0:	d1b4      	bne.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 800bdb2:	78dc      	ldrb	r4, [r3, #3]
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 800bdb4:	3218      	adds	r2, #24
 800bdb6:	0021      	movs	r1, r4
 800bdb8:	4391      	bics	r1, r2
 800bdba:	0008      	movs	r0, r1
 800bdbc:	000a      	movs	r2, r1
 800bdbe:	21bf      	movs	r1, #191	@ 0xbf
 800bdc0:	3840      	subs	r0, #64	@ 0x40
 800bdc2:	4208      	tst	r0, r1
 800bdc4:	d001      	beq.n	800bdca <rfalNfcDepGetTransceiveStatus+0x16a>
 800bdc6:	2c1f      	cmp	r4, #31
 800bdc8:	d8a8      	bhi.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800bdca:	78e9      	ldrb	r1, [r5, #3]
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	d033      	beq.n	800be38 <rfalNfcDepGetTransceiveStatus+0x1d8>
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (!nfcip_PFBhasDID( rxPFB )) )
 800bdd0:	7918      	ldrb	r0, [r3, #4]
 800bdd2:	4288      	cmp	r0, r1
 800bdd4:	d1a2      	bne.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
 800bdd6:	0761      	lsls	r1, r4, #29
 800bdd8:	d5a0      	bpl.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800bdda:	2601      	movs	r6, #1
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (!nfcip_PFBhasDID( rxPFB )) )
 800bddc:	2705      	movs	r7, #5
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 800bdde:	7929      	ldrb	r1, [r5, #4]
 800bde0:	2900      	cmp	r1, #0
 800bde2:	d02f      	beq.n	800be44 <rfalNfcDepGetTransceiveStatus+0x1e4>
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || (!nfcip_PFBhasNAD( rxPFB )) )
 800bde4:	5dd8      	ldrb	r0, [r3, r7]
 800bde6:	4288      	cmp	r0, r1
 800bde8:	d198      	bne.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
 800bdea:	0721      	lsls	r1, r4, #28
 800bdec:	d596      	bpl.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
 800bdee:	3701      	adds	r7, #1
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800bdf0:	3601      	adds	r6, #1
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || (!nfcip_PFBhasNAD( rxPFB )) )
 800bdf2:	b2ff      	uxtb	r7, r7
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800bdf4:	b2f6      	uxtb	r6, r6
    if( nfcip_PFBisRPDU( rxPFB ) )
 800bdf6:	2a40      	cmp	r2, #64	@ 0x40
 800bdf8:	d137      	bne.n	800be6a <rfalNfcDepGetTransceiveStatus+0x20a>
        if( nfcip_PFBisRACK( rxPFB ) )
 800bdfa:	230f      	movs	r3, #15
 800bdfc:	0022      	movs	r2, r4
 800bdfe:	439a      	bics	r2, r3
 800be00:	2a40      	cmp	r2, #64	@ 0x40
 800be02:	d18b      	bne.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 800be04:	0029      	movs	r1, r5
 800be06:	2203      	movs	r2, #3
 800be08:	0020      	movs	r0, r4
 800be0a:	3151      	adds	r1, #81	@ 0x51
 800be0c:	780b      	ldrb	r3, [r1, #0]
 800be0e:	4010      	ands	r0, r2
 800be10:	4283      	cmp	r3, r0
 800be12:	d11a      	bne.n	800be4a <rfalNfcDepGetTransceiveStatus+0x1ea>
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800be14:	3301      	adds	r3, #1
 800be16:	4013      	ands	r3, r2
 800be18:	700b      	strb	r3, [r1, #0]
                if( !gNfcip.isTxChaining )
 800be1a:	002b      	movs	r3, r5
 800be1c:	335e      	adds	r3, #94	@ 0x5e
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d100      	bne.n	800be26 <rfalNfcDepGetTransceiveStatus+0x1c6>
 800be24:	e77a      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
                nfcipClearCounters();
 800be26:	f7ff fa1b 	bl	800b260 <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 800be2a:	2304      	movs	r3, #4
 800be2c:	3550      	adds	r5, #80	@ 0x50
 800be2e:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_NONE;
 800be30:	2400      	movs	r4, #0
}
 800be32:	0020      	movs	r0, r4
 800be34:	b00f      	add	sp, #60	@ 0x3c
 800be36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 800be38:	2704      	movs	r7, #4
 800be3a:	0026      	movs	r6, r4
 800be3c:	403e      	ands	r6, r7
 800be3e:	423c      	tst	r4, r7
 800be40:	d0cd      	beq.n	800bdde <rfalNfcDepGetTransceiveStatus+0x17e>
 800be42:	e76b      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 800be44:	0721      	lsls	r1, r4, #28
 800be46:	d5d6      	bpl.n	800bdf6 <rfalNfcDepGetTransceiveStatus+0x196>
 800be48:	e768      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
                if( gNfcip.cntTxRetrys++ >= RFAL_NFCDEP_MAX_TX_RETRYS )
 800be4a:	3556      	adds	r5, #86	@ 0x56
 800be4c:	7829      	ldrb	r1, [r5, #0]
 800be4e:	1c48      	adds	r0, r1, #1
 800be50:	7028      	strb	r0, [r5, #0]
 800be52:	2902      	cmp	r1, #2
 800be54:	d900      	bls.n	800be58 <rfalNfcDepGetTransceiveStatus+0x1f8>
 800be56:	e761      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 800be58:	3b01      	subs	r3, #1
 800be5a:	4063      	eors	r3, r4
 800be5c:	4213      	tst	r3, r2
 800be5e:	d000      	beq.n	800be62 <rfalNfcDepGetTransceiveStatus+0x202>
 800be60:	e75c      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 800be62:	2205      	movs	r2, #5
 800be64:	4b24      	ldr	r3, [pc, #144]	@ (800bef8 <rfalNfcDepGetTransceiveStatus+0x298>)
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800be66:	701a      	strb	r2, [r3, #0]
                    return RFAL_ERR_BUSY;
 800be68:	e040      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 800be6a:	2a80      	cmp	r2, #128	@ 0x80
 800be6c:	d146      	bne.n	800befc <rfalNfcDepGetTransceiveStatus+0x29c>
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 800be6e:	0020      	movs	r0, r4
 800be70:	3a71      	subs	r2, #113	@ 0x71
 800be72:	4390      	bics	r0, r2
 800be74:	2880      	cmp	r0, #128	@ 0x80
 800be76:	d11b      	bne.n	800beb0 <rfalNfcDepGetTransceiveStatus+0x250>
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 800be78:	002b      	movs	r3, r5
 800be7a:	3353      	adds	r3, #83	@ 0x53
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	4393      	bics	r3, r2
 800be80:	2b80      	cmp	r3, #128	@ 0x80
 800be82:	d000      	beq.n	800be86 <rfalNfcDepGetTransceiveStatus+0x226>
 800be84:	e74a      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 800be86:	002b      	movs	r3, r5
 800be88:	2100      	movs	r1, #0
 800be8a:	335a      	adds	r3, #90	@ 0x5a
 800be8c:	7019      	strb	r1, [r3, #0]
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800be8e:	002b      	movs	r3, r5
 800be90:	3354      	adds	r3, #84	@ 0x54
 800be92:	7818      	ldrb	r0, [r3, #0]
 800be94:	4390      	bics	r0, r2
 800be96:	2890      	cmp	r0, #144	@ 0x90
 800be98:	d102      	bne.n	800bea0 <rfalNfcDepGetTransceiveStatus+0x240>
                    RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800be9a:	3555      	adds	r5, #85	@ 0x55
 800be9c:	7829      	ldrb	r1, [r5, #0]
 800be9e:	e75a      	b.n	800bd56 <rfalNfcDepGetTransceiveStatus+0xf6>
                    if( gNfcip.cntTxRetrys++ >= RFAL_NFCDEP_MAX_TX_RETRYS )
 800bea0:	3556      	adds	r5, #86	@ 0x56
 800bea2:	782b      	ldrb	r3, [r5, #0]
 800bea4:	1c5a      	adds	r2, r3, #1
 800bea6:	702a      	strb	r2, [r5, #0]
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d900      	bls.n	800beae <rfalNfcDepGetTransceiveStatus+0x24e>
 800beac:	e736      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
 800beae:	e7d8      	b.n	800be62 <rfalNfcDepGetTransceiveStatus+0x202>
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 800beb0:	2890      	cmp	r0, #144	@ 0x90
 800beb2:	d000      	beq.n	800beb6 <rfalNfcDepGetTransceiveStatus+0x256>
 800beb4:	e732      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
            if( (gNfcip.cntRTOXRetrys++ > RFAL_NFCDEP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 800beb6:	0029      	movs	r1, r5
 800beb8:	3158      	adds	r1, #88	@ 0x58
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 800beba:	5dde      	ldrb	r6, [r3, r7]
            if( (gNfcip.cntRTOXRetrys++ > RFAL_NFCDEP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 800bebc:	780b      	ldrb	r3, [r1, #0]
 800bebe:	1c5c      	adds	r4, r3, #1
 800bec0:	700c      	strb	r4, [r1, #0]
 800bec2:	2b0a      	cmp	r3, #10
 800bec4:	d900      	bls.n	800bec8 <rfalNfcDepGetTransceiveStatus+0x268>
 800bec6:	e729      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
 800bec8:	002b      	movs	r3, r5
 800beca:	3353      	adds	r3, #83	@ 0x53
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	4393      	bics	r3, r2
 800bed0:	2b80      	cmp	r3, #128	@ 0x80
 800bed2:	d100      	bne.n	800bed6 <rfalNfcDepGetTransceiveStatus+0x276>
 800bed4:	e722      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 800bed6:	1e73      	subs	r3, r6, #1
 800bed8:	2b3a      	cmp	r3, #58	@ 0x3a
 800beda:	d900      	bls.n	800bede <rfalNfcDepGetTransceiveStatus+0x27e>
 800bedc:	e71e      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 800bede:	0031      	movs	r1, r6
 800bee0:	f7ff faa6 	bl	800b430 <nfcipDEPControlMsg>
 800bee4:	1e04      	subs	r4, r0, #0
 800bee6:	d1a4      	bne.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            gNfcip.lastRTOX = rxRTOX;
 800bee8:	3555      	adds	r5, #85	@ 0x55
 800beea:	702e      	strb	r6, [r5, #0]
            return RFAL_ERR_BUSY;  /* Debug purposes */
 800beec:	2402      	movs	r4, #2
 800beee:	e7a0      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
 800bef0:	20001820 	.word	0x20001820
 800bef4:	28200200 	.word	0x28200200
 800bef8:	20001870 	.word	0x20001870
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 800befc:	2103      	movs	r1, #3
 800befe:	0020      	movs	r0, r4
 800bf00:	4aca      	ldr	r2, [pc, #808]	@ (800c22c <rfalNfcDepGetTransceiveStatus+0x5cc>)
 800bf02:	4dcb      	ldr	r5, [pc, #812]	@ (800c230 <rfalNfcDepGetTransceiveStatus+0x5d0>)
 800bf04:	7813      	ldrb	r3, [r2, #0]
 800bf06:	4008      	ands	r0, r1
 800bf08:	4283      	cmp	r3, r0
 800bf0a:	d000      	beq.n	800bf0e <rfalNfcDepGetTransceiveStatus+0x2ae>
 800bf0c:	e706      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800bf0e:	3301      	adds	r3, #1
 800bf10:	400b      	ands	r3, r1
 800bf12:	7013      	strb	r3, [r2, #0]
        nfcipClearCounters();
 800bf14:	f7ff f9a4 	bl	800b260 <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 800bf18:	9a05      	ldr	r2, [sp, #20]
 800bf1a:	9b07      	ldr	r3, [sp, #28]
 800bf1c:	3a04      	subs	r2, #4
 800bf1e:	1b92      	subs	r2, r2, r6
 800bf20:	b292      	uxth	r2, r2
 800bf22:	801a      	strh	r2, [r3, #0]
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 800bf24:	002b      	movs	r3, r5
 800bf26:	3371      	adds	r3, #113	@ 0x71
 800bf28:	3604      	adds	r6, #4
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	b2f6      	uxtb	r6, r6
 800bf2e:	42b3      	cmp	r3, r6
 800bf30:	d006      	beq.n	800bf40 <rfalNfcDepGetTransceiveStatus+0x2e0>
 800bf32:	2a00      	cmp	r2, #0
 800bf34:	d004      	beq.n	800bf40 <rfalNfcDepGetTransceiveStatus+0x2e0>
            RFAL_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 800bf36:	6e68      	ldr	r0, [r5, #100]	@ 0x64
 800bf38:	1981      	adds	r1, r0, r6
 800bf3a:	18c0      	adds	r0, r0, r3
 800bf3c:	f004 f9b2 	bl	80102a4 <memmove>
        if( nfcip_PFBisIMI( rxPFB ) )
 800bf40:	230f      	movs	r3, #15
 800bf42:	439c      	bics	r4, r3
 800bf44:	2c10      	cmp	r4, #16
 800bf46:	d114      	bne.n	800bf72 <rfalNfcDepGetTransceiveStatus+0x312>
            gNfcip.isRxChaining = true;
 800bf48:	002a      	movs	r2, r5
 800bf4a:	3b0e      	subs	r3, #14
 800bf4c:	325f      	adds	r2, #95	@ 0x5f
 800bf4e:	7013      	strb	r3, [r2, #0]
            *outIsChaining      = true;
 800bf50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800bf52:	2040      	movs	r0, #64	@ 0x40
            *outIsChaining      = true;
 800bf54:	7013      	strb	r3, [r2, #0]
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800bf56:	2203      	movs	r2, #3
 800bf58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf5a:	3551      	adds	r5, #81	@ 0x51
 800bf5c:	5dd9      	ldrb	r1, [r3, r7]
 800bf5e:	782b      	ldrb	r3, [r5, #0]
 800bf60:	4013      	ands	r3, r2
 800bf62:	4318      	orrs	r0, r3
 800bf64:	f7ff fa64 	bl	800b430 <nfcipDEPControlMsg>
 800bf68:	1e04      	subs	r4, r0, #0
 800bf6a:	d000      	beq.n	800bf6e <rfalNfcDepGetTransceiveStatus+0x30e>
 800bf6c:	e761      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            return RFAL_ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 800bf6e:	240d      	movs	r4, #13
 800bf70:	e75f      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            gNfcip.isRxChaining = false;
 800bf72:	2200      	movs	r2, #0
 800bf74:	4baf      	ldr	r3, [pc, #700]	@ (800c234 <rfalNfcDepGetTransceiveStatus+0x5d4>)
 800bf76:	701a      	strb	r2, [r3, #0]
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 800bf78:	4baf      	ldr	r3, [pc, #700]	@ (800c238 <rfalNfcDepGetTransceiveStatus+0x5d8>)
 800bf7a:	3204      	adds	r2, #4
 800bf7c:	701a      	strb	r2, [r3, #0]
    return ret;
 800bf7e:	e757      	b.n	800be30 <rfalNfcDepGetTransceiveStatus+0x1d0>
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 800bf80:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 800bf82:	f7f8 fc99 	bl	80048b8 <timerIsExpired>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d0b0      	beq.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 800bf8a:	78ab      	ldrb	r3, [r5, #2]
 800bf8c:	07db      	lsls	r3, r3, #31
 800bf8e:	d500      	bpl.n	800bf92 <rfalNfcDepGetTransceiveStatus+0x332>
 800bf90:	e6e9      	b.n	800bd66 <rfalNfcDepGetTransceiveStatus+0x106>
            if( gNfcip.cntRTOXRetrys++ > RFAL_NFCDEP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 800bf92:	002a      	movs	r2, r5
 800bf94:	3258      	adds	r2, #88	@ 0x58
 800bf96:	7813      	ldrb	r3, [r2, #0]
 800bf98:	1c59      	adds	r1, r3, #1
 800bf9a:	7011      	strb	r1, [r2, #0]
 800bf9c:	2b0a      	cmp	r3, #10
 800bf9e:	d900      	bls.n	800bfa2 <rfalNfcDepGetTransceiveStatus+0x342>
 800bfa0:	e6bc      	b.n	800bd1c <rfalNfcDepGetTransceiveStatus+0xbc>
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 800bfa2:	002b      	movs	r3, r5
 800bfa4:	220f      	movs	r2, #15
 800bfa6:	2180      	movs	r1, #128	@ 0x80
 800bfa8:	3344      	adds	r3, #68	@ 0x44
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	04c9      	lsls	r1, r1, #19
 800bfae:	4013      	ands	r3, r2
 800bfb0:	330c      	adds	r3, #12
 800bfb2:	40d9      	lsrs	r1, r3
 800bfb4:	293b      	cmp	r1, #59	@ 0x3b
 800bfb6:	d900      	bls.n	800bfba <rfalNfcDepGetTransceiveStatus+0x35a>
 800bfb8:	213b      	movs	r1, #59	@ 0x3b
 800bfba:	002b      	movs	r3, r5
 800bfbc:	b2c9      	uxtb	r1, r1
 800bfbe:	3355      	adds	r3, #85	@ 0x55
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800bfc0:	2090      	movs	r0, #144	@ 0x90
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 800bfc2:	7019      	strb	r1, [r3, #0]
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800bfc4:	f7ff fa34 	bl	800b430 <nfcipDEPControlMsg>
 800bfc8:	1e04      	subs	r4, r0, #0
 800bfca:	d000      	beq.n	800bfce <rfalNfcDepGetTransceiveStatus+0x36e>
 800bfcc:	e731      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            gNfcip.isWait4RTOX = true;
 800bfce:	002b      	movs	r3, r5
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	3386      	adds	r3, #134	@ 0x86
 800bfd4:	701a      	strb	r2, [r3, #0]
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 800bfd6:	230d      	movs	r3, #13
 800bfd8:	3550      	adds	r5, #80	@ 0x50
 800bfda:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_BUSY;
 800bfdc:	e786      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 800bfde:	002b      	movs	r3, r5
 800bfe0:	002a      	movs	r2, r5
 800bfe2:	2001      	movs	r0, #1
 800bfe4:	002e      	movs	r6, r5
 800bfe6:	2703      	movs	r7, #3
 800bfe8:	4240      	negs	r0, r0
 800bfea:	3368      	adds	r3, #104	@ 0x68
 800bfec:	3270      	adds	r2, #112	@ 0x70
 800bfee:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bff0:	881b      	ldrh	r3, [r3, #0]
 800bff2:	7812      	ldrb	r2, [r2, #0]
 800bff4:	3651      	adds	r6, #81	@ 0x51
 800bff6:	9001      	str	r0, [sp, #4]
 800bff8:	7830      	ldrb	r0, [r6, #0]
 800bffa:	188a      	adds	r2, r1, r2
 800bffc:	4038      	ands	r0, r7
 800bffe:	9000      	str	r0, [sp, #0]
 800c000:	2007      	movs	r0, #7
 800c002:	f7ff f93b 	bl	800b27c <nfcipTx>
            gNfcip.isTxPending = false;
 800c006:	002a      	movs	r2, r5
 800c008:	2300      	movs	r3, #0
 800c00a:	3285      	adds	r2, #133	@ 0x85
 800c00c:	7013      	strb	r3, [r2, #0]
            gNfcip.isWait4RTOX = false;
 800c00e:	002a      	movs	r2, r5
 800c010:	3286      	adds	r2, #134	@ 0x86
 800c012:	7013      	strb	r3, [r2, #0]
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800c014:	7833      	ldrb	r3, [r6, #0]
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 800c016:	0004      	movs	r4, r0
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800c018:	3301      	adds	r3, #1
 800c01a:	403b      	ands	r3, r7
 800c01c:	7033      	strb	r3, [r6, #0]
            switch( ret )
 800c01e:	3550      	adds	r5, #80	@ 0x50
 800c020:	2800      	cmp	r0, #0
 800c022:	d11f      	bne.n	800c064 <rfalNfcDepGetTransceiveStatus+0x404>
                    gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 800c024:	230d      	movs	r3, #13
 800c026:	702b      	strb	r3, [r5, #0]
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 800c028:	4b84      	ldr	r3, [pc, #528]	@ (800c23c <rfalNfcDepGetTransceiveStatus+0x5dc>)
 800c02a:	4d81      	ldr	r5, [pc, #516]	@ (800c230 <rfalNfcDepGetTransceiveStatus+0x5d0>)
 800c02c:	7818      	ldrb	r0, [r3, #0]
 800c02e:	2800      	cmp	r0, #0
 800c030:	d01b      	beq.n	800c06a <rfalNfcDepGetTransceiveStatus+0x40a>
                gNfcip.isReqPending = false;
 800c032:	2400      	movs	r4, #0
 800c034:	701c      	strb	r4, [r3, #0]
    *outActRxLen    = 0;
 800c036:	2000      	movs	r0, #0
 800c038:	9b07      	ldr	r3, [sp, #28]
 800c03a:	8018      	strh	r0, [r3, #0]
    *outIsChaining  = false;
 800c03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c03e:	7018      	strb	r0, [r3, #0]
    switch( rxRes )
 800c040:	4284      	cmp	r4, r0
 800c042:	d018      	beq.n	800c076 <rfalNfcDepGetTransceiveStatus+0x416>
 800c044:	2c25      	cmp	r4, #37	@ 0x25
 800c046:	d100      	bne.n	800c04a <rfalNfcDepGetTransceiveStatus+0x3ea>
 800c048:	e6f3      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c04a:	002b      	movs	r3, r5
 800c04c:	2201      	movs	r2, #1
 800c04e:	336a      	adds	r3, #106	@ 0x6a
 800c050:	4252      	negs	r2, r2
 800c052:	881b      	ldrh	r3, [r3, #0]
 800c054:	9202      	str	r2, [sp, #8]
 800c056:	3205      	adds	r2, #5
 800c058:	9201      	str	r2, [sp, #4]
 800c05a:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800c05c:	9200      	str	r2, [sp, #0]
 800c05e:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c060:	0001      	movs	r1, r0
 800c062:	e01d      	b.n	800c0a0 <rfalNfcDepGetTransceiveStatus+0x440>
                    gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 800c064:	230c      	movs	r3, #12
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800c066:	702b      	strb	r3, [r5, #0]
                return RFAL_ERR_NONE;                        /* This block has been transmitted */
 800c068:	e6e3      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
                ret = nfcipDataRx( false );
 800c06a:	f7ff fa11 	bl	800b490 <nfcipDataRx>
 800c06e:	0004      	movs	r4, r0
            if( ret != RFAL_ERR_BUSY )
 800c070:	2802      	cmp	r0, #2
 800c072:	d1e0      	bne.n	800c036 <rfalNfcDepGetTransceiveStatus+0x3d6>
 800c074:	e73a      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
    if( gNfcip.rxBuf == NULL )
 800c076:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 800c078:	2a00      	cmp	r2, #0
 800c07a:	d100      	bne.n	800c07e <rfalNfcDepGetTransceiveStatus+0x41e>
 800c07c:	e1ed      	b.n	800c45a <rfalNfcDepGetTransceiveStatus+0x7fa>
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 800c07e:	7813      	ldrb	r3, [r2, #0]
 800c080:	469c      	mov	ip, r3
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 800c082:	7853      	ldrb	r3, [r2, #1]
 800c084:	2bd4      	cmp	r3, #212	@ 0xd4
 800c086:	d00e      	beq.n	800c0a6 <rfalNfcDepGetTransceiveStatus+0x446>
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c088:	002b      	movs	r3, r5
 800c08a:	2101      	movs	r1, #1
 800c08c:	336a      	adds	r3, #106	@ 0x6a
 800c08e:	4249      	negs	r1, r1
 800c090:	881b      	ldrh	r3, [r3, #0]
 800c092:	9102      	str	r1, [sp, #8]
 800c094:	3105      	adds	r1, #5
 800c096:	9101      	str	r1, [sp, #4]
 800c098:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800c09a:	0020      	movs	r0, r4
 800c09c:	9100      	str	r1, [sp, #0]
 800c09e:	0021      	movs	r1, r4
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c0a0:	f7f7 fa82 	bl	80035a8 <rfalTransceiveBlockingTx>
            return RFAL_ERR_BUSY;            /* RFAL_ERR_PROTO - Ignore bad PNI value  */
 800c0a4:	e722      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
    switch( gNfcip.rxBuf[rxMsgIt++] )
 800c0a6:	7893      	ldrb	r3, [r2, #2]
 800c0a8:	2b08      	cmp	r3, #8
 800c0aa:	d025      	beq.n	800c0f8 <rfalNfcDepGetTransceiveStatus+0x498>
 800c0ac:	2b0a      	cmp	r3, #10
 800c0ae:	d043      	beq.n	800c138 <rfalNfcDepGetTransceiveStatus+0x4d8>
 800c0b0:	2b06      	cmp	r3, #6
 800c0b2:	d1e9      	bne.n	800c088 <rfalNfcDepGetTransceiveStatus+0x428>
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 800c0b4:	78d3      	ldrb	r3, [r2, #3]
 800c0b6:	9305      	str	r3, [sp, #20]
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 800c0b8:	231f      	movs	r3, #31
 800c0ba:	9905      	ldr	r1, [sp, #20]
 800c0bc:	4399      	bics	r1, r3
 800c0be:	0008      	movs	r0, r1
 800c0c0:	000b      	movs	r3, r1
 800c0c2:	21bf      	movs	r1, #191	@ 0xbf
 800c0c4:	3840      	subs	r0, #64	@ 0x40
 800c0c6:	4208      	tst	r0, r1
 800c0c8:	d002      	beq.n	800c0d0 <rfalNfcDepGetTransceiveStatus+0x470>
 800c0ca:	9905      	ldr	r1, [sp, #20]
 800c0cc:	291f      	cmp	r1, #31
 800c0ce:	d8db      	bhi.n	800c088 <rfalNfcDepGetTransceiveStatus+0x428>
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800c0d0:	2004      	movs	r0, #4
 800c0d2:	4f57      	ldr	r7, [pc, #348]	@ (800c230 <rfalNfcDepGetTransceiveStatus+0x5d0>)
 800c0d4:	9905      	ldr	r1, [sp, #20]
 800c0d6:	78fd      	ldrb	r5, [r7, #3]
 800c0d8:	4001      	ands	r1, r0
 800c0da:	2d00      	cmp	r5, #0
 800c0dc:	d05a      	beq.n	800c194 <rfalNfcDepGetTransceiveStatus+0x534>
        if( !nfcip_PFBhasDID( rxPFB ) )
 800c0de:	2900      	cmp	r1, #0
 800c0e0:	d14a      	bne.n	800c178 <rfalNfcDepGetTransceiveStatus+0x518>
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c0e2:	003b      	movs	r3, r7
 800c0e4:	2401      	movs	r4, #1
 800c0e6:	336a      	adds	r3, #106	@ 0x6a
 800c0e8:	4264      	negs	r4, r4
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	9402      	str	r4, [sp, #8]
 800c0ee:	9001      	str	r0, [sp, #4]
 800c0f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c0f2:	9000      	str	r0, [sp, #0]
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c0f4:	0008      	movs	r0, r1
 800c0f6:	e7d3      	b.n	800c0a0 <rfalNfcDepGetTransceiveStatus+0x440>
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 800c0f8:	78e9      	ldrb	r1, [r5, #3]
 800c0fa:	78d3      	ldrb	r3, [r2, #3]
 800c0fc:	428b      	cmp	r3, r1
 800c0fe:	d102      	bne.n	800c106 <rfalNfcDepGetTransceiveStatus+0x4a6>
 800c100:	4662      	mov	r2, ip
 800c102:	2a04      	cmp	r2, #4
 800c104:	d006      	beq.n	800c114 <rfalNfcDepGetTransceiveStatus+0x4b4>
 800c106:	2900      	cmp	r1, #0
 800c108:	d000      	beq.n	800c10c <rfalNfcDepGetTransceiveStatus+0x4ac>
 800c10a:	e6ef      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 800c10c:	4663      	mov	r3, ip
 800c10e:	2b03      	cmp	r3, #3
 800c110:	d003      	beq.n	800c11a <rfalNfcDepGetTransceiveStatus+0x4ba>
 800c112:	e6eb      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
 800c114:	2b00      	cmp	r3, #0
 800c116:	d100      	bne.n	800c11a <rfalNfcDepGetTransceiveStatus+0x4ba>
 800c118:	e6e8      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 800c11a:	2301      	movs	r3, #1
 800c11c:	2200      	movs	r2, #0
 800c11e:	425b      	negs	r3, r3
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	2009      	movs	r0, #9
 800c124:	0013      	movs	r3, r2
 800c126:	9200      	str	r2, [sp, #0]
 800c128:	a90c      	add	r1, sp, #48	@ 0x30
 800c12a:	f7ff f8a7 	bl	800b27c <nfcipTx>
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 800c12e:	2310      	movs	r3, #16
 800c130:	3550      	adds	r5, #80	@ 0x50
            return RFAL_ERR_SLEEP_REQ;
 800c132:	2420      	movs	r4, #32
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 800c134:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_SLEEP_REQ;
 800c136:	e67c      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 800c138:	78e9      	ldrb	r1, [r5, #3]
 800c13a:	78d3      	ldrb	r3, [r2, #3]
 800c13c:	428b      	cmp	r3, r1
 800c13e:	d102      	bne.n	800c146 <rfalNfcDepGetTransceiveStatus+0x4e6>
 800c140:	4662      	mov	r2, ip
 800c142:	2a04      	cmp	r2, #4
 800c144:	d006      	beq.n	800c154 <rfalNfcDepGetTransceiveStatus+0x4f4>
 800c146:	2900      	cmp	r1, #0
 800c148:	d000      	beq.n	800c14c <rfalNfcDepGetTransceiveStatus+0x4ec>
 800c14a:	e6cf      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 800c14c:	4663      	mov	r3, ip
 800c14e:	2b03      	cmp	r3, #3
 800c150:	d903      	bls.n	800c15a <rfalNfcDepGetTransceiveStatus+0x4fa>
 800c152:	e6cb      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
 800c154:	2b00      	cmp	r3, #0
 800c156:	d100      	bne.n	800c15a <rfalNfcDepGetTransceiveStatus+0x4fa>
 800c158:	e6c8      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 800c15a:	2301      	movs	r3, #1
 800c15c:	2200      	movs	r2, #0
 800c15e:	425b      	negs	r3, r3
 800c160:	9301      	str	r3, [sp, #4]
 800c162:	200b      	movs	r0, #11
 800c164:	0013      	movs	r3, r2
 800c166:	9200      	str	r2, [sp, #0]
 800c168:	a90c      	add	r1, sp, #48	@ 0x30
 800c16a:	f7ff f887 	bl	800b27c <nfcipTx>
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 800c16e:	230c      	movs	r3, #12
 800c170:	3550      	adds	r5, #80	@ 0x50
            return RFAL_ERR_RELEASE_REQ;
 800c172:	241f      	movs	r4, #31
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 800c174:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_RELEASE_REQ;
 800c176:	e65c      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 800c178:	7916      	ldrb	r6, [r2, #4]
 800c17a:	42ae      	cmp	r6, r5
 800c17c:	d01a      	beq.n	800c1b4 <rfalNfcDepGetTransceiveStatus+0x554>
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c17e:	003b      	movs	r3, r7
 800c180:	2101      	movs	r1, #1
 800c182:	336a      	adds	r3, #106	@ 0x6a
 800c184:	4249      	negs	r1, r1
 800c186:	881b      	ldrh	r3, [r3, #0]
 800c188:	9102      	str	r1, [sp, #8]
 800c18a:	9001      	str	r0, [sp, #4]
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c18c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c18e:	9100      	str	r1, [sp, #0]
 800c190:	2100      	movs	r1, #0
 800c192:	e7af      	b.n	800c0f4 <rfalNfcDepGetTransceiveStatus+0x494>
    optHdrLen  = 0;
 800c194:	9508      	str	r5, [sp, #32]
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 800c196:	9006      	str	r0, [sp, #24]
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 800c198:	2900      	cmp	r1, #0
 800c19a:	d00f      	beq.n	800c1bc <rfalNfcDepGetTransceiveStatus+0x55c>
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c19c:	003b      	movs	r3, r7
 800c19e:	2101      	movs	r1, #1
 800c1a0:	336a      	adds	r3, #106	@ 0x6a
 800c1a2:	4249      	negs	r1, r1
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	9001      	str	r0, [sp, #4]
 800c1a8:	9102      	str	r1, [sp, #8]
 800c1aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c1ac:	0028      	movs	r0, r5
 800c1ae:	9100      	str	r1, [sp, #0]
 800c1b0:	0029      	movs	r1, r5
 800c1b2:	e775      	b.n	800c0a0 <rfalNfcDepGetTransceiveStatus+0x440>
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800c1b4:	2001      	movs	r0, #1
 800c1b6:	9008      	str	r0, [sp, #32]
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 800c1b8:	3004      	adds	r0, #4
 800c1ba:	9006      	str	r0, [sp, #24]
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 800c1bc:	4e1c      	ldr	r6, [pc, #112]	@ (800c230 <rfalNfcDepGetTransceiveStatus+0x5d0>)
 800c1be:	7930      	ldrb	r0, [r6, #4]
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d03d      	beq.n	800c240 <rfalNfcDepGetTransceiveStatus+0x5e0>
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (!nfcip_PFBhasDID( rxPFB )) )
 800c1c4:	9806      	ldr	r0, [sp, #24]
 800c1c6:	5c10      	ldrb	r0, [r2, r0]
 800c1c8:	42a8      	cmp	r0, r5
 800c1ca:	d101      	bne.n	800c1d0 <rfalNfcDepGetTransceiveStatus+0x570>
 800c1cc:	2900      	cmp	r1, #0
 800c1ce:	d108      	bne.n	800c1e2 <rfalNfcDepGetTransceiveStatus+0x582>
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c1d0:	003b      	movs	r3, r7
 800c1d2:	2101      	movs	r1, #1
 800c1d4:	336a      	adds	r3, #106	@ 0x6a
 800c1d6:	4249      	negs	r1, r1
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	9102      	str	r1, [sp, #8]
 800c1dc:	3105      	adds	r1, #5
 800c1de:	9101      	str	r1, [sp, #4]
 800c1e0:	e7d4      	b.n	800c18c <rfalNfcDepGetTransceiveStatus+0x52c>
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (!nfcip_PFBhasDID( rxPFB )) )
 800c1e2:	9906      	ldr	r1, [sp, #24]
 800c1e4:	3101      	adds	r1, #1
 800c1e6:	b2c9      	uxtb	r1, r1
 800c1e8:	9106      	str	r1, [sp, #24]
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800c1ea:	9908      	ldr	r1, [sp, #32]
 800c1ec:	3101      	adds	r1, #1
 800c1ee:	b2c9      	uxtb	r1, r1
 800c1f0:	9108      	str	r1, [sp, #32]
    if( nfcip_PFBisRPDU( rxPFB ) )
 800c1f2:	210f      	movs	r1, #15
 800c1f4:	2b40      	cmp	r3, #64	@ 0x40
 800c1f6:	d16a      	bne.n	800c2ce <rfalNfcDepGetTransceiveStatus+0x66e>
        if( nfcip_PFBisRACK( rxPFB ) )
 800c1f8:	9b05      	ldr	r3, [sp, #20]
 800c1fa:	438b      	bics	r3, r1
 800c1fc:	2b40      	cmp	r3, #64	@ 0x40
 800c1fe:	d154      	bne.n	800c2aa <rfalNfcDepGetTransceiveStatus+0x64a>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 800c200:	2603      	movs	r6, #3
 800c202:	480a      	ldr	r0, [pc, #40]	@ (800c22c <rfalNfcDepGetTransceiveStatus+0x5cc>)
 800c204:	9f05      	ldr	r7, [sp, #20]
 800c206:	7803      	ldrb	r3, [r0, #0]
 800c208:	4d09      	ldr	r5, [pc, #36]	@ (800c230 <rfalNfcDepGetTransceiveStatus+0x5d0>)
 800c20a:	4037      	ands	r7, r6
 800c20c:	42bb      	cmp	r3, r7
 800c20e:	d138      	bne.n	800c282 <rfalNfcDepGetTransceiveStatus+0x622>
                if( !gNfcip.isTxChaining )
 800c210:	002b      	movs	r3, r5
 800c212:	335e      	adds	r3, #94	@ 0x5e
 800c214:	7818      	ldrb	r0, [r3, #0]
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c216:	002b      	movs	r3, r5
                if( !gNfcip.isTxChaining )
 800c218:	2800      	cmp	r0, #0
 800c21a:	d11f      	bne.n	800c25c <rfalNfcDepGetTransceiveStatus+0x5fc>
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c21c:	3910      	subs	r1, #16
 800c21e:	336a      	adds	r3, #106	@ 0x6a
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	9102      	str	r1, [sp, #8]
 800c224:	3105      	adds	r1, #5
 800c226:	9101      	str	r1, [sp, #4]
 800c228:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800c22a:	e015      	b.n	800c258 <rfalNfcDepGetTransceiveStatus+0x5f8>
 800c22c:	20001871 	.word	0x20001871
 800c230:	20001820 	.word	0x20001820
 800c234:	2000187f 	.word	0x2000187f
 800c238:	20001870 	.word	0x20001870
 800c23c:	200018a4 	.word	0x200018a4
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 800c240:	9905      	ldr	r1, [sp, #20]
 800c242:	0709      	lsls	r1, r1, #28
 800c244:	d5d5      	bpl.n	800c1f2 <rfalNfcDepGetTransceiveStatus+0x592>
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c246:	0033      	movs	r3, r6
 800c248:	2101      	movs	r1, #1
 800c24a:	336a      	adds	r3, #106	@ 0x6a
 800c24c:	4249      	negs	r1, r1
 800c24e:	881b      	ldrh	r3, [r3, #0]
 800c250:	9102      	str	r1, [sp, #8]
 800c252:	3105      	adds	r1, #5
 800c254:	9101      	str	r1, [sp, #4]
 800c256:	6ef1      	ldr	r1, [r6, #108]	@ 0x6c
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c258:	9100      	str	r1, [sp, #0]
 800c25a:	e701      	b.n	800c060 <rfalNfcDepGetTransceiveStatus+0x400>
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800c25c:	2001      	movs	r0, #1
 800c25e:	3344      	adds	r3, #68	@ 0x44
 800c260:	781b      	ldrb	r3, [r3, #0]
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800c262:	3550      	adds	r5, #80	@ 0x50
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800c264:	400b      	ands	r3, r1
 800c266:	330c      	adds	r3, #12
 800c268:	4098      	lsls	r0, r3
 800c26a:	497e      	ldr	r1, [pc, #504]	@ (800c464 <rfalNfcDepGetTransceiveStatus+0x804>)
 800c26c:	f7f3 ff7c 	bl	8000168 <__udivsi3>
 800c270:	3001      	adds	r0, #1
 800c272:	08c3      	lsrs	r3, r0, #3
 800c274:	1ac0      	subs	r0, r0, r3
 800c276:	b280      	uxth	r0, r0
 800c278:	f7f8 fb18 	bl	80048ac <timerCalculateTimer>
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800c27c:	230e      	movs	r3, #14
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800c27e:	62e8      	str	r0, [r5, #44]	@ 0x2c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800c280:	e6f1      	b.n	800c066 <rfalNfcDepGetTransceiveStatus+0x406>
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 800c282:	002a      	movs	r2, r5
 800c284:	3253      	adds	r2, #83	@ 0x53
 800c286:	7812      	ldrb	r2, [r2, #0]
    ret        = RFAL_ERR_INTERNAL;
 800c288:	240c      	movs	r4, #12
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 800c28a:	438a      	bics	r2, r1
 800c28c:	2a80      	cmp	r2, #128	@ 0x80
 800c28e:	d000      	beq.n	800c292 <rfalNfcDepGetTransceiveStatus+0x632>
 800c290:	e5cf      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
 800c292:	9a05      	ldr	r2, [sp, #20]
 800c294:	3b01      	subs	r3, #1
 800c296:	b2db      	uxtb	r3, r3
 800c298:	405a      	eors	r2, r3
 800c29a:	4232      	tst	r2, r6
 800c29c:	d000      	beq.n	800c2a0 <rfalNfcDepGetTransceiveStatus+0x640>
 800c29e:	e5c8      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 800c2a0:	4033      	ands	r3, r6
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800c2a2:	3550      	adds	r5, #80	@ 0x50
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 800c2a4:	7003      	strb	r3, [r0, #0]
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800c2a6:	7029      	strb	r1, [r5, #0]
                return RFAL_ERR_BUSY;
 800c2a8:	e620      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 800c2aa:	2b50      	cmp	r3, #80	@ 0x50
 800c2ac:	d190      	bne.n	800c1d0 <rfalNfcDepGetTransceiveStatus+0x570>
 800c2ae:	0030      	movs	r0, r6
 800c2b0:	2403      	movs	r4, #3
 800c2b2:	3051      	adds	r0, #81	@ 0x51
 800c2b4:	7803      	ldrb	r3, [r0, #0]
 800c2b6:	9d05      	ldr	r5, [sp, #20]
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	405d      	eors	r5, r3
 800c2be:	4225      	tst	r5, r4
 800c2c0:	d000      	beq.n	800c2c4 <rfalNfcDepGetTransceiveStatus+0x664>
 800c2c2:	e785      	b.n	800c1d0 <rfalNfcDepGetTransceiveStatus+0x570>
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 800c2c4:	4023      	ands	r3, r4
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800c2c6:	3650      	adds	r6, #80	@ 0x50
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 800c2c8:	7003      	strb	r3, [r0, #0]
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800c2ca:	7031      	strb	r1, [r6, #0]
            return RFAL_ERR_BUSY;
 800c2cc:	e60e      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
    if( nfcip_PFBisSPDU( rxPFB ) )
 800c2ce:	2b80      	cmp	r3, #128	@ 0x80
 800c2d0:	d142      	bne.n	800c358 <rfalNfcDepGetTransceiveStatus+0x6f8>
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 800c2d2:	9805      	ldr	r0, [sp, #20]
 800c2d4:	4388      	bics	r0, r1
 800c2d6:	2880      	cmp	r0, #128	@ 0x80
 800c2d8:	d102      	bne.n	800c2e0 <rfalNfcDepGetTransceiveStatus+0x680>
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 800c2da:	2100      	movs	r1, #0
 800c2dc:	0018      	movs	r0, r3
 800c2de:	e53a      	b.n	800bd56 <rfalNfcDepGetTransceiveStatus+0xf6>
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 800c2e0:	2890      	cmp	r0, #144	@ 0x90
 800c2e2:	d000      	beq.n	800c2e6 <rfalNfcDepGetTransceiveStatus+0x686>
 800c2e4:	e774      	b.n	800c1d0 <rfalNfcDepGetTransceiveStatus+0x570>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800c2e6:	0033      	movs	r3, r6
 800c2e8:	3354      	adds	r3, #84	@ 0x54
 800c2ea:	781b      	ldrb	r3, [r3, #0]
    ret        = RFAL_ERR_INTERNAL;
 800c2ec:	240c      	movs	r4, #12
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800c2ee:	438b      	bics	r3, r1
 800c2f0:	2b90      	cmp	r3, #144	@ 0x90
 800c2f2:	d000      	beq.n	800c2f6 <rfalNfcDepGetTransceiveStatus+0x696>
 800c2f4:	e59d      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 800c2f6:	0033      	movs	r3, r6
 800c2f8:	9806      	ldr	r0, [sp, #24]
 800c2fa:	3355      	adds	r3, #85	@ 0x55
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	5c10      	ldrb	r0, [r2, r0]
 800c300:	4298      	cmp	r0, r3
 800c302:	d009      	beq.n	800c318 <rfalNfcDepGetTransceiveStatus+0x6b8>
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800c304:	0033      	movs	r3, r6
 800c306:	2101      	movs	r1, #1
 800c308:	336a      	adds	r3, #106	@ 0x6a
 800c30a:	4249      	negs	r1, r1
 800c30c:	881b      	ldrh	r3, [r3, #0]
 800c30e:	9102      	str	r1, [sp, #8]
 800c310:	3105      	adds	r1, #5
 800c312:	9101      	str	r1, [sp, #4]
 800c314:	6ef1      	ldr	r1, [r6, #108]	@ 0x6c
 800c316:	e73a      	b.n	800c18e <rfalNfcDepGetTransceiveStatus+0x52e>
                gNfcip.isWait4RTOX = false;
 800c318:	0033      	movs	r3, r6
 800c31a:	2200      	movs	r2, #0
 800c31c:	3386      	adds	r3, #134	@ 0x86
 800c31e:	701a      	strb	r2, [r3, #0]
                if( gNfcip.isTxPending )
 800c320:	0033      	movs	r3, r6
 800c322:	3385      	adds	r3, #133	@ 0x85
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	4293      	cmp	r3, r2
 800c328:	d002      	beq.n	800c330 <rfalNfcDepGetTransceiveStatus+0x6d0>
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800c32a:	220f      	movs	r2, #15
 800c32c:	4b4e      	ldr	r3, [pc, #312]	@ (800c468 <rfalNfcDepGetTransceiveStatus+0x808>)
 800c32e:	e59a      	b.n	800be66 <rfalNfcDepGetTransceiveStatus+0x206>
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 800c330:	0033      	movs	r3, r6
 800c332:	3344      	adds	r3, #68	@ 0x44
 800c334:	781b      	ldrb	r3, [r3, #0]
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800c336:	3650      	adds	r6, #80	@ 0x50
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 800c338:	400b      	ands	r3, r1
 800c33a:	330c      	adds	r3, #12
 800c33c:	4098      	lsls	r0, r3
 800c33e:	4949      	ldr	r1, [pc, #292]	@ (800c464 <rfalNfcDepGetTransceiveStatus+0x804>)
 800c340:	f7f3 ff12 	bl	8000168 <__udivsi3>
 800c344:	3001      	adds	r0, #1
 800c346:	08c3      	lsrs	r3, r0, #3
 800c348:	1ac0      	subs	r0, r0, r3
 800c34a:	b280      	uxth	r0, r0
 800c34c:	f7f8 faae 	bl	80048ac <timerCalculateTimer>
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800c350:	220e      	movs	r2, #14
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 800c352:	62f0      	str	r0, [r6, #44]	@ 0x2c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800c354:	7032      	strb	r2, [r6, #0]
                return RFAL_ERR_BUSY;
 800c356:	e5c9      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 800c358:	2003      	movs	r0, #3
 800c35a:	4b44      	ldr	r3, [pc, #272]	@ (800c46c <rfalNfcDepGetTransceiveStatus+0x80c>)
 800c35c:	4d44      	ldr	r5, [pc, #272]	@ (800c470 <rfalNfcDepGetTransceiveStatus+0x810>)
 800c35e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c364:	9b05      	ldr	r3, [sp, #20]
 800c366:	4003      	ands	r3, r0
 800c368:	0018      	movs	r0, r3
 800c36a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c36c:	4283      	cmp	r3, r0
 800c36e:	d023      	beq.n	800c3b8 <rfalNfcDepGetTransceiveStatus+0x758>
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 800c370:	3553      	adds	r5, #83	@ 0x53
 800c372:	7828      	ldrb	r0, [r5, #0]
 800c374:	4388      	bics	r0, r1
 800c376:	2880      	cmp	r0, #128	@ 0x80
 800c378:	d1c4      	bne.n	800c304 <rfalNfcDepGetTransceiveStatus+0x6a4>
 800c37a:	2403      	movs	r4, #3
 800c37c:	9805      	ldr	r0, [sp, #20]
 800c37e:	3b01      	subs	r3, #1
 800c380:	b2db      	uxtb	r3, r3
 800c382:	4058      	eors	r0, r3
 800c384:	4220      	tst	r0, r4
 800c386:	d1bd      	bne.n	800c304 <rfalNfcDepGetTransceiveStatus+0x6a4>
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 800c388:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c38a:	4023      	ands	r3, r4
 800c38c:	7003      	strb	r3, [r0, #0]
                if( nfcip_PFBisIMI( rxPFB ) )
 800c38e:	9805      	ldr	r0, [sp, #20]
 800c390:	4388      	bics	r0, r1
 800c392:	2810      	cmp	r0, #16
 800c394:	d1c9      	bne.n	800c32a <rfalNfcDepGetTransceiveStatus+0x6ca>
                    RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800c396:	2040      	movs	r0, #64	@ 0x40
 800c398:	9906      	ldr	r1, [sp, #24]
 800c39a:	4318      	orrs	r0, r3
 800c39c:	5c51      	ldrb	r1, [r2, r1]
 800c39e:	f7ff f847 	bl	800b430 <nfcipDEPControlMsg>
 800c3a2:	1e04      	subs	r4, r0, #0
 800c3a4:	d000      	beq.n	800c3a8 <rfalNfcDepGetTransceiveStatus+0x748>
 800c3a6:	e544      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800c3a8:	2203      	movs	r2, #3
 800c3aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3b4:	7013      	strb	r3, [r2, #0]
 800c3b6:	e599      	b.n	800beec <rfalNfcDepGetTransceiveStatus+0x28c>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 800c3b8:	4663      	mov	r3, ip
 800c3ba:	9a08      	ldr	r2, [sp, #32]
 800c3bc:	3b04      	subs	r3, #4
 800c3be:	1a9b      	subs	r3, r3, r2
 800c3c0:	9a07      	ldr	r2, [sp, #28]
 800c3c2:	8013      	strh	r3, [r2, #0]
        nfcipClearCounters();
 800c3c4:	f7fe ff4c 	bl	800b260 <nfcipClearCounters>
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 800c3c8:	002b      	movs	r3, r5
 800c3ca:	9a08      	ldr	r2, [sp, #32]
 800c3cc:	3371      	adds	r3, #113	@ 0x71
 800c3ce:	1d11      	adds	r1, r2, #4
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	b2c9      	uxtb	r1, r1
 800c3d4:	428b      	cmp	r3, r1
 800c3d6:	d008      	beq.n	800c3ea <rfalNfcDepGetTransceiveStatus+0x78a>
 800c3d8:	9a07      	ldr	r2, [sp, #28]
 800c3da:	8812      	ldrh	r2, [r2, #0]
 800c3dc:	2a00      	cmp	r2, #0
 800c3de:	d004      	beq.n	800c3ea <rfalNfcDepGetTransceiveStatus+0x78a>
            RFAL_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 800c3e0:	6e68      	ldr	r0, [r5, #100]	@ 0x64
 800c3e2:	1841      	adds	r1, r0, r1
 800c3e4:	18c0      	adds	r0, r0, r3
 800c3e6:	f003 ff5d 	bl	80102a4 <memmove>
        if( nfcip_PFBisIMI( rxPFB ) )
 800c3ea:	220f      	movs	r2, #15
 800c3ec:	9b05      	ldr	r3, [sp, #20]
 800c3ee:	4393      	bics	r3, r2
 800c3f0:	2b10      	cmp	r3, #16
 800c3f2:	d119      	bne.n	800c428 <rfalNfcDepGetTransceiveStatus+0x7c8>
            gNfcip.isRxChaining = true;
 800c3f4:	002a      	movs	r2, r5
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800c3f6:	2603      	movs	r6, #3
 800c3f8:	2040      	movs	r0, #64	@ 0x40
            gNfcip.isRxChaining = true;
 800c3fa:	3b0f      	subs	r3, #15
 800c3fc:	325f      	adds	r2, #95	@ 0x5f
 800c3fe:	7013      	strb	r3, [r2, #0]
            *outIsChaining      = true;
 800c400:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c402:	7013      	strb	r3, [r2, #0]
            RFAL_EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800c404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c406:	9a06      	ldr	r2, [sp, #24]
 800c408:	3551      	adds	r5, #81	@ 0x51
 800c40a:	5c99      	ldrb	r1, [r3, r2]
 800c40c:	782b      	ldrb	r3, [r5, #0]
 800c40e:	4033      	ands	r3, r6
 800c410:	4318      	orrs	r0, r3
 800c412:	f7ff f80d 	bl	800b430 <nfcipDEPControlMsg>
 800c416:	1e04      	subs	r4, r0, #0
 800c418:	d000      	beq.n	800c41c <rfalNfcDepGetTransceiveStatus+0x7bc>
 800c41a:	e50a      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800c41c:	782b      	ldrb	r3, [r5, #0]
            return RFAL_ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 800c41e:	340d      	adds	r4, #13
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800c420:	3301      	adds	r3, #1
 800c422:	4033      	ands	r3, r6
 800c424:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 800c426:	e504      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800c428:	003b      	movs	r3, r7
 800c42a:	2001      	movs	r0, #1
 800c42c:	3344      	adds	r3, #68	@ 0x44
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	490c      	ldr	r1, [pc, #48]	@ (800c464 <rfalNfcDepGetTransceiveStatus+0x804>)
 800c432:	4013      	ands	r3, r2
 800c434:	330c      	adds	r3, #12
 800c436:	4098      	lsls	r0, r3
 800c438:	f7f3 fe96 	bl	8000168 <__udivsi3>
 800c43c:	3001      	adds	r0, #1
 800c43e:	08c3      	lsrs	r3, r0, #3
 800c440:	1ac0      	subs	r0, r0, r3
 800c442:	b280      	uxth	r0, r0
 800c444:	f7f8 fa32 	bl	80048ac <timerCalculateTimer>
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800c448:	003b      	movs	r3, r7
 800c44a:	220e      	movs	r2, #14
 800c44c:	3350      	adds	r3, #80	@ 0x50
 800c44e:	701a      	strb	r2, [r3, #0]
            gNfcip.isRxChaining = false;
 800c450:	003b      	movs	r3, r7
 800c452:	2200      	movs	r2, #0
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800c454:	67f8      	str	r0, [r7, #124]	@ 0x7c
            gNfcip.isRxChaining = false;
 800c456:	335f      	adds	r3, #95	@ 0x5f
 800c458:	e463      	b.n	800bd22 <rfalNfcDepGetTransceiveStatus+0xc2>
        return RFAL_ERR_IO;
 800c45a:	2403      	movs	r4, #3
 800c45c:	e4e9      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
    switch( gNfcip.state )
 800c45e:	2414      	movs	r4, #20
 800c460:	e4e7      	b.n	800be32 <rfalNfcDepGetTransceiveStatus+0x1d2>
 800c462:	46c0      	nop			@ (mov r8, r8)
 800c464:	000034f8 	.word	0x000034f8
 800c468:	20001870 	.word	0x20001870
 800c46c:	20001871 	.word	0x20001871
 800c470:	20001820 	.word	0x20001820

0800c474 <rfalNfcDepStartPduTransceive>:
}
 
 
/*******************************************************************************/
ReturnCode rfalNfcDepStartPduTransceive( rfalNfcDepPduTxRxParam param )
{
 800c474:	b084      	sub	sp, #16
 800c476:	b5f0      	push	{r4, r5, r6, r7, lr}
    rfalNfcDepTxRxParam txRxParam;
    
    /* Initialize and store APDU context */
    gNfcip.PDUParam = param;
 800c478:	4c23      	ldr	r4, [pc, #140]	@ (800c508 <rfalNfcDepStartPduTransceive+0x94>)
{
 800c47a:	b08b      	sub	sp, #44	@ 0x2c
 800c47c:	9313      	str	r3, [sp, #76]	@ 0x4c
    gNfcip.PDUParam = param;
 800c47e:	0023      	movs	r3, r4
{
 800c480:	9010      	str	r0, [sp, #64]	@ 0x40
 800c482:	9111      	str	r1, [sp, #68]	@ 0x44
 800c484:	9212      	str	r2, [sp, #72]	@ 0x48
    gNfcip.PDUParam = param;
 800c486:	a910      	add	r1, sp, #64	@ 0x40
 800c488:	c961      	ldmia	r1!, {r0, r5, r6}
 800c48a:	c361      	stmia	r3!, {r0, r5, r6}
 800c48c:	c961      	ldmia	r1!, {r0, r5, r6}
 800c48e:	c361      	stmia	r3!, {r0, r5, r6}
 800c490:	4a1e      	ldr	r2, [pc, #120]	@ (800c50c <rfalNfcDepStartPduTransceive+0x98>)
 800c492:	c921      	ldmia	r1!, {r0, r5}
 800c494:	c321      	stmia	r3!, {r0, r5}
    gNfcip.PDUTxPos = 0;
 800c496:	0013      	movs	r3, r2
 800c498:	2000      	movs	r0, #0
 800c49a:	33a8      	adds	r3, #168	@ 0xa8
 800c49c:	6018      	str	r0, [r3, #0]
    gNfcip.PDURxPos = 0;
    
    /* Convert PDU TxRxParams to Block TxRxParams */
    rfalNfcDepPdu2BLockParam( gNfcip.PDUParam, &txRxParam, gNfcip.PDUTxPos, gNfcip.PDURxPos );
 800c49e:	0013      	movs	r3, r2
 800c4a0:	338c      	adds	r3, #140	@ 0x8c
 800c4a2:	6825      	ldr	r5, [r4, #0]
 800c4a4:	881c      	ldrh	r4, [r3, #0]
 800c4a6:	0013      	movs	r3, r2
 800c4a8:	3394      	adds	r3, #148	@ 0x94
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	469c      	mov	ip, r3
 800c4ae:	0013      	movs	r3, r2
 800c4b0:	3398      	adds	r3, #152	@ 0x98
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	9301      	str	r3, [sp, #4]
 800c4b6:	0013      	movs	r3, r2
 800c4b8:	339c      	adds	r3, #156	@ 0x9c
 800c4ba:	681f      	ldr	r7, [r3, #0]
 800c4bc:	0013      	movs	r3, r2
 800c4be:	33a0      	adds	r3, #160	@ 0xa0
 800c4c0:	681e      	ldr	r6, [r3, #0]
 800c4c2:	0013      	movs	r3, r2
    maxInfLen += ((blockParam->DID != RFAL_NFCDEP_DID_NO) ? RFAL_NFCDEP_DID_LEN : 0U);
 800c4c4:	32a6      	adds	r2, #166	@ 0xa6
 800c4c6:	7812      	ldrb	r2, [r2, #0]
 800c4c8:	33a4      	adds	r3, #164	@ 0xa4
 800c4ca:	8819      	ldrh	r1, [r3, #0]
 800c4cc:	1e53      	subs	r3, r2, #1
 800c4ce:	419a      	sbcs	r2, r3
 800c4d0:	1ecb      	subs	r3, r1, #3
 800c4d2:	189b      	adds	r3, r3, r2
 800c4d4:	b29b      	uxth	r3, r3
    if( (pduParam.txBufLen - txPos) > maxInfLen )
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	429c      	cmp	r4, r3
 800c4da:	d801      	bhi.n	800c4e0 <rfalNfcDepStartPduTransceive+0x6c>
 800c4dc:	0023      	movs	r3, r4
 800c4de:	0002      	movs	r2, r0
    blockParam->FSx    = pduParam.FSx;
 800c4e0:	a802      	add	r0, sp, #8
        blockParam->txBufLen     = maxInfLen;
 800c4e2:	8083      	strh	r3, [r0, #4]
    blockParam->rxBuf        = pduParam.tmpBuf;                        /* Simply using the pdu buffer is not possible because of current ACK handling */
 800c4e4:	9b01      	ldr	r3, [sp, #4]
    blockParam->FSx    = pduParam.FSx;
 800c4e6:	8381      	strh	r1, [r0, #28]
    blockParam->rxBuf        = pduParam.tmpBuf;                        /* Simply using the pdu buffer is not possible because of current ACK handling */
 800c4e8:	9304      	str	r3, [sp, #16]
    blockParam->isRxChaining = &gNfcip.isPDURxChaining;
 800c4ea:	4b09      	ldr	r3, [pc, #36]	@ (800c510 <rfalNfcDepStartPduTransceive+0x9c>)
    blockParam->FWT    = pduParam.FWT;
 800c4ec:	9707      	str	r7, [sp, #28]
    blockParam->isRxChaining = &gNfcip.isPDURxChaining;
 800c4ee:	9306      	str	r3, [sp, #24]
    blockParam->rxLen        = pduParam.rxLen;
 800c4f0:	4663      	mov	r3, ip
    blockParam->dFWT   = pduParam.dFWT;
 800c4f2:	9608      	str	r6, [sp, #32]
        blockParam->isTxChaining = true;
 800c4f4:	7182      	strb	r2, [r0, #6]
    blockParam->txBuf        = (rfalNfcDepBufFormat*)pduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800c4f6:	9502      	str	r5, [sp, #8]
    blockParam->rxLen        = pduParam.rxLen;
 800c4f8:	9305      	str	r3, [sp, #20]
    
    return rfalNfcDepStartTransceive( &txRxParam );
 800c4fa:	f7ff fb6f 	bl	800bbdc <rfalNfcDepStartTransceive>
}
 800c4fe:	b00b      	add	sp, #44	@ 0x2c
 800c500:	bcf0      	pop	{r4, r5, r6, r7}
 800c502:	bc08      	pop	{r3}
 800c504:	b004      	add	sp, #16
 800c506:	4718      	bx	r3
 800c508:	200018a8 	.word	0x200018a8
 800c50c:	20001820 	.word	0x20001820
 800c510:	200018cc 	.word	0x200018cc

0800c514 <rfalNfcDepGetPduTransceiveStatus>:
 
 
/*******************************************************************************/
ReturnCode rfalNfcDepGetPduTransceiveStatus( void )
{
 800c514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c516:	b08d      	sub	sp, #52	@ 0x34
    ReturnCode          ret;
    rfalNfcDepTxRxParam txRxParam;
    
    ret = rfalNfcDepGetTransceiveStatus();
 800c518:	f7ff fba2 	bl	800bc60 <rfalNfcDepGetTransceiveStatus>
 800c51c:	1e04      	subs	r4, r0, #0
    switch( ret )
 800c51e:	d003      	beq.n	800c528 <rfalNfcDepGetPduTransceiveStatus+0x14>
 800c520:	280d      	cmp	r0, #13
 800c522:	d052      	beq.n	800c5ca <rfalNfcDepGetPduTransceiveStatus+0xb6>
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
    }
    
    return ret;
 }
 800c524:	b00d      	add	sp, #52	@ 0x34
 800c526:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( gNfcip.isTxChaining )
 800c528:	4b41      	ldr	r3, [pc, #260]	@ (800c630 <rfalNfcDepGetPduTransceiveStatus+0x11c>)
 800c52a:	4a42      	ldr	r2, [pc, #264]	@ (800c634 <rfalNfcDepGetPduTransceiveStatus+0x120>)
 800c52c:	781e      	ldrb	r6, [r3, #0]
 800c52e:	2e00      	cmp	r6, #0
 800c530:	d04b      	beq.n	800c5ca <rfalNfcDepGetPduTransceiveStatus+0xb6>
                gNfcip.PDUTxPos += gNfcip.txBufLen;
 800c532:	0013      	movs	r3, r2
 800c534:	0011      	movs	r1, r2
 800c536:	33a8      	adds	r3, #168	@ 0xa8
 800c538:	3168      	adds	r1, #104	@ 0x68
 800c53a:	881d      	ldrh	r5, [r3, #0]
 800c53c:	8809      	ldrh	r1, [r1, #0]
 800c53e:	186d      	adds	r5, r5, r1
 800c540:	b2ad      	uxth	r5, r5
 800c542:	801d      	strh	r5, [r3, #0]
                rfalNfcDepPdu2BLockParam( gNfcip.PDUParam, &txRxParam, gNfcip.PDUTxPos, gNfcip.PDURxPos );
 800c544:	0013      	movs	r3, r2
 800c546:	3388      	adds	r3, #136	@ 0x88
 800c548:	6819      	ldr	r1, [r3, #0]
 800c54a:	0013      	movs	r3, r2
 800c54c:	338c      	adds	r3, #140	@ 0x8c
 800c54e:	8818      	ldrh	r0, [r3, #0]
 800c550:	0013      	movs	r3, r2
 800c552:	3394      	adds	r3, #148	@ 0x94
 800c554:	681b      	ldr	r3, [r3, #0]
    if( (pduParam.txBufLen - txPos) > maxInfLen )
 800c556:	1b40      	subs	r0, r0, r5
 800c558:	469c      	mov	ip, r3
 800c55a:	0013      	movs	r3, r2
 800c55c:	3398      	adds	r3, #152	@ 0x98
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	0013      	movs	r3, r2
 800c564:	339c      	adds	r3, #156	@ 0x9c
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	9302      	str	r3, [sp, #8]
 800c56a:	0013      	movs	r3, r2
 800c56c:	33a0      	adds	r3, #160	@ 0xa0
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	9303      	str	r3, [sp, #12]
 800c572:	0013      	movs	r3, r2
    maxInfLen += ((blockParam->DID != RFAL_NFCDEP_DID_NO) ? RFAL_NFCDEP_DID_LEN : 0U);
 800c574:	32a6      	adds	r2, #166	@ 0xa6
 800c576:	7812      	ldrb	r2, [r2, #0]
 800c578:	33a4      	adds	r3, #164	@ 0xa4
 800c57a:	881f      	ldrh	r7, [r3, #0]
 800c57c:	1e53      	subs	r3, r2, #1
 800c57e:	419a      	sbcs	r2, r3
 800c580:	1efb      	subs	r3, r7, #3
 800c582:	189a      	adds	r2, r3, r2
 800c584:	b292      	uxth	r2, r2
    if( (pduParam.txBufLen - txPos) > maxInfLen )
 800c586:	4290      	cmp	r0, r2
 800c588:	dc01      	bgt.n	800c58e <rfalNfcDepGetPduTransceiveStatus+0x7a>
        blockParam->txBufLen     = (pduParam.txBufLen - txPos);
 800c58a:	0026      	movs	r6, r4
 800c58c:	b282      	uxth	r2, r0
    blockParam->FSx    = pduParam.FSx;
 800c58e:	ab04      	add	r3, sp, #16
 800c590:	839f      	strh	r7, [r3, #28]
    blockParam->FWT    = pduParam.FWT;
 800c592:	9b02      	ldr	r3, [sp, #8]
    blockParam->txBuf        = (rfalNfcDepBufFormat*)pduParam.txBuf;   /*  PRQA S 0310 # MISRA 11.3 - Intentional safe cast to avoiding large buffer duplication */
 800c594:	9104      	str	r1, [sp, #16]
    blockParam->FWT    = pduParam.FWT;
 800c596:	9309      	str	r3, [sp, #36]	@ 0x24
    blockParam->dFWT   = pduParam.dFWT;
 800c598:	9b03      	ldr	r3, [sp, #12]
 800c59a:	930a      	str	r3, [sp, #40]	@ 0x28
        blockParam->isTxChaining = true;
 800c59c:	ab04      	add	r3, sp, #16
 800c59e:	719e      	strb	r6, [r3, #6]
        blockParam->txBufLen     = maxInfLen;
 800c5a0:	809a      	strh	r2, [r3, #4]
    blockParam->rxBuf        = pduParam.tmpBuf;                        /* Simply using the pdu buffer is not possible because of current ACK handling */
 800c5a2:	9b01      	ldr	r3, [sp, #4]
 800c5a4:	9306      	str	r3, [sp, #24]
    blockParam->isRxChaining = &gNfcip.isPDURxChaining;
 800c5a6:	4b24      	ldr	r3, [pc, #144]	@ (800c638 <rfalNfcDepGetPduTransceiveStatus+0x124>)
 800c5a8:	9308      	str	r3, [sp, #32]
    blockParam->rxLen        = pduParam.rxLen;
 800c5aa:	4663      	mov	r3, ip
 800c5ac:	9307      	str	r3, [sp, #28]
                if( txRxParam.txBufLen > 0U )      /* MISRA 21.18 */
 800c5ae:	2a00      	cmp	r2, #0
 800c5b0:	d004      	beq.n	800c5bc <rfalNfcDepGetPduTransceiveStatus+0xa8>
                    RFAL_MEMCPY( gNfcip.PDUParam.txBuf->pdu, &gNfcip.PDUParam.txBuf->pdu[gNfcip.PDUTxPos], txRxParam.txBufLen );
 800c5b2:	3505      	adds	r5, #5
 800c5b4:	1d48      	adds	r0, r1, #5
 800c5b6:	1949      	adds	r1, r1, r5
 800c5b8:	f003 feba 	bl	8010330 <memcpy>
                RFAL_EXIT_ON_ERR( ret, rfalNfcDepStartTransceive( &txRxParam ) );
 800c5bc:	a804      	add	r0, sp, #16
 800c5be:	f7ff fb0d 	bl	800bbdc <rfalNfcDepStartTransceive>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d1ae      	bne.n	800c524 <rfalNfcDepGetPduTransceiveStatus+0x10>
                return RFAL_ERR_BUSY;
 800c5c6:	2002      	movs	r0, #2
 800c5c8:	e7ac      	b.n	800c524 <rfalNfcDepGetPduTransceiveStatus+0x10>
            if( gNfcip.PDUParam.rxLen == NULL )
 800c5ca:	4f1c      	ldr	r7, [pc, #112]	@ (800c63c <rfalNfcDepGetPduTransceiveStatus+0x128>)
 800c5cc:	4d19      	ldr	r5, [pc, #100]	@ (800c634 <rfalNfcDepGetPduTransceiveStatus+0x120>)
 800c5ce:	6838      	ldr	r0, [r7, #0]
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d103      	bne.n	800c5dc <rfalNfcDepGetPduTransceiveStatus+0xc8>
                if( ret == RFAL_ERR_AGAIN  )
 800c5d4:	2c0d      	cmp	r4, #13
 800c5d6:	d1a5      	bne.n	800c524 <rfalNfcDepGetPduTransceiveStatus+0x10>
                    return RFAL_ERR_NOTSUPP;
 800c5d8:	3018      	adds	r0, #24
 800c5da:	e7a3      	b.n	800c524 <rfalNfcDepGetPduTransceiveStatus+0x10>
                if( (uint16_t)((uint16_t)gNfcip.PDURxPos + (*gNfcip.PDUParam.rxLen)) > RFAL_FEATURE_NFC_DEP_PDU_MAX_LEN )
 800c5dc:	002e      	movs	r6, r5
            if( (*gNfcip.PDUParam.rxLen) > 0U )    /* MISRA 21.18 */
 800c5de:	8802      	ldrh	r2, [r0, #0]
                if( (uint16_t)((uint16_t)gNfcip.PDURxPos + (*gNfcip.PDUParam.rxLen)) > RFAL_FEATURE_NFC_DEP_PDU_MAX_LEN )
 800c5e0:	36aa      	adds	r6, #170	@ 0xaa
 800c5e2:	8831      	ldrh	r1, [r6, #0]
            if( (*gNfcip.PDUParam.rxLen) > 0U )    /* MISRA 21.18 */
 800c5e4:	2a00      	cmp	r2, #0
 800c5e6:	d018      	beq.n	800c61a <rfalNfcDepGetPduTransceiveStatus+0x106>
                if( (uint16_t)((uint16_t)gNfcip.PDURxPos + (*gNfcip.PDUParam.rxLen)) > RFAL_FEATURE_NFC_DEP_PDU_MAX_LEN )
 800c5e8:	2080      	movs	r0, #128	@ 0x80
 800c5ea:	0080      	lsls	r0, r0, #2
 800c5ec:	4684      	mov	ip, r0
 800c5ee:	1853      	adds	r3, r2, r1
 800c5f0:	b29b      	uxth	r3, r3
                    return RFAL_ERR_NOMEM;
 800c5f2:	2001      	movs	r0, #1
                if( (uint16_t)((uint16_t)gNfcip.PDURxPos + (*gNfcip.PDUParam.rxLen)) > RFAL_FEATURE_NFC_DEP_PDU_MAX_LEN )
 800c5f4:	4563      	cmp	r3, ip
 800c5f6:	d900      	bls.n	800c5fa <rfalNfcDepGetPduTransceiveStatus+0xe6>
 800c5f8:	e794      	b.n	800c524 <rfalNfcDepGetPduTransceiveStatus+0x10>
                RFAL_MEMCPY( &gNfcip.PDUParam.rxBuf->pdu[gNfcip.PDURxPos], gNfcip.PDUParam.tmpBuf->inf, *gNfcip.PDUParam.rxLen );
 800c5fa:	002b      	movs	r3, r5
 800c5fc:	3390      	adds	r3, #144	@ 0x90
 800c5fe:	6818      	ldr	r0, [r3, #0]
 800c600:	002b      	movs	r3, r5
 800c602:	3105      	adds	r1, #5
 800c604:	3398      	adds	r3, #152	@ 0x98
 800c606:	1840      	adds	r0, r0, r1
 800c608:	6819      	ldr	r1, [r3, #0]
 800c60a:	3105      	adds	r1, #5
 800c60c:	f003 fe90 	bl	8010330 <memcpy>
                gNfcip.PDURxPos += *gNfcip.PDUParam.rxLen;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	8832      	ldrh	r2, [r6, #0]
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	189b      	adds	r3, r3, r2
 800c618:	8033      	strh	r3, [r6, #0]
            *gNfcip.PDUParam.rxLen = gNfcip.PDURxPos;
 800c61a:	002b      	movs	r3, r5
 800c61c:	3594      	adds	r5, #148	@ 0x94
 800c61e:	33aa      	adds	r3, #170	@ 0xaa
 800c620:	881a      	ldrh	r2, [r3, #0]
 800c622:	682b      	ldr	r3, [r5, #0]
            return ((ret == RFAL_ERR_AGAIN) ? RFAL_ERR_BUSY : RFAL_ERR_NONE);
 800c624:	3c0d      	subs	r4, #13
            *gNfcip.PDUParam.rxLen = gNfcip.PDURxPos;
 800c626:	801a      	strh	r2, [r3, #0]
            return ((ret == RFAL_ERR_AGAIN) ? RFAL_ERR_BUSY : RFAL_ERR_NONE);
 800c628:	4263      	negs	r3, r4
 800c62a:	415c      	adcs	r4, r3
 800c62c:	0060      	lsls	r0, r4, #1
 800c62e:	e779      	b.n	800c524 <rfalNfcDepGetPduTransceiveStatus+0x10>
 800c630:	2000187e 	.word	0x2000187e
 800c634:	20001820 	.word	0x20001820
 800c638:	200018cc 	.word	0x200018cc
 800c63c:	200018b4 	.word	0x200018b4

0800c640 <rfalNfcaPollerStartSingleCollisionResolution>:
    return BCC;
}

/*******************************************************************************/
static ReturnCode rfalNfcaPollerStartSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 800c640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c642:	000e      	movs	r6, r1
 800c644:	9001      	str	r0, [sp, #4]
 800c646:	0017      	movs	r7, r2
 800c648:	001d      	movs	r5, r3
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
    {
        return RFAL_ERR_PARAM;
 800c64a:	2007      	movs	r0, #7
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 800c64c:	2900      	cmp	r1, #0
 800c64e:	d01f      	beq.n	800c690 <rfalNfcaPollerStartSingleCollisionResolution+0x50>
 800c650:	2a00      	cmp	r2, #0
 800c652:	d01d      	beq.n	800c690 <rfalNfcaPollerStartSingleCollisionResolution+0x50>
 800c654:	2b00      	cmp	r3, #0
 800c656:	d01b      	beq.n	800c690 <rfalNfcaPollerStartSingleCollisionResolution+0x50>
 800c658:	9b08      	ldr	r3, [sp, #32]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d018      	beq.n	800c690 <rfalNfcaPollerStartSingleCollisionResolution+0x50>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 800c65e:	2400      	movs	r4, #0
    *nfcId1Len   = 0;
    RFAL_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 800c660:	220a      	movs	r2, #10
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 800c662:	700c      	strb	r4, [r1, #0]
    RFAL_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 800c664:	0028      	movs	r0, r5
    *nfcId1Len   = 0;
 800c666:	701c      	strb	r4, [r3, #0]
    RFAL_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 800c668:	0021      	movs	r1, r4
 800c66a:	f003 fe2d 	bl	80102c8 <memset>
    
    
    /* Save parameters */
    gNfca.CR.devLimit    = devLimit;
 800c66e:	4b09      	ldr	r3, [pc, #36]	@ (800c694 <rfalNfcaPollerStartSingleCollisionResolution+0x54>)
 800c670:	9a01      	ldr	r2, [sp, #4]
    gNfca.CR.tmrFDT      = RFAL_TIMING_NONE;
    gNfca.CR.retries     = RFAL_NFCA_N_RETRANS;
    gNfca.CR.cascadeLv   = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1;
    gNfca.CR.state       = RFAL_NFCA_CR_CL;
   
    gNfca.CR.doBacktrack  = false;
 800c672:	0020      	movs	r0, r4
    gNfca.CR.devLimit    = devLimit;
 800c674:	711a      	strb	r2, [r3, #4]
    gNfca.CR.nfcId1Len   = nfcId1Len;
 800c676:	9a08      	ldr	r2, [sp, #32]
    gNfca.CR.collPend    = collPending;
 800c678:	615e      	str	r6, [r3, #20]
    gNfca.CR.nfcId1Len   = nfcId1Len;
 800c67a:	629a      	str	r2, [r3, #40]	@ 0x28
    gNfca.CR.cascadeLv   = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1;
 800c67c:	2280      	movs	r2, #128	@ 0x80
 800c67e:	0052      	lsls	r2, r2, #1
 800c680:	859a      	strh	r2, [r3, #44]	@ 0x2c
    gNfca.CR.retries     = RFAL_NFCA_N_RETRANS;
 800c682:	4a05      	ldr	r2, [pc, #20]	@ (800c698 <rfalNfcaPollerStartSingleCollisionResolution+0x58>)
    gNfca.CR.selRes      = selRes;
 800c684:	621f      	str	r7, [r3, #32]
    gNfca.CR.nfcId1      = nfcId1;
 800c686:	625d      	str	r5, [r3, #36]	@ 0x24
    gNfca.CR.tmrFDT      = RFAL_TIMING_NONE;
 800c688:	635c      	str	r4, [r3, #52]	@ 0x34
    gNfca.CR.retries     = RFAL_NFCA_N_RETRANS;
 800c68a:	871a      	strh	r2, [r3, #56]	@ 0x38
    gNfca.CR.doBacktrack  = false;
 800c68c:	333a      	adds	r3, #58	@ 0x3a
 800c68e:	701c      	strb	r4, [r3, #0]
    gNfca.CR.backtrackCnt = 3U;
    
    return RFAL_ERR_NONE;
}
 800c690:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c692:	46c0      	nop			@ (mov r8, r8)
 800c694:	200018d0 	.word	0x200018d0
 800c698:	00000302 	.word	0x00000302

0800c69c <rfalNfcaPollerInitialize>:
/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
    ReturnCode ret;
    
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 800c69c:	2200      	movs	r2, #0
{
 800c69e:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 800c6a0:	0011      	movs	r1, r2
 800c6a2:	2001      	movs	r0, #1
 800c6a4:	f7f5 fae6 	bl	8001c74 <rfalSetMode>
 800c6a8:	1e04      	subs	r4, r0, #0
 800c6aa:	d10a      	bne.n	800c6c2 <rfalNfcaPollerInitialize+0x26>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 800c6ac:	f7f5 fbec 	bl	8001e88 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 800c6b0:	4805      	ldr	r0, [pc, #20]	@ (800c6c8 <rfalNfcaPollerInitialize+0x2c>)
 800c6b2:	f7f5 fc1b 	bl	8001eec <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 800c6b6:	4805      	ldr	r0, [pc, #20]	@ (800c6cc <rfalNfcaPollerInitialize+0x30>)
 800c6b8:	f7f5 fc0e 	bl	8001ed8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 800c6bc:	4804      	ldr	r0, [pc, #16]	@ (800c6d0 <rfalNfcaPollerInitialize+0x34>)
 800c6be:	f7f5 fbf9 	bl	8001eb4 <rfalSetFDTPoll>
    
    return RFAL_ERR_NONE;
}
 800c6c2:	0020      	movs	r0, r4
 800c6c4:	bd10      	pop	{r4, pc}
 800c6c6:	46c0      	nop			@ (mov r8, r8)
 800c6c8:	000108d8 	.word	0x000108d8
 800c6cc:	00000494 	.word	0x00000494
 800c6d0:	00001a7c 	.word	0x00001a7c

0800c6d4 <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 800c6d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800c6d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c714 <rfalNfcaPollerCheckPresence+0x40>)
 800c6d8:	2210      	movs	r2, #16
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	230e      	movs	r3, #14
 800c6de:	446b      	add	r3, sp
 800c6e0:	f7f7 f86e 	bl	80037c0 <rfalISO14443ATransceiveShortFrame>
    if( (ret == RFAL_ERR_RF_COLLISION) || (ret == RFAL_ERR_CRC)  || (ret == RFAL_ERR_NOMEM) || (ret == RFAL_ERR_FRAMING) || (ret == RFAL_ERR_PAR) || (ret == RFAL_ERR_INCOMPLETE_BYTE) )
 800c6e4:	2828      	cmp	r0, #40	@ 0x28
 800c6e6:	d808      	bhi.n	800c6fa <rfalNfcaPollerCheckPresence+0x26>
 800c6e8:	2814      	cmp	r0, #20
 800c6ea:	d808      	bhi.n	800c6fe <rfalNfcaPollerCheckPresence+0x2a>
 800c6ec:	2308      	movs	r3, #8
 800c6ee:	0002      	movs	r2, r0
 800c6f0:	439a      	bics	r2, r3
 800c6f2:	b293      	uxth	r3, r2
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d100      	bne.n	800c6fa <rfalNfcaPollerCheckPresence+0x26>
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800c6f8:	2000      	movs	r0, #0
    {
       ret = RFAL_ERR_NONE;
    }

    return ret;
}
 800c6fa:	b005      	add	sp, #20
 800c6fc:	bd00      	pop	{pc}
 800c6fe:	0002      	movs	r2, r0
 800c700:	4b05      	ldr	r3, [pc, #20]	@ (800c718 <rfalNfcaPollerCheckPresence+0x44>)
 800c702:	3a15      	subs	r2, #21
 800c704:	b292      	uxth	r2, r2
 800c706:	40d3      	lsrs	r3, r2
 800c708:	2201      	movs	r2, #1
 800c70a:	4013      	ands	r3, r2
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800c70c:	3b01      	subs	r3, #1
 800c70e:	4018      	ands	r0, r3
 800c710:	e7f3      	b.n	800c6fa <rfalNfcaPollerCheckPresence+0x26>
 800c712:	46c0      	nop			@ (mov r8, r8)
 800c714:	00000654 	.word	0x00000654
 800c718:	00080141 	.word	0x00080141

0800c71c <rfalNfcaPollerGetSingleCollisionResolutionStatus>:
{
 800c71c:	b570      	push	{r4, r5, r6, lr}
    if(gNfca.CR.tmrFDT != RFAL_TIMING_NONE )
 800c71e:	4cbc      	ldr	r4, [pc, #752]	@ (800ca10 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2f4>)
{
 800c720:	b086      	sub	sp, #24
    if(gNfca.CR.tmrFDT != RFAL_TIMING_NONE )
 800c722:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800c724:	2800      	cmp	r0, #0
 800c726:	d108      	bne.n	800c73a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1e>
    if( gNfca.CR.cascadeLv > (uint8_t)RFAL_NFCA_SEL_CASCADE_L3 )
 800c728:	0023      	movs	r3, r4
 800c72a:	332c      	adds	r3, #44	@ 0x2c
 800c72c:	781d      	ldrb	r5, [r3, #0]
        return RFAL_ERR_INTERNAL;
 800c72e:	210c      	movs	r1, #12
    if( gNfca.CR.cascadeLv > (uint8_t)RFAL_NFCA_SEL_CASCADE_L3 )
 800c730:	2d02      	cmp	r5, #2
 800c732:	d908      	bls.n	800c746 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2a>
}
 800c734:	0008      	movs	r0, r1
 800c736:	b006      	add	sp, #24
 800c738:	bd70      	pop	{r4, r5, r6, pc}
        if( (!platformTimerIsExpired( gNfca.CR.tmrFDT )) )
 800c73a:	f7f8 f8bd 	bl	80048b8 <timerIsExpired>
 800c73e:	2800      	cmp	r0, #0
 800c740:	d1f2      	bne.n	800c728 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xc>
            return RFAL_ERR_BUSY;
 800c742:	2102      	movs	r1, #2
 800c744:	e7f6      	b.n	800c734 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
    switch( gNfca.CR.state )
 800c746:	0023      	movs	r3, r4
 800c748:	332d      	adds	r3, #45	@ 0x2d
 800c74a:	7818      	ldrb	r0, [r3, #0]
 800c74c:	2121      	movs	r1, #33	@ 0x21
 800c74e:	3801      	subs	r0, #1
 800c750:	2805      	cmp	r0, #5
 800c752:	d8ef      	bhi.n	800c734 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
 800c754:	f7f3 fcfe 	bl	8000154 <__gnu_thumb1_case_uhi>
 800c758:	00180008 	.word	0x00180008
 800c75c:	01040030 	.word	0x01040030
 800c760:	00060113 	.word	0x00060113
            return RFAL_ERR_NONE;
 800c764:	2100      	movs	r1, #0
 800c766:	e7e5      	b.n	800c734 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
            RFAL_MEMSET( (uint8_t*)&gNfca.CR.selReq, 0x00, sizeof(rfalNfcaSelReq) );
 800c768:	2205      	movs	r2, #5
 800c76a:	2100      	movs	r1, #0
 800c76c:	48a9      	ldr	r0, [pc, #676]	@ (800ca14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2f8>)
 800c76e:	f003 fdab 	bl	80102c8 <memset>
            gNfca.CR.bytesTxRx = RFAL_NFCA_SDD_REQ_LEN;
 800c772:	0022      	movs	r2, r4
 800c774:	2302      	movs	r3, #2
 800c776:	322f      	adds	r2, #47	@ 0x2f
 800c778:	7013      	strb	r3, [r2, #0]
            gNfca.CR.bitsTxRx  = 0U;
 800c77a:	0022      	movs	r2, r4
 800c77c:	2100      	movs	r1, #0
 800c77e:	3230      	adds	r2, #48	@ 0x30
 800c780:	7011      	strb	r1, [r2, #0]
            gNfca.CR.state     = RFAL_NFCA_CR_SDD_TX;
 800c782:	0022      	movs	r2, r4
 800c784:	322d      	adds	r2, #45	@ 0x2d
 800c786:	7013      	strb	r3, [r2, #0]
            gNfca.CR.selReq.selPar = rfalNfcaSelPar(gNfca.CR.bytesTxRx, gNfca.CR.bitsTxRx);
 800c788:	0021      	movs	r1, r4
 800c78a:	0022      	movs	r2, r4
            gNfca.CR.selReq.selCmd = rfalNfcaCLn2SELCMD( gNfca.CR.cascadeLv );
 800c78c:	006b      	lsls	r3, r5, #1
            gNfca.CR.selReq.selPar = rfalNfcaSelPar(gNfca.CR.bytesTxRx, gNfca.CR.bitsTxRx);
 800c78e:	250f      	movs	r5, #15
            gNfca.CR.selReq.selCmd = rfalNfcaCLn2SELCMD( gNfca.CR.cascadeLv );
 800c790:	3b6d      	subs	r3, #109	@ 0x6d
 800c792:	7623      	strb	r3, [r4, #24]
            gNfca.CR.selReq.selPar = rfalNfcaSelPar(gNfca.CR.bytesTxRx, gNfca.CR.bitsTxRx);
 800c794:	312f      	adds	r1, #47	@ 0x2f
 800c796:	3230      	adds	r2, #48	@ 0x30
 800c798:	780b      	ldrb	r3, [r1, #0]
 800c79a:	7810      	ldrb	r0, [r2, #0]
 800c79c:	011b      	lsls	r3, r3, #4
 800c79e:	4028      	ands	r0, r5
            rfalISO14443AStartTransceiveAnticollisionFrame( (uint8_t*)&gNfca.CR.selReq, &gNfca.CR.bytesTxRx, &gNfca.CR.bitsTxRx, &gNfca.CR.rxLen, RFAL_NFCA_FDTMIN );
 800c7a0:	4d9d      	ldr	r5, [pc, #628]	@ (800ca18 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2fc>)
            gNfca.CR.selReq.selPar = rfalNfcaSelPar(gNfca.CR.bytesTxRx, gNfca.CR.bitsTxRx);
 800c7a2:	4303      	orrs	r3, r0
 800c7a4:	7663      	strb	r3, [r4, #25]
            rfalISO14443AStartTransceiveAnticollisionFrame( (uint8_t*)&gNfca.CR.selReq, &gNfca.CR.bytesTxRx, &gNfca.CR.bitsTxRx, &gNfca.CR.rxLen, RFAL_NFCA_FDTMIN );
 800c7a6:	489d      	ldr	r0, [pc, #628]	@ (800ca1c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x300>)
 800c7a8:	4b9d      	ldr	r3, [pc, #628]	@ (800ca20 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x304>)
 800c7aa:	9500      	str	r5, [sp, #0]
 800c7ac:	f7f6 ff5a 	bl	8003664 <rfalISO14443AStartTransceiveAnticollisionFrame>
            gNfca.CR.state = RFAL_NFCA_CR_SDD;
 800c7b0:	2303      	movs	r3, #3
 800c7b2:	342d      	adds	r4, #45	@ 0x2d
 800c7b4:	7023      	strb	r3, [r4, #0]
            break;
 800c7b6:	e7c4      	b.n	800c742 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
            RFAL_EXIT_ON_BUSY( ret, rfalISO14443AGetTransceiveAnticollisionFrameStatus() );
 800c7b8:	f7f5 fd0c 	bl	80021d4 <rfalISO14443AGetTransceiveAnticollisionFrameStatus>
 800c7bc:	0003      	movs	r3, r0
 800c7be:	0001      	movs	r1, r0
 800c7c0:	2802      	cmp	r0, #2
 800c7c2:	d0be      	beq.n	800c742 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
            if( (ret == RFAL_ERR_TIMEOUT) && (gNfca.CR.devLimit==0U) && (gNfca.CR.retries != 0U) )
 800c7c4:	2804      	cmp	r0, #4
 800c7c6:	d110      	bne.n	800c7ea <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xce>
 800c7c8:	7922      	ldrb	r2, [r4, #4]
 800c7ca:	2a00      	cmp	r2, #0
 800c7cc:	d10d      	bne.n	800c7ea <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xce>
 800c7ce:	0020      	movs	r0, r4
 800c7d0:	3038      	adds	r0, #56	@ 0x38
 800c7d2:	7802      	ldrb	r2, [r0, #0]
 800c7d4:	2a00      	cmp	r2, #0
 800c7d6:	d008      	beq.n	800c7ea <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xce>
                gNfca.CR.retries--;
 800c7d8:	3a01      	subs	r2, #1
 800c7da:	7002      	strb	r2, [r0, #0]
                gNfca.CR.tmrFDT = platformTimerCreate( RFAL_NFCA_T_RETRANS );
 800c7dc:	2005      	movs	r0, #5
 800c7de:	f7f8 f865 	bl	80048ac <timerCalculateTimer>
 800c7e2:	6360      	str	r0, [r4, #52]	@ 0x34
                gNfca.CR.state = RFAL_NFCA_CR_SDD_TX;
 800c7e4:	2302      	movs	r3, #2
 800c7e6:	342d      	adds	r4, #45	@ 0x2d
 800c7e8:	e7e4      	b.n	800c7b4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x98>
            gNfca.CR.rxLen = rfalConvBitsToBytes( gNfca.CR.rxLen );
 800c7ea:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 800c7ec:	3207      	adds	r2, #7
 800c7ee:	08d2      	lsrs	r2, r2, #3
 800c7f0:	8662      	strh	r2, [r4, #50]	@ 0x32
            if( (ret == RFAL_ERR_TIMEOUT) && (gNfca.CR.backtrackCnt != 0U) && (!gNfca.CR.doBacktrack)
 800c7f2:	2b04      	cmp	r3, #4
 800c7f4:	d14d      	bne.n	800c892 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x176>
 800c7f6:	0023      	movs	r3, r4
 800c7f8:	3339      	adds	r3, #57	@ 0x39
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d044      	beq.n	800c88a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x16e>
 800c800:	0023      	movs	r3, r4
 800c802:	333a      	adds	r3, #58	@ 0x3a
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d13f      	bne.n	800c88a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x16e>
                && (!((RFAL_NFCA_SDD_REQ_LEN == gNfca.CR.bytesTxRx) && (0U == gNfca.CR.bitsTxRx)))     )
 800c80a:	0023      	movs	r3, r4
 800c80c:	332f      	adds	r3, #47	@ 0x2f
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b02      	cmp	r3, #2
 800c812:	d105      	bne.n	800c820 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x104>
 800c814:	0023      	movs	r3, r4
 800c816:	3330      	adds	r3, #48	@ 0x30
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d100      	bne.n	800c820 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x104>
 800c81e:	e789      	b.n	800c734 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 800c820:	2026      	movs	r0, #38	@ 0x26
 800c822:	a905      	add	r1, sp, #20
 800c824:	f7ff ff56 	bl	800c6d4 <rfalNfcaPollerCheckPresence>
                if (0U == gNfca.CR.bitsTxRx)
 800c828:	0022      	movs	r2, r4
 800c82a:	3230      	adds	r2, #48	@ 0x30
 800c82c:	7813      	ldrb	r3, [r2, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d104      	bne.n	800c83c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x120>
                    gNfca.CR.bitsTxRx = 7;
 800c832:	3307      	adds	r3, #7
 800c834:	7013      	strb	r3, [r2, #0]
                    gNfca.CR.bytesTxRx--;
 800c836:	0022      	movs	r2, r4
 800c838:	322f      	adds	r2, #47	@ 0x2f
 800c83a:	7813      	ldrb	r3, [r2, #0]
                    gNfca.CR.bitsTxRx--;
 800c83c:	3b01      	subs	r3, #1
 800c83e:	7013      	strb	r3, [r2, #0]
                collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) );
 800c840:	0023      	movs	r3, r4
 800c842:	2101      	movs	r1, #1
 800c844:	332f      	adds	r3, #47	@ 0x2f
 800c846:	7818      	ldrb	r0, [r3, #0]
 800c848:	0023      	movs	r3, r4
 800c84a:	000d      	movs	r5, r1
 800c84c:	3330      	adds	r3, #48	@ 0x30
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	4a72      	ldr	r2, [pc, #456]	@ (800ca1c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x300>)
 800c852:	409d      	lsls	r5, r3
 800c854:	002b      	movs	r3, r5
 800c856:	5c12      	ldrb	r2, [r2, r0]
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 800c858:	4013      	ands	r3, r2
 800c85a:	425a      	negs	r2, r3
 800c85c:	4153      	adcs	r3, r2
                gNfca.CR.doBacktrack = true;
 800c85e:	0022      	movs	r2, r4
 800c860:	323a      	adds	r2, #58	@ 0x3a
 800c862:	7011      	strb	r1, [r2, #0]
                gNfca.CR.backtrackCnt--;
 800c864:	0021      	movs	r1, r4
 800c866:	3139      	adds	r1, #57	@ 0x39
 800c868:	780a      	ldrb	r2, [r1, #0]
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 800c86a:	b2db      	uxtb	r3, r3
                gNfca.CR.backtrackCnt--;
 800c86c:	3a01      	subs	r2, #1
 800c86e:	700a      	strb	r2, [r1, #0]
                if( (gNfca.CR.bytesTxRx + ((gNfca.CR.bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 800c870:	0020      	movs	r0, r4
 800c872:	0025      	movs	r5, r4
 800c874:	3030      	adds	r0, #48	@ 0x30
 800c876:	7802      	ldrb	r2, [r0, #0]
 800c878:	352f      	adds	r5, #47	@ 0x2f
 800c87a:	1e51      	subs	r1, r2, #1
 800c87c:	418a      	sbcs	r2, r1
 800c87e:	7829      	ldrb	r1, [r5, #0]
 800c880:	1852      	adds	r2, r2, r1
 800c882:	2a07      	cmp	r2, #7
 800c884:	d90d      	bls.n	800c8a2 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x186>
                    return RFAL_ERR_PROTO;
 800c886:	210b      	movs	r1, #11
 800c888:	e754      	b.n	800c734 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
                gNfca.CR.doBacktrack = false;
 800c88a:	2300      	movs	r3, #0
 800c88c:	343a      	adds	r4, #58	@ 0x3a
 800c88e:	7023      	strb	r3, [r4, #0]
            if( ret == RFAL_ERR_RF_COLLISION )
 800c890:	e750      	b.n	800c734 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
                gNfca.CR.doBacktrack = false;
 800c892:	0020      	movs	r0, r4
 800c894:	2500      	movs	r5, #0
 800c896:	303a      	adds	r0, #58	@ 0x3a
 800c898:	7005      	strb	r5, [r0, #0]
            if( ret == RFAL_ERR_RF_COLLISION )
 800c89a:	2b1d      	cmp	r3, #29
 800c89c:	d144      	bne.n	800c928 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x20c>
 800c89e:	3b1c      	subs	r3, #28
 800c8a0:	e7e6      	b.n	800c870 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x154>
                if( ((gNfca.CR.bytesTxRx + ((gNfca.CR.bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (gNfca.CR.backtrackCnt != 0U) )
 800c8a2:	2a07      	cmp	r2, #7
 800c8a4:	d10c      	bne.n	800c8c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1a4>
 800c8a6:	0026      	movs	r6, r4
 800c8a8:	3639      	adds	r6, #57	@ 0x39
 800c8aa:	7831      	ldrb	r1, [r6, #0]
 800c8ac:	2900      	cmp	r1, #0
 800c8ae:	d007      	beq.n	800c8c0 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1a4>
                    gNfca.CR.bytesTxRx = (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN) - 1U;
 800c8b0:	2305      	movs	r3, #5
 800c8b2:	702b      	strb	r3, [r5, #0]
                    collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 800c8b4:	7f63      	ldrb	r3, [r4, #29]
                    gNfca.CR.backtrackCnt--;
 800c8b6:	3901      	subs	r1, #1
                    gNfca.CR.bitsTxRx = 7;
 800c8b8:	7002      	strb	r2, [r0, #0]
                    collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 800c8ba:	3278      	adds	r2, #120	@ 0x78
                    gNfca.CR.backtrackCnt--;
 800c8bc:	7031      	strb	r1, [r6, #0]
                    collBit = (uint8_t)( ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & (1U << gNfca.CR.bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 800c8be:	4393      	bics	r3, r2
                if( (gNfca.CR.devLimit == 0U) && (!(*gNfca.CR.collPend)) )
 800c8c0:	7920      	ldrb	r0, [r4, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	6961      	ldr	r1, [r4, #20]
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d105      	bne.n	800c8d6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ba>
 800c8ca:	7808      	ldrb	r0, [r1, #0]
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d102      	bne.n	800c8d6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1ba>
                    *gNfca.CR.collPend = true;
 800c8d0:	700a      	strb	r2, [r1, #0]
                    return RFAL_ERR_IGNORE;
 800c8d2:	2112      	movs	r1, #18
 800c8d4:	e72e      	b.n	800c734 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
                *gNfca.CR.collPend = true;
 800c8d6:	700a      	strb	r2, [r1, #0]
                if (collBit != 0U)
 800c8d8:	4950      	ldr	r1, [pc, #320]	@ (800ca1c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x300>)
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d012      	beq.n	800c904 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1e8>
                    ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] = (uint8_t)(((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] | (1U << gNfca.CR.bitsTxRx));   /* MISRA 10.3 */
 800c8de:	0020      	movs	r0, r4
 800c8e0:	0023      	movs	r3, r4
 800c8e2:	3030      	adds	r0, #48	@ 0x30
 800c8e4:	7800      	ldrb	r0, [r0, #0]
 800c8e6:	332f      	adds	r3, #47	@ 0x2f
 800c8e8:	4082      	lsls	r2, r0
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	5cc8      	ldrb	r0, [r1, r3]
 800c8ee:	4302      	orrs	r2, r0
 800c8f0:	54ca      	strb	r2, [r1, r3]
                gNfca.CR.bitsTxRx++;
 800c8f2:	0022      	movs	r2, r4
 800c8f4:	3230      	adds	r2, #48	@ 0x30
 800c8f6:	7813      	ldrb	r3, [r2, #0]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	b2db      	uxtb	r3, r3
                if( gNfca.CR.bitsTxRx == RFAL_BITS_IN_BYTE )
 800c8fc:	2b08      	cmp	r3, #8
 800c8fe:	d00c      	beq.n	800c91a <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1fe>
                    gNfca.CR.bytesTxRx++;
 800c900:	7013      	strb	r3, [r2, #0]
 800c902:	e76f      	b.n	800c7e4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0xc8>
                    ((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] = (uint8_t)(((uint8_t*)&gNfca.CR.selReq)[gNfca.CR.bytesTxRx] & ~(1U << gNfca.CR.bitsTxRx));  /* MISRA 10.3 */
 800c904:	0023      	movs	r3, r4
 800c906:	332f      	adds	r3, #47	@ 0x2f
 800c908:	7818      	ldrb	r0, [r3, #0]
 800c90a:	0023      	movs	r3, r4
 800c90c:	3330      	adds	r3, #48	@ 0x30
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	409a      	lsls	r2, r3
 800c912:	5c0b      	ldrb	r3, [r1, r0]
 800c914:	4393      	bics	r3, r2
 800c916:	540b      	strb	r3, [r1, r0]
 800c918:	e7eb      	b.n	800c8f2 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1d6>
                    gNfca.CR.bitsTxRx = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	7013      	strb	r3, [r2, #0]
                    gNfca.CR.bytesTxRx++;
 800c91e:	0022      	movs	r2, r4
 800c920:	322f      	adds	r2, #47	@ 0x2f
 800c922:	7813      	ldrb	r3, [r2, #0]
 800c924:	3301      	adds	r3, #1
 800c926:	e7eb      	b.n	800c900 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x1e4>
            if( ret != RFAL_ERR_NONE )
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d000      	beq.n	800c92e <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x212>
 800c92c:	e702      	b.n	800c734 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
            if( (gNfca.CR.devLimit == 0U) && (gNfca.CR.rxLen != sizeof(rfalNfcaSddRes)) )
 800c92e:	7923      	ldrb	r3, [r4, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d101      	bne.n	800c938 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x21c>
 800c934:	2a05      	cmp	r2, #5
 800c936:	d1a6      	bne.n	800c886 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x16a>
            if( gNfca.CR.selReq.bcc != rfalNfcaCalculateBcc( gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 800c938:	2200      	movs	r2, #0
    BCC = 0;
 800c93a:	0013      	movs	r3, r2
            if( gNfca.CR.selReq.bcc != rfalNfcaCalculateBcc( gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 800c93c:	7fa1      	ldrb	r1, [r4, #30]
        BCC ^= buf[i];
 800c93e:	4d35      	ldr	r5, [pc, #212]	@ (800ca14 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2f8>)
 800c940:	5ca8      	ldrb	r0, [r5, r2]
    for(i = 0; i < bufLen; i++)
 800c942:	3201      	adds	r2, #1
        BCC ^= buf[i];
 800c944:	4043      	eors	r3, r0
    for(i = 0; i < bufLen; i++)
 800c946:	2a04      	cmp	r2, #4
 800c948:	d1fa      	bne.n	800c940 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x224>
            if( gNfca.CR.selReq.bcc != rfalNfcaCalculateBcc( gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 800c94a:	4299      	cmp	r1, r3
 800c94c:	d19b      	bne.n	800c886 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x16a>
            gNfca.CR.selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800c94e:	2370      	movs	r3, #112	@ 0x70
 800c950:	7663      	strb	r3, [r4, #25]
            gNfca.CR.retries = RFAL_NFCA_N_RETRANS;
 800c952:	0023      	movs	r3, r4
 800c954:	2102      	movs	r1, #2
 800c956:	3338      	adds	r3, #56	@ 0x38
            gNfca.CR.state   = RFAL_NFCA_CR_SEL_TX;
 800c958:	342d      	adds	r4, #45	@ 0x2d
            gNfca.CR.retries = RFAL_NFCA_N_RETRANS;
 800c95a:	7019      	strb	r1, [r3, #0]
            gNfca.CR.state   = RFAL_NFCA_CR_SEL_TX;
 800c95c:	7022      	strb	r2, [r4, #0]
            break;
 800c95e:	e6f0      	b.n	800c742 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
            rfalTransceiveBlockingTx( (uint8_t*)&gNfca.CR.selReq, sizeof(rfalNfcaSelReq), (uint8_t*)gNfca.CR.selRes, sizeof(rfalNfcaSelRes), &gNfca.CR.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN );        
 800c960:	4b2d      	ldr	r3, [pc, #180]	@ (800ca18 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2fc>)
 800c962:	2107      	movs	r1, #7
 800c964:	9302      	str	r3, [sp, #8]
 800c966:	2300      	movs	r3, #0
 800c968:	9301      	str	r3, [sp, #4]
 800c96a:	4b2d      	ldr	r3, [pc, #180]	@ (800ca20 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x304>)
 800c96c:	482b      	ldr	r0, [pc, #172]	@ (800ca1c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x300>)
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	6a22      	ldr	r2, [r4, #32]
 800c972:	2301      	movs	r3, #1
 800c974:	f7f6 fe18 	bl	80035a8 <rfalTransceiveBlockingTx>
            gNfca.CR.state   = RFAL_NFCA_CR_SEL;
 800c978:	342d      	adds	r4, #45	@ 0x2d
 800c97a:	2305      	movs	r3, #5
 800c97c:	e71a      	b.n	800c7b4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x98>
            RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 800c97e:	f7f5 fc1f 	bl	80021c0 <rfalGetTransceiveStatus>
 800c982:	0005      	movs	r5, r0
 800c984:	0001      	movs	r1, r0
 800c986:	2802      	cmp	r0, #2
 800c988:	d100      	bne.n	800c98c <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x270>
 800c98a:	e6da      	b.n	800c742 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
            if( (ret == RFAL_ERR_TIMEOUT) && (gNfca.CR.devLimit==0U) && (gNfca.CR.retries != 0U) )
 800c98c:	2804      	cmp	r0, #4
 800c98e:	d112      	bne.n	800c9b6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x29a>
 800c990:	7923      	ldrb	r3, [r4, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d000      	beq.n	800c998 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x27c>
 800c996:	e6cd      	b.n	800c734 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
 800c998:	0022      	movs	r2, r4
 800c99a:	3238      	adds	r2, #56	@ 0x38
 800c99c:	7813      	ldrb	r3, [r2, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d100      	bne.n	800c9a4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x288>
 800c9a2:	e6c7      	b.n	800c734 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
                gNfca.CR.retries--;
 800c9a4:	3b01      	subs	r3, #1
                gNfca.CR.tmrFDT = platformTimerCreate( RFAL_NFCA_T_RETRANS );
 800c9a6:	2005      	movs	r0, #5
                gNfca.CR.retries--;
 800c9a8:	7013      	strb	r3, [r2, #0]
                gNfca.CR.tmrFDT = platformTimerCreate( RFAL_NFCA_T_RETRANS );
 800c9aa:	f7f7 ff7f 	bl	80048ac <timerCalculateTimer>
 800c9ae:	6360      	str	r0, [r4, #52]	@ 0x34
                gNfca.CR.state = RFAL_NFCA_CR_SEL_TX;
 800c9b0:	342d      	adds	r4, #45	@ 0x2d
 800c9b2:	7025      	strb	r5, [r4, #0]
                break;
 800c9b4:	e6c5      	b.n	800c742 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
            if( ret != RFAL_ERR_NONE )
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d000      	beq.n	800c9bc <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2a0>
 800c9ba:	e6bb      	b.n	800c734 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x18>
            gNfca.CR.rxLen = rfalConvBitsToBytes( gNfca.CR.rxLen );
 800c9bc:	8e65      	ldrh	r5, [r4, #50]	@ 0x32
 800c9be:	3507      	adds	r5, #7
 800c9c0:	08ed      	lsrs	r5, r5, #3
 800c9c2:	8665      	strh	r5, [r4, #50]	@ 0x32
            if( gNfca.CR.rxLen != sizeof(rfalNfcaSelRes) )
 800c9c4:	2d01      	cmp	r5, #1
 800c9c6:	d000      	beq.n	800c9ca <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2ae>
 800c9c8:	e75d      	b.n	800c886 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x16a>
            if( *gNfca.CR.selReq.nfcid1 == RFAL_NFCA_SDD_CT )
 800c9ca:	0026      	movs	r6, r4
                RFAL_MEMCPY( &gNfca.CR.nfcId1[*gNfca.CR.nfcId1Len], &((uint8_t*)&gNfca.CR.selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800c9cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c9ce:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	362d      	adds	r6, #45	@ 0x2d
 800c9d4:	18c0      	adds	r0, r0, r3
            if( *gNfca.CR.selReq.nfcid1 == RFAL_NFCA_SDD_CT )
 800c9d6:	7ea3      	ldrb	r3, [r4, #26]
 800c9d8:	2b88      	cmp	r3, #136	@ 0x88
 800c9da:	d10c      	bne.n	800c9f6 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x2da>
                RFAL_MEMCPY( &gNfca.CR.nfcId1[*gNfca.CR.nfcId1Len], &((uint8_t*)&gNfca.CR.selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800c9dc:	2203      	movs	r2, #3
 800c9de:	4911      	ldr	r1, [pc, #68]	@ (800ca24 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x308>)
 800c9e0:	f003 fca6 	bl	8010330 <memcpy>
                *gNfca.CR.nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800c9e4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
                gNfca.CR.cascadeLv++;
 800c9e6:	342c      	adds	r4, #44	@ 0x2c
                *gNfca.CR.nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800c9e8:	7813      	ldrb	r3, [r2, #0]
 800c9ea:	3303      	adds	r3, #3
 800c9ec:	7013      	strb	r3, [r2, #0]
                gNfca.CR.state = RFAL_NFCA_CR_CL;
 800c9ee:	7035      	strb	r5, [r6, #0]
                gNfca.CR.cascadeLv++;
 800c9f0:	7823      	ldrb	r3, [r4, #0]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	e6de      	b.n	800c7b4 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x98>
                RFAL_MEMCPY( &gNfca.CR.nfcId1[*gNfca.CR.nfcId1Len], (uint8_t*)&gNfca.CR.selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 800c9f6:	0021      	movs	r1, r4
 800c9f8:	2204      	movs	r2, #4
 800c9fa:	311a      	adds	r1, #26
 800c9fc:	f003 fc98 	bl	8010330 <memcpy>
                *gNfca.CR.nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 800ca00:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ca02:	7813      	ldrb	r3, [r2, #0]
 800ca04:	3304      	adds	r3, #4
 800ca06:	7013      	strb	r3, [r2, #0]
                gNfca.CR.state = RFAL_NFCA_CR_DONE;
 800ca08:	2306      	movs	r3, #6
 800ca0a:	7033      	strb	r3, [r6, #0]
                break;                             /* Only flag operation complete on the next execution */
 800ca0c:	e699      	b.n	800c742 <rfalNfcaPollerGetSingleCollisionResolutionStatus+0x26>
 800ca0e:	46c0      	nop			@ (mov r8, r8)
 800ca10:	200018d0 	.word	0x200018d0
 800ca14:	200018ea 	.word	0x200018ea
 800ca18:	00000654 	.word	0x00000654
 800ca1c:	200018e8 	.word	0x200018e8
 800ca20:	20001902 	.word	0x20001902
 800ca24:	200018eb 	.word	0x200018eb

0800ca28 <rfalNfcaPollerStartFullCollisionResolution>:
}


/*******************************************************************************/
ReturnCode rfalNfcaPollerStartFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 800ca28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca2a:	b089      	sub	sp, #36	@ 0x24
 800ca2c:	000f      	movs	r7, r1
 800ca2e:	0015      	movs	r5, r2
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
    {
        return RFAL_ERR_PARAM;
 800ca30:	2407      	movs	r4, #7
{
 800ca32:	9003      	str	r0, [sp, #12]
 800ca34:	9304      	str	r3, [sp, #16]
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 800ca36:	2a00      	cmp	r2, #0
 800ca38:	d058      	beq.n	800caec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d056      	beq.n	800caec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
    }
    
    *devCnt = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	9a04      	ldr	r2, [sp, #16]
 800ca42:	7013      	strb	r3, [r2, #0]
    ret     = RFAL_ERR_NONE;
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 800ca44:	2802      	cmp	r0, #2
 800ca46:	d13a      	bne.n	800cabe <rfalNfcaPollerStartFullCollisionResolution+0x96>
    ret     = RFAL_ERR_NONE;
 800ca48:	2400      	movs	r4, #0
        }
    }
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 800ca4a:	78ab      	ldrb	r3, [r5, #2]
 800ca4c:	786e      	ldrb	r6, [r5, #1]
 800ca4e:	9305      	str	r3, [sp, #20]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 800ca50:	2f00      	cmp	r7, #0
 800ca52:	d005      	beq.n	800ca60 <rfalNfcaPollerStartFullCollisionResolution+0x38>
    {
        RFAL_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 800ca54:	2216      	movs	r2, #22
 800ca56:	2100      	movs	r1, #0
 800ca58:	0028      	movs	r0, r5
 800ca5a:	437a      	muls	r2, r7
 800ca5c:	f003 fc34 	bl	80102c8 <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 800ca60:	9b05      	ldr	r3, [sp, #20]
 800ca62:	706e      	strb	r6, [r5, #1]
 800ca64:	70ab      	strb	r3, [r5, #2]
    
    /* Save parameters */
    gNfca.CR.devCnt      = devCnt;
 800ca66:	4e2e      	ldr	r6, [pc, #184]	@ (800cb20 <rfalNfcaPollerStartFullCollisionResolution+0xf8>)
 800ca68:	9b04      	ldr	r3, [sp, #16]
    gNfca.CR.devLimit    = devLimit;
    gNfca.CR.nfcaDevList = nfcaDevList;
    gNfca.CR.compMode    = compMode;
    gNfca.CR.fState      = RFAL_NFCA_CR_FULL_START;
 800ca6a:	2200      	movs	r2, #0
    gNfca.CR.devCnt      = devCnt;
 800ca6c:	60f3      	str	r3, [r6, #12]
    gNfca.CR.compMode    = compMode;
 800ca6e:	9b03      	ldr	r3, [sp, #12]
    gNfca.CR.devLimit    = devLimit;
 800ca70:	7137      	strb	r7, [r6, #4]
    gNfca.CR.compMode    = compMode;
 800ca72:	7173      	strb	r3, [r6, #5]
    gNfca.CR.fState      = RFAL_NFCA_CR_FULL_START;
 800ca74:	0033      	movs	r3, r6
 800ca76:	332e      	adds	r3, #46	@ 0x2e
 800ca78:	701a      	strb	r2, [r3, #0]
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == RFAL_ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 800ca7a:	230f      	movs	r3, #15
 800ca7c:	9a05      	ldr	r2, [sp, #20]
    gNfca.CR.nfcaDevList = nfcaDevList;
 800ca7e:	60b5      	str	r5, [r6, #8]
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == RFAL_ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 800ca80:	4013      	ands	r3, r2
 800ca82:	2b0c      	cmp	r3, #12
 800ca84:	d13f      	bne.n	800cb06 <rfalNfcaPollerStartFullCollisionResolution+0xde>
 800ca86:	2f00      	cmp	r7, #0
 800ca88:	d03d      	beq.n	800cb06 <rfalNfcaPollerStartFullCollisionResolution+0xde>
 800ca8a:	2c00      	cmp	r4, #0
 800ca8c:	d13b      	bne.n	800cb06 <rfalNfcaPollerStartFullCollisionResolution+0xde>
 800ca8e:	9b03      	ldr	r3, [sp, #12]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d038      	beq.n	800cb06 <rfalNfcaPollerStartFullCollisionResolution+0xde>
    {
        /* RID_REQ shall be performed              Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 800ca94:	f001 f8e2 	bl	800dc5c <rfalT1TPollerInitialize>
        RFAL_EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 800ca98:	0028      	movs	r0, r5
 800ca9a:	300f      	adds	r0, #15
 800ca9c:	f001 f8f6 	bl	800dc8c <rfalT1TPollerRid>
 800caa0:	1e04      	subs	r4, r0, #0
 800caa2:	d123      	bne.n	800caec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
        
        *devCnt = 1U;
 800caa4:	2301      	movs	r3, #1
 800caa6:	9a04      	ldr	r2, [sp, #16]
        nfcaDevList->isSleep   = false;
        nfcaDevList->type      = RFAL_NFCA_T1T;
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
        RFAL_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 800caa8:	0029      	movs	r1, r5
        *devCnt = 1U;
 800caaa:	7013      	strb	r3, [r2, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 800caac:	2204      	movs	r2, #4
        nfcaDevList->isSleep   = false;
 800caae:	7568      	strb	r0, [r5, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 800cab0:	702b      	strb	r3, [r5, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 800cab2:	712a      	strb	r2, [r5, #4]
        RFAL_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 800cab4:	1d68      	adds	r0, r5, #5
 800cab6:	3111      	adds	r1, #17
 800cab8:	f003 fc3a 	bl	8010330 <memcpy>
        
        return RFAL_ERR_NONE;
 800cabc:	e016      	b.n	800caec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800cabe:	260e      	movs	r6, #14
 800cac0:	ab04      	add	r3, sp, #16
 800cac2:	18f6      	adds	r6, r6, r3
 800cac4:	4b17      	ldr	r3, [pc, #92]	@ (800cb24 <rfalNfcaPollerStartFullCollisionResolution+0xfc>)
 800cac6:	2210      	movs	r2, #16
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	2052      	movs	r0, #82	@ 0x52
 800cacc:	0033      	movs	r3, r6
 800cace:	1c69      	adds	r1, r5, #1
 800cad0:	f7f6 fe76 	bl	80037c0 <rfalISO14443ATransceiveShortFrame>
 800cad4:	1e04      	subs	r4, r0, #0
        if(ret != RFAL_ERR_NONE)
 800cad6:	d011      	beq.n	800cafc <rfalNfcaPollerStartFullCollisionResolution+0xd4>
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != RFAL_ERR_RF_COLLISION) && (ret != RFAL_ERR_CRC) && (ret != RFAL_ERR_FRAMING) && (ret != RFAL_ERR_PAR) && (ret != RFAL_ERR_INCOMPLETE_BYTE)) )
 800cad8:	9b03      	ldr	r3, [sp, #12]
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d006      	beq.n	800caec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
 800cade:	281b      	cmp	r0, #27
 800cae0:	d0b3      	beq.n	800ca4a <rfalNfcaPollerStartFullCollisionResolution+0x22>
 800cae2:	d806      	bhi.n	800caf2 <rfalNfcaPollerStartFullCollisionResolution+0xca>
 800cae4:	2809      	cmp	r0, #9
 800cae6:	d0b0      	beq.n	800ca4a <rfalNfcaPollerStartFullCollisionResolution+0x22>
 800cae8:	2815      	cmp	r0, #21
 800caea:	d0ae      	beq.n	800ca4a <rfalNfcaPollerStartFullCollisionResolution+0x22>
    
    RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartSingleCollisionResolution( devLimit, &gNfca.CR.collPending, &nfcaDevList->selRes, (uint8_t*)&nfcaDevList->nfcId1, &nfcaDevList->nfcId1Len ) );
    
    gNfca.CR.fState = RFAL_NFCA_CR_FULL_START;
    return RFAL_ERR_NONE;
}
 800caec:	0020      	movs	r0, r4
 800caee:	b009      	add	sp, #36	@ 0x24
 800caf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caf2:	281d      	cmp	r0, #29
 800caf4:	d0a9      	beq.n	800ca4a <rfalNfcaPollerStartFullCollisionResolution+0x22>
 800caf6:	2828      	cmp	r0, #40	@ 0x28
 800caf8:	d0a7      	beq.n	800ca4a <rfalNfcaPollerStartFullCollisionResolution+0x22>
 800cafa:	e7f7      	b.n	800caec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
        if( (ret == RFAL_ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 800cafc:	8833      	ldrh	r3, [r6, #0]
            return RFAL_ERR_PROTO;
 800cafe:	240b      	movs	r4, #11
        if( (ret == RFAL_ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 800cb00:	2b10      	cmp	r3, #16
 800cb02:	d0a1      	beq.n	800ca48 <rfalNfcaPollerStartFullCollisionResolution+0x20>
 800cb04:	e7f2      	b.n	800caec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
    RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartSingleCollisionResolution( devLimit, &gNfca.CR.collPending, &nfcaDevList->selRes, (uint8_t*)&nfcaDevList->nfcId1, &nfcaDevList->nfcId1Len ) );
 800cb06:	1d6b      	adds	r3, r5, #5
 800cb08:	1cea      	adds	r2, r5, #3
 800cb0a:	3504      	adds	r5, #4
 800cb0c:	0038      	movs	r0, r7
 800cb0e:	4906      	ldr	r1, [pc, #24]	@ (800cb28 <rfalNfcaPollerStartFullCollisionResolution+0x100>)
 800cb10:	9500      	str	r5, [sp, #0]
 800cb12:	f7ff fd95 	bl	800c640 <rfalNfcaPollerStartSingleCollisionResolution>
 800cb16:	1e04      	subs	r4, r0, #0
 800cb18:	d1e8      	bne.n	800caec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
    gNfca.CR.fState = RFAL_NFCA_CR_FULL_START;
 800cb1a:	362e      	adds	r6, #46	@ 0x2e
 800cb1c:	7030      	strb	r0, [r6, #0]
    return RFAL_ERR_NONE;
 800cb1e:	e7e5      	b.n	800caec <rfalNfcaPollerStartFullCollisionResolution+0xc4>
 800cb20:	200018d0 	.word	0x200018d0
 800cb24:	00000654 	.word	0x00000654
 800cb28:	200018e0 	.word	0x200018e0

0800cb2c <rfalNfcaPollerStartSelect>:
}


/*******************************************************************************/
ReturnCode rfalNfcaPollerStartSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 800cb2c:	b570      	push	{r4, r5, r6, lr}
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
    {
        return RFAL_ERR_PARAM;
 800cb2e:	2307      	movs	r3, #7
{
 800cb30:	0004      	movs	r4, r0
 800cb32:	0015      	movs	r5, r2
 800cb34:	0008      	movs	r0, r1
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 800cb36:	2c00      	cmp	r4, #0
 800cb38:	d012      	beq.n	800cb60 <rfalNfcaPollerStartSelect+0x34>
 800cb3a:	290a      	cmp	r1, #10
 800cb3c:	d810      	bhi.n	800cb60 <rfalNfcaPollerStartSelect+0x34>
 800cb3e:	2a00      	cmp	r2, #0
 800cb40:	d00e      	beq.n	800cb60 <rfalNfcaPollerStartSelect+0x34>
    }
    
    
    /* Calculate Cascate Level */
    gNfca.SEL.fCascadeLv = rfalNfcaNfcidLen2CL( nfcidLen );
 800cb42:	2105      	movs	r1, #5
 800cb44:	f7f3 fb10 	bl	8000168 <__udivsi3>
 800cb48:	4e06      	ldr	r6, [pc, #24]	@ (800cb64 <rfalNfcaPollerStartSelect+0x38>)
 800cb4a:	4b07      	ldr	r3, [pc, #28]	@ (800cb68 <rfalNfcaPollerStartSelect+0x3c>)
    gNfca.SEL.cascadeLv  = RFAL_NFCA_SEL_CASCADE_L1;
 800cb4c:	0031      	movs	r1, r6
    gNfca.SEL.fCascadeLv = rfalNfcaNfcidLen2CL( nfcidLen );
 800cb4e:	7018      	strb	r0, [r3, #0]
    gNfca.SEL.cascadeLv  = RFAL_NFCA_SEL_CASCADE_L1;
 800cb50:	2300      	movs	r3, #0
 800cb52:	313c      	adds	r1, #60	@ 0x3c
 800cb54:	700b      	strb	r3, [r1, #0]
    
    gNfca.SEL.nfcidOffset  = 0;
 800cb56:	0031      	movs	r1, r6
 800cb58:	314c      	adds	r1, #76	@ 0x4c
 800cb5a:	800b      	strh	r3, [r1, #0]
    gNfca.SEL.isRx         = false;
    gNfca.SEL.selRes       = selRes;
 800cb5c:	6435      	str	r5, [r6, #64]	@ 0x40
    gNfca.SEL.nfcid1       = nfcid1;
 800cb5e:	64b4      	str	r4, [r6, #72]	@ 0x48
    
    return RFAL_ERR_NONE;
}
 800cb60:	0018      	movs	r0, r3
 800cb62:	bd70      	pop	{r4, r5, r6, pc}
 800cb64:	200018d0 	.word	0x200018d0
 800cb68:	2000190d 	.word	0x2000190d

0800cb6c <rfalNfcaPollerGetSelectStatus>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerGetSelectStatus( void )
{
 800cb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (!gNfca.SEL.isRx) )
 800cb6e:	4d30      	ldr	r5, [pc, #192]	@ (800cc30 <rfalNfcaPollerGetSelectStatus+0xc4>)
 800cb70:	4c30      	ldr	r4, [pc, #192]	@ (800cc34 <rfalNfcaPollerGetSelectStatus+0xc8>)
 800cb72:	782b      	ldrb	r3, [r5, #0]
{
 800cb74:	b087      	sub	sp, #28
    if( (!gNfca.SEL.isRx) )
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d142      	bne.n	800cc00 <rfalNfcaPollerGetSelectStatus+0x94>
    {
        /*******************************************************************************/
        /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
        if( gNfca.SEL.cascadeLv <= gNfca.SEL.fCascadeLv )
 800cb7a:	0023      	movs	r3, r4
 800cb7c:	0022      	movs	r2, r4
 800cb7e:	333c      	adds	r3, #60	@ 0x3c
 800cb80:	323d      	adds	r2, #61	@ 0x3d
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	7810      	ldrb	r0, [r2, #0]
 800cb86:	4283      	cmp	r3, r0
 800cb88:	d902      	bls.n	800cb90 <rfalNfcaPollerGetSelectStatus+0x24>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return RFAL_ERR_NONE;
 800cb8a:	2000      	movs	r0, #0
}
 800cb8c:	b007      	add	sp, #28
 800cb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            selReq.selCmd = rfalNfcaCLn2SELCMD(gNfca.SEL.cascadeLv);
 800cb90:	005a      	lsls	r2, r3, #1
 800cb92:	ad04      	add	r5, sp, #16
 800cb94:	3a6d      	subs	r2, #109	@ 0x6d
 800cb96:	702a      	strb	r2, [r5, #0]
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800cb98:	0027      	movs	r7, r4
            selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800cb9a:	2270      	movs	r2, #112	@ 0x70
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800cb9c:	374c      	adds	r7, #76	@ 0x4c
            selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800cb9e:	706a      	strb	r2, [r5, #1]
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800cba0:	783e      	ldrb	r6, [r7, #0]
 800cba2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cba4:	1989      	adds	r1, r1, r6
            if( gNfca.SEL.fCascadeLv != gNfca.SEL.cascadeLv )
 800cba6:	4283      	cmp	r3, r0
 800cba8:	d024      	beq.n	800cbf4 <rfalNfcaPollerGetSelectStatus+0x88>
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800cbaa:	2013      	movs	r0, #19
                *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 800cbac:	2388      	movs	r3, #136	@ 0x88
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800cbae:	3a6d      	subs	r2, #109	@ 0x6d
 800cbb0:	4468      	add	r0, sp
                gNfca.SEL.nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800cbb2:	3603      	adds	r6, #3
                *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 800cbb4:	70ab      	strb	r3, [r5, #2]
                RFAL_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800cbb6:	f003 fbbb 	bl	8010330 <memcpy>
                gNfca.SEL.nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800cbba:	703e      	strb	r6, [r7, #0]
{
 800cbbc:	2300      	movs	r3, #0
    BCC = 0;
 800cbbe:	001a      	movs	r2, r3
        BCC ^= buf[i];
 800cbc0:	18e9      	adds	r1, r5, r3
 800cbc2:	7889      	ldrb	r1, [r1, #2]
    for(i = 0; i < bufLen; i++)
 800cbc4:	3301      	adds	r3, #1
        BCC ^= buf[i];
 800cbc6:	404a      	eors	r2, r1
    for(i = 0; i < bufLen; i++)
 800cbc8:	2b04      	cmp	r3, #4
 800cbca:	d1f9      	bne.n	800cbc0 <rfalNfcaPollerGetSelectStatus+0x54>
            RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)gNfca.SEL.selRes, sizeof(rfalNfcaSelRes), &gNfca.SEL.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 800cbcc:	4b1a      	ldr	r3, [pc, #104]	@ (800cc38 <rfalNfcaPollerGetSelectStatus+0xcc>)
            selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 800cbce:	71aa      	strb	r2, [r5, #6]
            RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)gNfca.SEL.selRes, sizeof(rfalNfcaSelRes), &gNfca.SEL.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 800cbd0:	9302      	str	r3, [sp, #8]
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	9301      	str	r3, [sp, #4]
 800cbd6:	4b19      	ldr	r3, [pc, #100]	@ (800cc3c <rfalNfcaPollerGetSelectStatus+0xd0>)
 800cbd8:	2107      	movs	r1, #7
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	0028      	movs	r0, r5
 800cbde:	2301      	movs	r3, #1
 800cbe0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800cbe2:	f7f6 fce1 	bl	80035a8 <rfalTransceiveBlockingTx>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d1d0      	bne.n	800cb8c <rfalNfcaPollerGetSelectStatus+0x20>
            gNfca.SEL.isRx = true;
 800cbea:	2301      	movs	r3, #1
 800cbec:	344d      	adds	r4, #77	@ 0x4d
 800cbee:	7023      	strb	r3, [r4, #0]
            return RFAL_ERR_BUSY;
 800cbf0:	2002      	movs	r0, #2
 800cbf2:	e7cb      	b.n	800cb8c <rfalNfcaPollerGetSelectStatus+0x20>
                RFAL_MEMCPY( selReq.nfcid1, &gNfca.SEL.nfcid1[gNfca.SEL.nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 800cbf4:	2012      	movs	r0, #18
 800cbf6:	2204      	movs	r2, #4
 800cbf8:	4468      	add	r0, sp
 800cbfa:	f003 fb99 	bl	8010330 <memcpy>
 800cbfe:	e7dd      	b.n	800cbbc <rfalNfcaPollerGetSelectStatus+0x50>
        RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 800cc00:	f7f5 fade 	bl	80021c0 <rfalGetTransceiveStatus>
 800cc04:	2802      	cmp	r0, #2
 800cc06:	d0f3      	beq.n	800cbf0 <rfalNfcaPollerGetSelectStatus+0x84>
        if( rfalConvBitsToBytes( gNfca.SEL.rxLen ) != sizeof(rfalNfcaSelRes) )
 800cc08:	1da3      	adds	r3, r4, #6
 800cc0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
            return RFAL_ERR_PROTO;
 800cc0c:	200b      	movs	r0, #11
        if( rfalConvBitsToBytes( gNfca.SEL.rxLen ) != sizeof(rfalNfcaSelRes) )
 800cc0e:	3307      	adds	r3, #7
 800cc10:	08db      	lsrs	r3, r3, #3
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d1ba      	bne.n	800cb8c <rfalNfcaPollerGetSelectStatus+0x20>
        if( gNfca.SEL.cascadeLv < gNfca.SEL.fCascadeLv )
 800cc16:	0022      	movs	r2, r4
 800cc18:	343d      	adds	r4, #61	@ 0x3d
 800cc1a:	323c      	adds	r2, #60	@ 0x3c
 800cc1c:	7813      	ldrb	r3, [r2, #0]
 800cc1e:	7821      	ldrb	r1, [r4, #0]
 800cc20:	4299      	cmp	r1, r3
 800cc22:	d9b2      	bls.n	800cb8a <rfalNfcaPollerGetSelectStatus+0x1e>
            gNfca.SEL.cascadeLv++;
 800cc24:	3301      	adds	r3, #1
 800cc26:	7013      	strb	r3, [r2, #0]
            gNfca.SEL.isRx = false;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	702b      	strb	r3, [r5, #0]
            return RFAL_ERR_BUSY;
 800cc2c:	e7e0      	b.n	800cbf0 <rfalNfcaPollerGetSelectStatus+0x84>
 800cc2e:	46c0      	nop			@ (mov r8, r8)
 800cc30:	2000191d 	.word	0x2000191d
 800cc34:	200018d0 	.word	0x200018d0
 800cc38:	00000654 	.word	0x00000654
 800cc3c:	20001914 	.word	0x20001914

0800cc40 <rfalNfcaPollerStartSleep>:
/*******************************************************************************/
ReturnCode rfalNfcaPollerStartSleep( void )
{
    rfalTransceiveContext ctx;
    
    gNfca.slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 800cc40:	2250      	movs	r2, #80	@ 0x50
{
 800cc42:	b500      	push	{lr}
    gNfca.slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 800cc44:	4b09      	ldr	r3, [pc, #36]	@ (800cc6c <rfalNfcaPollerStartSleep+0x2c>)
{
 800cc46:	b089      	sub	sp, #36	@ 0x24
    gNfca.slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
    
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gNfca.slpReq, sizeof(rfalNfcaSlpReq), (uint8_t*)&gNfca.slpReq, sizeof(gNfca.slpReq), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 800cc48:	9301      	str	r3, [sp, #4]
    gNfca.slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 800cc4a:	801a      	strh	r2, [r3, #0]
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gNfca.slpReq, sizeof(rfalNfcaSlpReq), (uint8_t*)&gNfca.slpReq, sizeof(gNfca.slpReq), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 800cc4c:	9303      	str	r3, [sp, #12]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	4669      	mov	r1, sp
 800cc52:	9305      	str	r3, [sp, #20]
 800cc54:	9306      	str	r3, [sp, #24]
 800cc56:	4b06      	ldr	r3, [pc, #24]	@ (800cc70 <rfalNfcaPollerStartSleep+0x30>)
 800cc58:	3a40      	subs	r2, #64	@ 0x40
    return rfalStartTransceive( &ctx );
 800cc5a:	a801      	add	r0, sp, #4
    rfalCreateByteFlagsTxRxContext( ctx, (uint8_t*)&gNfca.slpReq, sizeof(rfalNfcaSlpReq), (uint8_t*)&gNfca.slpReq, sizeof(gNfca.slpReq), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 800cc5c:	810a      	strh	r2, [r1, #8]
 800cc5e:	820a      	strh	r2, [r1, #16]
 800cc60:	9307      	str	r3, [sp, #28]
    return rfalStartTransceive( &ctx );
 800cc62:	f7f5 f9c7 	bl	8001ff4 <rfalStartTransceive>
}
 800cc66:	b009      	add	sp, #36	@ 0x24
 800cc68:	bd00      	pop	{pc}
 800cc6a:	46c0      	nop			@ (mov r8, r8)
 800cc6c:	20001920 	.word	0x20001920
 800cc70:	000034f8 	.word	0x000034f8

0800cc74 <rfalNfcaPollerStartTechnologyDetection>:
{
 800cc74:	b510      	push	{r4, lr}
    gNfca.DT.compMode = compMode;
 800cc76:	4c0a      	ldr	r4, [pc, #40]	@ (800cca0 <rfalNfcaPollerStartTechnologyDetection+0x2c>)
{
 800cc78:	0003      	movs	r3, r0
    gNfca.DT.compMode = compMode;
 800cc7a:	7020      	strb	r0, [r4, #0]
    gNfca.DT.ret      = rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes );
 800cc7c:	2026      	movs	r0, #38	@ 0x26
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d100      	bne.n	800cc84 <rfalNfcaPollerStartTechnologyDetection+0x10>
 800cc82:	302c      	adds	r0, #44	@ 0x2c
 800cc84:	f7ff fd26 	bl	800c6d4 <rfalNfcaPollerCheckPresence>
    if( (gNfca.DT.compMode != RFAL_COMPLIANCE_MODE_ISO) && (gNfca.DT.ret == RFAL_ERR_NONE) )
 800cc88:	7822      	ldrb	r2, [r4, #0]
    gNfca.DT.ret      = rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes );
 800cc8a:	0003      	movs	r3, r0
 800cc8c:	8060      	strh	r0, [r4, #2]
    return RFAL_ERR_NONE;
 800cc8e:	2000      	movs	r0, #0
    if( (gNfca.DT.compMode != RFAL_COMPLIANCE_MODE_ISO) && (gNfca.DT.ret == RFAL_ERR_NONE) )
 800cc90:	2a02      	cmp	r2, #2
 800cc92:	d003      	beq.n	800cc9c <rfalNfcaPollerStartTechnologyDetection+0x28>
 800cc94:	4283      	cmp	r3, r0
 800cc96:	d101      	bne.n	800cc9c <rfalNfcaPollerStartTechnologyDetection+0x28>
        RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartSleep() );
 800cc98:	f7ff ffd2 	bl	800cc40 <rfalNfcaPollerStartSleep>
}
 800cc9c:	bd10      	pop	{r4, pc}
 800cc9e:	46c0      	nop			@ (mov r8, r8)
 800cca0:	200018d0 	.word	0x200018d0

0800cca4 <rfalNfcaPollerGetSleepStatus>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerGetSleepStatus( void )
{
 800cca4:	b510      	push	{r4, lr}
    
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 800cca6:	f7f5 fa8b 	bl	80021c0 <rfalGetTransceiveStatus>
 800ccaa:	3802      	subs	r0, #2
 800ccac:	4243      	negs	r3, r0
 800ccae:	4158      	adcs	r0, r3
    
    return RFAL_ERR_NONE;
}
 800ccb0:	0040      	lsls	r0, r0, #1
 800ccb2:	bd10      	pop	{r4, pc}

0800ccb4 <rfalNfcaPollerGetTechnologyDetectionStatus>:
{
 800ccb4:	b510      	push	{r4, lr}
    if( (gNfca.DT.compMode != RFAL_COMPLIANCE_MODE_ISO) && (gNfca.DT.ret == RFAL_ERR_NONE) )
 800ccb6:	4c07      	ldr	r4, [pc, #28]	@ (800ccd4 <rfalNfcaPollerGetTechnologyDetectionStatus+0x20>)
 800ccb8:	7822      	ldrb	r2, [r4, #0]
 800ccba:	8863      	ldrh	r3, [r4, #2]
 800ccbc:	2a02      	cmp	r2, #2
 800ccbe:	d101      	bne.n	800ccc4 <rfalNfcaPollerGetTechnologyDetectionStatus+0x10>
    return gNfca.DT.ret;
 800ccc0:	8860      	ldrh	r0, [r4, #2]
}
 800ccc2:	bd10      	pop	{r4, pc}
    if( (gNfca.DT.compMode != RFAL_COMPLIANCE_MODE_ISO) && (gNfca.DT.ret == RFAL_ERR_NONE) )
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1fb      	bne.n	800ccc0 <rfalNfcaPollerGetTechnologyDetectionStatus+0xc>
        RFAL_EXIT_ON_BUSY( ret, rfalNfcaPollerGetSleepStatus() );
 800ccc8:	f7ff ffec 	bl	800cca4 <rfalNfcaPollerGetSleepStatus>
 800cccc:	2802      	cmp	r0, #2
 800ccce:	d1f7      	bne.n	800ccc0 <rfalNfcaPollerGetTechnologyDetectionStatus+0xc>
 800ccd0:	e7f7      	b.n	800ccc2 <rfalNfcaPollerGetTechnologyDetectionStatus+0xe>
 800ccd2:	46c0      	nop			@ (mov r8, r8)
 800ccd4:	200018d0 	.word	0x200018d0

0800ccd8 <rfalNfcaPollerGetFullCollisionResolutionStatus>:
{
 800ccd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( (gNfca.CR.nfcaDevList == NULL) || (gNfca.CR.devCnt == NULL) )
 800ccda:	4c38      	ldr	r4, [pc, #224]	@ (800cdbc <rfalNfcaPollerGetFullCollisionResolutionStatus+0xe4>)
 800ccdc:	2021      	movs	r0, #33	@ 0x21
 800ccde:	68a3      	ldr	r3, [r4, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d014      	beq.n	800cd0e <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
 800cce4:	68e2      	ldr	r2, [r4, #12]
 800cce6:	2a00      	cmp	r2, #0
 800cce8:	d011      	beq.n	800cd0e <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
    switch( gNfca.CR.fState )
 800ccea:	0025      	movs	r5, r4
 800ccec:	352e      	adds	r5, #46	@ 0x2e
 800ccee:	782e      	ldrb	r6, [r5, #0]
 800ccf0:	2e01      	cmp	r6, #1
 800ccf2:	d03d      	beq.n	800cd70 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x98>
 800ccf4:	2e02      	cmp	r6, #2
 800ccf6:	d00b      	beq.n	800cd10 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x38>
 800ccf8:	2e00      	cmp	r6, #0
 800ccfa:	d108      	bne.n	800cd0e <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
            if( rfalNfcaIsSensResT1T( &gNfca.CR.nfcaDevList->sensRes ) && (gNfca.CR.nfcaDevList->type == RFAL_NFCA_T1T) )
 800ccfc:	210f      	movs	r1, #15
 800ccfe:	789a      	ldrb	r2, [r3, #2]
 800cd00:	400a      	ands	r2, r1
 800cd02:	2a0c      	cmp	r2, #12
 800cd04:	d104      	bne.n	800cd10 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x38>
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d101      	bne.n	800cd10 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x38>
                return RFAL_ERR_NONE;
 800cd0c:	2000      	movs	r0, #0
}
 800cd0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerGetSingleCollisionResolutionStatus() );
 800cd10:	f7ff fd04 	bl	800c71c <rfalNfcaPollerGetSingleCollisionResolutionStatus>
 800cd14:	1e02      	subs	r2, r0, #0
 800cd16:	d1fa      	bne.n	800cd0e <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
            newDevType = ((uint8_t)gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 800cd18:	2516      	movs	r5, #22
 800cd1a:	2760      	movs	r7, #96	@ 0x60
 800cd1c:	68e1      	ldr	r1, [r4, #12]
 800cd1e:	68a0      	ldr	r0, [r4, #8]
 800cd20:	780b      	ldrb	r3, [r1, #0]
 800cd22:	436b      	muls	r3, r5
 800cd24:	18c3      	adds	r3, r0, r3
 800cd26:	78de      	ldrb	r6, [r3, #3]
 800cd28:	403e      	ands	r6, r7
            gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].type    = (rfalNfcaListenDeviceType) newDevType;
 800cd2a:	701e      	strb	r6, [r3, #0]
            gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].isSleep = false;
 800cd2c:	780b      	ldrb	r3, [r1, #0]
 800cd2e:	436b      	muls	r3, r5
 800cd30:	18c0      	adds	r0, r0, r3
 800cd32:	7542      	strb	r2, [r0, #21]
            (*gNfca.CR.devCnt)++;
 800cd34:	780b      	ldrb	r3, [r1, #0]
 800cd36:	3301      	adds	r3, #1
 800cd38:	700b      	strb	r3, [r1, #0]
            if( (*gNfca.CR.devCnt < gNfca.CR.devLimit) && (gNfca.CR.collPending) )
 800cd3a:	68e3      	ldr	r3, [r4, #12]
 800cd3c:	781a      	ldrb	r2, [r3, #0]
 800cd3e:	7923      	ldrb	r3, [r4, #4]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d212      	bcs.n	800cd6a <rfalNfcaPollerGetFullCollisionResolutionStatus+0x92>
 800cd44:	7c23      	ldrb	r3, [r4, #16]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00f      	beq.n	800cd6a <rfalNfcaPollerGetFullCollisionResolutionStatus+0x92>
                RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartSleep() );
 800cd4a:	f7ff ff79 	bl	800cc40 <rfalNfcaPollerStartSleep>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d1dd      	bne.n	800cd0e <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
                gNfca.CR.nfcaDevList[(*gNfca.CR.devCnt - 1U)].isSleep = true;
 800cd52:	68e3      	ldr	r3, [r4, #12]
 800cd54:	781a      	ldrb	r2, [r3, #0]
 800cd56:	68a3      	ldr	r3, [r4, #8]
 800cd58:	4355      	muls	r5, r2
 800cd5a:	195d      	adds	r5, r3, r5
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	3d16      	subs	r5, #22
                gNfca.CR.fState = RFAL_NFCA_CR_FULL_SLPCHECK;
 800cd60:	342e      	adds	r4, #46	@ 0x2e
                gNfca.CR.nfcaDevList[(*gNfca.CR.devCnt - 1U)].isSleep = true;
 800cd62:	756b      	strb	r3, [r5, #21]
                gNfca.CR.fState = RFAL_NFCA_CR_FULL_SLPCHECK;
 800cd64:	7023      	strb	r3, [r4, #0]
                return RFAL_ERR_BUSY;
 800cd66:	2002      	movs	r0, #2
 800cd68:	e7d1      	b.n	800cd0e <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
                gNfca.CR.collPending = false;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	7423      	strb	r3, [r4, #16]
            break;
 800cd6e:	e7cd      	b.n	800cd0c <rfalNfcaPollerGetFullCollisionResolutionStatus+0x34>
            RFAL_EXIT_ON_BUSY( ret, rfalNfcaPollerGetSleepStatus() );
 800cd70:	f7ff ff98 	bl	800cca4 <rfalNfcaPollerGetSleepStatus>
 800cd74:	2802      	cmp	r0, #2
 800cd76:	d0f6      	beq.n	800cd66 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x8e>
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &gNfca.CR.nfcaDevList[*gNfca.CR.devCnt].sensRes );
 800cd78:	2716      	movs	r7, #22
 800cd7a:	68e3      	ldr	r3, [r4, #12]
 800cd7c:	68a1      	ldr	r1, [r4, #8]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	2026      	movs	r0, #38	@ 0x26
 800cd82:	437b      	muls	r3, r7
 800cd84:	18c9      	adds	r1, r1, r3
 800cd86:	3101      	adds	r1, #1
 800cd88:	f7ff fca4 	bl	800c6d4 <rfalNfcaPollerCheckPresence>
            if( ret == RFAL_ERR_TIMEOUT )
 800cd8c:	2804      	cmp	r0, #4
 800cd8e:	d0ec      	beq.n	800cd6a <rfalNfcaPollerGetFullCollisionResolutionStatus+0x92>
                if( (*gNfca.CR.devCnt < gNfca.CR.devLimit) && (gNfca.CR.collPending) )
 800cd90:	68e3      	ldr	r3, [r4, #12]
                gNfca.CR.collPending = true;
 800cd92:	7426      	strb	r6, [r4, #16]
                if( (*gNfca.CR.devCnt < gNfca.CR.devLimit) && (gNfca.CR.collPending) )
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	7920      	ldrb	r0, [r4, #4]
 800cd98:	4283      	cmp	r3, r0
 800cd9a:	d2b7      	bcs.n	800cd0c <rfalNfcaPollerGetFullCollisionResolutionStatus+0x34>
                    RFAL_EXIT_ON_ERR( ret, rfalNfcaPollerStartSingleCollisionResolution(  gNfca.CR.devLimit, 
 800cd9c:	435f      	muls	r7, r3
 800cd9e:	68a4      	ldr	r4, [r4, #8]
 800cda0:	4907      	ldr	r1, [pc, #28]	@ (800cdc0 <rfalNfcaPollerGetFullCollisionResolutionStatus+0xe8>)
 800cda2:	19e4      	adds	r4, r4, r7
 800cda4:	1d63      	adds	r3, r4, #5
 800cda6:	1ce2      	adds	r2, r4, #3
 800cda8:	3404      	adds	r4, #4
 800cdaa:	9400      	str	r4, [sp, #0]
 800cdac:	f7ff fc48 	bl	800c640 <rfalNfcaPollerStartSingleCollisionResolution>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d1ac      	bne.n	800cd0e <rfalNfcaPollerGetFullCollisionResolutionStatus+0x36>
                    gNfca.CR.fState = RFAL_NFCA_CR_FULL_RESTART;
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	702b      	strb	r3, [r5, #0]
                    return RFAL_ERR_BUSY;
 800cdb8:	e7d5      	b.n	800cd66 <rfalNfcaPollerGetFullCollisionResolutionStatus+0x8e>
 800cdba:	46c0      	nop			@ (mov r8, r8)
 800cdbc:	200018d0 	.word	0x200018d0
 800cdc0:	200018e0 	.word	0x200018e0

0800cdc4 <rfalNfcaListenerIsSleepReq>:


/*******************************************************************************/
bool rfalNfcaListenerIsSleepReq( const uint8_t *buf, uint16_t bufLen )
{
 800cdc4:	0003      	movs	r3, r0
    /* Check if length and payload match */
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
    {
        return false;
 800cdc6:	2000      	movs	r0, #0
    if( (bufLen != sizeof(rfalNfcaSlpReq)) || (buf[RFAL_NFCA_SLP_CMD_POS] != RFAL_NFCA_SLP_CMD) || (buf[RFAL_NFCA_SLP_BYTE2_POS] != RFAL_NFCA_SLP_BYTE2) )
 800cdc8:	2902      	cmp	r1, #2
 800cdca:	d106      	bne.n	800cdda <rfalNfcaListenerIsSleepReq+0x16>
 800cdcc:	781a      	ldrb	r2, [r3, #0]
 800cdce:	2a50      	cmp	r2, #80	@ 0x50
 800cdd0:	d103      	bne.n	800cdda <rfalNfcaListenerIsSleepReq+0x16>
 800cdd2:	7858      	ldrb	r0, [r3, #1]
 800cdd4:	4243      	negs	r3, r0
 800cdd6:	4158      	adcs	r0, r3
 800cdd8:	b2c0      	uxtb	r0, r0
    }
    
    return true;
}
 800cdda:	4770      	bx	lr

0800cddc <rfalNfcbCheckSensbRes>:

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 800cddc:	390c      	subs	r1, #12
{
 800cdde:	0003      	movs	r3, r0
 800cde0:	b510      	push	{r4, lr}
    {
        return RFAL_ERR_PROTO;
 800cde2:	200b      	movs	r0, #11
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 800cde4:	2901      	cmp	r1, #1
 800cde6:	d809      	bhi.n	800cdfc <rfalNfcbCheckSensbRes+0x20>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 800cde8:	7a99      	ldrb	r1, [r3, #10]
 800cdea:	2208      	movs	r2, #8
 800cdec:	000c      	movs	r4, r1
 800cdee:	4014      	ands	r4, r2
 800cdf0:	4211      	tst	r1, r2
 800cdf2:	d103      	bne.n	800cdfc <rfalNfcbCheckSensbRes+0x20>
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	2b50      	cmp	r3, #80	@ 0x50
 800cdf8:	d100      	bne.n	800cdfc <rfalNfcbCheckSensbRes+0x20>
    {
        return RFAL_ERR_PROTO;
    }
    return RFAL_ERR_NONE;
 800cdfa:	0020      	movs	r0, r4
}
 800cdfc:	bd10      	pop	{r4, pc}
	...

0800ce00 <rfalNfcbPollerSleepTx.isra.0>:

/*******************************************************************************/
/* This function is used internally during Collision Resolution.  Its          *
 * purpose is to block the state machine for minimmal time.                    *
 * Activity 2.1 does not enforce response checking or error handling.          */
static ReturnCode rfalNfcbPollerSleepTx( const uint8_t* nfcid0 )
 800ce00:	0001      	movs	r1, r0
        return RFAL_ERR_PARAM;
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800ce02:	2011      	movs	r0, #17
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800ce04:	2350      	movs	r3, #80	@ 0x50
static ReturnCode rfalNfcbPollerSleepTx( const uint8_t* nfcid0 )
 800ce06:	b510      	push	{r4, lr}
 800ce08:	b086      	sub	sp, #24
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800ce0a:	ac04      	add	r4, sp, #16
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800ce0c:	2204      	movs	r2, #4
 800ce0e:	4468      	add	r0, sp
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800ce10:	7023      	strb	r3, [r4, #0]
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800ce12:	f003 fa8d 	bl	8010330 <memcpy>
    
    /* Send SLPB_REQ and ignore its response and FWT*/
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), NULL, 0, NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_NFCB_POLLER ));
 800ce16:	2200      	movs	r2, #0
 800ce18:	4b05      	ldr	r3, [pc, #20]	@ (800ce30 <rfalNfcbPollerSleepTx.isra.0+0x30>)
 800ce1a:	2105      	movs	r1, #5
 800ce1c:	9302      	str	r3, [sp, #8]
 800ce1e:	0020      	movs	r0, r4
 800ce20:	0013      	movs	r3, r2
 800ce22:	9201      	str	r2, [sp, #4]
 800ce24:	9200      	str	r2, [sp, #0]
 800ce26:	f7f6 fbbf 	bl	80035a8 <rfalTransceiveBlockingTx>
    
    return RFAL_ERR_NONE;
}
 800ce2a:	b006      	add	sp, #24
 800ce2c:	bd10      	pop	{r4, pc}
 800ce2e:	46c0      	nop			@ (mov r8, r8)
 800ce30:	00001a7c 	.word	0x00001a7c

0800ce34 <rfalNfcbPollerInitialize>:
/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
    ReturnCode ret;
    
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 800ce34:	2200      	movs	r2, #0
{
 800ce36:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 800ce38:	0011      	movs	r1, r2
 800ce3a:	2003      	movs	r0, #3
 800ce3c:	f7f4 ff1a 	bl	8001c74 <rfalSetMode>
 800ce40:	1e04      	subs	r4, r0, #0
 800ce42:	d10d      	bne.n	800ce60 <rfalNfcbPollerInitialize+0x2c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 800ce44:	f7f5 f820 	bl	8001e88 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 800ce48:	4806      	ldr	r0, [pc, #24]	@ (800ce64 <rfalNfcbPollerInitialize+0x30>)
 800ce4a:	f7f5 f84f 	bl	8001eec <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 800ce4e:	20fc      	movs	r0, #252	@ 0xfc
 800ce50:	0080      	lsls	r0, r0, #2
 800ce52:	f7f5 f841 	bl	8001ed8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 800ce56:	4804      	ldr	r0, [pc, #16]	@ (800ce68 <rfalNfcbPollerInitialize+0x34>)
 800ce58:	f7f5 f82c 	bl	8001eb4 <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 800ce5c:	4b03      	ldr	r3, [pc, #12]	@ (800ce6c <rfalNfcbPollerInitialize+0x38>)
 800ce5e:	801c      	strh	r4, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
    
    return RFAL_ERR_NONE;
}
 800ce60:	0020      	movs	r0, r4
 800ce62:	bd10      	pop	{r4, pc}
 800ce64:	000108d8 	.word	0x000108d8
 800ce68:	00001a7c 	.word	0x00001a7c
 800ce6c:	20001924 	.word	0x20001924

0800ce70 <rfalNfcbPollerStartCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerStartCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800ce70:	b5f0      	push	{r4, r5, r6, r7, lr}
    rfalNfcbSensbReq      sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 800ce72:	0007      	movs	r7, r0
{
 800ce74:	001e      	movs	r6, r3
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 800ce76:	2308      	movs	r3, #8
{
 800ce78:	b089      	sub	sp, #36	@ 0x24
 800ce7a:	9005      	str	r0, [sp, #20]
 800ce7c:	000d      	movs	r5, r1
 800ce7e:	0014      	movs	r4, r2
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
    {
        return RFAL_ERR_PARAM;
 800ce80:	2007      	movs	r0, #7
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 800ce82:	439f      	bics	r7, r3
 800ce84:	d125      	bne.n	800ced2 <rfalNfcbPollerStartCheckPresence+0x62>
 800ce86:	2904      	cmp	r1, #4
 800ce88:	d823      	bhi.n	800ced2 <rfalNfcbPollerStartCheckPresence+0x62>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 800ce8a:	2a00      	cmp	r2, #0
 800ce8c:	d021      	beq.n	800ced2 <rfalNfcbPollerStartCheckPresence+0x62>
 800ce8e:	2e00      	cmp	r6, #0
 800ce90:	d01f      	beq.n	800ced2 <rfalNfcbPollerStartCheckPresence+0x62>
    }
    
    *sensbResLen = 0;
    RFAL_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 800ce92:	220d      	movs	r2, #13
 800ce94:	0039      	movs	r1, r7
 800ce96:	0020      	movs	r0, r4
    *sensbResLen = 0;
 800ce98:	7037      	strb	r7, [r6, #0]
    RFAL_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 800ce9a:	f003 fa15 	bl	80102c8 <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 800ce9e:	2305      	movs	r3, #5
 800cea0:	a807      	add	r0, sp, #28
 800cea2:	7003      	strb	r3, [r0, #0]
    sensbReq.AFI   = gRfalNfcb.AFI;
 800cea4:	4b0c      	ldr	r3, [pc, #48]	@ (800ced8 <rfalNfcbPollerStartCheckPresence+0x68>)
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800cea6:	2130      	movs	r1, #48	@ 0x30
    sensbReq.AFI   = gRfalNfcb.AFI;
 800cea8:	781a      	ldrb	r2, [r3, #0]
    
    gRfalNfcb.DT.sensbRes    = sensbRes;
 800ceaa:	625c      	str	r4, [r3, #36]	@ 0x24
    sensbReq.AFI   = gRfalNfcb.AFI;
 800ceac:	7042      	strb	r2, [r0, #1]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800ceae:	785a      	ldrb	r2, [r3, #1]
    gRfalNfcb.DT.sensbResLen = sensbResLen;
 800ceb0:	629e      	str	r6, [r3, #40]	@ 0x28
    
    /* Send SENSB_REQ */
    return rfalTransceiveBlockingTx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &gRfalNfcb.DT.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800ceb2:	23f0      	movs	r3, #240	@ 0xf0
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800ceb4:	400a      	ands	r2, r1
 800ceb6:	4315      	orrs	r5, r2
 800ceb8:	9a05      	ldr	r2, [sp, #20]
    return rfalTransceiveBlockingTx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &gRfalNfcb.DT.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800ceba:	015b      	lsls	r3, r3, #5
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800cebc:	432a      	orrs	r2, r5
 800cebe:	7082      	strb	r2, [r0, #2]
    return rfalTransceiveBlockingTx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &gRfalNfcb.DT.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800cec0:	9302      	str	r3, [sp, #8]
 800cec2:	4b06      	ldr	r3, [pc, #24]	@ (800cedc <rfalNfcbPollerStartCheckPresence+0x6c>)
 800cec4:	0022      	movs	r2, r4
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	9701      	str	r7, [sp, #4]
 800ceca:	230d      	movs	r3, #13
 800cecc:	392d      	subs	r1, #45	@ 0x2d
 800cece:	f7f6 fb6b 	bl	80035a8 <rfalTransceiveBlockingTx>
}
 800ced2:	b009      	add	sp, #36	@ 0x24
 800ced4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced6:	46c0      	nop			@ (mov r8, r8)
 800ced8:	20001924 	.word	0x20001924
 800cedc:	20001950 	.word	0x20001950

0800cee0 <rfalNfcbPollerGetCheckPresenceStatus>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerGetCheckPresenceStatus( void )
{
 800cee0:	b510      	push	{r4, lr}
    ReturnCode ret;

    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 800cee2:	f7f5 f96d 	bl	80021c0 <rfalGetTransceiveStatus>
 800cee6:	2802      	cmp	r0, #2
 800cee8:	d00c      	beq.n	800cf04 <rfalNfcbPollerGetCheckPresenceStatus+0x24>
    
    /* Covert bits to bytes (u8) */
    (*gRfalNfcb.DT.sensbResLen) = (uint8_t)rfalConvBitsToBytes(gRfalNfcb.DT.rxLen);
 800ceea:	4b0b      	ldr	r3, [pc, #44]	@ (800cf18 <rfalNfcbPollerGetCheckPresenceStatus+0x38>)
 800ceec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ceee:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cef0:	3207      	adds	r2, #7
 800cef2:	08d2      	lsrs	r2, r2, #3
 800cef4:	700a      	strb	r2, [r1, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == RFAL_ERR_CRC) || (ret == RFAL_ERR_FRAMING) )
 800cef6:	2815      	cmp	r0, #21
 800cef8:	d001      	beq.n	800cefe <rfalNfcbPollerGetCheckPresenceStatus+0x1e>
 800cefa:	2809      	cmp	r0, #9
 800cefc:	d103      	bne.n	800cf06 <rfalNfcbPollerGetCheckPresenceStatus+0x26>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        (*gRfalNfcb.DT.sensbResLen) = 0;
 800cefe:	2000      	movs	r0, #0
 800cf00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf02:	7018      	strb	r0, [r3, #0]
    {
        return rfalNfcbCheckSensbRes( gRfalNfcb.DT.sensbRes, *gRfalNfcb.DT.sensbResLen );
    }
    
    return ret;
}
 800cf04:	bd10      	pop	{r4, pc}
    if( ret == RFAL_ERR_NONE )
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d1fc      	bne.n	800cf04 <rfalNfcbPollerGetCheckPresenceStatus+0x24>
        return rfalNfcbCheckSensbRes( gRfalNfcb.DT.sensbRes, *gRfalNfcb.DT.sensbResLen );
 800cf0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf0c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800cf0e:	7811      	ldrb	r1, [r2, #0]
 800cf10:	f7ff ff64 	bl	800cddc <rfalNfcbCheckSensbRes>
 800cf14:	e7f6      	b.n	800cf04 <rfalNfcbPollerGetCheckPresenceStatus+0x24>
 800cf16:	46c0      	nop			@ (mov r8, r8)
 800cf18:	20001924 	.word	0x20001924

0800cf1c <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	0001      	movs	r1, r0
 800cf20:	b088      	sub	sp, #32
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
    {
        return RFAL_ERR_PARAM;
 800cf22:	2007      	movs	r0, #7
    if( nfcid0 == NULL )
 800cf24:	2900      	cmp	r1, #0
 800cf26:	d01e      	beq.n	800cf66 <rfalNfcbPollerSleep+0x4a>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800cf28:	2350      	movs	r3, #80	@ 0x50
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800cf2a:	3012      	adds	r0, #18
 800cf2c:	2204      	movs	r2, #4
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800cf2e:	ae06      	add	r6, sp, #24
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800cf30:	4468      	add	r0, sp
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800cf32:	7033      	strb	r3, [r6, #0]
    RFAL_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800cf34:	f003 f9fc 	bl	8010330 <memcpy>
    
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 800cf38:	4b0c      	ldr	r3, [pc, #48]	@ (800cf6c <rfalNfcbPollerSleep+0x50>)
 800cf3a:	2516      	movs	r5, #22
 800cf3c:	9302      	str	r3, [sp, #8]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	ac05      	add	r4, sp, #20
 800cf42:	446d      	add	r5, sp
 800cf44:	9301      	str	r3, [sp, #4]
 800cf46:	0022      	movs	r2, r4
 800cf48:	2105      	movs	r1, #5
 800cf4a:	0030      	movs	r0, r6
 800cf4c:	9500      	str	r5, [sp, #0]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	f7f6 fc04 	bl	800375c <rfalTransceiveBlockingTxRx>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	d106      	bne.n	800cf66 <rfalNfcbPollerSleep+0x4a>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 800cf58:	882b      	ldrh	r3, [r5, #0]
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d102      	bne.n	800cf64 <rfalNfcbPollerSleep+0x48>
 800cf5e:	7823      	ldrb	r3, [r4, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d000      	beq.n	800cf66 <rfalNfcbPollerSleep+0x4a>
    {
        return RFAL_ERR_PROTO;
 800cf64:	200b      	movs	r0, #11
    }
    return RFAL_ERR_NONE;
}
 800cf66:	b008      	add	sp, #32
 800cf68:	bd70      	pop	{r4, r5, r6, pc}
 800cf6a:	46c0      	nop			@ (mov r8, r8)
 800cf6c:	0003a278 	.word	0x0003a278

0800cf70 <rfalNfcbPollerStartSlotMarker>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerStartSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800cf70:	b510      	push	{r4, lr}
 800cf72:	0003      	movs	r3, r0
 800cf74:	b086      	sub	sp, #24
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return RFAL_ERR_PARAM;
 800cf76:	2007      	movs	r0, #7
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 800cf78:	2900      	cmp	r1, #0
 800cf7a:	d018      	beq.n	800cfae <rfalNfcbPollerStartSlotMarker+0x3e>
 800cf7c:	2a00      	cmp	r2, #0
 800cf7e:	d016      	beq.n	800cfae <rfalNfcbPollerStartSlotMarker+0x3e>
 800cf80:	1e5c      	subs	r4, r3, #1
 800cf82:	2c0f      	cmp	r4, #15
 800cf84:	d813      	bhi.n	800cfae <rfalNfcbPollerStartSlotMarker+0x3e>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 800cf86:	2405      	movs	r4, #5
 800cf88:	011b      	lsls	r3, r3, #4
 800cf8a:	4323      	orrs	r3, r4
 800cf8c:	a805      	add	r0, sp, #20
 800cf8e:	7003      	strb	r3, [r0, #0]
    
    gRfalNfcb.DT.sensbRes    = sensbRes;
 800cf90:	4b08      	ldr	r3, [pc, #32]	@ (800cfb4 <rfalNfcbPollerStartSlotMarker+0x44>)
 800cf92:	6259      	str	r1, [r3, #36]	@ 0x24
    gRfalNfcb.DT.sensbResLen = sensbResLen;
 800cf94:	629a      	str	r2, [r3, #40]	@ 0x28
    
    return rfalTransceiveBlockingTx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)gRfalNfcb.DT.sensbRes, sizeof(rfalNfcbSensbRes), &gRfalNfcb.DT.rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800cf96:	23f0      	movs	r3, #240	@ 0xf0
 800cf98:	015b      	lsls	r3, r3, #5
 800cf9a:	9302      	str	r3, [sp, #8]
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	9301      	str	r3, [sp, #4]
 800cfa0:	4b05      	ldr	r3, [pc, #20]	@ (800cfb8 <rfalNfcbPollerStartSlotMarker+0x48>)
 800cfa2:	000a      	movs	r2, r1
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	2101      	movs	r1, #1
 800cfa8:	230d      	movs	r3, #13
 800cfaa:	f7f6 fafd 	bl	80035a8 <rfalTransceiveBlockingTx>
}
 800cfae:	b006      	add	sp, #24
 800cfb0:	bd10      	pop	{r4, pc}
 800cfb2:	46c0      	nop			@ (mov r8, r8)
 800cfb4:	20001924 	.word	0x20001924
 800cfb8:	20001950 	.word	0x20001950

0800cfbc <rfalNfcbPollerGetSlotMarkerStatus>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerGetSlotMarkerStatus( void )
{
 800cfbc:	b510      	push	{r4, lr}
    ReturnCode ret;

    RFAL_EXIT_ON_BUSY( ret, rfalGetTransceiveStatus() );
 800cfbe:	f7f5 f8ff 	bl	80021c0 <rfalGetTransceiveStatus>
 800cfc2:	2802      	cmp	r0, #2
 800cfc4:	d010      	beq.n	800cfe8 <rfalNfcbPollerGetSlotMarkerStatus+0x2c>
    
    /* Covert bits to bytes (u8) */
    (*gRfalNfcb.DT.sensbResLen) = (uint8_t)rfalConvBitsToBytes(gRfalNfcb.DT.rxLen);
 800cfc6:	4a0a      	ldr	r2, [pc, #40]	@ (800cff0 <rfalNfcbPollerGetSlotMarkerStatus+0x34>)
 800cfc8:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 800cfca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800cfcc:	3307      	adds	r3, #7
 800cfce:	08db      	lsrs	r3, r3, #3
 800cfd0:	700b      	strb	r3, [r1, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == RFAL_ERR_CRC) || (ret == RFAL_ERR_FRAMING) )
 800cfd2:	2815      	cmp	r0, #21
 800cfd4:	d009      	beq.n	800cfea <rfalNfcbPollerGetSlotMarkerStatus+0x2e>
 800cfd6:	2809      	cmp	r0, #9
 800cfd8:	d007      	beq.n	800cfea <rfalNfcbPollerGetSlotMarkerStatus+0x2e>
    {
        return RFAL_ERR_RF_COLLISION;
    }
    
    if( ret == RFAL_ERR_NONE )
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d104      	bne.n	800cfe8 <rfalNfcbPollerGetSlotMarkerStatus+0x2c>
        return rfalNfcbCheckSensbRes( gRfalNfcb.DT.sensbRes, *gRfalNfcb.DT.sensbResLen );
 800cfde:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800cfe0:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800cfe2:	7819      	ldrb	r1, [r3, #0]
 800cfe4:	f7ff fefa 	bl	800cddc <rfalNfcbCheckSensbRes>
    {
        return rfalNfcbCheckSensbRes( gRfalNfcb.DT.sensbRes, *gRfalNfcb.DT.sensbResLen );
    }
    
    return ret;
}
 800cfe8:	bd10      	pop	{r4, pc}
        return RFAL_ERR_RF_COLLISION;
 800cfea:	201d      	movs	r0, #29
 800cfec:	e7fc      	b.n	800cfe8 <rfalNfcbPollerGetSlotMarkerStatus+0x2c>
 800cfee:	46c0      	nop			@ (mov r8, r8)
 800cff0:	20001924 	.word	0x20001924

0800cff4 <rfalNfcbPollerStartTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerStartTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
    return rfalNfcbPollerStartCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENS_CMD_ALLB_REQ : RFAL_NFCB_SENS_CMD_SENSB_REQ), RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 800cff4:	3801      	subs	r0, #1
{
 800cff6:	0013      	movs	r3, r2
    return rfalNfcbPollerStartCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENS_CMD_ALLB_REQ : RFAL_NFCB_SENS_CMD_SENSB_REQ), RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 800cff8:	4242      	negs	r2, r0
 800cffa:	4150      	adcs	r0, r2
{
 800cffc:	b510      	push	{r4, lr}
    return rfalNfcbPollerStartCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENS_CMD_ALLB_REQ : RFAL_NFCB_SENS_CMD_SENSB_REQ), RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 800cffe:	000a      	movs	r2, r1
 800d000:	2100      	movs	r1, #0
 800d002:	00c0      	lsls	r0, r0, #3
 800d004:	f7ff ff34 	bl	800ce70 <rfalNfcbPollerStartCheckPresence>
}
 800d008:	bd10      	pop	{r4, pc}

0800d00a <rfalNfcbPollerGetTechnologyDetectionStatus>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerGetTechnologyDetectionStatus( void )
{
 800d00a:	b510      	push	{r4, lr}
    return rfalNfcbPollerGetCheckPresenceStatus();
 800d00c:	f7ff ff68 	bl	800cee0 <rfalNfcbPollerGetCheckPresenceStatus>
}
 800d010:	bd10      	pop	{r4, pc}
	...

0800d014 <rfalNfcbPollerStartSlottedCollisionResolution>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerStartSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 800d014:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
    if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 800d016:	9f05      	ldr	r7, [sp, #20]
{
 800d018:	0004      	movs	r4, r0
 800d01a:	9d06      	ldr	r5, [sp, #24]
        (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
    {
        return RFAL_ERR_PARAM;
 800d01c:	2007      	movs	r0, #7
{
 800d01e:	9e07      	ldr	r6, [sp, #28]
    if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 800d020:	2f00      	cmp	r7, #0
 800d022:	d01c      	beq.n	800d05e <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
 800d024:	2d00      	cmp	r5, #0
 800d026:	d01a      	beq.n	800d05e <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
 800d028:	2e00      	cmp	r6, #0
 800d02a:	d018      	beq.n	800d05e <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
 800d02c:	2a04      	cmp	r2, #4
 800d02e:	d816      	bhi.n	800d05e <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
 800d030:	2b04      	cmp	r3, #4
 800d032:	d814      	bhi.n	800d05e <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
        (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 800d034:	2c02      	cmp	r4, #2
 800d036:	d101      	bne.n	800d03c <rfalNfcbPollerStartSlottedCollisionResolution+0x28>
 800d038:	2a00      	cmp	r2, #0
 800d03a:	d110      	bne.n	800d05e <rfalNfcbPollerStartSlottedCollisionResolution+0x4a>
    }

    (*devCnt)     = 0;
    (*colPending) = false;
 800d03c:	2000      	movs	r0, #0
    platformTimerDestroy( gRfalNfcb.CR.tmr );
    
    /* Store parameters */
    gRfalNfcb.CR.compMode    = compMode;
 800d03e:	4f08      	ldr	r7, [pc, #32]	@ (800d060 <rfalNfcbPollerStartSlottedCollisionResolution+0x4c>)
    (*colPending) = false;
 800d040:	7030      	strb	r0, [r6, #0]
    gRfalNfcb.CR.devLimit    = devLimit;
    gRfalNfcb.CR.curSlots    = (uint8_t)initSlots;
    gRfalNfcb.CR.endSlots    = (uint8_t)endSlots;
 800d042:	75bb      	strb	r3, [r7, #22]
    gRfalNfcb.CR.nfcbDevList = nfcbDevList;
 800d044:	9b05      	ldr	r3, [sp, #20]
    gRfalNfcb.CR.compMode    = compMode;
 800d046:	713c      	strb	r4, [r7, #4]
    gRfalNfcb.CR.nfcbDevList = nfcbDevList;
 800d048:	60bb      	str	r3, [r7, #8]
    (*gRfalNfcb.CR.devCnt)   = 0U;
    gRfalNfcb.CR.curDevCnt   = 0U;
    gRfalNfcb.CR.curSlotNum  = 0U;
    gRfalNfcb.CR.tmr         = RFAL_TIMING_NONE;
    
    gRfalNfcb.CR.state = RFAL_NFCB_CR_SLOTS_TX;
 800d04a:	1c7b      	adds	r3, r7, #1
    gRfalNfcb.CR.devLimit    = devLimit;
 800d04c:	7179      	strb	r1, [r7, #5]
    gRfalNfcb.CR.curSlots    = (uint8_t)initSlots;
 800d04e:	753a      	strb	r2, [r7, #20]
    gRfalNfcb.CR.colPending  = colPending;
 800d050:	613e      	str	r6, [r7, #16]
    gRfalNfcb.CR.devCnt      = devCnt;
 800d052:	60fd      	str	r5, [r7, #12]
    (*gRfalNfcb.CR.devCnt)   = 0U;
 800d054:	7028      	strb	r0, [r5, #0]
    gRfalNfcb.CR.curDevCnt   = 0U;
 800d056:	75f8      	strb	r0, [r7, #23]
    gRfalNfcb.CR.curSlotNum  = 0U;
 800d058:	7578      	strb	r0, [r7, #21]
    gRfalNfcb.CR.tmr         = RFAL_TIMING_NONE;
 800d05a:	61f8      	str	r0, [r7, #28]
    gRfalNfcb.CR.state = RFAL_NFCB_CR_SLOTS_TX;
 800d05c:	77d8      	strb	r0, [r3, #31]
    return RFAL_ERR_NONE;
}
 800d05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d060:	20001924 	.word	0x20001924

0800d064 <rfalNfcbPollerStartCollisionResolution>:
{
 800d064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return rfalNfcbPollerStartSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &gRfalNfcb.CR.colPend );
 800d066:	4c05      	ldr	r4, [pc, #20]	@ (800d07c <rfalNfcbPollerStartCollisionResolution+0x18>)
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	9200      	str	r2, [sp, #0]
 800d06c:	2304      	movs	r3, #4
 800d06e:	2200      	movs	r2, #0
 800d070:	9402      	str	r4, [sp, #8]
 800d072:	f7ff ffcf 	bl	800d014 <rfalNfcbPollerStartSlottedCollisionResolution>
}
 800d076:	b004      	add	sp, #16
 800d078:	bd10      	pop	{r4, pc}
 800d07a:	46c0      	nop			@ (mov r8, r8)
 800d07c:	2000193c 	.word	0x2000193c

0800d080 <rfalNfcbPollerGetCollisionResolutionStatus>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerGetCollisionResolutionStatus( void )
{
 800d080:	b5f0      	push	{r4, r5, r6, r7, lr}
    ReturnCode      ret;
    rfalNfcbSensCmd cmd;
    
    /* Check if operation is still not complete */
    if( gRfalNfcb.CR.tmr != RFAL_TIMING_NONE )
 800d082:	4c80      	ldr	r4, [pc, #512]	@ (800d284 <rfalNfcbPollerGetCollisionResolutionStatus+0x204>)
{
 800d084:	b085      	sub	sp, #20
    if( gRfalNfcb.CR.tmr != RFAL_TIMING_NONE )
 800d086:	69e0      	ldr	r0, [r4, #28]
 800d088:	2800      	cmp	r0, #0
 800d08a:	d10a      	bne.n	800d0a2 <rfalNfcbPollerGetCollisionResolutionStatus+0x22>
        {
            return RFAL_ERR_BUSY;
        }
    }

    switch( gRfalNfcb.CR.state )
 800d08c:	1c63      	adds	r3, r4, #1
 800d08e:	7fdb      	ldrb	r3, [r3, #31]
 800d090:	2b01      	cmp	r3, #1
 800d092:	d02d      	beq.n	800d0f0 <rfalNfcbPollerGetCollisionResolutionStatus+0x70>
 800d094:	2b02      	cmp	r3, #2
 800d096:	d100      	bne.n	800d09a <rfalNfcbPollerGetCollisionResolutionStatus+0x1a>
 800d098:	e0d1      	b.n	800d23e <rfalNfcbPollerGetCollisionResolutionStatus+0x1be>
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d008      	beq.n	800d0b0 <rfalNfcbPollerGetCollisionResolutionStatus+0x30>
                    gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].isSleep = false;
                    
                    if( gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_EMV )
                    {
                        (*gRfalNfcb.CR.devCnt)++;
                        return ret;
 800d09e:	2000      	movs	r0, #0
 800d0a0:	e004      	b.n	800d0ac <rfalNfcbPollerGetCollisionResolutionStatus+0x2c>
        if( (!platformTimerIsExpired(gRfalNfcb.CR.tmr)) )
 800d0a2:	f7f7 fc09 	bl	80048b8 <timerIsExpired>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d1f0      	bne.n	800d08c <rfalNfcbPollerGetCollisionResolutionStatus+0xc>
            return RFAL_ERR_BUSY;
 800d0aa:	2002      	movs	r0, #2
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
    }
    
    return RFAL_ERR_NONE;
}
 800d0ac:	b005      	add	sp, #20
 800d0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( (gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_ISO) && (gRfalNfcb.CR.curSlots == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800d0b0:	7923      	ldrb	r3, [r4, #4]
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d102      	bne.n	800d0bc <rfalNfcbPollerGetCollisionResolutionStatus+0x3c>
 800d0b6:	7d23      	ldrb	r3, [r4, #20]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d011      	beq.n	800d0e0 <rfalNfcbPollerGetCollisionResolutionStatus+0x60>
                rfalNfcbPollerStartCheckPresence( cmd, (rfalNfcbSlots)gRfalNfcb.CR.curSlots, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbRes, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbResLen );
 800d0bc:	220f      	movs	r2, #15
 800d0be:	68e3      	ldr	r3, [r4, #12]
            else if( gRfalNfcb.CR.curSlotNum == 0U )
 800d0c0:	7d60      	ldrb	r0, [r4, #21]
                rfalNfcbPollerStartCheckPresence( cmd, (rfalNfcbSlots)gRfalNfcb.CR.curSlots, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbRes, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbResLen );
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	435a      	muls	r2, r3
 800d0c6:	68a3      	ldr	r3, [r4, #8]
 800d0c8:	189b      	adds	r3, r3, r2
 800d0ca:	1c59      	adds	r1, r3, #1
            else if( gRfalNfcb.CR.curSlotNum == 0U )
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	d10b      	bne.n	800d0e8 <rfalNfcbPollerGetCollisionResolutionStatus+0x68>
                cmd = ((gRfalNfcb.CR.curSlots == (uint8_t)RFAL_NFCB_SLOT_NUM_1) ? RFAL_NFCB_SENS_CMD_ALLB_REQ : RFAL_NFCB_SENS_CMD_SENSB_REQ );
 800d0d0:	7d25      	ldrb	r5, [r4, #20]
 800d0d2:	4268      	negs	r0, r5
 800d0d4:	4168      	adcs	r0, r5
                rfalNfcbPollerStartCheckPresence( cmd, (rfalNfcbSlots)gRfalNfcb.CR.curSlots, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbRes, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbResLen );
 800d0d6:	000a      	movs	r2, r1
 800d0d8:	00c0      	lsls	r0, r0, #3
 800d0da:	0029      	movs	r1, r5
 800d0dc:	f7ff fec8 	bl	800ce70 <rfalNfcbPollerStartCheckPresence>
            gRfalNfcb.CR.state = RFAL_NFCB_CR_SLOTS;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	3401      	adds	r4, #1
 800d0e4:	77e3      	strb	r3, [r4, #31]
            return RFAL_ERR_BUSY;
 800d0e6:	e7e0      	b.n	800d0aa <rfalNfcbPollerGetCollisionResolutionStatus+0x2a>
                rfalNfcbPollerStartSlotMarker( gRfalNfcb.CR.curSlotNum, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbRes, &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbResLen );
 800d0e8:	001a      	movs	r2, r3
 800d0ea:	f7ff ff41 	bl	800cf70 <rfalNfcbPollerStartSlotMarker>
 800d0ee:	e7f7      	b.n	800d0e0 <rfalNfcbPollerGetCollisionResolutionStatus+0x60>
            RFAL_EXIT_ON_BUSY( ret, rfalNfcbPollerGetSlotMarkerStatus() );
 800d0f0:	f7ff ff64 	bl	800cfbc <rfalNfcbPollerGetSlotMarkerStatus>
 800d0f4:	9003      	str	r0, [sp, #12]
 800d0f6:	2802      	cmp	r0, #2
 800d0f8:	d0d7      	beq.n	800d0aa <rfalNfcbPollerGetCollisionResolutionStatus+0x2a>
            if( gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_EMV )
 800d0fa:	7927      	ldrb	r7, [r4, #4]
 800d0fc:	2f01      	cmp	r7, #1
 800d0fe:	d122      	bne.n	800d146 <rfalNfcbPollerGetCollisionResolutionStatus+0xc6>
                if( ret != RFAL_ERR_NONE )
 800d100:	2800      	cmp	r0, #0
 800d102:	d1d3      	bne.n	800d0ac <rfalNfcbPollerGetCollisionResolutionStatus+0x2c>
                if( gRfalNfcb.CR.nfcbDevList->sensbResLen == 0U  )
 800d104:	68a3      	ldr	r3, [r4, #8]
                    return RFAL_ERR_FRAMING;
 800d106:	3009      	adds	r0, #9
                if( gRfalNfcb.CR.nfcbDevList->sensbResLen == 0U  )
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d0ce      	beq.n	800d0ac <rfalNfcbPollerGetCollisionResolutionStatus+0x2c>
                if( (rfalNfcbCheckSensbRes( &gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbRes, gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].sensbResLen) == RFAL_ERR_NONE) && (ret == RFAL_ERR_NONE) )
 800d10e:	250f      	movs	r5, #15
 800d110:	68a3      	ldr	r3, [r4, #8]
 800d112:	68e6      	ldr	r6, [r4, #12]
 800d114:	9301      	str	r3, [sp, #4]
 800d116:	7833      	ldrb	r3, [r6, #0]
 800d118:	9a01      	ldr	r2, [sp, #4]
 800d11a:	436b      	muls	r3, r5
 800d11c:	18d2      	adds	r2, r2, r3
 800d11e:	9202      	str	r2, [sp, #8]
 800d120:	9a01      	ldr	r2, [sp, #4]
 800d122:	5cd1      	ldrb	r1, [r2, r3]
 800d124:	9b02      	ldr	r3, [sp, #8]
 800d126:	1c58      	adds	r0, r3, #1
 800d128:	f7ff fe58 	bl	800cddc <rfalNfcbCheckSensbRes>
 800d12c:	9b03      	ldr	r3, [sp, #12]
 800d12e:	4318      	orrs	r0, r3
 800d130:	b280      	uxth	r0, r0
 800d132:	2800      	cmp	r0, #0
 800d134:	d166      	bne.n	800d204 <rfalNfcbPollerGetCollisionResolutionStatus+0x184>
                    gRfalNfcb.CR.nfcbDevList[*gRfalNfcb.CR.devCnt].isSleep = false;
 800d136:	9b02      	ldr	r3, [sp, #8]
 800d138:	7398      	strb	r0, [r3, #14]
                    if( gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_EMV )
 800d13a:	2f01      	cmp	r7, #1
 800d13c:	d115      	bne.n	800d16a <rfalNfcbPollerGetCollisionResolutionStatus+0xea>
                        (*gRfalNfcb.CR.devCnt)++;
 800d13e:	7833      	ldrb	r3, [r6, #0]
 800d140:	3301      	adds	r3, #1
 800d142:	7033      	strb	r3, [r6, #0]
                        return ret;
 800d144:	e7ab      	b.n	800d09e <rfalNfcbPollerGetCollisionResolutionStatus+0x1e>
            if( ret != RFAL_ERR_TIMEOUT )
 800d146:	9b03      	ldr	r3, [sp, #12]
 800d148:	2b04      	cmp	r3, #4
 800d14a:	d1e0      	bne.n	800d10e <rfalNfcbPollerGetCollisionResolutionStatus+0x8e>
            if( (gRfalNfcb.CR.curSlotNum + 1U) < rfalNfcbNI2NumberOfSlots(gRfalNfcb.CR.curSlots)  )
 800d14c:	2201      	movs	r2, #1
 800d14e:	0014      	movs	r4, r2
 800d150:	4b4c      	ldr	r3, [pc, #304]	@ (800d284 <rfalNfcbPollerGetCollisionResolutionStatus+0x204>)
 800d152:	25ff      	movs	r5, #255	@ 0xff
 800d154:	7d18      	ldrb	r0, [r3, #20]
 800d156:	7d59      	ldrb	r1, [r3, #21]
 800d158:	4084      	lsls	r4, r0
 800d15a:	3101      	adds	r1, #1
 800d15c:	402c      	ands	r4, r5
 800d15e:	42a1      	cmp	r1, r4
 800d160:	d25a      	bcs.n	800d218 <rfalNfcbPollerGetCollisionResolutionStatus+0x198>
                gRfalNfcb.CR.curSlotNum++;
 800d162:	7559      	strb	r1, [r3, #21]
                gRfalNfcb.CR.state = RFAL_NFCB_CR_SLOTS_TX;
 800d164:	189b      	adds	r3, r3, r2
 800d166:	2200      	movs	r2, #0
 800d168:	e04a      	b.n	800d200 <rfalNfcbPollerGetCollisionResolutionStatus+0x180>
                    else if( gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_ISO )
 800d16a:	2f02      	cmp	r7, #2
 800d16c:	d11e      	bne.n	800d1ac <rfalNfcbPollerGetCollisionResolutionStatus+0x12c>
                        (*gRfalNfcb.CR.devCnt)++;
 800d16e:	7833      	ldrb	r3, [r6, #0]
 800d170:	3301      	adds	r3, #1
 800d172:	7033      	strb	r3, [r6, #0]
                        gRfalNfcb.CR.curDevCnt++;
 800d174:	7de3      	ldrb	r3, [r4, #23]
                        if( (*gRfalNfcb.CR.devCnt >= gRfalNfcb.CR.devLimit) || (gRfalNfcb.CR.curSlotNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800d176:	7962      	ldrb	r2, [r4, #5]
                        gRfalNfcb.CR.curDevCnt++;
 800d178:	3301      	adds	r3, #1
 800d17a:	75e3      	strb	r3, [r4, #23]
                        if( (*gRfalNfcb.CR.devCnt >= gRfalNfcb.CR.devLimit) || (gRfalNfcb.CR.curSlotNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800d17c:	68e3      	ldr	r3, [r4, #12]
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	429a      	cmp	r2, r3
 800d182:	d800      	bhi.n	800d186 <rfalNfcbPollerGetCollisionResolutionStatus+0x106>
 800d184:	e78b      	b.n	800d09e <rfalNfcbPollerGetCollisionResolutionStatus+0x1e>
 800d186:	7d62      	ldrb	r2, [r4, #21]
 800d188:	2a00      	cmp	r2, #0
 800d18a:	d100      	bne.n	800d18e <rfalNfcbPollerGetCollisionResolutionStatus+0x10e>
 800d18c:	e787      	b.n	800d09e <rfalNfcbPollerGetCollisionResolutionStatus+0x1e>
                        rfalNfcbPollerSleep( gRfalNfcb.CR.nfcbDevList[(*gRfalNfcb.CR.devCnt)-1U].sensbRes.nfcid0 );
 800d18e:	436b      	muls	r3, r5
 800d190:	68a0      	ldr	r0, [r4, #8]
 800d192:	18c0      	adds	r0, r0, r3
 800d194:	380d      	subs	r0, #13
 800d196:	f7ff fec1 	bl	800cf1c <rfalNfcbPollerSleep>
                        gRfalNfcb.CR.nfcbDevList[(*gRfalNfcb.CR.devCnt)-1U].isSleep =  true;
 800d19a:	68e3      	ldr	r3, [r4, #12]
 800d19c:	781a      	ldrb	r2, [r3, #0]
 800d19e:	68a3      	ldr	r3, [r4, #8]
 800d1a0:	436a      	muls	r2, r5
 800d1a2:	189b      	adds	r3, r3, r2
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	3b0f      	subs	r3, #15
 800d1a8:	739a      	strb	r2, [r3, #14]
 800d1aa:	e7cf      	b.n	800d14c <rfalNfcbPollerGetCollisionResolutionStatus+0xcc>
                    else if( gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_NFC )
 800d1ac:	2f00      	cmp	r7, #0
 800d1ae:	d1cd      	bne.n	800d14c <rfalNfcbPollerGetCollisionResolutionStatus+0xcc>
                        if( gRfalNfcb.CR.curDevCnt != 0U )
 800d1b0:	7de3      	ldrb	r3, [r4, #23]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d012      	beq.n	800d1dc <rfalNfcbPollerGetCollisionResolutionStatus+0x15c>
                            rfalNfcbPollerSleepTx( gRfalNfcb.CR.nfcbDevList[(*gRfalNfcb.CR.devCnt) - (uint8_t)1U].sensbRes.nfcid0 );
 800d1b6:	7833      	ldrb	r3, [r6, #0]
 800d1b8:	9a01      	ldr	r2, [sp, #4]
 800d1ba:	436b      	muls	r3, r5
 800d1bc:	18d0      	adds	r0, r2, r3
 800d1be:	380d      	subs	r0, #13
 800d1c0:	f7ff fe1e 	bl	800ce00 <rfalNfcbPollerSleepTx.isra.0>
                            gRfalNfcb.CR.nfcbDevList[(*gRfalNfcb.CR.devCnt) - (uint8_t)1U].isSleep = true;
 800d1c4:	68e3      	ldr	r3, [r4, #12]
                            gRfalNfcb.CR.tmr = platformTimerCreate( (uint16_t)rfalConv1fcToMs(RFAL_NFCB_ACTIVATION_FWT) );
 800d1c6:	2011      	movs	r0, #17
                            gRfalNfcb.CR.nfcbDevList[(*gRfalNfcb.CR.devCnt) - (uint8_t)1U].isSleep = true;
 800d1c8:	781a      	ldrb	r2, [r3, #0]
 800d1ca:	68a3      	ldr	r3, [r4, #8]
 800d1cc:	4355      	muls	r5, r2
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	195b      	adds	r3, r3, r5
 800d1d2:	3b0f      	subs	r3, #15
 800d1d4:	739a      	strb	r2, [r3, #14]
                            gRfalNfcb.CR.tmr = platformTimerCreate( (uint16_t)rfalConv1fcToMs(RFAL_NFCB_ACTIVATION_FWT) );
 800d1d6:	f7f7 fb69 	bl	80048ac <timerCalculateTimer>
 800d1da:	61e0      	str	r0, [r4, #28]
                        (*gRfalNfcb.CR.devCnt)++;
 800d1dc:	4b29      	ldr	r3, [pc, #164]	@ (800d284 <rfalNfcbPollerGetCollisionResolutionStatus+0x204>)
 800d1de:	68d9      	ldr	r1, [r3, #12]
 800d1e0:	780a      	ldrb	r2, [r1, #0]
 800d1e2:	3201      	adds	r2, #1
 800d1e4:	700a      	strb	r2, [r1, #0]
                        gRfalNfcb.CR.curDevCnt++;
 800d1e6:	7dda      	ldrb	r2, [r3, #23]
 800d1e8:	3201      	adds	r2, #1
 800d1ea:	75da      	strb	r2, [r3, #23]
                        if( (*gRfalNfcb.CR.devCnt >= gRfalNfcb.CR.devLimit) || (gRfalNfcb.CR.curSlots == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800d1ec:	68da      	ldr	r2, [r3, #12]
 800d1ee:	7811      	ldrb	r1, [r2, #0]
 800d1f0:	795a      	ldrb	r2, [r3, #5]
 800d1f2:	4291      	cmp	r1, r2
 800d1f4:	d202      	bcs.n	800d1fc <rfalNfcbPollerGetCollisionResolutionStatus+0x17c>
 800d1f6:	7d1a      	ldrb	r2, [r3, #20]
 800d1f8:	2a00      	cmp	r2, #0
 800d1fa:	d1a7      	bne.n	800d14c <rfalNfcbPollerGetCollisionResolutionStatus+0xcc>
                            gRfalNfcb.CR.state = RFAL_NFCB_CR_END;
 800d1fc:	2203      	movs	r2, #3
 800d1fe:	3301      	adds	r3, #1
                gRfalNfcb.CR.state = RFAL_NFCB_CR_SLEEP;
 800d200:	77da      	strb	r2, [r3, #31]
 800d202:	e752      	b.n	800d0aa <rfalNfcbPollerGetCollisionResolutionStatus+0x2a>
                    if( (gRfalNfcb.CR.devLimit == 0U) && (gRfalNfcb.CR.curSlotNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800d204:	7963      	ldrb	r3, [r4, #5]
 800d206:	7d62      	ldrb	r2, [r4, #21]
                        return RFAL_ERR_RF_COLLISION;
 800d208:	201d      	movs	r0, #29
                    if( (gRfalNfcb.CR.devLimit == 0U) && (gRfalNfcb.CR.curSlotNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800d20a:	4313      	orrs	r3, r2
 800d20c:	d100      	bne.n	800d210 <rfalNfcbPollerGetCollisionResolutionStatus+0x190>
 800d20e:	e74d      	b.n	800d0ac <rfalNfcbPollerGetCollisionResolutionStatus+0x2c>
                    (*gRfalNfcb.CR.colPending) = true;
 800d210:	2201      	movs	r2, #1
 800d212:	6923      	ldr	r3, [r4, #16]
 800d214:	701a      	strb	r2, [r3, #0]
 800d216:	e799      	b.n	800d14c <rfalNfcbPollerGetCollisionResolutionStatus+0xcc>
                if( !(*gRfalNfcb.CR.colPending) )
 800d218:	691c      	ldr	r4, [r3, #16]
 800d21a:	7824      	ldrb	r4, [r4, #0]
 800d21c:	2c00      	cmp	r4, #0
 800d21e:	d100      	bne.n	800d222 <rfalNfcbPollerGetCollisionResolutionStatus+0x1a2>
 800d220:	e73d      	b.n	800d09e <rfalNfcbPollerGetCollisionResolutionStatus+0x1e>
                if( gRfalNfcb.CR.curDevCnt == 0U )
 800d222:	7ddc      	ldrb	r4, [r3, #23]
 800d224:	2c00      	cmp	r4, #0
 800d226:	d107      	bne.n	800d238 <rfalNfcbPollerGetCollisionResolutionStatus+0x1b8>
                    if( (gRfalNfcb.CR.curSlotNum + 1U) >= rfalNfcbNI2NumberOfSlots(gRfalNfcb.CR.endSlots) )
 800d228:	7d9c      	ldrb	r4, [r3, #22]
 800d22a:	40a2      	lsls	r2, r4
 800d22c:	402a      	ands	r2, r5
 800d22e:	4291      	cmp	r1, r2
 800d230:	d300      	bcc.n	800d234 <rfalNfcbPollerGetCollisionResolutionStatus+0x1b4>
 800d232:	e734      	b.n	800d09e <rfalNfcbPollerGetCollisionResolutionStatus+0x1e>
                    gRfalNfcb.CR.curSlots++;
 800d234:	3001      	adds	r0, #1
 800d236:	7518      	strb	r0, [r3, #20]
                gRfalNfcb.CR.state = RFAL_NFCB_CR_SLEEP;
 800d238:	2202      	movs	r2, #2
 800d23a:	3301      	adds	r3, #1
 800d23c:	e7e0      	b.n	800d200 <rfalNfcbPollerGetCollisionResolutionStatus+0x180>
            if( (gRfalNfcb.CR.compMode == RFAL_COMPLIANCE_MODE_NFC) && (gRfalNfcb.CR.curDevCnt != 0U) )
 800d23e:	7923      	ldrb	r3, [r4, #4]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d117      	bne.n	800d274 <rfalNfcbPollerGetCollisionResolutionStatus+0x1f4>
 800d244:	7de3      	ldrb	r3, [r4, #23]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d014      	beq.n	800d274 <rfalNfcbPollerGetCollisionResolutionStatus+0x1f4>
                rfalNfcbPollerSleepTx( gRfalNfcb.CR.nfcbDevList[((*gRfalNfcb.CR.devCnt) - (uint8_t)1U)].sensbRes.nfcid0 );
 800d24a:	250f      	movs	r5, #15
 800d24c:	68e3      	ldr	r3, [r4, #12]
 800d24e:	68a0      	ldr	r0, [r4, #8]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	436b      	muls	r3, r5
 800d254:	18c0      	adds	r0, r0, r3
 800d256:	380d      	subs	r0, #13
 800d258:	f7ff fdd2 	bl	800ce00 <rfalNfcbPollerSleepTx.isra.0>
                gRfalNfcb.CR.nfcbDevList[((*gRfalNfcb.CR.devCnt) - (uint8_t)1U)].isSleep = true;
 800d25c:	68e3      	ldr	r3, [r4, #12]
                gRfalNfcb.CR.tmr = platformTimerCreate( (uint16_t) rfalConv1fcToMs(RFAL_NFCB_ACTIVATION_FWT) );
 800d25e:	2011      	movs	r0, #17
                gRfalNfcb.CR.nfcbDevList[((*gRfalNfcb.CR.devCnt) - (uint8_t)1U)].isSleep = true;
 800d260:	781a      	ldrb	r2, [r3, #0]
 800d262:	68a3      	ldr	r3, [r4, #8]
 800d264:	4355      	muls	r5, r2
 800d266:	2201      	movs	r2, #1
 800d268:	195b      	adds	r3, r3, r5
 800d26a:	3b0f      	subs	r3, #15
 800d26c:	739a      	strb	r2, [r3, #14]
                gRfalNfcb.CR.tmr = platformTimerCreate( (uint16_t) rfalConv1fcToMs(RFAL_NFCB_ACTIVATION_FWT) );
 800d26e:	f7f7 fb1d 	bl	80048ac <timerCalculateTimer>
 800d272:	61e0      	str	r0, [r4, #28]
            gRfalNfcb.CR.curSlotNum    = 0U;
 800d274:	2300      	movs	r3, #0
            (*gRfalNfcb.CR.colPending) = false;
 800d276:	6922      	ldr	r2, [r4, #16]
            gRfalNfcb.CR.curSlotNum    = 0U;
 800d278:	7563      	strb	r3, [r4, #21]
            gRfalNfcb.CR.curDevCnt     = 0U;
 800d27a:	75e3      	strb	r3, [r4, #23]
            (*gRfalNfcb.CR.colPending) = false;
 800d27c:	7013      	strb	r3, [r2, #0]
            gRfalNfcb.CR.state = RFAL_NFCB_CR_SLOTS_TX;
 800d27e:	3401      	adds	r4, #1
 800d280:	e730      	b.n	800d0e4 <rfalNfcbPollerGetCollisionResolutionStatus+0x64>
 800d282:	46c0      	nop			@ (mov r8, r8)
 800d284:	20001924 	.word	0x20001924

0800d288 <rfalNfcbTR2ToFDT>:
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[4] = { 1792, 3328, 5376, 9472 };
 800d288:	4b05      	ldr	r3, [pc, #20]	@ (800d2a0 <rfalNfcbTR2ToFDT+0x18>)
{
 800d28a:	b082      	sub	sp, #8
    const uint16_t rfalNfcbTr2Table[4] = { 1792, 3328, 5376, 9472 };
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	4b05      	ldr	r3, [pc, #20]	@ (800d2a4 <rfalNfcbTR2ToFDT+0x1c>)
 800d290:	9301      	str	r3, [sp, #4]
    /*******************************************************************************/

    return (uint32_t)rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 800d292:	2303      	movs	r3, #3
 800d294:	4018      	ands	r0, r3
 800d296:	466b      	mov	r3, sp
 800d298:	0040      	lsls	r0, r0, #1
 800d29a:	5ac0      	ldrh	r0, [r0, r3]
}
 800d29c:	b002      	add	sp, #8
 800d29e:	4770      	bx	lr
 800d2a0:	0d000700 	.word	0x0d000700
 800d2a4:	25001500 	.word	0x25001500

0800d2a8 <rfalNfcfComputeValidSENF.constprop.0>:
* LOCAL VARIABLES
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
 800d2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2aa:	0007      	movs	r7, r0
 800d2ac:	000c      	movs	r4, r1
 800d2ae:	b08b      	sub	sp, #44	@ 0x2c
 800d2b0:	9203      	str	r2, [sp, #12]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gNfcf.CR.greedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 800d2b2:	4e29      	ldr	r6, [pc, #164]	@ (800d358 <rfalNfcfComputeValidSENF.constprop.0+0xb0>)
 800d2b4:	7831      	ldrb	r1, [r6, #0]
 800d2b6:	2900      	cmp	r1, #0
 800d2b8:	d003      	beq.n	800d2c2 <rfalNfcfComputeValidSENF.constprop.0+0x1a>
 800d2ba:	7823      	ldrb	r3, [r4, #0]
 800d2bc:	9a03      	ldr	r2, [sp, #12]
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d301      	bcc.n	800d2c6 <rfalNfcfComputeValidSENF.constprop.0+0x1e>
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
                
        (*curDevIdx)++;
    }
}
 800d2c2:	b00b      	add	sp, #44	@ 0x2c
 800d2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        RFAL_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gNfcf.CR.greedyF.POLL_F[gNfcf.CR.greedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 800d2c6:	2314      	movs	r3, #20
        gNfcf.CR.greedyF.pollFound--;
 800d2c8:	3901      	subs	r1, #1
 800d2ca:	b2c9      	uxtb	r1, r1
 800d2cc:	7031      	strb	r1, [r6, #0]
        RFAL_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gNfcf.CR.greedyF.POLL_F[gNfcf.CR.greedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 800d2ce:	4359      	muls	r1, r3
 800d2d0:	1871      	adds	r1, r6, r1
 800d2d2:	001a      	movs	r2, r3
 800d2d4:	3102      	adds	r1, #2
 800d2d6:	a805      	add	r0, sp, #20
 800d2d8:	f003 f82a 	bl	8010330 <memcpy>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 800d2dc:	2214      	movs	r2, #20
 800d2de:	7823      	ldrb	r3, [r4, #0]
 800d2e0:	1cbd      	adds	r5, r7, #2
 800d2e2:	435a      	muls	r2, r3
 800d2e4:	18ab      	adds	r3, r5, r2
 800d2e6:	9201      	str	r2, [sp, #4]
 800d2e8:	9302      	str	r3, [sp, #8]
 800d2ea:	9b02      	ldr	r3, [sp, #8]
 800d2ec:	429d      	cmp	r5, r3
 800d2ee:	d128      	bne.n	800d342 <rfalNfcfComputeValidSENF.constprop.0+0x9a>
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 800d2f0:	ab04      	add	r3, sp, #16
 800d2f2:	791b      	ldrb	r3, [r3, #4]
 800d2f4:	001a      	movs	r2, r3
 800d2f6:	3a12      	subs	r2, #18
 800d2f8:	2a02      	cmp	r2, #2
 800d2fa:	d8da      	bhi.n	800d2b2 <rfalNfcfComputeValidSENF.constprop.0+0xa>
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 800d2fc:	aa04      	add	r2, sp, #16
 800d2fe:	7952      	ldrb	r2, [r2, #5]
 800d300:	2a01      	cmp	r2, #1
 800d302:	d1d6      	bne.n	800d2b2 <rfalNfcfComputeValidSENF.constprop.0+0xa>
            RFAL_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 800d304:	2514      	movs	r5, #20
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 800d306:	9a01      	ldr	r2, [sp, #4]
 800d308:	3b01      	subs	r3, #1
 800d30a:	54bb      	strb	r3, [r7, r2]
            RFAL_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 800d30c:	7823      	ldrb	r3, [r4, #0]
 800d30e:	436b      	muls	r3, r5
 800d310:	18fb      	adds	r3, r7, r3
 800d312:	781a      	ldrb	r2, [r3, #0]
 800d314:	1c58      	adds	r0, r3, #1
 800d316:	ab04      	add	r3, sp, #16
 800d318:	1d59      	adds	r1, r3, #5
 800d31a:	f003 f809 	bl	8010330 <memcpy>
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 800d31e:	7822      	ldrb	r2, [r4, #0]
 800d320:	2300      	movs	r3, #0
 800d322:	436a      	muls	r2, r5
 800d324:	18ba      	adds	r2, r7, r2
 800d326:	7891      	ldrb	r1, [r2, #2]
 800d328:	2901      	cmp	r1, #1
 800d32a:	d103      	bne.n	800d334 <rfalNfcfComputeValidSENF.constprop.0+0x8c>
 800d32c:	78d3      	ldrb	r3, [r2, #3]
 800d32e:	3bfe      	subs	r3, #254	@ 0xfe
 800d330:	425a      	negs	r2, r3
 800d332:	4153      	adcs	r3, r2
 800d334:	224e      	movs	r2, #78	@ 0x4e
 800d336:	32ff      	adds	r2, #255	@ 0xff
 800d338:	54b3      	strb	r3, [r6, r2]
        (*curDevIdx)++;
 800d33a:	7823      	ldrb	r3, [r4, #0]
 800d33c:	3301      	adds	r3, #1
 800d33e:	7023      	strb	r3, [r4, #0]
 800d340:	e7b7      	b.n	800d2b2 <rfalNfcfComputeValidSENF.constprop.0+0xa>
            if( RFAL_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 800d342:	ab04      	add	r3, sp, #16
 800d344:	0029      	movs	r1, r5
 800d346:	2208      	movs	r2, #8
 800d348:	1d98      	adds	r0, r3, #6
 800d34a:	f002 ff9d 	bl	8010288 <memcmp>
 800d34e:	3514      	adds	r5, #20
 800d350:	2800      	cmp	r0, #0
 800d352:	d1ca      	bne.n	800d2ea <rfalNfcfComputeValidSENF.constprop.0+0x42>
 800d354:	e7ad      	b.n	800d2b2 <rfalNfcfComputeValidSENF.constprop.0+0xa>
 800d356:	46c0      	nop			@ (mov r8, r8)
 800d358:	20001954 	.word	0x20001954

0800d35c <rfalNfcfPollerInitialize>:
/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 800d35c:	1e43      	subs	r3, r0, #1
{
 800d35e:	b510      	push	{r4, lr}
 800d360:	0001      	movs	r1, r0
    {
        return RFAL_ERR_PARAM;
 800d362:	2407      	movs	r4, #7
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 800d364:	2b01      	cmp	r3, #1
 800d366:	d811      	bhi.n	800d38c <rfalNfcfPollerInitialize+0x30>
    }
    
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 800d368:	0002      	movs	r2, r0
 800d36a:	2006      	movs	r0, #6
 800d36c:	f7f4 fc82 	bl	8001c74 <rfalSetMode>
 800d370:	1e04      	subs	r4, r0, #0
 800d372:	d10b      	bne.n	800d38c <rfalNfcfPollerInitialize+0x30>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 800d374:	f7f4 fd88 	bl	8001e88 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 800d378:	4805      	ldr	r0, [pc, #20]	@ (800d390 <rfalNfcfPollerInitialize+0x34>)
 800d37a:	f7f4 fdb7 	bl	8001eec <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 800d37e:	20a7      	movs	r0, #167	@ 0xa7
 800d380:	0100      	lsls	r0, r0, #4
 800d382:	f7f4 fda9 	bl	8001ed8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 800d386:	4803      	ldr	r0, [pc, #12]	@ (800d394 <rfalNfcfPollerInitialize+0x38>)
 800d388:	f7f4 fd94 	bl	8001eb4 <rfalSetFDTPoll>
    
    return RFAL_ERR_NONE;
}
 800d38c:	0020      	movs	r0, r4
 800d38e:	bd10      	pop	{r4, pc}
 800d390:	00042360 	.word	0x00042360
 800d394:	00001a90 	.word	0x00001a90

0800d398 <rfalNfcfPollerStartCheckPresence>:
    return ret;
}

/*******************************************************************************/
ReturnCode rfalNfcfPollerStartCheckPresence( void )
{
 800d398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    gNfcf.CR.greedyF.pollFound     = 0;
 800d39a:	2200      	movs	r2, #0
 800d39c:	4906      	ldr	r1, [pc, #24]	@ (800d3b8 <rfalNfcfPollerStartCheckPresence+0x20>)
    gNfcf.CR.greedyF.pollCollision = 0;
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalStartFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gNfcf.CR.greedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gNfcf.CR.greedyF.pollFound, &gNfcf.CR.greedyF.pollCollision );
 800d39e:	4807      	ldr	r0, [pc, #28]	@ (800d3bc <rfalNfcfPollerStartCheckPresence+0x24>)
    gNfcf.CR.greedyF.pollFound     = 0;
 800d3a0:	800a      	strh	r2, [r1, #0]
    return rfalStartFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gNfcf.CR.greedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gNfcf.CR.greedyF.pollFound, &gNfcf.CR.greedyF.pollCollision );
 800d3a2:	9101      	str	r1, [sp, #4]
 800d3a4:	2104      	movs	r1, #4
 800d3a6:	9002      	str	r0, [sp, #8]
 800d3a8:	9100      	str	r1, [sp, #0]
 800d3aa:	4b05      	ldr	r3, [pc, #20]	@ (800d3c0 <rfalNfcfPollerStartCheckPresence+0x28>)
 800d3ac:	4905      	ldr	r1, [pc, #20]	@ (800d3c4 <rfalNfcfPollerStartCheckPresence+0x2c>)
 800d3ae:	2003      	movs	r0, #3
 800d3b0:	f7f6 f912 	bl	80035d8 <rfalStartFeliCaPoll>
}
 800d3b4:	b005      	add	sp, #20
 800d3b6:	bd00      	pop	{pc}
 800d3b8:	20001954 	.word	0x20001954
 800d3bc:	20001955 	.word	0x20001955
 800d3c0:	20001956 	.word	0x20001956
 800d3c4:	0000ffff 	.word	0x0000ffff

0800d3c8 <rfalNfcfPollerGetCheckPresenceStatus>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerGetCheckPresenceStatus( void )
{
 800d3c8:	b510      	push	{r4, lr}
   return rfalGetFeliCaPollStatus();
 800d3ca:	f7f4 ff6d 	bl	80022a8 <rfalGetFeliCaPollStatus>
}
 800d3ce:	bd10      	pop	{r4, pc}

0800d3d0 <rfalNfcfPollerStartCollisionResolution>:
}


/*******************************************************************************/
ReturnCode rfalNfcfPollerStartCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 800d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d2:	0007      	movs	r7, r0
 800d3d4:	000d      	movs	r5, r1
 800d3d6:	0016      	movs	r6, r2
 800d3d8:	001c      	movs	r4, r3
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
    {
        return RFAL_ERR_PARAM;
 800d3da:	2007      	movs	r0, #7
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 800d3dc:	2a00      	cmp	r2, #0
 800d3de:	d018      	beq.n	800d412 <rfalNfcfPollerStartCollisionResolution+0x42>
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d016      	beq.n	800d412 <rfalNfcfPollerStartCollisionResolution+0x42>
    }
            
    *devCnt      = 0;
 800d3e4:	2300      	movs	r3, #0
    /* ACTIVITY 2.1 - 9.3.6.2 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &gNfcf.CR.nfcDepFound );
 800d3e6:	2204      	movs	r2, #4
    *devCnt      = 0;
 800d3e8:	7023      	strb	r3, [r4, #0]
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &gNfcf.CR.nfcDepFound );
 800d3ea:	4299      	cmp	r1, r3
 800d3ec:	d000      	beq.n	800d3f0 <rfalNfcfPollerStartCollisionResolution+0x20>
 800d3ee:	000a      	movs	r2, r1
 800d3f0:	0021      	movs	r1, r4
 800d3f2:	0030      	movs	r0, r6
 800d3f4:	f7ff ff58 	bl	800d2a8 <rfalNfcfComputeValidSENF.constprop.0>
    
    /* Store context */
    gNfcf.CR.nfcfDevList = nfcfDevList;
 800d3f8:	4a06      	ldr	r2, [pc, #24]	@ (800d414 <rfalNfcfPollerStartCollisionResolution+0x44>)
    gNfcf.CR.compMode    = compMode;
 800d3fa:	2144      	movs	r1, #68	@ 0x44
    gNfcf.CR.nfcfDevList = nfcfDevList;
 800d3fc:	6496      	str	r6, [r2, #72]	@ 0x48
    gNfcf.CR.devLimit    = devLimit;
    gNfcf.CR.devCnt      = devCnt;
 800d3fe:	64d4      	str	r4, [r2, #76]	@ 0x4c
    gNfcf.CR.state       = RFAL_NFCF_CR_POLL;
 800d400:	22a7      	movs	r2, #167	@ 0xa7
 800d402:	2000      	movs	r0, #0
    gNfcf.CR.nfcfDevList = nfcfDevList;
 800d404:	4b04      	ldr	r3, [pc, #16]	@ (800d418 <rfalNfcfPollerStartCollisionResolution+0x48>)
    gNfcf.CR.compMode    = compMode;
 800d406:	31ff      	adds	r1, #255	@ 0xff
 800d408:	545f      	strb	r7, [r3, r1]
    gNfcf.CR.state       = RFAL_NFCF_CR_POLL;
 800d40a:	0052      	lsls	r2, r2, #1
    gNfcf.CR.devLimit    = devLimit;
 800d40c:	3901      	subs	r1, #1
 800d40e:	545d      	strb	r5, [r3, r1]
    gNfcf.CR.state       = RFAL_NFCF_CR_POLL;
 800d410:	5498      	strb	r0, [r3, r2]
    
    return RFAL_ERR_NONE;
}
 800d412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d414:	20001a50 	.word	0x20001a50
 800d418:	20001954 	.word	0x20001954

0800d41c <rfalNfcfPollerGetCollisionResolutionStatus>:
/*******************************************************************************/
ReturnCode rfalNfcfPollerGetCollisionResolutionStatus( void )
{
    ReturnCode  ret;
    
    switch( gNfcf.CR.state )
 800d41c:	23a7      	movs	r3, #167	@ 0xa7
{
 800d41e:	b530      	push	{r4, r5, lr}
    switch( gNfcf.CR.state )
 800d420:	4c28      	ldr	r4, [pc, #160]	@ (800d4c4 <rfalNfcfPollerGetCollisionResolutionStatus+0xa8>)
 800d422:	005b      	lsls	r3, r3, #1
 800d424:	5ce3      	ldrb	r3, [r4, r3]
{
 800d426:	b085      	sub	sp, #20
    switch( gNfcf.CR.state )
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d029      	beq.n	800d480 <rfalNfcfPollerGetCollisionResolutionStatus+0x64>
 800d42c:	2202      	movs	r2, #2
 800d42e:	0019      	movs	r1, r3
 800d430:	4391      	bics	r1, r2
 800d432:	d10a      	bne.n	800d44a <rfalNfcfPollerGetCollisionResolutionStatus+0x2e>
        /*******************************************************************************/
        case RFAL_NFCF_CR_POLL:
        case RFAL_NFCF_CR_POLL_SC:
        
            
            if( gNfcf.CR.state == RFAL_NFCF_CR_POLL  )
 800d434:	2b00      	cmp	r3, #0
 800d436:	d10c      	bne.n	800d452 <rfalNfcfPollerGetCollisionResolutionStatus+0x36>
            {
                /*******************************************************************************/
                /* Activity 2.1  9.3.6.3  - Symbol 2 Check if devices found are lower than the limit */
                if( *gNfcf.CR.devCnt >= gNfcf.CR.devLimit )
 800d438:	0022      	movs	r2, r4
 800d43a:	21a1      	movs	r1, #161	@ 0xa1
 800d43c:	32fc      	adds	r2, #252	@ 0xfc
 800d43e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800d440:	0049      	lsls	r1, r1, #1
 800d442:	7810      	ldrb	r0, [r2, #0]
 800d444:	5c61      	ldrb	r1, [r4, r1]
 800d446:	4288      	cmp	r0, r1
 800d448:	d302      	bcc.n	800d450 <rfalNfcfPollerGetCollisionResolutionStatus+0x34>
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
        
    }
    
    return RFAL_ERR_NONE;
 800d44a:	2000      	movs	r0, #0
    
}
 800d44c:	b005      	add	sp, #20
 800d44e:	bd30      	pop	{r4, r5, pc}
                *gNfcf.CR.devCnt = 0;
 800d450:	7013      	strb	r3, [r2, #0]
            RFAL_EXIT_ON_ERR( ret, rfalStartFeliCaPoll( RFAL_FELICA_16_SLOTS, 
 800d452:	25a7      	movs	r5, #167	@ 0xa7
 800d454:	006d      	lsls	r5, r5, #1
 800d456:	5d62      	ldrb	r2, [r4, r5]
 800d458:	200f      	movs	r0, #15
 800d45a:	3a02      	subs	r2, #2
 800d45c:	4251      	negs	r1, r2
 800d45e:	414a      	adcs	r2, r1
 800d460:	4919      	ldr	r1, [pc, #100]	@ (800d4c8 <rfalNfcfPollerGetCollisionResolutionStatus+0xac>)
 800d462:	4b1a      	ldr	r3, [pc, #104]	@ (800d4cc <rfalNfcfPollerGetCollisionResolutionStatus+0xb0>)
 800d464:	9102      	str	r1, [sp, #8]
 800d466:	2110      	movs	r1, #16
 800d468:	b2d2      	uxtb	r2, r2
 800d46a:	9100      	str	r1, [sp, #0]
 800d46c:	9401      	str	r4, [sp, #4]
 800d46e:	4918      	ldr	r1, [pc, #96]	@ (800d4d0 <rfalNfcfPollerGetCollisionResolutionStatus+0xb4>)
 800d470:	f7f6 f8b2 	bl	80035d8 <rfalStartFeliCaPoll>
 800d474:	2800      	cmp	r0, #0
 800d476:	d1e9      	bne.n	800d44c <rfalNfcfPollerGetCollisionResolutionStatus+0x30>
            gNfcf.CR.state = RFAL_NFCF_CR_PARSE;
 800d478:	2301      	movs	r3, #1
 800d47a:	5563      	strb	r3, [r4, r5]
            return RFAL_ERR_BUSY;
 800d47c:	2002      	movs	r0, #2
 800d47e:	e7e5      	b.n	800d44c <rfalNfcfPollerGetCollisionResolutionStatus+0x30>
            RFAL_EXIT_ON_BUSY( ret, rfalGetFeliCaPollStatus() );
 800d480:	f7f4 ff12 	bl	80022a8 <rfalGetFeliCaPollStatus>
 800d484:	2802      	cmp	r0, #2
 800d486:	d0f9      	beq.n	800d47c <rfalNfcfPollerGetCollisionResolutionStatus+0x60>
            if( ret == RFAL_ERR_NONE )
 800d488:	2800      	cmp	r0, #0
 800d48a:	d108      	bne.n	800d49e <rfalNfcfPollerGetCollisionResolutionStatus+0x82>
                rfalNfcfComputeValidSENF( gNfcf.CR.nfcfDevList, gNfcf.CR.devCnt, gNfcf.CR.devLimit, false, &gNfcf.CR.nfcDepFound );
 800d48c:	23a1      	movs	r3, #161	@ 0xa1
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	5ce2      	ldrb	r2, [r4, r3]
 800d492:	0023      	movs	r3, r4
 800d494:	33fc      	adds	r3, #252	@ 0xfc
 800d496:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d498:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800d49a:	f7ff ff05 	bl	800d2a8 <rfalNfcfComputeValidSENF.constprop.0>
            if( (gNfcf.CR.nfcDepFound) && (gNfcf.CR.compMode == RFAL_COMPLIANCE_MODE_NFC) )
 800d49e:	234e      	movs	r3, #78	@ 0x4e
 800d4a0:	33ff      	adds	r3, #255	@ 0xff
 800d4a2:	5ce3      	ldrb	r3, [r4, r3]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d0d0      	beq.n	800d44a <rfalNfcfPollerGetCollisionResolutionStatus+0x2e>
 800d4a8:	2344      	movs	r3, #68	@ 0x44
 800d4aa:	33ff      	adds	r3, #255	@ 0xff
 800d4ac:	5ce2      	ldrb	r2, [r4, r3]
 800d4ae:	2a00      	cmp	r2, #0
 800d4b0:	d1cb      	bne.n	800d44a <rfalNfcfPollerGetCollisionResolutionStatus+0x2e>
                gNfcf.CR.state = RFAL_NFCF_CR_POLL_SC;
 800d4b2:	2102      	movs	r1, #2
 800d4b4:	324f      	adds	r2, #79	@ 0x4f
 800d4b6:	32ff      	adds	r2, #255	@ 0xff
 800d4b8:	54a1      	strb	r1, [r4, r2]
                gNfcf.CR.compMode = RFAL_COMPLIANCE_MODE_EMV; 
 800d4ba:	3a4e      	subs	r2, #78	@ 0x4e
 800d4bc:	3aff      	subs	r2, #255	@ 0xff
 800d4be:	54e2      	strb	r2, [r4, r3]
                return RFAL_ERR_BUSY;
 800d4c0:	e7dc      	b.n	800d47c <rfalNfcfPollerGetCollisionResolutionStatus+0x60>
 800d4c2:	46c0      	nop			@ (mov r8, r8)
 800d4c4:	20001954 	.word	0x20001954
 800d4c8:	20001955 	.word	0x20001955
 800d4cc:	20001956 	.word	0x20001956
 800d4d0:	0000ffff 	.word	0x0000ffff

0800d4d4 <rfalNfcfPollerCheck>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheck( const uint8_t* nfcid2, const rfalNfcfServBlockListParam *servBlock, uint8_t *rxBuf, uint16_t rxBufLen, uint16_t *rcvdLen )
{
 800d4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4d6:	b09f      	sub	sp, #124	@ 0x7c
 800d4d8:	000f      	movs	r7, r1
 800d4da:	0016      	movs	r6, r2
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
        (rxBufLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECK_RES_MIN_LEN))                      )
    {
        return RFAL_ERR_PARAM;
 800d4dc:	2407      	movs	r4, #7
{
 800d4de:	9006      	str	r0, [sp, #24]
 800d4e0:	9307      	str	r3, [sp, #28]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d06f      	beq.n	800d5c6 <rfalNfcfPollerCheck+0xf2>
 800d4e6:	2a00      	cmp	r2, #0
 800d4e8:	d06d      	beq.n	800d5c6 <rfalNfcfPollerCheck+0xf2>
 800d4ea:	2900      	cmp	r1, #0
 800d4ec:	d06b      	beq.n	800d5c6 <rfalNfcfPollerCheck+0xf2>
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 800d4ee:	7a0b      	ldrb	r3, [r1, #8]
 800d4f0:	9305      	str	r3, [sp, #20]
    if( (nfcid2 == NULL) || (rxBuf == NULL) || (servBlock == NULL)                           ||
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	2b0e      	cmp	r3, #14
 800d4f6:	d866      	bhi.n	800d5c6 <rfalNfcfPollerCheck+0xf2>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 800d4f8:	780d      	ldrb	r5, [r1, #0]
        (servBlock->numBlock == 0U) || (servBlock->numBlock > RFAL_NFCF_CHECK_REQ_MAX_BLOCK) ||
 800d4fa:	1e6b      	subs	r3, r5, #1
 800d4fc:	2b0e      	cmp	r3, #14
 800d4fe:	d862      	bhi.n	800d5c6 <rfalNfcfPollerCheck+0xf2>
        (servBlock->numServ == 0U) || (servBlock->numServ > RFAL_NFCF_CHECK_REQ_MAX_SERV)    ||
 800d500:	9b07      	ldr	r3, [sp, #28]
 800d502:	2b0b      	cmp	r3, #11
 800d504:	d95f      	bls.n	800d5c6 <rfalNfcfPollerCheck+0xf2>
    msgIt = 0;
    
    /*******************************************************************************/
    /* Compose CHECK command/request                                               */
    
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 800d506:	2306      	movs	r3, #6
    
    RFAL_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 800d508:	0001      	movs	r1, r0
 800d50a:	2011      	movs	r0, #17
    txBuf[msgIt++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION;                               /* Command Code    */
 800d50c:	ac08      	add	r4, sp, #32
 800d50e:	7023      	strb	r3, [r4, #0]
    RFAL_MEMCPY( &txBuf[msgIt], nfcid2, RFAL_NFCF_NFCID2_LEN );                             /* NFCID2          */
 800d510:	ab04      	add	r3, sp, #16
 800d512:	2208      	movs	r2, #8
 800d514:	18c0      	adds	r0, r0, r3
 800d516:	f002 ff0b 	bl	8010330 <memcpy>
    msgIt += RFAL_NFCF_NFCID2_LEN;
    
    txBuf[msgIt++] = servBlock->numServ;                                                  /* NoS             */
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	006a      	lsls	r2, r5, #1
 800d51e:	7265      	strb	r5, [r4, #9]
    for( i = 0; i < servBlock->numServ; i++)
 800d520:	18d2      	adds	r2, r2, r3
    {
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 800d522:	8819      	ldrh	r1, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 800d524:	3402      	adds	r4, #2
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 0U) & 0xFFU);               /* Service Code    */
 800d526:	7221      	strb	r1, [r4, #8]
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 800d528:	8819      	ldrh	r1, [r3, #0]
    for( i = 0; i < servBlock->numServ; i++)
 800d52a:	3302      	adds	r3, #2
        txBuf[msgIt++] = (uint8_t)((servBlock->servList[i] >> 8U) & 0xFFU);            
 800d52c:	0a09      	lsrs	r1, r1, #8
 800d52e:	7261      	strb	r1, [r4, #9]
    for( i = 0; i < servBlock->numServ; i++)
 800d530:	4293      	cmp	r3, r2
 800d532:	d1f6      	bne.n	800d522 <rfalNfcfPollerCheck+0x4e>
 800d534:	3504      	adds	r5, #4
 800d536:	006d      	lsls	r5, r5, #1
 800d538:	b2ed      	uxtb	r5, r5
    }
    
    txBuf[msgIt++] = servBlock->numBlock;                                                 /* NoB             */
 800d53a:	9b05      	ldr	r3, [sp, #20]
 800d53c:	1ce9      	adds	r1, r5, #3
 800d53e:	3502      	adds	r5, #2
 800d540:	9a05      	ldr	r2, [sp, #20]
 800d542:	a808      	add	r0, sp, #32
 800d544:	b2ed      	uxtb	r5, r5
 800d546:	5543      	strb	r3, [r0, r5]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	0092      	lsls	r2, r2, #2
 800d54c:	18d2      	adds	r2, r2, r3
 800d54e:	4694      	mov	ip, r2
 800d550:	b2c9      	uxtb	r1, r1
    for( i = 0; i < servBlock->numBlock; i++)
    {
        txBuf[msgIt++] = servBlock->blockList[i].conf;                                    /* Block list element conf (Flag|Access|Service) */
 800d552:	781d      	ldrb	r5, [r3, #0]
 800d554:	1c4c      	adds	r4, r1, #1
 800d556:	5445      	strb	r5, [r0, r1]
        if( (servBlock->blockList[i].conf & RFAL_NFCF_BLOCKLISTELEM_LEN_BIT) != 0U )      /* Check if 2 or 3 byte block list element       */
 800d558:	885f      	ldrh	r7, [r3, #2]
        {
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 800d55a:	b2e4      	uxtb	r4, r4
 800d55c:	1c8a      	adds	r2, r1, #2
        if( (servBlock->blockList[i].conf & RFAL_NFCF_BLOCKLISTELEM_LEN_BIT) != 0U )      /* Check if 2 or 3 byte block list element       */
 800d55e:	b26d      	sxtb	r5, r5
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 800d560:	b2d2      	uxtb	r2, r2
 800d562:	5507      	strb	r7, [r0, r4]
        if( (servBlock->blockList[i].conf & RFAL_NFCF_BLOCKLISTELEM_LEN_BIT) != 0U )      /* Check if 2 or 3 byte block list element       */
 800d564:	2d00      	cmp	r5, #0
 800d566:	da31      	bge.n	800d5cc <rfalNfcfPollerCheck+0xf8>
            txBuf[msgIt++] = (uint8_t)(servBlock->blockList[i].blockNum & 0xFFU);         /* 1byte Block Num */
 800d568:	0011      	movs	r1, r2
    for( i = 0; i < servBlock->numBlock; i++)
 800d56a:	3304      	adds	r3, #4
 800d56c:	4563      	cmp	r3, ip
 800d56e:	d1f0      	bne.n	800d552 <rfalNfcfPollerCheck+0x7e>
        }
    }
    
    /*******************************************************************************/
    /* Transceive CHECK command/request                                            */
    ret = rfalTransceiveBlockingTxRx( txBuf, msgIt, rxBuf, rxBufLen, rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCF_MRT_CHECK_UPDATE );
 800d570:	4b1b      	ldr	r3, [pc, #108]	@ (800d5e0 <rfalNfcfPollerCheck+0x10c>)
 800d572:	0032      	movs	r2, r6
 800d574:	9302      	str	r3, [sp, #8]
 800d576:	2300      	movs	r3, #0
 800d578:	9301      	str	r3, [sp, #4]
 800d57a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	9b07      	ldr	r3, [sp, #28]
 800d580:	f7f6 f8ec 	bl	800375c <rfalTransceiveBlockingTxRx>
 800d584:	1e04      	subs	r4, r0, #0
    
    if( ret == RFAL_ERR_NONE )
 800d586:	d11e      	bne.n	800d5c6 <rfalNfcfPollerCheck+0xf2>
    {
        /* Skip LEN byte */
        checkRes = (rxBuf + RFAL_NFCF_LENGTH_LEN);
       
        /* Check NFCID and response length    T3T v1.0   5.4.2.3 */
        if( (RFAL_BYTECMP( nfcid2, &checkRes[RFAL_NFCF_CMD_LEN], RFAL_NFCF_NFCID2_LEN ) != 0) || 
 800d588:	2208      	movs	r2, #8
 800d58a:	9806      	ldr	r0, [sp, #24]
 800d58c:	1cb1      	adds	r1, r6, #2
 800d58e:	f002 fe7b 	bl	8010288 <memcmp>
 800d592:	2800      	cmp	r0, #0
 800d594:	d120      	bne.n	800d5d8 <rfalNfcfPollerCheck+0x104>
            (*rcvdLen < (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_ST2_POS))            )
 800d596:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d598:	881a      	ldrh	r2, [r3, #0]
        if( (RFAL_BYTECMP( nfcid2, &checkRes[RFAL_NFCF_CMD_LEN], RFAL_NFCF_NFCID2_LEN ) != 0) || 
 800d59a:	2a0a      	cmp	r2, #10
 800d59c:	d91c      	bls.n	800d5d8 <rfalNfcfPollerCheck+0x104>
        {
            ret = RFAL_ERR_PROTO;
        }
        /* Check for a valid response */
        else if( (checkRes[RFAL_NFCF_CMD_POS] != (uint8_t)RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES) ||
 800d59e:	7873      	ldrb	r3, [r6, #1]
 800d5a0:	2b07      	cmp	r3, #7
 800d5a2:	d11b      	bne.n	800d5dc <rfalNfcfPollerCheck+0x108>
 800d5a4:	7ab3      	ldrb	r3, [r6, #10]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d118      	bne.n	800d5dc <rfalNfcfPollerCheck+0x108>
                 (checkRes[RFAL_NFCF_CHECKUPDATE_RES_ST1_POS] != RFAL_NFCF_STATUS_FLAG_SUCCESS)      || 
 800d5aa:	7af3      	ldrb	r3, [r6, #11]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d115      	bne.n	800d5dc <rfalNfcfPollerCheck+0x108>
            ret = RFAL_ERR_REQUEST;
        }
        /* CHECK succesfull, remove header */
        else
        {
            (*rcvdLen) -= (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CHECKUPDATE_RES_NOB_POS);
 800d5b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d5b2:	3a0c      	subs	r2, #12
 800d5b4:	b292      	uxth	r2, r2
 800d5b6:	801a      	strh	r2, [r3, #0]
            
            if( *rcvdLen > 0U )
 800d5b8:	2a00      	cmp	r2, #0
 800d5ba:	d004      	beq.n	800d5c6 <rfalNfcfPollerCheck+0xf2>
            {
                RFAL_MEMMOVE( rxBuf, &checkRes[RFAL_NFCF_CHECKUPDATE_RES_NOB_POS], (*rcvdLen) );
 800d5bc:	0031      	movs	r1, r6
 800d5be:	0030      	movs	r0, r6
 800d5c0:	310c      	adds	r1, #12
 800d5c2:	f002 fe6f 	bl	80102a4 <memmove>
            }
        }
    }
    
    return ret;
}
 800d5c6:	0020      	movs	r0, r4
 800d5c8:	b01f      	add	sp, #124	@ 0x7c
 800d5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            txBuf[msgIt++] = (uint8_t)((servBlock->blockList[i].blockNum >> 8U) & 0xFFU);
 800d5cc:	885c      	ldrh	r4, [r3, #2]
 800d5ce:	3103      	adds	r1, #3
 800d5d0:	0a24      	lsrs	r4, r4, #8
 800d5d2:	b2c9      	uxtb	r1, r1
 800d5d4:	5484      	strb	r4, [r0, r2]
 800d5d6:	e7c8      	b.n	800d56a <rfalNfcfPollerCheck+0x96>
            ret = RFAL_ERR_PROTO;
 800d5d8:	240b      	movs	r4, #11
 800d5da:	e7f4      	b.n	800d5c6 <rfalNfcfPollerCheck+0xf2>
            ret = RFAL_ERR_REQUEST;
 800d5dc:	2405      	movs	r4, #5
 800d5de:	e7f2      	b.n	800d5c6 <rfalNfcfPollerCheck+0xf2>
 800d5e0:	02000010 	.word	0x02000010

0800d5e4 <rfalNfcvPollerInitialize>:
/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
    ReturnCode ret;
            
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 800d5e4:	22ec      	movs	r2, #236	@ 0xec
{
 800d5e6:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 800d5e8:	0011      	movs	r1, r2
 800d5ea:	2007      	movs	r0, #7
 800d5ec:	f7f4 fb42 	bl	8001c74 <rfalSetMode>
 800d5f0:	1e04      	subs	r4, r0, #0
 800d5f2:	d10b      	bne.n	800d60c <rfalNfcvPollerInitialize+0x28>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 800d5f4:	f7f4 fc48 	bl	8001e88 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 800d5f8:	4805      	ldr	r0, [pc, #20]	@ (800d610 <rfalNfcvPollerInitialize+0x2c>)
 800d5fa:	f7f4 fc77 	bl	8001eec <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 800d5fe:	4805      	ldr	r0, [pc, #20]	@ (800d614 <rfalNfcvPollerInitialize+0x30>)
 800d600:	f7f4 fc6a 	bl	8001ed8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 800d604:	2083      	movs	r0, #131	@ 0x83
 800d606:	0140      	lsls	r0, r0, #5
 800d608:	f7f4 fc54 	bl	8001eb4 <rfalSetFDTPoll>
    
    return RFAL_ERR_NONE;
}
 800d60c:	0020      	movs	r0, r4
 800d60e:	bd10      	pop	{r4, pc}
 800d610:	000108d8 	.word	0x000108d8
 800d614:	000010d6 	.word	0x000010d6

0800d618 <rfalNfcvPollerInventory>:
    return ret;
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 800d618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d61a:	b087      	sub	sp, #28
 800d61c:	000c      	movs	r4, r1
 800d61e:	001d      	movs	r5, r3
 800d620:	1e11      	subs	r1, r2, #0
 800d622:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 800d624:	d102      	bne.n	800d62c <rfalNfcvPollerInventory+0x14>
    {
        return RFAL_ERR_PARAM;
 800d626:	2307      	movs	r3, #7
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 800d628:	2c00      	cmp	r4, #0
 800d62a:	d135      	bne.n	800d698 <rfalNfcvPollerInventory+0x80>
        return RFAL_ERR_PARAM;
 800d62c:	2307      	movs	r3, #7
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 800d62e:	2d00      	cmp	r5, #0
 800d630:	d032      	beq.n	800d698 <rfalNfcvPollerInventory+0x80>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 800d632:	3b01      	subs	r3, #1
 800d634:	ae03      	add	r6, sp, #12
 800d636:	4303      	orrs	r3, r0
 800d638:	7033      	strb	r3, [r6, #0]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 800d63a:	2301      	movs	r3, #1
 800d63c:	7073      	strb	r3, [r6, #1]
    invReq.MASK_LEN = (uint8_t)RFAL_MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 800d63e:	333b      	adds	r3, #59	@ 0x3b
 800d640:	2820      	cmp	r0, #32
 800d642:	d100      	bne.n	800d646 <rfalNfcvPollerInventory+0x2e>
 800d644:	3304      	adds	r3, #4
 800d646:	429c      	cmp	r4, r3
 800d648:	d303      	bcc.n	800d652 <rfalNfcvPollerInventory+0x3a>
 800d64a:	243c      	movs	r4, #60	@ 0x3c
 800d64c:	2820      	cmp	r0, #32
 800d64e:	d100      	bne.n	800d652 <rfalNfcvPollerInventory+0x3a>
 800d650:	3404      	adds	r4, #4
 800d652:	70b4      	strb	r4, [r6, #2]
    
    if( (rfalConvBitsToBytes(invReq.MASK_LEN) > 0U) && (maskVal != NULL) )  /* MISRA 21.18 & 1.3 */
 800d654:	3407      	adds	r4, #7
 800d656:	b2e4      	uxtb	r4, r4
 800d658:	08e4      	lsrs	r4, r4, #3
 800d65a:	d006      	beq.n	800d66a <rfalNfcvPollerInventory+0x52>
 800d65c:	2900      	cmp	r1, #0
 800d65e:	d004      	beq.n	800d66a <rfalNfcvPollerInventory+0x52>
    {
        RFAL_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 800d660:	200f      	movs	r0, #15
 800d662:	0022      	movs	r2, r4
 800d664:	4468      	add	r0, sp
 800d666:	f002 fe63 	bl	8010330 <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 800d66a:	1ce1      	adds	r1, r4, #3
 800d66c:	240a      	movs	r4, #10
 800d66e:	446c      	add	r4, sp
 800d670:	230c      	movs	r3, #12
 800d672:	002a      	movs	r2, r5
 800d674:	0030      	movs	r0, r6
 800d676:	9400      	str	r4, [sp, #0]
 800d678:	f7f6 f958 	bl	800392c <rfalISO15693TransceiveAnticollisionFrame>
 800d67c:	0003      	movs	r3, r0
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 800d67e:	2f00      	cmp	r7, #0
 800d680:	d001      	beq.n	800d686 <rfalNfcvPollerInventory+0x6e>
    {
        *rcvdLen = rxLen;
 800d682:	8822      	ldrh	r2, [r4, #0]
 800d684:	803a      	strh	r2, [r7, #0]
    }
    
    if( ret == RFAL_ERR_NONE )
 800d686:	2800      	cmp	r0, #0
 800d688:	d106      	bne.n	800d698 <rfalNfcvPollerInventory+0x80>
    {
        /* Check for valid INVENTORY_RES   Digital 2.2  9.6.2.1 & 9.6.2.3 */
        if( !rfalNfcvCheckInvRes( invRes->RES_FLAG, rxLen ) )
 800d68a:	8822      	ldrh	r2, [r4, #0]
 800d68c:	2a60      	cmp	r2, #96	@ 0x60
 800d68e:	d102      	bne.n	800d696 <rfalNfcvPollerInventory+0x7e>
 800d690:	782a      	ldrb	r2, [r5, #0]
 800d692:	2a00      	cmp	r2, #0
 800d694:	d000      	beq.n	800d698 <rfalNfcvPollerInventory+0x80>
        {
            return RFAL_ERR_PROTO;
 800d696:	230b      	movs	r3, #11
        }
    }
    
    return ret;
}
 800d698:	0018      	movs	r0, r3
 800d69a:	b007      	add	sp, #28
 800d69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d6a0 <rfalNfcvPollerCheckPresence>:
{
 800d6a0:	b507      	push	{r0, r1, r2, lr}
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 800d6a2:	2100      	movs	r1, #0
{
 800d6a4:	0003      	movs	r3, r0
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 800d6a6:	000a      	movs	r2, r1
 800d6a8:	2020      	movs	r0, #32
 800d6aa:	9100      	str	r1, [sp, #0]
 800d6ac:	f7ff ffb4 	bl	800d618 <rfalNfcvPollerInventory>
    if( (ret == RFAL_ERR_RF_COLLISION) || (ret == RFAL_ERR_CRC)  || 
 800d6b0:	281d      	cmp	r0, #29
 800d6b2:	d805      	bhi.n	800d6c0 <rfalNfcvPollerCheckPresence+0x20>
 800d6b4:	4b03      	ldr	r3, [pc, #12]	@ (800d6c4 <rfalNfcvPollerCheckPresence+0x24>)
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	40c3      	lsrs	r3, r0
 800d6ba:	4013      	ands	r3, r2
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	4018      	ands	r0, r3
}
 800d6c0:	bd0e      	pop	{r1, r2, r3, pc}
 800d6c2:	46c0      	nop			@ (mov r8, r8)
 800d6c4:	20200a00 	.word	0x20200a00

0800d6c8 <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 800d6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ca:	b0b1      	sub	sp, #196	@ 0xc4
 800d6cc:	0004      	movs	r4, r0
 800d6ce:	001f      	movs	r7, r3
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
    {
        return RFAL_ERR_PARAM;
 800d6d0:	2007      	movs	r0, #7
{
 800d6d2:	9104      	str	r1, [sp, #16]
 800d6d4:	9202      	str	r2, [sp, #8]
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 800d6d6:	2a00      	cmp	r2, #0
 800d6d8:	d01d      	beq.n	800d716 <rfalNfcvPollerCollisionResolution+0x4e>
 800d6da:	2f00      	cmp	r7, #0
 800d6dc:	d01b      	beq.n	800d716 <rfalNfcvPollerCollisionResolution+0x4e>
    }

    /* Initialize parameters */
    *devCnt = 0;
 800d6de:	2500      	movs	r5, #0
    colIt         = 0;
    colCnt        = 0;
    colPending    = false;
    RFAL_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 800d6e0:	2290      	movs	r2, #144	@ 0x90
 800d6e2:	0029      	movs	r1, r5
    *devCnt = 0;
 800d6e4:	703d      	strb	r5, [r7, #0]
    RFAL_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 800d6e6:	a80c      	add	r0, sp, #48	@ 0x30
 800d6e8:	f002 fdee 	bl	80102c8 <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 800d6ec:	9b04      	ldr	r3, [sp, #16]
 800d6ee:	42ab      	cmp	r3, r5
 800d6f0:	d005      	beq.n	800d6fe <rfalNfcvPollerCollisionResolution+0x36>
    {
        RFAL_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 800d6f2:	220d      	movs	r2, #13
 800d6f4:	0029      	movs	r1, r5
 800d6f6:	435a      	muls	r2, r3
 800d6f8:	9802      	ldr	r0, [sp, #8]
 800d6fa:	f002 fde5 	bl	80102c8 <memset>
    }

    RFAL_NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 800d6fe:	2c00      	cmp	r4, #0
 800d700:	d11a      	bne.n	800d738 <rfalNfcvPollerCollisionResolution+0x70>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.1  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 800d702:	0022      	movs	r2, r4
 800d704:	0021      	movs	r1, r4
 800d706:	2020      	movs	r0, #32
 800d708:	9b02      	ldr	r3, [sp, #8]
 800d70a:	9400      	str	r4, [sp, #0]
 800d70c:	f7ff ff84 	bl	800d618 <rfalNfcvPollerInventory>

        /* Exit if no device found                              Activity 2.1  9.3.7.2 (Symbol 1)  */
        /* Exit if no correct frame (no Transmission Error)     Activity 2.1  9.3.7.3 (Symbol 2)  */
        if( (ret == RFAL_ERR_TIMEOUT) || ((ret == RFAL_ERR_PROTO)) ) 
 800d710:	2804      	cmp	r0, #4
 800d712:	d102      	bne.n	800d71a <rfalNfcvPollerCollisionResolution+0x52>
        {
            return RFAL_ERR_NONE;
 800d714:	2000      	movs	r0, #0
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
        colIt++;
    } while( colIt < colCnt );                     /* Collisions found loop */
    
    return RFAL_ERR_NONE;
}
 800d716:	b031      	add	sp, #196	@ 0xc4
 800d718:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( (ret == RFAL_ERR_TIMEOUT) || ((ret == RFAL_ERR_PROTO)) ) 
 800d71a:	280b      	cmp	r0, #11
 800d71c:	d0fa      	beq.n	800d714 <rfalNfcvPollerCollisionResolution+0x4c>
        if( ret == RFAL_ERR_NONE )
 800d71e:	2800      	cmp	r0, #0
 800d720:	d103      	bne.n	800d72a <rfalNfcvPollerCollisionResolution+0x62>
            (*devCnt)++;
 800d722:	783b      	ldrb	r3, [r7, #0]
 800d724:	3301      	adds	r3, #1
 800d726:	703b      	strb	r3, [r7, #0]
            return RFAL_ERR_NONE;
 800d728:	e7f4      	b.n	800d714 <rfalNfcvPollerCollisionResolution+0x4c>
        if( devLimit == 0U )
 800d72a:	9b04      	ldr	r3, [sp, #16]
            return RFAL_ERR_RF_COLLISION;
 800d72c:	201d      	movs	r0, #29
        if( devLimit == 0U )
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d0f1      	beq.n	800d716 <rfalNfcvPollerCollisionResolution+0x4e>
        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800d732:	3819      	subs	r0, #25
 800d734:	f7f7 f9a8 	bl	8004a88 <HAL_Delay>
{
 800d738:	2301      	movs	r3, #1
 800d73a:	9303      	str	r3, [sp, #12]
 800d73c:	2300      	movs	r3, #0
 800d73e:	ad0c      	add	r5, sp, #48	@ 0x30
 800d740:	9305      	str	r3, [sp, #20]
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 800d742:	2600      	movs	r6, #0
 800d744:	1c6b      	adds	r3, r5, #1
 800d746:	9307      	str	r3, [sp, #28]
 800d748:	220d      	movs	r2, #13
 800d74a:	783b      	ldrb	r3, [r7, #0]
 800d74c:	4353      	muls	r3, r2
 800d74e:	9a02      	ldr	r2, [sp, #8]
            if( slotNum == 0U )
 800d750:	2e00      	cmp	r6, #0
 800d752:	d139      	bne.n	800d7c8 <rfalNfcvPollerCollisionResolution+0x100>
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 800d754:	18d3      	adds	r3, r2, r3
 800d756:	220e      	movs	r2, #14
 800d758:	a808      	add	r0, sp, #32
 800d75a:	1812      	adds	r2, r2, r0
 800d75c:	7829      	ldrb	r1, [r5, #0]
 800d75e:	0030      	movs	r0, r6
 800d760:	9200      	str	r2, [sp, #0]
 800d762:	9a07      	ldr	r2, [sp, #28]
 800d764:	f7ff ff58 	bl	800d618 <rfalNfcvPollerInventory>
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 800d768:	0004      	movs	r4, r0
            if( ret != RFAL_ERR_TIMEOUT )
 800d76a:	2804      	cmp	r0, #4
 800d76c:	d066      	beq.n	800d83c <rfalNfcvPollerCollisionResolution+0x174>
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800d76e:	230e      	movs	r3, #14
 800d770:	aa08      	add	r2, sp, #32
 800d772:	189b      	adds	r3, r3, r2
 800d774:	881b      	ldrh	r3, [r3, #0]
 800d776:	2b5f      	cmp	r3, #95	@ 0x5f
 800d778:	d802      	bhi.n	800d780 <rfalNfcvPollerCollisionResolution+0xb8>
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800d77a:	2004      	movs	r0, #4
 800d77c:	f7f7 f984 	bl	8004a88 <HAL_Delay>
                if( (ret == RFAL_ERR_NONE) || (ret == RFAL_ERR_PROTO) )
 800d780:	2c00      	cmp	r4, #0
 800d782:	d001      	beq.n	800d788 <rfalNfcvPollerCollisionResolution+0xc0>
 800d784:	2c0b      	cmp	r4, #11
 800d786:	d127      	bne.n	800d7d8 <rfalNfcvPollerCollisionResolution+0x110>
                    if( rfalNfcvCheckInvRes( nfcvDevList[(*devCnt)].InvRes.RES_FLAG, rcvdLen ) )
 800d788:	230e      	movs	r3, #14
 800d78a:	aa08      	add	r2, sp, #32
 800d78c:	189b      	adds	r3, r3, r2
 800d78e:	881b      	ldrh	r3, [r3, #0]
 800d790:	2b60      	cmp	r3, #96	@ 0x60
 800d792:	d108      	bne.n	800d7a6 <rfalNfcvPollerCollisionResolution+0xde>
 800d794:	220d      	movs	r2, #13
 800d796:	783b      	ldrb	r3, [r7, #0]
 800d798:	9902      	ldr	r1, [sp, #8]
 800d79a:	435a      	muls	r2, r3
 800d79c:	5c52      	ldrb	r2, [r2, r1]
 800d79e:	2a00      	cmp	r2, #0
 800d7a0:	d101      	bne.n	800d7a6 <rfalNfcvPollerCollisionResolution+0xde>
                        (*devCnt)++;
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	703b      	strb	r3, [r7, #0]
            if( *devCnt >= devLimit )
 800d7a6:	783b      	ldrb	r3, [r7, #0]
 800d7a8:	9a04      	ldr	r2, [sp, #16]
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d2b2      	bcs.n	800d714 <rfalNfcvPollerCollisionResolution+0x4c>
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 800d7ae:	3601      	adds	r6, #1
 800d7b0:	2e10      	cmp	r6, #16
 800d7b2:	d1c9      	bne.n	800d748 <rfalNfcvPollerCollisionResolution+0x80>
        colIt++;
 800d7b4:	9e05      	ldr	r6, [sp, #20]
    } while( colIt < colCnt );                     /* Collisions found loop */
 800d7b6:	3509      	adds	r5, #9
        colIt++;
 800d7b8:	3601      	adds	r6, #1
 800d7ba:	b2f3      	uxtb	r3, r6
 800d7bc:	9305      	str	r3, [sp, #20]
    } while( colIt < colCnt );                     /* Collisions found loop */
 800d7be:	9a05      	ldr	r2, [sp, #20]
 800d7c0:	9b03      	ldr	r3, [sp, #12]
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d8bd      	bhi.n	800d742 <rfalNfcvPollerCollisionResolution+0x7a>
 800d7c6:	e7a5      	b.n	800d714 <rfalNfcvPollerCollisionResolution+0x4c>
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 800d7c8:	18d0      	adds	r0, r2, r3
 800d7ca:	220e      	movs	r2, #14
 800d7cc:	ab08      	add	r3, sp, #32
 800d7ce:	210c      	movs	r1, #12
 800d7d0:	18d2      	adds	r2, r2, r3
 800d7d2:	f7f6 f91f 	bl	8003a14 <rfalISO15693TransceiveEOFAnticollision>
 800d7d6:	e7c7      	b.n	800d768 <rfalNfcvPollerCollisionResolution+0xa0>
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 800d7d8:	9b03      	ldr	r3, [sp, #12]
 800d7da:	2b0f      	cmp	r3, #15
 800d7dc:	d8e3      	bhi.n	800d7a6 <rfalNfcvPollerCollisionResolution+0xde>
                        RFAL_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 800d7de:	2309      	movs	r3, #9
 800d7e0:	9a03      	ldr	r2, [sp, #12]
 800d7e2:	ac0c      	add	r4, sp, #48	@ 0x30
 800d7e4:	4353      	muls	r3, r2
 800d7e6:	1c58      	adds	r0, r3, #1
 800d7e8:	2208      	movs	r2, #8
 800d7ea:	9907      	ldr	r1, [sp, #28]
 800d7ec:	1820      	adds	r0, r4, r0
 800d7ee:	9306      	str	r3, [sp, #24]
 800d7f0:	f002 fd9e 	bl	8010330 <memcpy>
                        colPos = colFound[colIt].maskLen;
 800d7f4:	782a      	ldrb	r2, [r5, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 800d7f6:	9b06      	ldr	r3, [sp, #24]
 800d7f8:	08d0      	lsrs	r0, r2, #3
 800d7fa:	18e3      	adds	r3, r4, r3
 800d7fc:	9308      	str	r3, [sp, #32]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 800d7fe:	2107      	movs	r1, #7
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 800d800:	181b      	adds	r3, r3, r0
 800d802:	9309      	str	r3, [sp, #36]	@ 0x24
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 800d804:	2301      	movs	r3, #1
 800d806:	4011      	ands	r1, r2
 800d808:	408b      	lsls	r3, r1
 800d80a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d80c:	3b01      	subs	r3, #1
 800d80e:	7840      	ldrb	r0, [r0, #1]
 800d810:	4003      	ands	r3, r0
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 800d812:	0030      	movs	r0, r6
 800d814:	4088      	lsls	r0, r1
 800d816:	4303      	orrs	r3, r0
 800d818:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d81a:	7043      	strb	r3, [r0, #1]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 800d81c:	9b08      	ldr	r3, [sp, #32]
 800d81e:	08d0      	lsrs	r0, r2, #3
 800d820:	18c0      	adds	r0, r0, r3
 800d822:	2308      	movs	r3, #8
 800d824:	1a59      	subs	r1, r3, r1
 800d826:	0033      	movs	r3, r6
 800d828:	40cb      	lsrs	r3, r1
 800d82a:	7083      	strb	r3, [r0, #2]
                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 800d82c:	9b06      	ldr	r3, [sp, #24]
 800d82e:	3204      	adds	r2, #4
 800d830:	551a      	strb	r2, [r3, r4]
                        colCnt++;
 800d832:	9b03      	ldr	r3, [sp, #12]
 800d834:	3301      	adds	r3, #1
 800d836:	b2db      	uxtb	r3, r3
 800d838:	9303      	str	r3, [sp, #12]
 800d83a:	e7b4      	b.n	800d7a6 <rfalNfcvPollerCollisionResolution+0xde>
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800d83c:	f7f7 f924 	bl	8004a88 <HAL_Delay>
 800d840:	e7b1      	b.n	800d7a6 <rfalNfcvPollerCollisionResolution+0xde>
	...

0800d844 <rfalNfcvPollerTransceiveReq>:
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_EXTENDED_GET_SYS_INFO, flags, requestField, uid, NULL, 0U, rxBuf, rxBufLen, rcvLen ); 
}

/*******************************************************************************/
ReturnCode rfalNfcvPollerTransceiveReq( uint8_t cmd, uint8_t flags, uint8_t param, const uint8_t* uid, const uint8_t *data, uint16_t dataLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
{
 800d844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d846:	b097      	sub	sp, #92	@ 0x5c
 800d848:	9306      	str	r3, [sp, #24]
 800d84a:	ab1c      	add	r3, sp, #112	@ 0x70
 800d84c:	0014      	movs	r4, r2
 800d84e:	cb04      	ldmia	r3!, {r2}
 800d850:	0007      	movs	r7, r0
 800d852:	881e      	ldrh	r6, [r3, #0]
 800d854:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d856:	881b      	ldrh	r3, [r3, #0]
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
    {
        return RFAL_ERR_PARAM;
 800d858:	2507      	movs	r5, #7
{
 800d85a:	9309      	str	r3, [sp, #36]	@ 0x24
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 800d85c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
{
 800d85e:	9105      	str	r1, [sp, #20]
 800d860:	9208      	str	r2, [sp, #32]
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 800d862:	2b00      	cmp	r3, #0
 800d864:	d100      	bne.n	800d868 <rfalNfcvPollerTransceiveReq+0x24>
 800d866:	e098      	b.n	800d99a <rfalNfcvPollerTransceiveReq+0x156>
 800d868:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d100      	bne.n	800d870 <rfalNfcvPollerTransceiveReq+0x2c>
 800d86e:	e094      	b.n	800d99a <rfalNfcvPollerTransceiveReq+0x156>
 800d870:	2e00      	cmp	r6, #0
 800d872:	d002      	beq.n	800d87a <rfalNfcvPollerTransceiveReq+0x36>
 800d874:	2a00      	cmp	r2, #0
 800d876:	d100      	bne.n	800d87a <rfalNfcvPollerTransceiveReq+0x36>
 800d878:	e08f      	b.n	800d99a <rfalNfcvPollerTransceiveReq+0x156>
        (dataLen > ((uid != NULL) ? RFAL_NFCV_MAX_GEN_DATA_LEN : (RFAL_NFCV_MAX_GEN_DATA_LEN - RFAL_NFCV_UID_LEN)))  )
 800d87a:	9a06      	ldr	r2, [sp, #24]
 800d87c:	2321      	movs	r3, #33	@ 0x21
 800d87e:	2a00      	cmp	r2, #0
 800d880:	d000      	beq.n	800d884 <rfalNfcvPollerTransceiveReq+0x40>
 800d882:	3308      	adds	r3, #8
        return RFAL_ERR_PARAM;
 800d884:	2507      	movs	r5, #7
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 800d886:	429e      	cmp	r6, r3
 800d888:	d900      	bls.n	800d88c <rfalNfcvPollerTransceiveReq+0x48>
 800d88a:	e086      	b.n	800d99a <rfalNfcvPollerTransceiveReq+0x156>
    }
    
    
    /* Check if the command is an ST's Fast command */
    if( (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_SINGLE_BLOCK)    || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK)    || 
 800d88c:	003a      	movs	r2, r7
    if( (rxBuf == NULL) || (rcvLen == NULL) || ((dataLen > 0U) && (data == NULL))                                  || 
 800d88e:	2300      	movs	r3, #0
 800d890:	3240      	adds	r2, #64	@ 0x40
 800d892:	b2d2      	uxtb	r2, r2
 800d894:	9307      	str	r3, [sp, #28]
 800d896:	2a0e      	cmp	r2, #14
 800d898:	d811      	bhi.n	800d8be <rfalNfcvPollerTransceiveReq+0x7a>
 800d89a:	4b44      	ldr	r3, [pc, #272]	@ (800d9ac <rfalNfcvPollerTransceiveReq+0x168>)
 800d89c:	40d3      	lsrs	r3, r2
 800d89e:	2201      	movs	r2, #1
 800d8a0:	0019      	movs	r1, r3
 800d8a2:	4011      	ands	r1, r2
 800d8a4:	9107      	str	r1, [sp, #28]
 800d8a6:	4213      	tst	r3, r2
 800d8a8:	d009      	beq.n	800d8be <rfalNfcvPollerTransceiveReq+0x7a>
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_MESSAGE)        || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE_LENGTH)           ||
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_MESSAGE)         || (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_READ_DYN_CONFIGURATION)        ||               
        (cmd == (uint8_t)RFAL_NFCV_CMD_FAST_WRITE_DYN_CONFIGURATION) )
    {
        /* Store current Rx bit rate and move to fast mode */
        rfalGetBitRate( NULL, &rxBR );
 800d8aa:	2113      	movs	r1, #19
 800d8ac:	ab06      	add	r3, sp, #24
 800d8ae:	18c9      	adds	r1, r1, r3
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	f7f4 fad3 	bl	8001e5c <rfalGetBitRate>
        rfalSetBitRate( RFAL_BR_KEEP, RFAL_BR_52p97 );
 800d8b6:	21eb      	movs	r1, #235	@ 0xeb
 800d8b8:	20ff      	movs	r0, #255	@ 0xff
 800d8ba:	f7f4 f8c3 	bl	8001a44 <rfalSetBitRate>
        fastMode = true;
    }
    
    
    /* Compute Request Command */
    req.REQ_FLAG  = (uint8_t)(flags & (~((uint32_t)RFAL_NFCV_REQ_FLAG_ADDRESS)));
 800d8be:	2320      	movs	r3, #32
 800d8c0:	9a05      	ldr	r2, [sp, #20]
 800d8c2:	a80b      	add	r0, sp, #44	@ 0x2c
 800d8c4:	439a      	bics	r2, r3
 800d8c6:	7002      	strb	r2, [r0, #0]
    req.CMD       = cmd;
 800d8c8:	7047      	strb	r7, [r0, #1]
    
    /* Prepend parameter on ceratin proprietary requests: IC Manuf, Parameters */
    if( param != RFAL_NFCV_PARAM_SKIP )
 800d8ca:	2c00      	cmp	r4, #0
 800d8cc:	d001      	beq.n	800d8d2 <rfalNfcvPollerTransceiveReq+0x8e>
    {
        req.payload.data[msgIt++] = param;
 800d8ce:	7084      	strb	r4, [r0, #2]
 800d8d0:	2401      	movs	r4, #1
    }
    
    /* Check if Request is to be sent in Addressed mode. Select mode flag shall be set by user */
    if( uid != NULL )
 800d8d2:	9b06      	ldr	r3, [sp, #24]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00b      	beq.n	800d8f0 <rfalNfcvPollerTransceiveReq+0xac>
    {
        req.REQ_FLAG |= (uint8_t)RFAL_NFCV_REQ_FLAG_ADDRESS;
 800d8d8:	2320      	movs	r3, #32
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	7003      	strb	r3, [r0, #0]
        RFAL_MEMCPY( &req.payload.data[msgIt], uid, RFAL_NFCV_UID_LEN );
 800d8de:	1ca3      	adds	r3, r4, #2
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	2208      	movs	r2, #8
 800d8e4:	9906      	ldr	r1, [sp, #24]
 800d8e6:	18c0      	adds	r0, r0, r3
 800d8e8:	f002 fd22 	bl	8010330 <memcpy>
        msgIt += RFAL_NFCV_UID_LEN;
 800d8ec:	3408      	adds	r4, #8
 800d8ee:	b2e4      	uxtb	r4, r4
    }
    
    if( dataLen > 0U )
 800d8f0:	2e00      	cmp	r6, #0
 800d8f2:	d009      	beq.n	800d908 <rfalNfcvPollerTransceiveReq+0xc4>
    {
        RFAL_MEMCPY( &req.payload.data[msgIt], data, dataLen);
 800d8f4:	1ca3      	adds	r3, r4, #2
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d8fa:	18d0      	adds	r0, r2, r3
 800d8fc:	9908      	ldr	r1, [sp, #32]
 800d8fe:	0032      	movs	r2, r6
 800d900:	f002 fd16 	bl	8010330 <memcpy>
        msgIt += (uint8_t)dataLen;
 800d904:	19a4      	adds	r4, r4, r6
 800d906:	b2e4      	uxtb	r4, r4
    }
    
    
    /* If the Option Flag | Special Frame is set in certain commands an EOF needs to be sent whithin  FDTV,EOF to retrieve the VICC response     Digital 2.3  9.7.4    ISO15693-3 2009  10.4.2 & 10.4.3 & 10.4.5 */
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 800d908:	2340      	movs	r3, #64	@ 0x40
 800d90a:	9e05      	ldr	r6, [sp, #20]
 800d90c:	9a05      	ldr	r2, [sp, #20]
        specialFrame = true;
    }
    
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_NFCV_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, (specialFrame ? RFAL_NFCV_FDT_EOF : RFAL_NFCV_FDT_MAX) );
 800d90e:	3402      	adds	r4, #2
 800d910:	b2e1      	uxtb	r1, r4
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 800d912:	401e      	ands	r6, r3
 800d914:	421a      	tst	r2, r3
 800d916:	d044      	beq.n	800d9a2 <rfalNfcvPollerTransceiveReq+0x15e>
 800d918:	003b      	movs	r3, r7
 800d91a:	3b21      	subs	r3, #33	@ 0x21
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b13      	cmp	r3, #19
 800d920:	d83e      	bhi.n	800d9a0 <rfalNfcvPollerTransceiveReq+0x15c>
 800d922:	4e23      	ldr	r6, [pc, #140]	@ (800d9b0 <rfalNfcvPollerTransceiveReq+0x16c>)
 800d924:	4a23      	ldr	r2, [pc, #140]	@ (800d9b4 <rfalNfcvPollerTransceiveReq+0x170>)
 800d926:	40de      	lsrs	r6, r3
 800d928:	2301      	movs	r3, #1
 800d92a:	401e      	ands	r6, r3
 800d92c:	1e73      	subs	r3, r6, #1
 800d92e:	4013      	ands	r3, r2
 800d930:	4a21      	ldr	r2, [pc, #132]	@ (800d9b8 <rfalNfcvPollerTransceiveReq+0x174>)
 800d932:	189b      	adds	r3, r3, r2
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_NFCV_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, (specialFrame ? RFAL_NFCV_FDT_EOF : RFAL_NFCV_FDT_MAX) );
 800d934:	9302      	str	r3, [sp, #8]
 800d936:	2300      	movs	r3, #0
 800d938:	9301      	str	r3, [sp, #4]
 800d93a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d93c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800d93e:	9300      	str	r3, [sp, #0]
 800d940:	a80b      	add	r0, sp, #44	@ 0x2c
 800d942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d944:	f7f5 ff0a 	bl	800375c <rfalTransceiveBlockingTxRx>
 800d948:	0005      	movs	r5, r0
    
    /* If the Option Flag | Special Frame is set in certain commands an EOF needs to be sent whithin  FDTV,EOF to retrieve the VICC response     Digital 2.3  9.7.4    ISO15693-3 2009  10.4.2 & 10.4.3 & 10.4.5 */
    if( specialFrame )
 800d94a:	2e00      	cmp	r6, #0
 800d94c:	d008      	beq.n	800d960 <rfalNfcvPollerTransceiveReq+0x11c>
    {
        ret = rfalISO15693TransceiveEOF( rxBuf, (uint8_t)rxBufLen, rcvLen );
 800d94e:	2224      	movs	r2, #36	@ 0x24
 800d950:	466b      	mov	r3, sp
 800d952:	189b      	adds	r3, r3, r2
 800d954:	7819      	ldrb	r1, [r3, #0]
 800d956:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d958:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800d95a:	f7f5 ff15 	bl	8003788 <rfalISO15693TransceiveEOF>
 800d95e:	0005      	movs	r5, r0
    }

    /* Restore Rx BitRate */
    if( fastMode )
 800d960:	9b07      	ldr	r3, [sp, #28]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d006      	beq.n	800d974 <rfalNfcvPollerTransceiveReq+0x130>
    {
        rfalSetBitRate( RFAL_BR_KEEP, rxBR );
 800d966:	2313      	movs	r3, #19
 800d968:	aa06      	add	r2, sp, #24
 800d96a:	189b      	adds	r3, r3, r2
 800d96c:	20ff      	movs	r0, #255	@ 0xff
 800d96e:	7819      	ldrb	r1, [r3, #0]
 800d970:	f7f4 f868 	bl	8001a44 <rfalSetBitRate>
    }
    
    if( ret != RFAL_ERR_NONE )
 800d974:	2d00      	cmp	r5, #0
 800d976:	d110      	bne.n	800d99a <rfalNfcvPollerTransceiveReq+0x156>
    {
        return ret;
    }
    
    /* Check if the response minimum length has been received */
    if( (*rcvLen) < (uint8_t)RFAL_NFCV_FLAG_LEN )
 800d978:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d97a:	881b      	ldrh	r3, [r3, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d012      	beq.n	800d9a6 <rfalNfcvPollerTransceiveReq+0x162>
    {
        return RFAL_ERR_PROTO;
    }
    
    /* Check if an error has been signalled */
    if( (rxBuf[RFAL_NFCV_FLAG_POS] & (uint8_t)RFAL_NFCV_RES_FLAG_ERROR) != 0U )
 800d980:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	07db      	lsls	r3, r3, #31
 800d986:	d508      	bpl.n	800d99a <rfalNfcvPollerTransceiveReq+0x156>
    switch(err)
 800d988:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
    {
        return rfalNfcvParseError( rxBuf[RFAL_NFCV_DATASTART_POS] );
 800d98a:	3505      	adds	r5, #5
 800d98c:	785b      	ldrb	r3, [r3, #1]
 800d98e:	3b01      	subs	r3, #1
 800d990:	b2db      	uxtb	r3, r3
 800d992:	2b12      	cmp	r3, #18
 800d994:	d801      	bhi.n	800d99a <rfalNfcvPollerTransceiveReq+0x156>
 800d996:	4a09      	ldr	r2, [pc, #36]	@ (800d9bc <rfalNfcvPollerTransceiveReq+0x178>)
 800d998:	5cd5      	ldrb	r5, [r2, r3]
    }
    
    return RFAL_ERR_NONE;
}
 800d99a:	0028      	movs	r0, r5
 800d99c:	b017      	add	sp, #92	@ 0x5c
 800d99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ((flags & (uint8_t)RFAL_NFCV_REQ_FLAG_OPTION) != 0U) && ((cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK) || (cmd == (uint8_t)RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS)        ||
 800d9a0:	2600      	movs	r6, #0
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, (RFAL_NFCV_CMD_LEN + RFAL_NFCV_FLAG_LEN +(uint16_t)msgIt), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, (specialFrame ? RFAL_NFCV_FDT_EOF : RFAL_NFCV_FDT_MAX) );
 800d9a2:	4b07      	ldr	r3, [pc, #28]	@ (800d9c0 <rfalNfcvPollerTransceiveReq+0x17c>)
 800d9a4:	e7c6      	b.n	800d934 <rfalNfcvPollerTransceiveReq+0xf0>
        return RFAL_ERR_PROTO;
 800d9a6:	250b      	movs	r5, #11
 800d9a8:	e7f7      	b.n	800d99a <rfalNfcvPollerTransceiveReq+0x156>
 800d9aa:	46c0      	nop			@ (mov r8, r8)
 800d9ac:	00007c39 	.word	0x00007c39
 800d9b0:	000b000b 	.word	0x000b000b
 800d9b4:	0000d3b4 	.word	0x0000d3b4
 800d9b8:	00034f80 	.word	0x00034f80
 800d9bc:	08011488 	.word	0x08011488
 800d9c0:	00042334 	.word	0x00042334

0800d9c4 <rfalNfcvPollerReadSingleBlock>:
{
 800d9c4:	b530      	push	{r4, r5, lr}
 800d9c6:	b089      	sub	sp, #36	@ 0x24
 800d9c8:	ac0c      	add	r4, sp, #48	@ 0x30
 800d9ca:	8825      	ldrh	r5, [r4, #0]
    bn = blockNum;
 800d9cc:	241f      	movs	r4, #31
 800d9ce:	446c      	add	r4, sp
 800d9d0:	7022      	strb	r2, [r4, #0]
    return rfalNfcvPollerTransceiveReq( RFAL_NFCV_CMD_READ_SINGLE_BLOCK, flags, RFAL_NFCV_PARAM_SKIP, uid, &bn, sizeof(uint8_t), rxBuf, rxBufLen, rcvLen );
 800d9d2:	9302      	str	r3, [sp, #8]
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d9d8:	9301      	str	r3, [sp, #4]
 800d9da:	9204      	str	r2, [sp, #16]
 800d9dc:	000b      	movs	r3, r1
 800d9de:	2200      	movs	r2, #0
 800d9e0:	0001      	movs	r1, r0
 800d9e2:	9503      	str	r5, [sp, #12]
 800d9e4:	9400      	str	r4, [sp, #0]
 800d9e6:	2020      	movs	r0, #32
 800d9e8:	f7ff ff2c 	bl	800d844 <rfalNfcvPollerTransceiveReq>
}
 800d9ec:	b009      	add	sp, #36	@ 0x24
 800d9ee:	bd30      	pop	{r4, r5, pc}

0800d9f0 <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 800d9f0:	b510      	push	{r4, lr}
    return rfalNfcbPollerInitialize();
 800d9f2:	f7ff fa1f 	bl	800ce34 <rfalNfcbPollerInitialize>
}
 800d9f6:	bd10      	pop	{r4, pc}

0800d9f8 <rfalSt25tbPollerInitiate>:
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 800d9f8:	2306      	movs	r3, #6
{
 800d9fa:	b570      	push	{r4, r5, r6, lr}
 800d9fc:	b086      	sub	sp, #24
 800d9fe:	0004      	movs	r4, r0
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 800da00:	a804      	add	r0, sp, #16
 800da02:	8003      	strh	r3, [r0, #0]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800da04:	4b0c      	ldr	r3, [pc, #48]	@ (800da38 <rfalSt25tbPollerInitiate+0x40>)
 800da06:	2612      	movs	r6, #18
 800da08:	9302      	str	r3, [sp, #8]
 800da0a:	2300      	movs	r3, #0
 800da0c:	ad05      	add	r5, sp, #20
 800da0e:	446e      	add	r6, sp
 800da10:	9301      	str	r3, [sp, #4]
 800da12:	002a      	movs	r2, r5
 800da14:	2102      	movs	r1, #2
 800da16:	9600      	str	r6, [sp, #0]
 800da18:	3303      	adds	r3, #3
 800da1a:	f7f5 fe9f 	bl	800375c <rfalTransceiveBlockingTxRx>
    
    /* Check for valid Select Response   */
    if( (ret == RFAL_ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800da1e:	2800      	cmp	r0, #0
 800da20:	d102      	bne.n	800da28 <rfalSt25tbPollerInitiate+0x30>
 800da22:	8833      	ldrh	r3, [r6, #0]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d105      	bne.n	800da34 <rfalSt25tbPollerInitiate+0x3c>
    {
        return RFAL_ERR_PROTO;
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 800da28:	2c00      	cmp	r4, #0
 800da2a:	d001      	beq.n	800da30 <rfalSt25tbPollerInitiate+0x38>
    {
        *chipId = *rxBuf;
 800da2c:	782b      	ldrb	r3, [r5, #0]
 800da2e:	7023      	strb	r3, [r4, #0]
    }
    
    return ret;
}
 800da30:	b006      	add	sp, #24
 800da32:	bd70      	pop	{r4, r5, r6, pc}
        return RFAL_ERR_PROTO;
 800da34:	200b      	movs	r0, #11
 800da36:	e7fb      	b.n	800da30 <rfalSt25tbPollerInitiate+0x38>
 800da38:	0000106d 	.word	0x0000106d

0800da3c <rfalSt25tbPollerCheckPresence>:
{
 800da3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    chipIdRes = 0x00;
 800da3e:	466b      	mov	r3, sp
 800da40:	2500      	movs	r5, #0
{
 800da42:	0004      	movs	r4, r0
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 800da44:	1dd8      	adds	r0, r3, #7
    chipIdRes = 0x00;
 800da46:	71dd      	strb	r5, [r3, #7]
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 800da48:	f7ff ffd6 	bl	800d9f8 <rfalSt25tbPollerInitiate>
    if( (ret == RFAL_ERR_CRC) || (ret == RFAL_ERR_FRAMING) )
 800da4c:	2815      	cmp	r0, #21
 800da4e:	d007      	beq.n	800da60 <rfalSt25tbPollerCheckPresence+0x24>
 800da50:	2809      	cmp	r0, #9
 800da52:	d005      	beq.n	800da60 <rfalSt25tbPollerCheckPresence+0x24>
    if( chipId != NULL )
 800da54:	42ac      	cmp	r4, r5
 800da56:	d002      	beq.n	800da5e <rfalSt25tbPollerCheckPresence+0x22>
        *chipId = chipIdRes;
 800da58:	466b      	mov	r3, sp
 800da5a:	79db      	ldrb	r3, [r3, #7]
 800da5c:	7023      	strb	r3, [r4, #0]
}
 800da5e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        return RFAL_ERR_NONE;
 800da60:	0028      	movs	r0, r5
 800da62:	e7fc      	b.n	800da5e <rfalSt25tbPollerCheckPresence+0x22>

0800da64 <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 800da64:	b510      	push	{r4, lr}
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 800da66:	4b0c      	ldr	r3, [pc, #48]	@ (800da98 <rfalSt25tbPollerPcall+0x34>)
{
 800da68:	b086      	sub	sp, #24
 800da6a:	0002      	movs	r2, r0
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 800da6c:	a805      	add	r0, sp, #20
 800da6e:	8003      	strh	r3, [r0, #0]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800da70:	4b0a      	ldr	r3, [pc, #40]	@ (800da9c <rfalSt25tbPollerPcall+0x38>)
 800da72:	2416      	movs	r4, #22
 800da74:	9302      	str	r3, [sp, #8]
 800da76:	2300      	movs	r3, #0
 800da78:	446c      	add	r4, sp
 800da7a:	9301      	str	r3, [sp, #4]
 800da7c:	2102      	movs	r1, #2
 800da7e:	9400      	str	r4, [sp, #0]
 800da80:	3301      	adds	r3, #1
 800da82:	f7f5 fe6b 	bl	800375c <rfalTransceiveBlockingTxRx>
    
    /* Check for valid Select Response   */
    if( (ret == RFAL_ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800da86:	2800      	cmp	r0, #0
 800da88:	d103      	bne.n	800da92 <rfalSt25tbPollerPcall+0x2e>
 800da8a:	8823      	ldrh	r3, [r4, #0]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d000      	beq.n	800da92 <rfalSt25tbPollerPcall+0x2e>
    {
        return RFAL_ERR_PROTO;
 800da90:	300b      	adds	r0, #11
    }
    
    return ret;
}
 800da92:	b006      	add	sp, #24
 800da94:	bd10      	pop	{r4, pc}
 800da96:	46c0      	nop			@ (mov r8, r8)
 800da98:	00000406 	.word	0x00000406
 800da9c:	0000106d 	.word	0x0000106d

0800daa0 <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 800daa0:	b510      	push	{r4, lr}
 800daa2:	000a      	movs	r2, r1
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 800daa4:	1e41      	subs	r1, r0, #1
{
 800daa6:	0003      	movs	r3, r0
 800daa8:	b086      	sub	sp, #24
    {
        return RFAL_ERR_PARAM;
 800daaa:	2007      	movs	r0, #7
    if( (slotNum == 0U) || (slotNum > 15U) )
 800daac:	290e      	cmp	r1, #14
 800daae:	d816      	bhi.n	800dade <rfalSt25tbPollerSlotMarker+0x3e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 800dab0:	2106      	movs	r1, #6
 800dab2:	300e      	adds	r0, #14
 800dab4:	011b      	lsls	r3, r3, #4
 800dab6:	430b      	orrs	r3, r1
 800dab8:	4468      	add	r0, sp
 800daba:	7003      	strb	r3, [r0, #0]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800dabc:	4b09      	ldr	r3, [pc, #36]	@ (800dae4 <rfalSt25tbPollerSlotMarker+0x44>)
 800dabe:	2416      	movs	r4, #22
 800dac0:	9302      	str	r3, [sp, #8]
 800dac2:	2300      	movs	r3, #0
 800dac4:	446c      	add	r4, sp
 800dac6:	9301      	str	r3, [sp, #4]
 800dac8:	3301      	adds	r3, #1
 800daca:	0019      	movs	r1, r3
 800dacc:	9400      	str	r4, [sp, #0]
 800dace:	f7f5 fe45 	bl	800375c <rfalTransceiveBlockingTxRx>
    
    /* Check for valid ChipID Response   */
    if( (ret == RFAL_ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d103      	bne.n	800dade <rfalSt25tbPollerSlotMarker+0x3e>
 800dad6:	8823      	ldrh	r3, [r4, #0]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d000      	beq.n	800dade <rfalSt25tbPollerSlotMarker+0x3e>
    {
        return RFAL_ERR_PROTO;
 800dadc:	300b      	adds	r0, #11
    }
    
    return ret;
}
 800dade:	b006      	add	sp, #24
 800dae0:	bd10      	pop	{r4, pc}
 800dae2:	46c0      	nop			@ (mov r8, r8)
 800dae4:	0000106d 	.word	0x0000106d

0800dae8 <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 800dae8:	b570      	push	{r4, r5, r6, lr}
 800daea:	b086      	sub	sp, #24
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 800daec:	466a      	mov	r2, sp
 800daee:	230e      	movs	r3, #14
 800daf0:	7513      	strb	r3, [r2, #20]
    selectReq.chipId = chipId;
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800daf2:	4b0e      	ldr	r3, [pc, #56]	@ (800db2c <rfalSt25tbPollerSelect+0x44>)
 800daf4:	2513      	movs	r5, #19
 800daf6:	2616      	movs	r6, #22
    selectReq.chipId = chipId;
 800daf8:	7550      	strb	r0, [r2, #21]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800dafa:	9302      	str	r3, [sp, #8]
 800dafc:	2300      	movs	r3, #0
 800dafe:	446d      	add	r5, sp
 800db00:	446e      	add	r6, sp
{
 800db02:	0004      	movs	r4, r0
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800db04:	9301      	str	r3, [sp, #4]
 800db06:	002a      	movs	r2, r5
 800db08:	2102      	movs	r1, #2
 800db0a:	9600      	str	r6, [sp, #0]
 800db0c:	3301      	adds	r3, #1
 800db0e:	a805      	add	r0, sp, #20
 800db10:	f7f5 fe24 	bl	800375c <rfalTransceiveBlockingTxRx>
    
    /* Check for valid Select Response   */
    if( (ret == RFAL_ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 800db14:	2800      	cmp	r0, #0
 800db16:	d106      	bne.n	800db26 <rfalSt25tbPollerSelect+0x3e>
 800db18:	8833      	ldrh	r3, [r6, #0]
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d102      	bne.n	800db24 <rfalSt25tbPollerSelect+0x3c>
 800db1e:	782b      	ldrb	r3, [r5, #0]
 800db20:	42a3      	cmp	r3, r4
 800db22:	d000      	beq.n	800db26 <rfalSt25tbPollerSelect+0x3e>
    {
        return RFAL_ERR_PROTO;
 800db24:	200b      	movs	r0, #11
    }
    
    return ret;
}
 800db26:	b006      	add	sp, #24
 800db28:	bd70      	pop	{r4, r5, r6, pc}
 800db2a:	46c0      	nop			@ (mov r8, r8)
 800db2c:	0000106d 	.word	0x0000106d

0800db30 <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 800db30:	0002      	movs	r2, r0
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 800db32:	2015      	movs	r0, #21
{
 800db34:	b530      	push	{r4, r5, lr}
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 800db36:	240b      	movs	r4, #11
{
 800db38:	b087      	sub	sp, #28
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800db3a:	4b0a      	ldr	r3, [pc, #40]	@ (800db64 <rfalSt25tbPollerGetUID+0x34>)
 800db3c:	2516      	movs	r5, #22
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 800db3e:	4468      	add	r0, sp
 800db40:	7004      	strb	r4, [r0, #0]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800db42:	9302      	str	r3, [sp, #8]
 800db44:	2300      	movs	r3, #0
 800db46:	446d      	add	r5, sp
 800db48:	9301      	str	r3, [sp, #4]
 800db4a:	2101      	movs	r1, #1
 800db4c:	9500      	str	r5, [sp, #0]
 800db4e:	3308      	adds	r3, #8
 800db50:	f7f5 fe04 	bl	800375c <rfalTransceiveBlockingTxRx>
    
    /* Check for valid UID Response */
    if( (ret == RFAL_ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 800db54:	2800      	cmp	r0, #0
 800db56:	d103      	bne.n	800db60 <rfalSt25tbPollerGetUID+0x30>
 800db58:	882b      	ldrh	r3, [r5, #0]
 800db5a:	2b08      	cmp	r3, #8
 800db5c:	d000      	beq.n	800db60 <rfalSt25tbPollerGetUID+0x30>
    {
        return RFAL_ERR_PROTO;
 800db5e:	0020      	movs	r0, r4
    }
    
    return ret;
}
 800db60:	b007      	add	sp, #28
 800db62:	bd30      	pop	{r4, r5, pc}
 800db64:	0000106d 	.word	0x0000106d

0800db68 <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 800db68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db6a:	b085      	sub	sp, #20
 800db6c:	9001      	str	r0, [sp, #4]
 800db6e:	000d      	movs	r5, r1
 800db70:	0014      	movs	r4, r2
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
    {
        return RFAL_ERR_PARAM;
 800db72:	2007      	movs	r0, #7
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 800db74:	2900      	cmp	r1, #0
 800db76:	d02b      	beq.n	800dbd0 <rfalSt25tbPollerCollisionResolution+0x68>
 800db78:	2a00      	cmp	r2, #0
 800db7a:	d029      	beq.n	800dbd0 <rfalSt25tbPollerCollisionResolution+0x68>
 800db7c:	9b01      	ldr	r3, [sp, #4]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d026      	beq.n	800dbd0 <rfalSt25tbPollerCollisionResolution+0x68>
    }
    
    *devCnt = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	7013      	strb	r3, [r2, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 800db86:	ab02      	add	r3, sp, #8
 800db88:	1d9e      	adds	r6, r3, #6
 800db8a:	0030      	movs	r0, r6
 800db8c:	f7ff ff34 	bl	800d9f8 <rfalSt25tbPollerInitiate>
 800db90:	1e02      	subs	r2, r0, #0
    if( ret == RFAL_ERR_NONE )
 800db92:	d117      	bne.n	800dbc4 <rfalSt25tbPollerCollisionResolution+0x5c>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 800db94:	7830      	ldrb	r0, [r6, #0]
 800db96:	260a      	movs	r6, #10
 800db98:	7823      	ldrb	r3, [r4, #0]
 800db9a:	4373      	muls	r3, r6
 800db9c:	5558      	strb	r0, [r3, r5]
        st25tbDevList[*devCnt].isDeselected = false;
 800db9e:	7823      	ldrb	r3, [r4, #0]
 800dba0:	4373      	muls	r3, r6
 800dba2:	18eb      	adds	r3, r5, r3
 800dba4:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 800dba6:	f7ff ff9f 	bl	800dae8 <rfalSt25tbPollerSelect>
        
        if( RFAL_ERR_NONE == ret )
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	d10a      	bne.n	800dbc4 <rfalSt25tbPollerCollisionResolution+0x5c>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 800dbae:	7823      	ldrb	r3, [r4, #0]
 800dbb0:	435e      	muls	r6, r3
 800dbb2:	19a8      	adds	r0, r5, r6
 800dbb4:	3001      	adds	r0, #1
 800dbb6:	f7ff ffbb 	bl	800db30 <rfalSt25tbPollerGetUID>
        }
        
        if( RFAL_ERR_NONE == ret )
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	d102      	bne.n	800dbc4 <rfalSt25tbPollerCollisionResolution+0x5c>
        {
            (*devCnt)++;
 800dbbe:	7823      	ldrb	r3, [r4, #0]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	7023      	strb	r3, [r4, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 800dbc4:	7823      	ldrb	r3, [r4, #0]
 800dbc6:	9a01      	ldr	r2, [sp, #4]
            st25tbDevList[*devCnt].chipID       = chipId;
 800dbc8:	270a      	movs	r7, #10
    if( *devCnt < devLimit )
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d302      	bcc.n	800dbd4 <rfalSt25tbPollerCollisionResolution+0x6c>
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
        }
        while( (detected == true) && (*devCnt < devLimit) );
    }

    return RFAL_ERR_NONE;
 800dbce:	2000      	movs	r0, #0
}
 800dbd0:	b005      	add	sp, #20
 800dbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    col = false;
 800dbd4:	2300      	movs	r3, #0
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 800dbd6:	001e      	movs	r6, r3
    col = false;
 800dbd8:	9300      	str	r3, [sp, #0]
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 800dbda:	2001      	movs	r0, #1
 800dbdc:	f7f6 ff54 	bl	8004a88 <HAL_Delay>
            ret = rfalSt25tbPollerPcall( &chipId );
 800dbe0:	ab02      	add	r3, sp, #8
        if( i==0U )
 800dbe2:	2e00      	cmp	r6, #0
 800dbe4:	d12e      	bne.n	800dc44 <rfalSt25tbPollerCollisionResolution+0xdc>
            ret = rfalSt25tbPollerPcall( &chipId );
 800dbe6:	1dd8      	adds	r0, r3, #7
 800dbe8:	f7ff ff3c 	bl	800da64 <rfalSt25tbPollerPcall>
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 800dbec:	1e03      	subs	r3, r0, #0
        if( ret == RFAL_ERR_NONE )
 800dbee:	d12e      	bne.n	800dc4e <rfalSt25tbPollerCollisionResolution+0xe6>
            st25tbDevList[*devCnt].chipID       = chipId;
 800dbf0:	aa02      	add	r2, sp, #8
 800dbf2:	79d0      	ldrb	r0, [r2, #7]
 800dbf4:	7822      	ldrb	r2, [r4, #0]
 800dbf6:	437a      	muls	r2, r7
 800dbf8:	5550      	strb	r0, [r2, r5]
            st25tbDevList[*devCnt].isDeselected = false;
 800dbfa:	7822      	ldrb	r2, [r4, #0]
 800dbfc:	437a      	muls	r2, r7
 800dbfe:	18aa      	adds	r2, r5, r2
 800dc00:	7253      	strb	r3, [r2, #9]
            ret = rfalSt25tbPollerSelect( chipId );
 800dc02:	f7ff ff71 	bl	800dae8 <rfalSt25tbPollerSelect>
            if( (*devCnt) > 0U )
 800dc06:	7823      	ldrb	r3, [r4, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d004      	beq.n	800dc16 <rfalSt25tbPollerCollisionResolution+0xae>
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	437b      	muls	r3, r7
 800dc10:	18eb      	adds	r3, r5, r3
 800dc12:	3b0a      	subs	r3, #10
 800dc14:	725a      	strb	r2, [r3, #9]
            if( RFAL_ERR_NONE == ret )
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d108      	bne.n	800dc2c <rfalSt25tbPollerCollisionResolution+0xc4>
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 800dc1a:	7820      	ldrb	r0, [r4, #0]
 800dc1c:	4378      	muls	r0, r7
 800dc1e:	1828      	adds	r0, r5, r0
 800dc20:	3001      	adds	r0, #1
 800dc22:	f7ff ff85 	bl	800db30 <rfalSt25tbPollerGetUID>
                (*devCnt)++;
 800dc26:	7823      	ldrb	r3, [r4, #0]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	7023      	strb	r3, [r4, #0]
        if( *devCnt >= devLimit )
 800dc2c:	7823      	ldrb	r3, [r4, #0]
 800dc2e:	9a01      	ldr	r2, [sp, #4]
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d2cc      	bcs.n	800dbce <rfalSt25tbPollerCollisionResolution+0x66>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 800dc34:	3601      	adds	r6, #1
 800dc36:	b2f6      	uxtb	r6, r6
 800dc38:	2e10      	cmp	r6, #16
 800dc3a:	d1ce      	bne.n	800dbda <rfalSt25tbPollerCollisionResolution+0x72>
        while( (detected == true) && (*devCnt < devLimit) );
 800dc3c:	9b00      	ldr	r3, [sp, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1c8      	bne.n	800dbd4 <rfalSt25tbPollerCollisionResolution+0x6c>
 800dc42:	e7c4      	b.n	800dbce <rfalSt25tbPollerCollisionResolution+0x66>
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 800dc44:	0030      	movs	r0, r6
 800dc46:	1dd9      	adds	r1, r3, #7
 800dc48:	f7ff ff2a 	bl	800daa0 <rfalSt25tbPollerSlotMarker>
 800dc4c:	e7ce      	b.n	800dbec <rfalSt25tbPollerCollisionResolution+0x84>
        else if( (ret == RFAL_ERR_CRC) || (ret == RFAL_ERR_FRAMING) )
 800dc4e:	2815      	cmp	r0, #21
 800dc50:	d001      	beq.n	800dc56 <rfalSt25tbPollerCollisionResolution+0xee>
 800dc52:	2809      	cmp	r0, #9
 800dc54:	d1ea      	bne.n	800dc2c <rfalSt25tbPollerCollisionResolution+0xc4>
            col = true;
 800dc56:	2301      	movs	r3, #1
 800dc58:	9300      	str	r3, [sp, #0]
 800dc5a:	e7e7      	b.n	800dc2c <rfalSt25tbPollerCollisionResolution+0xc4>

0800dc5c <rfalT1TPollerInitialize>:

ReturnCode rfalT1TPollerInitialize( void )
{
    ReturnCode ret;
    
    RFAL_EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 800dc5c:	2200      	movs	r2, #0
{
 800dc5e:	b510      	push	{r4, lr}
    RFAL_EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 800dc60:	0011      	movs	r1, r2
 800dc62:	2002      	movs	r0, #2
 800dc64:	f7f4 f806 	bl	8001c74 <rfalSetMode>
 800dc68:	1e04      	subs	r4, r0, #0
 800dc6a:	d10b      	bne.n	800dc84 <rfalT1TPollerInitialize+0x28>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NONE );
 800dc6c:	f7f4 f90c 	bl	8001e88 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 800dc70:	0020      	movs	r0, r4
 800dc72:	f7f4 f93b 	bl	8001eec <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 800dc76:	4804      	ldr	r0, [pc, #16]	@ (800dc88 <rfalT1TPollerInitialize+0x2c>)
 800dc78:	f7f4 f92e 	bl	8001ed8 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 800dc7c:	20c0      	movs	r0, #192	@ 0xc0
 800dc7e:	0040      	lsls	r0, r0, #1
 800dc80:	f7f4 f918 	bl	8001eb4 <rfalSetFDTPoll>
    
    return RFAL_ERR_NONE;
}
 800dc84:	0020      	movs	r0, r4
 800dc86:	bd10      	pop	{r4, pc}
 800dc88:	00000494 	.word	0x00000494

0800dc8c <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 800dc8c:	b570      	push	{r4, r5, r6, lr}
 800dc8e:	0004      	movs	r4, r0
 800dc90:	b088      	sub	sp, #32
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
    {
        return RFAL_ERR_PARAM;
 800dc92:	2007      	movs	r0, #7
    if( ridRes == NULL )
 800dc94:	2c00      	cmp	r4, #0
 800dc96:	d020      	beq.n	800dcda <rfalT1TPollerRid+0x4e>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    RFAL_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 800dc98:	3012      	adds	r0, #18
 800dc9a:	2206      	movs	r2, #6
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	4468      	add	r0, sp
 800dca0:	f002 fb12 	bl	80102c8 <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 800dca4:	2378      	movs	r3, #120	@ 0x78
    RFAL_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 800dca6:	ae06      	add	r6, sp, #24
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 800dca8:	7033      	strb	r3, [r6, #0]
    
    RFAL_EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 800dcaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dce0 <rfalT1TPollerRid+0x54>)
 800dcac:	2516      	movs	r5, #22
 800dcae:	9302      	str	r3, [sp, #8]
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	446d      	add	r5, sp
 800dcb4:	9301      	str	r3, [sp, #4]
 800dcb6:	0022      	movs	r2, r4
 800dcb8:	2107      	movs	r1, #7
 800dcba:	0030      	movs	r0, r6
 800dcbc:	9500      	str	r5, [sp, #0]
 800dcbe:	3306      	adds	r3, #6
 800dcc0:	f7f5 fd4c 	bl	800375c <rfalTransceiveBlockingTxRx>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d108      	bne.n	800dcda <rfalT1TPollerRid+0x4e>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 800dcc8:	882b      	ldrh	r3, [r5, #0]
 800dcca:	2b06      	cmp	r3, #6
 800dccc:	d104      	bne.n	800dcd8 <rfalT1TPollerRid+0x4c>
 800dcce:	220f      	movs	r2, #15
 800dcd0:	7823      	ldrb	r3, [r4, #0]
 800dcd2:	4393      	bics	r3, r2
 800dcd4:	2b10      	cmp	r3, #16
 800dcd6:	d000      	beq.n	800dcda <rfalT1TPollerRid+0x4e>
    {
        return RFAL_ERR_PROTO;
 800dcd8:	200b      	movs	r0, #11
    }
    
    return RFAL_ERR_NONE;
}
 800dcda:	b008      	add	sp, #32
 800dcdc:	bd70      	pop	{r4, r5, r6, pc}
 800dcde:	46c0      	nop			@ (mov r8, r8)
 800dce0:	000009a8 	.word	0x000009a8

0800dce4 <rfalT2TPollerRead>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

 ReturnCode rfalT2TPollerRead( uint8_t blockNum, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rcvLen )
 {
 800dce4:	b570      	push	{r4, r5, r6, lr}
 800dce6:	0006      	movs	r6, r0
 800dce8:	000c      	movs	r4, r1
 800dcea:	001d      	movs	r5, r3
    ReturnCode      ret;
    rfalT2TReadReq  req;
     
    if( (rxBuf == NULL) || (rcvLen == NULL) )
    {
        return RFAL_ERR_PARAM;
 800dcec:	2007      	movs	r0, #7
 {
 800dcee:	b086      	sub	sp, #24
    if( (rxBuf == NULL) || (rcvLen == NULL) )
 800dcf0:	2900      	cmp	r1, #0
 800dcf2:	d01b      	beq.n	800dd2c <rfalT2TPollerRead+0x48>
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d019      	beq.n	800dd2c <rfalT2TPollerRead+0x48>
    }
    
    req.code = (uint8_t)RFAL_T2T_CMD_READ;
 800dcf8:	4669      	mov	r1, sp
 800dcfa:	2330      	movs	r3, #48	@ 0x30
 800dcfc:	750b      	strb	r3, [r1, #20]
    req.blNo = blockNum;
    
    /* Transceive Command */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TReadReq), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 800dcfe:	4b0c      	ldr	r3, [pc, #48]	@ (800dd30 <rfalT2TPollerRead+0x4c>)
    req.blNo = blockNum;
 800dd00:	754e      	strb	r6, [r1, #21]
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&req, sizeof(rfalT2TReadReq), rxBuf, rxBufLen, rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_FDT_POLL_READ_MAX );
 800dd02:	9302      	str	r3, [sp, #8]
 800dd04:	2300      	movs	r3, #0
 800dd06:	2102      	movs	r1, #2
 800dd08:	9301      	str	r3, [sp, #4]
 800dd0a:	9500      	str	r5, [sp, #0]
 800dd0c:	0013      	movs	r3, r2
 800dd0e:	a805      	add	r0, sp, #20
 800dd10:	0022      	movs	r2, r4
 800dd12:	f7f5 fd23 	bl	800375c <rfalTransceiveBlockingTxRx>
    
    /* T2T 1.0 5.2.1.7 The Reader/Writer SHALL treat a NACK in response to a READ Command as a Protocol Error */
    if( (ret == RFAL_ERR_INCOMPLETE_BYTE) && (*rcvLen == RFAL_T2T_ACK_NACK_LEN) && ((*rxBuf & RFAL_T2T_ACK_MASK) != RFAL_T2T_ACK) )
 800dd16:	2828      	cmp	r0, #40	@ 0x28
 800dd18:	d108      	bne.n	800dd2c <rfalT2TPollerRead+0x48>
 800dd1a:	882b      	ldrh	r3, [r5, #0]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d105      	bne.n	800dd2c <rfalT2TPollerRead+0x48>
 800dd20:	220f      	movs	r2, #15
 800dd22:	7823      	ldrb	r3, [r4, #0]
 800dd24:	4013      	ands	r3, r2
 800dd26:	2b0a      	cmp	r3, #10
 800dd28:	d000      	beq.n	800dd2c <rfalT2TPollerRead+0x48>
    {
        return RFAL_ERR_PROTO;
 800dd2a:	381d      	subs	r0, #29
    }
    return ret;
 }
 800dd2c:	b006      	add	sp, #24
 800dd2e:	bd70      	pop	{r4, r5, r6, pc}
 800dd30:	000108d8 	.word	0x000108d8

0800dd34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dd34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 800dd36:	f000 fc3f 	bl	800e5b8 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800dd3a:	4c15      	ldr	r4, [pc, #84]	@ (800dd90 <MX_USB_DEVICE_Init+0x5c>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	0020      	movs	r0, r4
 800dd40:	4914      	ldr	r1, [pc, #80]	@ (800dd94 <MX_USB_DEVICE_Init+0x60>)
 800dd42:	f000 fe27 	bl	800e994 <USBD_Init>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	d001      	beq.n	800dd4e <MX_USB_DEVICE_Init+0x1a>
  {
    Error_Handler();
 800dd4a:	f7f2 fcfb 	bl	8000744 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 800dd4e:	0020      	movs	r0, r4
 800dd50:	4911      	ldr	r1, [pc, #68]	@ (800dd98 <MX_USB_DEVICE_Init+0x64>)
 800dd52:	f000 fe38 	bl	800e9c6 <USBD_RegisterClass>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d001      	beq.n	800dd5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dd5a:	f7f2 fcf3 	bl	8000744 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 800dd5e:	0020      	movs	r0, r4
 800dd60:	490e      	ldr	r1, [pc, #56]	@ (800dd9c <MX_USB_DEVICE_Init+0x68>)
 800dd62:	f000 faa7 	bl	800e2b4 <USBD_CDC_ACM_RegisterInterface>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d001      	beq.n	800dd6e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800dd6a:	f7f2 fceb 	bl	8000744 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 800dd6e:	0020      	movs	r0, r4
 800dd70:	490b      	ldr	r1, [pc, #44]	@ (800dda0 <MX_USB_DEVICE_Init+0x6c>)
 800dd72:	f000 fdeb 	bl	800e94c <USBD_CUSTOM_HID_RegisterInterface>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	d001      	beq.n	800dd7e <MX_USB_DEVICE_Init+0x4a>
  {
    Error_Handler();
 800dd7a:	f7f2 fce3 	bl	8000744 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 800dd7e:	0020      	movs	r0, r4
 800dd80:	f000 fe3c 	bl	800e9fc <USBD_Start>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d001      	beq.n	800dd8c <MX_USB_DEVICE_Init+0x58>
  {
    Error_Handler();
 800dd88:	f7f2 fcdc 	bl	8000744 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dd8c:	bd10      	pop	{r4, pc}
 800dd8e:	46c0      	nop			@ (mov r8, r8)
 800dd90:	20001aa4 	.word	0x20001aa4
 800dd94:	20000068 	.word	0x20000068
 800dd98:	200001a4 	.word	0x200001a4
 800dd9c:	20000020 	.word	0x20000020
 800dda0:	20000084 	.word	0x20000084

0800dda4 <CDC_DeInit>:
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800dda4:	2000      	movs	r0, #0
 800dda6:	4770      	bx	lr

0800dda8 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800dda8:	b510      	push	{r4, lr}
 800ddaa:	0004      	movs	r4, r0
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800ddac:	2920      	cmp	r1, #32
 800ddae:	d003      	beq.n	800ddb8 <CDC_Control+0x10>
 800ddb0:	2921      	cmp	r1, #33	@ 0x21
 800ddb2:	d016      	beq.n	800dde2 <CDC_Control+0x3a>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	bd10      	pop	{r4, pc}
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800ddb8:	7853      	ldrb	r3, [r2, #1]
 800ddba:	7811      	ldrb	r1, [r2, #0]
 800ddbc:	021b      	lsls	r3, r3, #8
 800ddbe:	430b      	orrs	r3, r1
 800ddc0:	7891      	ldrb	r1, [r2, #2]
 800ddc2:	4812      	ldr	r0, [pc, #72]	@ (800de0c <CDC_Control+0x64>)
 800ddc4:	0409      	lsls	r1, r1, #16
 800ddc6:	4319      	orrs	r1, r3
 800ddc8:	78d3      	ldrb	r3, [r2, #3]
 800ddca:	00e4      	lsls	r4, r4, #3
 800ddcc:	061b      	lsls	r3, r3, #24
 800ddce:	430b      	orrs	r3, r1
 800ddd0:	5023      	str	r3, [r4, r0]
    Line_Coding[cdc_ch].format = pbuf[4];
 800ddd2:	7913      	ldrb	r3, [r2, #4]
 800ddd4:	1900      	adds	r0, r0, r4
 800ddd6:	7103      	strb	r3, [r0, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800ddd8:	7953      	ldrb	r3, [r2, #5]
 800ddda:	7143      	strb	r3, [r0, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800dddc:	7993      	ldrb	r3, [r2, #6]
 800ddde:	7183      	strb	r3, [r0, #6]
    break;
 800dde0:	e7e8      	b.n	800ddb4 <CDC_Control+0xc>
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 800dde2:	4b0a      	ldr	r3, [pc, #40]	@ (800de0c <CDC_Control+0x64>)
 800dde4:	00c4      	lsls	r4, r0, #3
 800dde6:	58e1      	ldr	r1, [r4, r3]
 800dde8:	7011      	strb	r1, [r2, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800ddea:	58e1      	ldr	r1, [r4, r3]
 800ddec:	0a09      	lsrs	r1, r1, #8
 800ddee:	7051      	strb	r1, [r2, #1]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 800ddf0:	58e1      	ldr	r1, [r4, r3]
 800ddf2:	0c09      	lsrs	r1, r1, #16
 800ddf4:	7091      	strb	r1, [r2, #2]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800ddf6:	58e1      	ldr	r1, [r4, r3]
    pbuf[4] = Line_Coding[cdc_ch].format;
 800ddf8:	191b      	adds	r3, r3, r4
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800ddfa:	0e09      	lsrs	r1, r1, #24
 800ddfc:	70d1      	strb	r1, [r2, #3]
    pbuf[4] = Line_Coding[cdc_ch].format;
 800ddfe:	7919      	ldrb	r1, [r3, #4]
 800de00:	7111      	strb	r1, [r2, #4]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 800de02:	7959      	ldrb	r1, [r3, #5]
 800de04:	7151      	strb	r1, [r2, #5]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 800de06:	799b      	ldrb	r3, [r3, #6]
 800de08:	7193      	strb	r3, [r2, #6]
    break;
 800de0a:	e7d3      	b.n	800ddb4 <CDC_Control+0xc>
 800de0c:	20001dc0 	.word	0x20001dc0

0800de10 <CDC_TransmitCplt>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
  return (USBD_OK);
}
 800de10:	2000      	movs	r0, #0
 800de12:	4770      	bx	lr

0800de14 <CDC_Init>:
{
 800de14:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 800de16:	4b04      	ldr	r3, [pc, #16]	@ (800de28 <CDC_Init+0x14>)
 800de18:	01c2      	lsls	r2, r0, #7
 800de1a:	4904      	ldr	r1, [pc, #16]	@ (800de2c <CDC_Init+0x18>)
 800de1c:	18d2      	adds	r2, r2, r3
 800de1e:	f000 fa65 	bl	800e2ec <USBD_CDC_SetRxBuffer>
}
 800de22:	2000      	movs	r0, #0
 800de24:	bd10      	pop	{r4, pc}
 800de26:	46c0      	nop			@ (mov r8, r8)
 800de28:	20001dc8 	.word	0x20001dc8
 800de2c:	20001aa4 	.word	0x20001aa4

0800de30 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 800de30:	b570      	push	{r4, r5, r6, lr}
 800de32:	0004      	movs	r4, r0
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
  hcdc = &CDC_ACM_Class_Data[ch];
  if (hcdc->TxState != 0)
 800de34:	2087      	movs	r0, #135	@ 0x87
 800de36:	0080      	lsls	r0, r0, #2
 800de38:	4360      	muls	r0, r4
{
 800de3a:	0013      	movs	r3, r2
  if (hcdc->TxState != 0)
 800de3c:	4a08      	ldr	r2, [pc, #32]	@ (800de60 <CDC_Transmit+0x30>)
 800de3e:	1880      	adds	r0, r0, r2
 800de40:	6802      	ldr	r2, [r0, #0]
  {
    return USBD_BUSY;
 800de42:	2001      	movs	r0, #1
  if (hcdc->TxState != 0)
 800de44:	2a00      	cmp	r2, #0
 800de46:	d109      	bne.n	800de5c <CDC_Transmit+0x2c>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 800de48:	4d06      	ldr	r5, [pc, #24]	@ (800de64 <CDC_Transmit+0x34>)
 800de4a:	000a      	movs	r2, r1
 800de4c:	0020      	movs	r0, r4
 800de4e:	0029      	movs	r1, r5
 800de50:	f000 fa3a 	bl	800e2c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800de54:	0029      	movs	r1, r5
 800de56:	0020      	movs	r0, r4
 800de58:	f000 fa52 	bl	800e300 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 800de5c:	bd70      	pop	{r4, r5, r6, pc}
 800de5e:	46c0      	nop			@ (mov r8, r8)
 800de60:	2000225c 	.word	0x2000225c
 800de64:	20001aa4 	.word	0x20001aa4

0800de68 <CDC_Receive>:
{
 800de68:	b570      	push	{r4, r5, r6, lr}
 800de6a:	000e      	movs	r6, r1
 800de6c:	0004      	movs	r4, r0
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 800de6e:	6812      	ldr	r2, [r2, #0]
 800de70:	b292      	uxth	r2, r2
 800de72:	f7ff ffdd 	bl	800de30 <CDC_Transmit>
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 800de76:	4d06      	ldr	r5, [pc, #24]	@ (800de90 <CDC_Receive+0x28>)
 800de78:	0032      	movs	r2, r6
 800de7a:	0029      	movs	r1, r5
 800de7c:	0020      	movs	r0, r4
 800de7e:	f000 fa35 	bl	800e2ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 800de82:	0029      	movs	r1, r5
 800de84:	0020      	movs	r0, r4
 800de86:	f000 fa65 	bl	800e354 <USBD_CDC_ReceivePacket>
}
 800de8a:	2000      	movs	r0, #0
 800de8c:	bd70      	pop	{r4, r5, r6, pc}
 800de8e:	46c0      	nop			@ (mov r8, r8)
 800de90:	20001aa4 	.word	0x20001aa4

0800de94 <USBD_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 800de94:	2312      	movs	r3, #18
  return USBD_DeviceDesc;
 800de96:	4801      	ldr	r0, [pc, #4]	@ (800de9c <USBD_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 800de98:	800b      	strh	r3, [r1, #0]
}
 800de9a:	4770      	bx	lr
 800de9c:	20000054 	.word	0x20000054

0800dea0 <USBD_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dea0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 800dea2:	4801      	ldr	r0, [pc, #4]	@ (800dea8 <USBD_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800dea4:	800b      	strh	r3, [r1, #0]
}
 800dea6:	4770      	bx	lr
 800dea8:	20000050 	.word	0x20000050

0800deac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800deac:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800deae:	2600      	movs	r6, #0
 800deb0:	0052      	lsls	r2, r2, #1
 800deb2:	188a      	adds	r2, r1, r2
    if (((value >> 28)) < 0xA)
 800deb4:	0f05      	lsrs	r5, r0, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800deb6:	b2ec      	uxtb	r4, r5
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800deb8:	0023      	movs	r3, r4
 800deba:	3337      	adds	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 800debc:	2d09      	cmp	r5, #9
 800debe:	d800      	bhi.n	800dec2 <IntToUnicode+0x16>
      pbuf[2 * idx] = (value >> 28) + '0';
 800dec0:	3b07      	subs	r3, #7
 800dec2:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 800dec4:	704e      	strb	r6, [r1, #1]
  for (idx = 0; idx < len; idx++)
 800dec6:	3102      	adds	r1, #2
    value = value << 4;
 800dec8:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 800deca:	428a      	cmp	r2, r1
 800decc:	d1f2      	bne.n	800deb4 <IntToUnicode+0x8>
  }
}
 800dece:	bd70      	pop	{r4, r5, r6, pc}

0800ded0 <USBD_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800ded0:	231a      	movs	r3, #26
{
 800ded2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800ded4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ded6:	4b0a      	ldr	r3, [pc, #40]	@ (800df00 <USBD_SerialStrDescriptor+0x30>)
 800ded8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800deda:	4b0a      	ldr	r3, [pc, #40]	@ (800df04 <USBD_SerialStrDescriptor+0x34>)
  deviceserial0 += deviceserial2;
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 800dee0:	2800      	cmp	r0, #0
 800dee2:	d00a      	beq.n	800defa <USBD_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dee4:	4b08      	ldr	r3, [pc, #32]	@ (800df08 <USBD_SerialStrDescriptor+0x38>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dee6:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dee8:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800deea:	4908      	ldr	r1, [pc, #32]	@ (800df0c <USBD_SerialStrDescriptor+0x3c>)
 800deec:	f7ff ffde 	bl	800deac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800def0:	2204      	movs	r2, #4
 800def2:	0020      	movs	r0, r4
 800def4:	4906      	ldr	r1, [pc, #24]	@ (800df10 <USBD_SerialStrDescriptor+0x40>)
 800def6:	f7ff ffd9 	bl	800deac <IntToUnicode>
  return (uint8_t *) USBD_StringSerial;
 800defa:	4806      	ldr	r0, [pc, #24]	@ (800df14 <USBD_SerialStrDescriptor+0x44>)
}
 800defc:	bd10      	pop	{r4, pc}
 800defe:	46c0      	nop			@ (mov r8, r8)
 800df00:	1ffff7ac 	.word	0x1ffff7ac
 800df04:	1ffff7b4 	.word	0x1ffff7b4
 800df08:	1ffff7b0 	.word	0x1ffff7b0
 800df0c:	20000036 	.word	0x20000036
 800df10:	20000046 	.word	0x20000046
 800df14:	20000034 	.word	0x20000034

0800df18 <USBD_ManufacturerStrDescriptor>:
{
 800df18:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800df1a:	4c04      	ldr	r4, [pc, #16]	@ (800df2c <USBD_ManufacturerStrDescriptor+0x14>)
{
 800df1c:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800df1e:	0021      	movs	r1, r4
 800df20:	4803      	ldr	r0, [pc, #12]	@ (800df30 <USBD_ManufacturerStrDescriptor+0x18>)
 800df22:	f001 f8f2 	bl	800f10a <USBD_GetString>
}
 800df26:	0020      	movs	r0, r4
 800df28:	bd10      	pop	{r4, pc}
 800df2a:	46c0      	nop			@ (mov r8, r8)
 800df2c:	20001e48 	.word	0x20001e48
 800df30:	08010faf 	.word	0x08010faf

0800df34 <USBD_ProductStrDescriptor>:
{
 800df34:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800df36:	4c04      	ldr	r4, [pc, #16]	@ (800df48 <USBD_ProductStrDescriptor+0x14>)
{
 800df38:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800df3a:	0021      	movs	r1, r4
 800df3c:	4803      	ldr	r0, [pc, #12]	@ (800df4c <USBD_ProductStrDescriptor+0x18>)
 800df3e:	f001 f8e4 	bl	800f10a <USBD_GetString>
}
 800df42:	0020      	movs	r0, r4
 800df44:	bd10      	pop	{r4, pc}
 800df46:	46c0      	nop			@ (mov r8, r8)
 800df48:	20001e48 	.word	0x20001e48
 800df4c:	08010fc2 	.word	0x08010fc2

0800df50 <USBD_ConfigStrDescriptor>:
{
 800df50:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800df52:	4c04      	ldr	r4, [pc, #16]	@ (800df64 <USBD_ConfigStrDescriptor+0x14>)
{
 800df54:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800df56:	0021      	movs	r1, r4
 800df58:	4803      	ldr	r0, [pc, #12]	@ (800df68 <USBD_ConfigStrDescriptor+0x18>)
 800df5a:	f001 f8d6 	bl	800f10a <USBD_GetString>
}
 800df5e:	0020      	movs	r0, r4
 800df60:	bd10      	pop	{r4, pc}
 800df62:	46c0      	nop			@ (mov r8, r8)
 800df64:	20001e48 	.word	0x20001e48
 800df68:	08010fd9 	.word	0x08010fd9

0800df6c <USBD_InterfaceStrDescriptor>:
{
 800df6c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800df6e:	4c04      	ldr	r4, [pc, #16]	@ (800df80 <USBD_InterfaceStrDescriptor+0x14>)
{
 800df70:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800df72:	0021      	movs	r1, r4
 800df74:	4803      	ldr	r0, [pc, #12]	@ (800df84 <USBD_InterfaceStrDescriptor+0x18>)
 800df76:	f001 f8c8 	bl	800f10a <USBD_GetString>
}
 800df7a:	0020      	movs	r0, r4
 800df7c:	bd10      	pop	{r4, pc}
 800df7e:	46c0      	nop			@ (mov r8, r8)
 800df80:	20001e48 	.word	0x20001e48
 800df84:	08010fe9 	.word	0x08010fe9

0800df88 <CUSTOM_HID_Init>:
static int8_t CUSTOM_HID_Init(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800df88:	2000      	movs	r0, #0
 800df8a:	4770      	bx	lr

0800df8c <CUSTOM_HID_OutEvent>:
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800df8c:	2000      	movs	r0, #0
 800df8e:	4770      	bx	lr

0800df90 <CUSTOM_HID_DeInit>:
static int8_t CUSTOM_HID_DeInit(void)
 800df90:	2000      	movs	r0, #0
 800df92:	4770      	bx	lr

0800df94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800df94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (hcdc == NULL)
    {
      return (uint8_t)USBD_FAIL;
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800df96:	2580      	movs	r5, #128	@ 0x80
 800df98:	26af      	movs	r6, #175	@ 0xaf
{
 800df9a:	9001      	str	r0, [sp, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800df9c:	2000      	movs	r0, #0
    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800df9e:	00ad      	lsls	r5, r5, #2
 800dfa0:	00b6      	lsls	r6, r6, #2
 800dfa2:	4c0a      	ldr	r4, [pc, #40]	@ (800dfcc <USBD_CDC_EP0_RxReady+0x38>)
 800dfa4:	5d61      	ldrb	r1, [r4, r5]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	d001      	beq.n	800dfae <USBD_CDC_EP0_RxReady+0x1a>
      hcdc->CmdOpCode = 0xFFU;
    }
  }

  return (uint8_t)USBD_OK;
}
 800dfaa:	2000      	movs	r0, #0
 800dfac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dfae:	9b01      	ldr	r3, [sp, #4]
 800dfb0:	599a      	ldr	r2, [r3, r6]
 800dfb2:	2a00      	cmp	r2, #0
 800dfb4:	d0f9      	beq.n	800dfaa <USBD_CDC_EP0_RxReady+0x16>
 800dfb6:	29ff      	cmp	r1, #255	@ 0xff
 800dfb8:	d0f7      	beq.n	800dfaa <USBD_CDC_EP0_RxReady+0x16>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 800dfba:	4b05      	ldr	r3, [pc, #20]	@ (800dfd0 <USBD_CDC_EP0_RxReady+0x3c>)
 800dfbc:	6897      	ldr	r7, [r2, #8]
 800dfbe:	5ce3      	ldrb	r3, [r4, r3]
 800dfc0:	0022      	movs	r2, r4
 800dfc2:	47b8      	blx	r7
      hcdc->CmdOpCode = 0xFFU;
 800dfc4:	23ff      	movs	r3, #255	@ 0xff
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800dfc6:	2001      	movs	r0, #1
      hcdc->CmdOpCode = 0xFFU;
 800dfc8:	5563      	strb	r3, [r4, r5]
 800dfca:	e7ea      	b.n	800dfa2 <USBD_CDC_EP0_RxReady+0xe>
 800dfcc:	20002048 	.word	0x20002048
 800dfd0:	00000201 	.word	0x00000201

0800dfd4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800dfd4:	234b      	movs	r3, #75	@ 0x4b
 800dfd6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
 800dfd8:	4800      	ldr	r0, [pc, #0]	@ (800dfdc <USBD_CDC_GetFSCfgDesc+0x8>)
}
 800dfda:	4770      	bx	lr
 800dfdc:	200000b8 	.word	0x200000b8

0800dfe0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800dfe0:	234b      	movs	r3, #75	@ 0x4b
 800dfe2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
 800dfe4:	4800      	ldr	r0, [pc, #0]	@ (800dfe8 <USBD_CDC_GetHSCfgDesc+0x8>)
}
 800dfe6:	4770      	bx	lr
 800dfe8:	20000104 	.word	0x20000104

0800dfec <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dfec:	230a      	movs	r3, #10
 800dfee:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dff0:	4800      	ldr	r0, [pc, #0]	@ (800dff4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
}
 800dff2:	4770      	bx	lr
 800dff4:	2000018c 	.word	0x2000018c

0800dff8 <USBD_CDC_DataOut>:
{
 800dff8:	b510      	push	{r4, lr}
 800dffa:	0004      	movs	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dffc:	f001 f98f 	bl	800f31e <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800e000:	21af      	movs	r1, #175	@ 0xaf
 800e002:	0089      	lsls	r1, r1, #2
 800e004:	5861      	ldr	r1, [r4, r1]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e006:	2283      	movs	r2, #131	@ 0x83
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800e008:	68cc      	ldr	r4, [r1, #12]
 800e00a:	2181      	movs	r1, #129	@ 0x81
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e00c:	4b04      	ldr	r3, [pc, #16]	@ (800e020 <USBD_CDC_DataOut+0x28>)
 800e00e:	0092      	lsls	r2, r2, #2
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800e010:	0089      	lsls	r1, r1, #2
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e012:	5098      	str	r0, [r3, r2]
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800e014:	5859      	ldr	r1, [r3, r1]
 800e016:	4a03      	ldr	r2, [pc, #12]	@ (800e024 <USBD_CDC_DataOut+0x2c>)
 800e018:	2000      	movs	r0, #0
 800e01a:	47a0      	blx	r4
}
 800e01c:	2000      	movs	r0, #0
 800e01e:	bd10      	pop	{r4, pc}
 800e020:	20002048 	.word	0x20002048
 800e024:	20002254 	.word	0x20002254

0800e028 <USBD_CDC_DataIn>:
{
 800e028:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e02a:	2614      	movs	r6, #20
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e02c:	23c4      	movs	r3, #196	@ 0xc4
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e02e:	434e      	muls	r6, r1
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e030:	009b      	lsls	r3, r3, #2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e032:	1986      	adds	r6, r0, r6
{
 800e034:	0005      	movs	r5, r0
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e036:	58c3      	ldr	r3, [r0, r3]
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e038:	69b0      	ldr	r0, [r6, #24]
{
 800e03a:	000c      	movs	r4, r1
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d00f      	beq.n	800e060 <USBD_CDC_DataIn+0x38>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e040:	2228      	movs	r2, #40	@ 0x28
 800e042:	434a      	muls	r2, r1
 800e044:	189b      	adds	r3, r3, r2
 800e046:	6a19      	ldr	r1, [r3, #32]
 800e048:	f7f2 f914 	bl	8000274 <__aeabi_uidivmod>
 800e04c:	1e0a      	subs	r2, r1, #0
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e04e:	d107      	bne.n	800e060 <USBD_CDC_DataIn+0x38>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e050:	000b      	movs	r3, r1
    pdev->ep_in[epnum].total_length = 0U;
 800e052:	61b1      	str	r1, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e054:	0028      	movs	r0, r5
 800e056:	0021      	movs	r1, r4
 800e058:	f001 f9a9 	bl	800f3ae <USBD_LL_Transmit>
}
 800e05c:	2000      	movs	r0, #0
 800e05e:	bd70      	pop	{r4, r5, r6, pc}
    hcdc->TxState = 0U;
 800e060:	2385      	movs	r3, #133	@ 0x85
 800e062:	2000      	movs	r0, #0
 800e064:	4907      	ldr	r1, [pc, #28]	@ (800e084 <USBD_CDC_DataIn+0x5c>)
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	50c8      	str	r0, [r1, r3]
    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800e06a:	33a8      	adds	r3, #168	@ 0xa8
 800e06c:	58eb      	ldr	r3, [r5, r3]
 800e06e:	691d      	ldr	r5, [r3, #16]
 800e070:	4285      	cmp	r5, r0
 800e072:	d0f3      	beq.n	800e05c <USBD_CDC_DataIn+0x34>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e074:	0023      	movs	r3, r4
 800e076:	2482      	movs	r4, #130	@ 0x82
 800e078:	00a4      	lsls	r4, r4, #2
 800e07a:	4a03      	ldr	r2, [pc, #12]	@ (800e088 <USBD_CDC_DataIn+0x60>)
 800e07c:	5909      	ldr	r1, [r1, r4]
 800e07e:	47a8      	blx	r5
 800e080:	e7ec      	b.n	800e05c <USBD_CDC_DataIn+0x34>
 800e082:	46c0      	nop			@ (mov r8, r8)
 800e084:	20002048 	.word	0x20002048
 800e088:	20002258 	.word	0x20002258

0800e08c <USBD_CDC_Setup>:
{
 800e08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e08e:	000d      	movs	r5, r1
  uint16_t status_info = 0U;
 800e090:	466a      	mov	r2, sp
 800e092:	1d91      	adds	r1, r2, #6
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e094:	782a      	ldrb	r2, [r5, #0]
  uint8_t ifalt = 0U;
 800e096:	466b      	mov	r3, sp
{
 800e098:	0004      	movs	r4, r0
 800e09a:	2660      	movs	r6, #96	@ 0x60
  uint8_t ifalt = 0U;
 800e09c:	2000      	movs	r0, #0
 800e09e:	0017      	movs	r7, r2
 800e0a0:	3305      	adds	r3, #5
  uint16_t status_info = 0U;
 800e0a2:	8008      	strh	r0, [r1, #0]
 800e0a4:	4037      	ands	r7, r6
  uint8_t ifalt = 0U;
 800e0a6:	7018      	strb	r0, [r3, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0a8:	4232      	tst	r2, r6
 800e0aa:	d02e      	beq.n	800e10a <USBD_CDC_Setup+0x7e>
 800e0ac:	2f20      	cmp	r7, #32
 800e0ae:	d13d      	bne.n	800e12c <USBD_CDC_Setup+0xa0>
    if (req->wLength != 0U)
 800e0b0:	88eb      	ldrh	r3, [r5, #6]
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800e0b2:	7869      	ldrb	r1, [r5, #1]
    if (req->wLength != 0U)
 800e0b4:	4283      	cmp	r3, r0
 800e0b6:	d020      	beq.n	800e0fa <USBD_CDC_Setup+0x6e>
      if ((req->bmRequest & 0x80U) != 0U)
 800e0b8:	b252      	sxtb	r2, r2
 800e0ba:	4e26      	ldr	r6, [pc, #152]	@ (800e154 <USBD_CDC_Setup+0xc8>)
 800e0bc:	4282      	cmp	r2, r0
 800e0be:	da10      	bge.n	800e0e2 <USBD_CDC_Setup+0x56>
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800e0c0:	22af      	movs	r2, #175	@ 0xaf
 800e0c2:	0092      	lsls	r2, r2, #2
 800e0c4:	58a2      	ldr	r2, [r4, r2]
 800e0c6:	6897      	ldr	r7, [r2, #8]
 800e0c8:	0032      	movs	r2, r6
 800e0ca:	47b8      	blx	r7
        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e0cc:	88eb      	ldrh	r3, [r5, #6]
 800e0ce:	1c1a      	adds	r2, r3, #0
 800e0d0:	2b07      	cmp	r3, #7
 800e0d2:	d900      	bls.n	800e0d6 <USBD_CDC_Setup+0x4a>
 800e0d4:	2207      	movs	r2, #7
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800e0d6:	0031      	movs	r1, r6
 800e0d8:	b292      	uxth	r2, r2
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e0da:	0020      	movs	r0, r4
 800e0dc:	f001 f832 	bl	800f144 <USBD_CtlSendData>
 800e0e0:	e009      	b.n	800e0f6 <USBD_CDC_Setup+0x6a>
        hcdc->CmdOpCode = req->bRequest;
 800e0e2:	2280      	movs	r2, #128	@ 0x80
 800e0e4:	0092      	lsls	r2, r2, #2
 800e0e6:	54b1      	strb	r1, [r6, r2]
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e0e8:	4a1b      	ldr	r2, [pc, #108]	@ (800e158 <USBD_CDC_Setup+0xcc>)
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800e0ea:	0031      	movs	r1, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e0ec:	54b3      	strb	r3, [r6, r2]
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800e0ee:	0020      	movs	r0, r4
 800e0f0:	001a      	movs	r2, r3
 800e0f2:	f001 f83d 	bl	800f170 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800e0f6:	2000      	movs	r0, #0
}
 800e0f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800e0fa:	22af      	movs	r2, #175	@ 0xaf
 800e0fc:	0092      	lsls	r2, r2, #2
 800e0fe:	58a2      	ldr	r2, [r4, r2]
 800e100:	0018      	movs	r0, r3
 800e102:	6894      	ldr	r4, [r2, #8]
 800e104:	002a      	movs	r2, r5
 800e106:	47a0      	blx	r4
 800e108:	e7f5      	b.n	800e0f6 <USBD_CDC_Setup+0x6a>
    switch (req->bRequest)
 800e10a:	7868      	ldrb	r0, [r5, #1]
 800e10c:	280b      	cmp	r0, #11
 800e10e:	d80d      	bhi.n	800e12c <USBD_CDC_Setup+0xa0>
 800e110:	f7f2 f802 	bl	8000118 <__gnu_thumb1_case_sqi>
 800e114:	0c0cf106 	.word	0x0c0cf106
 800e118:	0c0c0c0c 	.word	0x0c0c0c0c
 800e11c:	1a120c0c 	.word	0x1a120c0c
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e120:	23a7      	movs	r3, #167	@ 0xa7
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	5ce3      	ldrb	r3, [r4, r3]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e126:	2202      	movs	r2, #2
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d0d6      	beq.n	800e0da <USBD_CDC_Setup+0x4e>
      USBD_CtlError(pdev, req);
 800e12c:	0020      	movs	r0, r4
 800e12e:	0029      	movs	r1, r5
 800e130:	f000 ffe1 	bl	800f0f6 <USBD_CtlError>
        ret = USBD_FAIL;
 800e134:	2003      	movs	r0, #3
 800e136:	e7df      	b.n	800e0f8 <USBD_CDC_Setup+0x6c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e138:	22a7      	movs	r2, #167	@ 0xa7
 800e13a:	0092      	lsls	r2, r2, #2
 800e13c:	5ca2      	ldrb	r2, [r4, r2]
 800e13e:	2a03      	cmp	r2, #3
 800e140:	d1f4      	bne.n	800e12c <USBD_CDC_Setup+0xa0>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e142:	0019      	movs	r1, r3
 800e144:	3a02      	subs	r2, #2
 800e146:	e7c8      	b.n	800e0da <USBD_CDC_Setup+0x4e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e148:	23a7      	movs	r3, #167	@ 0xa7
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	5ce3      	ldrb	r3, [r4, r3]
 800e14e:	2b03      	cmp	r3, #3
 800e150:	d0d1      	beq.n	800e0f6 <USBD_CDC_Setup+0x6a>
 800e152:	e7eb      	b.n	800e12c <USBD_CDC_Setup+0xa0>
 800e154:	20002048 	.word	0x20002048
 800e158:	00000201 	.word	0x00000201

0800e15c <USBD_CDC_DeInit>:
{
 800e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800e15e:	4d16      	ldr	r5, [pc, #88]	@ (800e1b8 <USBD_CDC_DeInit+0x5c>)
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800e160:	260f      	movs	r6, #15
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800e162:	7829      	ldrb	r1, [r5, #0]
{
 800e164:	0004      	movs	r4, r0
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800e166:	f001 f8fe 	bl	800f366 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800e16a:	2214      	movs	r2, #20
 800e16c:	782b      	ldrb	r3, [r5, #0]
 800e16e:	2500      	movs	r5, #0
 800e170:	4033      	ands	r3, r6
 800e172:	4353      	muls	r3, r2
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800e174:	4f11      	ldr	r7, [pc, #68]	@ (800e1bc <USBD_CDC_DeInit+0x60>)
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800e176:	18e3      	adds	r3, r4, r3
 800e178:	849d      	strh	r5, [r3, #36]	@ 0x24
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800e17a:	7839      	ldrb	r1, [r7, #0]
 800e17c:	0020      	movs	r0, r4
 800e17e:	f001 f8f2 	bl	800f366 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800e182:	2214      	movs	r2, #20
 800e184:	783b      	ldrb	r3, [r7, #0]
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800e186:	4f0e      	ldr	r7, [pc, #56]	@ (800e1c0 <USBD_CDC_DeInit+0x64>)
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800e188:	4033      	ands	r3, r6
 800e18a:	4353      	muls	r3, r2
 800e18c:	18e3      	adds	r3, r4, r3
 800e18e:	3365      	adds	r3, #101	@ 0x65
 800e190:	33ff      	adds	r3, #255	@ 0xff
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800e192:	7839      	ldrb	r1, [r7, #0]
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800e194:	801d      	strh	r5, [r3, #0]
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800e196:	0020      	movs	r0, r4
 800e198:	f001 f8e5 	bl	800f366 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800e19c:	2214      	movs	r2, #20
 800e19e:	783b      	ldrb	r3, [r7, #0]
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800e1a0:	0028      	movs	r0, r5
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800e1a2:	4033      	ands	r3, r6
 800e1a4:	4353      	muls	r3, r2
 800e1a6:	18e3      	adds	r3, r4, r3
 800e1a8:	625d      	str	r5, [r3, #36]	@ 0x24
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800e1aa:	23af      	movs	r3, #175	@ 0xaf
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	58e3      	ldr	r3, [r4, r3]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	4798      	blx	r3
}
 800e1b4:	0028      	movs	r0, r5
 800e1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1b8:	20002269 	.word	0x20002269
 800e1bc:	20002268 	.word	0x20002268
 800e1c0:	20002267 	.word	0x20002267

0800e1c4 <USBD_CDC_Init>:
{
 800e1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800e1c6:	4d34      	ldr	r5, [pc, #208]	@ (800e298 <USBD_CDC_Init+0xd4>)
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1c8:	7c03      	ldrb	r3, [r0, #16]
{
 800e1ca:	0004      	movs	r4, r0
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800e1cc:	7829      	ldrb	r1, [r5, #0]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d14e      	bne.n	800e270 <USBD_CDC_Init+0xac>
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800e1d2:	2380      	movs	r3, #128	@ 0x80
 800e1d4:	2202      	movs	r2, #2
 800e1d6:	009b      	lsls	r3, r3, #2
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800e1d8:	260f      	movs	r6, #15
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800e1da:	f001 f8b8 	bl	800f34e <USBD_LL_OpenEP>
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800e1de:	782b      	ldrb	r3, [r5, #0]
 800e1e0:	2514      	movs	r5, #20
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	4033      	ands	r3, r6
 800e1e6:	436b      	muls	r3, r5
 800e1e8:	18e3      	adds	r3, r4, r3
 800e1ea:	849a      	strh	r2, [r3, #36]	@ 0x24
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800e1ec:	2380      	movs	r3, #128	@ 0x80
 800e1ee:	4f2b      	ldr	r7, [pc, #172]	@ (800e29c <USBD_CDC_Init+0xd8>)
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	7839      	ldrb	r1, [r7, #0]
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800e1f4:	1892      	adds	r2, r2, r2
 800e1f6:	0020      	movs	r0, r4
 800e1f8:	f001 f8a9 	bl	800f34e <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	783b      	ldrb	r3, [r7, #0]
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e200:	0020      	movs	r0, r4
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800e202:	4033      	ands	r3, r6
 800e204:	436b      	muls	r3, r5
 800e206:	18e3      	adds	r3, r4, r3
 800e208:	3365      	adds	r3, #101	@ 0x65
 800e20a:	33ff      	adds	r3, #255	@ 0xff
 800e20c:	801a      	strh	r2, [r3, #0]
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e20e:	4b24      	ldr	r3, [pc, #144]	@ (800e2a0 <USBD_CDC_Init+0xdc>)
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e210:	2203      	movs	r2, #3
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	4033      	ands	r3, r6
 800e216:	435d      	muls	r5, r3
 800e218:	2310      	movs	r3, #16
 800e21a:	1965      	adds	r5, r4, r5
 800e21c:	84eb      	strh	r3, [r5, #38]	@ 0x26
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e21e:	4d20      	ldr	r5, [pc, #128]	@ (800e2a0 <USBD_CDC_Init+0xdc>)
 800e220:	2308      	movs	r3, #8
 800e222:	7829      	ldrb	r1, [r5, #0]
 800e224:	f001 f893 	bl	800f34e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800e228:	230f      	movs	r3, #15
 800e22a:	782a      	ldrb	r2, [r5, #0]
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800e22c:	2000      	movs	r0, #0
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800e22e:	401a      	ands	r2, r3
 800e230:	3305      	adds	r3, #5
 800e232:	4353      	muls	r3, r2
 800e234:	2201      	movs	r2, #1
 800e236:	18e3      	adds	r3, r4, r3
 800e238:	849a      	strh	r2, [r3, #36]	@ 0x24
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800e23a:	23af      	movs	r3, #175	@ 0xaf
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	58e3      	ldr	r3, [r4, r3]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4798      	blx	r3
    hcdc->TxState = 0U;
 800e244:	2185      	movs	r1, #133	@ 0x85
 800e246:	2300      	movs	r3, #0
 800e248:	2081      	movs	r0, #129	@ 0x81
 800e24a:	4a16      	ldr	r2, [pc, #88]	@ (800e2a4 <USBD_CDC_Init+0xe0>)
 800e24c:	0089      	lsls	r1, r1, #2
 800e24e:	5053      	str	r3, [r2, r1]
    hcdc->RxState = 0U;
 800e250:	3104      	adds	r1, #4
 800e252:	5053      	str	r3, [r2, r1]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e254:	7c21      	ldrb	r1, [r4, #16]
 800e256:	4b11      	ldr	r3, [pc, #68]	@ (800e29c <USBD_CDC_Init+0xd8>)
 800e258:	0080      	lsls	r0, r0, #2
 800e25a:	2900      	cmp	r1, #0
 800e25c:	d118      	bne.n	800e290 <USBD_CDC_Init+0xcc>
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800e25e:	7819      	ldrb	r1, [r3, #0]
 800e260:	2380      	movs	r3, #128	@ 0x80
 800e262:	009b      	lsls	r3, r3, #2
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800e264:	5812      	ldr	r2, [r2, r0]
 800e266:	0020      	movs	r0, r4
 800e268:	f001 f8aa 	bl	800f3c0 <USBD_LL_PrepareReceive>
}
 800e26c:	2000      	movs	r0, #0
 800e26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800e270:	2340      	movs	r3, #64	@ 0x40
 800e272:	2202      	movs	r2, #2
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800e274:	260f      	movs	r6, #15
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800e276:	f001 f86a 	bl	800f34e <USBD_LL_OpenEP>
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800e27a:	782b      	ldrb	r3, [r5, #0]
 800e27c:	2514      	movs	r5, #20
 800e27e:	2201      	movs	r2, #1
 800e280:	4033      	ands	r3, r6
 800e282:	436b      	muls	r3, r5
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800e284:	4f05      	ldr	r7, [pc, #20]	@ (800e29c <USBD_CDC_Init+0xd8>)
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800e286:	18e3      	adds	r3, r4, r3
 800e288:	849a      	strh	r2, [r3, #36]	@ 0x24
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800e28a:	7839      	ldrb	r1, [r7, #0]
 800e28c:	2340      	movs	r3, #64	@ 0x40
 800e28e:	e7b1      	b.n	800e1f4 <USBD_CDC_Init+0x30>
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800e290:	7819      	ldrb	r1, [r3, #0]
 800e292:	2340      	movs	r3, #64	@ 0x40
 800e294:	e7e6      	b.n	800e264 <USBD_CDC_Init+0xa0>
 800e296:	46c0      	nop			@ (mov r8, r8)
 800e298:	20002269 	.word	0x20002269
 800e29c:	20002268 	.word	0x20002268
 800e2a0:	20002267 	.word	0x20002267
 800e2a4:	20002048 	.word	0x20002048

0800e2a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
 800e2a8:	234b      	movs	r3, #75	@ 0x4b
 800e2aa:	8003      	strh	r3, [r0, #0]
 800e2ac:	4800      	ldr	r0, [pc, #0]	@ (800e2b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800e2ae:	4770      	bx	lr
 800e2b0:	200000b8 	.word	0x200000b8

0800e2b4 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800e2b4:	0003      	movs	r3, r0
  if (fops == NULL)
  {
    return (uint8_t)USBD_FAIL;
 800e2b6:	2003      	movs	r0, #3
  if (fops == NULL)
 800e2b8:	2900      	cmp	r1, #0
 800e2ba:	d003      	beq.n	800e2c4 <USBD_CDC_ACM_RegisterInterface+0x10>
  }

  pdev->pUserData_CDC_ACM = fops;
 800e2bc:	22af      	movs	r2, #175	@ 0xaf

  return (uint8_t)USBD_OK;
 800e2be:	2000      	movs	r0, #0
  pdev->pUserData_CDC_ACM = fops;
 800e2c0:	0092      	lsls	r2, r2, #2
 800e2c2:	5099      	str	r1, [r3, r2]
}
 800e2c4:	4770      	bx	lr
	...

0800e2c8 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e2c8:	b510      	push	{r4, lr}
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;

  hcdc = &CDC_ACM_Class_Data[ch];

  hcdc->TxBuffer = pbuff;
 800e2ca:	2487      	movs	r4, #135	@ 0x87
 800e2cc:	00a4      	lsls	r4, r4, #2
 800e2ce:	4360      	muls	r0, r4
 800e2d0:	4905      	ldr	r1, [pc, #20]	@ (800e2e8 <USBD_CDC_SetTxBuffer+0x20>)
 800e2d2:	1808      	adds	r0, r1, r0
 800e2d4:	2182      	movs	r1, #130	@ 0x82
 800e2d6:	0089      	lsls	r1, r1, #2
 800e2d8:	1841      	adds	r1, r0, r1
 800e2da:	600a      	str	r2, [r1, #0]
  hcdc->TxLength = length;
 800e2dc:	2284      	movs	r2, #132	@ 0x84
 800e2de:	0092      	lsls	r2, r2, #2
 800e2e0:	1880      	adds	r0, r0, r2
 800e2e2:	6003      	str	r3, [r0, #0]

  return (uint8_t)USBD_OK;
}
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	bd10      	pop	{r4, pc}
 800e2e8:	20002048 	.word	0x20002048

0800e2ec <USBD_CDC_SetRxBuffer>:
{
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;

  hcdc = &CDC_ACM_Class_Data[ch];

  hcdc->RxBuffer = pbuff;
 800e2ec:	2387      	movs	r3, #135	@ 0x87
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	4343      	muls	r3, r0
 800e2f2:	4902      	ldr	r1, [pc, #8]	@ (800e2fc <USBD_CDC_SetRxBuffer+0x10>)

  return (uint8_t)USBD_OK;
}
 800e2f4:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800e2f6:	505a      	str	r2, [r3, r1]
}
 800e2f8:	4770      	bx	lr
 800e2fa:	46c0      	nop			@ (mov r8, r8)
 800e2fc:	2000224c 	.word	0x2000224c

0800e300 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800e300:	b570      	push	{r4, r5, r6, lr}
 800e302:	000e      	movs	r6, r1
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
  USBD_StatusTypeDef ret = USBD_BUSY;

  hcdc = &CDC_ACM_Class_Data[ch];

  if (hcdc->TxState == 0U)
 800e304:	2187      	movs	r1, #135	@ 0x87
 800e306:	0089      	lsls	r1, r1, #2
 800e308:	4341      	muls	r1, r0
 800e30a:	4a10      	ldr	r2, [pc, #64]	@ (800e34c <USBD_CDC_TransmitPacket+0x4c>)
{
 800e30c:	0003      	movs	r3, r0
  if (hcdc->TxState == 0U)
 800e30e:	1852      	adds	r2, r2, r1
 800e310:	2185      	movs	r1, #133	@ 0x85
 800e312:	0089      	lsls	r1, r1, #2
 800e314:	1851      	adds	r1, r2, r1
 800e316:	680d      	ldr	r5, [r1, #0]
 800e318:	2001      	movs	r0, #1
 800e31a:	2d00      	cmp	r5, #0
 800e31c:	d114      	bne.n	800e348 <USBD_CDC_TransmitPacket+0x48>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800e31e:	2414      	movs	r4, #20
    hcdc->TxState = 1U;
 800e320:	6008      	str	r0, [r1, #0]
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800e322:	490b      	ldr	r1, [pc, #44]	@ (800e350 <USBD_CDC_TransmitPacket+0x50>)
 800e324:	300e      	adds	r0, #14
 800e326:	5cc9      	ldrb	r1, [r1, r3]
 800e328:	2384      	movs	r3, #132	@ 0x84
 800e32a:	4008      	ands	r0, r1
 800e32c:	4344      	muls	r4, r0

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800e32e:	2082      	movs	r0, #130	@ 0x82
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	18d3      	adds	r3, r2, r3
 800e334:	681b      	ldr	r3, [r3, #0]
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800e336:	0080      	lsls	r0, r0, #2
 800e338:	1812      	adds	r2, r2, r0
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800e33a:	1934      	adds	r4, r6, r4
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800e33c:	0030      	movs	r0, r6
 800e33e:	6812      	ldr	r2, [r2, #0]
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800e340:	61a3      	str	r3, [r4, #24]
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800e342:	f001 f834 	bl	800f3ae <USBD_LL_Transmit>

    ret = USBD_OK;
 800e346:	0028      	movs	r0, r5
  }

  return (uint8_t)ret;
}
 800e348:	bd70      	pop	{r4, r5, r6, pc}
 800e34a:	46c0      	nop			@ (mov r8, r8)
 800e34c:	20002048 	.word	0x20002048
 800e350:	20002269 	.word	0x20002269

0800e354 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800e354:	0003      	movs	r3, r0
 800e356:	b510      	push	{r4, lr}
  hcdc = &CDC_ACM_Class_Data[ch];

  if (pdev->dev_speed == USBD_SPEED_HIGH)
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800e358:	4a09      	ldr	r2, [pc, #36]	@ (800e380 <USBD_CDC_ReceivePacket+0x2c>)
{
 800e35a:	0008      	movs	r0, r1
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800e35c:	5cd1      	ldrb	r1, [r2, r3]
 800e35e:	2287      	movs	r2, #135	@ 0x87
 800e360:	0092      	lsls	r2, r2, #2
 800e362:	4353      	muls	r3, r2
 800e364:	4a07      	ldr	r2, [pc, #28]	@ (800e384 <USBD_CDC_ReceivePacket+0x30>)
 800e366:	589a      	ldr	r2, [r3, r2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e368:	7c03      	ldrb	r3, [r0, #16]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d105      	bne.n	800e37a <USBD_CDC_ReceivePacket+0x26>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800e36e:	2380      	movs	r3, #128	@ 0x80
 800e370:	009b      	lsls	r3, r3, #2
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800e372:	f001 f825 	bl	800f3c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800e376:	2000      	movs	r0, #0
 800e378:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800e37a:	2340      	movs	r3, #64	@ 0x40
 800e37c:	e7f9      	b.n	800e372 <USBD_CDC_ReceivePacket+0x1e>
 800e37e:	46c0      	nop			@ (mov r8, r8)
 800e380:	20002268 	.word	0x20002268
 800e384:	2000224c 	.word	0x2000224c

0800e388 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800e388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e38a:	ac05      	add	r4, sp, #20
 800e38c:	7825      	ldrb	r5, [r4, #0]
 800e38e:	ac06      	add	r4, sp, #24
 800e390:	7826      	ldrb	r6, [r4, #0]
 800e392:	ac07      	add	r4, sp, #28
 800e394:	7824      	ldrb	r4, [r4, #0]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
  {
    desc[2] = cmd_itf;
    desc[16] = str_idx;
    desc[10] = cmd_itf;
    desc[26] = com_itf;
 800e396:	1d07      	adds	r7, r0, #4
    desc[2] = cmd_itf;
 800e398:	72c1      	strb	r1, [r0, #11]
    desc[16] = str_idx;
 800e39a:	7644      	strb	r4, [r0, #25]
    desc[10] = cmd_itf;
 800e39c:	74c1      	strb	r1, [r0, #19]
    desc[26] = com_itf;
 800e39e:	77fa      	strb	r2, [r7, #31]
    desc[34] = cmd_itf;
    desc[35] = com_itf;
    desc[38] = cmd_ep;
    desc[45] = com_itf;
    desc[54] = out_ep;
    desc[61] = in_ep;
 800e3a0:	3046      	adds	r0, #70	@ 0x46
    desc[34] = cmd_itf;
 800e3a2:	3727      	adds	r7, #39	@ 0x27
    desc[38] = cmd_ep;
 800e3a4:	713d      	strb	r5, [r7, #4]
    desc[54] = out_ep;
 800e3a6:	753e      	strb	r6, [r7, #20]
    desc[34] = cmd_itf;
 800e3a8:	7039      	strb	r1, [r7, #0]
    desc[35] = com_itf;
 800e3aa:	707a      	strb	r2, [r7, #1]
    desc[45] = com_itf;
 800e3ac:	72fa      	strb	r2, [r7, #11]
    desc[61] = in_ep;
 800e3ae:	7003      	strb	r3, [r0, #0]

    desc += 66;
    CDC_IN_EP[i] = in_ep;
 800e3b0:	4806      	ldr	r0, [pc, #24]	@ (800e3cc <USBD_Update_CDC_ACM_DESC+0x44>)
 800e3b2:	7003      	strb	r3, [r0, #0]
    CDC_OUT_EP[i] = out_ep;
 800e3b4:	4b06      	ldr	r3, [pc, #24]	@ (800e3d0 <USBD_Update_CDC_ACM_DESC+0x48>)
 800e3b6:	701e      	strb	r6, [r3, #0]
    CDC_CMD_EP[i] = cmd_ep;
 800e3b8:	4b06      	ldr	r3, [pc, #24]	@ (800e3d4 <USBD_Update_CDC_ACM_DESC+0x4c>)
 800e3ba:	701d      	strb	r5, [r3, #0]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800e3bc:	4b06      	ldr	r3, [pc, #24]	@ (800e3d8 <USBD_Update_CDC_ACM_DESC+0x50>)
 800e3be:	7019      	strb	r1, [r3, #0]
    CDC_COM_ITF_NBR[i] = com_itf;
 800e3c0:	4b06      	ldr	r3, [pc, #24]	@ (800e3dc <USBD_Update_CDC_ACM_DESC+0x54>)
 800e3c2:	701a      	strb	r2, [r3, #0]
    CDC_STR_DESC_IDX[i] = str_idx;
 800e3c4:	4b06      	ldr	r3, [pc, #24]	@ (800e3e0 <USBD_Update_CDC_ACM_DESC+0x58>)
 800e3c6:	701c      	strb	r4, [r3, #0]
    str_idx++;

    cmd_itf += 2;
    com_itf = cmd_itf + 1;
  }
}
 800e3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ca:	46c0      	nop			@ (mov r8, r8)
 800e3cc:	20002269 	.word	0x20002269
 800e3d0:	20002268 	.word	0x20002268
 800e3d4:	20002267 	.word	0x20002267
 800e3d8:	20002266 	.word	0x20002266
 800e3dc:	20002265 	.word	0x20002265
 800e3e0:	20002264 	.word	0x20002264

0800e3e4 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e3e4:	b570      	push	{r4, r5, r6, lr}
 800e3e6:	000d      	movs	r5, r1
 800e3e8:	0004      	movs	r4, r0
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800e3ea:	4b05      	ldr	r3, [pc, #20]	@ (800e400 <USBD_COMPOSITE_Init+0x1c>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800e3f0:	4b04      	ldr	r3, [pc, #16]	@ (800e404 <USBD_COMPOSITE_Init+0x20>)
 800e3f2:	0029      	movs	r1, r5
 800e3f4:	0020      	movs	r0, r4
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4798      	blx	r3
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
}
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	bd70      	pop	{r4, r5, r6, pc}
 800e3fe:	46c0      	nop			@ (mov r8, r8)
 800e400:	20000150 	.word	0x20000150
 800e404:	2000027c 	.word	0x2000027c

0800e408 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e408:	b570      	push	{r4, r5, r6, lr}
 800e40a:	000d      	movs	r5, r1
 800e40c:	0004      	movs	r4, r0
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800e40e:	4b05      	ldr	r3, [pc, #20]	@ (800e424 <USBD_COMPOSITE_DeInit+0x1c>)
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 800e414:	4b04      	ldr	r3, [pc, #16]	@ (800e428 <USBD_COMPOSITE_DeInit+0x20>)
 800e416:	0029      	movs	r1, r5
 800e418:	0020      	movs	r0, r4
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	4798      	blx	r3
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
}
 800e41e:	2000      	movs	r0, #0
 800e420:	bd70      	pop	{r4, r5, r6, pc}
 800e422:	46c0      	nop			@ (mov r8, r8)
 800e424:	20000150 	.word	0x20000150
 800e428:	2000027c 	.word	0x2000027c

0800e42c <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e42c:	b510      	push	{r4, lr}
 800e42e:	0004      	movs	r4, r0
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800e430:	4b04      	ldr	r3, [pc, #16]	@ (800e444 <USBD_COMPOSITE_EP0_RxReady+0x18>)
 800e432:	691b      	ldr	r3, [r3, #16]
 800e434:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800e436:	4b04      	ldr	r3, [pc, #16]	@ (800e448 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 800e438:	0020      	movs	r0, r4
 800e43a:	691b      	ldr	r3, [r3, #16]
 800e43c:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 800e43e:	2000      	movs	r0, #0
 800e440:	bd10      	pop	{r4, pc}
 800e442:	46c0      	nop			@ (mov r8, r8)
 800e444:	20000150 	.word	0x20000150
 800e448:	2000027c 	.word	0x2000027c

0800e44c <USBD_COMPOSITE_EP0_TxReady>:
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 800e44c:	2000      	movs	r0, #0
 800e44e:	4770      	bx	lr

0800e450 <USBD_COMPOSITE_IsoINIncomplete>:
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 800e450:	2000      	movs	r0, #0
 800e452:	4770      	bx	lr

0800e454 <USBD_COMPOSITE_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800e454:	236b      	movs	r3, #107	@ 0x6b
 800e456:	8003      	strh	r3, [r0, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800e458:	4800      	ldr	r0, [pc, #0]	@ (800e45c <USBD_COMPOSITE_GetHSCfgDesc+0x8>)
}
 800e45a:	4770      	bx	lr
 800e45c:	200022ac 	.word	0x200022ac

0800e460 <USBD_COMPOSITE_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800e460:	236b      	movs	r3, #107	@ 0x6b
 800e462:	8003      	strh	r3, [r0, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800e464:	4800      	ldr	r0, [pc, #0]	@ (800e468 <USBD_COMPOSITE_GetFSCfgDesc+0x8>)
}
 800e466:	4770      	bx	lr
 800e468:	20002317 	.word	0x20002317

0800e46c <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800e46c:	230a      	movs	r3, #10
 800e46e:	8003      	strh	r3, [r0, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800e470:	4800      	ldr	r0, [pc, #0]	@ (800e474 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x8>)
}
 800e472:	4770      	bx	lr
 800e474:	20000198 	.word	0x20000198

0800e478 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800e478:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800e47a:	4b14      	ldr	r3, [pc, #80]	@ (800e4cc <USBD_COMPOSITE_GetUsrStringDesc+0x54>)
{
 800e47c:	000d      	movs	r5, r1
  if (index <= USBD_Track_String_Index)
 800e47e:	781b      	ldrb	r3, [r3, #0]
{
 800e480:	0016      	movs	r6, r2
    return USBD_StrDesc;
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800e482:	2000      	movs	r0, #0
  if (index <= USBD_Track_String_Index)
 800e484:	428b      	cmp	r3, r1
 800e486:	d31e      	bcc.n	800e4c6 <USBD_COMPOSITE_GetUsrStringDesc+0x4e>
    char str_buffer[16] = "";
 800e488:	0001      	movs	r1, r0
 800e48a:	2210      	movs	r2, #16
 800e48c:	4668      	mov	r0, sp
 800e48e:	f001 ff1b 	bl	80102c8 <memset>
      if (index == CDC_STR_DESC_IDX[i])
 800e492:	4b0f      	ldr	r3, [pc, #60]	@ (800e4d0 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 800e494:	4c0f      	ldr	r4, [pc, #60]	@ (800e4d4 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>)
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	42ab      	cmp	r3, r5
 800e49a:	d10a      	bne.n	800e4b2 <USBD_COMPOSITE_GetUsrStringDesc+0x3a>
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800e49c:	2110      	movs	r1, #16
 800e49e:	4a0e      	ldr	r2, [pc, #56]	@ (800e4d8 <USBD_COMPOSITE_GetUsrStringDesc+0x60>)
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	4668      	mov	r0, sp
 800e4a4:	f001 fe80 	bl	80101a8 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800e4a8:	0032      	movs	r2, r6
 800e4aa:	0021      	movs	r1, r4
 800e4ac:	4668      	mov	r0, sp
 800e4ae:	f000 fe2c 	bl	800f10a <USBD_GetString>
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800e4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e4dc <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	42ab      	cmp	r3, r5
 800e4b8:	d104      	bne.n	800e4c4 <USBD_COMPOSITE_GetUsrStringDesc+0x4c>
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800e4ba:	0032      	movs	r2, r6
 800e4bc:	0021      	movs	r1, r4
 800e4be:	4808      	ldr	r0, [pc, #32]	@ (800e4e0 <USBD_COMPOSITE_GetUsrStringDesc+0x68>)
 800e4c0:	f000 fe23 	bl	800f10a <USBD_GetString>
    return USBD_StrDesc;
 800e4c4:	0020      	movs	r0, r4
  }
}
 800e4c6:	b004      	add	sp, #16
 800e4c8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ca:	46c0      	nop			@ (mov r8, r8)
 800e4cc:	200001a2 	.word	0x200001a2
 800e4d0:	20002264 	.word	0x20002264
 800e4d4:	2000226a 	.word	0x2000226a
 800e4d8:	08010ffd 	.word	0x08010ffd
 800e4dc:	2000239c 	.word	0x2000239c
 800e4e0:	0801100d 	.word	0x0801100d

0800e4e4 <USBD_COMPOSITE_Setup>:
{
 800e4e4:	b510      	push	{r4, lr}
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800e4e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e514 <USBD_COMPOSITE_Setup+0x30>)
 800e4e8:	790a      	ldrb	r2, [r1, #4]
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d003      	beq.n	800e4f8 <USBD_COMPOSITE_Setup+0x14>
 800e4f0:	4b09      	ldr	r3, [pc, #36]	@ (800e518 <USBD_COMPOSITE_Setup+0x34>)
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d105      	bne.n	800e504 <USBD_COMPOSITE_Setup+0x20>
      return USBD_CDC_ACM.Setup(pdev, req);
 800e4f8:	4b08      	ldr	r3, [pc, #32]	@ (800e51c <USBD_COMPOSITE_Setup+0x38>)
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800e4fa:	689b      	ldr	r3, [r3, #8]
 800e4fc:	4798      	blx	r3
 800e4fe:	0003      	movs	r3, r0
}
 800e500:	0018      	movs	r0, r3
 800e502:	bd10      	pop	{r4, pc}
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800e504:	4b06      	ldr	r3, [pc, #24]	@ (800e520 <USBD_COMPOSITE_Setup+0x3c>)
 800e506:	781c      	ldrb	r4, [r3, #0]
  return USBD_FAIL;
 800e508:	2303      	movs	r3, #3
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800e50a:	4294      	cmp	r4, r2
 800e50c:	d1f8      	bne.n	800e500 <USBD_COMPOSITE_Setup+0x1c>
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800e50e:	4b05      	ldr	r3, [pc, #20]	@ (800e524 <USBD_COMPOSITE_Setup+0x40>)
 800e510:	e7f3      	b.n	800e4fa <USBD_COMPOSITE_Setup+0x16>
 800e512:	46c0      	nop			@ (mov r8, r8)
 800e514:	20002266 	.word	0x20002266
 800e518:	20002265 	.word	0x20002265
 800e51c:	20000150 	.word	0x20000150
 800e520:	2000239d 	.word	0x2000239d
 800e524:	2000027c 	.word	0x2000027c

0800e528 <USBD_COMPOSITE_DataIn>:
{
 800e528:	b510      	push	{r4, lr}
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800e52a:	4b0c      	ldr	r3, [pc, #48]	@ (800e55c <USBD_COMPOSITE_DataIn+0x34>)
 800e52c:	781a      	ldrb	r2, [r3, #0]
 800e52e:	237f      	movs	r3, #127	@ 0x7f
 800e530:	401a      	ands	r2, r3
 800e532:	4291      	cmp	r1, r2
 800e534:	d004      	beq.n	800e540 <USBD_COMPOSITE_DataIn+0x18>
 800e536:	4a0a      	ldr	r2, [pc, #40]	@ (800e560 <USBD_COMPOSITE_DataIn+0x38>)
 800e538:	7812      	ldrb	r2, [r2, #0]
 800e53a:	401a      	ands	r2, r3
 800e53c:	4291      	cmp	r1, r2
 800e53e:	d105      	bne.n	800e54c <USBD_COMPOSITE_DataIn+0x24>
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800e540:	4b08      	ldr	r3, [pc, #32]	@ (800e564 <USBD_COMPOSITE_DataIn+0x3c>)
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800e542:	695b      	ldr	r3, [r3, #20]
 800e544:	4798      	blx	r3
 800e546:	0003      	movs	r3, r0
}
 800e548:	0018      	movs	r0, r3
 800e54a:	bd10      	pop	{r4, pc}
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800e54c:	4a06      	ldr	r2, [pc, #24]	@ (800e568 <USBD_COMPOSITE_DataIn+0x40>)
 800e54e:	7812      	ldrb	r2, [r2, #0]
 800e550:	401a      	ands	r2, r3
  return USBD_FAIL;
 800e552:	2303      	movs	r3, #3
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800e554:	4291      	cmp	r1, r2
 800e556:	d1f7      	bne.n	800e548 <USBD_COMPOSITE_DataIn+0x20>
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800e558:	4b04      	ldr	r3, [pc, #16]	@ (800e56c <USBD_COMPOSITE_DataIn+0x44>)
 800e55a:	e7f2      	b.n	800e542 <USBD_COMPOSITE_DataIn+0x1a>
 800e55c:	20002269 	.word	0x20002269
 800e560:	20002267 	.word	0x20002267
 800e564:	20000150 	.word	0x20000150
 800e568:	200002b9 	.word	0x200002b9
 800e56c:	2000027c 	.word	0x2000027c

0800e570 <USBD_COMPOSITE_DataOut>:
{
 800e570:	b510      	push	{r4, lr}
    if (epnum == CDC_OUT_EP[i])
 800e572:	4b08      	ldr	r3, [pc, #32]	@ (800e594 <USBD_COMPOSITE_DataOut+0x24>)
{
 800e574:	000a      	movs	r2, r1
    if (epnum == CDC_OUT_EP[i])
 800e576:	7819      	ldrb	r1, [r3, #0]
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800e578:	4b07      	ldr	r3, [pc, #28]	@ (800e598 <USBD_COMPOSITE_DataOut+0x28>)
    if (epnum == CDC_OUT_EP[i])
 800e57a:	4291      	cmp	r1, r2
 800e57c:	d005      	beq.n	800e58a <USBD_COMPOSITE_DataOut+0x1a>
  if (epnum == CUSTOM_HID_OUT_EP)
 800e57e:	4b07      	ldr	r3, [pc, #28]	@ (800e59c <USBD_COMPOSITE_DataOut+0x2c>)
 800e580:	7819      	ldrb	r1, [r3, #0]
  return USBD_FAIL;
 800e582:	2303      	movs	r3, #3
  if (epnum == CUSTOM_HID_OUT_EP)
 800e584:	4291      	cmp	r1, r2
 800e586:	d103      	bne.n	800e590 <USBD_COMPOSITE_DataOut+0x20>
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800e588:	4b05      	ldr	r3, [pc, #20]	@ (800e5a0 <USBD_COMPOSITE_DataOut+0x30>)
 800e58a:	699b      	ldr	r3, [r3, #24]
 800e58c:	4798      	blx	r3
 800e58e:	0003      	movs	r3, r0
}
 800e590:	0018      	movs	r0, r3
 800e592:	bd10      	pop	{r4, pc}
 800e594:	20002268 	.word	0x20002268
 800e598:	20000150 	.word	0x20000150
 800e59c:	200002b8 	.word	0x200002b8
 800e5a0:	2000027c 	.word	0x2000027c

0800e5a4 <USBD_COMPOSITE_IsoOutIncomplete>:
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	4770      	bx	lr

0800e5a8 <USBD_COMPOSITE_SOF>:
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	4770      	bx	lr

0800e5ac <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
 800e5ac:	236b      	movs	r3, #107	@ 0x6b
 800e5ae:	8003      	strh	r3, [r0, #0]
 800e5b0:	4800      	ldr	r0, [pc, #0]	@ (800e5b4 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x8>)
 800e5b2:	4770      	bx	lr
 800e5b4:	200022ac 	.word	0x200022ac

0800e5b8 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800e5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t len = 0;
 800e5ba:	2416      	movs	r4, #22
 800e5bc:	2000      	movs	r0, #0
{
 800e5be:	b089      	sub	sp, #36	@ 0x24
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800e5c0:	4f39      	ldr	r7, [pc, #228]	@ (800e6a8 <USBD_COMPOSITE_Mount_Class+0xf0>)
  uint16_t len = 0;
 800e5c2:	ab02      	add	r3, sp, #8
 800e5c4:	18e4      	adds	r4, r4, r3
 800e5c6:	8020      	strh	r0, [r4, #0]
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800e5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ca:	0020      	movs	r0, r4
 800e5cc:	4798      	blx	r3
 800e5ce:	0006      	movs	r6, r0
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800e5d0:	4d36      	ldr	r5, [pc, #216]	@ (800e6ac <USBD_COMPOSITE_Mount_Class+0xf4>)
 800e5d2:	2281      	movs	r2, #129	@ 0x81
 800e5d4:	782b      	ldrb	r3, [r5, #0]
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	2301      	movs	r3, #1
 800e5dc:	f000 f9c0 	bl	800e960 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800e5e0:	0031      	movs	r1, r6
 800e5e2:	8822      	ldrh	r2, [r4, #0]
 800e5e4:	3109      	adds	r1, #9
 800e5e6:	3a09      	subs	r2, #9
 800e5e8:	4831      	ldr	r0, [pc, #196]	@ (800e6b0 <USBD_COMPOSITE_Mount_Class+0xf8>)
 800e5ea:	f001 fea1 	bl	8010330 <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800e5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f0:	0020      	movs	r0, r4
 800e5f2:	4798      	blx	r3
 800e5f4:	0006      	movs	r6, r0
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800e5f6:	782b      	ldrb	r3, [r5, #0]
 800e5f8:	2281      	movs	r2, #129	@ 0x81
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	2301      	movs	r3, #1
 800e600:	f000 f9ae 	bl	800e960 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800e604:	0031      	movs	r1, r6
 800e606:	8822      	ldrh	r2, [r4, #0]
 800e608:	3109      	adds	r1, #9
 800e60a:	3a09      	subs	r2, #9
 800e60c:	4829      	ldr	r0, [pc, #164]	@ (800e6b4 <USBD_COMPOSITE_Mount_Class+0xfc>)
 800e60e:	f001 fe8f 	bl	8010330 <memcpy>

  in_ep_track += 1;
  out_ep_track += 1;
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
 800e612:	782b      	ldrb	r3, [r5, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800e614:	4e28      	ldr	r6, [pc, #160]	@ (800e6b8 <USBD_COMPOSITE_Mount_Class+0x100>)
  USBD_Track_String_Index += 1;
 800e616:	3301      	adds	r3, #1
 800e618:	702b      	strb	r3, [r5, #0]
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800e61a:	0020      	movs	r0, r4
 800e61c:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 800e61e:	4798      	blx	r3
  USBD_Update_CDC_ACM_DESC(ptr,
 800e620:	782b      	ldrb	r3, [r5, #0]
 800e622:	2702      	movs	r7, #2
 800e624:	9302      	str	r3, [sp, #8]
 800e626:	2383      	movs	r3, #131	@ 0x83
 800e628:	003a      	movs	r2, r7
 800e62a:	9300      	str	r3, [sp, #0]
 800e62c:	2101      	movs	r1, #1
 800e62e:	3b01      	subs	r3, #1
 800e630:	9701      	str	r7, [sp, #4]
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800e632:	9005      	str	r0, [sp, #20]
  USBD_Update_CDC_ACM_DESC(ptr,
 800e634:	f7ff fea8 	bl	800e388 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800e638:	8822      	ldrh	r2, [r4, #0]
 800e63a:	9905      	ldr	r1, [sp, #20]
 800e63c:	3a09      	subs	r2, #9
 800e63e:	3109      	adds	r1, #9
 800e640:	481e      	ldr	r0, [pc, #120]	@ (800e6bc <USBD_COMPOSITE_Mount_Class+0x104>)
 800e642:	f001 fe75 	bl	8010330 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800e646:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800e648:	0020      	movs	r0, r4
 800e64a:	4798      	blx	r3
  USBD_Update_CDC_ACM_DESC(ptr,
 800e64c:	782b      	ldrb	r3, [r5, #0]
  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800e64e:	0006      	movs	r6, r0
  USBD_Update_CDC_ACM_DESC(ptr,
 800e650:	9302      	str	r3, [sp, #8]
 800e652:	2383      	movs	r3, #131	@ 0x83
 800e654:	003a      	movs	r2, r7
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	2101      	movs	r1, #1
 800e65a:	3b01      	subs	r3, #1
 800e65c:	9701      	str	r7, [sp, #4]
 800e65e:	f7ff fe93 	bl	800e388 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800e662:	0031      	movs	r1, r6
 800e664:	8822      	ldrh	r2, [r4, #0]
 800e666:	3109      	adds	r1, #9
 800e668:	3a09      	subs	r2, #9
 800e66a:	4815      	ldr	r0, [pc, #84]	@ (800e6c0 <USBD_COMPOSITE_Mount_Class+0x108>)
 800e66c:	f001 fe60 	bl	8010330 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800e670:	782b      	ldrb	r3, [r5, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800e672:	4a14      	ldr	r2, [pc, #80]	@ (800e6c4 <USBD_COMPOSITE_Mount_Class+0x10c>)
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800e674:	3301      	adds	r3, #1
 800e676:	702b      	strb	r3, [r5, #0]
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800e678:	4b13      	ldr	r3, [pc, #76]	@ (800e6c8 <USBD_COMPOSITE_Mount_Class+0x110>)
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800e67a:	2109      	movs	r1, #9
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800e67c:	601a      	str	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800e67e:	4a13      	ldr	r2, [pc, #76]	@ (800e6cc <USBD_COMPOSITE_Mount_Class+0x114>)
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
  ptr[3] = HIBYTE(CFG_SIZE);
 800e680:	2000      	movs	r0, #0
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800e682:	605a      	str	r2, [r3, #4]
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800e684:	2232      	movs	r2, #50	@ 0x32
 800e686:	721a      	strb	r2, [r3, #8]
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800e688:	4b11      	ldr	r3, [pc, #68]	@ (800e6d0 <USBD_COMPOSITE_Mount_Class+0x118>)
 800e68a:	7019      	strb	r1, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800e68c:	3162      	adds	r1, #98	@ 0x62
 800e68e:	7099      	strb	r1, [r3, #2]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800e690:	2103      	movs	r1, #3
 800e692:	7119      	strb	r1, [r3, #4]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800e694:	3902      	subs	r1, #2
 800e696:	7159      	strb	r1, [r3, #5]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800e698:	21c0      	movs	r1, #192	@ 0xc0
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800e69a:	705f      	strb	r7, [r3, #1]
  ptr[3] = HIBYTE(CFG_SIZE);
 800e69c:	70d8      	strb	r0, [r3, #3]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800e69e:	7198      	strb	r0, [r3, #6]
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800e6a0:	71d9      	strb	r1, [r3, #7]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800e6a2:	721a      	strb	r2, [r3, #8]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800e6a4:	b009      	add	sp, #36	@ 0x24
 800e6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6a8:	2000027c 	.word	0x2000027c
 800e6ac:	200001a2 	.word	0x200001a2
 800e6b0:	20002320 	.word	0x20002320
 800e6b4:	200022b5 	.word	0x200022b5
 800e6b8:	20000150 	.word	0x20000150
 800e6bc:	20002340 	.word	0x20002340
 800e6c0:	200022d5 	.word	0x200022d5
 800e6c4:	006b0209 	.word	0x006b0209
 800e6c8:	200022ac 	.word	0x200022ac
 800e6cc:	c0000103 	.word	0xc0000103
 800e6d0:	20002317 	.word	0x20002317

0800e6d4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800e6d4:	2329      	movs	r3, #41	@ 0x29
 800e6d6:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800e6d8:	4800      	ldr	r0, [pc, #0]	@ (800e6dc <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
}
 800e6da:	4770      	bx	lr
 800e6dc:	20000250 	.word	0x20000250

0800e6e0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800e6e0:	2329      	movs	r3, #41	@ 0x29
 800e6e2:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800e6e4:	4800      	ldr	r0, [pc, #0]	@ (800e6e8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
}
 800e6e6:	4770      	bx	lr
 800e6e8:	20000224 	.word	0x20000224

0800e6ec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800e6ec:	2329      	movs	r3, #41	@ 0x29
 800e6ee:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800e6f0:	4800      	ldr	r0, [pc, #0]	@ (800e6f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
}
 800e6f2:	4770      	bx	lr
 800e6f4:	200001f8 	.word	0x200001f8

0800e6f8 <USBD_CUSTOM_HID_DataIn>:
{
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800e6f8:	23b6      	movs	r3, #182	@ 0xb6
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	58c3      	ldr	r3, [r0, r3]
 800e6fe:	2000      	movs	r0, #0
 800e700:	7518      	strb	r0, [r3, #20]

  return (uint8_t)USBD_OK;
}
 800e702:	4770      	bx	lr

0800e704 <USBD_CUSTOM_HID_DataOut>:
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800e704:	22b6      	movs	r2, #182	@ 0xb6
 800e706:	0092      	lsls	r2, r2, #2
 800e708:	5882      	ldr	r2, [r0, r2]
{
 800e70a:	0003      	movs	r3, r0
 800e70c:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
 800e70e:	2003      	movs	r0, #3
  if (pdev->pClassData_HID_Custom == NULL)
 800e710:	2a00      	cmp	r2, #0
 800e712:	d007      	beq.n	800e724 <USBD_CUSTOM_HID_DataOut+0x20>

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800e714:	7851      	ldrb	r1, [r2, #1]
 800e716:	7810      	ldrb	r0, [r2, #0]
 800e718:	22b7      	movs	r2, #183	@ 0xb7
 800e71a:	0092      	lsls	r2, r2, #2
 800e71c:	589b      	ldr	r3, [r3, r2]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e722:	2000      	movs	r0, #0
}
 800e724:	bd10      	pop	{r4, pc}

0800e726 <USBD_CUSTOM_HID_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800e726:	22b6      	movs	r2, #182	@ 0xb6
 800e728:	0092      	lsls	r2, r2, #2
{
 800e72a:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800e72c:	5884      	ldr	r4, [r0, r2]
{
 800e72e:	0003      	movs	r3, r0

  if (hhid == NULL)
  {
    return (uint8_t)USBD_FAIL;
 800e730:	2003      	movs	r0, #3
  if (hhid == NULL)
 800e732:	2c00      	cmp	r4, #0
 800e734:	d003      	beq.n	800e73e <USBD_CUSTOM_HID_EP0_RxReady+0x18>
  }

  if (hhid->IsReportAvailable == 1U)
 800e736:	6922      	ldr	r2, [r4, #16]
 800e738:	2a01      	cmp	r2, #1
 800e73a:	d001      	beq.n	800e740 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
  }

  return (uint8_t)USBD_OK;
 800e73c:	2000      	movs	r0, #0
}
 800e73e:	bd10      	pop	{r4, pc}
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800e740:	22b7      	movs	r2, #183	@ 0xb7
 800e742:	0092      	lsls	r2, r2, #2
 800e744:	589b      	ldr	r3, [r3, r2]
 800e746:	7861      	ldrb	r1, [r4, #1]
 800e748:	68db      	ldr	r3, [r3, #12]
 800e74a:	7820      	ldrb	r0, [r4, #0]
 800e74c:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800e74e:	2300      	movs	r3, #0
 800e750:	6123      	str	r3, [r4, #16]
 800e752:	e7f3      	b.n	800e73c <USBD_CUSTOM_HID_EP0_RxReady+0x16>

0800e754 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800e754:	230a      	movs	r3, #10
 800e756:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800e758:	4800      	ldr	r0, [pc, #0]	@ (800e75c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
}
 800e75a:	4770      	bx	lr
 800e75c:	200001e0 	.word	0x200001e0

0800e760 <USBD_CUSTOM_HID_Setup>:
{
 800e760:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint16_t status_info = 0U;
 800e762:	466a      	mov	r2, sp
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800e764:	23b6      	movs	r3, #182	@ 0xb6
  uint16_t status_info = 0U;
 800e766:	1d95      	adds	r5, r2, #6
 800e768:	2200      	movs	r2, #0
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	58c3      	ldr	r3, [r0, r3]
{
 800e76e:	0004      	movs	r4, r0
  uint16_t status_info = 0U;
 800e770:	802a      	strh	r2, [r5, #0]
  if (hhid == NULL)
 800e772:	4293      	cmp	r3, r2
 800e774:	d041      	beq.n	800e7fa <USBD_CUSTOM_HID_Setup+0x9a>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e776:	7808      	ldrb	r0, [r1, #0]
 800e778:	3260      	adds	r2, #96	@ 0x60
 800e77a:	0006      	movs	r6, r0
 800e77c:	4016      	ands	r6, r2
 800e77e:	4210      	tst	r0, r2
 800e780:	d025      	beq.n	800e7ce <USBD_CUSTOM_HID_Setup+0x6e>
 800e782:	2e20      	cmp	r6, #32
 800e784:	d136      	bne.n	800e7f4 <USBD_CUSTOM_HID_Setup+0x94>
    switch (req->bRequest)
 800e786:	7848      	ldrb	r0, [r1, #1]
 800e788:	3802      	subs	r0, #2
 800e78a:	2809      	cmp	r0, #9
 800e78c:	d832      	bhi.n	800e7f4 <USBD_CUSTOM_HID_Setup+0x94>
 800e78e:	f7f1 fccd 	bl	800012c <__gnu_thumb1_case_uqi>
 800e792:	0913      	.short	0x0913
 800e794:	31313131 	.word	0x31313131
 800e798:	050f1631 	.word	0x050f1631
      hhid->Protocol = (uint8_t)(req->wValue);
 800e79c:	788a      	ldrb	r2, [r1, #2]
 800e79e:	605a      	str	r2, [r3, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7a0:	2000      	movs	r0, #0
}
 800e7a2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800e7a4:	1d19      	adds	r1, r3, #4
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	0020      	movs	r0, r4
 800e7aa:	f000 fccb 	bl	800f144 <USBD_CtlSendData>
      break;
 800e7ae:	e7f7      	b.n	800e7a0 <USBD_CUSTOM_HID_Setup+0x40>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800e7b0:	884a      	ldrh	r2, [r1, #2]
 800e7b2:	0a12      	lsrs	r2, r2, #8
 800e7b4:	609a      	str	r2, [r3, #8]
      break;
 800e7b6:	e7f3      	b.n	800e7a0 <USBD_CUSTOM_HID_Setup+0x40>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800e7b8:	3308      	adds	r3, #8
 800e7ba:	0019      	movs	r1, r3
 800e7bc:	e7f3      	b.n	800e7a6 <USBD_CUSTOM_HID_Setup+0x46>
      hhid->IsReportAvailable = 1U;
 800e7be:	2201      	movs	r2, #1
 800e7c0:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800e7c2:	88ca      	ldrh	r2, [r1, #6]
 800e7c4:	0020      	movs	r0, r4
 800e7c6:	0019      	movs	r1, r3
 800e7c8:	f000 fcd2 	bl	800f170 <USBD_CtlPrepareRx>
      break;
 800e7cc:	e7e8      	b.n	800e7a0 <USBD_CUSTOM_HID_Setup+0x40>
    switch (req->bRequest)
 800e7ce:	7848      	ldrb	r0, [r1, #1]
 800e7d0:	280b      	cmp	r0, #11
 800e7d2:	d80f      	bhi.n	800e7f4 <USBD_CUSTOM_HID_Setup+0x94>
 800e7d4:	f7f1 fca0 	bl	8000118 <__gnu_thumb1_case_sqi>
 800e7d8:	0e0ee406 	.word	0x0e0ee406
 800e7dc:	0e130e0e 	.word	0x0e130e0e
 800e7e0:	382f0e0e 	.word	0x382f0e0e
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7e4:	23a7      	movs	r3, #167	@ 0xa7
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	5ce3      	ldrb	r3, [r4, r3]
 800e7ea:	2b03      	cmp	r3, #3
 800e7ec:	d102      	bne.n	800e7f4 <USBD_CUSTOM_HID_Setup+0x94>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e7ee:	2202      	movs	r2, #2
 800e7f0:	0029      	movs	r1, r5
 800e7f2:	e7d9      	b.n	800e7a8 <USBD_CUSTOM_HID_Setup+0x48>
        USBD_CtlError(pdev, req);
 800e7f4:	0020      	movs	r0, r4
 800e7f6:	f000 fc7e 	bl	800f0f6 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800e7fa:	2003      	movs	r0, #3
 800e7fc:	e7d1      	b.n	800e7a2 <USBD_CUSTOM_HID_Setup+0x42>
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800e7fe:	8848      	ldrh	r0, [r1, #2]
 800e800:	0a00      	lsrs	r0, r0, #8
 800e802:	2822      	cmp	r0, #34	@ 0x22
 800e804:	d10b      	bne.n	800e81e <USBD_CUSTOM_HID_Setup+0xbe>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800e806:	88cb      	ldrh	r3, [r1, #6]
 800e808:	1c1a      	adds	r2, r3, #0
 800e80a:	2b21      	cmp	r3, #33	@ 0x21
 800e80c:	d900      	bls.n	800e810 <USBD_CUSTOM_HID_Setup+0xb0>
 800e80e:	2221      	movs	r2, #33	@ 0x21
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800e810:	23b7      	movs	r3, #183	@ 0xb7
 800e812:	009b      	lsls	r3, r3, #2
 800e814:	58e3      	ldr	r3, [r4, r3]
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800e816:	b292      	uxth	r2, r2
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800e818:	681b      	ldr	r3, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e81a:	0019      	movs	r1, r3
 800e81c:	e7c4      	b.n	800e7a8 <USBD_CUSTOM_HID_Setup+0x48>
  uint8_t *pbuf = NULL;
 800e81e:	2300      	movs	r3, #0
  uint16_t len = 0U;
 800e820:	001a      	movs	r2, r3
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800e822:	2821      	cmp	r0, #33	@ 0x21
 800e824:	d1f9      	bne.n	800e81a <USBD_CUSTOM_HID_Setup+0xba>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800e826:	88cb      	ldrh	r3, [r1, #6]
 800e828:	1c1a      	adds	r2, r3, #0
 800e82a:	2b09      	cmp	r3, #9
 800e82c:	d900      	bls.n	800e830 <USBD_CUSTOM_HID_Setup+0xd0>
 800e82e:	2209      	movs	r2, #9
          pbuf = USBD_CUSTOM_HID_Desc;
 800e830:	4b09      	ldr	r3, [pc, #36]	@ (800e858 <USBD_CUSTOM_HID_Setup+0xf8>)
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800e832:	b292      	uxth	r2, r2
 800e834:	e7f1      	b.n	800e81a <USBD_CUSTOM_HID_Setup+0xba>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e836:	22a7      	movs	r2, #167	@ 0xa7
 800e838:	0092      	lsls	r2, r2, #2
 800e83a:	5ca2      	ldrb	r2, [r4, r2]
 800e83c:	2a03      	cmp	r2, #3
 800e83e:	d1d9      	bne.n	800e7f4 <USBD_CUSTOM_HID_Setup+0x94>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800e840:	330c      	adds	r3, #12
 800e842:	0019      	movs	r1, r3
 800e844:	3a02      	subs	r2, #2
 800e846:	e7af      	b.n	800e7a8 <USBD_CUSTOM_HID_Setup+0x48>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e848:	22a7      	movs	r2, #167	@ 0xa7
 800e84a:	0092      	lsls	r2, r2, #2
 800e84c:	5ca2      	ldrb	r2, [r4, r2]
 800e84e:	2a03      	cmp	r2, #3
 800e850:	d1d0      	bne.n	800e7f4 <USBD_CUSTOM_HID_Setup+0x94>
        hhid->AltSetting = (uint8_t)(req->wValue);
 800e852:	788a      	ldrb	r2, [r1, #2]
 800e854:	60da      	str	r2, [r3, #12]
 800e856:	e7a3      	b.n	800e7a0 <USBD_CUSTOM_HID_Setup+0x40>
 800e858:	200001ec 	.word	0x200001ec

0800e85c <USBD_CUSTOM_HID_DeInit>:
{
 800e85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800e85e:	4d13      	ldr	r5, [pc, #76]	@ (800e8ac <USBD_CUSTOM_HID_DeInit+0x50>)
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800e860:	260f      	movs	r6, #15
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800e862:	7829      	ldrb	r1, [r5, #0]
{
 800e864:	0004      	movs	r4, r0
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800e866:	f000 fd7e 	bl	800f366 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800e86a:	2214      	movs	r2, #20
 800e86c:	782b      	ldrb	r3, [r5, #0]
 800e86e:	2500      	movs	r5, #0
 800e870:	4033      	ands	r3, r6
 800e872:	4353      	muls	r3, r2
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800e874:	4f0e      	ldr	r7, [pc, #56]	@ (800e8b0 <USBD_CUSTOM_HID_DeInit+0x54>)
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800e876:	18e3      	adds	r3, r4, r3
 800e878:	625d      	str	r5, [r3, #36]	@ 0x24
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800e87a:	0020      	movs	r0, r4
 800e87c:	7839      	ldrb	r1, [r7, #0]
 800e87e:	f000 fd72 	bl	800f366 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800e882:	2214      	movs	r2, #20
 800e884:	783b      	ldrb	r3, [r7, #0]
 800e886:	4033      	ands	r3, r6
  if (pdev->pClassData_HID_Custom != NULL)
 800e888:	26b6      	movs	r6, #182	@ 0xb6
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800e88a:	4353      	muls	r3, r2
 800e88c:	18e3      	adds	r3, r4, r3
 800e88e:	33fc      	adds	r3, #252	@ 0xfc
  if (pdev->pClassData_HID_Custom != NULL)
 800e890:	00b6      	lsls	r6, r6, #2
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800e892:	669d      	str	r5, [r3, #104]	@ 0x68
  if (pdev->pClassData_HID_Custom != NULL)
 800e894:	59a3      	ldr	r3, [r4, r6]
 800e896:	42ab      	cmp	r3, r5
 800e898:	d005      	beq.n	800e8a6 <USBD_CUSTOM_HID_DeInit+0x4a>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800e89a:	23b7      	movs	r3, #183	@ 0xb7
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	58e3      	ldr	r3, [r4, r3]
 800e8a0:	689b      	ldr	r3, [r3, #8]
 800e8a2:	4798      	blx	r3
    pdev->pClassData_HID_Custom = NULL;
 800e8a4:	51a5      	str	r5, [r4, r6]
}
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8aa:	46c0      	nop			@ (mov r8, r8)
 800e8ac:	200002b9 	.word	0x200002b9
 800e8b0:	200002b8 	.word	0x200002b8

0800e8b4 <USBD_CUSTOM_HID_Init>:
  pdev->pClassData_HID_Custom = (void *)hhid;
 800e8b4:	23b6      	movs	r3, #182	@ 0xb6
{
 800e8b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800e8b8:	4f21      	ldr	r7, [pc, #132]	@ (800e940 <USBD_CUSTOM_HID_Init+0x8c>)
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800e8ba:	260f      	movs	r6, #15
  pdev->pClassData_HID_Custom = (void *)hhid;
 800e8bc:	4a21      	ldr	r2, [pc, #132]	@ (800e944 <USBD_CUSTOM_HID_Init+0x90>)
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800e8be:	7839      	ldrb	r1, [r7, #0]
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800e8c0:	2514      	movs	r5, #20
  pdev->pClassData_HID_Custom = (void *)hhid;
 800e8c2:	009b      	lsls	r3, r3, #2
{
 800e8c4:	0004      	movs	r4, r0
  pdev->pClassData_HID_Custom = (void *)hhid;
 800e8c6:	50c2      	str	r2, [r0, r3]
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800e8c8:	0008      	movs	r0, r1
  pdev->pClassData_HID_Custom = (void *)hhid;
 800e8ca:	9201      	str	r2, [sp, #4]
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800e8cc:	2205      	movs	r2, #5
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800e8ce:	4b1e      	ldr	r3, [pc, #120]	@ (800e948 <USBD_CUSTOM_HID_Init+0x94>)
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800e8d0:	4030      	ands	r0, r6
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800e8d6:	4368      	muls	r0, r5
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800e8d8:	4033      	ands	r3, r6
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800e8da:	436b      	muls	r3, r5
 800e8dc:	18e3      	adds	r3, r4, r3
 800e8de:	3367      	adds	r3, #103	@ 0x67
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800e8e0:	1820      	adds	r0, r4, r0
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800e8e2:	33ff      	adds	r3, #255	@ 0xff
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800e8e4:	84c2      	strh	r2, [r0, #38]	@ 0x26
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800e8e6:	801a      	strh	r2, [r3, #0]
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800e8e8:	0020      	movs	r0, r4
 800e8ea:	2302      	movs	r3, #2
 800e8ec:	3a02      	subs	r2, #2
 800e8ee:	f000 fd2e 	bl	800f34e <USBD_LL_OpenEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800e8f2:	783b      	ldrb	r3, [r7, #0]
 800e8f4:	2701      	movs	r7, #1
 800e8f6:	4033      	ands	r3, r6
 800e8f8:	436b      	muls	r3, r5
 800e8fa:	18e3      	adds	r3, r4, r3
 800e8fc:	849f      	strh	r7, [r3, #36]	@ 0x24
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800e8fe:	9b00      	ldr	r3, [sp, #0]
 800e900:	2203      	movs	r2, #3
 800e902:	7819      	ldrb	r1, [r3, #0]
 800e904:	0020      	movs	r0, r4
 800e906:	2302      	movs	r3, #2
 800e908:	f000 fd21 	bl	800f34e <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800e90c:	9b00      	ldr	r3, [sp, #0]
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	4033      	ands	r3, r6
 800e912:	435d      	muls	r5, r3
 800e914:	1965      	adds	r5, r4, r5
 800e916:	3565      	adds	r5, #101	@ 0x65
 800e918:	35ff      	adds	r5, #255	@ 0xff
 800e91a:	802f      	strh	r7, [r5, #0]
  hhid->state = CUSTOM_HID_IDLE;
 800e91c:	2500      	movs	r5, #0
 800e91e:	9b01      	ldr	r3, [sp, #4]
 800e920:	751d      	strb	r5, [r3, #20]
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800e922:	23b7      	movs	r3, #183	@ 0xb7
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	58e3      	ldr	r3, [r4, r3]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	4798      	blx	r3
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800e92c:	9b00      	ldr	r3, [sp, #0]
 800e92e:	0020      	movs	r0, r4
 800e930:	7819      	ldrb	r1, [r3, #0]
 800e932:	9a01      	ldr	r2, [sp, #4]
 800e934:	2302      	movs	r3, #2
 800e936:	f000 fd43 	bl	800f3c0 <USBD_LL_PrepareReceive>
}
 800e93a:	0028      	movs	r0, r5
 800e93c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e93e:	46c0      	nop			@ (mov r8, r8)
 800e940:	200002b9 	.word	0x200002b9
 800e944:	20002384 	.word	0x20002384
 800e948:	200002b8 	.word	0x200002b8

0800e94c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800e94c:	0003      	movs	r3, r0
  if (fops == NULL)
  {
    return (uint8_t)USBD_FAIL;
 800e94e:	2003      	movs	r0, #3
  if (fops == NULL)
 800e950:	2900      	cmp	r1, #0
 800e952:	d003      	beq.n	800e95c <USBD_CUSTOM_HID_RegisterInterface+0x10>
  }

  pdev->pUserData_HID_Custom = fops;
 800e954:	22b7      	movs	r2, #183	@ 0xb7

  return (uint8_t)USBD_OK;
 800e956:	2000      	movs	r0, #0
  pdev->pUserData_HID_Custom = fops;
 800e958:	0092      	lsls	r2, r2, #2
 800e95a:	5099      	str	r1, [r3, r2]
}
 800e95c:	4770      	bx	lr
	...

0800e960 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800e960:	b510      	push	{r4, lr}
 800e962:	ac02      	add	r4, sp, #8
 800e964:	7824      	ldrb	r4, [r4, #0]
  desc[11] = itf_no;
  desc[17] = str_idx;
  desc[29] = in_ep;
 800e966:	7742      	strb	r2, [r0, #29]
  desc[11] = itf_no;
 800e968:	72c1      	strb	r1, [r0, #11]
  desc[17] = str_idx;
 800e96a:	7444      	strb	r4, [r0, #17]
  desc[36] = out_ep;
 800e96c:	3005      	adds	r0, #5
 800e96e:	77c3      	strb	r3, [r0, #31]

  CUSTOM_HID_IN_EP = in_ep;
 800e970:	4804      	ldr	r0, [pc, #16]	@ (800e984 <USBD_Update_HID_Custom_DESC+0x24>)
 800e972:	7002      	strb	r2, [r0, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800e974:	4a04      	ldr	r2, [pc, #16]	@ (800e988 <USBD_Update_HID_Custom_DESC+0x28>)
 800e976:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800e978:	4b04      	ldr	r3, [pc, #16]	@ (800e98c <USBD_Update_HID_Custom_DESC+0x2c>)
 800e97a:	7019      	strb	r1, [r3, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800e97c:	4b04      	ldr	r3, [pc, #16]	@ (800e990 <USBD_Update_HID_Custom_DESC+0x30>)
 800e97e:	701c      	strb	r4, [r3, #0]
}
 800e980:	bd10      	pop	{r4, pc}
 800e982:	46c0      	nop			@ (mov r8, r8)
 800e984:	200002b9 	.word	0x200002b9
 800e988:	200002b8 	.word	0x200002b8
 800e98c:	2000239d 	.word	0x2000239d
 800e990:	2000239c 	.word	0x2000239c

0800e994 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e994:	0003      	movs	r3, r0
 800e996:	b510      	push	{r4, lr}
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e998:	2003      	movs	r0, #3
  if (pdev == NULL)
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d012      	beq.n	800e9c4 <USBD_Init+0x30>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e99e:	24ae      	movs	r4, #174	@ 0xae
 800e9a0:	2000      	movs	r0, #0
 800e9a2:	00a4      	lsls	r4, r4, #2
 800e9a4:	5118      	str	r0, [r3, r4]
  pdev->pConfDesc = NULL;
 800e9a6:	3460      	adds	r4, #96	@ 0x60
 800e9a8:	5118      	str	r0, [r3, r4]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e9aa:	4281      	cmp	r1, r0
 800e9ac:	d002      	beq.n	800e9b4 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 800e9ae:	20ad      	movs	r0, #173	@ 0xad
 800e9b0:	0080      	lsls	r0, r0, #2
 800e9b2:	5019      	str	r1, [r3, r0]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9b4:	21a7      	movs	r1, #167	@ 0xa7
 800e9b6:	2001      	movs	r0, #1
 800e9b8:	0089      	lsls	r1, r1, #2
 800e9ba:	5458      	strb	r0, [r3, r1]
  pdev->id = id;

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e9bc:	0018      	movs	r0, r3
  pdev->id = id;
 800e9be:	701a      	strb	r2, [r3, #0]
  ret = USBD_LL_Init(pdev);
 800e9c0:	f000 fc4c 	bl	800f25c <USBD_LL_Init>

  return ret;
}
 800e9c4:	bd10      	pop	{r4, pc}

0800e9c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e9c6:	b513      	push	{r0, r1, r4, lr}
  uint16_t len = 0U;
 800e9c8:	466b      	mov	r3, sp
{
 800e9ca:	0004      	movs	r4, r0
  uint16_t len = 0U;
 800e9cc:	1d98      	adds	r0, r3, #6
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	8003      	strh	r3, [r0, #0]
  if (pclass == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e9d2:	3303      	adds	r3, #3
  if (pclass == NULL)
 800e9d4:	2900      	cmp	r1, #0
 800e9d6:	d00d      	beq.n	800e9f4 <USBD_RegisterClass+0x2e>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e9d8:	23ae      	movs	r3, #174	@ 0xae
 800e9da:	009b      	lsls	r3, r3, #2
 800e9dc:	50e1      	str	r1, [r4, r3]

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9de:	7c23      	ldrb	r3, [r4, #16]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d109      	bne.n	800e9f8 <USBD_RegisterClass+0x32>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800e9e4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d003      	beq.n	800e9f2 <USBD_RegisterClass+0x2c>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e9ea:	4798      	blx	r3
 800e9ec:	23c6      	movs	r3, #198	@ 0xc6
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	50e0      	str	r0, [r4, r3]
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
  }

  return USBD_OK;
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	0018      	movs	r0, r3
 800e9f6:	bd16      	pop	{r1, r2, r4, pc}
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e9f8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800e9fa:	e7f4      	b.n	800e9e6 <USBD_RegisterClass+0x20>

0800e9fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e9fc:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e9fe:	f000 fc9d 	bl	800f33c <USBD_LL_Start>
}
 800ea02:	bd10      	pop	{r4, pc}

0800ea04 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800ea04:	23ae      	movs	r3, #174	@ 0xae
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	58c2      	ldr	r2, [r0, r3]
{
 800ea0a:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ea0c:	2303      	movs	r3, #3
  if (pdev->pClass != NULL)
 800ea0e:	2a00      	cmp	r2, #0
 800ea10:	d002      	beq.n	800ea18 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ea12:	6813      	ldr	r3, [r2, #0]
 800ea14:	4798      	blx	r3
 800ea16:	0003      	movs	r3, r0
  }

  return ret;
}
 800ea18:	0018      	movs	r0, r3
 800ea1a:	bd10      	pop	{r4, pc}

0800ea1c <USBD_ClrClassConfig>:
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ea1c:	23ae      	movs	r3, #174	@ 0xae
 800ea1e:	009b      	lsls	r3, r3, #2
 800ea20:	58c3      	ldr	r3, [r0, r3]
{
 800ea22:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d001      	beq.n	800ea2c <USBD_ClrClassConfig+0x10>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	bd10      	pop	{r4, pc}

0800ea30 <USBD_LL_SetupStage>:
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea30:	4b16      	ldr	r3, [pc, #88]	@ (800ea8c <USBD_LL_SetupStage+0x5c>)
{
 800ea32:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea34:	18c5      	adds	r5, r0, r3
{
 800ea36:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea38:	0028      	movs	r0, r5
 800ea3a:	f000 fb48 	bl	800f0ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ea3e:	23a5      	movs	r3, #165	@ 0xa5
 800ea40:	2201      	movs	r2, #1
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800ea46:	331c      	adds	r3, #28
 800ea48:	5ae2      	ldrh	r2, [r4, r3]
 800ea4a:	3b18      	subs	r3, #24
 800ea4c:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800ea4e:	4b0f      	ldr	r3, [pc, #60]	@ (800ea8c <USBD_LL_SetupStage+0x5c>)
 800ea50:	5ce1      	ldrb	r1, [r4, r3]
 800ea52:	231f      	movs	r3, #31
 800ea54:	400b      	ands	r3, r1
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d008      	beq.n	800ea6c <USBD_LL_SetupStage+0x3c>
 800ea5a:	2b02      	cmp	r3, #2
 800ea5c:	d00b      	beq.n	800ea76 <USBD_LL_SetupStage+0x46>
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d10e      	bne.n	800ea80 <USBD_LL_SetupStage+0x50>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ea62:	0029      	movs	r1, r5
 800ea64:	0020      	movs	r0, r4
 800ea66:	f000 f90d 	bl	800ec84 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800ea6a:	bd70      	pop	{r4, r5, r6, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ea6c:	0029      	movs	r1, r5
 800ea6e:	0020      	movs	r0, r4
 800ea70:	f000 fa68 	bl	800ef44 <USBD_StdItfReq>
      break;
 800ea74:	e7f9      	b.n	800ea6a <USBD_LL_SetupStage+0x3a>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ea76:	0029      	movs	r1, r5
 800ea78:	0020      	movs	r0, r4
 800ea7a:	f000 fa8d 	bl	800ef98 <USBD_StdEPReq>
      break;
 800ea7e:	e7f4      	b.n	800ea6a <USBD_LL_SetupStage+0x3a>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ea80:	237f      	movs	r3, #127	@ 0x7f
 800ea82:	0020      	movs	r0, r4
 800ea84:	4399      	bics	r1, r3
 800ea86:	f000 fc77 	bl	800f378 <USBD_LL_StallEP>
      break;
 800ea8a:	e7ee      	b.n	800ea6a <USBD_LL_SetupStage+0x3a>
 800ea8c:	000002aa 	.word	0x000002aa

0800ea90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ea90:	b510      	push	{r4, lr}
 800ea92:	0004      	movs	r4, r0
 800ea94:	0010      	movs	r0, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ea96:	2900      	cmp	r1, #0
 800ea98:	d127      	bne.n	800eaea <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ea9a:	23a5      	movs	r3, #165	@ 0xa5
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	58e3      	ldr	r3, [r4, r3]
 800eaa0:	2b03      	cmp	r3, #3
 800eaa2:	d10f      	bne.n	800eac4 <USBD_LL_DataOutStage+0x34>
    {
      if (pep->rem_length > pep->maxpacket)
 800eaa4:	0021      	movs	r1, r4
 800eaa6:	3155      	adds	r1, #85	@ 0x55
 800eaa8:	31ff      	adds	r1, #255	@ 0xff
 800eaaa:	688b      	ldr	r3, [r1, #8]
 800eaac:	68ca      	ldr	r2, [r1, #12]
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d90a      	bls.n	800eac8 <USBD_LL_DataOutStage+0x38>
      {
        pep->rem_length -= pep->maxpacket;
 800eab2:	1a9b      	subs	r3, r3, r2
 800eab4:	608b      	str	r3, [r1, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d900      	bls.n	800eabc <USBD_LL_DataOutStage+0x2c>
 800eaba:	001a      	movs	r2, r3
 800eabc:	0001      	movs	r1, r0
 800eabe:	0020      	movs	r0, r4
 800eac0:	f000 fb66 	bl	800f190 <USBD_CtlContinueRx>
        }
      }
    }
  }

  return USBD_OK;
 800eac4:	2000      	movs	r0, #0
}
 800eac6:	bd10      	pop	{r4, pc}
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eac8:	23a7      	movs	r3, #167	@ 0xa7
 800eaca:	009b      	lsls	r3, r3, #2
 800eacc:	5ce3      	ldrb	r3, [r4, r3]
 800eace:	2b03      	cmp	r3, #3
 800ead0:	d107      	bne.n	800eae2 <USBD_LL_DataOutStage+0x52>
          if (pdev->pClass->EP0_RxReady != NULL)
 800ead2:	23ae      	movs	r3, #174	@ 0xae
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	58e3      	ldr	r3, [r4, r3]
 800ead8:	691b      	ldr	r3, [r3, #16]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d001      	beq.n	800eae2 <USBD_LL_DataOutStage+0x52>
            pdev->pClass->EP0_RxReady(pdev);
 800eade:	0020      	movs	r0, r4
 800eae0:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800eae2:	0020      	movs	r0, r4
 800eae4:	f000 fb5c 	bl	800f1a0 <USBD_CtlSendStatus>
 800eae8:	e7ec      	b.n	800eac4 <USBD_LL_DataOutStage+0x34>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaea:	23a7      	movs	r3, #167	@ 0xa7
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	5ce3      	ldrb	r3, [r4, r3]
 800eaf0:	2b03      	cmp	r3, #3
 800eaf2:	d1e7      	bne.n	800eac4 <USBD_LL_DataOutStage+0x34>
      if (pdev->pClass->DataOut != NULL)
 800eaf4:	23ae      	movs	r3, #174	@ 0xae
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	58e3      	ldr	r3, [r4, r3]
 800eafa:	699b      	ldr	r3, [r3, #24]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d0e1      	beq.n	800eac4 <USBD_LL_DataOutStage+0x34>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800eb00:	0020      	movs	r0, r4
 800eb02:	4798      	blx	r3
        if (ret != USBD_OK)
 800eb04:	e7df      	b.n	800eac6 <USBD_LL_DataOutStage+0x36>

0800eb06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eb06:	b570      	push	{r4, r5, r6, lr}
 800eb08:	000d      	movs	r5, r1
 800eb0a:	0004      	movs	r4, r0
 800eb0c:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eb0e:	2d00      	cmp	r5, #0
 800eb10:	d140      	bne.n	800eb94 <USBD_LL_DataInStage+0x8e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eb12:	23a5      	movs	r3, #165	@ 0xa5
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	58c3      	ldr	r3, [r0, r3]
 800eb18:	2b02      	cmp	r3, #2
 800eb1a:	d10d      	bne.n	800eb38 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb1c:	69c3      	ldr	r3, [r0, #28]
 800eb1e:	6a02      	ldr	r2, [r0, #32]
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d912      	bls.n	800eb4a <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 800eb24:	1a9a      	subs	r2, r3, r2
 800eb26:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eb28:	f000 fb1a 	bl	800f160 <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb2c:	002b      	movs	r3, r5
 800eb2e:	002a      	movs	r2, r5
 800eb30:	0029      	movs	r1, r5
 800eb32:	0020      	movs	r0, r4
 800eb34:	f000 fc44 	bl	800f3c0 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800eb38:	23a8      	movs	r3, #168	@ 0xa8
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	5ce2      	ldrb	r2, [r4, r3]
 800eb3e:	2a01      	cmp	r2, #1
 800eb40:	d101      	bne.n	800eb46 <USBD_LL_DataInStage+0x40>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800eb42:	2200      	movs	r2, #0
 800eb44:	54e2      	strb	r2, [r4, r3]
        }
      }
    }
  }

  return USBD_OK;
 800eb46:	2000      	movs	r0, #0
}
 800eb48:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d10d      	bne.n	800eb6a <USBD_LL_DataInStage+0x64>
            (pep->total_length >= pep->maxpacket) &&
 800eb4e:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d80a      	bhi.n	800eb6a <USBD_LL_DataInStage+0x64>
            (pep->total_length < pdev->ep0_data_len))
 800eb54:	26a6      	movs	r6, #166	@ 0xa6
 800eb56:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 800eb58:	5983      	ldr	r3, [r0, r6]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d205      	bcs.n	800eb6a <USBD_LL_DataInStage+0x64>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eb5e:	002a      	movs	r2, r5
 800eb60:	0029      	movs	r1, r5
 800eb62:	f000 fafd 	bl	800f160 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eb66:	51a5      	str	r5, [r4, r6]
 800eb68:	e7e0      	b.n	800eb2c <USBD_LL_DataInStage+0x26>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb6a:	23a7      	movs	r3, #167	@ 0xa7
 800eb6c:	009b      	lsls	r3, r3, #2
 800eb6e:	5ce3      	ldrb	r3, [r4, r3]
 800eb70:	2b03      	cmp	r3, #3
 800eb72:	d107      	bne.n	800eb84 <USBD_LL_DataInStage+0x7e>
            if (pdev->pClass->EP0_TxSent != NULL)
 800eb74:	23ae      	movs	r3, #174	@ 0xae
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	58e3      	ldr	r3, [r4, r3]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d001      	beq.n	800eb84 <USBD_LL_DataInStage+0x7e>
              pdev->pClass->EP0_TxSent(pdev);
 800eb80:	0020      	movs	r0, r4
 800eb82:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb84:	2180      	movs	r1, #128	@ 0x80
 800eb86:	0020      	movs	r0, r4
 800eb88:	f000 fbf6 	bl	800f378 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eb8c:	0020      	movs	r0, r4
 800eb8e:	f000 fb13 	bl	800f1b8 <USBD_CtlReceiveStatus>
 800eb92:	e7d1      	b.n	800eb38 <USBD_LL_DataInStage+0x32>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb94:	23a7      	movs	r3, #167	@ 0xa7
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	5cc3      	ldrb	r3, [r0, r3]
 800eb9a:	2b03      	cmp	r3, #3
 800eb9c:	d1d3      	bne.n	800eb46 <USBD_LL_DataInStage+0x40>
      if (pdev->pClass->DataIn != NULL)
 800eb9e:	23ae      	movs	r3, #174	@ 0xae
 800eba0:	009b      	lsls	r3, r3, #2
 800eba2:	58c3      	ldr	r3, [r0, r3]
 800eba4:	695b      	ldr	r3, [r3, #20]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d0cd      	beq.n	800eb46 <USBD_LL_DataInStage+0x40>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ebaa:	0029      	movs	r1, r5
 800ebac:	4798      	blx	r3
        if (ret != USBD_OK)
 800ebae:	e7cb      	b.n	800eb48 <USBD_LL_DataInStage+0x42>

0800ebb0 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebb0:	23a7      	movs	r3, #167	@ 0xa7
 800ebb2:	2201      	movs	r2, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 800ebb4:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebb6:	009b      	lsls	r3, r3, #2
{
 800ebb8:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebba:	54c2      	strb	r2, [r0, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800ebbc:	3b08      	subs	r3, #8
 800ebbe:	50c1      	str	r1, [r0, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 800ebc0:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 800ebc2:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800ebc4:	50c1      	str	r1, [r0, r3]

  if (pdev->pClass == NULL)
 800ebc6:	3314      	adds	r3, #20
 800ebc8:	58c3      	ldr	r3, [r0, r3]
{
 800ebca:	0004      	movs	r4, r0
  {
    return USBD_FAIL;
 800ebcc:	2003      	movs	r0, #3
  if (pdev->pClass == NULL)
 800ebce:	428b      	cmp	r3, r1
 800ebd0:	d01b      	beq.n	800ec0a <USBD_LL_Reset+0x5a>
  }

	if (pdev->pClass->DeInit != NULL)
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	428b      	cmp	r3, r1
 800ebd6:	d001      	beq.n	800ebdc <USBD_LL_Reset+0x2c>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ebd8:	0020      	movs	r0, r4
 800ebda:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ebdc:	2200      	movs	r2, #0
 800ebde:	2340      	movs	r3, #64	@ 0x40
 800ebe0:	0011      	movs	r1, r2
 800ebe2:	0020      	movs	r0, r4
 800ebe4:	f000 fbb3 	bl	800f34e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ebe8:	23b2      	movs	r3, #178	@ 0xb2
 800ebea:	2601      	movs	r6, #1
 800ebec:	005b      	lsls	r3, r3, #1
 800ebee:	52e6      	strh	r6, [r4, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ebf0:	0023      	movs	r3, r4
 800ebf2:	2540      	movs	r5, #64	@ 0x40
 800ebf4:	33fc      	adds	r3, #252	@ 0xfc
 800ebf6:	665d      	str	r5, [r3, #100]	@ 0x64

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	002b      	movs	r3, r5
 800ebfc:	2180      	movs	r1, #128	@ 0x80
 800ebfe:	0020      	movs	r0, r4
 800ec00:	f000 fba5 	bl	800f34e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 800ec04:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ec06:	84a6      	strh	r6, [r4, #36]	@ 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec08:	6225      	str	r5, [r4, #32]
}
 800ec0a:	bd70      	pop	{r4, r5, r6, pc}

0800ec0c <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800ec0c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800ec0e:	2000      	movs	r0, #0
 800ec10:	4770      	bx	lr
	...

0800ec14 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800ec14:	22a7      	movs	r2, #167	@ 0xa7
 800ec16:	0092      	lsls	r2, r2, #2
 800ec18:	5c83      	ldrb	r3, [r0, r2]
 800ec1a:	4903      	ldr	r1, [pc, #12]	@ (800ec28 <USBD_LL_Suspend+0x14>)
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	5443      	strb	r3, [r0, r1]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ec20:	2304      	movs	r3, #4
 800ec22:	5483      	strb	r3, [r0, r2]

  return USBD_OK;
}
 800ec24:	2000      	movs	r0, #0
 800ec26:	4770      	bx	lr
 800ec28:	0000029d 	.word	0x0000029d

0800ec2c <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ec2c:	22a7      	movs	r2, #167	@ 0xa7
 800ec2e:	0092      	lsls	r2, r2, #2
 800ec30:	5c83      	ldrb	r3, [r0, r2]
 800ec32:	2b04      	cmp	r3, #4
 800ec34:	d103      	bne.n	800ec3e <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ec36:	4b03      	ldr	r3, [pc, #12]	@ (800ec44 <USBD_LL_Resume+0x18>)
 800ec38:	5cc3      	ldrb	r3, [r0, r3]
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	5483      	strb	r3, [r0, r2]
  }

  return USBD_OK;
}
 800ec3e:	2000      	movs	r0, #0
 800ec40:	4770      	bx	lr
 800ec42:	46c0      	nop			@ (mov r8, r8)
 800ec44:	0000029d 	.word	0x0000029d

0800ec48 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800ec48:	23ae      	movs	r3, #174	@ 0xae
 800ec4a:	009b      	lsls	r3, r3, #2
 800ec4c:	58c2      	ldr	r2, [r0, r3]
{
 800ec4e:	b510      	push	{r4, lr}
  {
    return USBD_FAIL;
 800ec50:	2303      	movs	r3, #3
  if (pdev->pClass == NULL)
 800ec52:	2a00      	cmp	r2, #0
 800ec54:	d008      	beq.n	800ec68 <USBD_LL_SOF+0x20>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec56:	23a7      	movs	r3, #167	@ 0xa7
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	5cc3      	ldrb	r3, [r0, r3]
 800ec5c:	2b03      	cmp	r3, #3
 800ec5e:	d102      	bne.n	800ec66 <USBD_LL_SOF+0x1e>
  {
    if (pdev->pClass->SOF != NULL)
 800ec60:	69d3      	ldr	r3, [r2, #28]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d102      	bne.n	800ec6c <USBD_LL_SOF+0x24>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	0018      	movs	r0, r3
 800ec6a:	bd10      	pop	{r4, pc}
      (void)pdev->pClass->SOF(pdev);
 800ec6c:	4798      	blx	r3
 800ec6e:	e7fa      	b.n	800ec66 <USBD_LL_SOF+0x1e>

0800ec70 <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800ec70:	b510      	push	{r4, lr}
 800ec72:	0004      	movs	r4, r0
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec74:	2180      	movs	r1, #128	@ 0x80
 800ec76:	f000 fb7f 	bl	800f378 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	0020      	movs	r0, r4
 800ec7e:	f000 fb7b 	bl	800f378 <USBD_LL_StallEP>
}
 800ec82:	bd10      	pop	{r4, pc}

0800ec84 <USBD_StdDevReq>:
{
 800ec84:	2260      	movs	r2, #96	@ 0x60
 800ec86:	780b      	ldrb	r3, [r1, #0]
 800ec88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec8e:	0019      	movs	r1, r3
 800ec90:	1892      	adds	r2, r2, r2
 800ec92:	3920      	subs	r1, #32
{
 800ec94:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec96:	4211      	tst	r1, r2
 800ec98:	d006      	beq.n	800eca8 <USBD_StdDevReq+0x24>
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00d      	beq.n	800ecba <USBD_StdDevReq+0x36>
      USBD_CtlError(pdev, req);
 800ec9e:	0020      	movs	r0, r4
 800eca0:	f7ff ffe6 	bl	800ec70 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 800eca4:	2500      	movs	r5, #0
 800eca6:	e006      	b.n	800ecb6 <USBD_StdDevReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eca8:	23ae      	movs	r3, #174	@ 0xae
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	58c3      	ldr	r3, [r0, r3]
 800ecae:	0029      	movs	r1, r5
 800ecb0:	689b      	ldr	r3, [r3, #8]
 800ecb2:	4798      	blx	r3
 800ecb4:	0005      	movs	r5, r0
}
 800ecb6:	0028      	movs	r0, r5
 800ecb8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      switch (req->bRequest)
 800ecba:	7868      	ldrb	r0, [r5, #1]
 800ecbc:	2809      	cmp	r0, #9
 800ecbe:	d8ee      	bhi.n	800ec9e <USBD_StdDevReq+0x1a>
 800ecc0:	f7f1 fa3e 	bl	8000140 <__gnu_thumb1_case_shi>
 800ecc4:	012c010d 	.word	0x012c010d
 800ecc8:	0124ffed 	.word	0x0124ffed
 800eccc:	0083ffed 	.word	0x0083ffed
 800ecd0:	ffed000a 	.word	0xffed000a
 800ecd4:	00a500f6 	.word	0x00a500f6
  uint16_t len = 0U;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	466a      	mov	r2, sp
 800ecdc:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 800ecde:	8869      	ldrh	r1, [r5, #2]
 800ece0:	0a08      	lsrs	r0, r1, #8
 800ece2:	3801      	subs	r0, #1
 800ece4:	2806      	cmp	r0, #6
 800ece6:	d8da      	bhi.n	800ec9e <USBD_StdDevReq+0x1a>
 800ece8:	f7f1 fa16 	bl	8000118 <__gnu_thumb1_case_sqi>
 800ecec:	d92f2004 	.word	0xd92f2004
 800ecf0:	56d9      	.short	0x56d9
 800ecf2:	62          	.byte	0x62
 800ecf3:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ecf4:	23ad      	movs	r3, #173	@ 0xad
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	58e3      	ldr	r3, [r4, r3]
 800ecfa:	7c20      	ldrb	r0, [r4, #16]
 800ecfc:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ecfe:	466a      	mov	r2, sp
 800ed00:	1d91      	adds	r1, r2, #6
 800ed02:	4798      	blx	r3
  if (req->wLength != 0U)
 800ed04:	88e9      	ldrh	r1, [r5, #6]
 800ed06:	2900      	cmp	r1, #0
 800ed08:	d100      	bne.n	800ed0c <USBD_StdDevReq+0x88>
 800ed0a:	e0b4      	b.n	800ee76 <USBD_StdDevReq+0x1f2>
    if (len != 0U)
 800ed0c:	466b      	mov	r3, sp
 800ed0e:	88da      	ldrh	r2, [r3, #6]
 800ed10:	2a00      	cmp	r2, #0
 800ed12:	d0c4      	beq.n	800ec9e <USBD_StdDevReq+0x1a>
      len = MIN(len, req->wLength);
 800ed14:	1c0b      	adds	r3, r1, #0
 800ed16:	4291      	cmp	r1, r2
 800ed18:	d900      	bls.n	800ed1c <USBD_StdDevReq+0x98>
 800ed1a:	1c13      	adds	r3, r2, #0
 800ed1c:	4669      	mov	r1, sp
 800ed1e:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ed20:	0001      	movs	r1, r0
      len = MIN(len, req->wLength);
 800ed22:	b29a      	uxth	r2, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ed24:	0020      	movs	r0, r4
 800ed26:	f000 fa0d 	bl	800f144 <USBD_CtlSendData>
        break;
 800ed2a:	e7bb      	b.n	800eca4 <USBD_StdDevReq+0x20>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed2c:	23ae      	movs	r3, #174	@ 0xae
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed2e:	7c22      	ldrb	r2, [r4, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	58e3      	ldr	r3, [r4, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed34:	2a00      	cmp	r2, #0
 800ed36:	d106      	bne.n	800ed46 <USBD_StdDevReq+0xc2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ed38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ed3a:	466a      	mov	r2, sp
 800ed3c:	1d90      	adds	r0, r2, #6
 800ed3e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ed40:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ed42:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ed44:	e7de      	b.n	800ed04 <USBD_StdDevReq+0x80>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ed46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed48:	e7f7      	b.n	800ed3a <USBD_StdDevReq+0xb6>
      switch ((uint8_t)(req->wValue))
 800ed4a:	b2c9      	uxtb	r1, r1
 800ed4c:	2905      	cmp	r1, #5
 800ed4e:	d817      	bhi.n	800ed80 <USBD_StdDevReq+0xfc>
 800ed50:	23ad      	movs	r3, #173	@ 0xad
 800ed52:	0008      	movs	r0, r1
 800ed54:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ed56:	58e3      	ldr	r3, [r4, r3]
      switch ((uint8_t)(req->wValue))
 800ed58:	f7f1 f9e8 	bl	800012c <__gnu_thumb1_case_uqi>
 800ed5c:	0c0a0803 	.word	0x0c0a0803
 800ed60:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d09a      	beq.n	800ec9e <USBD_StdDevReq+0x1a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ed68:	7c20      	ldrb	r0, [r4, #16]
 800ed6a:	e7c8      	b.n	800ecfe <USBD_StdDevReq+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ed6c:	689b      	ldr	r3, [r3, #8]
 800ed6e:	e7f9      	b.n	800ed64 <USBD_StdDevReq+0xe0>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	e7f7      	b.n	800ed64 <USBD_StdDevReq+0xe0>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ed74:	691b      	ldr	r3, [r3, #16]
 800ed76:	e7f5      	b.n	800ed64 <USBD_StdDevReq+0xe0>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ed78:	695b      	ldr	r3, [r3, #20]
 800ed7a:	e7f3      	b.n	800ed64 <USBD_StdDevReq+0xe0>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ed7c:	699b      	ldr	r3, [r3, #24]
 800ed7e:	e7f1      	b.n	800ed64 <USBD_StdDevReq+0xe0>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800ed80:	23ae      	movs	r3, #174	@ 0xae
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	58e3      	ldr	r3, [r4, r3]
 800ed86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d100      	bne.n	800ed8e <USBD_StdDevReq+0x10a>
 800ed8c:	e787      	b.n	800ec9e <USBD_StdDevReq+0x1a>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800ed8e:	466a      	mov	r2, sp
 800ed90:	0020      	movs	r0, r4
 800ed92:	3206      	adds	r2, #6
 800ed94:	4798      	blx	r3
  if (err != 0U)
 800ed96:	e7b5      	b.n	800ed04 <USBD_StdDevReq+0x80>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed98:	7c23      	ldrb	r3, [r4, #16]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d000      	beq.n	800eda0 <USBD_StdDevReq+0x11c>
 800ed9e:	e77e      	b.n	800ec9e <USBD_StdDevReq+0x1a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800eda0:	23ae      	movs	r3, #174	@ 0xae
 800eda2:	466a      	mov	r2, sp
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	58e3      	ldr	r3, [r4, r3]
 800eda8:	1d90      	adds	r0, r2, #6
 800edaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edac:	4798      	blx	r3
  if (err != 0U)
 800edae:	e7a9      	b.n	800ed04 <USBD_StdDevReq+0x80>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800edb0:	7c23      	ldrb	r3, [r4, #16]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d000      	beq.n	800edb8 <USBD_StdDevReq+0x134>
 800edb6:	e772      	b.n	800ec9e <USBD_StdDevReq+0x1a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800edb8:	23ae      	movs	r3, #174	@ 0xae
 800edba:	466a      	mov	r2, sp
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	58e3      	ldr	r3, [r4, r3]
 800edc0:	1d90      	adds	r0, r2, #6
 800edc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edc4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800edc6:	2307      	movs	r3, #7
 800edc8:	e7bb      	b.n	800ed42 <USBD_StdDevReq+0xbe>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800edca:	88ab      	ldrh	r3, [r5, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d000      	beq.n	800edd2 <USBD_StdDevReq+0x14e>
 800edd0:	e765      	b.n	800ec9e <USBD_StdDevReq+0x1a>
 800edd2:	88eb      	ldrh	r3, [r5, #6]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d000      	beq.n	800edda <USBD_StdDevReq+0x156>
 800edd8:	e761      	b.n	800ec9e <USBD_StdDevReq+0x1a>
 800edda:	886d      	ldrh	r5, [r5, #2]
 800eddc:	2d7f      	cmp	r5, #127	@ 0x7f
 800edde:	d900      	bls.n	800ede2 <USBD_StdDevReq+0x15e>
 800ede0:	e75d      	b.n	800ec9e <USBD_StdDevReq+0x1a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ede2:	26a7      	movs	r6, #167	@ 0xa7
 800ede4:	00b6      	lsls	r6, r6, #2
 800ede6:	5da3      	ldrb	r3, [r4, r6]
 800ede8:	2b03      	cmp	r3, #3
 800edea:	d100      	bne.n	800edee <USBD_StdDevReq+0x16a>
 800edec:	e757      	b.n	800ec9e <USBD_StdDevReq+0x1a>
      pdev->dev_address = dev_addr;
 800edee:	4b53      	ldr	r3, [pc, #332]	@ (800ef3c <USBD_StdDevReq+0x2b8>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800edf0:	b2ed      	uxtb	r5, r5
      pdev->dev_address = dev_addr;
 800edf2:	54e5      	strb	r5, [r4, r3]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800edf4:	0029      	movs	r1, r5
 800edf6:	0020      	movs	r0, r4
 800edf8:	f000 fad0 	bl	800f39c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800edfc:	0020      	movs	r0, r4
 800edfe:	f000 f9cf 	bl	800f1a0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee02:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 800ee04:	2d00      	cmp	r5, #0
 800ee06:	d100      	bne.n	800ee0a <USBD_StdDevReq+0x186>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ee08:	2301      	movs	r3, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ee0a:	55a3      	strb	r3, [r4, r6]
 800ee0c:	e74a      	b.n	800eca4 <USBD_StdDevReq+0x20>
  cfgidx = (uint8_t)(req->wValue);
 800ee0e:	78a9      	ldrb	r1, [r5, #2]
 800ee10:	4d4b      	ldr	r5, [pc, #300]	@ (800ef40 <USBD_StdDevReq+0x2bc>)
 800ee12:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ee14:	2901      	cmp	r1, #1
 800ee16:	d904      	bls.n	800ee22 <USBD_StdDevReq+0x19e>
    USBD_CtlError(pdev, req);
 800ee18:	0020      	movs	r0, r4
 800ee1a:	f7ff ff29 	bl	800ec70 <USBD_CtlError.constprop.0>
    return USBD_FAIL;
 800ee1e:	2503      	movs	r5, #3
 800ee20:	e749      	b.n	800ecb6 <USBD_StdDevReq+0x32>
  switch (pdev->dev_state)
 800ee22:	26a7      	movs	r6, #167	@ 0xa7
 800ee24:	00b6      	lsls	r6, r6, #2
 800ee26:	5da3      	ldrb	r3, [r4, r6]
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	2b02      	cmp	r3, #2
 800ee2c:	d009      	beq.n	800ee42 <USBD_StdDevReq+0x1be>
 800ee2e:	2a03      	cmp	r2, #3
 800ee30:	d019      	beq.n	800ee66 <USBD_StdDevReq+0x1e2>
      USBD_CtlError(pdev, req);
 800ee32:	0020      	movs	r0, r4
 800ee34:	f7ff ff1c 	bl	800ec70 <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee38:	0020      	movs	r0, r4
 800ee3a:	7829      	ldrb	r1, [r5, #0]
 800ee3c:	f7ff fdee 	bl	800ea1c <USBD_ClrClassConfig>
      break;
 800ee40:	e7ed      	b.n	800ee1e <USBD_StdDevReq+0x19a>
      if (cfgidx != 0U)
 800ee42:	2900      	cmp	r1, #0
 800ee44:	d017      	beq.n	800ee76 <USBD_StdDevReq+0x1f2>
        pdev->dev_config = cfgidx;
 800ee46:	2101      	movs	r1, #1
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee48:	0020      	movs	r0, r4
        pdev->dev_config = cfgidx;
 800ee4a:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee4c:	f7ff fdda 	bl	800ea04 <USBD_SetClassConfig>
 800ee50:	0005      	movs	r5, r0
          USBD_CtlError(pdev, req);
 800ee52:	0020      	movs	r0, r4
        if (ret != USBD_OK)
 800ee54:	2d00      	cmp	r5, #0
 800ee56:	d002      	beq.n	800ee5e <USBD_StdDevReq+0x1da>
          USBD_CtlError(pdev, req);
 800ee58:	f7ff ff0a 	bl	800ec70 <USBD_CtlError.constprop.0>
 800ee5c:	e72b      	b.n	800ecb6 <USBD_StdDevReq+0x32>
          (void)USBD_CtlSendStatus(pdev);
 800ee5e:	f000 f99f 	bl	800f1a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ee62:	2303      	movs	r3, #3
 800ee64:	e7d1      	b.n	800ee0a <USBD_StdDevReq+0x186>
      if (cfgidx == 0U)
 800ee66:	2900      	cmp	r1, #0
 800ee68:	d109      	bne.n	800ee7e <USBD_StdDevReq+0x1fa>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee6a:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee6c:	0020      	movs	r0, r4
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee6e:	55a3      	strb	r3, [r4, r6]
        pdev->dev_config = cfgidx;
 800ee70:	6061      	str	r1, [r4, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee72:	f7ff fdd3 	bl	800ea1c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ee76:	0020      	movs	r0, r4
 800ee78:	f000 f992 	bl	800f1a0 <USBD_CtlSendStatus>
 800ee7c:	e712      	b.n	800eca4 <USBD_StdDevReq+0x20>
      else if (cfgidx != pdev->dev_config)
 800ee7e:	6861      	ldr	r1, [r4, #4]
 800ee80:	2901      	cmp	r1, #1
 800ee82:	d0f8      	beq.n	800ee76 <USBD_StdDevReq+0x1f2>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee84:	b2c9      	uxtb	r1, r1
 800ee86:	0020      	movs	r0, r4
 800ee88:	f7ff fdc8 	bl	800ea1c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ee8c:	7829      	ldrb	r1, [r5, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee8e:	0020      	movs	r0, r4
        pdev->dev_config = cfgidx;
 800ee90:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee92:	f7ff fdb7 	bl	800ea04 <USBD_SetClassConfig>
 800ee96:	1e05      	subs	r5, r0, #0
        if (ret != USBD_OK)
 800ee98:	d0ed      	beq.n	800ee76 <USBD_StdDevReq+0x1f2>
          USBD_CtlError(pdev, req);
 800ee9a:	0020      	movs	r0, r4
 800ee9c:	f7ff fee8 	bl	800ec70 <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eea0:	6861      	ldr	r1, [r4, #4]
 800eea2:	0020      	movs	r0, r4
 800eea4:	b2c9      	uxtb	r1, r1
 800eea6:	f7ff fdb9 	bl	800ea1c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eeaa:	2302      	movs	r3, #2
 800eeac:	55a3      	strb	r3, [r4, r6]
 800eeae:	e702      	b.n	800ecb6 <USBD_StdDevReq+0x32>
  if (req->wLength != 1U)
 800eeb0:	88ea      	ldrh	r2, [r5, #6]
 800eeb2:	2a01      	cmp	r2, #1
 800eeb4:	d000      	beq.n	800eeb8 <USBD_StdDevReq+0x234>
 800eeb6:	e6f2      	b.n	800ec9e <USBD_StdDevReq+0x1a>
    switch (pdev->dev_state)
 800eeb8:	23a7      	movs	r3, #167	@ 0xa7
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	5ce1      	ldrb	r1, [r4, r3]
 800eebe:	b2cb      	uxtb	r3, r1
 800eec0:	2902      	cmp	r1, #2
 800eec2:	d807      	bhi.n	800eed4 <USBD_StdDevReq+0x250>
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d100      	bne.n	800eeca <USBD_StdDevReq+0x246>
 800eec8:	e6e9      	b.n	800ec9e <USBD_StdDevReq+0x1a>
        pdev->dev_default_config = 0U;
 800eeca:	2300      	movs	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eecc:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 800eece:	60a3      	str	r3, [r4, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eed0:	3108      	adds	r1, #8
 800eed2:	e727      	b.n	800ed24 <USBD_StdDevReq+0xa0>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eed4:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 800eed6:	2b03      	cmp	r3, #3
 800eed8:	d100      	bne.n	800eedc <USBD_StdDevReq+0x258>
 800eeda:	e723      	b.n	800ed24 <USBD_StdDevReq+0xa0>
 800eedc:	e6df      	b.n	800ec9e <USBD_StdDevReq+0x1a>
  switch (pdev->dev_state)
 800eede:	23a7      	movs	r3, #167	@ 0xa7
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	5ce3      	ldrb	r3, [r4, r3]
 800eee4:	3b01      	subs	r3, #1
 800eee6:	2b02      	cmp	r3, #2
 800eee8:	d900      	bls.n	800eeec <USBD_StdDevReq+0x268>
 800eeea:	e6d8      	b.n	800ec9e <USBD_StdDevReq+0x1a>
      if (req->wLength != 0x2U)
 800eeec:	88eb      	ldrh	r3, [r5, #6]
 800eeee:	2b02      	cmp	r3, #2
 800eef0:	d000      	beq.n	800eef4 <USBD_StdDevReq+0x270>
 800eef2:	e6d4      	b.n	800ec9e <USBD_StdDevReq+0x1a>
      if (pdev->dev_remote_wakeup != 0U)
 800eef4:	23a9      	movs	r3, #169	@ 0xa9
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	58e2      	ldr	r2, [r4, r3]
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eefa:	2301      	movs	r3, #1
      if (pdev->dev_remote_wakeup != 0U)
 800eefc:	2a00      	cmp	r2, #0
 800eefe:	d000      	beq.n	800ef02 <USBD_StdDevReq+0x27e>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef00:	3302      	adds	r3, #2
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ef02:	0021      	movs	r1, r4
 800ef04:	2202      	movs	r2, #2
 800ef06:	60e3      	str	r3, [r4, #12]
 800ef08:	310c      	adds	r1, #12
 800ef0a:	e70b      	b.n	800ed24 <USBD_StdDevReq+0xa0>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef0c:	886b      	ldrh	r3, [r5, #2]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d000      	beq.n	800ef14 <USBD_StdDevReq+0x290>
 800ef12:	e6c7      	b.n	800eca4 <USBD_StdDevReq+0x20>
    pdev->dev_remote_wakeup = 1U;
 800ef14:	22a9      	movs	r2, #169	@ 0xa9
 800ef16:	0092      	lsls	r2, r2, #2
 800ef18:	50a3      	str	r3, [r4, r2]
    (void)USBD_CtlSendStatus(pdev);
 800ef1a:	e7ac      	b.n	800ee76 <USBD_StdDevReq+0x1f2>
  switch (pdev->dev_state)
 800ef1c:	23a7      	movs	r3, #167	@ 0xa7
 800ef1e:	009b      	lsls	r3, r3, #2
 800ef20:	5ce3      	ldrb	r3, [r4, r3]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	2b02      	cmp	r3, #2
 800ef26:	d900      	bls.n	800ef2a <USBD_StdDevReq+0x2a6>
 800ef28:	e6b9      	b.n	800ec9e <USBD_StdDevReq+0x1a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef2a:	886b      	ldrh	r3, [r5, #2]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d000      	beq.n	800ef32 <USBD_StdDevReq+0x2ae>
 800ef30:	e6b8      	b.n	800eca4 <USBD_StdDevReq+0x20>
        pdev->dev_remote_wakeup = 0U;
 800ef32:	23a9      	movs	r3, #169	@ 0xa9
 800ef34:	2200      	movs	r2, #0
 800ef36:	009b      	lsls	r3, r3, #2
 800ef38:	50e2      	str	r2, [r4, r3]
 800ef3a:	e79c      	b.n	800ee76 <USBD_StdDevReq+0x1f2>
 800ef3c:	0000029e 	.word	0x0000029e
 800ef40:	2000239e 	.word	0x2000239e

0800ef44 <USBD_StdItfReq>:
{
 800ef44:	2360      	movs	r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef46:	780a      	ldrb	r2, [r1, #0]
{
 800ef48:	b570      	push	{r4, r5, r6, lr}
 800ef4a:	4013      	ands	r3, r2
 800ef4c:	0004      	movs	r4, r0
 800ef4e:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef50:	0652      	lsls	r2, r2, #25
 800ef52:	d501      	bpl.n	800ef58 <USBD_StdItfReq+0x14>
 800ef54:	2b40      	cmp	r3, #64	@ 0x40
 800ef56:	d11a      	bne.n	800ef8e <USBD_StdItfReq+0x4a>
      switch (pdev->dev_state)
 800ef58:	23a7      	movs	r3, #167	@ 0xa7
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	5ce3      	ldrb	r3, [r4, r3]
 800ef5e:	3b01      	subs	r3, #1
 800ef60:	2b02      	cmp	r3, #2
 800ef62:	d814      	bhi.n	800ef8e <USBD_StdItfReq+0x4a>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ef64:	792b      	ldrb	r3, [r5, #4]
 800ef66:	2b0f      	cmp	r3, #15
 800ef68:	d811      	bhi.n	800ef8e <USBD_StdItfReq+0x4a>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef6a:	23ae      	movs	r3, #174	@ 0xae
 800ef6c:	009b      	lsls	r3, r3, #2
 800ef6e:	58e3      	ldr	r3, [r4, r3]
 800ef70:	0029      	movs	r1, r5
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	0020      	movs	r0, r4
 800ef76:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ef78:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef7a:	0006      	movs	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d104      	bne.n	800ef8a <USBD_StdItfReq+0x46>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d102      	bne.n	800ef8a <USBD_StdItfReq+0x46>
              (void)USBD_CtlSendStatus(pdev);
 800ef84:	0020      	movs	r0, r4
 800ef86:	f000 f90b 	bl	800f1a0 <USBD_CtlSendStatus>
}
 800ef8a:	0030      	movs	r0, r6
 800ef8c:	bd70      	pop	{r4, r5, r6, pc}
            USBD_CtlError(pdev, req);
 800ef8e:	0020      	movs	r0, r4
 800ef90:	f7ff fe6e 	bl	800ec70 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 800ef94:	2600      	movs	r6, #0
 800ef96:	e7f8      	b.n	800ef8a <USBD_StdItfReq+0x46>

0800ef98 <USBD_StdEPReq>:
{
 800ef98:	b570      	push	{r4, r5, r6, lr}
 800ef9a:	780b      	ldrb	r3, [r1, #0]
 800ef9c:	000d      	movs	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800ef9e:	888a      	ldrh	r2, [r1, #4]
 800efa0:	2160      	movs	r1, #96	@ 0x60
 800efa2:	400b      	ands	r3, r1
{
 800efa4:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efa6:	0018      	movs	r0, r3
 800efa8:	1849      	adds	r1, r1, r1
 800efaa:	3820      	subs	r0, #32
 800efac:	4208      	tst	r0, r1
 800efae:	d058      	beq.n	800f062 <USBD_StdEPReq+0xca>
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d003      	beq.n	800efbc <USBD_StdEPReq+0x24>
              USBD_CtlError(pdev, req);
 800efb4:	0020      	movs	r0, r4
 800efb6:	f7ff fe5b 	bl	800ec70 <USBD_CtlError.constprop.0>
              break;
 800efba:	e03d      	b.n	800f038 <USBD_StdEPReq+0xa0>
      switch (req->bRequest)
 800efbc:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800efbe:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d03b      	beq.n	800f03c <USBD_StdEPReq+0xa4>
 800efc4:	2b03      	cmp	r3, #3
 800efc6:	d021      	beq.n	800f00c <USBD_StdEPReq+0x74>
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1f3      	bne.n	800efb4 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 800efcc:	23a7      	movs	r3, #167	@ 0xa7
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	5ce3      	ldrb	r3, [r4, r3]
 800efd2:	b2d8      	uxtb	r0, r3
 800efd4:	2b02      	cmp	r3, #2
 800efd6:	d056      	beq.n	800f086 <USBD_StdEPReq+0xee>
 800efd8:	2803      	cmp	r0, #3
 800efda:	d1eb      	bne.n	800efb4 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800efdc:	230f      	movs	r3, #15
 800efde:	2514      	movs	r5, #20
 800efe0:	400b      	ands	r3, r1
 800efe2:	436b      	muls	r3, r5
 800efe4:	18e3      	adds	r3, r4, r3
              if ((ep_addr & 0x80U) == 0x80U)
 800efe6:	0612      	lsls	r2, r2, #24
 800efe8:	d55e      	bpl.n	800f0a8 <USBD_StdEPReq+0x110>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800efea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800efec:	2b00      	cmp	r3, #0
 800efee:	d0e1      	beq.n	800efb4 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eff0:	237f      	movs	r3, #127	@ 0x7f
 800eff2:	400b      	ands	r3, r1
 800eff4:	3301      	adds	r3, #1
 800eff6:	435d      	muls	r5, r3
 800eff8:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800effa:	2980      	cmp	r1, #128	@ 0x80
 800effc:	d060      	beq.n	800f0c0 <USBD_StdEPReq+0x128>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800effe:	0020      	movs	r0, r4
 800f000:	f000 f97a 	bl	800f2f8 <USBD_LL_IsStallEP>
 800f004:	2800      	cmp	r0, #0
 800f006:	d060      	beq.n	800f0ca <USBD_StdEPReq+0x132>
                pep->status = 0x0001U;
 800f008:	2301      	movs	r3, #1
 800f00a:	e05a      	b.n	800f0c2 <USBD_StdEPReq+0x12a>
          switch (pdev->dev_state)
 800f00c:	23a7      	movs	r3, #167	@ 0xa7
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	5ce3      	ldrb	r3, [r4, r3]
 800f012:	b2da      	uxtb	r2, r3
 800f014:	2b02      	cmp	r3, #2
 800f016:	d02c      	beq.n	800f072 <USBD_StdEPReq+0xda>
 800f018:	2a03      	cmp	r2, #3
 800f01a:	d1cb      	bne.n	800efb4 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f01c:	886b      	ldrh	r3, [r5, #2]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d107      	bne.n	800f032 <USBD_StdEPReq+0x9a>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f022:	064b      	lsls	r3, r1, #25
 800f024:	d005      	beq.n	800f032 <USBD_StdEPReq+0x9a>
 800f026:	88eb      	ldrh	r3, [r5, #6]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d102      	bne.n	800f032 <USBD_StdEPReq+0x9a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f02c:	0020      	movs	r0, r4
 800f02e:	f000 f9a3 	bl	800f378 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 800f032:	0020      	movs	r0, r4
 800f034:	f000 f8b4 	bl	800f1a0 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800f038:	2000      	movs	r0, #0
}
 800f03a:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800f03c:	23a7      	movs	r3, #167	@ 0xa7
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	5ce3      	ldrb	r3, [r4, r3]
 800f042:	b2da      	uxtb	r2, r3
 800f044:	2b02      	cmp	r3, #2
 800f046:	d014      	beq.n	800f072 <USBD_StdEPReq+0xda>
 800f048:	2a03      	cmp	r2, #3
 800f04a:	d1b3      	bne.n	800efb4 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f04c:	886b      	ldrh	r3, [r5, #2]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1f2      	bne.n	800f038 <USBD_StdEPReq+0xa0>
                if ((ep_addr & 0x7FU) != 0x00U)
 800f052:	064b      	lsls	r3, r1, #25
 800f054:	d002      	beq.n	800f05c <USBD_StdEPReq+0xc4>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f056:	0020      	movs	r0, r4
 800f058:	f000 f997 	bl	800f38a <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 800f05c:	0020      	movs	r0, r4
 800f05e:	f000 f89f 	bl	800f1a0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f062:	23ae      	movs	r3, #174	@ 0xae
 800f064:	009b      	lsls	r3, r3, #2
 800f066:	58e3      	ldr	r3, [r4, r3]
 800f068:	0029      	movs	r1, r5
 800f06a:	0020      	movs	r0, r4
 800f06c:	689b      	ldr	r3, [r3, #8]
 800f06e:	4798      	blx	r3
 800f070:	e7e3      	b.n	800f03a <USBD_StdEPReq+0xa2>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f072:	064b      	lsls	r3, r1, #25
 800f074:	d09e      	beq.n	800efb4 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f076:	0020      	movs	r0, r4
 800f078:	f000 f97e 	bl	800f378 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f07c:	2180      	movs	r1, #128	@ 0x80
 800f07e:	0020      	movs	r0, r4
 800f080:	f000 f97a 	bl	800f378 <USBD_LL_StallEP>
 800f084:	e7d8      	b.n	800f038 <USBD_StdEPReq+0xa0>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f086:	0649      	lsls	r1, r1, #25
 800f088:	d000      	beq.n	800f08c <USBD_StdEPReq+0xf4>
 800f08a:	e793      	b.n	800efb4 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f08c:	0021      	movs	r1, r4
 800f08e:	3155      	adds	r1, #85	@ 0x55
 800f090:	31ff      	adds	r1, #255	@ 0xff
 800f092:	0612      	lsls	r2, r2, #24
 800f094:	d501      	bpl.n	800f09a <USBD_StdEPReq+0x102>
 800f096:	3941      	subs	r1, #65	@ 0x41
 800f098:	39ff      	subs	r1, #255	@ 0xff
              pep->status = 0x0000U;
 800f09a:	2300      	movs	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f09c:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 800f09e:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f0a0:	0020      	movs	r0, r4
 800f0a2:	f000 f84f 	bl	800f144 <USBD_CtlSendData>
              break;
 800f0a6:	e7c7      	b.n	800f038 <USBD_StdEPReq+0xa0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f0a8:	3365      	adds	r3, #101	@ 0x65
 800f0aa:	33ff      	adds	r3, #255	@ 0xff
 800f0ac:	881b      	ldrh	r3, [r3, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d100      	bne.n	800f0b4 <USBD_StdEPReq+0x11c>
 800f0b2:	e77f      	b.n	800efb4 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f0b4:	434d      	muls	r5, r1
 800f0b6:	3555      	adds	r5, #85	@ 0x55
 800f0b8:	35ff      	adds	r5, #255	@ 0xff
 800f0ba:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f0bc:	2900      	cmp	r1, #0
 800f0be:	d19e      	bne.n	800effe <USBD_StdEPReq+0x66>
                pep->status = 0x0000U;
 800f0c0:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 800f0c2:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f0c4:	2202      	movs	r2, #2
 800f0c6:	0029      	movs	r1, r5
 800f0c8:	e7ea      	b.n	800f0a0 <USBD_StdEPReq+0x108>
                pep->status = 0x0000U;
 800f0ca:	6028      	str	r0, [r5, #0]
 800f0cc:	e7fa      	b.n	800f0c4 <USBD_StdEPReq+0x12c>

0800f0ce <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800f0ce:	780b      	ldrb	r3, [r1, #0]
 800f0d0:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800f0d2:	784b      	ldrb	r3, [r1, #1]
 800f0d4:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 800f0d6:	78cb      	ldrb	r3, [r1, #3]
 800f0d8:	788a      	ldrb	r2, [r1, #2]
 800f0da:	021b      	lsls	r3, r3, #8
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 800f0e0:	794b      	ldrb	r3, [r1, #5]
 800f0e2:	790a      	ldrb	r2, [r1, #4]
 800f0e4:	021b      	lsls	r3, r3, #8
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 800f0ea:	79cb      	ldrb	r3, [r1, #7]
 800f0ec:	798a      	ldrb	r2, [r1, #6]
 800f0ee:	021b      	lsls	r3, r3, #8
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	80c3      	strh	r3, [r0, #6]
}
 800f0f4:	4770      	bx	lr

0800f0f6 <USBD_CtlError>:
{
 800f0f6:	b510      	push	{r4, lr}
 800f0f8:	0004      	movs	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0fa:	2180      	movs	r1, #128	@ 0x80
 800f0fc:	f000 f93c 	bl	800f378 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f100:	2100      	movs	r1, #0
 800f102:	0020      	movs	r0, r4
 800f104:	f000 f938 	bl	800f378 <USBD_LL_StallEP>
}
 800f108:	bd10      	pop	{r4, pc}

0800f10a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f10a:	b570      	push	{r4, r5, r6, lr}
 800f10c:	0004      	movs	r4, r0
 800f10e:	000d      	movs	r5, r1
 800f110:	0016      	movs	r6, r2
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800f112:	2800      	cmp	r0, #0
 800f114:	d00d      	beq.n	800f132 <USBD_GetString+0x28>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800f116:	f7f0 fff7 	bl	8000108 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f11a:	b2c3      	uxtb	r3, r0
 800f11c:	3301      	adds	r3, #1
 800f11e:	005b      	lsls	r3, r3, #1
 800f120:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800f122:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f124:	2303      	movs	r3, #3
    unicode[idx] = 0U;
 800f126:	2100      	movs	r1, #0
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f128:	706b      	strb	r3, [r5, #1]
  idx++;
 800f12a:	3b01      	subs	r3, #1
  while (*pdesc != (uint8_t)'\0')
 800f12c:	7822      	ldrb	r2, [r4, #0]
 800f12e:	2a00      	cmp	r2, #0
 800f130:	d100      	bne.n	800f134 <USBD_GetString+0x2a>
}
 800f132:	bd70      	pop	{r4, r5, r6, pc}
    unicode[idx] = *pdesc;
 800f134:	54ea      	strb	r2, [r5, r3]
    idx++;
 800f136:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800f138:	b2d2      	uxtb	r2, r2
    idx++;
 800f13a:	3302      	adds	r3, #2
    pdesc++;
 800f13c:	3401      	adds	r4, #1
    unicode[idx] = 0U;
 800f13e:	54a9      	strb	r1, [r5, r2]
    idx++;
 800f140:	b2db      	uxtb	r3, r3
 800f142:	e7f3      	b.n	800f12c <USBD_GetString+0x22>

0800f144 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f144:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f146:	22a5      	movs	r2, #165	@ 0xa5
{
 800f148:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f14a:	2402      	movs	r4, #2
 800f14c:	0092      	lsls	r2, r2, #2
 800f14e:	5084      	str	r4, [r0, r2]
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f150:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 800f152:	6183      	str	r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f154:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length = len;
 800f156:	61c3      	str	r3, [r0, #28]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f158:	f000 f929 	bl	800f3ae <USBD_LL_Transmit>

  return USBD_OK;
}
 800f15c:	2000      	movs	r0, #0
 800f15e:	bd10      	pop	{r4, pc}

0800f160 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f160:	b510      	push	{r4, lr}
 800f162:	0013      	movs	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f164:	000a      	movs	r2, r1
 800f166:	2100      	movs	r1, #0
 800f168:	f000 f921 	bl	800f3ae <USBD_LL_Transmit>

  return USBD_OK;
}
 800f16c:	2000      	movs	r0, #0
 800f16e:	bd10      	pop	{r4, pc}

0800f170 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f170:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f172:	22a5      	movs	r2, #165	@ 0xa5
{
 800f174:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f176:	2403      	movs	r4, #3
 800f178:	0092      	lsls	r2, r2, #2
 800f17a:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 800f17c:	0002      	movs	r2, r0
 800f17e:	32fc      	adds	r2, #252	@ 0xfc
 800f180:	65d3      	str	r3, [r2, #92]	@ 0x5c

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f182:	6613      	str	r3, [r2, #96]	@ 0x60
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f184:	000a      	movs	r2, r1
 800f186:	2100      	movs	r1, #0
 800f188:	f000 f91a 	bl	800f3c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f18c:	2000      	movs	r0, #0
 800f18e:	bd10      	pop	{r4, pc}

0800f190 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f190:	b510      	push	{r4, lr}
 800f192:	0013      	movs	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f194:	000a      	movs	r2, r1
 800f196:	2100      	movs	r1, #0
 800f198:	f000 f912 	bl	800f3c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f19c:	2000      	movs	r0, #0
 800f19e:	bd10      	pop	{r4, pc}

0800f1a0 <USBD_CtlSendStatus>:
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f1a0:	23a5      	movs	r3, #165	@ 0xa5
 800f1a2:	2204      	movs	r2, #4
 800f1a4:	009b      	lsls	r3, r3, #2
{
 800f1a6:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f1a8:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	001a      	movs	r2, r3
 800f1ae:	0019      	movs	r1, r3
 800f1b0:	f000 f8fd 	bl	800f3ae <USBD_LL_Transmit>

  return USBD_OK;
}
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	bd10      	pop	{r4, pc}

0800f1b8 <USBD_CtlReceiveStatus>:
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f1b8:	23a5      	movs	r3, #165	@ 0xa5
 800f1ba:	2205      	movs	r2, #5
 800f1bc:	009b      	lsls	r3, r3, #2
{
 800f1be:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f1c0:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	001a      	movs	r2, r3
 800f1c6:	0019      	movs	r1, r3
 800f1c8:	f000 f8fa 	bl	800f3c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	bd10      	pop	{r4, pc}

0800f1d0 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f1d0:	23a6      	movs	r3, #166	@ 0xa6
{
 800f1d2:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	18c1      	adds	r1, r0, r3
 800f1d8:	3340      	adds	r3, #64	@ 0x40
 800f1da:	58c0      	ldr	r0, [r0, r3]
 800f1dc:	f7ff fc28 	bl	800ea30 <USBD_LL_SetupStage>
}
 800f1e0:	bd10      	pop	{r4, pc}

0800f1e2 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1e2:	2328      	movs	r3, #40	@ 0x28
 800f1e4:	434b      	muls	r3, r1
 800f1e6:	18c3      	adds	r3, r0, r3
 800f1e8:	33fc      	adds	r3, #252	@ 0xfc
 800f1ea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f1ec:	23b6      	movs	r3, #182	@ 0xb6
{
 800f1ee:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1f0:	009b      	lsls	r3, r3, #2
 800f1f2:	58c0      	ldr	r0, [r0, r3]
 800f1f4:	f7ff fc4c 	bl	800ea90 <USBD_LL_DataOutStage>
}
 800f1f8:	bd10      	pop	{r4, pc}

0800f1fa <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f1fa:	2328      	movs	r3, #40	@ 0x28
 800f1fc:	434b      	muls	r3, r1
 800f1fe:	18c3      	adds	r3, r0, r3
 800f200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f202:	23b6      	movs	r3, #182	@ 0xb6
{
 800f204:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f206:	009b      	lsls	r3, r3, #2
 800f208:	58c0      	ldr	r0, [r0, r3]
 800f20a:	f7ff fc7c 	bl	800eb06 <USBD_LL_DataInStage>
}
 800f20e:	bd10      	pop	{r4, pc}

0800f210 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800f210:	23b6      	movs	r3, #182	@ 0xb6
{
 800f212:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	58c0      	ldr	r0, [r0, r3]
 800f218:	f7ff fd16 	bl	800ec48 <USBD_LL_SOF>
}
 800f21c:	bd10      	pop	{r4, pc}

0800f21e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f21e:	b570      	push	{r4, r5, r6, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800f220:	7943      	ldrb	r3, [r0, #5]
{
 800f222:	0004      	movs	r4, r0
  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800f224:	2b02      	cmp	r3, #2
 800f226:	d001      	beq.n	800f22c <HAL_PCD_ResetCallback+0xe>
    speed = USBD_SPEED_HIGH;
  }
  #endif
  else
  {
    Error_Handler();
 800f228:	f7f1 fa8c 	bl	8000744 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800f22c:	25b6      	movs	r5, #182	@ 0xb6
 800f22e:	00ad      	lsls	r5, r5, #2
 800f230:	2101      	movs	r1, #1
 800f232:	5960      	ldr	r0, [r4, r5]
 800f234:	f7ff fcea 	bl	800ec0c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800f238:	5960      	ldr	r0, [r4, r5]
 800f23a:	f7ff fcb9 	bl	800ebb0 <USBD_LL_Reset>
}
 800f23e:	bd70      	pop	{r4, r5, r6, pc}

0800f240 <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800f240:	23b6      	movs	r3, #182	@ 0xb6
{
 800f242:	b510      	push	{r4, lr}
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	58c0      	ldr	r0, [r0, r3]
 800f248:	f7ff fce4 	bl	800ec14 <USBD_LL_Suspend>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
  }
#endif
  /* USER CODE END 2 */
}
 800f24c:	bd10      	pop	{r4, pc}

0800f24e <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800f24e:	23b6      	movs	r3, #182	@ 0xb6
{
 800f250:	b510      	push	{r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	58c0      	ldr	r0, [r0, r3]
 800f256:	f7ff fce9 	bl	800ec2c <USBD_LL_Resume>
}
 800f25a:	bd10      	pop	{r4, pc}

0800f25c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f25c:	b570      	push	{r4, r5, r6, lr}
 800f25e:	0004      	movs	r4, r0
#endif
  }
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800f260:	4b1e      	ldr	r3, [pc, #120]	@ (800f2dc <USBD_LL_Init+0x80>)
 800f262:	481f      	ldr	r0, [pc, #124]	@ (800f2e0 <USBD_LL_Init+0x84>)
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#endif

  if (pdev->id == DEVICE_FS)
 800f264:	7825      	ldrb	r5, [r4, #0]
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800f266:	6018      	str	r0, [r3, #0]
  if (pdev->id == DEVICE_FS)
 800f268:	2d00      	cmp	r5, #0
 800f26a:	d135      	bne.n	800f2d8 <USBD_LL_Init+0x7c>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800f26c:	23b6      	movs	r3, #182	@ 0xb6
    pdev->pData = hpcd_USB_OTG_PTR;
 800f26e:	26c4      	movs	r6, #196	@ 0xc4
    hpcd_USB_OTG_PTR->pData = pdev;
 800f270:	009b      	lsls	r3, r3, #2
    pdev->pData = hpcd_USB_OTG_PTR;
 800f272:	00b6      	lsls	r6, r6, #2

#if (STM32F1_DEVICE)
    /** Device is F1 or similar or if HAL_PCDEx_PMAConfig() is used by HAL driver */
    uint16_t pma_track = 0x40; /** PMA offset*/

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x00, PCD_SNG_BUF, pma_track);
 800f274:	002a      	movs	r2, r5
 800f276:	0029      	movs	r1, r5
    hpcd_USB_OTG_PTR->pData = pdev;
 800f278:	50c4      	str	r4, [r0, r3]
    pdev->pData = hpcd_USB_OTG_PTR;
 800f27a:	51a0      	str	r0, [r4, r6]
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x00, PCD_SNG_BUF, pma_track);
 800f27c:	2340      	movs	r3, #64	@ 0x40
 800f27e:	f7f6 fc50 	bl	8005b22 <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x80, PCD_SNG_BUF, pma_track);
 800f282:	2380      	movs	r3, #128	@ 0x80
 800f284:	002a      	movs	r2, r5
 800f286:	0019      	movs	r1, r3
 800f288:	59a0      	ldr	r0, [r4, r6]
 800f28a:	f7f6 fc4a 	bl	8005b22 <HAL_PCDEx_PMAConfig>
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_KEYBOARD_IN_EP, PCD_SNG_BUF, pma_track);
    pma_track += 8;
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CUSTOM_HID_IN_EP, PCD_SNG_BUF, pma_track);
 800f28e:	4b15      	ldr	r3, [pc, #84]	@ (800f2e4 <USBD_LL_Init+0x88>)
 800f290:	002a      	movs	r2, r5
 800f292:	7819      	ldrb	r1, [r3, #0]
 800f294:	59a0      	ldr	r0, [r4, r6]
 800f296:	23c0      	movs	r3, #192	@ 0xc0
 800f298:	f7f6 fc43 	bl	8005b22 <HAL_PCDEx_PMAConfig>
    pma_track += 8;
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CUSTOM_HID_OUT_EP, PCD_SNG_BUF, pma_track);
 800f29c:	4b12      	ldr	r3, [pc, #72]	@ (800f2e8 <USBD_LL_Init+0x8c>)
 800f29e:	002a      	movs	r2, r5
 800f2a0:	7819      	ldrb	r1, [r3, #0]
 800f2a2:	59a0      	ldr	r0, [r4, r6]
 800f2a4:	23c8      	movs	r3, #200	@ 0xc8
 800f2a6:	f7f6 fc3c 	bl	8005b22 <HAL_PCDEx_PMAConfig>
    pma_track += 128;
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
    {
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_IN_EP[i], PCD_SNG_BUF, pma_track);
 800f2aa:	4b10      	ldr	r3, [pc, #64]	@ (800f2ec <USBD_LL_Init+0x90>)
 800f2ac:	002a      	movs	r2, r5
 800f2ae:	7819      	ldrb	r1, [r3, #0]
 800f2b0:	59a0      	ldr	r0, [r4, r6]
 800f2b2:	23d0      	movs	r3, #208	@ 0xd0
 800f2b4:	f7f6 fc35 	bl	8005b22 <HAL_PCDEx_PMAConfig>
      pma_track += 48;

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_OUT_EP[i], PCD_SNG_BUF, pma_track);
 800f2b8:	4b0d      	ldr	r3, [pc, #52]	@ (800f2f0 <USBD_LL_Init+0x94>)
 800f2ba:	002a      	movs	r2, r5
 800f2bc:	7819      	ldrb	r1, [r3, #0]
 800f2be:	2380      	movs	r3, #128	@ 0x80
 800f2c0:	59a0      	ldr	r0, [r4, r6]
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	f7f6 fc2d 	bl	8005b22 <HAL_PCDEx_PMAConfig>
      pma_track += 48;

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_CMD_EP[i], PCD_SNG_BUF, pma_track);
 800f2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800f2f4 <USBD_LL_Init+0x98>)
 800f2ca:	002a      	movs	r2, r5
 800f2cc:	7819      	ldrb	r1, [r3, #0]
 800f2ce:	2398      	movs	r3, #152	@ 0x98
 800f2d0:	59a0      	ldr	r0, [r4, r6]
 800f2d2:	005b      	lsls	r3, r3, #1
 800f2d4:	f7f6 fc25 	bl	8005b22 <HAL_PCDEx_PMAConfig>
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
}
 800f2d8:	2000      	movs	r0, #0
 800f2da:	bd70      	pop	{r4, r5, r6, pc}
 800f2dc:	200023a0 	.word	0x200023a0
 800f2e0:	20000628 	.word	0x20000628
 800f2e4:	200002b9 	.word	0x200002b9
 800f2e8:	200002b8 	.word	0x200002b8
 800f2ec:	20002269 	.word	0x20002269
 800f2f0:	20002268 	.word	0x20002268
 800f2f4:	20002267 	.word	0x20002267

0800f2f8 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f2f8:	23c4      	movs	r3, #196	@ 0xc4
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	58c3      	ldr	r3, [r0, r3]

  if ((ep_addr & 0x80) == 0x80)
 800f2fe:	b248      	sxtb	r0, r1
 800f300:	2228      	movs	r2, #40	@ 0x28
 800f302:	2800      	cmp	r0, #0
 800f304:	da05      	bge.n	800f312 <USBD_LL_IsStallEP+0x1a>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f306:	207f      	movs	r0, #127	@ 0x7f
 800f308:	4001      	ands	r1, r0
 800f30a:	434a      	muls	r2, r1
 800f30c:	189b      	adds	r3, r3, r2
 800f30e:	7c98      	ldrb	r0, [r3, #18]
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
  }
}
 800f310:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f312:	434a      	muls	r2, r1
 800f314:	189b      	adds	r3, r3, r2
 800f316:	3353      	adds	r3, #83	@ 0x53
 800f318:	33ff      	adds	r3, #255	@ 0xff
 800f31a:	7818      	ldrb	r0, [r3, #0]
 800f31c:	e7f8      	b.n	800f310 <USBD_LL_IsStallEP+0x18>

0800f31e <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800f31e:	23c4      	movs	r3, #196	@ 0xc4
{
 800f320:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800f322:	009b      	lsls	r3, r3, #2
 800f324:	58c0      	ldr	r0, [r0, r3]
 800f326:	f7f6 fb80 	bl	8005a2a <HAL_PCD_EP_GetRxCount>
}
 800f32a:	bd10      	pop	{r4, pc}

0800f32c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800f32c:	2800      	cmp	r0, #0
 800f32e:	d002      	beq.n	800f336 <USBD_Get_USB_Status+0xa>
 800f330:	2802      	cmp	r0, #2
 800f332:	d001      	beq.n	800f338 <USBD_Get_USB_Status+0xc>
 800f334:	2003      	movs	r0, #3
  default:
    usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800f336:	4770      	bx	lr
    usb_status = USBD_BUSY;
 800f338:	2001      	movs	r0, #1
 800f33a:	e7fc      	b.n	800f336 <USBD_Get_USB_Status+0xa>

0800f33c <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 800f33c:	23c4      	movs	r3, #196	@ 0xc4
{
 800f33e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800f340:	009b      	lsls	r3, r3, #2
 800f342:	58c0      	ldr	r0, [r0, r3]
 800f344:	f7f5 fdfa 	bl	8004f3c <HAL_PCD_Start>
  usb_status = USBD_Get_USB_Status(hal_status);
 800f348:	f7ff fff0 	bl	800f32c <USBD_Get_USB_Status>
}
 800f34c:	bd10      	pop	{r4, pc}

0800f34e <USBD_LL_OpenEP>:
{
 800f34e:	b510      	push	{r4, lr}
 800f350:	0014      	movs	r4, r2
 800f352:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f354:	0023      	movs	r3, r4
 800f356:	24c4      	movs	r4, #196	@ 0xc4
 800f358:	00a4      	lsls	r4, r4, #2
 800f35a:	5900      	ldr	r0, [r0, r4]
 800f35c:	f7f6 faf8 	bl	8005950 <HAL_PCD_EP_Open>
  usb_status = USBD_Get_USB_Status(hal_status);
 800f360:	f7ff ffe4 	bl	800f32c <USBD_Get_USB_Status>
}
 800f364:	bd10      	pop	{r4, pc}

0800f366 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f366:	23c4      	movs	r3, #196	@ 0xc4
{
 800f368:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	58c0      	ldr	r0, [r0, r3]
 800f36e:	f7f6 fb1b 	bl	80059a8 <HAL_PCD_EP_Close>
  usb_status = USBD_Get_USB_Status(hal_status);
 800f372:	f7ff ffdb 	bl	800f32c <USBD_Get_USB_Status>
}
 800f376:	bd10      	pop	{r4, pc}

0800f378 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f378:	23c4      	movs	r3, #196	@ 0xc4
{
 800f37a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	58c0      	ldr	r0, [r0, r3]
 800f380:	f7f6 fb73 	bl	8005a6a <HAL_PCD_EP_SetStall>
  usb_status = USBD_Get_USB_Status(hal_status);
 800f384:	f7ff ffd2 	bl	800f32c <USBD_Get_USB_Status>
}
 800f388:	bd10      	pop	{r4, pc}

0800f38a <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f38a:	23c4      	movs	r3, #196	@ 0xc4
{
 800f38c:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f38e:	009b      	lsls	r3, r3, #2
 800f390:	58c0      	ldr	r0, [r0, r3]
 800f392:	f7f6 fb98 	bl	8005ac6 <HAL_PCD_EP_ClrStall>
  usb_status = USBD_Get_USB_Status(hal_status);
 800f396:	f7ff ffc9 	bl	800f32c <USBD_Get_USB_Status>
}
 800f39a:	bd10      	pop	{r4, pc}

0800f39c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f39c:	23c4      	movs	r3, #196	@ 0xc4
{
 800f39e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	58c0      	ldr	r0, [r0, r3]
 800f3a4:	f7f5 fddd 	bl	8004f62 <HAL_PCD_SetAddress>
  usb_status = USBD_Get_USB_Status(hal_status);
 800f3a8:	f7ff ffc0 	bl	800f32c <USBD_Get_USB_Status>
}
 800f3ac:	bd10      	pop	{r4, pc}

0800f3ae <USBD_LL_Transmit>:
{
 800f3ae:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f3b0:	24c4      	movs	r4, #196	@ 0xc4
 800f3b2:	00a4      	lsls	r4, r4, #2
 800f3b4:	5900      	ldr	r0, [r0, r4]
 800f3b6:	f7f6 fb40 	bl	8005a3a <HAL_PCD_EP_Transmit>
  usb_status = USBD_Get_USB_Status(hal_status);
 800f3ba:	f7ff ffb7 	bl	800f32c <USBD_Get_USB_Status>
}
 800f3be:	bd10      	pop	{r4, pc}

0800f3c0 <USBD_LL_PrepareReceive>:
{
 800f3c0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f3c2:	24c4      	movs	r4, #196	@ 0xc4
 800f3c4:	00a4      	lsls	r4, r4, #2
 800f3c6:	5900      	ldr	r0, [r0, r4]
 800f3c8:	f7f6 fb14 	bl	80059f4 <HAL_PCD_EP_Receive>
  usb_status = USBD_Get_USB_Status(hal_status);
 800f3cc:	f7ff ffae 	bl	800f32c <USBD_Get_USB_Status>
}
 800f3d0:	bd10      	pop	{r4, pc}

0800f3d2 <BSP_SPI1_IRQ_Callback>:
  * @brief  BSP SPI1 callback
  * @param  None
  * @return None
  */
__weak void BSP_NFC0XCOMM_IRQ_Callback(void)
{
 800f3d2:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */

  /* This function should be implemented by the user application.
   * It is called into this driver when an event from ST25R3916 is triggered.
   */
  st25r3916Isr();
 800f3d4:	f7f5 f94a 	bl	800466c <st25r3916Isr>
}
 800f3d8:	bd10      	pop	{r4, pc}

0800f3da <MX_X_CUBE_NFC6_Process>:
{
 800f3da:	b510      	push	{r4, lr}
    demoCycle();
 800f3dc:	f000 fc80 	bl	800fce0 <demoCycle>
}
 800f3e0:	bd10      	pop	{r4, pc}
	...

0800f3e4 <MX_NFC6_PollingDemo_Init>:
{
 800f3e4:	b510      	push	{r4, lr}
   BSP_NFC0XCOMM_Init();
 800f3e6:	f7f1 f875 	bl	80004d4 <BSP_SPI1_Init>
   BSP_COM_Init(COM1);
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	f7f5 faae 	bl	800494c <BSP_COM_Init>
   BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800f3f0:	2100      	movs	r1, #0
   USR_INT_LINE.Line = USR_INT_LINE_NUM;
 800f3f2:	4c41      	ldr	r4, [pc, #260]	@ (800f4f8 <MX_NFC6_PollingDemo_Init+0x114>)
 800f3f4:	4b41      	ldr	r3, [pc, #260]	@ (800f4fc <MX_NFC6_PollingDemo_Init+0x118>)
   BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800f3f6:	0008      	movs	r0, r1
   USR_INT_LINE.Line = USR_INT_LINE_NUM;
 800f3f8:	6023      	str	r3, [r4, #0]
   USR_INT_LINE.PendingCallback = st25r3916Isr;
 800f3fa:	4b41      	ldr	r3, [pc, #260]	@ (800f500 <MX_NFC6_PollingDemo_Init+0x11c>)
 800f3fc:	6063      	str	r3, [r4, #4]
   BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800f3fe:	f7f5 fa63 	bl	80048c8 <BSP_PB_Init>
  (void)HAL_EXTI_GetHandle(&USR_INT_LINE, USR_INT_LINE.Line);
 800f402:	6821      	ldr	r1, [r4, #0]
 800f404:	0020      	movs	r0, r4
 800f406:	f7f5 fc62 	bl	8004cce <HAL_EXTI_GetHandle>
  (void)HAL_EXTI_RegisterCallback(&USR_INT_LINE, HAL_EXTI_COMMON_CB_ID, BSP_NFC0XCOMM_IRQ_Callback);
 800f40a:	2100      	movs	r1, #0
 800f40c:	4a3d      	ldr	r2, [pc, #244]	@ (800f504 <MX_NFC6_PollingDemo_Init+0x120>)
 800f40e:	0020      	movs	r0, r4
 800f410:	f7f5 fc56 	bl	8004cc0 <HAL_EXTI_RegisterCallback>
  platformLog("Welcome to X-NUCLEO-NFC06A1\r\n");
 800f414:	483c      	ldr	r0, [pc, #240]	@ (800f508 <MX_NFC6_PollingDemo_Init+0x124>)
 800f416:	f000 fe71 	bl	80100fc <logUsart>
  if( !demoIni() )
 800f41a:	f000 fb1b 	bl	800fa54 <demoIni>
 800f41e:	2800      	cmp	r0, #0
 800f420:	d122      	bne.n	800f468 <MX_NFC6_PollingDemo_Init+0x84>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800f422:	2480      	movs	r4, #128	@ 0x80
    platformLog("Initialization failed..\r\n");
 800f424:	4839      	ldr	r0, [pc, #228]	@ (800f50c <MX_NFC6_PollingDemo_Init+0x128>)
 800f426:	f000 fe69 	bl	80100fc <logUsart>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800f42a:	00e4      	lsls	r4, r4, #3
      platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 800f42c:	2104      	movs	r1, #4
 800f42e:	4838      	ldr	r0, [pc, #224]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f430:	f7f5 fd30 	bl	8004e94 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800f434:	2102      	movs	r1, #2
 800f436:	4836      	ldr	r0, [pc, #216]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f438:	f7f5 fd2c 	bl	8004e94 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 800f43c:	2101      	movs	r1, #1
 800f43e:	4834      	ldr	r0, [pc, #208]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f440:	f7f5 fd28 	bl	8004e94 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800f444:	0021      	movs	r1, r4
 800f446:	4832      	ldr	r0, [pc, #200]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f448:	f7f5 fd24 	bl	8004e94 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800f44c:	2180      	movs	r1, #128	@ 0x80
 800f44e:	4830      	ldr	r0, [pc, #192]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f450:	0109      	lsls	r1, r1, #4
 800f452:	f7f5 fd1f 	bl	8004e94 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800f456:	2180      	movs	r1, #128	@ 0x80
 800f458:	482d      	ldr	r0, [pc, #180]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f45a:	0149      	lsls	r1, r1, #5
 800f45c:	f7f5 fd1a 	bl	8004e94 <HAL_GPIO_TogglePin>
      platformDelay(100);
 800f460:	2064      	movs	r0, #100	@ 0x64
 800f462:	f7f5 fb11 	bl	8004a88 <HAL_Delay>
    while(1)
 800f466:	e7e1      	b.n	800f42c <MX_NFC6_PollingDemo_Init+0x48>
    platformLog("Initialization succeeded..\r\n");
 800f468:	482a      	ldr	r0, [pc, #168]	@ (800f514 <MX_NFC6_PollingDemo_Init+0x130>)
 800f46a:	f000 fe47 	bl	80100fc <logUsart>
 800f46e:	2406      	movs	r4, #6
      platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 800f470:	2104      	movs	r1, #4
 800f472:	4827      	ldr	r0, [pc, #156]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f474:	f7f5 fd0e 	bl	8004e94 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800f478:	2102      	movs	r1, #2
 800f47a:	4825      	ldr	r0, [pc, #148]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f47c:	f7f5 fd0a 	bl	8004e94 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 800f480:	2101      	movs	r1, #1
 800f482:	4823      	ldr	r0, [pc, #140]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f484:	f7f5 fd06 	bl	8004e94 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800f488:	2180      	movs	r1, #128	@ 0x80
 800f48a:	4821      	ldr	r0, [pc, #132]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f48c:	00c9      	lsls	r1, r1, #3
 800f48e:	f7f5 fd01 	bl	8004e94 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800f492:	2180      	movs	r1, #128	@ 0x80
 800f494:	481e      	ldr	r0, [pc, #120]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f496:	0109      	lsls	r1, r1, #4
 800f498:	f7f5 fcfc 	bl	8004e94 <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800f49c:	2180      	movs	r1, #128	@ 0x80
 800f49e:	481c      	ldr	r0, [pc, #112]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f4a0:	0149      	lsls	r1, r1, #5
 800f4a2:	f7f5 fcf7 	bl	8004e94 <HAL_GPIO_TogglePin>
    for (int i = 0; i < 6; i++)
 800f4a6:	3c01      	subs	r4, #1
      platformDelay(200);
 800f4a8:	20c8      	movs	r0, #200	@ 0xc8
 800f4aa:	f7f5 faed 	bl	8004a88 <HAL_Delay>
    for (int i = 0; i < 6; i++)
 800f4ae:	2c00      	cmp	r4, #0
 800f4b0:	d1de      	bne.n	800f470 <MX_NFC6_PollingDemo_Init+0x8c>
    platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 800f4b2:	0022      	movs	r2, r4
 800f4b4:	2104      	movs	r1, #4
 800f4b6:	4816      	ldr	r0, [pc, #88]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f4b8:	f7f5 fce6 	bl	8004e88 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800f4bc:	0022      	movs	r2, r4
 800f4be:	2102      	movs	r1, #2
 800f4c0:	4813      	ldr	r0, [pc, #76]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f4c2:	f7f5 fce1 	bl	8004e88 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 800f4c6:	0022      	movs	r2, r4
 800f4c8:	2101      	movs	r1, #1
 800f4ca:	4811      	ldr	r0, [pc, #68]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f4cc:	f7f5 fcdc 	bl	8004e88 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800f4d0:	2180      	movs	r1, #128	@ 0x80
 800f4d2:	0022      	movs	r2, r4
 800f4d4:	480e      	ldr	r0, [pc, #56]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f4d6:	00c9      	lsls	r1, r1, #3
 800f4d8:	f7f5 fcd6 	bl	8004e88 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800f4dc:	2180      	movs	r1, #128	@ 0x80
 800f4de:	0022      	movs	r2, r4
 800f4e0:	480b      	ldr	r0, [pc, #44]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f4e2:	0109      	lsls	r1, r1, #4
 800f4e4:	f7f5 fcd0 	bl	8004e88 <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800f4e8:	2180      	movs	r1, #128	@ 0x80
 800f4ea:	0022      	movs	r2, r4
 800f4ec:	4808      	ldr	r0, [pc, #32]	@ (800f510 <MX_NFC6_PollingDemo_Init+0x12c>)
 800f4ee:	0149      	lsls	r1, r1, #5
 800f4f0:	f7f5 fcca 	bl	8004e88 <HAL_GPIO_WritePin>
}
 800f4f4:	bd10      	pop	{r4, pc}
 800f4f6:	46c0      	nop			@ (mov r8, r8)
 800f4f8:	2000276c 	.word	0x2000276c
 800f4fc:	06000001 	.word	0x06000001
 800f500:	0800466d 	.word	0x0800466d
 800f504:	0800f3d3 	.word	0x0800f3d3
 800f508:	0801101e 	.word	0x0801101e
 800f50c:	0801103c 	.word	0x0801103c
 800f510:	48000400 	.word	0x48000400
 800f514:	08011056 	.word	0x08011056

0800f518 <MX_X_CUBE_NFC6_Init>:
{
 800f518:	b510      	push	{r4, lr}
  MX_NFC6_PollingDemo_Init();
 800f51a:	f7ff ff63 	bl	800f3e4 <MX_NFC6_PollingDemo_Init>
}
 800f51e:	bd10      	pop	{r4, pc}

0800f520 <BSP_NFC0XCOMM_SendRecv>:
{
 800f520:	b513      	push	{r0, r1, r4, lr}
 800f522:	1e04      	subs	r4, r0, #0
  if((pTxData != NULL) && (pRxData != NULL))
 800f524:	d011      	beq.n	800f54a <BSP_NFC0XCOMM_SendRecv+0x2a>
    status = HAL_SPI_TransmitReceive(&COMM_HANDLE, (uint8_t *)pTxData, (uint8_t *)pRxData, Length, 2000);
 800f526:	23fa      	movs	r3, #250	@ 0xfa
 800f528:	480d      	ldr	r0, [pc, #52]	@ (800f560 <BSP_NFC0XCOMM_SendRecv+0x40>)
 800f52a:	00db      	lsls	r3, r3, #3
  if((pTxData != NULL) && (pRxData != NULL))
 800f52c:	2900      	cmp	r1, #0
 800f52e:	d008      	beq.n	800f542 <BSP_NFC0XCOMM_SendRecv+0x22>
    status = HAL_SPI_TransmitReceive(&COMM_HANDLE, (uint8_t *)pTxData, (uint8_t *)pRxData, Length, 2000);
 800f530:	9300      	str	r3, [sp, #0]
 800f532:	0013      	movs	r3, r2
 800f534:	000a      	movs	r2, r1
 800f536:	0021      	movs	r1, r4
 800f538:	f7f7 f948 	bl	80067cc <HAL_SPI_TransmitReceive>
  if (status != HAL_OK)
 800f53c:	2800      	cmp	r0, #0
 800f53e:	d106      	bne.n	800f54e <BSP_NFC0XCOMM_SendRecv+0x2e>
 800f540:	e007      	b.n	800f552 <BSP_NFC0XCOMM_SendRecv+0x32>
    status = HAL_SPI_Transmit(&COMM_HANDLE, (uint8_t *)pTxData, Length, 2000);
 800f542:	0021      	movs	r1, r4
 800f544:	f7f7 f880 	bl	8006648 <HAL_SPI_Transmit>
 800f548:	e7f8      	b.n	800f53c <BSP_NFC0XCOMM_SendRecv+0x1c>
  else if ((pTxData == NULL) && (pRxData != NULL))
 800f54a:	2900      	cmp	r1, #0
 800f54c:	d102      	bne.n	800f554 <BSP_NFC0XCOMM_SendRecv+0x34>
    ret = BSP_NFC0XCOMM_Init();
 800f54e:	f7f0 ffc1 	bl	80004d4 <BSP_SPI1_Init>
}
 800f552:	bd16      	pop	{r1, r2, r4, pc}
    status = HAL_SPI_Receive(&COMM_HANDLE, (uint8_t *)pRxData, Length, 2000);
 800f554:	23fa      	movs	r3, #250	@ 0xfa
 800f556:	4802      	ldr	r0, [pc, #8]	@ (800f560 <BSP_NFC0XCOMM_SendRecv+0x40>)
 800f558:	00db      	lsls	r3, r3, #3
 800f55a:	f7f7 fa41 	bl	80069e0 <HAL_SPI_Receive>
 800f55e:	e7ed      	b.n	800f53c <BSP_NFC0XCOMM_SendRecv+0x1c>
 800f560:	200003d8 	.word	0x200003d8

0800f564 <cmdCompare>:
  * @retval True : Same command.
  * @retval False : Different command.
  *****************************************************************************
  */
static bool cmdCompare(uint8_t *cmd, uint8_t *find, uint16_t len)
{
 800f564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f566:	0007      	movs	r7, r0
 800f568:	000d      	movs	r5, r1
 800f56a:	0016      	movs	r6, r2
 800f56c:	0004      	movs	r4, r0
 800f56e:	3714      	adds	r7, #20
  for(int i = 0; i < 20; i++)
  {
    if(!memcmp(&cmd[i],find, len))
 800f570:	0032      	movs	r2, r6
 800f572:	0029      	movs	r1, r5
 800f574:	0020      	movs	r0, r4
 800f576:	f000 fe87 	bl	8010288 <memcmp>
 800f57a:	2800      	cmp	r0, #0
 800f57c:	d004      	beq.n	800f588 <cmdCompare+0x24>
  for(int i = 0; i < 20; i++)
 800f57e:	3401      	adds	r4, #1
 800f580:	42bc      	cmp	r4, r7
 800f582:	d1f5      	bne.n	800f570 <cmdCompare+0xc>
    {
      return true;
    }
  }
  return false;
 800f584:	2000      	movs	r0, #0
}
 800f586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return true;
 800f588:	2001      	movs	r0, #1
 800f58a:	e7fc      	b.n	800f586 <cmdCompare+0x22>

0800f58c <demoCeT3TCheck>:
  *
  * @return Answer size.
  *****************************************************************************
  */
static uint16_t demoCeT3TCheck(uint8_t *cmdData, uint8_t *rspData, uint16_t rspDataLen)
{
 800f58c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
  uint32_t idx = 0;
  uint32_t cnt = 0;
  uint32_t nbmax = 0;

  /* Command response */
  rspData[idx++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION + 1;
 800f58e:	2307      	movs	r3, #7

  /* NFCID 2 bytes */
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 800f590:	4f40      	ldr	r7, [pc, #256]	@ (800f694 <demoCeT3TCheck+0x108>)
{
 800f592:	b0ff      	sub	sp, #508	@ 0x1fc
 800f594:	9201      	str	r2, [sp, #4]
  rspData[idx++] = RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION + 1;
 800f596:	700b      	strb	r3, [r1, #0]
{
 800f598:	0005      	movs	r5, r0
 800f59a:	000c      	movs	r4, r1
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 800f59c:	2208      	movs	r2, #8
 800f59e:	1c81      	adds	r1, r0, #2
 800f5a0:	0038      	movs	r0, r7
 800f5a2:	f000 fe71 	bl	8010288 <memcmp>
 800f5a6:	0006      	movs	r6, r0
    idx += RFAL_NFCF_NFCID2_LEN;
  }
  else
  {
    /* If NFCID2 in command is different, no answer */
    return 0;
 800f5a8:	2000      	movs	r0, #0
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 800f5aa:	4286      	cmp	r6, r0
 800f5ac:	d145      	bne.n	800f63a <demoCeT3TCheck+0xae>
    ST_MEMCPY( &rspData[idx], &gNfcfNfcid, RFAL_NFCF_NFCID2_LEN );
 800f5ae:	2208      	movs	r2, #8
 800f5b0:	0039      	movs	r1, r7
 800f5b2:	1c60      	adds	r0, r4, #1
 800f5b4:	f000 febc 	bl	8010330 <memcpy>
  }

  /* Check for command errors */
  if( (cmdData[10] != 1) || ((cmdData[11] != 0x09) && (cmdData[11] != 0x0B))
 800f5b8:	7aab      	ldrb	r3, [r5, #10]
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d141      	bne.n	800f642 <demoCeT3TCheck+0xb6>
 800f5be:	7aea      	ldrb	r2, [r5, #11]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	439a      	bics	r2, r3
 800f5c4:	33fd      	adds	r3, #253	@ 0xfd
 800f5c6:	2a09      	cmp	r2, #9
 800f5c8:	d133      	bne.n	800f632 <demoCeT3TCheck+0xa6>
            || (cmdData[13] == 0) || (cmdData[13] > InformationBlock[1]) )
 800f5ca:	7b6a      	ldrb	r2, [r5, #13]
 800f5cc:	2a00      	cmp	r2, #0
 800f5ce:	d030      	beq.n	800f632 <demoCeT3TCheck+0xa6>
 800f5d0:	4f31      	ldr	r7, [pc, #196]	@ (800f698 <demoCeT3TCheck+0x10c>)
 800f5d2:	7879      	ldrb	r1, [r7, #1]
 800f5d4:	4291      	cmp	r1, r2
 800f5d6:	d32c      	bcc.n	800f632 <demoCeT3TCheck+0xa6>
    rspData[idx++] = 0xFF;
    return idx;
  }
  else
  {
    rspData[idx++] = 0x00;
 800f5d8:	7266      	strb	r6, [r4, #9]
    rspData[idx++] = 0x00;
 800f5da:	72a6      	strb	r6, [r4, #10]
  }

  /* Verify CHECK response length */
  if( rspDataLen < (11 + (cmdData[13] * T3T_BLOCK_SIZE)) )
 800f5dc:	7b6b      	ldrb	r3, [r5, #13]
 800f5de:	9a01      	ldr	r2, [sp, #4]
 800f5e0:	011b      	lsls	r3, r3, #4
 800f5e2:	330a      	adds	r3, #10
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	db04      	blt.n	800f5f2 <demoCeT3TCheck+0x66>
  {
    platformErrorHandle();  /* Must ensure appropriate buffer */
 800f5e8:	21c2      	movs	r1, #194	@ 0xc2
 800f5ea:	482c      	ldr	r0, [pc, #176]	@ (800f69c <demoCeT3TCheck+0x110>)
 800f5ec:	0049      	lsls	r1, r1, #1
 800f5ee:	f000 fdd9 	bl	80101a4 <_Error_Handler>
  }

  /* Nob */
  rspData[idx++] = cmdData[13];
 800f5f2:	793a      	ldrb	r2, [r7, #4]
 800f5f4:	78f9      	ldrb	r1, [r7, #3]
 800f5f6:	0212      	lsls	r2, r2, #8
 800f5f8:	430a      	orrs	r2, r1
 800f5fa:	ba52      	rev16	r2, r2
 800f5fc:	b292      	uxth	r2, r2

  /* Retrieving block to read */
  block = &cmdData[14];
 800f5fe:	002b      	movs	r3, r5
 800f600:	9201      	str	r2, [sp, #4]
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 800f602:	2200      	movs	r2, #0
  rspData[idx++] = cmdData[13];
 800f604:	7b68      	ldrb	r0, [r5, #13]
  block = &cmdData[14];
 800f606:	330e      	adds	r3, #14
  rspData[idx++] = cmdData[13];
 800f608:	72e0      	strb	r0, [r4, #11]
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 800f60a:	4290      	cmp	r0, r2
 800f60c:	d808      	bhi.n	800f620 <demoCeT3TCheck+0x94>
      rspData[idx - 2] = 0x70;
      return (idx - 1);
    }
  }

  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 800f60e:	2600      	movs	r6, #0
 800f610:	340c      	adds	r4, #12
 800f612:	7b6b      	ldrb	r3, [r5, #13]
 800f614:	42b3      	cmp	r3, r6
 800f616:	d82c      	bhi.n	800f672 <demoCeT3TCheck+0xe6>
      ST_MEMCPY( &rspData[idx], &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], T3T_BLOCK_SIZE);
      idx += T3T_BLOCK_SIZE;
    }
  }

  return idx;
 800f618:	0130      	lsls	r0, r6, #4
 800f61a:	300c      	adds	r0, #12
 800f61c:	b280      	uxth	r0, r0
 800f61e:	e00c      	b.n	800f63a <demoCeT3TCheck+0xae>
	if( ((*block) & 0x0F) >=  cmdData[10] )
 800f620:	7aaf      	ldrb	r7, [r5, #10]
 800f622:	7819      	ldrb	r1, [r3, #0]
 800f624:	46bc      	mov	ip, r7
 800f626:	260f      	movs	r6, #15
 800f628:	000f      	movs	r7, r1
 800f62a:	4037      	ands	r7, r6
 800f62c:	45bc      	cmp	ip, r7
 800f62e:	d80c      	bhi.n	800f64a <demoCeT3TCheck+0xbe>
 800f630:	2380      	movs	r3, #128	@ 0x80
	      rspData[idx - 3] = 0xFF;
 800f632:	22ff      	movs	r2, #255	@ 0xff
    return idx;
 800f634:	200b      	movs	r0, #11
	      rspData[idx - 3] = 0xFF;
 800f636:	7262      	strb	r2, [r4, #9]
	      rspData[idx - 2] = 0x80; /* TS T3T table 13 - proprietary value to indicate specific error conditions.*/
 800f638:	72a3      	strb	r3, [r4, #10]
}
 800f63a:	2383      	movs	r3, #131	@ 0x83
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	449d      	add	sp, r3
 800f640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f642:	23ff      	movs	r3, #255	@ 0xff
 800f644:	e7f5      	b.n	800f632 <demoCeT3TCheck+0xa6>
 800f646:	2370      	movs	r3, #112	@ 0x70
 800f648:	e7f3      	b.n	800f632 <demoCeT3TCheck+0xa6>
    if( *block & 0x80 )
 800f64a:	b249      	sxtb	r1, r1
      blocknb[cnt] = *(block + 1);
 800f64c:	785f      	ldrb	r7, [r3, #1]
    if( *block & 0x80 )
 800f64e:	2900      	cmp	r1, #0
 800f650:	da09      	bge.n	800f666 <demoCeT3TCheck+0xda>
      blocknb[cnt] = *(block + 1);
 800f652:	0039      	movs	r1, r7
      block += 2;
 800f654:	3302      	adds	r3, #2
 800f656:	ae02      	add	r6, sp, #8
 800f658:	0057      	lsls	r7, r2, #1
 800f65a:	53b9      	strh	r1, [r7, r6]
    if( blocknb[cnt] > nbmax )
 800f65c:	9e01      	ldr	r6, [sp, #4]
 800f65e:	42b1      	cmp	r1, r6
 800f660:	d8f1      	bhi.n	800f646 <demoCeT3TCheck+0xba>
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 800f662:	3201      	adds	r2, #1
 800f664:	e7d1      	b.n	800f60a <demoCeT3TCheck+0x7e>
      blocknb[cnt] |= *(block + 1);
 800f666:	7899      	ldrb	r1, [r3, #2]
 800f668:	785f      	ldrb	r7, [r3, #1]
 800f66a:	0209      	lsls	r1, r1, #8
 800f66c:	4339      	orrs	r1, r7
      block += 3;
 800f66e:	3303      	adds	r3, #3
 800f670:	e7f1      	b.n	800f656 <demoCeT3TCheck+0xca>
    if( blocknb[cnt] == 0x0000 )
 800f672:	0073      	lsls	r3, r6, #1
 800f674:	aa02      	add	r2, sp, #8
 800f676:	5a99      	ldrh	r1, [r3, r2]
 800f678:	2900      	cmp	r1, #0
 800f67a:	d107      	bne.n	800f68c <demoCeT3TCheck+0x100>
      ST_MEMCPY( &rspData[idx], InformationBlock, sizeof(InformationBlock));
 800f67c:	4906      	ldr	r1, [pc, #24]	@ (800f698 <demoCeT3TCheck+0x10c>)
      ST_MEMCPY( &rspData[idx], &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], T3T_BLOCK_SIZE);
 800f67e:	0020      	movs	r0, r4
 800f680:	2210      	movs	r2, #16
 800f682:	f000 fe55 	bl	8010330 <memcpy>
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 800f686:	3601      	adds	r6, #1
 800f688:	3410      	adds	r4, #16
 800f68a:	e7c2      	b.n	800f612 <demoCeT3TCheck+0x86>
      ST_MEMCPY( &rspData[idx], &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], T3T_BLOCK_SIZE);
 800f68c:	4b04      	ldr	r3, [pc, #16]	@ (800f6a0 <demoCeT3TCheck+0x114>)
 800f68e:	0109      	lsls	r1, r1, #4
 800f690:	18c9      	adds	r1, r1, r3
 800f692:	e7f4      	b.n	800f67e <demoCeT3TCheck+0xf2>
 800f694:	200024a6 	.word	0x200024a6
 800f698:	200002ba 	.word	0x200002ba
 800f69c:	08011073 	.word	0x08011073
 800f6a0:	20002398 	.word	0x20002398

0800f6a4 <demoCeT3TUpdate>:
  *
  * @return Answer size.
  *****************************************************************************
  */
static uint16_t demoCeT3TUpdate(uint8_t *cmdData, uint8_t *rspData)
{
 800f6a4:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
  uint32_t idx = 0;
  uint32_t cnt = 0;
  uint32_t nbmax = 0;

  /* Command response */
  rspData[idx++] = RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION + 1;
 800f6a6:	2309      	movs	r3, #9

  /* NFCID 2 bytes */
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 800f6a8:	4f37      	ldr	r7, [pc, #220]	@ (800f788 <demoCeT3TUpdate+0xe4>)
{
 800f6aa:	b0ff      	sub	sp, #508	@ 0x1fc
 800f6ac:	0005      	movs	r5, r0
  rspData[idx++] = RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION + 1;
 800f6ae:	700b      	strb	r3, [r1, #0]
{
 800f6b0:	000c      	movs	r4, r1
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 800f6b2:	2208      	movs	r2, #8
 800f6b4:	1c81      	adds	r1, r0, #2
 800f6b6:	0038      	movs	r0, r7
 800f6b8:	f000 fde6 	bl	8010288 <memcmp>
 800f6bc:	0006      	movs	r6, r0
    idx += RFAL_NFCF_NFCID2_LEN;
  }
  else
  {
    /* If NFCID2 in command is different, no answer */
    return 0;
 800f6be:	2000      	movs	r0, #0
  if( ST_BYTECMP( gNfcfNfcid, &cmdData[ RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN ], RFAL_NFCF_NFCID2_LEN ) == 0 )
 800f6c0:	4286      	cmp	r6, r0
 800f6c2:	d13d      	bne.n	800f740 <demoCeT3TUpdate+0x9c>
    ST_MEMCPY( &rspData[idx], gNfcfNfcid, RFAL_NFCF_NFCID2_LEN );
 800f6c4:	2208      	movs	r2, #8
 800f6c6:	0039      	movs	r1, r7
 800f6c8:	1c60      	adds	r0, r4, #1
 800f6ca:	f000 fe31 	bl	8010330 <memcpy>
  }

  /* Check for command errors */
  if( (cmdData[10] != 1) || (cmdData[11] != 0x09)
 800f6ce:	7aab      	ldrb	r3, [r5, #10]
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d13f      	bne.n	800f754 <demoCeT3TUpdate+0xb0>
 800f6d4:	7aeb      	ldrb	r3, [r5, #11]
 800f6d6:	2b09      	cmp	r3, #9
 800f6d8:	d13c      	bne.n	800f754 <demoCeT3TUpdate+0xb0>
            || (cmdData[13] == 0) || (cmdData[13] > InformationBlock[2]) )
 800f6da:	7b6b      	ldrb	r3, [r5, #13]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d039      	beq.n	800f754 <demoCeT3TUpdate+0xb0>
 800f6e0:	4f2a      	ldr	r7, [pc, #168]	@ (800f78c <demoCeT3TUpdate+0xe8>)
 800f6e2:	78ba      	ldrb	r2, [r7, #2]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d335      	bcc.n	800f754 <demoCeT3TUpdate+0xb0>
    rspData[idx++] = 0x00;
    rspData[idx++] = 0x00;
  }

  /* Retrieving block to read */
  block = &cmdData[14];
 800f6e8:	002b      	movs	r3, r5
    rspData[idx++] = 0x00;
 800f6ea:	7266      	strb	r6, [r4, #9]
    rspData[idx++] = 0x00;
 800f6ec:	72a6      	strb	r6, [r4, #10]
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 800f6ee:	7b6a      	ldrb	r2, [r5, #13]
 800f6f0:	78f9      	ldrb	r1, [r7, #3]
 800f6f2:	9200      	str	r2, [sp, #0]
 800f6f4:	793a      	ldrb	r2, [r7, #4]
  block = &cmdData[14];
 800f6f6:	330e      	adds	r3, #14
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 800f6f8:	0212      	lsls	r2, r2, #8
 800f6fa:	430a      	orrs	r2, r1
 800f6fc:	ba52      	rev16	r2, r2
 800f6fe:	b292      	uxth	r2, r2
 800f700:	9201      	str	r2, [sp, #4]
 800f702:	9a00      	ldr	r2, [sp, #0]
 800f704:	42b2      	cmp	r2, r6
 800f706:	d809      	bhi.n	800f71c <demoCeT3TUpdate+0x78>
      rspData[idx - 1] = 0x70;
      return idx;
    }
  }

  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 800f708:	2600      	movs	r6, #0
 800f70a:	9300      	str	r3, [sp, #0]
 800f70c:	7b6b      	ldrb	r3, [r5, #13]
 800f70e:	42b3      	cmp	r3, r6
 800f710:	d824      	bhi.n	800f75c <demoCeT3TUpdate+0xb8>
      block += T3T_BLOCK_SIZE;
    }
  }

    /* Status flag answer */
  rspData[idx++] = 0x00;
 800f712:	2300      	movs	r3, #0
  rspData[idx++] = 0x00;

  return idx;
 800f714:	200d      	movs	r0, #13
  rspData[idx++] = 0x00;
 800f716:	72e3      	strb	r3, [r4, #11]
  rspData[idx++] = 0x00;
 800f718:	7323      	strb	r3, [r4, #12]
  return idx;
 800f71a:	e011      	b.n	800f740 <demoCeT3TUpdate+0x9c>
    if( *block & 0x80 )
 800f71c:	781a      	ldrb	r2, [r3, #0]
      blocknb[cnt] = *(block + 1);
 800f71e:	7859      	ldrb	r1, [r3, #1]
    if( *block & 0x80 )
 800f720:	2a7f      	cmp	r2, #127	@ 0x7f
 800f722:	d911      	bls.n	800f748 <demoCeT3TUpdate+0xa4>
      block += 2;
 800f724:	3302      	adds	r3, #2
 800f726:	0072      	lsls	r2, r6, #1
 800f728:	4694      	mov	ip, r2
 800f72a:	4660      	mov	r0, ip
 800f72c:	aa02      	add	r2, sp, #8
 800f72e:	5281      	strh	r1, [r0, r2]
    if( blocknb[cnt] > nbmax )
 800f730:	9a01      	ldr	r2, [sp, #4]
 800f732:	428a      	cmp	r2, r1
 800f734:	d210      	bcs.n	800f758 <demoCeT3TUpdate+0xb4>
 800f736:	2370      	movs	r3, #112	@ 0x70
      rspData[idx - 2] = 0xFF;
 800f738:	22ff      	movs	r2, #255	@ 0xff
    return idx;
 800f73a:	200b      	movs	r0, #11
      rspData[idx - 2] = 0xFF;
 800f73c:	7262      	strb	r2, [r4, #9]
      rspData[idx - 1] = 0x70;
 800f73e:	72a3      	strb	r3, [r4, #10]
}
 800f740:	2383      	movs	r3, #131	@ 0x83
 800f742:	009b      	lsls	r3, r3, #2
 800f744:	449d      	add	sp, r3
 800f746:	bdf0      	pop	{r4, r5, r6, r7, pc}
      blocknb[cnt] |= *(block + 1);
 800f748:	7899      	ldrb	r1, [r3, #2]
 800f74a:	785a      	ldrb	r2, [r3, #1]
 800f74c:	0209      	lsls	r1, r1, #8
 800f74e:	4311      	orrs	r1, r2
      block += 3;
 800f750:	3303      	adds	r3, #3
 800f752:	e7e8      	b.n	800f726 <demoCeT3TUpdate+0x82>
 800f754:	23ff      	movs	r3, #255	@ 0xff
 800f756:	e7ef      	b.n	800f738 <demoCeT3TUpdate+0x94>
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 800f758:	3601      	adds	r6, #1
 800f75a:	e7d2      	b.n	800f702 <demoCeT3TUpdate+0x5e>
    if( blocknb[cnt] == 0x0000 )
 800f75c:	0073      	lsls	r3, r6, #1
 800f75e:	aa02      	add	r2, sp, #8
 800f760:	5a98      	ldrh	r0, [r3, r2]
 800f762:	2800      	cmp	r0, #0
 800f764:	d109      	bne.n	800f77a <demoCeT3TUpdate+0xd6>
      ST_MEMCPY( InformationBlock, block, T3T_BLOCK_SIZE);
 800f766:	2210      	movs	r2, #16
 800f768:	0038      	movs	r0, r7
 800f76a:	9900      	ldr	r1, [sp, #0]
      ST_MEMCPY( &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], block, T3T_BLOCK_SIZE);
 800f76c:	f000 fde0 	bl	8010330 <memcpy>
  for( cnt = 0; cnt < cmdData[13]; cnt++ )
 800f770:	9b00      	ldr	r3, [sp, #0]
 800f772:	3601      	adds	r6, #1
 800f774:	3310      	adds	r3, #16
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	e7c8      	b.n	800f70c <demoCeT3TUpdate+0x68>
      ST_MEMCPY( &ndefFile[2 + ((blocknb[cnt] - 1) * T3T_BLOCK_SIZE) ], block, T3T_BLOCK_SIZE);
 800f77a:	4b05      	ldr	r3, [pc, #20]	@ (800f790 <demoCeT3TUpdate+0xec>)
 800f77c:	0100      	lsls	r0, r0, #4
 800f77e:	2210      	movs	r2, #16
 800f780:	9900      	ldr	r1, [sp, #0]
 800f782:	18c0      	adds	r0, r0, r3
 800f784:	e7f2      	b.n	800f76c <demoCeT3TUpdate+0xc8>
 800f786:	46c0      	nop			@ (mov r8, r8)
 800f788:	200024a6 	.word	0x200024a6
 800f78c:	200002ba 	.word	0x200002ba
 800f790:	20002398 	.word	0x20002398

0800f794 <demoCeInit>:
  *
  * @return None
  *****************************************************************************
  */
void demoCeInit( uint8_t* nfcfNfcid )
{
 800f794:	0001      	movs	r1, r0
 800f796:	b510      	push	{r4, lr}
    if( nfcfNfcid != NULL )
 800f798:	2800      	cmp	r0, #0
 800f79a:	d003      	beq.n	800f7a4 <demoCeInit+0x10>
    {
        ST_MEMCPY( gNfcfNfcid, nfcfNfcid, RFAL_NFCF_NFCID2_LEN );
 800f79c:	2208      	movs	r2, #8
 800f79e:	480e      	ldr	r0, [pc, #56]	@ (800f7d8 <demoCeInit+0x44>)
 800f7a0:	f000 fdc6 	bl	8010330 <memcpy>
    }

    ST_MEMCPY( ndefFile, (uint8_t *)demoNdefFile, demoNdefFileLen );
 800f7a4:	4b0d      	ldr	r3, [pc, #52]	@ (800f7dc <demoCeInit+0x48>)
 800f7a6:	480e      	ldr	r0, [pc, #56]	@ (800f7e0 <demoCeInit+0x4c>)
 800f7a8:	681c      	ldr	r4, [r3, #0]
 800f7aa:	4b0e      	ldr	r3, [pc, #56]	@ (800f7e4 <demoCeInit+0x50>)
 800f7ac:	0021      	movs	r1, r4
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	f000 fdbe 	bl	8010330 <memcpy>
    /* Update AIB Ln with actual NDEF length */
    InformationBlock[12] = demoNdefFile[0];
    InformationBlock[13] = demoNdefFile[1];
    uint16_t checksum = 0;
    for (int i = 0; i < 14; i++)
 800f7b4:	2100      	movs	r1, #0
    InformationBlock[12] = demoNdefFile[0];
 800f7b6:	7823      	ldrb	r3, [r4, #0]
 800f7b8:	4a0b      	ldr	r2, [pc, #44]	@ (800f7e8 <demoCeInit+0x54>)
 800f7ba:	7313      	strb	r3, [r2, #12]
    InformationBlock[13] = demoNdefFile[1];
 800f7bc:	7863      	ldrb	r3, [r4, #1]
 800f7be:	7353      	strb	r3, [r2, #13]
    uint16_t checksum = 0;
 800f7c0:	000b      	movs	r3, r1
    {
        checksum += InformationBlock[i];
 800f7c2:	5c50      	ldrb	r0, [r2, r1]
    for (int i = 0; i < 14; i++)
 800f7c4:	3101      	adds	r1, #1
        checksum += InformationBlock[i];
 800f7c6:	181b      	adds	r3, r3, r0
 800f7c8:	b29b      	uxth	r3, r3
    for (int i = 0; i < 14; i++)
 800f7ca:	290e      	cmp	r1, #14
 800f7cc:	d1f9      	bne.n	800f7c2 <demoCeInit+0x2e>
    }
    InformationBlock[14] = checksum >> 8;
 800f7ce:	0a19      	lsrs	r1, r3, #8
 800f7d0:	7391      	strb	r1, [r2, #14]
    InformationBlock[15] = checksum & 0xFF;
 800f7d2:	73d3      	strb	r3, [r2, #15]
}
 800f7d4:	bd10      	pop	{r4, pc}
 800f7d6:	46c0      	nop			@ (mov r8, r8)
 800f7d8:	200024a6 	.word	0x200024a6
 800f7dc:	200002d0 	.word	0x200002d0
 800f7e0:	200023a6 	.word	0x200023a6
 800f7e4:	200002cc 	.word	0x200002cc
 800f7e8:	200002ba 	.word	0x200002ba

0800f7ec <demoCeT4T>:
  *
  * @return Response size.
  *****************************************************************************
  */
uint16_t demoCeT4T(uint8_t *rxData, uint16_t rxDataLen, uint8_t *txBuf, uint16_t txBufLen )
{
 800f7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7ee:	0005      	movs	r5, r0
 800f7f0:	000e      	movs	r6, r1
 800f7f2:	0014      	movs	r4, r2
 800f7f4:	001f      	movs	r7, r3
 800f7f6:	b087      	sub	sp, #28
  if( (txBuf == NULL) || (txBufLen < 2) )
 800f7f8:	2a00      	cmp	r2, #0
 800f7fa:	d001      	beq.n	800f800 <demoCeT4T+0x14>
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d803      	bhi.n	800f808 <demoCeT4T+0x1c>
  {
    platformErrorHandle();  /* Must ensure appropriate buffer */
 800f800:	4858      	ldr	r0, [pc, #352]	@ (800f964 <demoCeT4T+0x178>)
 800f802:	4959      	ldr	r1, [pc, #356]	@ (800f968 <demoCeT4T+0x17c>)
 800f804:	f000 fcce 	bl	80101a4 <_Error_Handler>
  }

  if( (rxData != NULL) && (rxDataLen >= 4) )
 800f808:	2d00      	cmp	r5, #0
 800f80a:	d100      	bne.n	800f80e <demoCeT4T+0x22>
 800f80c:	e0a7      	b.n	800f95e <demoCeT4T+0x172>
 800f80e:	2e03      	cmp	r6, #3
 800f810:	d800      	bhi.n	800f814 <demoCeT4T+0x28>
 800f812:	e0a4      	b.n	800f95e <demoCeT4T+0x172>
  {
      if(rxData[0] == T4T_CLA_00)
 800f814:	782e      	ldrb	r6, [r5, #0]
 800f816:	2e00      	cmp	r6, #0
 800f818:	d000      	beq.n	800f81c <demoCeT4T+0x30>
 800f81a:	e0a0      	b.n	800f95e <demoCeT4T+0x172>
      {
          switch(rxData[1])
 800f81c:	786b      	ldrb	r3, [r5, #1]
 800f81e:	2bb0      	cmp	r3, #176	@ 0xb0
 800f820:	d04d      	beq.n	800f8be <demoCeT4T+0xd2>
 800f822:	2bd6      	cmp	r3, #214	@ 0xd6
 800f824:	d100      	bne.n	800f828 <demoCeT4T+0x3c>
 800f826:	e081      	b.n	800f92c <demoCeT4T+0x140>
 800f828:	2ba4      	cmp	r3, #164	@ 0xa4
 800f82a:	d000      	beq.n	800f82e <demoCeT4T+0x42>
 800f82c:	e097      	b.n	800f95e <demoCeT4T+0x172>
  uint8_t aid[] = {0xD2, 0x76, 0x00, 0x00, 0x85, 0x01, 0x01};
 800f82e:	4b4f      	ldr	r3, [pc, #316]	@ (800f96c <demoCeT4T+0x180>)
 800f830:	2207      	movs	r2, #7
 800f832:	0019      	movs	r1, r3
 800f834:	a804      	add	r0, sp, #16
 800f836:	001f      	movs	r7, r3
 800f838:	f000 fd7a 	bl	8010330 <memcpy>
  uint8_t fidCC[] = {FID_CC >> 8 , FID_CC & 0xFF};
 800f83c:	466a      	mov	r2, sp
 800f83e:	4b4c      	ldr	r3, [pc, #304]	@ (800f970 <demoCeT4T+0x184>)
  uint8_t selectFileId[] = {0xA4, 0x00, 0x0C, 0x02, 0x00, 0x01 };
 800f840:	1df9      	adds	r1, r7, #7
  uint8_t fidCC[] = {FID_CC >> 8 , FID_CC & 0xFF};
 800f842:	8013      	strh	r3, [r2, #0]
  uint8_t fidNDEF[] = {FID_NDEF >> 8, FID_NDEF & 0xFF};
 800f844:	2380      	movs	r3, #128	@ 0x80
 800f846:	005b      	lsls	r3, r3, #1
 800f848:	8093      	strh	r3, [r2, #4]
  uint8_t selectFileId[] = {0xA4, 0x00, 0x0C, 0x02, 0x00, 0x01 };
 800f84a:	a802      	add	r0, sp, #8
 800f84c:	2206      	movs	r2, #6
 800f84e:	f000 fd6f 	bl	8010330 <memcpy>
  if(cmdCompare( cmdData, aid, sizeof(aid)))
 800f852:	2207      	movs	r2, #7
 800f854:	0028      	movs	r0, r5
 800f856:	a904      	add	r1, sp, #16
 800f858:	f7ff fe84 	bl	800f564 <cmdCompare>
 800f85c:	4f45      	ldr	r7, [pc, #276]	@ (800f974 <demoCeT4T+0x188>)
 800f85e:	2800      	cmp	r0, #0
 800f860:	d003      	beq.n	800f86a <demoCeT4T+0x7e>
      nState = STATE_APP_SELECTED;
 800f862:	2301      	movs	r3, #1
 800f864:	703b      	strb	r3, [r7, #0]
  rspData[1] = (success ? (char)0x00 : 0x82);
 800f866:	2390      	movs	r3, #144	@ 0x90
 800f868:	e01c      	b.n	800f8a4 <demoCeT4T+0xb8>
  else if((nState >= STATE_APP_SELECTED) && cmdCompare(cmdData, fidCC, sizeof(fidCC)))
 800f86a:	2300      	movs	r3, #0
 800f86c:	56fb      	ldrsb	r3, [r7, r3]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	dd14      	ble.n	800f89c <demoCeT4T+0xb0>
 800f872:	2202      	movs	r2, #2
 800f874:	4669      	mov	r1, sp
 800f876:	0028      	movs	r0, r5
 800f878:	f7ff fe74 	bl	800f564 <cmdCompare>
 800f87c:	2202      	movs	r2, #2
 800f87e:	2800      	cmp	r0, #0
 800f880:	d115      	bne.n	800f8ae <demoCeT4T+0xc2>
  else if((nState >= STATE_APP_SELECTED) && (cmdCompare(cmdData,fidNDEF,sizeof(fidNDEF)) || cmdCompare(cmdData,selectFileId,sizeof(selectFileId))))
 800f882:	0028      	movs	r0, r5
 800f884:	a901      	add	r1, sp, #4
 800f886:	f7ff fe6d 	bl	800f564 <cmdCompare>
 800f88a:	2800      	cmp	r0, #0
 800f88c:	d114      	bne.n	800f8b8 <demoCeT4T+0xcc>
 800f88e:	2206      	movs	r2, #6
 800f890:	0028      	movs	r0, r5
 800f892:	a902      	add	r1, sp, #8
 800f894:	f7ff fe66 	bl	800f564 <cmdCompare>
 800f898:	2800      	cmp	r0, #0
 800f89a:	d10d      	bne.n	800f8b8 <demoCeT4T+0xcc>
      nState = STATE_IDLE;
 800f89c:	2300      	movs	r3, #0
  rspData[1] = (success ? (char)0x00 : 0x82);
 800f89e:	2682      	movs	r6, #130	@ 0x82
      nState = STATE_IDLE;
 800f8a0:	703b      	strb	r3, [r7, #0]
 800f8a2:	336a      	adds	r3, #106	@ 0x6a
  rspData[0] = (success ? (char)0x90 : 0x6A);
 800f8a4:	7023      	strb	r3, [r4, #0]
  rspData[1] = (success ? (char)0x00 : 0x82);
 800f8a6:	7066      	strb	r6, [r4, #1]
          {
              case T4T_INS_SELECT:
                  return demoCeT4TSelect(rxData, txBuf);
 800f8a8:	2002      	movs	r0, #2

  /* Function not supported ...  */
  txBuf[0] = ((char)0x68);
  txBuf[1] = ((char)0x00);
  return 2;
}
 800f8aa:	b007      	add	sp, #28
 800f8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8ae:	0033      	movs	r3, r6
      nState = STATE_CC_SELECTED;
 800f8b0:	703a      	strb	r2, [r7, #0]
      nSelectedIdx = 0;
 800f8b2:	4a31      	ldr	r2, [pc, #196]	@ (800f978 <demoCeT4T+0x18c>)
 800f8b4:	6013      	str	r3, [r2, #0]
  rspData[1] = (success ? (char)0x00 : 0x82);
 800f8b6:	e7d6      	b.n	800f866 <demoCeT4T+0x7a>
 800f8b8:	2203      	movs	r2, #3
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	e7f8      	b.n	800f8b0 <demoCeT4T+0xc4>
  unsigned short offset = (cmdData[2] << 8) | cmdData[3];
 800f8be:	78ee      	ldrb	r6, [r5, #3]
 800f8c0:	78ab      	ldrb	r3, [r5, #2]
 800f8c2:	0236      	lsls	r6, r6, #8
  unsigned short toRead = cmdData[4];
 800f8c4:	792d      	ldrb	r5, [r5, #4]
 800f8c6:	431e      	orrs	r6, r3
  if( rspDataLen < 2 )
 800f8c8:	2f01      	cmp	r7, #1
 800f8ca:	d804      	bhi.n	800f8d6 <demoCeT4T+0xea>
      platformErrorHandle();  /* Must ensure appropriate buffer */
 800f8cc:	2184      	movs	r1, #132	@ 0x84
 800f8ce:	4825      	ldr	r0, [pc, #148]	@ (800f964 <demoCeT4T+0x178>)
 800f8d0:	0049      	lsls	r1, r1, #1
 800f8d2:	f000 fc67 	bl	80101a4 <_Error_Handler>
  if(nSelectedIdx < 0 || nSelectedIdx >= nFiles)
 800f8d6:	4b28      	ldr	r3, [pc, #160]	@ (800f978 <demoCeT4T+0x18c>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d904      	bls.n	800f8e8 <demoCeT4T+0xfc>
      rspData[0] = ((char)0x6A);
 800f8de:	236a      	movs	r3, #106	@ 0x6a
 800f8e0:	7023      	strb	r3, [r4, #0]
      rspData[1] = ((char)0x82);
 800f8e2:	3318      	adds	r3, #24
    rspData[1] = ((char)0x82);
 800f8e4:	7063      	strb	r3, [r4, #1]
    return 2;
 800f8e6:	e7df      	b.n	800f8a8 <demoCeT4T+0xbc>
  if((unsigned long)(offset + toRead) > pdwFileSize[nSelectedIdx])
 800f8e8:	4a24      	ldr	r2, [pc, #144]	@ (800f97c <demoCeT4T+0x190>)
 800f8ea:	ba76      	rev16	r6, r6
 800f8ec:	0099      	lsls	r1, r3, #2
 800f8ee:	5888      	ldr	r0, [r1, r2]
 800f8f0:	b2b6      	uxth	r6, r6
 800f8f2:	1972      	adds	r2, r6, r5
 800f8f4:	4282      	cmp	r2, r0
 800f8f6:	d901      	bls.n	800f8fc <demoCeT4T+0x110>
      toRead = pdwFileSize[nSelectedIdx] - offset;
 800f8f8:	1b85      	subs	r5, r0, r6
 800f8fa:	b2ad      	uxth	r5, r5
  if( rspDataLen < (toRead+2) )
 800f8fc:	1c6a      	adds	r2, r5, #1
 800f8fe:	42ba      	cmp	r2, r7
 800f900:	db03      	blt.n	800f90a <demoCeT4T+0x11e>
      rspData[0] = ((char)0x6F);
 800f902:	236f      	movs	r3, #111	@ 0x6f
  txBuf[0] = ((char)0x68);
 800f904:	7023      	strb	r3, [r4, #0]
  txBuf[1] = ((char)0x00);
 800f906:	2300      	movs	r3, #0
 800f908:	e7ec      	b.n	800f8e4 <demoCeT4T+0xf8>
  ppbMemory = (nSelectedIdx == 0 ? ccfile : ndefFile);
 800f90a:	491d      	ldr	r1, [pc, #116]	@ (800f980 <demoCeT4T+0x194>)
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d100      	bne.n	800f912 <demoCeT4T+0x126>
 800f910:	491c      	ldr	r1, [pc, #112]	@ (800f984 <demoCeT4T+0x198>)
  memcpy(rspData, &ppbMemory[offset], toRead);
 800f912:	002a      	movs	r2, r5
 800f914:	0020      	movs	r0, r4
 800f916:	1989      	adds	r1, r1, r6
 800f918:	f000 fd0a 	bl	8010330 <memcpy>
  rspData[toRead] = ((char)0x90);
 800f91c:	2390      	movs	r3, #144	@ 0x90
 800f91e:	5563      	strb	r3, [r4, r5]
  rspData[toRead+1] = ((char)0x00);
 800f920:	2300      	movs	r3, #0
 800f922:	1964      	adds	r4, r4, r5
  return toRead + 2;
 800f924:	3502      	adds	r5, #2
  rspData[toRead+1] = ((char)0x00);
 800f926:	7063      	strb	r3, [r4, #1]
  return toRead + 2;
 800f928:	b2a8      	uxth	r0, r5
 800f92a:	e7be      	b.n	800f8aa <demoCeT4T+0xbe>
  uint32_t offset = (cmdData[2] << 8) | cmdData[3];
 800f92c:	78e8      	ldrb	r0, [r5, #3]
 800f92e:	78ab      	ldrb	r3, [r5, #2]
 800f930:	0200      	lsls	r0, r0, #8
 800f932:	4318      	orrs	r0, r3
  if(nSelectedIdx != 1)
 800f934:	4b10      	ldr	r3, [pc, #64]	@ (800f978 <demoCeT4T+0x18c>)
  uint32_t length = cmdData[4];
 800f936:	792a      	ldrb	r2, [r5, #4]
  if(nSelectedIdx != 1)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	d1cf      	bne.n	800f8de <demoCeT4T+0xf2>
  uint32_t offset = (cmdData[2] << 8) | cmdData[3];
 800f93e:	ba40      	rev16	r0, r0
 800f940:	b280      	uxth	r0, r0
  if((unsigned long)(offset + length) > pdwFileSize[nSelectedIdx])
 800f942:	1881      	adds	r1, r0, r2
 800f944:	33ff      	adds	r3, #255	@ 0xff
 800f946:	4299      	cmp	r1, r3
 800f948:	d903      	bls.n	800f952 <demoCeT4T+0x166>
    rspData[0] = ((char)0x62);
 800f94a:	3b9e      	subs	r3, #158	@ 0x9e
 800f94c:	7023      	strb	r3, [r4, #0]
    rspData[1] = ((char)0x82);
 800f94e:	3320      	adds	r3, #32
 800f950:	e7c8      	b.n	800f8e4 <demoCeT4T+0xf8>
  memcpy((ndefFile + offset), &cmdData[5], length);
 800f952:	4b0b      	ldr	r3, [pc, #44]	@ (800f980 <demoCeT4T+0x194>)
 800f954:	1d69      	adds	r1, r5, #5
 800f956:	18c0      	adds	r0, r0, r3
 800f958:	f000 fcea 	bl	8010330 <memcpy>
  rspData[0] = ((char)0x90);
 800f95c:	e783      	b.n	800f866 <demoCeT4T+0x7a>
  txBuf[0] = ((char)0x68);
 800f95e:	2368      	movs	r3, #104	@ 0x68
 800f960:	e7d0      	b.n	800f904 <demoCeT4T+0x118>
 800f962:	46c0      	nop			@ (mov r8, r8)
 800f964:	08011073 	.word	0x08011073
 800f968:	0000025d 	.word	0x0000025d
 800f96c:	08010bb4 	.word	0x08010bb4
 800f970:	000003e1 	.word	0x000003e1
 800f974:	200023a5 	.word	0x200023a5
 800f978:	200002e4 	.word	0x200002e4
 800f97c:	08011750 	.word	0x08011750
 800f980:	200023a6 	.word	0x200023a6
 800f984:	200002d4 	.word	0x200002d4

0800f988 <demoCeT3T>:
  *
  * @return Response size.
  *****************************************************************************
  */
uint16_t demoCeT3T(uint8_t *rxData, uint16_t rxDataLen, uint8_t *txBuf, uint16_t txBufLen )
{
 800f988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98a:	0005      	movs	r5, r0
 800f98c:	000f      	movs	r7, r1
 800f98e:	0014      	movs	r4, r2
 800f990:	001e      	movs	r6, r3
    if( (txBuf == NULL) || (txBufLen < 11) )
 800f992:	2a00      	cmp	r2, #0
 800f994:	d001      	beq.n	800f99a <demoCeT3T+0x12>
 800f996:	2b0a      	cmp	r3, #10
 800f998:	d803      	bhi.n	800f9a2 <demoCeT3T+0x1a>
    {
        platformErrorHandle();  /* Must ensure appropriate buffer */
 800f99a:	480e      	ldr	r0, [pc, #56]	@ (800f9d4 <demoCeT3T+0x4c>)
 800f99c:	490e      	ldr	r1, [pc, #56]	@ (800f9d8 <demoCeT3T+0x50>)
 800f99e:	f000 fc01 	bl	80101a4 <_Error_Handler>
    }

    if( (rxData != NULL) && (rxDataLen >= 4) )
 800f9a2:	2d00      	cmp	r5, #0
 800f9a4:	d006      	beq.n	800f9b4 <demoCeT3T+0x2c>
 800f9a6:	2f03      	cmp	r7, #3
 800f9a8:	d904      	bls.n	800f9b4 <demoCeT3T+0x2c>
    {
        switch(rxData[1])
 800f9aa:	786b      	ldrb	r3, [r5, #1]
 800f9ac:	2b06      	cmp	r3, #6
 800f9ae:	d006      	beq.n	800f9be <demoCeT3T+0x36>
 800f9b0:	2b08      	cmp	r3, #8
 800f9b2:	d00a      	beq.n	800f9ca <demoCeT3T+0x42>
                break;
        }
    }

  /* Function not supported ...  */
  txBuf[0] = ((char)0xFF);
 800f9b4:	23ff      	movs	r3, #255	@ 0xff
  txBuf[1] = ((char)0xFF);
  return 2;
 800f9b6:	2002      	movs	r0, #2
  txBuf[0] = ((char)0xFF);
 800f9b8:	7023      	strb	r3, [r4, #0]
  txBuf[1] = ((char)0xFF);
 800f9ba:	7063      	strb	r3, [r4, #1]
  return 2;
 800f9bc:	e004      	b.n	800f9c8 <demoCeT3T+0x40>
                return demoCeT3TCheck(rxData, txBuf, txBufLen);
 800f9be:	0032      	movs	r2, r6
 800f9c0:	0021      	movs	r1, r4
 800f9c2:	0028      	movs	r0, r5
 800f9c4:	f7ff fde2 	bl	800f58c <demoCeT3TCheck>
}
 800f9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return demoCeT3TUpdate(rxData, txBuf);
 800f9ca:	0021      	movs	r1, r4
 800f9cc:	0028      	movs	r0, r5
 800f9ce:	f7ff fe69 	bl	800f6a4 <demoCeT3TUpdate>
 800f9d2:	e7f9      	b.n	800f9c8 <demoCeT3T+0x40>
 800f9d4:	08011073 	.word	0x08011073
 800f9d8:	0000028e 	.word	0x0000028e

0800f9dc <demoNotif>:
 *
 *  This function receives the event notifications from RFAL
 *****************************************************************************
 */
static void demoNotif( rfalNfcState st )
{
 800f9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9de:	3802      	subs	r0, #2
 800f9e0:	280a      	cmp	r0, #10
 800f9e2:	d80a      	bhi.n	800f9fa <demoNotif+0x1e>
 800f9e4:	f7f0 fba2 	bl	800012c <__gnu_thumb1_case_uqi>
 800f9e8:	09090628 	.word	0x09090628
 800f9ec:	09090909 	.word	0x09090909
 800f9f0:	090a      	.short	0x090a
 800f9f2:	10          	.byte	0x10
 800f9f3:	00          	.byte	0x00
    uint8_t       devCnt;
    rfalNfcDevice *dev;

    if( st == RFAL_NFC_STATE_WAKEUP_MODE )
    {
        platformLog("Wake Up mode started \r\n");
 800f9f4:	4812      	ldr	r0, [pc, #72]	@ (800fa40 <demoNotif+0x64>)
    }
    else if( st == RFAL_NFC_STATE_POLL_TECHDETECT )
    {
        if( discParam.wakeupEnabled )
        {
            platformLog("Wake Up mode terminated. Polling for devices \r\n");
 800f9f6:	f000 fb81 	bl	80100fc <logUsart>
    else if( st == RFAL_NFC_STATE_START_DISCOVERY )
    {
        /* Clear mutiple device selection flag */
        multiSel = false;
    }
}
 800f9fa:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        if( discParam.wakeupEnabled )
 800f9fc:	4b11      	ldr	r3, [pc, #68]	@ (800fa44 <demoNotif+0x68>)
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d0fa      	beq.n	800f9fa <demoNotif+0x1e>
            platformLog("Wake Up mode terminated. Polling for devices \r\n");
 800fa04:	4810      	ldr	r0, [pc, #64]	@ (800fa48 <demoNotif+0x6c>)
 800fa06:	e7f6      	b.n	800f9f6 <demoNotif+0x1a>
        if( (!multiSel) )
 800fa08:	4b10      	ldr	r3, [pc, #64]	@ (800fa4c <demoNotif+0x70>)
 800fa0a:	781d      	ldrb	r5, [r3, #0]
 800fa0c:	2d00      	cmp	r5, #0
 800fa0e:	d10f      	bne.n	800fa30 <demoNotif+0x54>
            multiSel = true;
 800fa10:	2201      	movs	r2, #1
 800fa12:	701a      	strb	r2, [r3, #0]
            rfalNfcGetDevicesFound( &dev, &devCnt );
 800fa14:	466b      	mov	r3, sp
 800fa16:	1cdc      	adds	r4, r3, #3
 800fa18:	0021      	movs	r1, r4
 800fa1a:	a801      	add	r0, sp, #4
 800fa1c:	f7fa faee 	bl	8009ffc <rfalNfcGetDevicesFound>
            rfalNfcSelect( 0 );
 800fa20:	0028      	movs	r0, r5
 800fa22:	f7fa fad3 	bl	8009fcc <rfalNfcSelect>
            platformLog("Multiple Tags detected: %d \r\n", devCnt);
 800fa26:	7821      	ldrb	r1, [r4, #0]
 800fa28:	4809      	ldr	r0, [pc, #36]	@ (800fa50 <demoNotif+0x74>)
 800fa2a:	f000 fb67 	bl	80100fc <logUsart>
 800fa2e:	e7e4      	b.n	800f9fa <demoNotif+0x1e>
            rfalNfcDeactivate( RFAL_NFC_DEACTIVATE_DISCOVERY );
 800fa30:	2002      	movs	r0, #2
 800fa32:	f7fa fa9b 	bl	8009f6c <rfalNfcDeactivate>
}
 800fa36:	e7e0      	b.n	800f9fa <demoNotif+0x1e>
        multiSel = false;
 800fa38:	2200      	movs	r2, #0
 800fa3a:	4b04      	ldr	r3, [pc, #16]	@ (800fa4c <demoNotif+0x70>)
 800fa3c:	701a      	strb	r2, [r3, #0]
}
 800fa3e:	e7dc      	b.n	800f9fa <demoNotif+0x1e>
 800fa40:	08011093 	.word	0x08011093
 800fa44:	20002544 	.word	0x20002544
 800fa48:	080110ab 	.word	0x080110ab
 800fa4c:	200024b4 	.word	0x200024b4
 800fa50:	080110db 	.word	0x080110db

0800fa54 <demoIni>:
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni( void )
{
 800fa54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ReturnCode err;

    err = rfalNfcInitialize();
 800fa56:	f7fa fa19 	bl	8009e8c <rfalNfcInitialize>
 800fa5a:	1e06      	subs	r6, r0, #0
    if( err == RFAL_ERR_NONE )
 800fa5c:	d001      	beq.n	800fa62 <demoIni+0xe>
        err = rfalNfcDiscover( &discParam );
        rfalNfcDeactivate( RFAL_NFC_DEACTIVATE_IDLE );

        if( err != RFAL_ERR_NONE )
        {
            return false;
 800fa5e:	2000      	movs	r0, #0

        state = DEMO_ST_START_DISCOVERY;
        return true;
    }
    return false;
}
 800fa60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        rfalNfcDefaultDiscParams( &discParam );
 800fa62:	4c30      	ldr	r4, [pc, #192]	@ (800fb24 <demoIni+0xd0>)
 800fa64:	0001      	movs	r1, r0
 800fa66:	22ae      	movs	r2, #174	@ 0xae
 800fa68:	0020      	movs	r0, r4
 800fa6a:	f000 fc2d 	bl	80102c8 <memset>
 800fa6e:	0023      	movs	r3, r4
 800fa70:	22c2      	movs	r2, #194	@ 0xc2
 800fa72:	3360      	adds	r3, #96	@ 0x60
 800fa74:	0092      	lsls	r2, r2, #2
 800fa76:	801a      	strh	r2, [r3, #0]
 800fa78:	0023      	movs	r3, r4
 800fa7a:	2501      	movs	r5, #1
 800fa7c:	338d      	adds	r3, #141	@ 0x8d
 800fa7e:	701d      	strb	r5, [r3, #0]
 800fa80:	0023      	movs	r3, r4
 800fa82:	33ae      	adds	r3, #174	@ 0xae
 800fa84:	801d      	strh	r5, [r3, #0]
 800fa86:	23fa      	movs	r3, #250	@ 0xfa
 800fa88:	009b      	lsls	r3, r3, #2
 800fa8a:	80e3      	strh	r3, [r4, #6]
 800fa8c:	23ff      	movs	r3, #255	@ 0xff
        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 800fa8e:	0020      	movs	r0, r4
        rfalNfcDefaultDiscParams( &discParam );
 800fa90:	425b      	negs	r3, r3
 800fa92:	8123      	strh	r3, [r4, #8]
        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 800fa94:	4b24      	ldr	r3, [pc, #144]	@ (800fb28 <demoIni+0xd4>)
 800fa96:	221e      	movs	r2, #30
 800fa98:	0019      	movs	r1, r3
 800fa9a:	300b      	adds	r0, #11
 800fa9c:	001f      	movs	r7, r3
        rfalNfcDefaultDiscParams( &discParam );
 800fa9e:	72a5      	strb	r5, [r4, #10]
        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 800faa0:	f000 fc46 	bl	8010330 <memcpy>
        discParam.GBLen         = sizeof(GB);
 800faa4:	0023      	movs	r3, r4
 800faa6:	2214      	movs	r2, #20
 800faa8:	3345      	adds	r3, #69	@ 0x45
 800faaa:	701a      	strb	r2, [r3, #0]
        rfalNfcDefaultDiscParams( &discParam );
 800faac:	0023      	movs	r3, r4
 800faae:	32ee      	adds	r2, #238	@ 0xee
 800fab0:	3308      	adds	r3, #8
 800fab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        discParam.notifyCb             = demoNotif;
 800fab4:	0023      	movs	r3, r4
 800fab6:	4a1d      	ldr	r2, [pc, #116]	@ (800fb2c <demoIni+0xd8>)
 800fab8:	3388      	adds	r3, #136	@ 0x88
 800faba:	601a      	str	r2, [r3, #0]
        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_AP2P;
 800fabc:	4b1c      	ldr	r3, [pc, #112]	@ (800fb30 <demoIni+0xdc>)
 800fabe:	8063      	strh	r3, [r4, #2]
        demoCeInit( ceNFCF_nfcid2 );
 800fac0:	4b1c      	ldr	r3, [pc, #112]	@ (800fb34 <demoIni+0xe0>)
 800fac2:	0018      	movs	r0, r3
 800fac4:	9300      	str	r3, [sp, #0]
 800fac6:	f7ff fe65 	bl	800f794 <demoCeInit>
        discParam.lmConfigPA.nfcidLen = RFAL_LM_NFCID_LEN_04;                                  /* Set NFCID length to 7 bytes */
 800faca:	0020      	movs	r0, r4
 800facc:	2205      	movs	r2, #5
 800face:	491a      	ldr	r1, [pc, #104]	@ (800fb38 <demoIni+0xe4>)
 800fad0:	3062      	adds	r0, #98	@ 0x62
 800fad2:	f000 fc2d 	bl	8010330 <memcpy>
        ST_MEMCPY( discParam.lmConfigPA.SENS_RES, ceNFCA_SENS_RES, RFAL_LM_SENS_RES_LEN );     /* Set SENS_RES / ATQA */
 800fad6:	0020      	movs	r0, r4
 800fad8:	0039      	movs	r1, r7
        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_A;
 800fada:	8863      	ldrh	r3, [r4, #2]
        ST_MEMCPY( discParam.lmConfigPA.SENS_RES, ceNFCA_SENS_RES, RFAL_LM_SENS_RES_LEN );     /* Set SENS_RES / ATQA */
 800fadc:	2205      	movs	r2, #5
 800fade:	311e      	adds	r1, #30
 800fae0:	306d      	adds	r0, #109	@ 0x6d
        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_A;
 800fae2:	9301      	str	r3, [sp, #4]
        ST_MEMCPY( discParam.lmConfigPA.SENS_RES, ceNFCA_SENS_RES, RFAL_LM_SENS_RES_LEN );     /* Set SENS_RES / ATQA */
 800fae4:	f000 fc24 	bl	8010330 <memcpy>
        ST_MEMCPY( &ceNFCF_SENSF_RES[RFAL_NFCF_CMD_LEN], ceNFCF_nfcid2, RFAL_NFCID2_LEN );     /* Load NFCID2 on SENSF_RES */
 800fae8:	2208      	movs	r2, #8
 800faea:	9900      	ldr	r1, [sp, #0]
 800faec:	4813      	ldr	r0, [pc, #76]	@ (800fb3c <demoIni+0xe8>)
 800faee:	f000 fc1f 	bl	8010330 <memcpy>
        ST_MEMCPY( discParam.lmConfigPF.SENSF_RES, ceNFCF_SENSF_RES, RFAL_LM_SENSF_RES_LEN );  /* Set SENSF_RES / Poll Response */
 800faf2:	0020      	movs	r0, r4
 800faf4:	2213      	movs	r2, #19
 800faf6:	4912      	ldr	r1, [pc, #72]	@ (800fb40 <demoIni+0xec>)
 800faf8:	3072      	adds	r0, #114	@ 0x72
 800fafa:	f000 fc19 	bl	8010330 <memcpy>
        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_F;
 800fafe:	23a0      	movs	r3, #160	@ 0xa0
 800fb00:	9a01      	ldr	r2, [sp, #4]
 800fb02:	01db      	lsls	r3, r3, #7
        err = rfalNfcDiscover( &discParam );
 800fb04:	0020      	movs	r0, r4
        discParam.techs2Find |= RFAL_NFC_LISTEN_TECH_F;
 800fb06:	4313      	orrs	r3, r2
 800fb08:	8063      	strh	r3, [r4, #2]
        err = rfalNfcDiscover( &discParam );
 800fb0a:	f7fa f9d7 	bl	8009ebc <rfalNfcDiscover>
 800fb0e:	0004      	movs	r4, r0
        rfalNfcDeactivate( RFAL_NFC_DEACTIVATE_IDLE );
 800fb10:	0030      	movs	r0, r6
 800fb12:	f7fa fa2b 	bl	8009f6c <rfalNfcDeactivate>
        if( err != RFAL_ERR_NONE )
 800fb16:	2c00      	cmp	r4, #0
 800fb18:	d1a1      	bne.n	800fa5e <demoIni+0xa>
        state = DEMO_ST_START_DISCOVERY;
 800fb1a:	4b0a      	ldr	r3, [pc, #40]	@ (800fb44 <demoIni+0xf0>)
        return true;
 800fb1c:	0028      	movs	r0, r5
        state = DEMO_ST_START_DISCOVERY;
 800fb1e:	701d      	strb	r5, [r3, #0]
        return true;
 800fb20:	e79e      	b.n	800fa60 <demoIni+0xc>
 800fb22:	46c0      	nop			@ (mov r8, r8)
 800fb24:	200024b8 	.word	0x200024b8
 800fb28:	08010bc1 	.word	0x08010bc1
 800fb2c:	0800f9dd 	.word	0x0800f9dd
 800fb30:	ffff803f 	.word	0xffff803f
 800fb34:	200002fb 	.word	0x200002fb
 800fb38:	080110f9 	.word	0x080110f9
 800fb3c:	200002e9 	.word	0x200002e9
 800fb40:	200002e8 	.word	0x200002e8
 800fb44:	200024b5 	.word	0x200024b5

0800fb48 <demoTransceiveBlocking>:
 *  \return RFAL_ERR_NONE      : No error, activation successful
 *
 *****************************************************************************
 */
ReturnCode demoTransceiveBlocking( uint8_t *txBuf, uint16_t txBufSize, uint8_t **rxData, uint16_t **rcvLen, uint32_t fwt )
{
 800fb48:	b513      	push	{r0, r1, r4, lr}
    ReturnCode err;

    err = rfalNfcDataExchangeStart( txBuf, txBufSize, rxData, rcvLen, fwt );
 800fb4a:	9c04      	ldr	r4, [sp, #16]
 800fb4c:	9400      	str	r4, [sp, #0]
 800fb4e:	f7fa fa85 	bl	800a05c <rfalNfcDataExchangeStart>
    if( err == RFAL_ERR_NONE )
 800fb52:	2800      	cmp	r0, #0
 800fb54:	d105      	bne.n	800fb62 <demoTransceiveBlocking+0x1a>
    {
        do{
            rfalNfcWorker();
 800fb56:	f7fa fba7 	bl	800a2a8 <rfalNfcWorker>
            err = rfalNfcDataExchangeGetStatus();
 800fb5a:	f7fa fb55 	bl	800a208 <rfalNfcDataExchangeGetStatus>
        }
        while( err == RFAL_ERR_BUSY );
 800fb5e:	2802      	cmp	r0, #2
 800fb60:	d0f9      	beq.n	800fb56 <demoTransceiveBlocking+0xe>
    }
    return err;
}
 800fb62:	bd16      	pop	{r1, r2, r4, pc}

0800fb64 <demoAPDU>:
{
 800fb64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    err = demoTransceiveBlocking( ndefSelectApp, sizeof(ndefSelectApp), &rxData, &rxLen, RFAL_FWT_NONE );
 800fb66:	2301      	movs	r3, #1
 800fb68:	425b      	negs	r3, r3
 800fb6a:	9300      	str	r3, [sp, #0]
 800fb6c:	210d      	movs	r1, #13
 800fb6e:	4826      	ldr	r0, [pc, #152]	@ (800fc08 <demoAPDU+0xa4>)
 800fb70:	ab02      	add	r3, sp, #8
 800fb72:	aa03      	add	r2, sp, #12
 800fb74:	f7ff ffe8 	bl	800fb48 <demoTransceiveBlocking>
 800fb78:	1e04      	subs	r4, r0, #0
    platformLog(" Select NDEF Application: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 800fb7a:	d13c      	bne.n	800fbf6 <demoAPDU+0x92>
 800fb7c:	9b02      	ldr	r3, [sp, #8]
 800fb7e:	9803      	ldr	r0, [sp, #12]
 800fb80:	8819      	ldrh	r1, [r3, #0]
 800fb82:	f000 fad5 	bl	8010130 <hex2Str>
 800fb86:	0002      	movs	r2, r0
 800fb88:	4920      	ldr	r1, [pc, #128]	@ (800fc0c <demoAPDU+0xa8>)
 800fb8a:	4821      	ldr	r0, [pc, #132]	@ (800fc10 <demoAPDU+0xac>)
 800fb8c:	f000 fab6 	bl	80100fc <logUsart>
    if( (err == RFAL_ERR_NONE) && rxData[0] == 0x90 && rxData[1] == 0x00)
 800fb90:	2c00      	cmp	r4, #0
 800fb92:	d12f      	bne.n	800fbf4 <demoAPDU+0x90>
 800fb94:	9b03      	ldr	r3, [sp, #12]
 800fb96:	781a      	ldrb	r2, [r3, #0]
 800fb98:	2a90      	cmp	r2, #144	@ 0x90
 800fb9a:	d12b      	bne.n	800fbf4 <demoAPDU+0x90>
 800fb9c:	785b      	ldrb	r3, [r3, #1]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d128      	bne.n	800fbf4 <demoAPDU+0x90>
        err = demoTransceiveBlocking( ccSelectFile, sizeof(ccSelectFile), &rxData, &rxLen, RFAL_FWT_NONE );
 800fba2:	3b01      	subs	r3, #1
 800fba4:	9300      	str	r3, [sp, #0]
 800fba6:	2107      	movs	r1, #7
 800fba8:	481a      	ldr	r0, [pc, #104]	@ (800fc14 <demoAPDU+0xb0>)
 800fbaa:	ab02      	add	r3, sp, #8
 800fbac:	aa03      	add	r2, sp, #12
 800fbae:	f7ff ffcb 	bl	800fb48 <demoTransceiveBlocking>
        platformLog(" Select CC: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 800fbb2:	2800      	cmp	r0, #0
 800fbb4:	d122      	bne.n	800fbfc <demoAPDU+0x98>
 800fbb6:	9b02      	ldr	r3, [sp, #8]
 800fbb8:	9803      	ldr	r0, [sp, #12]
 800fbba:	8819      	ldrh	r1, [r3, #0]
 800fbbc:	f000 fab8 	bl	8010130 <hex2Str>
 800fbc0:	0002      	movs	r2, r0
 800fbc2:	4912      	ldr	r1, [pc, #72]	@ (800fc0c <demoAPDU+0xa8>)
 800fbc4:	4814      	ldr	r0, [pc, #80]	@ (800fc18 <demoAPDU+0xb4>)
 800fbc6:	f000 fa99 	bl	80100fc <logUsart>
        err = demoTransceiveBlocking( readBinary, sizeof(readBinary), &rxData, &rxLen, RFAL_FWT_NONE );
 800fbca:	2301      	movs	r3, #1
 800fbcc:	425b      	negs	r3, r3
 800fbce:	9300      	str	r3, [sp, #0]
 800fbd0:	2105      	movs	r1, #5
 800fbd2:	4812      	ldr	r0, [pc, #72]	@ (800fc1c <demoAPDU+0xb8>)
 800fbd4:	ab02      	add	r3, sp, #8
 800fbd6:	aa03      	add	r2, sp, #12
 800fbd8:	f7ff ffb6 	bl	800fb48 <demoTransceiveBlocking>
        platformLog(" Read CC: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	d110      	bne.n	800fc02 <demoAPDU+0x9e>
 800fbe0:	9b02      	ldr	r3, [sp, #8]
 800fbe2:	9803      	ldr	r0, [sp, #12]
 800fbe4:	8819      	ldrh	r1, [r3, #0]
 800fbe6:	f000 faa3 	bl	8010130 <hex2Str>
 800fbea:	0002      	movs	r2, r0
 800fbec:	4907      	ldr	r1, [pc, #28]	@ (800fc0c <demoAPDU+0xa8>)
 800fbee:	480c      	ldr	r0, [pc, #48]	@ (800fc20 <demoAPDU+0xbc>)
 800fbf0:	f000 fa84 	bl	80100fc <logUsart>
}
 800fbf4:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    platformLog(" Select NDEF Application: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 800fbf6:	490b      	ldr	r1, [pc, #44]	@ (800fc24 <demoAPDU+0xc0>)
 800fbf8:	4a0b      	ldr	r2, [pc, #44]	@ (800fc28 <demoAPDU+0xc4>)
 800fbfa:	e7c6      	b.n	800fb8a <demoAPDU+0x26>
        platformLog(" Select CC: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 800fbfc:	4909      	ldr	r1, [pc, #36]	@ (800fc24 <demoAPDU+0xc0>)
 800fbfe:	4a0a      	ldr	r2, [pc, #40]	@ (800fc28 <demoAPDU+0xc4>)
 800fc00:	e7e0      	b.n	800fbc4 <demoAPDU+0x60>
        platformLog(" Read CC: %s Data: %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxData, *rxLen) );
 800fc02:	4908      	ldr	r1, [pc, #32]	@ (800fc24 <demoAPDU+0xc0>)
 800fc04:	4a08      	ldr	r2, [pc, #32]	@ (800fc28 <demoAPDU+0xc4>)
 800fc06:	e7f2      	b.n	800fbee <demoAPDU+0x8a>
 800fc08:	20000355 	.word	0x20000355
 800fc0c:	080110ff 	.word	0x080110ff
 800fc10:	08011107 	.word	0x08011107
 800fc14:	2000034e 	.word	0x2000034e
 800fc18:	0801112f 	.word	0x0801112f
 800fc1c:	20000349 	.word	0x20000349
 800fc20:	08011149 	.word	0x08011149
 800fc24:	08011102 	.word	0x08011102
 800fc28:	080110f8 	.word	0x080110f8

0800fc2c <demoP2P.isra.0>:
void demoP2P( rfalNfcDevice *nfcDev )
 800fc2c:	b530      	push	{r4, r5, lr}
 800fc2e:	b085      	sub	sp, #20
    if( nfcDev->type == RFAL_NFC_POLL_TYPE_AP2P )
 800fc30:	280f      	cmp	r0, #15
 800fc32:	d106      	bne.n	800fc42 <demoP2P.isra.0+0x16>
        demoTransceiveBlocking( NULL, 0, &rxData, &rxLen, 0);
 800fc34:	2000      	movs	r0, #0
 800fc36:	ab02      	add	r3, sp, #8
 800fc38:	0001      	movs	r1, r0
 800fc3a:	9000      	str	r0, [sp, #0]
 800fc3c:	aa03      	add	r2, sp, #12
 800fc3e:	f7ff ff83 	bl	800fb48 <demoTransceiveBlocking>
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 800fc42:	2501      	movs	r5, #1
    platformLog(" Initialize device .. ");
 800fc44:	481c      	ldr	r0, [pc, #112]	@ (800fcb8 <demoP2P.isra.0+0x8c>)
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 800fc46:	426d      	negs	r5, r5
    platformLog(" Initialize device .. ");
 800fc48:	f000 fa58 	bl	80100fc <logUsart>
    err = demoTransceiveBlocking( ndefInit, sizeof(ndefInit), &rxData, &rxLen, RFAL_FWT_NONE);
 800fc4c:	211a      	movs	r1, #26
 800fc4e:	481b      	ldr	r0, [pc, #108]	@ (800fcbc <demoP2P.isra.0+0x90>)
 800fc50:	9500      	str	r5, [sp, #0]
 800fc52:	ab02      	add	r3, sp, #8
 800fc54:	aa03      	add	r2, sp, #12
 800fc56:	f7ff ff77 	bl	800fb48 <demoTransceiveBlocking>
    if( err != RFAL_ERR_NONE )
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	d004      	beq.n	800fc68 <demoP2P.isra.0+0x3c>
        platformLog("failed.\r\n");
 800fc5e:	4818      	ldr	r0, [pc, #96]	@ (800fcc0 <demoP2P.isra.0+0x94>)
    platformLog("\r\n Device removed.\r\n");
 800fc60:	f000 fa4c 	bl	80100fc <logUsart>
}
 800fc64:	b005      	add	sp, #20
 800fc66:	bd30      	pop	{r4, r5, pc}
    platformLog("succeeded.\r\n");
 800fc68:	4c16      	ldr	r4, [pc, #88]	@ (800fcc4 <demoP2P.isra.0+0x98>)
 800fc6a:	0020      	movs	r0, r4
 800fc6c:	f000 fa46 	bl	80100fc <logUsart>
    platformLog(" Push NDEF Uri: www.st.com/st25-demo ... ");
 800fc70:	4815      	ldr	r0, [pc, #84]	@ (800fcc8 <demoP2P.isra.0+0x9c>)
 800fc72:	f000 fa43 	bl	80100fc <logUsart>
    err = demoTransceiveBlocking( ndefUriSTcom, sizeof(ndefUriSTcom), &rxData, &rxLen, RFAL_FWT_NONE);
 800fc76:	212c      	movs	r1, #44	@ 0x2c
 800fc78:	4814      	ldr	r0, [pc, #80]	@ (800fccc <demoP2P.isra.0+0xa0>)
 800fc7a:	9500      	str	r5, [sp, #0]
 800fc7c:	ab02      	add	r3, sp, #8
 800fc7e:	aa03      	add	r2, sp, #12
 800fc80:	f7ff ff62 	bl	800fb48 <demoTransceiveBlocking>
    if( err != RFAL_ERR_NONE )
 800fc84:	2800      	cmp	r0, #0
 800fc86:	d1ea      	bne.n	800fc5e <demoP2P.isra.0+0x32>
    platformLog("succeeded.\r\n");
 800fc88:	0020      	movs	r0, r4
 800fc8a:	f000 fa37 	bl	80100fc <logUsart>
    platformLog(" Device present, maintaining connection ");
 800fc8e:	4810      	ldr	r0, [pc, #64]	@ (800fcd0 <demoP2P.isra.0+0xa4>)
 800fc90:	f000 fa34 	bl	80100fc <logUsart>
        err = demoTransceiveBlocking( ndefLLCPSYMM, sizeof(ndefLLCPSYMM), &rxData, &rxLen, RFAL_FWT_NONE);
 800fc94:	2102      	movs	r1, #2
 800fc96:	ab02      	add	r3, sp, #8
 800fc98:	aa03      	add	r2, sp, #12
 800fc9a:	480e      	ldr	r0, [pc, #56]	@ (800fcd4 <demoP2P.isra.0+0xa8>)
 800fc9c:	9500      	str	r5, [sp, #0]
 800fc9e:	f7ff ff53 	bl	800fb48 <demoTransceiveBlocking>
 800fca2:	0004      	movs	r4, r0
        platformLog(".");
 800fca4:	480c      	ldr	r0, [pc, #48]	@ (800fcd8 <demoP2P.isra.0+0xac>)
 800fca6:	f000 fa29 	bl	80100fc <logUsart>
        platformDelay(50);
 800fcaa:	2032      	movs	r0, #50	@ 0x32
 800fcac:	f7f4 feec 	bl	8004a88 <HAL_Delay>
    while(err == RFAL_ERR_NONE)
 800fcb0:	2c00      	cmp	r4, #0
 800fcb2:	d0ef      	beq.n	800fc94 <demoP2P.isra.0+0x68>
    platformLog("\r\n Device removed.\r\n");
 800fcb4:	4809      	ldr	r0, [pc, #36]	@ (800fcdc <demoP2P.isra.0+0xb0>)
 800fcb6:	e7d3      	b.n	800fc60 <demoP2P.isra.0+0x34>
 800fcb8:	08011161 	.word	0x08011161
 800fcbc:	2000032f 	.word	0x2000032f
 800fcc0:	08011178 	.word	0x08011178
 800fcc4:	08011182 	.word	0x08011182
 800fcc8:	0801118f 	.word	0x0801118f
 800fccc:	20000303 	.word	0x20000303
 800fcd0:	080111b9 	.word	0x080111b9
 800fcd4:	20002568 	.word	0x20002568
 800fcd8:	080111e2 	.word	0x080111e2
 800fcdc:	080111e4 	.word	0x080111e4

0800fce0 <demoCycle>:
{
 800fce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fce2:	b0b3      	sub	sp, #204	@ 0xcc
    rfalNfcWorker();                                    /* Run RFAL worker periodically */
 800fce4:	f7fa fae0 	bl	800a2a8 <rfalNfcWorker>
    switch( state )
 800fce8:	4eba      	ldr	r6, [pc, #744]	@ (800ffd4 <demoCycle+0x2f4>)
 800fcea:	7834      	ldrb	r4, [r6, #0]
 800fcec:	2c01      	cmp	r4, #1
 800fcee:	d003      	beq.n	800fcf8 <demoCycle+0x18>
 800fcf0:	2c02      	cmp	r4, #2
 800fcf2:	d02e      	beq.n	800fd52 <demoCycle+0x72>
}
 800fcf4:	b033      	add	sp, #204	@ 0xcc
 800fcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	2104      	movs	r1, #4
 800fcfc:	48b6      	ldr	r0, [pc, #728]	@ (800ffd8 <demoCycle+0x2f8>)
 800fcfe:	f7f5 f8c3 	bl	8004e88 <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800fd02:	2200      	movs	r2, #0
 800fd04:	2102      	movs	r1, #2
 800fd06:	48b4      	ldr	r0, [pc, #720]	@ (800ffd8 <demoCycle+0x2f8>)
 800fd08:	f7f5 f8be 	bl	8004e88 <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	0021      	movs	r1, r4
 800fd10:	48b1      	ldr	r0, [pc, #708]	@ (800ffd8 <demoCycle+0x2f8>)
 800fd12:	f7f5 f8b9 	bl	8004e88 <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800fd16:	2180      	movs	r1, #128	@ 0x80
 800fd18:	2200      	movs	r2, #0
 800fd1a:	48af      	ldr	r0, [pc, #700]	@ (800ffd8 <demoCycle+0x2f8>)
 800fd1c:	00c9      	lsls	r1, r1, #3
 800fd1e:	f7f5 f8b3 	bl	8004e88 <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800fd22:	2180      	movs	r1, #128	@ 0x80
 800fd24:	2200      	movs	r2, #0
 800fd26:	48ac      	ldr	r0, [pc, #688]	@ (800ffd8 <demoCycle+0x2f8>)
 800fd28:	0109      	lsls	r1, r1, #4
 800fd2a:	f7f5 f8ad 	bl	8004e88 <HAL_GPIO_WritePin>
          platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 800fd2e:	2180      	movs	r1, #128	@ 0x80
 800fd30:	2200      	movs	r2, #0
 800fd32:	0149      	lsls	r1, r1, #5
 800fd34:	48a8      	ldr	r0, [pc, #672]	@ (800ffd8 <demoCycle+0x2f8>)
 800fd36:	f7f5 f8a7 	bl	8004e88 <HAL_GPIO_WritePin>
          rfalNfcDeactivate( RFAL_NFC_DEACTIVATE_IDLE );
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	f7fa f916 	bl	8009f6c <rfalNfcDeactivate>
          rfalNfcDiscover( &discParam );
 800fd40:	48a6      	ldr	r0, [pc, #664]	@ (800ffdc <demoCycle+0x2fc>)
 800fd42:	f7fa f8bb 	bl	8009ebc <rfalNfcDiscover>
          multiSel = false;
 800fd46:	2200      	movs	r2, #0
 800fd48:	4ba5      	ldr	r3, [pc, #660]	@ (800ffe0 <demoCycle+0x300>)
 800fd4a:	701a      	strb	r2, [r3, #0]
          state    = DEMO_ST_DISCOVERY;
 800fd4c:	2302      	movs	r3, #2
                state = DEMO_ST_START_DISCOVERY;
 800fd4e:	7033      	strb	r3, [r6, #0]
}
 800fd50:	e7d0      	b.n	800fcf4 <demoCycle+0x14>
            if( rfalNfcIsDevActivated( rfalNfcGetState() ) )
 800fd52:	f7fa f94d 	bl	8009ff0 <rfalNfcGetState>
 800fd56:	281d      	cmp	r0, #29
 800fd58:	d9cc      	bls.n	800fcf4 <demoCycle+0x14>
 800fd5a:	f7fa f949 	bl	8009ff0 <rfalNfcGetState>
 800fd5e:	2821      	cmp	r0, #33	@ 0x21
 800fd60:	d8c8      	bhi.n	800fcf4 <demoCycle+0x14>
                rfalNfcGetActiveDevice( &nfcDevice );
 800fd62:	4ca0      	ldr	r4, [pc, #640]	@ (800ffe4 <demoCycle+0x304>)
 800fd64:	0020      	movs	r0, r4
 800fd66:	f7fa f961 	bl	800a02c <rfalNfcGetActiveDevice>
                switch( nfcDevice->type )
 800fd6a:	6823      	ldr	r3, [r4, #0]
 800fd6c:	7818      	ldrb	r0, [r3, #0]
 800fd6e:	280f      	cmp	r0, #15
 800fd70:	d854      	bhi.n	800fe1c <demoCycle+0x13c>
 800fd72:	f7f0 f9ef 	bl	8000154 <__gnu_thumb1_case_uhi>
 800fd76:	0010      	.short	0x0010
 800fd78:	0091007e 	.word	0x0091007e
 800fd7c:	011300dd 	.word	0x011300dd
 800fd80:	0053011f 	.word	0x0053011f
 800fd84:	00530053 	.word	0x00530053
 800fd88:	015b0053 	.word	0x015b0053
 800fd8c:	015b0053 	.word	0x015b0053
 800fd90:	00530053 	.word	0x00530053
 800fd94:	011f      	.short	0x011f
                        platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 800fd96:	2201      	movs	r2, #1
 800fd98:	2104      	movs	r1, #4
 800fd9a:	488f      	ldr	r0, [pc, #572]	@ (800ffd8 <demoCycle+0x2f8>)
 800fd9c:	f7f5 f874 	bl	8004e88 <HAL_GPIO_WritePin>
                        switch( nfcDevice->dev.nfca.type )
 800fda0:	6823      	ldr	r3, [r4, #0]
 800fda2:	785a      	ldrb	r2, [r3, #1]
 800fda4:	7f19      	ldrb	r1, [r3, #28]
 800fda6:	2a20      	cmp	r2, #32
 800fda8:	d058      	beq.n	800fe5c <demoCycle+0x17c>
 800fdaa:	d81e      	bhi.n	800fdea <demoCycle+0x10a>
 800fdac:	2a00      	cmp	r2, #0
 800fdae:	d044      	beq.n	800fe3a <demoCycle+0x15a>
 800fdb0:	2a01      	cmp	r2, #1
 800fdb2:	d02b      	beq.n	800fe0c <demoCycle+0x12c>
                                platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 800fdb4:	6998      	ldr	r0, [r3, #24]
 800fdb6:	f000 f9bb 	bl	8010130 <hex2Str>
 800fdba:	4b8b      	ldr	r3, [pc, #556]	@ (800ffe8 <demoCycle+0x308>)
 800fdbc:	0001      	movs	r1, r0
 800fdbe:	0018      	movs	r0, r3
 800fdc0:	f000 f99c 	bl	80100fc <logUsart>
    err = rfalT2TPollerRead(blockNum, rxBuf, sizeof(rxBuf), &rcvLen);
 800fdc4:	2210      	movs	r2, #16
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	ab08      	add	r3, sp, #32
 800fdca:	a90c      	add	r1, sp, #48	@ 0x30
 800fdcc:	f7fd ff8a 	bl	800dce4 <rfalT2TPollerRead>
    platformLog(" Read Block: %s %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK Data:", (err != RFAL_ERR_NONE) ? "" : hex2Str( rxBuf, RFAL_T2T_READ_DATA_LEN));
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d000      	beq.n	800fdd6 <demoCycle+0xf6>
 800fdd4:	e0df      	b.n	800ff96 <demoCycle+0x2b6>
 800fdd6:	2110      	movs	r1, #16
 800fdd8:	a80c      	add	r0, sp, #48	@ 0x30
    platformLog(" Read Block: %s %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK Data:", (err != RFAL_ERR_NONE) ? "" : hex2Str( &rxBuf[1], DEMO_NFCV_BLOCK_LEN));
 800fdda:	f000 f9a9 	bl	8010130 <hex2Str>
 800fdde:	0002      	movs	r2, r0
 800fde0:	4982      	ldr	r1, [pc, #520]	@ (800ffec <demoCycle+0x30c>)
 800fde2:	4883      	ldr	r0, [pc, #524]	@ (800fff0 <demoCycle+0x310>)
 800fde4:	f000 f98a 	bl	80100fc <logUsart>
                        break;
 800fde8:	e018      	b.n	800fe1c <demoCycle+0x13c>
                        switch( nfcDevice->dev.nfca.type )
 800fdea:	2020      	movs	r0, #32
 800fdec:	4382      	bics	r2, r0
 800fdee:	2a40      	cmp	r2, #64	@ 0x40
 800fdf0:	d1e0      	bne.n	800fdb4 <demoCycle+0xd4>
                                platformLog("NFCA Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 800fdf2:	6998      	ldr	r0, [r3, #24]
 800fdf4:	f000 f99c 	bl	8010130 <hex2Str>
 800fdf8:	4b7e      	ldr	r3, [pc, #504]	@ (800fff4 <demoCycle+0x314>)
 800fdfa:	0001      	movs	r1, r0
 800fdfc:	0018      	movs	r0, r3
 800fdfe:	f000 f97d 	bl	80100fc <logUsart>
                        demoP2P( nfcDevice );
 800fe02:	6823      	ldr	r3, [r4, #0]
 800fe04:	7818      	ldrb	r0, [r3, #0]
 800fe06:	f7ff ff11 	bl	800fc2c <demoP2P.isra.0>
                        break;
 800fe0a:	e007      	b.n	800fe1c <demoCycle+0x13c>
                                platformLog("ISO14443A/Topaz (NFC-A T1T) TAG found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 800fe0c:	6998      	ldr	r0, [r3, #24]
 800fe0e:	f000 f98f 	bl	8010130 <hex2Str>
 800fe12:	4b79      	ldr	r3, [pc, #484]	@ (800fff8 <demoCycle+0x318>)
 800fe14:	0001      	movs	r1, r0
 800fe16:	0018      	movs	r0, r3
 800fe18:	f000 f970 	bl	80100fc <logUsart>
                rfalNfcDeactivate( RFAL_NFC_DEACTIVATE_IDLE );
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	f7fa f8a5 	bl	8009f6c <rfalNfcDeactivate>
                switch( nfcDevice->type )
 800fe22:	22fd      	movs	r2, #253	@ 0xfd
 800fe24:	6823      	ldr	r3, [r4, #0]
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	3b0a      	subs	r3, #10
 800fe2a:	4213      	tst	r3, r2
 800fe2c:	d003      	beq.n	800fe36 <demoCycle+0x156>
                        platformDelay(500); /* Delay before re-starting polling loop to not flood the UART log with re-discovered tags */
 800fe2e:	20fa      	movs	r0, #250	@ 0xfa
 800fe30:	0040      	lsls	r0, r0, #1
 800fe32:	f7f4 fe29 	bl	8004a88 <HAL_Delay>
                state = DEMO_ST_START_DISCOVERY;
 800fe36:	2301      	movs	r3, #1
 800fe38:	e789      	b.n	800fd4e <demoCycle+0x6e>
                                platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 800fe3a:	6998      	ldr	r0, [r3, #24]
 800fe3c:	f000 f978 	bl	8010130 <hex2Str>
 800fe40:	4b69      	ldr	r3, [pc, #420]	@ (800ffe8 <demoCycle+0x308>)
 800fe42:	0001      	movs	r1, r0
 800fe44:	0018      	movs	r0, r3
 800fe46:	f000 f959 	bl	80100fc <logUsart>
																	platformLog("Mifare device detected\r\n");
 800fe4a:	486c      	ldr	r0, [pc, #432]	@ (800fffc <demoCycle+0x31c>)
 800fe4c:	f000 f956 	bl	80100fc <logUsart>
																  demoMifareClassic(nfcDevice->nfcid, nfcDevice->nfcidLen);
 800fe50:	6823      	ldr	r3, [r4, #0]
 800fe52:	7f19      	ldrb	r1, [r3, #28]
 800fe54:	6998      	ldr	r0, [r3, #24]
 800fe56:	f7f0 ff2d 	bl	8000cb4 <demoMifareClassic>
																break;
 800fe5a:	e7df      	b.n	800fe1c <demoCycle+0x13c>
                                platformLog("NFCA Passive ISO-DEP device found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 800fe5c:	6998      	ldr	r0, [r3, #24]
 800fe5e:	f000 f967 	bl	8010130 <hex2Str>
 800fe62:	4b67      	ldr	r3, [pc, #412]	@ (8010000 <demoCycle+0x320>)
 800fe64:	0001      	movs	r1, r0
 800fe66:	0018      	movs	r0, r3
 800fe68:	f000 f948 	bl	80100fc <logUsart>
                            demoAPDU();
 800fe6c:	f7ff fe7a 	bl	800fb64 <demoAPDU>
 800fe70:	e7d4      	b.n	800fe1c <demoCycle+0x13c>
                        platformLog("ISO14443B/NFC-B card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 800fe72:	7f19      	ldrb	r1, [r3, #28]
 800fe74:	6998      	ldr	r0, [r3, #24]
 800fe76:	f000 f95b 	bl	8010130 <hex2Str>
 800fe7a:	4b62      	ldr	r3, [pc, #392]	@ (8010004 <demoCycle+0x324>)
 800fe7c:	0001      	movs	r1, r0
 800fe7e:	0018      	movs	r0, r3
 800fe80:	f000 f93c 	bl	80100fc <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800fe84:	2201      	movs	r2, #1
 800fe86:	2102      	movs	r1, #2
 800fe88:	4853      	ldr	r0, [pc, #332]	@ (800ffd8 <demoCycle+0x2f8>)
 800fe8a:	f7f4 fffd 	bl	8004e88 <HAL_GPIO_WritePin>
                        if( rfalNfcbIsIsoDepSupported( &nfcDevice->dev.nfcb ) )
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	7b1b      	ldrb	r3, [r3, #12]
 800fe92:	07db      	lsls	r3, r3, #31
 800fe94:	d5c2      	bpl.n	800fe1c <demoCycle+0x13c>
 800fe96:	e7e9      	b.n	800fe6c <demoCycle+0x18c>
                        if( rfalNfcfIsNfcDepSupported( &nfcDevice->dev.nfcf ) )
 800fe98:	78da      	ldrb	r2, [r3, #3]
                        platformLog("ISO14443B/NFC-B card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 800fe9a:	6998      	ldr	r0, [r3, #24]
                            platformLog("NFCF Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 800fe9c:	7f19      	ldrb	r1, [r3, #28]
                        if( rfalNfcfIsNfcDepSupported( &nfcDevice->dev.nfcf ) )
 800fe9e:	2a01      	cmp	r2, #1
 800fea0:	d113      	bne.n	800feca <demoCycle+0x1ea>
 800fea2:	791b      	ldrb	r3, [r3, #4]
 800fea4:	2bfe      	cmp	r3, #254	@ 0xfe
 800fea6:	d110      	bne.n	800feca <demoCycle+0x1ea>
                            platformLog("NFCF Passive P2P device found. NFCID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 800fea8:	f000 f942 	bl	8010130 <hex2Str>
 800feac:	4b56      	ldr	r3, [pc, #344]	@ (8010008 <demoCycle+0x328>)
 800feae:	0001      	movs	r1, r0
 800feb0:	0018      	movs	r0, r3
 800feb2:	f000 f923 	bl	80100fc <logUsart>
                            demoP2P( nfcDevice );
 800feb6:	6823      	ldr	r3, [r4, #0]
 800feb8:	7818      	ldrb	r0, [r3, #0]
 800feba:	f7ff feb7 	bl	800fc2c <demoP2P.isra.0>
                        platformLedOn(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 800febe:	2201      	movs	r2, #1
 800fec0:	0011      	movs	r1, r2
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800fec2:	4845      	ldr	r0, [pc, #276]	@ (800ffd8 <demoCycle+0x2f8>)
 800fec4:	f7f4 ffe0 	bl	8004e88 <HAL_GPIO_WritePin>
                        break;
 800fec8:	e7a8      	b.n	800fe1c <demoCycle+0x13c>
                            platformLog("Felica/NFC-F card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 800feca:	f000 f931 	bl	8010130 <hex2Str>
 800fece:	4b4f      	ldr	r3, [pc, #316]	@ (801000c <demoCycle+0x32c>)
 800fed0:	0001      	movs	r1, r0
 800fed2:	0018      	movs	r0, r3
 800fed4:	f000 f912 	bl	80100fc <logUsart>
    rfalNfcfServ               srv = RFAL_NFCF_SERVICECODE_RDWR;
 800fed8:	230a      	movs	r3, #10
 800feda:	aa02      	add	r2, sp, #8
 800fedc:	189b      	adds	r3, r3, r2
 800fede:	2209      	movs	r2, #9
    servBlock.numServ   = 1;                            /* Only one Service to be used           */
 800fee0:	a902      	add	r1, sp, #8
    rfalNfcfServ               srv = RFAL_NFCF_SERVICECODE_RDWR;
 800fee2:	801a      	strh	r2, [r3, #0]
    servBlock.numServ   = 1;                            /* Only one Service to be used           */
 800fee4:	3a08      	subs	r2, #8
 800fee6:	760a      	strb	r2, [r1, #24]
    servBlock.servList  = &srv;                         /* Service Code: NDEF is Read/Writeable  */
 800fee8:	9309      	str	r3, [sp, #36]	@ 0x24
    servBlock.numBlock  = 1;                            /* Only one block to be used             */
 800feea:	000b      	movs	r3, r1
 800feec:	2120      	movs	r1, #32
 800feee:	185b      	adds	r3, r3, r1
 800fef0:	701a      	strb	r2, [r3, #0]
                            demoNfcf( &nfcDevice->dev.nfcf );
 800fef2:	6820      	ldr	r0, [r4, #0]
    servBlock.blockList = bl;
 800fef4:	ab05      	add	r3, sp, #20
    bl[0].conf     = RFAL_NFCF_BLOCKLISTELEM_LEN_BIT;   /* Two-byte Block List Element           */
 800fef6:	3160      	adds	r1, #96	@ 0x60
 800fef8:	7019      	strb	r1, [r3, #0]
    bl[0].blockNum = 0x0001;                            /* Block: NDEF Data                      */
 800fefa:	805a      	strh	r2, [r3, #2]
    servBlock.blockList = bl;
 800fefc:	930b      	str	r3, [sp, #44]	@ 0x2c
    err = rfalNfcfPollerCheck( nfcfDev->sensfRes.NFCID2, &servBlock, buf, sizeof(buf), &rcvLen);
 800fefe:	ab04      	add	r3, sp, #16
 800ff00:	9300      	str	r3, [sp, #0]
 800ff02:	3003      	adds	r0, #3
 800ff04:	2339      	movs	r3, #57	@ 0x39
 800ff06:	aa0c      	add	r2, sp, #48	@ 0x30
 800ff08:	a908      	add	r1, sp, #32
 800ff0a:	f7fd fae3 	bl	800d4d4 <rfalNfcfPollerCheck>
    platformLog(" Check Block: %s Data:  %s \r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( &buf[1], RFAL_NFCF_BLOCK_LEN) );
 800ff0e:	2800      	cmp	r0, #0
 800ff10:	d10b      	bne.n	800ff2a <demoCycle+0x24a>
 800ff12:	ab02      	add	r3, sp, #8
 800ff14:	3029      	adds	r0, #41	@ 0x29
 800ff16:	2110      	movs	r1, #16
 800ff18:	18c0      	adds	r0, r0, r3
 800ff1a:	f000 f909 	bl	8010130 <hex2Str>
 800ff1e:	0002      	movs	r2, r0
 800ff20:	493b      	ldr	r1, [pc, #236]	@ (8010010 <demoCycle+0x330>)
 800ff22:	483c      	ldr	r0, [pc, #240]	@ (8010014 <demoCycle+0x334>)
 800ff24:	f000 f8ea 	bl	80100fc <logUsart>
}
 800ff28:	e7c9      	b.n	800febe <demoCycle+0x1de>
    platformLog(" Check Block: %s Data:  %s \r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK", (err != RFAL_ERR_NONE) ? "" : hex2Str( &buf[1], RFAL_NFCF_BLOCK_LEN) );
 800ff2a:	493b      	ldr	r1, [pc, #236]	@ (8010018 <demoCycle+0x338>)
 800ff2c:	4a3b      	ldr	r2, [pc, #236]	@ (801001c <demoCycle+0x33c>)
 800ff2e:	e7f8      	b.n	800ff22 <demoCycle+0x242>
                            ST_MEMCPY( devUID, nfcDevice->nfcid, nfcDevice->nfcidLen );   /* Copy the UID into local var */
 800ff30:	7f1a      	ldrb	r2, [r3, #28]
 800ff32:	6999      	ldr	r1, [r3, #24]
 800ff34:	a80c      	add	r0, sp, #48	@ 0x30
 800ff36:	f000 f9fb 	bl	8010330 <memcpy>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 800ff3a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ff3c:	001a      	movs	r2, r3
 800ff3e:	2105      	movs	r1, #5
 800ff40:	3901      	subs	r1, #1
 800ff42:	3b01      	subs	r3, #1
 800ff44:	2900      	cmp	r1, #0
 800ff46:	d120      	bne.n	800ff8a <demoCycle+0x2aa>
                            platformLog("ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 800ff48:	3108      	adds	r1, #8
 800ff4a:	a80c      	add	r0, sp, #48	@ 0x30
 800ff4c:	f000 f8f0 	bl	8010130 <hex2Str>
 800ff50:	4b33      	ldr	r3, [pc, #204]	@ (8010020 <demoCycle+0x340>)
 800ff52:	0001      	movs	r1, r0
 800ff54:	0018      	movs	r0, r3
 800ff56:	f000 f8d1 	bl	80100fc <logUsart>
                            platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800ff5a:	2180      	movs	r1, #128	@ 0x80
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	481e      	ldr	r0, [pc, #120]	@ (800ffd8 <demoCycle+0x2f8>)
 800ff60:	00c9      	lsls	r1, r1, #3
 800ff62:	f7f4 ff91 	bl	8004e88 <HAL_GPIO_WritePin>
    err = rfalNfcvPollerReadSingleBlock(reqFlag, uid, blockNum, rxBuf, sizeof(rxBuf), &rcvLen);
 800ff66:	ab05      	add	r3, sp, #20
    uid     = nfcvDev->InvRes.UID;
 800ff68:	6821      	ldr	r1, [r4, #0]
    err = rfalNfcvPollerReadSingleBlock(reqFlag, uid, blockNum, rxBuf, sizeof(rxBuf), &rcvLen);
 800ff6a:	9301      	str	r3, [sp, #4]
 800ff6c:	2307      	movs	r3, #7
 800ff6e:	2201      	movs	r2, #1
 800ff70:	9300      	str	r3, [sp, #0]
 800ff72:	2002      	movs	r0, #2
    uid     = nfcvDev->InvRes.UID;
 800ff74:	3103      	adds	r1, #3
    err = rfalNfcvPollerReadSingleBlock(reqFlag, uid, blockNum, rxBuf, sizeof(rxBuf), &rcvLen);
 800ff76:	ab08      	add	r3, sp, #32
 800ff78:	f7fd fd24 	bl	800d9c4 <rfalNfcvPollerReadSingleBlock>
    platformLog(" Read Block: %s %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK Data:", (err != RFAL_ERR_NONE) ? "" : hex2Str( &rxBuf[1], DEMO_NFCV_BLOCK_LEN));
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d10a      	bne.n	800ff96 <demoCycle+0x2b6>
 800ff80:	3019      	adds	r0, #25
 800ff82:	ab02      	add	r3, sp, #8
 800ff84:	2104      	movs	r1, #4
 800ff86:	18c0      	adds	r0, r0, r3
 800ff88:	e727      	b.n	800fdda <demoCycle+0xfa>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                 /* Reverse the UID for display purposes */
 800ff8a:	7810      	ldrb	r0, [r2, #0]
 800ff8c:	7a1d      	ldrb	r5, [r3, #8]
 800ff8e:	7015      	strb	r5, [r2, #0]
 800ff90:	7218      	strb	r0, [r3, #8]
 800ff92:	3201      	adds	r2, #1
 800ff94:	e7d4      	b.n	800ff40 <demoCycle+0x260>
    platformLog(" Read Block: %s %s\r\n", (err != RFAL_ERR_NONE) ? "FAIL": "OK Data:", (err != RFAL_ERR_NONE) ? "" : hex2Str( &rxBuf[1], DEMO_NFCV_BLOCK_LEN));
 800ff96:	4920      	ldr	r1, [pc, #128]	@ (8010018 <demoCycle+0x338>)
 800ff98:	4a20      	ldr	r2, [pc, #128]	@ (801001c <demoCycle+0x33c>)
 800ff9a:	e722      	b.n	800fde2 <demoCycle+0x102>
                        platformLog("ST25TB card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ));
 800ff9c:	7f19      	ldrb	r1, [r3, #28]
 800ff9e:	6998      	ldr	r0, [r3, #24]
 800ffa0:	f000 f8c6 	bl	8010130 <hex2Str>
 800ffa4:	4b1f      	ldr	r3, [pc, #124]	@ (8010024 <demoCycle+0x344>)
 800ffa6:	0001      	movs	r1, r0
 800ffa8:	0018      	movs	r0, r3
 800ffaa:	f000 f8a7 	bl	80100fc <logUsart>
                        platformLedOn(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800ffae:	2201      	movs	r2, #1
 800ffb0:	2102      	movs	r1, #2
 800ffb2:	e786      	b.n	800fec2 <demoCycle+0x1e2>
                        platformLog("NFC Active P2P device found. NFCID3: %s\r\n", hex2Str(nfcDevice->nfcid, nfcDevice->nfcidLen));
 800ffb4:	7f19      	ldrb	r1, [r3, #28]
 800ffb6:	6998      	ldr	r0, [r3, #24]
 800ffb8:	f000 f8ba 	bl	8010130 <hex2Str>
 800ffbc:	4b1a      	ldr	r3, [pc, #104]	@ (8010028 <demoCycle+0x348>)
 800ffbe:	0001      	movs	r1, r0
 800ffc0:	0018      	movs	r0, r3
 800ffc2:	f000 f89b 	bl	80100fc <logUsart>
                        platformLedOn(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 800ffc6:	2180      	movs	r1, #128	@ 0x80
 800ffc8:	2201      	movs	r2, #1
 800ffca:	4803      	ldr	r0, [pc, #12]	@ (800ffd8 <demoCycle+0x2f8>)
 800ffcc:	0109      	lsls	r1, r1, #4
 800ffce:	f7f4 ff5b 	bl	8004e88 <HAL_GPIO_WritePin>
 800ffd2:	e716      	b.n	800fe02 <demoCycle+0x122>
 800ffd4:	200024b5 	.word	0x200024b5
 800ffd8:	48000400 	.word	0x48000400
 800ffdc:	200024b8 	.word	0x200024b8
 800ffe0:	200024b4 	.word	0x200024b4
 800ffe4:	200024b0 	.word	0x200024b0
 800ffe8:	0801123f 	.word	0x0801123f
 800ffec:	080111f9 	.word	0x080111f9
 800fff0:	080112d6 	.word	0x080112d6
 800fff4:	080112ab 	.word	0x080112ab
 800fff8:	0801120e 	.word	0x0801120e
 800fffc:	08011265 	.word	0x08011265
 8010000:	0801127e 	.word	0x0801127e
 8010004:	080112eb 	.word	0x080112eb
 8010008:	08011311 	.word	0x08011311
 801000c:	0801133c 	.word	0x0801133c
 8010010:	080110ff 	.word	0x080110ff
 8010014:	0801135f 	.word	0x0801135f
 8010018:	08011102 	.word	0x08011102
 801001c:	080110f8 	.word	0x080110f8
 8010020:	0801137d 	.word	0x0801137d
 8010024:	080113a2 	.word	0x080113a2
 8010028:	080113bf 	.word	0x080113bf
                        platformLog("Activated in CE %s mode.\r\n", (nfcDevice->type == RFAL_NFC_POLL_TYPE_NFCA) ? "NFC-A" : "NFC-F");
 801002c:	4926      	ldr	r1, [pc, #152]	@ (80100c8 <demoCycle+0x3e8>)
 801002e:	280a      	cmp	r0, #10
 8010030:	d100      	bne.n	8010034 <demoCycle+0x354>
 8010032:	4926      	ldr	r1, [pc, #152]	@ (80100cc <demoCycle+0x3ec>)
 8010034:	4826      	ldr	r0, [pc, #152]	@ (80100d0 <demoCycle+0x3f0>)
 8010036:	f000 f861 	bl	80100fc <logUsart>
                        platformLedOn( ((nfcDevice->type == RFAL_NFC_POLL_TYPE_NFCA) ? PLATFORM_LED_A_PORT : PLATFORM_LED_F_PORT),
 801003a:	6823      	ldr	r3, [r4, #0]
 801003c:	2101      	movs	r1, #1
 801003e:	781b      	ldrb	r3, [r3, #0]
 8010040:	2b0a      	cmp	r3, #10
 8010042:	d100      	bne.n	8010046 <demoCycle+0x366>
 8010044:	3103      	adds	r1, #3
    ReturnCode err = RFAL_ERR_NONE;
 8010046:	2500      	movs	r5, #0
        switch( rfalNfcGetState() )
 8010048:	2702      	movs	r7, #2
                        platformLedOn( ((nfcDevice->type == RFAL_NFC_POLL_TYPE_NFCA) ? PLATFORM_LED_A_PORT : PLATFORM_LED_F_PORT),
 801004a:	2201      	movs	r2, #1
 801004c:	4821      	ldr	r0, [pc, #132]	@ (80100d4 <demoCycle+0x3f4>)
 801004e:	f7f4 ff1b 	bl	8004e88 <HAL_GPIO_WritePin>
                        demoCE( nfcDevice );
 8010052:	6823      	ldr	r3, [r4, #0]
 8010054:	9303      	str	r3, [sp, #12]
        rfalNfcWorker();
 8010056:	f7fa f927 	bl	800a2a8 <rfalNfcWorker>
        switch( rfalNfcGetState() )
 801005a:	f7f9 ffc9 	bl	8009ff0 <rfalNfcGetState>
 801005e:	281e      	cmp	r0, #30
 8010060:	d020      	beq.n	80100a4 <demoCycle+0x3c4>
 8010062:	d807      	bhi.n	8010074 <demoCycle+0x394>
 8010064:	2802      	cmp	r0, #2
 8010066:	d100      	bne.n	801006a <demoCycle+0x38a>
 8010068:	e6d8      	b.n	800fe1c <demoCycle+0x13c>
    while( (err == RFAL_ERR_NONE) || (err == RFAL_ERR_SLEEP_REQ) );
 801006a:	2d00      	cmp	r5, #0
 801006c:	d0f3      	beq.n	8010056 <demoCycle+0x376>
 801006e:	2d20      	cmp	r5, #32
 8010070:	d0f1      	beq.n	8010056 <demoCycle+0x376>
 8010072:	e6d3      	b.n	800fe1c <demoCycle+0x13c>
        switch( rfalNfcGetState() )
 8010074:	381f      	subs	r0, #31
 8010076:	43b8      	bics	r0, r7
 8010078:	b2c0      	uxtb	r0, r0
 801007a:	2800      	cmp	r0, #0
 801007c:	d1f5      	bne.n	801006a <demoCycle+0x38a>
                txLen = ( (nfcDev->type == RFAL_NFC_POLL_TYPE_NFCA) ? demoCeT4T( rxData, *rcvLen, txBuf, sizeof(txBuf) ) : rfalConvBytesToBits( demoCeT3T( rxData, rfalConvBitsToBytes(*rcvLen), txBuf, sizeof(txBuf) ) ) );
 801007e:	9b08      	ldr	r3, [sp, #32]
 8010080:	9805      	ldr	r0, [sp, #20]
 8010082:	8819      	ldrh	r1, [r3, #0]
 8010084:	9b03      	ldr	r3, [sp, #12]
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	2b0a      	cmp	r3, #10
 801008a:	d114      	bne.n	80100b6 <demoCycle+0x3d6>
 801008c:	338c      	adds	r3, #140	@ 0x8c
 801008e:	aa0c      	add	r2, sp, #48	@ 0x30
 8010090:	f7ff fbac 	bl	800f7ec <demoCeT4T>
 8010094:	0001      	movs	r1, r0
                err   = demoTransceiveBlocking( txBuf, txLen, &rxData, &rcvLen, RFAL_FWT_NONE );
 8010096:	2301      	movs	r3, #1
 8010098:	425b      	negs	r3, r3
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	aa05      	add	r2, sp, #20
 801009e:	ab08      	add	r3, sp, #32
 80100a0:	a80c      	add	r0, sp, #48	@ 0x30
 80100a2:	e004      	b.n	80100ae <demoCycle+0x3ce>
                err = demoTransceiveBlocking( NULL, 0, &rxData, &rcvLen, 0);
 80100a4:	2000      	movs	r0, #0
 80100a6:	0001      	movs	r1, r0
 80100a8:	9000      	str	r0, [sp, #0]
 80100aa:	ab08      	add	r3, sp, #32
 80100ac:	aa05      	add	r2, sp, #20
                err   = demoTransceiveBlocking( txBuf, txLen, &rxData, &rcvLen, RFAL_FWT_NONE );
 80100ae:	f7ff fd4b 	bl	800fb48 <demoTransceiveBlocking>
 80100b2:	0005      	movs	r5, r0
                break;
 80100b4:	e7d9      	b.n	801006a <demoCycle+0x38a>
                txLen = ( (nfcDev->type == RFAL_NFC_POLL_TYPE_NFCA) ? demoCeT4T( rxData, *rcvLen, txBuf, sizeof(txBuf) ) : rfalConvBytesToBits( demoCeT3T( rxData, rfalConvBitsToBytes(*rcvLen), txBuf, sizeof(txBuf) ) ) );
 80100b6:	3107      	adds	r1, #7
 80100b8:	08c9      	lsrs	r1, r1, #3
 80100ba:	2396      	movs	r3, #150	@ 0x96
 80100bc:	aa0c      	add	r2, sp, #48	@ 0x30
 80100be:	f7ff fc63 	bl	800f988 <demoCeT3T>
 80100c2:	00c1      	lsls	r1, r0, #3
 80100c4:	b289      	uxth	r1, r1
 80100c6:	e7e6      	b.n	8010096 <demoCycle+0x3b6>
 80100c8:	08011208 	.word	0x08011208
 80100cc:	08011202 	.word	0x08011202
 80100d0:	080113e9 	.word	0x080113e9
 80100d4:	48000400 	.word	0x48000400

080100d8 <logUsartTx>:
  * @retval others             : HAL status
  *****************************************************************************
  */
uint8_t logUsartTx(uint8_t *data, uint16_t dataLen)
{
  if(pLogUsart == 0)
 80100d8:	4b07      	ldr	r3, [pc, #28]	@ (80100f8 <logUsartTx+0x20>)
{
 80100da:	b570      	push	{r4, r5, r6, lr}
  if(pLogUsart == 0)
 80100dc:	681d      	ldr	r5, [r3, #0]
{
 80100de:	0004      	movs	r4, r0
 80100e0:	000a      	movs	r2, r1
    return ERR_INVALID_HANDLE;
 80100e2:	2026      	movs	r0, #38	@ 0x26
  if(pLogUsart == 0)
 80100e4:	2d00      	cmp	r5, #0
 80100e6:	d005      	beq.n	80100f4 <logUsartTx+0x1c>
 #if (USE_LOGGER == LOGGER_ON)
  {
    return HAL_UART_Transmit(pLogUsart, data, dataLen, USART_TIMEOUT);
 80100e8:	23fa      	movs	r3, #250	@ 0xfa
 80100ea:	0021      	movs	r1, r4
 80100ec:	0028      	movs	r0, r5
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	f7f7 fb0e 	bl	8007710 <HAL_UART_Transmit>
  #else
  {
    return 0;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 80100f4:	bd70      	pop	{r4, r5, r6, pc}
 80100f6:	46c0      	nop			@ (mov r8, r8)
 80100f8:	20000364 	.word	0x20000364

080100fc <logUsart>:
  *
  * @return Number of data sent
  *****************************************************************************
  */
int logUsart(const char* format, ...)
{
 80100fc:	b40f      	push	{r0, r1, r2, r3}
  {
    #define LOG_BUFFER_SIZE 256
    char buf[LOG_BUFFER_SIZE];
    va_list argptr;
    va_start(argptr, format);
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 80100fe:	2180      	movs	r1, #128	@ 0x80
{
 8010100:	b510      	push	{r4, lr}
 8010102:	b0c2      	sub	sp, #264	@ 0x108
 8010104:	ab44      	add	r3, sp, #272	@ 0x110
 8010106:	cb04      	ldmia	r3!, {r2}
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 8010108:	0049      	lsls	r1, r1, #1
 801010a:	a802      	add	r0, sp, #8
    va_start(argptr, format);
 801010c:	9301      	str	r3, [sp, #4]
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 801010e:	f000 f8af 	bl	8010270 <vsniprintf>
 8010112:	0004      	movs	r4, r0
    va_end(argptr);

    /* */
    logUsartTx((uint8_t*)buf, strlen(buf));
 8010114:	a802      	add	r0, sp, #8
 8010116:	f7ef fff7 	bl	8000108 <strlen>
 801011a:	b281      	uxth	r1, r0
 801011c:	a802      	add	r0, sp, #8
 801011e:	f7ff ffdb 	bl	80100d8 <logUsartTx>
  #else
  {
    return 0;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8010122:	0020      	movs	r0, r4
 8010124:	b042      	add	sp, #264	@ 0x108
 8010126:	bc10      	pop	{r4}
 8010128:	bc08      	pop	{r3}
 801012a:	b004      	add	sp, #16
 801012c:	4718      	bx	r3
	...

08010130 <hex2Str>:
  *
  * @return pointer to converted data
  *****************************************************************************
  */
char* hex2Str(unsigned char * data, size_t dataLen)
{
 8010130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  #if (USE_LOGGER == LOGGER_ON)
  {
    unsigned char * pin = data;
    const char * hex = "0123456789ABCDEF";
    char * pout = hexStr[hexStrIdx];
 8010132:	4b19      	ldr	r3, [pc, #100]	@ (8010198 <hex2Str+0x68>)
 8010134:	4a19      	ldr	r2, [pc, #100]	@ (801019c <hex2Str+0x6c>)
 8010136:	781b      	ldrb	r3, [r3, #0]
{
 8010138:	0004      	movs	r4, r0
    char * pout = hexStr[hexStrIdx];
 801013a:	01d8      	lsls	r0, r3, #7
 801013c:	9301      	str	r3, [sp, #4]
 801013e:	1880      	adds	r0, r0, r2
    if( dataLen > (MAX_HEX_STR_LENGTH/2) )
    {
      dataLen = (MAX_HEX_STR_LENGTH/2);
    }

    if(dataLen == 0)
 8010140:	2900      	cmp	r1, #0
 8010142:	d018      	beq.n	8010176 <hex2Str+0x46>
    if( dataLen > (MAX_HEX_STR_LENGTH/2) )
 8010144:	2940      	cmp	r1, #64	@ 0x40
 8010146:	d900      	bls.n	801014a <hex2Str+0x1a>
 8010148:	2140      	movs	r1, #64	@ 0x40
    else
    {
      for(; i < dataLen - 1; ++i)
      {
          *pout++ = hex[(*pin>>4)&0xF];
          *pout++ = hex[(*pin++)&0xF];
 801014a:	270f      	movs	r7, #15
 801014c:	0005      	movs	r5, r0
    if( dataLen > (MAX_HEX_STR_LENGTH/2) )
 801014e:	2200      	movs	r2, #0
          *pout++ = hex[(*pin++)&0xF];
 8010150:	46bc      	mov	ip, r7
          *pout++ = hex[(*pin>>4)&0xF];
 8010152:	4e13      	ldr	r6, [pc, #76]	@ (80101a0 <hex2Str+0x70>)
      for(; i < dataLen - 1; ++i)
 8010154:	3901      	subs	r1, #1
          *pout++ = hex[(*pin>>4)&0xF];
 8010156:	5ca7      	ldrb	r7, [r4, r2]
 8010158:	093f      	lsrs	r7, r7, #4
 801015a:	5df7      	ldrb	r7, [r6, r7]
      for(; i < dataLen - 1; ++i)
 801015c:	4291      	cmp	r1, r2
 801015e:	d812      	bhi.n	8010186 <hex2Str+0x56>
 8010160:	004a      	lsls	r2, r1, #1
 8010162:	1882      	adds	r2, r0, r2
      }
      *pout++ = hex[(*pin>>4)&0xF];
 8010164:	7017      	strb	r7, [r2, #0]
      *pout++ = hex[(*pin)&0xF];
 8010166:	5c61      	ldrb	r1, [r4, r1]
 8010168:	240f      	movs	r4, #15
 801016a:	4021      	ands	r1, r4
 801016c:	5c71      	ldrb	r1, [r6, r1]
 801016e:	7051      	strb	r1, [r2, #1]
      *pout = 0;
 8010170:	2100      	movs	r1, #0
 8010172:	7091      	strb	r1, [r2, #2]
 8010174:	e000      	b.n	8010178 <hex2Str+0x48>
      pout[0] = 0;
 8010176:	7001      	strb	r1, [r0, #0]
    }

    hexStrIdx++;
    hexStrIdx %= MAX_HEX_STR;
 8010178:	2103      	movs	r1, #3
    hexStrIdx++;
 801017a:	9b01      	ldr	r3, [sp, #4]
    hexStrIdx %= MAX_HEX_STR;
 801017c:	4a06      	ldr	r2, [pc, #24]	@ (8010198 <hex2Str+0x68>)
    hexStrIdx++;
 801017e:	3301      	adds	r3, #1
    hexStrIdx %= MAX_HEX_STR;
 8010180:	400b      	ands	r3, r1
 8010182:	7013      	strb	r3, [r2, #0]
  #else
  {
    return NULL;
  }
  #endif /* #if USE_LOGGER == LOGGER_ON */
}
 8010184:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
          *pout++ = hex[(*pin++)&0xF];
 8010186:	4663      	mov	r3, ip
          *pout++ = hex[(*pin>>4)&0xF];
 8010188:	702f      	strb	r7, [r5, #0]
          *pout++ = hex[(*pin++)&0xF];
 801018a:	5ca7      	ldrb	r7, [r4, r2]
 801018c:	3201      	adds	r2, #1
 801018e:	401f      	ands	r7, r3
 8010190:	5df7      	ldrb	r7, [r6, r7]
 8010192:	706f      	strb	r7, [r5, #1]
      for(; i < dataLen - 1; ++i)
 8010194:	3502      	adds	r5, #2
 8010196:	e7de      	b.n	8010156 <hex2Str+0x26>
 8010198:	2000256a 	.word	0x2000256a
 801019c:	2000256b 	.word	0x2000256b
 80101a0:	08011404 	.word	0x08011404

080101a4 <_Error_Handler>:
  */
void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 80101a4:	e7fe      	b.n	80101a4 <_Error_Handler>
	...

080101a8 <sniprintf>:
 80101a8:	b40c      	push	{r2, r3}
 80101aa:	b530      	push	{r4, r5, lr}
 80101ac:	4b18      	ldr	r3, [pc, #96]	@ (8010210 <sniprintf+0x68>)
 80101ae:	000c      	movs	r4, r1
 80101b0:	681d      	ldr	r5, [r3, #0]
 80101b2:	b09d      	sub	sp, #116	@ 0x74
 80101b4:	2900      	cmp	r1, #0
 80101b6:	da08      	bge.n	80101ca <sniprintf+0x22>
 80101b8:	238b      	movs	r3, #139	@ 0x8b
 80101ba:	2001      	movs	r0, #1
 80101bc:	602b      	str	r3, [r5, #0]
 80101be:	4240      	negs	r0, r0
 80101c0:	b01d      	add	sp, #116	@ 0x74
 80101c2:	bc30      	pop	{r4, r5}
 80101c4:	bc08      	pop	{r3}
 80101c6:	b002      	add	sp, #8
 80101c8:	4718      	bx	r3
 80101ca:	2382      	movs	r3, #130	@ 0x82
 80101cc:	466a      	mov	r2, sp
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	8293      	strh	r3, [r2, #20]
 80101d2:	2300      	movs	r3, #0
 80101d4:	9002      	str	r0, [sp, #8]
 80101d6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80101d8:	9006      	str	r0, [sp, #24]
 80101da:	4299      	cmp	r1, r3
 80101dc:	d000      	beq.n	80101e0 <sniprintf+0x38>
 80101de:	1e4b      	subs	r3, r1, #1
 80101e0:	9304      	str	r3, [sp, #16]
 80101e2:	9307      	str	r3, [sp, #28]
 80101e4:	2301      	movs	r3, #1
 80101e6:	466a      	mov	r2, sp
 80101e8:	425b      	negs	r3, r3
 80101ea:	82d3      	strh	r3, [r2, #22]
 80101ec:	0028      	movs	r0, r5
 80101ee:	ab21      	add	r3, sp, #132	@ 0x84
 80101f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80101f2:	a902      	add	r1, sp, #8
 80101f4:	9301      	str	r3, [sp, #4]
 80101f6:	f000 fa01 	bl	80105fc <_svfiprintf_r>
 80101fa:	1c43      	adds	r3, r0, #1
 80101fc:	da01      	bge.n	8010202 <sniprintf+0x5a>
 80101fe:	238b      	movs	r3, #139	@ 0x8b
 8010200:	602b      	str	r3, [r5, #0]
 8010202:	2c00      	cmp	r4, #0
 8010204:	d0dc      	beq.n	80101c0 <sniprintf+0x18>
 8010206:	2200      	movs	r2, #0
 8010208:	9b02      	ldr	r3, [sp, #8]
 801020a:	701a      	strb	r2, [r3, #0]
 801020c:	e7d8      	b.n	80101c0 <sniprintf+0x18>
 801020e:	46c0      	nop			@ (mov r8, r8)
 8010210:	20000368 	.word	0x20000368

08010214 <_vsniprintf_r>:
 8010214:	b530      	push	{r4, r5, lr}
 8010216:	0005      	movs	r5, r0
 8010218:	0014      	movs	r4, r2
 801021a:	0008      	movs	r0, r1
 801021c:	001a      	movs	r2, r3
 801021e:	b09b      	sub	sp, #108	@ 0x6c
 8010220:	2c00      	cmp	r4, #0
 8010222:	da05      	bge.n	8010230 <_vsniprintf_r+0x1c>
 8010224:	238b      	movs	r3, #139	@ 0x8b
 8010226:	2001      	movs	r0, #1
 8010228:	602b      	str	r3, [r5, #0]
 801022a:	4240      	negs	r0, r0
 801022c:	b01b      	add	sp, #108	@ 0x6c
 801022e:	bd30      	pop	{r4, r5, pc}
 8010230:	2382      	movs	r3, #130	@ 0x82
 8010232:	4669      	mov	r1, sp
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	818b      	strh	r3, [r1, #12]
 8010238:	2100      	movs	r1, #0
 801023a:	9000      	str	r0, [sp, #0]
 801023c:	9119      	str	r1, [sp, #100]	@ 0x64
 801023e:	9004      	str	r0, [sp, #16]
 8010240:	428c      	cmp	r4, r1
 8010242:	d000      	beq.n	8010246 <_vsniprintf_r+0x32>
 8010244:	1e61      	subs	r1, r4, #1
 8010246:	2301      	movs	r3, #1
 8010248:	9102      	str	r1, [sp, #8]
 801024a:	9105      	str	r1, [sp, #20]
 801024c:	4669      	mov	r1, sp
 801024e:	425b      	negs	r3, r3
 8010250:	81cb      	strh	r3, [r1, #14]
 8010252:	0028      	movs	r0, r5
 8010254:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010256:	f000 f9d1 	bl	80105fc <_svfiprintf_r>
 801025a:	1c43      	adds	r3, r0, #1
 801025c:	da01      	bge.n	8010262 <_vsniprintf_r+0x4e>
 801025e:	238b      	movs	r3, #139	@ 0x8b
 8010260:	602b      	str	r3, [r5, #0]
 8010262:	2c00      	cmp	r4, #0
 8010264:	d0e2      	beq.n	801022c <_vsniprintf_r+0x18>
 8010266:	2200      	movs	r2, #0
 8010268:	9b00      	ldr	r3, [sp, #0]
 801026a:	701a      	strb	r2, [r3, #0]
 801026c:	e7de      	b.n	801022c <_vsniprintf_r+0x18>
	...

08010270 <vsniprintf>:
 8010270:	b513      	push	{r0, r1, r4, lr}
 8010272:	4c04      	ldr	r4, [pc, #16]	@ (8010284 <vsniprintf+0x14>)
 8010274:	9300      	str	r3, [sp, #0]
 8010276:	0013      	movs	r3, r2
 8010278:	000a      	movs	r2, r1
 801027a:	0001      	movs	r1, r0
 801027c:	6820      	ldr	r0, [r4, #0]
 801027e:	f7ff ffc9 	bl	8010214 <_vsniprintf_r>
 8010282:	bd16      	pop	{r1, r2, r4, pc}
 8010284:	20000368 	.word	0x20000368

08010288 <memcmp>:
 8010288:	b530      	push	{r4, r5, lr}
 801028a:	2400      	movs	r4, #0
 801028c:	3901      	subs	r1, #1
 801028e:	42a2      	cmp	r2, r4
 8010290:	d101      	bne.n	8010296 <memcmp+0xe>
 8010292:	2000      	movs	r0, #0
 8010294:	e005      	b.n	80102a2 <memcmp+0x1a>
 8010296:	5d03      	ldrb	r3, [r0, r4]
 8010298:	3401      	adds	r4, #1
 801029a:	5d0d      	ldrb	r5, [r1, r4]
 801029c:	42ab      	cmp	r3, r5
 801029e:	d0f6      	beq.n	801028e <memcmp+0x6>
 80102a0:	1b58      	subs	r0, r3, r5
 80102a2:	bd30      	pop	{r4, r5, pc}

080102a4 <memmove>:
 80102a4:	b510      	push	{r4, lr}
 80102a6:	4288      	cmp	r0, r1
 80102a8:	d902      	bls.n	80102b0 <memmove+0xc>
 80102aa:	188b      	adds	r3, r1, r2
 80102ac:	4298      	cmp	r0, r3
 80102ae:	d308      	bcc.n	80102c2 <memmove+0x1e>
 80102b0:	2300      	movs	r3, #0
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d007      	beq.n	80102c6 <memmove+0x22>
 80102b6:	5ccc      	ldrb	r4, [r1, r3]
 80102b8:	54c4      	strb	r4, [r0, r3]
 80102ba:	3301      	adds	r3, #1
 80102bc:	e7f9      	b.n	80102b2 <memmove+0xe>
 80102be:	5c8b      	ldrb	r3, [r1, r2]
 80102c0:	5483      	strb	r3, [r0, r2]
 80102c2:	3a01      	subs	r2, #1
 80102c4:	d2fb      	bcs.n	80102be <memmove+0x1a>
 80102c6:	bd10      	pop	{r4, pc}

080102c8 <memset>:
 80102c8:	0003      	movs	r3, r0
 80102ca:	1882      	adds	r2, r0, r2
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d100      	bne.n	80102d2 <memset+0xa>
 80102d0:	4770      	bx	lr
 80102d2:	7019      	strb	r1, [r3, #0]
 80102d4:	3301      	adds	r3, #1
 80102d6:	e7f9      	b.n	80102cc <memset+0x4>

080102d8 <__errno>:
 80102d8:	4b01      	ldr	r3, [pc, #4]	@ (80102e0 <__errno+0x8>)
 80102da:	6818      	ldr	r0, [r3, #0]
 80102dc:	4770      	bx	lr
 80102de:	46c0      	nop			@ (mov r8, r8)
 80102e0:	20000368 	.word	0x20000368

080102e4 <__libc_init_array>:
 80102e4:	b570      	push	{r4, r5, r6, lr}
 80102e6:	2600      	movs	r6, #0
 80102e8:	4c0c      	ldr	r4, [pc, #48]	@ (801031c <__libc_init_array+0x38>)
 80102ea:	4d0d      	ldr	r5, [pc, #52]	@ (8010320 <__libc_init_array+0x3c>)
 80102ec:	1b64      	subs	r4, r4, r5
 80102ee:	10a4      	asrs	r4, r4, #2
 80102f0:	42a6      	cmp	r6, r4
 80102f2:	d109      	bne.n	8010308 <__libc_init_array+0x24>
 80102f4:	2600      	movs	r6, #0
 80102f6:	f000 fc51 	bl	8010b9c <_init>
 80102fa:	4c0a      	ldr	r4, [pc, #40]	@ (8010324 <__libc_init_array+0x40>)
 80102fc:	4d0a      	ldr	r5, [pc, #40]	@ (8010328 <__libc_init_array+0x44>)
 80102fe:	1b64      	subs	r4, r4, r5
 8010300:	10a4      	asrs	r4, r4, #2
 8010302:	42a6      	cmp	r6, r4
 8010304:	d105      	bne.n	8010312 <__libc_init_array+0x2e>
 8010306:	bd70      	pop	{r4, r5, r6, pc}
 8010308:	00b3      	lsls	r3, r6, #2
 801030a:	58eb      	ldr	r3, [r5, r3]
 801030c:	4798      	blx	r3
 801030e:	3601      	adds	r6, #1
 8010310:	e7ee      	b.n	80102f0 <__libc_init_array+0xc>
 8010312:	00b3      	lsls	r3, r6, #2
 8010314:	58eb      	ldr	r3, [r5, r3]
 8010316:	4798      	blx	r3
 8010318:	3601      	adds	r6, #1
 801031a:	e7f2      	b.n	8010302 <__libc_init_array+0x1e>
 801031c:	08011758 	.word	0x08011758
 8010320:	08011758 	.word	0x08011758
 8010324:	0801175c 	.word	0x0801175c
 8010328:	08011758 	.word	0x08011758

0801032c <__retarget_lock_acquire_recursive>:
 801032c:	4770      	bx	lr

0801032e <__retarget_lock_release_recursive>:
 801032e:	4770      	bx	lr

08010330 <memcpy>:
 8010330:	2300      	movs	r3, #0
 8010332:	b510      	push	{r4, lr}
 8010334:	429a      	cmp	r2, r3
 8010336:	d100      	bne.n	801033a <memcpy+0xa>
 8010338:	bd10      	pop	{r4, pc}
 801033a:	5ccc      	ldrb	r4, [r1, r3]
 801033c:	54c4      	strb	r4, [r0, r3]
 801033e:	3301      	adds	r3, #1
 8010340:	e7f8      	b.n	8010334 <memcpy+0x4>
	...

08010344 <_free_r>:
 8010344:	b570      	push	{r4, r5, r6, lr}
 8010346:	0005      	movs	r5, r0
 8010348:	1e0c      	subs	r4, r1, #0
 801034a:	d010      	beq.n	801036e <_free_r+0x2a>
 801034c:	3c04      	subs	r4, #4
 801034e:	6823      	ldr	r3, [r4, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	da00      	bge.n	8010356 <_free_r+0x12>
 8010354:	18e4      	adds	r4, r4, r3
 8010356:	0028      	movs	r0, r5
 8010358:	f000 f8e0 	bl	801051c <__malloc_lock>
 801035c:	4a1d      	ldr	r2, [pc, #116]	@ (80103d4 <_free_r+0x90>)
 801035e:	6813      	ldr	r3, [r2, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d105      	bne.n	8010370 <_free_r+0x2c>
 8010364:	6063      	str	r3, [r4, #4]
 8010366:	6014      	str	r4, [r2, #0]
 8010368:	0028      	movs	r0, r5
 801036a:	f000 f8df 	bl	801052c <__malloc_unlock>
 801036e:	bd70      	pop	{r4, r5, r6, pc}
 8010370:	42a3      	cmp	r3, r4
 8010372:	d908      	bls.n	8010386 <_free_r+0x42>
 8010374:	6820      	ldr	r0, [r4, #0]
 8010376:	1821      	adds	r1, r4, r0
 8010378:	428b      	cmp	r3, r1
 801037a:	d1f3      	bne.n	8010364 <_free_r+0x20>
 801037c:	6819      	ldr	r1, [r3, #0]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	1809      	adds	r1, r1, r0
 8010382:	6021      	str	r1, [r4, #0]
 8010384:	e7ee      	b.n	8010364 <_free_r+0x20>
 8010386:	001a      	movs	r2, r3
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d001      	beq.n	8010392 <_free_r+0x4e>
 801038e:	42a3      	cmp	r3, r4
 8010390:	d9f9      	bls.n	8010386 <_free_r+0x42>
 8010392:	6811      	ldr	r1, [r2, #0]
 8010394:	1850      	adds	r0, r2, r1
 8010396:	42a0      	cmp	r0, r4
 8010398:	d10b      	bne.n	80103b2 <_free_r+0x6e>
 801039a:	6820      	ldr	r0, [r4, #0]
 801039c:	1809      	adds	r1, r1, r0
 801039e:	1850      	adds	r0, r2, r1
 80103a0:	6011      	str	r1, [r2, #0]
 80103a2:	4283      	cmp	r3, r0
 80103a4:	d1e0      	bne.n	8010368 <_free_r+0x24>
 80103a6:	6818      	ldr	r0, [r3, #0]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	1841      	adds	r1, r0, r1
 80103ac:	6011      	str	r1, [r2, #0]
 80103ae:	6053      	str	r3, [r2, #4]
 80103b0:	e7da      	b.n	8010368 <_free_r+0x24>
 80103b2:	42a0      	cmp	r0, r4
 80103b4:	d902      	bls.n	80103bc <_free_r+0x78>
 80103b6:	230c      	movs	r3, #12
 80103b8:	602b      	str	r3, [r5, #0]
 80103ba:	e7d5      	b.n	8010368 <_free_r+0x24>
 80103bc:	6820      	ldr	r0, [r4, #0]
 80103be:	1821      	adds	r1, r4, r0
 80103c0:	428b      	cmp	r3, r1
 80103c2:	d103      	bne.n	80103cc <_free_r+0x88>
 80103c4:	6819      	ldr	r1, [r3, #0]
 80103c6:	685b      	ldr	r3, [r3, #4]
 80103c8:	1809      	adds	r1, r1, r0
 80103ca:	6021      	str	r1, [r4, #0]
 80103cc:	6063      	str	r3, [r4, #4]
 80103ce:	6054      	str	r4, [r2, #4]
 80103d0:	e7ca      	b.n	8010368 <_free_r+0x24>
 80103d2:	46c0      	nop			@ (mov r8, r8)
 80103d4:	200028b8 	.word	0x200028b8

080103d8 <sbrk_aligned>:
 80103d8:	b570      	push	{r4, r5, r6, lr}
 80103da:	4e0f      	ldr	r6, [pc, #60]	@ (8010418 <sbrk_aligned+0x40>)
 80103dc:	000d      	movs	r5, r1
 80103de:	6831      	ldr	r1, [r6, #0]
 80103e0:	0004      	movs	r4, r0
 80103e2:	2900      	cmp	r1, #0
 80103e4:	d102      	bne.n	80103ec <sbrk_aligned+0x14>
 80103e6:	f000 fb83 	bl	8010af0 <_sbrk_r>
 80103ea:	6030      	str	r0, [r6, #0]
 80103ec:	0029      	movs	r1, r5
 80103ee:	0020      	movs	r0, r4
 80103f0:	f000 fb7e 	bl	8010af0 <_sbrk_r>
 80103f4:	1c43      	adds	r3, r0, #1
 80103f6:	d103      	bne.n	8010400 <sbrk_aligned+0x28>
 80103f8:	2501      	movs	r5, #1
 80103fa:	426d      	negs	r5, r5
 80103fc:	0028      	movs	r0, r5
 80103fe:	bd70      	pop	{r4, r5, r6, pc}
 8010400:	2303      	movs	r3, #3
 8010402:	1cc5      	adds	r5, r0, #3
 8010404:	439d      	bics	r5, r3
 8010406:	42a8      	cmp	r0, r5
 8010408:	d0f8      	beq.n	80103fc <sbrk_aligned+0x24>
 801040a:	1a29      	subs	r1, r5, r0
 801040c:	0020      	movs	r0, r4
 801040e:	f000 fb6f 	bl	8010af0 <_sbrk_r>
 8010412:	3001      	adds	r0, #1
 8010414:	d1f2      	bne.n	80103fc <sbrk_aligned+0x24>
 8010416:	e7ef      	b.n	80103f8 <sbrk_aligned+0x20>
 8010418:	200028b4 	.word	0x200028b4

0801041c <_malloc_r>:
 801041c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801041e:	2203      	movs	r2, #3
 8010420:	1ccb      	adds	r3, r1, #3
 8010422:	4393      	bics	r3, r2
 8010424:	3308      	adds	r3, #8
 8010426:	0005      	movs	r5, r0
 8010428:	001f      	movs	r7, r3
 801042a:	2b0c      	cmp	r3, #12
 801042c:	d234      	bcs.n	8010498 <_malloc_r+0x7c>
 801042e:	270c      	movs	r7, #12
 8010430:	42b9      	cmp	r1, r7
 8010432:	d833      	bhi.n	801049c <_malloc_r+0x80>
 8010434:	0028      	movs	r0, r5
 8010436:	f000 f871 	bl	801051c <__malloc_lock>
 801043a:	4e37      	ldr	r6, [pc, #220]	@ (8010518 <_malloc_r+0xfc>)
 801043c:	6833      	ldr	r3, [r6, #0]
 801043e:	001c      	movs	r4, r3
 8010440:	2c00      	cmp	r4, #0
 8010442:	d12f      	bne.n	80104a4 <_malloc_r+0x88>
 8010444:	0039      	movs	r1, r7
 8010446:	0028      	movs	r0, r5
 8010448:	f7ff ffc6 	bl	80103d8 <sbrk_aligned>
 801044c:	0004      	movs	r4, r0
 801044e:	1c43      	adds	r3, r0, #1
 8010450:	d15f      	bne.n	8010512 <_malloc_r+0xf6>
 8010452:	6834      	ldr	r4, [r6, #0]
 8010454:	9400      	str	r4, [sp, #0]
 8010456:	9b00      	ldr	r3, [sp, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d14a      	bne.n	80104f2 <_malloc_r+0xd6>
 801045c:	2c00      	cmp	r4, #0
 801045e:	d052      	beq.n	8010506 <_malloc_r+0xea>
 8010460:	6823      	ldr	r3, [r4, #0]
 8010462:	0028      	movs	r0, r5
 8010464:	18e3      	adds	r3, r4, r3
 8010466:	9900      	ldr	r1, [sp, #0]
 8010468:	9301      	str	r3, [sp, #4]
 801046a:	f000 fb41 	bl	8010af0 <_sbrk_r>
 801046e:	9b01      	ldr	r3, [sp, #4]
 8010470:	4283      	cmp	r3, r0
 8010472:	d148      	bne.n	8010506 <_malloc_r+0xea>
 8010474:	6823      	ldr	r3, [r4, #0]
 8010476:	0028      	movs	r0, r5
 8010478:	1aff      	subs	r7, r7, r3
 801047a:	0039      	movs	r1, r7
 801047c:	f7ff ffac 	bl	80103d8 <sbrk_aligned>
 8010480:	3001      	adds	r0, #1
 8010482:	d040      	beq.n	8010506 <_malloc_r+0xea>
 8010484:	6823      	ldr	r3, [r4, #0]
 8010486:	19db      	adds	r3, r3, r7
 8010488:	6023      	str	r3, [r4, #0]
 801048a:	6833      	ldr	r3, [r6, #0]
 801048c:	685a      	ldr	r2, [r3, #4]
 801048e:	2a00      	cmp	r2, #0
 8010490:	d133      	bne.n	80104fa <_malloc_r+0xde>
 8010492:	9b00      	ldr	r3, [sp, #0]
 8010494:	6033      	str	r3, [r6, #0]
 8010496:	e019      	b.n	80104cc <_malloc_r+0xb0>
 8010498:	2b00      	cmp	r3, #0
 801049a:	dac9      	bge.n	8010430 <_malloc_r+0x14>
 801049c:	230c      	movs	r3, #12
 801049e:	602b      	str	r3, [r5, #0]
 80104a0:	2000      	movs	r0, #0
 80104a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80104a4:	6821      	ldr	r1, [r4, #0]
 80104a6:	1bc9      	subs	r1, r1, r7
 80104a8:	d420      	bmi.n	80104ec <_malloc_r+0xd0>
 80104aa:	290b      	cmp	r1, #11
 80104ac:	d90a      	bls.n	80104c4 <_malloc_r+0xa8>
 80104ae:	19e2      	adds	r2, r4, r7
 80104b0:	6027      	str	r7, [r4, #0]
 80104b2:	42a3      	cmp	r3, r4
 80104b4:	d104      	bne.n	80104c0 <_malloc_r+0xa4>
 80104b6:	6032      	str	r2, [r6, #0]
 80104b8:	6863      	ldr	r3, [r4, #4]
 80104ba:	6011      	str	r1, [r2, #0]
 80104bc:	6053      	str	r3, [r2, #4]
 80104be:	e005      	b.n	80104cc <_malloc_r+0xb0>
 80104c0:	605a      	str	r2, [r3, #4]
 80104c2:	e7f9      	b.n	80104b8 <_malloc_r+0x9c>
 80104c4:	6862      	ldr	r2, [r4, #4]
 80104c6:	42a3      	cmp	r3, r4
 80104c8:	d10e      	bne.n	80104e8 <_malloc_r+0xcc>
 80104ca:	6032      	str	r2, [r6, #0]
 80104cc:	0028      	movs	r0, r5
 80104ce:	f000 f82d 	bl	801052c <__malloc_unlock>
 80104d2:	0020      	movs	r0, r4
 80104d4:	2207      	movs	r2, #7
 80104d6:	300b      	adds	r0, #11
 80104d8:	1d23      	adds	r3, r4, #4
 80104da:	4390      	bics	r0, r2
 80104dc:	1ac2      	subs	r2, r0, r3
 80104de:	4298      	cmp	r0, r3
 80104e0:	d0df      	beq.n	80104a2 <_malloc_r+0x86>
 80104e2:	1a1b      	subs	r3, r3, r0
 80104e4:	50a3      	str	r3, [r4, r2]
 80104e6:	e7dc      	b.n	80104a2 <_malloc_r+0x86>
 80104e8:	605a      	str	r2, [r3, #4]
 80104ea:	e7ef      	b.n	80104cc <_malloc_r+0xb0>
 80104ec:	0023      	movs	r3, r4
 80104ee:	6864      	ldr	r4, [r4, #4]
 80104f0:	e7a6      	b.n	8010440 <_malloc_r+0x24>
 80104f2:	9c00      	ldr	r4, [sp, #0]
 80104f4:	6863      	ldr	r3, [r4, #4]
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	e7ad      	b.n	8010456 <_malloc_r+0x3a>
 80104fa:	001a      	movs	r2, r3
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	42a3      	cmp	r3, r4
 8010500:	d1fb      	bne.n	80104fa <_malloc_r+0xde>
 8010502:	2300      	movs	r3, #0
 8010504:	e7da      	b.n	80104bc <_malloc_r+0xa0>
 8010506:	230c      	movs	r3, #12
 8010508:	0028      	movs	r0, r5
 801050a:	602b      	str	r3, [r5, #0]
 801050c:	f000 f80e 	bl	801052c <__malloc_unlock>
 8010510:	e7c6      	b.n	80104a0 <_malloc_r+0x84>
 8010512:	6007      	str	r7, [r0, #0]
 8010514:	e7da      	b.n	80104cc <_malloc_r+0xb0>
 8010516:	46c0      	nop			@ (mov r8, r8)
 8010518:	200028b8 	.word	0x200028b8

0801051c <__malloc_lock>:
 801051c:	b510      	push	{r4, lr}
 801051e:	4802      	ldr	r0, [pc, #8]	@ (8010528 <__malloc_lock+0xc>)
 8010520:	f7ff ff04 	bl	801032c <__retarget_lock_acquire_recursive>
 8010524:	bd10      	pop	{r4, pc}
 8010526:	46c0      	nop			@ (mov r8, r8)
 8010528:	200028b0 	.word	0x200028b0

0801052c <__malloc_unlock>:
 801052c:	b510      	push	{r4, lr}
 801052e:	4802      	ldr	r0, [pc, #8]	@ (8010538 <__malloc_unlock+0xc>)
 8010530:	f7ff fefd 	bl	801032e <__retarget_lock_release_recursive>
 8010534:	bd10      	pop	{r4, pc}
 8010536:	46c0      	nop			@ (mov r8, r8)
 8010538:	200028b0 	.word	0x200028b0

0801053c <__ssputs_r>:
 801053c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801053e:	688e      	ldr	r6, [r1, #8]
 8010540:	b085      	sub	sp, #20
 8010542:	001f      	movs	r7, r3
 8010544:	000c      	movs	r4, r1
 8010546:	680b      	ldr	r3, [r1, #0]
 8010548:	9002      	str	r0, [sp, #8]
 801054a:	9203      	str	r2, [sp, #12]
 801054c:	42be      	cmp	r6, r7
 801054e:	d830      	bhi.n	80105b2 <__ssputs_r+0x76>
 8010550:	210c      	movs	r1, #12
 8010552:	5e62      	ldrsh	r2, [r4, r1]
 8010554:	2190      	movs	r1, #144	@ 0x90
 8010556:	00c9      	lsls	r1, r1, #3
 8010558:	420a      	tst	r2, r1
 801055a:	d028      	beq.n	80105ae <__ssputs_r+0x72>
 801055c:	2003      	movs	r0, #3
 801055e:	6921      	ldr	r1, [r4, #16]
 8010560:	1a5b      	subs	r3, r3, r1
 8010562:	9301      	str	r3, [sp, #4]
 8010564:	6963      	ldr	r3, [r4, #20]
 8010566:	4343      	muls	r3, r0
 8010568:	9801      	ldr	r0, [sp, #4]
 801056a:	0fdd      	lsrs	r5, r3, #31
 801056c:	18ed      	adds	r5, r5, r3
 801056e:	1c7b      	adds	r3, r7, #1
 8010570:	181b      	adds	r3, r3, r0
 8010572:	106d      	asrs	r5, r5, #1
 8010574:	42ab      	cmp	r3, r5
 8010576:	d900      	bls.n	801057a <__ssputs_r+0x3e>
 8010578:	001d      	movs	r5, r3
 801057a:	0552      	lsls	r2, r2, #21
 801057c:	d528      	bpl.n	80105d0 <__ssputs_r+0x94>
 801057e:	0029      	movs	r1, r5
 8010580:	9802      	ldr	r0, [sp, #8]
 8010582:	f7ff ff4b 	bl	801041c <_malloc_r>
 8010586:	1e06      	subs	r6, r0, #0
 8010588:	d02c      	beq.n	80105e4 <__ssputs_r+0xa8>
 801058a:	9a01      	ldr	r2, [sp, #4]
 801058c:	6921      	ldr	r1, [r4, #16]
 801058e:	f7ff fecf 	bl	8010330 <memcpy>
 8010592:	89a2      	ldrh	r2, [r4, #12]
 8010594:	4b18      	ldr	r3, [pc, #96]	@ (80105f8 <__ssputs_r+0xbc>)
 8010596:	401a      	ands	r2, r3
 8010598:	2380      	movs	r3, #128	@ 0x80
 801059a:	4313      	orrs	r3, r2
 801059c:	81a3      	strh	r3, [r4, #12]
 801059e:	9b01      	ldr	r3, [sp, #4]
 80105a0:	6126      	str	r6, [r4, #16]
 80105a2:	18f6      	adds	r6, r6, r3
 80105a4:	6026      	str	r6, [r4, #0]
 80105a6:	003e      	movs	r6, r7
 80105a8:	6165      	str	r5, [r4, #20]
 80105aa:	1aed      	subs	r5, r5, r3
 80105ac:	60a5      	str	r5, [r4, #8]
 80105ae:	42be      	cmp	r6, r7
 80105b0:	d900      	bls.n	80105b4 <__ssputs_r+0x78>
 80105b2:	003e      	movs	r6, r7
 80105b4:	0032      	movs	r2, r6
 80105b6:	9903      	ldr	r1, [sp, #12]
 80105b8:	6820      	ldr	r0, [r4, #0]
 80105ba:	f7ff fe73 	bl	80102a4 <memmove>
 80105be:	2000      	movs	r0, #0
 80105c0:	68a3      	ldr	r3, [r4, #8]
 80105c2:	1b9b      	subs	r3, r3, r6
 80105c4:	60a3      	str	r3, [r4, #8]
 80105c6:	6823      	ldr	r3, [r4, #0]
 80105c8:	199b      	adds	r3, r3, r6
 80105ca:	6023      	str	r3, [r4, #0]
 80105cc:	b005      	add	sp, #20
 80105ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105d0:	002a      	movs	r2, r5
 80105d2:	9802      	ldr	r0, [sp, #8]
 80105d4:	f000 faa9 	bl	8010b2a <_realloc_r>
 80105d8:	1e06      	subs	r6, r0, #0
 80105da:	d1e0      	bne.n	801059e <__ssputs_r+0x62>
 80105dc:	6921      	ldr	r1, [r4, #16]
 80105de:	9802      	ldr	r0, [sp, #8]
 80105e0:	f7ff feb0 	bl	8010344 <_free_r>
 80105e4:	230c      	movs	r3, #12
 80105e6:	2001      	movs	r0, #1
 80105e8:	9a02      	ldr	r2, [sp, #8]
 80105ea:	4240      	negs	r0, r0
 80105ec:	6013      	str	r3, [r2, #0]
 80105ee:	89a2      	ldrh	r2, [r4, #12]
 80105f0:	3334      	adds	r3, #52	@ 0x34
 80105f2:	4313      	orrs	r3, r2
 80105f4:	81a3      	strh	r3, [r4, #12]
 80105f6:	e7e9      	b.n	80105cc <__ssputs_r+0x90>
 80105f8:	fffffb7f 	.word	0xfffffb7f

080105fc <_svfiprintf_r>:
 80105fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105fe:	b0a1      	sub	sp, #132	@ 0x84
 8010600:	9003      	str	r0, [sp, #12]
 8010602:	001d      	movs	r5, r3
 8010604:	898b      	ldrh	r3, [r1, #12]
 8010606:	000f      	movs	r7, r1
 8010608:	0016      	movs	r6, r2
 801060a:	061b      	lsls	r3, r3, #24
 801060c:	d511      	bpl.n	8010632 <_svfiprintf_r+0x36>
 801060e:	690b      	ldr	r3, [r1, #16]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d10e      	bne.n	8010632 <_svfiprintf_r+0x36>
 8010614:	2140      	movs	r1, #64	@ 0x40
 8010616:	f7ff ff01 	bl	801041c <_malloc_r>
 801061a:	6038      	str	r0, [r7, #0]
 801061c:	6138      	str	r0, [r7, #16]
 801061e:	2800      	cmp	r0, #0
 8010620:	d105      	bne.n	801062e <_svfiprintf_r+0x32>
 8010622:	230c      	movs	r3, #12
 8010624:	9a03      	ldr	r2, [sp, #12]
 8010626:	6013      	str	r3, [r2, #0]
 8010628:	2001      	movs	r0, #1
 801062a:	4240      	negs	r0, r0
 801062c:	e0cf      	b.n	80107ce <_svfiprintf_r+0x1d2>
 801062e:	2340      	movs	r3, #64	@ 0x40
 8010630:	617b      	str	r3, [r7, #20]
 8010632:	2300      	movs	r3, #0
 8010634:	ac08      	add	r4, sp, #32
 8010636:	6163      	str	r3, [r4, #20]
 8010638:	3320      	adds	r3, #32
 801063a:	7663      	strb	r3, [r4, #25]
 801063c:	3310      	adds	r3, #16
 801063e:	76a3      	strb	r3, [r4, #26]
 8010640:	9507      	str	r5, [sp, #28]
 8010642:	0035      	movs	r5, r6
 8010644:	782b      	ldrb	r3, [r5, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <_svfiprintf_r+0x52>
 801064a:	2b25      	cmp	r3, #37	@ 0x25
 801064c:	d148      	bne.n	80106e0 <_svfiprintf_r+0xe4>
 801064e:	1bab      	subs	r3, r5, r6
 8010650:	9305      	str	r3, [sp, #20]
 8010652:	42b5      	cmp	r5, r6
 8010654:	d00b      	beq.n	801066e <_svfiprintf_r+0x72>
 8010656:	0032      	movs	r2, r6
 8010658:	0039      	movs	r1, r7
 801065a:	9803      	ldr	r0, [sp, #12]
 801065c:	f7ff ff6e 	bl	801053c <__ssputs_r>
 8010660:	3001      	adds	r0, #1
 8010662:	d100      	bne.n	8010666 <_svfiprintf_r+0x6a>
 8010664:	e0ae      	b.n	80107c4 <_svfiprintf_r+0x1c8>
 8010666:	6963      	ldr	r3, [r4, #20]
 8010668:	9a05      	ldr	r2, [sp, #20]
 801066a:	189b      	adds	r3, r3, r2
 801066c:	6163      	str	r3, [r4, #20]
 801066e:	782b      	ldrb	r3, [r5, #0]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d100      	bne.n	8010676 <_svfiprintf_r+0x7a>
 8010674:	e0a6      	b.n	80107c4 <_svfiprintf_r+0x1c8>
 8010676:	2201      	movs	r2, #1
 8010678:	2300      	movs	r3, #0
 801067a:	4252      	negs	r2, r2
 801067c:	6062      	str	r2, [r4, #4]
 801067e:	a904      	add	r1, sp, #16
 8010680:	3254      	adds	r2, #84	@ 0x54
 8010682:	1852      	adds	r2, r2, r1
 8010684:	1c6e      	adds	r6, r5, #1
 8010686:	6023      	str	r3, [r4, #0]
 8010688:	60e3      	str	r3, [r4, #12]
 801068a:	60a3      	str	r3, [r4, #8]
 801068c:	7013      	strb	r3, [r2, #0]
 801068e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010690:	4b54      	ldr	r3, [pc, #336]	@ (80107e4 <_svfiprintf_r+0x1e8>)
 8010692:	2205      	movs	r2, #5
 8010694:	0018      	movs	r0, r3
 8010696:	7831      	ldrb	r1, [r6, #0]
 8010698:	9305      	str	r3, [sp, #20]
 801069a:	f000 fa3b 	bl	8010b14 <memchr>
 801069e:	1c75      	adds	r5, r6, #1
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d11f      	bne.n	80106e4 <_svfiprintf_r+0xe8>
 80106a4:	6822      	ldr	r2, [r4, #0]
 80106a6:	06d3      	lsls	r3, r2, #27
 80106a8:	d504      	bpl.n	80106b4 <_svfiprintf_r+0xb8>
 80106aa:	2353      	movs	r3, #83	@ 0x53
 80106ac:	a904      	add	r1, sp, #16
 80106ae:	185b      	adds	r3, r3, r1
 80106b0:	2120      	movs	r1, #32
 80106b2:	7019      	strb	r1, [r3, #0]
 80106b4:	0713      	lsls	r3, r2, #28
 80106b6:	d504      	bpl.n	80106c2 <_svfiprintf_r+0xc6>
 80106b8:	2353      	movs	r3, #83	@ 0x53
 80106ba:	a904      	add	r1, sp, #16
 80106bc:	185b      	adds	r3, r3, r1
 80106be:	212b      	movs	r1, #43	@ 0x2b
 80106c0:	7019      	strb	r1, [r3, #0]
 80106c2:	7833      	ldrb	r3, [r6, #0]
 80106c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80106c6:	d016      	beq.n	80106f6 <_svfiprintf_r+0xfa>
 80106c8:	0035      	movs	r5, r6
 80106ca:	2100      	movs	r1, #0
 80106cc:	200a      	movs	r0, #10
 80106ce:	68e3      	ldr	r3, [r4, #12]
 80106d0:	782a      	ldrb	r2, [r5, #0]
 80106d2:	1c6e      	adds	r6, r5, #1
 80106d4:	3a30      	subs	r2, #48	@ 0x30
 80106d6:	2a09      	cmp	r2, #9
 80106d8:	d950      	bls.n	801077c <_svfiprintf_r+0x180>
 80106da:	2900      	cmp	r1, #0
 80106dc:	d111      	bne.n	8010702 <_svfiprintf_r+0x106>
 80106de:	e017      	b.n	8010710 <_svfiprintf_r+0x114>
 80106e0:	3501      	adds	r5, #1
 80106e2:	e7af      	b.n	8010644 <_svfiprintf_r+0x48>
 80106e4:	9b05      	ldr	r3, [sp, #20]
 80106e6:	6822      	ldr	r2, [r4, #0]
 80106e8:	1ac0      	subs	r0, r0, r3
 80106ea:	2301      	movs	r3, #1
 80106ec:	4083      	lsls	r3, r0
 80106ee:	4313      	orrs	r3, r2
 80106f0:	002e      	movs	r6, r5
 80106f2:	6023      	str	r3, [r4, #0]
 80106f4:	e7cc      	b.n	8010690 <_svfiprintf_r+0x94>
 80106f6:	9b07      	ldr	r3, [sp, #28]
 80106f8:	1d19      	adds	r1, r3, #4
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	9107      	str	r1, [sp, #28]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	db01      	blt.n	8010706 <_svfiprintf_r+0x10a>
 8010702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010704:	e004      	b.n	8010710 <_svfiprintf_r+0x114>
 8010706:	425b      	negs	r3, r3
 8010708:	60e3      	str	r3, [r4, #12]
 801070a:	2302      	movs	r3, #2
 801070c:	4313      	orrs	r3, r2
 801070e:	6023      	str	r3, [r4, #0]
 8010710:	782b      	ldrb	r3, [r5, #0]
 8010712:	2b2e      	cmp	r3, #46	@ 0x2e
 8010714:	d10c      	bne.n	8010730 <_svfiprintf_r+0x134>
 8010716:	786b      	ldrb	r3, [r5, #1]
 8010718:	2b2a      	cmp	r3, #42	@ 0x2a
 801071a:	d134      	bne.n	8010786 <_svfiprintf_r+0x18a>
 801071c:	9b07      	ldr	r3, [sp, #28]
 801071e:	3502      	adds	r5, #2
 8010720:	1d1a      	adds	r2, r3, #4
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	9207      	str	r2, [sp, #28]
 8010726:	2b00      	cmp	r3, #0
 8010728:	da01      	bge.n	801072e <_svfiprintf_r+0x132>
 801072a:	2301      	movs	r3, #1
 801072c:	425b      	negs	r3, r3
 801072e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010730:	4e2d      	ldr	r6, [pc, #180]	@ (80107e8 <_svfiprintf_r+0x1ec>)
 8010732:	2203      	movs	r2, #3
 8010734:	0030      	movs	r0, r6
 8010736:	7829      	ldrb	r1, [r5, #0]
 8010738:	f000 f9ec 	bl	8010b14 <memchr>
 801073c:	2800      	cmp	r0, #0
 801073e:	d006      	beq.n	801074e <_svfiprintf_r+0x152>
 8010740:	2340      	movs	r3, #64	@ 0x40
 8010742:	1b80      	subs	r0, r0, r6
 8010744:	4083      	lsls	r3, r0
 8010746:	6822      	ldr	r2, [r4, #0]
 8010748:	3501      	adds	r5, #1
 801074a:	4313      	orrs	r3, r2
 801074c:	6023      	str	r3, [r4, #0]
 801074e:	7829      	ldrb	r1, [r5, #0]
 8010750:	2206      	movs	r2, #6
 8010752:	4826      	ldr	r0, [pc, #152]	@ (80107ec <_svfiprintf_r+0x1f0>)
 8010754:	1c6e      	adds	r6, r5, #1
 8010756:	7621      	strb	r1, [r4, #24]
 8010758:	f000 f9dc 	bl	8010b14 <memchr>
 801075c:	2800      	cmp	r0, #0
 801075e:	d038      	beq.n	80107d2 <_svfiprintf_r+0x1d6>
 8010760:	4b23      	ldr	r3, [pc, #140]	@ (80107f0 <_svfiprintf_r+0x1f4>)
 8010762:	2b00      	cmp	r3, #0
 8010764:	d122      	bne.n	80107ac <_svfiprintf_r+0x1b0>
 8010766:	2207      	movs	r2, #7
 8010768:	9b07      	ldr	r3, [sp, #28]
 801076a:	3307      	adds	r3, #7
 801076c:	4393      	bics	r3, r2
 801076e:	3308      	adds	r3, #8
 8010770:	9307      	str	r3, [sp, #28]
 8010772:	6963      	ldr	r3, [r4, #20]
 8010774:	9a04      	ldr	r2, [sp, #16]
 8010776:	189b      	adds	r3, r3, r2
 8010778:	6163      	str	r3, [r4, #20]
 801077a:	e762      	b.n	8010642 <_svfiprintf_r+0x46>
 801077c:	4343      	muls	r3, r0
 801077e:	0035      	movs	r5, r6
 8010780:	2101      	movs	r1, #1
 8010782:	189b      	adds	r3, r3, r2
 8010784:	e7a4      	b.n	80106d0 <_svfiprintf_r+0xd4>
 8010786:	2300      	movs	r3, #0
 8010788:	200a      	movs	r0, #10
 801078a:	0019      	movs	r1, r3
 801078c:	3501      	adds	r5, #1
 801078e:	6063      	str	r3, [r4, #4]
 8010790:	782a      	ldrb	r2, [r5, #0]
 8010792:	1c6e      	adds	r6, r5, #1
 8010794:	3a30      	subs	r2, #48	@ 0x30
 8010796:	2a09      	cmp	r2, #9
 8010798:	d903      	bls.n	80107a2 <_svfiprintf_r+0x1a6>
 801079a:	2b00      	cmp	r3, #0
 801079c:	d0c8      	beq.n	8010730 <_svfiprintf_r+0x134>
 801079e:	9109      	str	r1, [sp, #36]	@ 0x24
 80107a0:	e7c6      	b.n	8010730 <_svfiprintf_r+0x134>
 80107a2:	4341      	muls	r1, r0
 80107a4:	0035      	movs	r5, r6
 80107a6:	2301      	movs	r3, #1
 80107a8:	1889      	adds	r1, r1, r2
 80107aa:	e7f1      	b.n	8010790 <_svfiprintf_r+0x194>
 80107ac:	aa07      	add	r2, sp, #28
 80107ae:	9200      	str	r2, [sp, #0]
 80107b0:	0021      	movs	r1, r4
 80107b2:	003a      	movs	r2, r7
 80107b4:	4b0f      	ldr	r3, [pc, #60]	@ (80107f4 <_svfiprintf_r+0x1f8>)
 80107b6:	9803      	ldr	r0, [sp, #12]
 80107b8:	e000      	b.n	80107bc <_svfiprintf_r+0x1c0>
 80107ba:	bf00      	nop
 80107bc:	9004      	str	r0, [sp, #16]
 80107be:	9b04      	ldr	r3, [sp, #16]
 80107c0:	3301      	adds	r3, #1
 80107c2:	d1d6      	bne.n	8010772 <_svfiprintf_r+0x176>
 80107c4:	89bb      	ldrh	r3, [r7, #12]
 80107c6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80107c8:	065b      	lsls	r3, r3, #25
 80107ca:	d500      	bpl.n	80107ce <_svfiprintf_r+0x1d2>
 80107cc:	e72c      	b.n	8010628 <_svfiprintf_r+0x2c>
 80107ce:	b021      	add	sp, #132	@ 0x84
 80107d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107d2:	aa07      	add	r2, sp, #28
 80107d4:	9200      	str	r2, [sp, #0]
 80107d6:	0021      	movs	r1, r4
 80107d8:	003a      	movs	r2, r7
 80107da:	4b06      	ldr	r3, [pc, #24]	@ (80107f4 <_svfiprintf_r+0x1f8>)
 80107dc:	9803      	ldr	r0, [sp, #12]
 80107de:	f000 f87b 	bl	80108d8 <_printf_i>
 80107e2:	e7eb      	b.n	80107bc <_svfiprintf_r+0x1c0>
 80107e4:	08011415 	.word	0x08011415
 80107e8:	0801141b 	.word	0x0801141b
 80107ec:	0801141f 	.word	0x0801141f
 80107f0:	00000000 	.word	0x00000000
 80107f4:	0801053d 	.word	0x0801053d

080107f8 <_printf_common>:
 80107f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107fa:	0016      	movs	r6, r2
 80107fc:	9301      	str	r3, [sp, #4]
 80107fe:	688a      	ldr	r2, [r1, #8]
 8010800:	690b      	ldr	r3, [r1, #16]
 8010802:	000c      	movs	r4, r1
 8010804:	9000      	str	r0, [sp, #0]
 8010806:	4293      	cmp	r3, r2
 8010808:	da00      	bge.n	801080c <_printf_common+0x14>
 801080a:	0013      	movs	r3, r2
 801080c:	0022      	movs	r2, r4
 801080e:	6033      	str	r3, [r6, #0]
 8010810:	3243      	adds	r2, #67	@ 0x43
 8010812:	7812      	ldrb	r2, [r2, #0]
 8010814:	2a00      	cmp	r2, #0
 8010816:	d001      	beq.n	801081c <_printf_common+0x24>
 8010818:	3301      	adds	r3, #1
 801081a:	6033      	str	r3, [r6, #0]
 801081c:	6823      	ldr	r3, [r4, #0]
 801081e:	069b      	lsls	r3, r3, #26
 8010820:	d502      	bpl.n	8010828 <_printf_common+0x30>
 8010822:	6833      	ldr	r3, [r6, #0]
 8010824:	3302      	adds	r3, #2
 8010826:	6033      	str	r3, [r6, #0]
 8010828:	6822      	ldr	r2, [r4, #0]
 801082a:	2306      	movs	r3, #6
 801082c:	0015      	movs	r5, r2
 801082e:	401d      	ands	r5, r3
 8010830:	421a      	tst	r2, r3
 8010832:	d027      	beq.n	8010884 <_printf_common+0x8c>
 8010834:	0023      	movs	r3, r4
 8010836:	3343      	adds	r3, #67	@ 0x43
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	1e5a      	subs	r2, r3, #1
 801083c:	4193      	sbcs	r3, r2
 801083e:	6822      	ldr	r2, [r4, #0]
 8010840:	0692      	lsls	r2, r2, #26
 8010842:	d430      	bmi.n	80108a6 <_printf_common+0xae>
 8010844:	0022      	movs	r2, r4
 8010846:	9901      	ldr	r1, [sp, #4]
 8010848:	9800      	ldr	r0, [sp, #0]
 801084a:	9d08      	ldr	r5, [sp, #32]
 801084c:	3243      	adds	r2, #67	@ 0x43
 801084e:	47a8      	blx	r5
 8010850:	3001      	adds	r0, #1
 8010852:	d025      	beq.n	80108a0 <_printf_common+0xa8>
 8010854:	2206      	movs	r2, #6
 8010856:	6823      	ldr	r3, [r4, #0]
 8010858:	2500      	movs	r5, #0
 801085a:	4013      	ands	r3, r2
 801085c:	2b04      	cmp	r3, #4
 801085e:	d105      	bne.n	801086c <_printf_common+0x74>
 8010860:	6833      	ldr	r3, [r6, #0]
 8010862:	68e5      	ldr	r5, [r4, #12]
 8010864:	1aed      	subs	r5, r5, r3
 8010866:	43eb      	mvns	r3, r5
 8010868:	17db      	asrs	r3, r3, #31
 801086a:	401d      	ands	r5, r3
 801086c:	68a3      	ldr	r3, [r4, #8]
 801086e:	6922      	ldr	r2, [r4, #16]
 8010870:	4293      	cmp	r3, r2
 8010872:	dd01      	ble.n	8010878 <_printf_common+0x80>
 8010874:	1a9b      	subs	r3, r3, r2
 8010876:	18ed      	adds	r5, r5, r3
 8010878:	2600      	movs	r6, #0
 801087a:	42b5      	cmp	r5, r6
 801087c:	d120      	bne.n	80108c0 <_printf_common+0xc8>
 801087e:	2000      	movs	r0, #0
 8010880:	e010      	b.n	80108a4 <_printf_common+0xac>
 8010882:	3501      	adds	r5, #1
 8010884:	68e3      	ldr	r3, [r4, #12]
 8010886:	6832      	ldr	r2, [r6, #0]
 8010888:	1a9b      	subs	r3, r3, r2
 801088a:	42ab      	cmp	r3, r5
 801088c:	ddd2      	ble.n	8010834 <_printf_common+0x3c>
 801088e:	0022      	movs	r2, r4
 8010890:	2301      	movs	r3, #1
 8010892:	9901      	ldr	r1, [sp, #4]
 8010894:	9800      	ldr	r0, [sp, #0]
 8010896:	9f08      	ldr	r7, [sp, #32]
 8010898:	3219      	adds	r2, #25
 801089a:	47b8      	blx	r7
 801089c:	3001      	adds	r0, #1
 801089e:	d1f0      	bne.n	8010882 <_printf_common+0x8a>
 80108a0:	2001      	movs	r0, #1
 80108a2:	4240      	negs	r0, r0
 80108a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80108a6:	2030      	movs	r0, #48	@ 0x30
 80108a8:	18e1      	adds	r1, r4, r3
 80108aa:	3143      	adds	r1, #67	@ 0x43
 80108ac:	7008      	strb	r0, [r1, #0]
 80108ae:	0021      	movs	r1, r4
 80108b0:	1c5a      	adds	r2, r3, #1
 80108b2:	3145      	adds	r1, #69	@ 0x45
 80108b4:	7809      	ldrb	r1, [r1, #0]
 80108b6:	18a2      	adds	r2, r4, r2
 80108b8:	3243      	adds	r2, #67	@ 0x43
 80108ba:	3302      	adds	r3, #2
 80108bc:	7011      	strb	r1, [r2, #0]
 80108be:	e7c1      	b.n	8010844 <_printf_common+0x4c>
 80108c0:	0022      	movs	r2, r4
 80108c2:	2301      	movs	r3, #1
 80108c4:	9901      	ldr	r1, [sp, #4]
 80108c6:	9800      	ldr	r0, [sp, #0]
 80108c8:	9f08      	ldr	r7, [sp, #32]
 80108ca:	321a      	adds	r2, #26
 80108cc:	47b8      	blx	r7
 80108ce:	3001      	adds	r0, #1
 80108d0:	d0e6      	beq.n	80108a0 <_printf_common+0xa8>
 80108d2:	3601      	adds	r6, #1
 80108d4:	e7d1      	b.n	801087a <_printf_common+0x82>
	...

080108d8 <_printf_i>:
 80108d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108da:	b08b      	sub	sp, #44	@ 0x2c
 80108dc:	9206      	str	r2, [sp, #24]
 80108de:	000a      	movs	r2, r1
 80108e0:	3243      	adds	r2, #67	@ 0x43
 80108e2:	9307      	str	r3, [sp, #28]
 80108e4:	9005      	str	r0, [sp, #20]
 80108e6:	9203      	str	r2, [sp, #12]
 80108e8:	7e0a      	ldrb	r2, [r1, #24]
 80108ea:	000c      	movs	r4, r1
 80108ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80108ee:	2a78      	cmp	r2, #120	@ 0x78
 80108f0:	d809      	bhi.n	8010906 <_printf_i+0x2e>
 80108f2:	2a62      	cmp	r2, #98	@ 0x62
 80108f4:	d80b      	bhi.n	801090e <_printf_i+0x36>
 80108f6:	2a00      	cmp	r2, #0
 80108f8:	d100      	bne.n	80108fc <_printf_i+0x24>
 80108fa:	e0ba      	b.n	8010a72 <_printf_i+0x19a>
 80108fc:	497a      	ldr	r1, [pc, #488]	@ (8010ae8 <_printf_i+0x210>)
 80108fe:	9104      	str	r1, [sp, #16]
 8010900:	2a58      	cmp	r2, #88	@ 0x58
 8010902:	d100      	bne.n	8010906 <_printf_i+0x2e>
 8010904:	e08e      	b.n	8010a24 <_printf_i+0x14c>
 8010906:	0025      	movs	r5, r4
 8010908:	3542      	adds	r5, #66	@ 0x42
 801090a:	702a      	strb	r2, [r5, #0]
 801090c:	e022      	b.n	8010954 <_printf_i+0x7c>
 801090e:	0010      	movs	r0, r2
 8010910:	3863      	subs	r0, #99	@ 0x63
 8010912:	2815      	cmp	r0, #21
 8010914:	d8f7      	bhi.n	8010906 <_printf_i+0x2e>
 8010916:	f7ef fc13 	bl	8000140 <__gnu_thumb1_case_shi>
 801091a:	0016      	.short	0x0016
 801091c:	fff6001f 	.word	0xfff6001f
 8010920:	fff6fff6 	.word	0xfff6fff6
 8010924:	001ffff6 	.word	0x001ffff6
 8010928:	fff6fff6 	.word	0xfff6fff6
 801092c:	fff6fff6 	.word	0xfff6fff6
 8010930:	0036009f 	.word	0x0036009f
 8010934:	fff6007e 	.word	0xfff6007e
 8010938:	00b0fff6 	.word	0x00b0fff6
 801093c:	0036fff6 	.word	0x0036fff6
 8010940:	fff6fff6 	.word	0xfff6fff6
 8010944:	0082      	.short	0x0082
 8010946:	0025      	movs	r5, r4
 8010948:	681a      	ldr	r2, [r3, #0]
 801094a:	3542      	adds	r5, #66	@ 0x42
 801094c:	1d11      	adds	r1, r2, #4
 801094e:	6019      	str	r1, [r3, #0]
 8010950:	6813      	ldr	r3, [r2, #0]
 8010952:	702b      	strb	r3, [r5, #0]
 8010954:	2301      	movs	r3, #1
 8010956:	e09e      	b.n	8010a96 <_printf_i+0x1be>
 8010958:	6818      	ldr	r0, [r3, #0]
 801095a:	6809      	ldr	r1, [r1, #0]
 801095c:	1d02      	adds	r2, r0, #4
 801095e:	060d      	lsls	r5, r1, #24
 8010960:	d50b      	bpl.n	801097a <_printf_i+0xa2>
 8010962:	6806      	ldr	r6, [r0, #0]
 8010964:	601a      	str	r2, [r3, #0]
 8010966:	2e00      	cmp	r6, #0
 8010968:	da03      	bge.n	8010972 <_printf_i+0x9a>
 801096a:	232d      	movs	r3, #45	@ 0x2d
 801096c:	9a03      	ldr	r2, [sp, #12]
 801096e:	4276      	negs	r6, r6
 8010970:	7013      	strb	r3, [r2, #0]
 8010972:	4b5d      	ldr	r3, [pc, #372]	@ (8010ae8 <_printf_i+0x210>)
 8010974:	270a      	movs	r7, #10
 8010976:	9304      	str	r3, [sp, #16]
 8010978:	e018      	b.n	80109ac <_printf_i+0xd4>
 801097a:	6806      	ldr	r6, [r0, #0]
 801097c:	601a      	str	r2, [r3, #0]
 801097e:	0649      	lsls	r1, r1, #25
 8010980:	d5f1      	bpl.n	8010966 <_printf_i+0x8e>
 8010982:	b236      	sxth	r6, r6
 8010984:	e7ef      	b.n	8010966 <_printf_i+0x8e>
 8010986:	6808      	ldr	r0, [r1, #0]
 8010988:	6819      	ldr	r1, [r3, #0]
 801098a:	c940      	ldmia	r1!, {r6}
 801098c:	0605      	lsls	r5, r0, #24
 801098e:	d402      	bmi.n	8010996 <_printf_i+0xbe>
 8010990:	0640      	lsls	r0, r0, #25
 8010992:	d500      	bpl.n	8010996 <_printf_i+0xbe>
 8010994:	b2b6      	uxth	r6, r6
 8010996:	6019      	str	r1, [r3, #0]
 8010998:	4b53      	ldr	r3, [pc, #332]	@ (8010ae8 <_printf_i+0x210>)
 801099a:	270a      	movs	r7, #10
 801099c:	9304      	str	r3, [sp, #16]
 801099e:	2a6f      	cmp	r2, #111	@ 0x6f
 80109a0:	d100      	bne.n	80109a4 <_printf_i+0xcc>
 80109a2:	3f02      	subs	r7, #2
 80109a4:	0023      	movs	r3, r4
 80109a6:	2200      	movs	r2, #0
 80109a8:	3343      	adds	r3, #67	@ 0x43
 80109aa:	701a      	strb	r2, [r3, #0]
 80109ac:	6863      	ldr	r3, [r4, #4]
 80109ae:	60a3      	str	r3, [r4, #8]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	db06      	blt.n	80109c2 <_printf_i+0xea>
 80109b4:	2104      	movs	r1, #4
 80109b6:	6822      	ldr	r2, [r4, #0]
 80109b8:	9d03      	ldr	r5, [sp, #12]
 80109ba:	438a      	bics	r2, r1
 80109bc:	6022      	str	r2, [r4, #0]
 80109be:	4333      	orrs	r3, r6
 80109c0:	d00c      	beq.n	80109dc <_printf_i+0x104>
 80109c2:	9d03      	ldr	r5, [sp, #12]
 80109c4:	0030      	movs	r0, r6
 80109c6:	0039      	movs	r1, r7
 80109c8:	f7ef fc54 	bl	8000274 <__aeabi_uidivmod>
 80109cc:	9b04      	ldr	r3, [sp, #16]
 80109ce:	3d01      	subs	r5, #1
 80109d0:	5c5b      	ldrb	r3, [r3, r1]
 80109d2:	702b      	strb	r3, [r5, #0]
 80109d4:	0033      	movs	r3, r6
 80109d6:	0006      	movs	r6, r0
 80109d8:	429f      	cmp	r7, r3
 80109da:	d9f3      	bls.n	80109c4 <_printf_i+0xec>
 80109dc:	2f08      	cmp	r7, #8
 80109de:	d109      	bne.n	80109f4 <_printf_i+0x11c>
 80109e0:	6823      	ldr	r3, [r4, #0]
 80109e2:	07db      	lsls	r3, r3, #31
 80109e4:	d506      	bpl.n	80109f4 <_printf_i+0x11c>
 80109e6:	6862      	ldr	r2, [r4, #4]
 80109e8:	6923      	ldr	r3, [r4, #16]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	dc02      	bgt.n	80109f4 <_printf_i+0x11c>
 80109ee:	2330      	movs	r3, #48	@ 0x30
 80109f0:	3d01      	subs	r5, #1
 80109f2:	702b      	strb	r3, [r5, #0]
 80109f4:	9b03      	ldr	r3, [sp, #12]
 80109f6:	1b5b      	subs	r3, r3, r5
 80109f8:	6123      	str	r3, [r4, #16]
 80109fa:	9b07      	ldr	r3, [sp, #28]
 80109fc:	0021      	movs	r1, r4
 80109fe:	9300      	str	r3, [sp, #0]
 8010a00:	9805      	ldr	r0, [sp, #20]
 8010a02:	9b06      	ldr	r3, [sp, #24]
 8010a04:	aa09      	add	r2, sp, #36	@ 0x24
 8010a06:	f7ff fef7 	bl	80107f8 <_printf_common>
 8010a0a:	3001      	adds	r0, #1
 8010a0c:	d148      	bne.n	8010aa0 <_printf_i+0x1c8>
 8010a0e:	2001      	movs	r0, #1
 8010a10:	4240      	negs	r0, r0
 8010a12:	b00b      	add	sp, #44	@ 0x2c
 8010a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a16:	2220      	movs	r2, #32
 8010a18:	6809      	ldr	r1, [r1, #0]
 8010a1a:	430a      	orrs	r2, r1
 8010a1c:	6022      	str	r2, [r4, #0]
 8010a1e:	2278      	movs	r2, #120	@ 0x78
 8010a20:	4932      	ldr	r1, [pc, #200]	@ (8010aec <_printf_i+0x214>)
 8010a22:	9104      	str	r1, [sp, #16]
 8010a24:	0021      	movs	r1, r4
 8010a26:	3145      	adds	r1, #69	@ 0x45
 8010a28:	700a      	strb	r2, [r1, #0]
 8010a2a:	6819      	ldr	r1, [r3, #0]
 8010a2c:	6822      	ldr	r2, [r4, #0]
 8010a2e:	c940      	ldmia	r1!, {r6}
 8010a30:	0610      	lsls	r0, r2, #24
 8010a32:	d402      	bmi.n	8010a3a <_printf_i+0x162>
 8010a34:	0650      	lsls	r0, r2, #25
 8010a36:	d500      	bpl.n	8010a3a <_printf_i+0x162>
 8010a38:	b2b6      	uxth	r6, r6
 8010a3a:	6019      	str	r1, [r3, #0]
 8010a3c:	07d3      	lsls	r3, r2, #31
 8010a3e:	d502      	bpl.n	8010a46 <_printf_i+0x16e>
 8010a40:	2320      	movs	r3, #32
 8010a42:	4313      	orrs	r3, r2
 8010a44:	6023      	str	r3, [r4, #0]
 8010a46:	2e00      	cmp	r6, #0
 8010a48:	d001      	beq.n	8010a4e <_printf_i+0x176>
 8010a4a:	2710      	movs	r7, #16
 8010a4c:	e7aa      	b.n	80109a4 <_printf_i+0xcc>
 8010a4e:	2220      	movs	r2, #32
 8010a50:	6823      	ldr	r3, [r4, #0]
 8010a52:	4393      	bics	r3, r2
 8010a54:	6023      	str	r3, [r4, #0]
 8010a56:	e7f8      	b.n	8010a4a <_printf_i+0x172>
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	680d      	ldr	r5, [r1, #0]
 8010a5c:	1d10      	adds	r0, r2, #4
 8010a5e:	6949      	ldr	r1, [r1, #20]
 8010a60:	6018      	str	r0, [r3, #0]
 8010a62:	6813      	ldr	r3, [r2, #0]
 8010a64:	062e      	lsls	r6, r5, #24
 8010a66:	d501      	bpl.n	8010a6c <_printf_i+0x194>
 8010a68:	6019      	str	r1, [r3, #0]
 8010a6a:	e002      	b.n	8010a72 <_printf_i+0x19a>
 8010a6c:	066d      	lsls	r5, r5, #25
 8010a6e:	d5fb      	bpl.n	8010a68 <_printf_i+0x190>
 8010a70:	8019      	strh	r1, [r3, #0]
 8010a72:	2300      	movs	r3, #0
 8010a74:	9d03      	ldr	r5, [sp, #12]
 8010a76:	6123      	str	r3, [r4, #16]
 8010a78:	e7bf      	b.n	80109fa <_printf_i+0x122>
 8010a7a:	681a      	ldr	r2, [r3, #0]
 8010a7c:	1d11      	adds	r1, r2, #4
 8010a7e:	6019      	str	r1, [r3, #0]
 8010a80:	6815      	ldr	r5, [r2, #0]
 8010a82:	2100      	movs	r1, #0
 8010a84:	0028      	movs	r0, r5
 8010a86:	6862      	ldr	r2, [r4, #4]
 8010a88:	f000 f844 	bl	8010b14 <memchr>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	d001      	beq.n	8010a94 <_printf_i+0x1bc>
 8010a90:	1b40      	subs	r0, r0, r5
 8010a92:	6060      	str	r0, [r4, #4]
 8010a94:	6863      	ldr	r3, [r4, #4]
 8010a96:	6123      	str	r3, [r4, #16]
 8010a98:	2300      	movs	r3, #0
 8010a9a:	9a03      	ldr	r2, [sp, #12]
 8010a9c:	7013      	strb	r3, [r2, #0]
 8010a9e:	e7ac      	b.n	80109fa <_printf_i+0x122>
 8010aa0:	002a      	movs	r2, r5
 8010aa2:	6923      	ldr	r3, [r4, #16]
 8010aa4:	9906      	ldr	r1, [sp, #24]
 8010aa6:	9805      	ldr	r0, [sp, #20]
 8010aa8:	9d07      	ldr	r5, [sp, #28]
 8010aaa:	47a8      	blx	r5
 8010aac:	3001      	adds	r0, #1
 8010aae:	d0ae      	beq.n	8010a0e <_printf_i+0x136>
 8010ab0:	6823      	ldr	r3, [r4, #0]
 8010ab2:	079b      	lsls	r3, r3, #30
 8010ab4:	d415      	bmi.n	8010ae2 <_printf_i+0x20a>
 8010ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ab8:	68e0      	ldr	r0, [r4, #12]
 8010aba:	4298      	cmp	r0, r3
 8010abc:	daa9      	bge.n	8010a12 <_printf_i+0x13a>
 8010abe:	0018      	movs	r0, r3
 8010ac0:	e7a7      	b.n	8010a12 <_printf_i+0x13a>
 8010ac2:	0022      	movs	r2, r4
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	9906      	ldr	r1, [sp, #24]
 8010ac8:	9805      	ldr	r0, [sp, #20]
 8010aca:	9e07      	ldr	r6, [sp, #28]
 8010acc:	3219      	adds	r2, #25
 8010ace:	47b0      	blx	r6
 8010ad0:	3001      	adds	r0, #1
 8010ad2:	d09c      	beq.n	8010a0e <_printf_i+0x136>
 8010ad4:	3501      	adds	r5, #1
 8010ad6:	68e3      	ldr	r3, [r4, #12]
 8010ad8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ada:	1a9b      	subs	r3, r3, r2
 8010adc:	42ab      	cmp	r3, r5
 8010ade:	dcf0      	bgt.n	8010ac2 <_printf_i+0x1ea>
 8010ae0:	e7e9      	b.n	8010ab6 <_printf_i+0x1de>
 8010ae2:	2500      	movs	r5, #0
 8010ae4:	e7f7      	b.n	8010ad6 <_printf_i+0x1fe>
 8010ae6:	46c0      	nop			@ (mov r8, r8)
 8010ae8:	08011404 	.word	0x08011404
 8010aec:	08011426 	.word	0x08011426

08010af0 <_sbrk_r>:
 8010af0:	2300      	movs	r3, #0
 8010af2:	b570      	push	{r4, r5, r6, lr}
 8010af4:	4d06      	ldr	r5, [pc, #24]	@ (8010b10 <_sbrk_r+0x20>)
 8010af6:	0004      	movs	r4, r0
 8010af8:	0008      	movs	r0, r1
 8010afa:	602b      	str	r3, [r5, #0]
 8010afc:	f7f0 fca8 	bl	8001450 <_sbrk>
 8010b00:	1c43      	adds	r3, r0, #1
 8010b02:	d103      	bne.n	8010b0c <_sbrk_r+0x1c>
 8010b04:	682b      	ldr	r3, [r5, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d000      	beq.n	8010b0c <_sbrk_r+0x1c>
 8010b0a:	6023      	str	r3, [r4, #0]
 8010b0c:	bd70      	pop	{r4, r5, r6, pc}
 8010b0e:	46c0      	nop			@ (mov r8, r8)
 8010b10:	200028ac 	.word	0x200028ac

08010b14 <memchr>:
 8010b14:	b2c9      	uxtb	r1, r1
 8010b16:	1882      	adds	r2, r0, r2
 8010b18:	4290      	cmp	r0, r2
 8010b1a:	d101      	bne.n	8010b20 <memchr+0xc>
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	4770      	bx	lr
 8010b20:	7803      	ldrb	r3, [r0, #0]
 8010b22:	428b      	cmp	r3, r1
 8010b24:	d0fb      	beq.n	8010b1e <memchr+0xa>
 8010b26:	3001      	adds	r0, #1
 8010b28:	e7f6      	b.n	8010b18 <memchr+0x4>

08010b2a <_realloc_r>:
 8010b2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b2c:	0006      	movs	r6, r0
 8010b2e:	000c      	movs	r4, r1
 8010b30:	0015      	movs	r5, r2
 8010b32:	2900      	cmp	r1, #0
 8010b34:	d105      	bne.n	8010b42 <_realloc_r+0x18>
 8010b36:	0011      	movs	r1, r2
 8010b38:	f7ff fc70 	bl	801041c <_malloc_r>
 8010b3c:	0004      	movs	r4, r0
 8010b3e:	0020      	movs	r0, r4
 8010b40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010b42:	2a00      	cmp	r2, #0
 8010b44:	d103      	bne.n	8010b4e <_realloc_r+0x24>
 8010b46:	f7ff fbfd 	bl	8010344 <_free_r>
 8010b4a:	002c      	movs	r4, r5
 8010b4c:	e7f7      	b.n	8010b3e <_realloc_r+0x14>
 8010b4e:	f000 f81c 	bl	8010b8a <_malloc_usable_size_r>
 8010b52:	0007      	movs	r7, r0
 8010b54:	4285      	cmp	r5, r0
 8010b56:	d802      	bhi.n	8010b5e <_realloc_r+0x34>
 8010b58:	0843      	lsrs	r3, r0, #1
 8010b5a:	42ab      	cmp	r3, r5
 8010b5c:	d3ef      	bcc.n	8010b3e <_realloc_r+0x14>
 8010b5e:	0029      	movs	r1, r5
 8010b60:	0030      	movs	r0, r6
 8010b62:	f7ff fc5b 	bl	801041c <_malloc_r>
 8010b66:	9001      	str	r0, [sp, #4]
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d101      	bne.n	8010b70 <_realloc_r+0x46>
 8010b6c:	9c01      	ldr	r4, [sp, #4]
 8010b6e:	e7e6      	b.n	8010b3e <_realloc_r+0x14>
 8010b70:	002a      	movs	r2, r5
 8010b72:	42bd      	cmp	r5, r7
 8010b74:	d900      	bls.n	8010b78 <_realloc_r+0x4e>
 8010b76:	003a      	movs	r2, r7
 8010b78:	0021      	movs	r1, r4
 8010b7a:	9801      	ldr	r0, [sp, #4]
 8010b7c:	f7ff fbd8 	bl	8010330 <memcpy>
 8010b80:	0021      	movs	r1, r4
 8010b82:	0030      	movs	r0, r6
 8010b84:	f7ff fbde 	bl	8010344 <_free_r>
 8010b88:	e7f0      	b.n	8010b6c <_realloc_r+0x42>

08010b8a <_malloc_usable_size_r>:
 8010b8a:	1f0b      	subs	r3, r1, #4
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	1f18      	subs	r0, r3, #4
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	da01      	bge.n	8010b98 <_malloc_usable_size_r+0xe>
 8010b94:	580b      	ldr	r3, [r1, r0]
 8010b96:	18c0      	adds	r0, r0, r3
 8010b98:	4770      	bx	lr
	...

08010b9c <_init>:
 8010b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b9e:	46c0      	nop			@ (mov r8, r8)
 8010ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ba2:	bc08      	pop	{r3}
 8010ba4:	469e      	mov	lr, r3
 8010ba6:	4770      	bx	lr

08010ba8 <_fini>:
 8010ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010baa:	46c0      	nop			@ (mov r8, r8)
 8010bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bae:	bc08      	pop	{r3}
 8010bb0:	469e      	mov	lr, r3
 8010bb2:	4770      	bx	lr
